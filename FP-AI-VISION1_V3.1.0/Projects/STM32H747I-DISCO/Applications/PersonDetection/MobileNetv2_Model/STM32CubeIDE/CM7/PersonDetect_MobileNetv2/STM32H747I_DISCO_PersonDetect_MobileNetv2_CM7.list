
STM32H747I_DISCO_PersonDetect_MobileNetv2_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .isr_vector_m4 00000008  08100000  08100000  000c0000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .rodata2      0000ce1e  08100008  08100008  000c0008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .text         00027fb4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000739c8  08028260  08028260  00038260  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  0809bc28  0809bc28  000abc28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000004  0809bc30  0809bc30  000abc30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0809bc34  0809bc34  000abc34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000078e8  20000000  0809bc38  000b0000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000029c8  20007900  080a3520  000b7900  2**5
                  ALLOC
 10 ._user_heap_stack 00001400  2000a2c8  080a3520  000ba2c8  2**0
                  ALLOC
 11 .axiram_section 0005da00  24000000  24000000  000d0000  2**5
                  ALLOC
 12 .sram_section 000002c0  30000000  30000000  000d0000  2**5
                  ALLOC
 13 .sdram_section 00d3bc40  d0000000  d0000000  000d0000  2**5
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  000cce26  2**0
                  CONTENTS, READONLY
 15 .debug_line   00066de0  00000000  00000000  000cce54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_info   000abbe9  00000000  00000000  00133c34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000d7de  00000000  00000000  001df81d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00002580  00000000  00000000  001ed000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001cf429  00000000  00000000  001ef580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 0000a868  00000000  00000000  003be9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0005653d  00000000  00000000  003c9218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  000516bb  00000000  00000000  0041f755  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000ce  00000000  00000000  00470e10  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00009d64  00000000  00000000  00470ee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .stab         000000cc  00000000  00000000  0047ac44  2**2
                  CONTENTS, READONLY, DEBUGGING
 26 .stabstr      000001b9  00000000  00000000  0047ad10  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20007900 	.word	0x20007900
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0802823c 	.word	0x0802823c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20007904 	.word	0x20007904
 80002dc:	0802823c 	.word	0x0802823c

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b9a2 	b.w	800070c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f83a 	bl	8000448 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__aeabi_f2lz>:
 80003e0:	ee07 0a90 	vmov	s15, r0
 80003e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80003e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003ec:	d401      	bmi.n	80003f2 <__aeabi_f2lz+0x12>
 80003ee:	f000 b80b 	b.w	8000408 <__aeabi_f2ulz>
 80003f2:	eef1 7a67 	vneg.f32	s15, s15
 80003f6:	b508      	push	{r3, lr}
 80003f8:	ee17 0a90 	vmov	r0, s15
 80003fc:	f000 f804 	bl	8000408 <__aeabi_f2ulz>
 8000400:	4240      	negs	r0, r0
 8000402:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000406:	bd08      	pop	{r3, pc}

08000408 <__aeabi_f2ulz>:
 8000408:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000438 <__aeabi_f2ulz+0x30>
 800040c:	ee07 0a90 	vmov	s15, r0
 8000410:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000440 <__aeabi_f2ulz+0x38>
 8000414:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000418:	ee27 6b06 	vmul.f64	d6, d7, d6
 800041c:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 8000420:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000424:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000428:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800042c:	ee16 1a10 	vmov	r1, s12
 8000430:	ee17 0a90 	vmov	r0, s15
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	00000000 	.word	0x00000000
 800043c:	3df00000 	.word	0x3df00000
 8000440:	00000000 	.word	0x00000000
 8000444:	41f00000 	.word	0x41f00000

08000448 <__udivmoddi4>:
 8000448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800044c:	9d08      	ldr	r5, [sp, #32]
 800044e:	4604      	mov	r4, r0
 8000450:	468c      	mov	ip, r1
 8000452:	2b00      	cmp	r3, #0
 8000454:	f040 8083 	bne.w	800055e <__udivmoddi4+0x116>
 8000458:	428a      	cmp	r2, r1
 800045a:	4617      	mov	r7, r2
 800045c:	d947      	bls.n	80004ee <__udivmoddi4+0xa6>
 800045e:	fab2 f282 	clz	r2, r2
 8000462:	b142      	cbz	r2, 8000476 <__udivmoddi4+0x2e>
 8000464:	f1c2 0020 	rsb	r0, r2, #32
 8000468:	fa24 f000 	lsr.w	r0, r4, r0
 800046c:	4091      	lsls	r1, r2
 800046e:	4097      	lsls	r7, r2
 8000470:	ea40 0c01 	orr.w	ip, r0, r1
 8000474:	4094      	lsls	r4, r2
 8000476:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800047a:	0c23      	lsrs	r3, r4, #16
 800047c:	fbbc f6f8 	udiv	r6, ip, r8
 8000480:	fa1f fe87 	uxth.w	lr, r7
 8000484:	fb08 c116 	mls	r1, r8, r6, ip
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f10e 	mul.w	r1, r6, lr
 8000490:	4299      	cmp	r1, r3
 8000492:	d909      	bls.n	80004a8 <__udivmoddi4+0x60>
 8000494:	18fb      	adds	r3, r7, r3
 8000496:	f106 30ff 	add.w	r0, r6, #4294967295
 800049a:	f080 8119 	bcs.w	80006d0 <__udivmoddi4+0x288>
 800049e:	4299      	cmp	r1, r3
 80004a0:	f240 8116 	bls.w	80006d0 <__udivmoddi4+0x288>
 80004a4:	3e02      	subs	r6, #2
 80004a6:	443b      	add	r3, r7
 80004a8:	1a5b      	subs	r3, r3, r1
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80004b0:	fb08 3310 	mls	r3, r8, r0, r3
 80004b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	45a6      	cmp	lr, r4
 80004be:	d909      	bls.n	80004d4 <__udivmoddi4+0x8c>
 80004c0:	193c      	adds	r4, r7, r4
 80004c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c6:	f080 8105 	bcs.w	80006d4 <__udivmoddi4+0x28c>
 80004ca:	45a6      	cmp	lr, r4
 80004cc:	f240 8102 	bls.w	80006d4 <__udivmoddi4+0x28c>
 80004d0:	3802      	subs	r0, #2
 80004d2:	443c      	add	r4, r7
 80004d4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004d8:	eba4 040e 	sub.w	r4, r4, lr
 80004dc:	2600      	movs	r6, #0
 80004de:	b11d      	cbz	r5, 80004e8 <__udivmoddi4+0xa0>
 80004e0:	40d4      	lsrs	r4, r2
 80004e2:	2300      	movs	r3, #0
 80004e4:	e9c5 4300 	strd	r4, r3, [r5]
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	b902      	cbnz	r2, 80004f2 <__udivmoddi4+0xaa>
 80004f0:	deff      	udf	#255	; 0xff
 80004f2:	fab2 f282 	clz	r2, r2
 80004f6:	2a00      	cmp	r2, #0
 80004f8:	d150      	bne.n	800059c <__udivmoddi4+0x154>
 80004fa:	1bcb      	subs	r3, r1, r7
 80004fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000500:	fa1f f887 	uxth.w	r8, r7
 8000504:	2601      	movs	r6, #1
 8000506:	fbb3 fcfe 	udiv	ip, r3, lr
 800050a:	0c21      	lsrs	r1, r4, #16
 800050c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000510:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000514:	fb08 f30c 	mul.w	r3, r8, ip
 8000518:	428b      	cmp	r3, r1
 800051a:	d907      	bls.n	800052c <__udivmoddi4+0xe4>
 800051c:	1879      	adds	r1, r7, r1
 800051e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000522:	d202      	bcs.n	800052a <__udivmoddi4+0xe2>
 8000524:	428b      	cmp	r3, r1
 8000526:	f200 80e9 	bhi.w	80006fc <__udivmoddi4+0x2b4>
 800052a:	4684      	mov	ip, r0
 800052c:	1ac9      	subs	r1, r1, r3
 800052e:	b2a3      	uxth	r3, r4
 8000530:	fbb1 f0fe 	udiv	r0, r1, lr
 8000534:	fb0e 1110 	mls	r1, lr, r0, r1
 8000538:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800053c:	fb08 f800 	mul.w	r8, r8, r0
 8000540:	45a0      	cmp	r8, r4
 8000542:	d907      	bls.n	8000554 <__udivmoddi4+0x10c>
 8000544:	193c      	adds	r4, r7, r4
 8000546:	f100 33ff 	add.w	r3, r0, #4294967295
 800054a:	d202      	bcs.n	8000552 <__udivmoddi4+0x10a>
 800054c:	45a0      	cmp	r8, r4
 800054e:	f200 80d9 	bhi.w	8000704 <__udivmoddi4+0x2bc>
 8000552:	4618      	mov	r0, r3
 8000554:	eba4 0408 	sub.w	r4, r4, r8
 8000558:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800055c:	e7bf      	b.n	80004de <__udivmoddi4+0x96>
 800055e:	428b      	cmp	r3, r1
 8000560:	d909      	bls.n	8000576 <__udivmoddi4+0x12e>
 8000562:	2d00      	cmp	r5, #0
 8000564:	f000 80b1 	beq.w	80006ca <__udivmoddi4+0x282>
 8000568:	2600      	movs	r6, #0
 800056a:	e9c5 0100 	strd	r0, r1, [r5]
 800056e:	4630      	mov	r0, r6
 8000570:	4631      	mov	r1, r6
 8000572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000576:	fab3 f683 	clz	r6, r3
 800057a:	2e00      	cmp	r6, #0
 800057c:	d14a      	bne.n	8000614 <__udivmoddi4+0x1cc>
 800057e:	428b      	cmp	r3, r1
 8000580:	d302      	bcc.n	8000588 <__udivmoddi4+0x140>
 8000582:	4282      	cmp	r2, r0
 8000584:	f200 80b8 	bhi.w	80006f8 <__udivmoddi4+0x2b0>
 8000588:	1a84      	subs	r4, r0, r2
 800058a:	eb61 0103 	sbc.w	r1, r1, r3
 800058e:	2001      	movs	r0, #1
 8000590:	468c      	mov	ip, r1
 8000592:	2d00      	cmp	r5, #0
 8000594:	d0a8      	beq.n	80004e8 <__udivmoddi4+0xa0>
 8000596:	e9c5 4c00 	strd	r4, ip, [r5]
 800059a:	e7a5      	b.n	80004e8 <__udivmoddi4+0xa0>
 800059c:	f1c2 0320 	rsb	r3, r2, #32
 80005a0:	fa20 f603 	lsr.w	r6, r0, r3
 80005a4:	4097      	lsls	r7, r2
 80005a6:	fa01 f002 	lsl.w	r0, r1, r2
 80005aa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005ae:	40d9      	lsrs	r1, r3
 80005b0:	4330      	orrs	r0, r6
 80005b2:	0c03      	lsrs	r3, r0, #16
 80005b4:	fbb1 f6fe 	udiv	r6, r1, lr
 80005b8:	fa1f f887 	uxth.w	r8, r7
 80005bc:	fb0e 1116 	mls	r1, lr, r6, r1
 80005c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005c4:	fb06 f108 	mul.w	r1, r6, r8
 80005c8:	4299      	cmp	r1, r3
 80005ca:	fa04 f402 	lsl.w	r4, r4, r2
 80005ce:	d909      	bls.n	80005e4 <__udivmoddi4+0x19c>
 80005d0:	18fb      	adds	r3, r7, r3
 80005d2:	f106 3cff 	add.w	ip, r6, #4294967295
 80005d6:	f080 808d 	bcs.w	80006f4 <__udivmoddi4+0x2ac>
 80005da:	4299      	cmp	r1, r3
 80005dc:	f240 808a 	bls.w	80006f4 <__udivmoddi4+0x2ac>
 80005e0:	3e02      	subs	r6, #2
 80005e2:	443b      	add	r3, r7
 80005e4:	1a5b      	subs	r3, r3, r1
 80005e6:	b281      	uxth	r1, r0
 80005e8:	fbb3 f0fe 	udiv	r0, r3, lr
 80005ec:	fb0e 3310 	mls	r3, lr, r0, r3
 80005f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005f4:	fb00 f308 	mul.w	r3, r0, r8
 80005f8:	428b      	cmp	r3, r1
 80005fa:	d907      	bls.n	800060c <__udivmoddi4+0x1c4>
 80005fc:	1879      	adds	r1, r7, r1
 80005fe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000602:	d273      	bcs.n	80006ec <__udivmoddi4+0x2a4>
 8000604:	428b      	cmp	r3, r1
 8000606:	d971      	bls.n	80006ec <__udivmoddi4+0x2a4>
 8000608:	3802      	subs	r0, #2
 800060a:	4439      	add	r1, r7
 800060c:	1acb      	subs	r3, r1, r3
 800060e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000612:	e778      	b.n	8000506 <__udivmoddi4+0xbe>
 8000614:	f1c6 0c20 	rsb	ip, r6, #32
 8000618:	fa03 f406 	lsl.w	r4, r3, r6
 800061c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000620:	431c      	orrs	r4, r3
 8000622:	fa20 f70c 	lsr.w	r7, r0, ip
 8000626:	fa01 f306 	lsl.w	r3, r1, r6
 800062a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800062e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000632:	431f      	orrs	r7, r3
 8000634:	0c3b      	lsrs	r3, r7, #16
 8000636:	fbb1 f9fe 	udiv	r9, r1, lr
 800063a:	fa1f f884 	uxth.w	r8, r4
 800063e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000642:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000646:	fb09 fa08 	mul.w	sl, r9, r8
 800064a:	458a      	cmp	sl, r1
 800064c:	fa02 f206 	lsl.w	r2, r2, r6
 8000650:	fa00 f306 	lsl.w	r3, r0, r6
 8000654:	d908      	bls.n	8000668 <__udivmoddi4+0x220>
 8000656:	1861      	adds	r1, r4, r1
 8000658:	f109 30ff 	add.w	r0, r9, #4294967295
 800065c:	d248      	bcs.n	80006f0 <__udivmoddi4+0x2a8>
 800065e:	458a      	cmp	sl, r1
 8000660:	d946      	bls.n	80006f0 <__udivmoddi4+0x2a8>
 8000662:	f1a9 0902 	sub.w	r9, r9, #2
 8000666:	4421      	add	r1, r4
 8000668:	eba1 010a 	sub.w	r1, r1, sl
 800066c:	b2bf      	uxth	r7, r7
 800066e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000672:	fb0e 1110 	mls	r1, lr, r0, r1
 8000676:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800067a:	fb00 f808 	mul.w	r8, r0, r8
 800067e:	45b8      	cmp	r8, r7
 8000680:	d907      	bls.n	8000692 <__udivmoddi4+0x24a>
 8000682:	19e7      	adds	r7, r4, r7
 8000684:	f100 31ff 	add.w	r1, r0, #4294967295
 8000688:	d22e      	bcs.n	80006e8 <__udivmoddi4+0x2a0>
 800068a:	45b8      	cmp	r8, r7
 800068c:	d92c      	bls.n	80006e8 <__udivmoddi4+0x2a0>
 800068e:	3802      	subs	r0, #2
 8000690:	4427      	add	r7, r4
 8000692:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000696:	eba7 0708 	sub.w	r7, r7, r8
 800069a:	fba0 8902 	umull	r8, r9, r0, r2
 800069e:	454f      	cmp	r7, r9
 80006a0:	46c6      	mov	lr, r8
 80006a2:	4649      	mov	r1, r9
 80006a4:	d31a      	bcc.n	80006dc <__udivmoddi4+0x294>
 80006a6:	d017      	beq.n	80006d8 <__udivmoddi4+0x290>
 80006a8:	b15d      	cbz	r5, 80006c2 <__udivmoddi4+0x27a>
 80006aa:	ebb3 020e 	subs.w	r2, r3, lr
 80006ae:	eb67 0701 	sbc.w	r7, r7, r1
 80006b2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80006b6:	40f2      	lsrs	r2, r6
 80006b8:	ea4c 0202 	orr.w	r2, ip, r2
 80006bc:	40f7      	lsrs	r7, r6
 80006be:	e9c5 2700 	strd	r2, r7, [r5]
 80006c2:	2600      	movs	r6, #0
 80006c4:	4631      	mov	r1, r6
 80006c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006ca:	462e      	mov	r6, r5
 80006cc:	4628      	mov	r0, r5
 80006ce:	e70b      	b.n	80004e8 <__udivmoddi4+0xa0>
 80006d0:	4606      	mov	r6, r0
 80006d2:	e6e9      	b.n	80004a8 <__udivmoddi4+0x60>
 80006d4:	4618      	mov	r0, r3
 80006d6:	e6fd      	b.n	80004d4 <__udivmoddi4+0x8c>
 80006d8:	4543      	cmp	r3, r8
 80006da:	d2e5      	bcs.n	80006a8 <__udivmoddi4+0x260>
 80006dc:	ebb8 0e02 	subs.w	lr, r8, r2
 80006e0:	eb69 0104 	sbc.w	r1, r9, r4
 80006e4:	3801      	subs	r0, #1
 80006e6:	e7df      	b.n	80006a8 <__udivmoddi4+0x260>
 80006e8:	4608      	mov	r0, r1
 80006ea:	e7d2      	b.n	8000692 <__udivmoddi4+0x24a>
 80006ec:	4660      	mov	r0, ip
 80006ee:	e78d      	b.n	800060c <__udivmoddi4+0x1c4>
 80006f0:	4681      	mov	r9, r0
 80006f2:	e7b9      	b.n	8000668 <__udivmoddi4+0x220>
 80006f4:	4666      	mov	r6, ip
 80006f6:	e775      	b.n	80005e4 <__udivmoddi4+0x19c>
 80006f8:	4630      	mov	r0, r6
 80006fa:	e74a      	b.n	8000592 <__udivmoddi4+0x14a>
 80006fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000700:	4439      	add	r1, r7
 8000702:	e713      	b.n	800052c <__udivmoddi4+0xe4>
 8000704:	3802      	subs	r0, #2
 8000706:	443c      	add	r4, r7
 8000708:	e724      	b.n	8000554 <__udivmoddi4+0x10c>
 800070a:	bf00      	nop

0800070c <__aeabi_idiv0>:
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop

08000710 <Reset_Handler_m4>:
    .section  .text.Reset_Handler_m4
  .weak  Reset_Handler_m4
  .type  Reset_Handler_m4, %function
Reset_Handler_m4:
 Infinite_Loop:
  b  Infinite_Loop
 8000710:	e7fe      	b.n	8000710 <Reset_Handler_m4>
	...

08000714 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000714:	f8df d034 	ldr.w	sp, [pc, #52]	; 800074c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000718:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800071a:	e003      	b.n	8000724 <LoopCopyDataInit>

0800071c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800071e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000720:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000722:	3104      	adds	r1, #4

08000724 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000724:	480b      	ldr	r0, [pc, #44]	; (8000754 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000726:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000728:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800072a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800072c:	d3f6      	bcc.n	800071c <CopyDataInit>
  ldr  r2, =_sbss
 800072e:	4a0b      	ldr	r2, [pc, #44]	; (800075c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000730:	e002      	b.n	8000738 <LoopFillZerobss>

08000732 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000732:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000734:	f842 3b04 	str.w	r3, [r2], #4

08000738 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000738:	4b09      	ldr	r3, [pc, #36]	; (8000760 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800073a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800073c:	d3f9      	bcc.n	8000732 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800073e:	f006 f879 	bl	8006834 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000742:	f024 fb1f 	bl	8024d84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000746:	f004 fa73 	bl	8004c30 <main>
  bx  lr    
 800074a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800074c:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8000750:	0809bc38 	.word	0x0809bc38
  ldr  r0, =_sdata
 8000754:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000758:	200078e8 	.word	0x200078e8
  ldr  r2, =_sbss
 800075c:	20007900 	.word	0x20007900
  ldr  r3, = _ebss
 8000760:	2000a2c8 	.word	0x2000a2c8

08000764 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000764:	e7fe      	b.n	8000764 <ADC3_IRQHandler>
	...

08000768 <ai_get_input_format>:
 * @brief Returns the input format type
 * @retval ai_size Input format type: quantized (AI_BUFFER_FMT_TYPE_Q) or float (AI_BUFFER_FMT_TYPE_FLOAT)
 */
ai_size ai_get_input_format(void)
{
  ai_buffer_format fmt = AI_BUFFER_FORMAT(&ai_input[0]);
 8000768:	4b02      	ldr	r3, [pc, #8]	; (8000774 <ai_get_input_format+0xc>)
  return AI_BUFFER_FMT_GET_TYPE(fmt);
 800076a:	6818      	ldr	r0, [r3, #0]
}
 800076c:	f3c0 4043 	ubfx	r0, r0, #17, #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	2000791c 	.word	0x2000791c

08000778 <ai_get_output_format>:
 * @brief Returns the output format type
 * @retval ai_size Output format type: quantized (AI_BUFFER_FMT_TYPE_Q) or float (AI_BUFFER_FMT_TYPE_FLOAT)
 */
ai_size ai_get_output_format(void)
{
  ai_buffer_format fmt = AI_BUFFER_FORMAT(&ai_output[0]);
 8000778:	4b02      	ldr	r3, [pc, #8]	; (8000784 <ai_get_output_format+0xc>)
  return AI_BUFFER_FMT_GET_TYPE(fmt);
 800077a:	6818      	ldr	r0, [r3, #0]
}
 800077c:	f3c0 4043 	ubfx	r0, r0, #17, #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	20007938 	.word	0x20007938

08000788 <ai_get_input_quantized_format>:
 * @brief Returns value of the input quantized format
 * @retval ai_size Input quantized format
 */
ai_size ai_get_input_quantized_format(void)
{
  ai_buffer_format fmt = AI_BUFFER_FORMAT(&ai_input[0]);
 8000788:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <ai_get_input_quantized_format+0x18>)
 800078a:	681b      	ldr	r3, [r3, #0]
  return (AI_BUFFER_FMT_GET_BITS(fmt) - AI_BUFFER_FMT_GET_SIGN(fmt) - AI_BUFFER_FMT_GET_FBITS(fmt));
 800078c:	f3c3 52c0 	ubfx	r2, r3, #23, #1
 8000790:	f3c3 10c6 	ubfx	r0, r3, #7, #7
 8000794:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000798:	1a80      	subs	r0, r0, r2
 800079a:	3b40      	subs	r3, #64	; 0x40
}
 800079c:	1ac0      	subs	r0, r0, r3
 800079e:	4770      	bx	lr
 80007a0:	2000791c 	.word	0x2000791c

080007a4 <ai_get_input_quantization_scheme>:
 * @brief Returns value of the scale for the input quantized format
 * @retval ai_size Scale for input quantized format
 */
ai_float ai_get_input_scale(void)
{
  return AI_BUFFER_META_INFO_INTQ_GET_SCALE(ai_input[0].meta_info, 0);
 80007a4:	4a0d      	ldr	r2, [pc, #52]	; (80007dc <ai_get_input_quantization_scheme+0x38>)
 80007a6:	6893      	ldr	r3, [r2, #8]
 80007a8:	b1b3      	cbz	r3, 80007d8 <ai_get_input_quantization_scheme+0x34>
 80007aa:	6818      	ldr	r0, [r3, #0]
 80007ac:	f010 0001 	ands.w	r0, r0, #1
 80007b0:	d013      	beq.n	80007da <ai_get_input_quantization_scheme+0x36>
 80007b2:	6858      	ldr	r0, [r3, #4]
 80007b4:	b188      	cbz	r0, 80007da <ai_get_input_quantization_scheme+0x36>
 80007b6:	6843      	ldr	r3, [r0, #4]
 80007b8:	b173      	cbz	r3, 80007d8 <ai_get_input_quantization_scheme+0x34>
 80007ba:	8840      	ldrh	r0, [r0, #2]
 80007bc:	b168      	cbz	r0, 80007da <ai_get_input_quantization_scheme+0x36>
 80007be:	681b      	ldr	r3, [r3, #0]
  ai_size sign = AI_BUFFER_FMT_GET_SIGN(fmt);  
 80007c0:	6810      	ldr	r0, [r2, #0]
  if(scale==0)
 80007c2:	edd3 7a00 	vldr	s15, [r3]
  ai_size sign = AI_BUFFER_FMT_GET_SIGN(fmt);  
 80007c6:	f3c0 50c0 	ubfx	r0, r0, #23, #1
  if(scale==0)
 80007ca:	eef5 7a40 	vcmp.f32	s15, #0.0
 80007ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007d2:	d001      	beq.n	80007d8 <ai_get_input_quantization_scheme+0x34>
    if(sign==0)
 80007d4:	3001      	adds	r0, #1
 80007d6:	4770      	bx	lr
    return AI_FXP_Q;
 80007d8:	2000      	movs	r0, #0
}
 80007da:	4770      	bx	lr
 80007dc:	2000791c 	.word	0x2000791c

080007e0 <ai_get_output_quantization_scheme>:
 * @brief Returns value of the scale for the output quantized format
 * @retval ai_size Scale for output quantized format
 */
ai_float ai_get_output_scale(void)
{
  return AI_BUFFER_META_INFO_INTQ_GET_SCALE(ai_output[0].meta_info, 0);
 80007e0:	4a0d      	ldr	r2, [pc, #52]	; (8000818 <ai_get_output_quantization_scheme+0x38>)
 80007e2:	6893      	ldr	r3, [r2, #8]
 80007e4:	b1b3      	cbz	r3, 8000814 <ai_get_output_quantization_scheme+0x34>
 80007e6:	6818      	ldr	r0, [r3, #0]
 80007e8:	f010 0001 	ands.w	r0, r0, #1
 80007ec:	d013      	beq.n	8000816 <ai_get_output_quantization_scheme+0x36>
 80007ee:	6858      	ldr	r0, [r3, #4]
 80007f0:	b188      	cbz	r0, 8000816 <ai_get_output_quantization_scheme+0x36>
 80007f2:	6843      	ldr	r3, [r0, #4]
 80007f4:	b173      	cbz	r3, 8000814 <ai_get_output_quantization_scheme+0x34>
 80007f6:	8840      	ldrh	r0, [r0, #2]
 80007f8:	b168      	cbz	r0, 8000816 <ai_get_output_quantization_scheme+0x36>
 80007fa:	681b      	ldr	r3, [r3, #0]
  ai_size sign = AI_BUFFER_FMT_GET_SIGN(fmt);  
 80007fc:	6810      	ldr	r0, [r2, #0]
  if(scale==0)
 80007fe:	edd3 7a00 	vldr	s15, [r3]
  ai_size sign = AI_BUFFER_FMT_GET_SIGN(fmt);  
 8000802:	f3c0 50c0 	ubfx	r0, r0, #23, #1
  if(scale==0)
 8000806:	eef5 7a40 	vcmp.f32	s15, #0.0
 800080a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800080e:	d001      	beq.n	8000814 <ai_get_output_quantization_scheme+0x34>
    if(sign==0)
 8000810:	3001      	adds	r0, #1
 8000812:	4770      	bx	lr
    return AI_FXP_Q;
 8000814:	2000      	movs	r0, #0
}
 8000816:	4770      	bx	lr
 8000818:	20007938 	.word	0x20007938

0800081c <ai_get_output_fxp_scale>:
  fmt_1 = AI_BUFFER_FORMAT(&ai_output[0]);
 800081c:	4a07      	ldr	r2, [pc, #28]	; (800083c <ai_get_output_fxp_scale+0x20>)
  scale = 1.0f / (0x1U << AI_BUFFER_FMT_GET_FBITS(fmt_1));
 800081e:	2301      	movs	r3, #1
 8000820:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000824:	6812      	ldr	r2, [r2, #0]
 8000826:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800082a:	3a40      	subs	r2, #64	; 0x40
 800082c:	4093      	lsls	r3, r2
 800082e:	ee00 3a10 	vmov	s0, r3
 8000832:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
 8000836:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800083a:	4770      	bx	lr
 800083c:	20007938 	.word	0x20007938

08000840 <ai_get_input_scale>:
  return AI_BUFFER_META_INFO_INTQ_GET_SCALE(ai_input[0].meta_info, 0);
 8000840:	4b09      	ldr	r3, [pc, #36]	; (8000868 <ai_get_input_scale+0x28>)
 8000842:	689b      	ldr	r3, [r3, #8]
 8000844:	b163      	cbz	r3, 8000860 <ai_get_input_scale+0x20>
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	07d2      	lsls	r2, r2, #31
 800084a:	d509      	bpl.n	8000860 <ai_get_input_scale+0x20>
 800084c:	685b      	ldr	r3, [r3, #4]
 800084e:	b13b      	cbz	r3, 8000860 <ai_get_input_scale+0x20>
 8000850:	685a      	ldr	r2, [r3, #4]
 8000852:	b12a      	cbz	r2, 8000860 <ai_get_input_scale+0x20>
 8000854:	885b      	ldrh	r3, [r3, #2]
 8000856:	b11b      	cbz	r3, 8000860 <ai_get_input_scale+0x20>
 8000858:	6813      	ldr	r3, [r2, #0]
 800085a:	ed93 0a00 	vldr	s0, [r3]
 800085e:	4770      	bx	lr
 8000860:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800086c <ai_get_input_scale+0x2c>
}
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	2000791c 	.word	0x2000791c
 800086c:	00000000 	.word	0x00000000

08000870 <ai_get_input_zero_point>:
  return AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(ai_input[0].meta_info, 0);
 8000870:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <ai_get_input_zero_point+0x44>)
 8000872:	689a      	ldr	r2, [r3, #8]
 8000874:	b192      	cbz	r2, 800089c <ai_get_input_zero_point+0x2c>
 8000876:	6813      	ldr	r3, [r2, #0]
 8000878:	f013 0001 	ands.w	r0, r3, #1
 800087c:	d00d      	beq.n	800089a <ai_get_input_zero_point+0x2a>
 800087e:	6850      	ldr	r0, [r2, #4]
 8000880:	b158      	cbz	r0, 800089a <ai_get_input_zero_point+0x2a>
 8000882:	8803      	ldrh	r3, [r0, #0]
 8000884:	f013 0f02 	tst.w	r3, #2
 8000888:	6843      	ldr	r3, [r0, #4]
 800088a:	d009      	beq.n	80008a0 <ai_get_input_zero_point+0x30>
 800088c:	b123      	cbz	r3, 8000898 <ai_get_input_zero_point+0x28>
 800088e:	8840      	ldrh	r0, [r0, #2]
 8000890:	b118      	cbz	r0, 800089a <ai_get_input_zero_point+0x2a>
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	7818      	ldrb	r0, [r3, #0]
 8000896:	4770      	bx	lr
 8000898:	4618      	mov	r0, r3
}
 800089a:	4770      	bx	lr
  return AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(ai_input[0].meta_info, 0);
 800089c:	4610      	mov	r0, r2
 800089e:	4770      	bx	lr
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d0f9      	beq.n	8000898 <ai_get_input_zero_point+0x28>
 80008a4:	8840      	ldrh	r0, [r0, #2]
 80008a6:	2800      	cmp	r0, #0
 80008a8:	d0f7      	beq.n	800089a <ai_get_input_zero_point+0x2a>
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	f993 0000 	ldrsb.w	r0, [r3]
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	2000791c 	.word	0x2000791c

080008b8 <ai_get_output_scale>:
  return AI_BUFFER_META_INFO_INTQ_GET_SCALE(ai_output[0].meta_info, 0);
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <ai_get_output_scale+0x28>)
 80008ba:	689b      	ldr	r3, [r3, #8]
 80008bc:	b163      	cbz	r3, 80008d8 <ai_get_output_scale+0x20>
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	07d2      	lsls	r2, r2, #31
 80008c2:	d509      	bpl.n	80008d8 <ai_get_output_scale+0x20>
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	b13b      	cbz	r3, 80008d8 <ai_get_output_scale+0x20>
 80008c8:	685a      	ldr	r2, [r3, #4]
 80008ca:	b12a      	cbz	r2, 80008d8 <ai_get_output_scale+0x20>
 80008cc:	885b      	ldrh	r3, [r3, #2]
 80008ce:	b11b      	cbz	r3, 80008d8 <ai_get_output_scale+0x20>
 80008d0:	6813      	ldr	r3, [r2, #0]
 80008d2:	ed93 0a00 	vldr	s0, [r3]
 80008d6:	4770      	bx	lr
 80008d8:	ed9f 0a02 	vldr	s0, [pc, #8]	; 80008e4 <ai_get_output_scale+0x2c>
}
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	20007938 	.word	0x20007938
 80008e4:	00000000 	.word	0x00000000

080008e8 <ai_get_output_zero_point>:
 * @brief Returns value of the zero point for the output quantized format
 * @retval ai_size Zero point for output quantized format
 */
ai_i32 ai_get_output_zero_point(void)
{
  return AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(ai_output[0].meta_info, 0);
 80008e8:	4b10      	ldr	r3, [pc, #64]	; (800092c <ai_get_output_zero_point+0x44>)
 80008ea:	689a      	ldr	r2, [r3, #8]
 80008ec:	b192      	cbz	r2, 8000914 <ai_get_output_zero_point+0x2c>
 80008ee:	6813      	ldr	r3, [r2, #0]
 80008f0:	f013 0001 	ands.w	r0, r3, #1
 80008f4:	d00d      	beq.n	8000912 <ai_get_output_zero_point+0x2a>
 80008f6:	6850      	ldr	r0, [r2, #4]
 80008f8:	b158      	cbz	r0, 8000912 <ai_get_output_zero_point+0x2a>
 80008fa:	8803      	ldrh	r3, [r0, #0]
 80008fc:	f013 0f02 	tst.w	r3, #2
 8000900:	6843      	ldr	r3, [r0, #4]
 8000902:	d009      	beq.n	8000918 <ai_get_output_zero_point+0x30>
 8000904:	b123      	cbz	r3, 8000910 <ai_get_output_zero_point+0x28>
 8000906:	8840      	ldrh	r0, [r0, #2]
 8000908:	b118      	cbz	r0, 8000912 <ai_get_output_zero_point+0x2a>
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	7818      	ldrb	r0, [r3, #0]
 800090e:	4770      	bx	lr
 8000910:	4618      	mov	r0, r3
}
 8000912:	4770      	bx	lr
  return AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(ai_output[0].meta_info, 0);
 8000914:	4610      	mov	r0, r2
 8000916:	4770      	bx	lr
 8000918:	2b00      	cmp	r3, #0
 800091a:	d0f9      	beq.n	8000910 <ai_get_output_zero_point+0x28>
 800091c:	8840      	ldrh	r0, [r0, #2]
 800091e:	2800      	cmp	r0, #0
 8000920:	d0f7      	beq.n	8000912 <ai_get_output_zero_point+0x2a>
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	f993 0000 	ldrsb.w	r0, [r3]
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	20007938 	.word	0x20007938

08000930 <ai_init>:
 * @brief Initializes the generated C model for a neural network
 * @param  activation_buffer Pointer to the activation buffer (i.e. working buffer used during NN inference)
 * @retval ai_handle
 */
ai_handle ai_init(void* activation_buffer)
{
 8000930:	b5f0      	push	{r4, r5, r6, r7, lr}
  network_handle = AI_HANDLE_NULL;
 8000932:	4c18      	ldr	r4, [pc, #96]	; (8000994 <ai_init+0x64>)
{
 8000934:	b08f      	sub	sp, #60	; 0x3c
  network_handle = AI_HANDLE_NULL;
 8000936:	2100      	movs	r1, #0
{
 8000938:	4606      	mov	r6, r0

  /* Creating the network */
  ai_network_create(&network_handle, AI_NETWORK_DATA_CONFIG);
 800093a:	4620      	mov	r0, r4

  /* Initializing the network */
  ai_network_init(network_handle, &params);
  
  /*Retrieve network descriptor*/
  ai_network_get_info(network_handle, &desc_report);
 800093c:	4d16      	ldr	r5, [pc, #88]	; (8000998 <ai_init+0x68>)
  network_handle = AI_HANDLE_NULL;
 800093e:	6021      	str	r1, [r4, #0]
  ai_network_create(&network_handle, AI_NETWORK_DATA_CONFIG);
 8000940:	f005 fd74 	bl	800642c <ai_network_create>
  const ai_network_params params = AI_NETWORK_PARAMS_INIT(
 8000944:	f005 fdc8 	bl	80064d8 <ai_network_data_weights_get>
 8000948:	4601      	mov	r1, r0
 800094a:	4668      	mov	r0, sp
 800094c:	f005 fdae 	bl	80064ac <ai_network_data_weights_buffer_get>
 8000950:	4631      	mov	r1, r6
 8000952:	a807      	add	r0, sp, #28
  
  /*Copy descriptor info*/
  ai_input[0]= desc_report.inputs[0];
 8000954:	4e11      	ldr	r6, [pc, #68]	; (800099c <ai_init+0x6c>)
  const ai_network_params params = AI_NETWORK_PARAMS_INIT(
 8000956:	f005 fd93 	bl	8006480 <ai_network_data_activations_buffer_get>
  ai_network_init(network_handle, &params);
 800095a:	4669      	mov	r1, sp
 800095c:	6820      	ldr	r0, [r4, #0]
 800095e:	f005 fd75 	bl	800644c <ai_network_init>
  ai_network_get_info(network_handle, &desc_report);
 8000962:	4629      	mov	r1, r5
 8000964:	6820      	ldr	r0, [r4, #0]
 8000966:	f005 fd13 	bl	8006390 <ai_network_get_info>
  ai_input[0]= desc_report.inputs[0];
 800096a:	f8d5 c034 	ldr.w	ip, [r5, #52]	; 0x34
  ai_output[0]= desc_report.outputs[0];
 800096e:	6bad      	ldr	r5, [r5, #56]	; 0x38
  ai_input[0]= desc_report.inputs[0];
 8000970:	4667      	mov	r7, ip
  ai_output[0]= desc_report.outputs[0];
 8000972:	4c0b      	ldr	r4, [pc, #44]	; (80009a0 <ai_init+0x70>)
  ai_input[0]= desc_report.inputs[0];
 8000974:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000976:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000978:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800097c:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  ai_output[0]= desc_report.outputs[0];
 8000980:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000982:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000984:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000988:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  
  return desc_report.inputs->data;
}
 800098c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8000990:	b00f      	add	sp, #60	; 0x3c
 8000992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000994:	200079d0 	.word	0x200079d0
 8000998:	20007954 	.word	0x20007954
 800099c:	2000791c 	.word	0x2000791c
 80009a0:	20007938 	.word	0x20007938

080009a4 <ai_deinit>:

/**
 * @brief De-initializes the generated C model for a neural network
 */
void ai_deinit(void) { ai_network_destroy(network_handle); }
 80009a4:	4b01      	ldr	r3, [pc, #4]	; (80009ac <ai_deinit+0x8>)
 80009a6:	6818      	ldr	r0, [r3, #0]
 80009a8:	f005 bd4e 	b.w	8006448 <ai_network_destroy>
 80009ac:	200079d0 	.word	0x200079d0

080009b0 <ai_run>:
 * @brief  Run an inference of the generated C model for a neural network
 * @param  input   Pointer to the buffer containing the inference input data
 * @param  output  Pointer to the buffer for the inference output data
 */
void ai_run(void* input, void* output)
{
 80009b0:	b538      	push	{r3, r4, r5, lr}
  ai_i32 nbatch;
  
  ai_input[0].data = AI_HANDLE_PTR(input);
  ai_output[0].data = AI_HANDLE_PTR(output);
 80009b2:	4a07      	ldr	r2, [pc, #28]	; (80009d0 <ai_run+0x20>)
{
 80009b4:	460c      	mov	r4, r1
  ai_input[0].data = AI_HANDLE_PTR(input);
 80009b6:	4b07      	ldr	r3, [pc, #28]	; (80009d4 <ai_run+0x24>)
  
  nbatch = ai_network_run(network_handle, &ai_input[0], &ai_output[0]);
 80009b8:	4d07      	ldr	r5, [pc, #28]	; (80009d8 <ai_run+0x28>)
  ai_input[0].data = AI_HANDLE_PTR(input);
 80009ba:	6058      	str	r0, [r3, #4]
  nbatch = ai_network_run(network_handle, &ai_input[0], &ai_output[0]);
 80009bc:	4619      	mov	r1, r3
 80009be:	6828      	ldr	r0, [r5, #0]
  ai_output[0].data = AI_HANDLE_PTR(output);
 80009c0:	6054      	str	r4, [r2, #4]
  nbatch = ai_network_run(network_handle, &ai_input[0], &ai_output[0]);
 80009c2:	f005 fd5b 	bl	800647c <ai_network_run>
  
  if (nbatch != 1) {
 80009c6:	2801      	cmp	r0, #1
 80009c8:	d000      	beq.n	80009cc <ai_run+0x1c>
        while(1);
 80009ca:	e7fe      	b.n	80009ca <ai_run+0x1a>
  }
}
 80009cc:	bd38      	pop	{r3, r4, r5, pc}
 80009ce:	bf00      	nop
 80009d0:	20007938 	.word	0x20007938
 80009d4:	2000791c 	.word	0x2000791c
 80009d8:	200079d0 	.word	0x200079d0

080009dc <AI_Init>:
  * @brief  Initializes the generated C model for a neural network
  * @param  Ai_Context_Ptr Pointer to the AI NN context
  * @retval None
  */
void AI_Init(AiContext_TypeDef* Ai_Context_Ptr)
{
 80009dc:	b570      	push	{r4, r5, r6, lr}
 80009de:	4605      	mov	r5, r0
#ifdef AI_NETWORK_INPUTS_IN_ACTIVATIONS
  void *input_data_ptr;
  
  input_data_ptr =ai_init((void*)(Ai_Context_Ptr->activation_buffer));
 80009e0:	6880      	ldr	r0, [r0, #8]
{
 80009e2:	ed2d 8b02 	vpush	{d8}
 80009e6:	b082      	sub	sp, #8
  input_data_ptr =ai_init((void*)(Ai_Context_Ptr->activation_buffer));
 80009e8:	f7ff ffa2 	bl	8000930 <ai_init>
  
  if(input_data_ptr!= NULL)
 80009ec:	b100      	cbz	r0, 80009f0 <AI_Init+0x14>
    Ai_Context_Ptr->nn_input_buffer=input_data_ptr;
 80009ee:	6068      	str	r0, [r5, #4]
 Ai_Context_Ptr->lut=pixel_conv_lut;
 80009f0:	4c56      	ldr	r4, [pc, #344]	; (8000b4c <AI_Init+0x170>)
  float prepro_scale = Ai_Context_Ptr->nn_input_norm_scale;
 80009f2:	ed95 8a04 	vldr	s16, [r5, #16]
 Ai_Context_Ptr->lut=pixel_conv_lut;
 80009f6:	60ec      	str	r4, [r5, #12]
  int32_t prepro_zp = Ai_Context_Ptr->nn_input_norm_zp;
 80009f8:	696d      	ldr	r5, [r5, #20]
  switch(ai_get_input_quantization_scheme())
 80009fa:	f7ff fed3 	bl	80007a4 <ai_get_input_quantization_scheme>
 80009fe:	2801      	cmp	r0, #1
 8000a00:	d007      	beq.n	8000a12 <AI_Init+0x36>
 8000a02:	2802      	cmp	r0, #2
 8000a04:	d05d      	beq.n	8000ac2 <AI_Init+0xe6>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	d046      	beq.n	8000a98 <AI_Init+0xbc>
  ai_init((void*)(Ai_Context_Ptr->activation_buffer));
#endif
  
  Ai_Context_Init(Ai_Context_Ptr);
  Compute_pix_conv_tab(Ai_Context_Ptr);
}
 8000a0a:	b002      	add	sp, #8
 8000a0c:	ecbd 8b02 	vpop	{d8}
 8000a10:	bd70      	pop	{r4, r5, r6, pc}
    Precompute_8IntU(lut, ai_get_input_scale(), ai_get_input_zero_point(), prepro_scale, prepro_zp);
 8000a12:	f7ff ff15 	bl	8000840 <ai_get_input_scale>
 8000a16:	eef0 8a40 	vmov.f32	s17, s0
 8000a1a:	f7ff ff29 	bl	8000870 <ai_get_input_zero_point>
 8000a1e:	f1c4 0301 	rsb	r3, r4, #1
 8000a22:	1e62      	subs	r2, r4, #1
    *(lut + i) = _CLAMP(zp + _ROUND(tmp * scale, int32_t), 0, 255, uint8_t);
 8000a24:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8000a28:	ee28 8a28 	vmul.f32	s16, s16, s17
    float tmp = (i - zp_prepro) * scale_prepro;
 8000a2c:	1b59      	subs	r1, r3, r5
 8000a2e:	34ff      	adds	r4, #255	; 0xff
    *(lut + i) = _CLAMP(zp + _ROUND(tmp * scale, int32_t), 0, 255, uint8_t);
 8000a30:	b2c6      	uxtb	r6, r0
 8000a32:	e016      	b.n	8000a62 <AI_Init+0x86>
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	dd2d      	ble.n	8000a94 <AI_Init+0xb8>
 8000a38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a40:	bf4c      	ite	mi
 8000a42:	ee77 7ae6 	vsubmi.f32	s15, s15, s13
 8000a46:	ee77 7aa6 	vaddpl.f32	s15, s15, s13
 8000a4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a4e:	edcd 7a01 	vstr	s15, [sp, #4]
 8000a52:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000a56:	4433      	add	r3, r6
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	f802 3f01 	strb.w	r3, [r2, #1]!
  for (int32_t i = 0 ; i < 256 ; i++)
 8000a5e:	42a2      	cmp	r2, r4
 8000a60:	d0d3      	beq.n	8000a0a <AI_Init+0x2e>
    float tmp = (i - zp_prepro) * scale_prepro;
 8000a62:	188b      	adds	r3, r1, r2
 8000a64:	ee07 3a90 	vmov	s15, r3
 8000a68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    *(lut + i) = _CLAMP(zp + _ROUND(tmp * scale, int32_t), 0, 255, uint8_t);
 8000a6c:	ee67 7a88 	vmul.f32	s15, s15, s16
 8000a70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a78:	bf4c      	ite	mi
 8000a7a:	ee37 7ae6 	vsubmi.f32	s14, s15, s13
 8000a7e:	ee37 7aa6 	vaddpl.f32	s14, s15, s13
 8000a82:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8000a86:	ee17 3a10 	vmov	r3, s14
 8000a8a:	4403      	add	r3, r0
 8000a8c:	2bfe      	cmp	r3, #254	; 0xfe
 8000a8e:	ddd1      	ble.n	8000a34 <AI_Init+0x58>
 8000a90:	23ff      	movs	r3, #255	; 0xff
 8000a92:	e7e2      	b.n	8000a5a <AI_Init+0x7e>
 8000a94:	2300      	movs	r3, #0
 8000a96:	e7e0      	b.n	8000a5a <AI_Init+0x7e>
    Precompute_8FXP(lut, ai_get_input_quantized_format());
 8000a98:	f7ff fe76 	bl	8000788 <ai_get_input_quantized_format>
   *(lut+index)=__USAT((index + (1 << q_input_shift)) >> (1 + q_input_shift), 8);
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	1e62      	subs	r2, r4, #1
 8000aa0:	1b0b      	subs	r3, r1, r4
 8000aa2:	4081      	lsls	r1, r0
 8000aa4:	34ff      	adds	r4, #255	; 0xff
 8000aa6:	3001      	adds	r0, #1
 8000aa8:	4419      	add	r1, r3
 8000aaa:	188b      	adds	r3, r1, r2
 8000aac:	40c3      	lsrs	r3, r0
 8000aae:	f383 0308 	usat	r3, #8, r3
 8000ab2:	f802 3f01 	strb.w	r3, [r2, #1]!
 for(index=0;index<256;index++)
 8000ab6:	4294      	cmp	r4, r2
 8000ab8:	d1f7      	bne.n	8000aaa <AI_Init+0xce>
}
 8000aba:	b002      	add	sp, #8
 8000abc:	ecbd 8b02 	vpop	{d8}
 8000ac0:	bd70      	pop	{r4, r5, r6, pc}
    Precompute_8IntS(lut, ai_get_input_scale(), ai_get_input_zero_point(), prepro_scale, prepro_zp);
 8000ac2:	f7ff febd 	bl	8000840 <ai_get_input_scale>
 8000ac6:	eef0 8a40 	vmov.f32	s17, s0
 8000aca:	f7ff fed1 	bl	8000870 <ai_get_input_zero_point>
 8000ace:	f1c4 0301 	rsb	r3, r4, #1
 8000ad2:	1e62      	subs	r2, r4, #1
    *(lut + i) = _CLAMP(zp + _ROUND(tmp * scale, int32_t),  -128, 127, int8_t);
 8000ad4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    float tmp = (i - zp_prepro) * scale_prepro;
 8000ad8:	1b59      	subs	r1, r3, r5
 8000ada:	ee28 8a28 	vmul.f32	s16, s16, s17
 8000ade:	34ff      	adds	r4, #255	; 0xff
    *(lut + i) = _CLAMP(zp + _ROUND(tmp * scale, int32_t),  -128, 127, int8_t);
 8000ae0:	b2c5      	uxtb	r5, r0
 8000ae2:	e017      	b.n	8000b14 <AI_Init+0x138>
 8000ae4:	337f      	adds	r3, #127	; 0x7f
 8000ae6:	db2e      	blt.n	8000b46 <AI_Init+0x16a>
 8000ae8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000af0:	bf4c      	ite	mi
 8000af2:	ee77 7ae6 	vsubmi.f32	s15, s15, s13
 8000af6:	ee77 7aa6 	vaddpl.f32	s15, s15, s13
 8000afa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000afe:	edcd 7a01 	vstr	s15, [sp, #4]
 8000b02:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000b06:	442b      	add	r3, r5
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	f802 3f01 	strb.w	r3, [r2, #1]!
  for (int32_t i = 0 ; i < 256 ; i++)
 8000b0e:	4294      	cmp	r4, r2
 8000b10:	f43f af7b 	beq.w	8000a0a <AI_Init+0x2e>
    float tmp = (i - zp_prepro) * scale_prepro;
 8000b14:	188b      	adds	r3, r1, r2
 8000b16:	ee07 3a90 	vmov	s15, r3
 8000b1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    *(lut + i) = _CLAMP(zp + _ROUND(tmp * scale, int32_t),  -128, 127, int8_t);
 8000b1e:	ee67 7a88 	vmul.f32	s15, s15, s16
 8000b22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b2a:	bf4c      	ite	mi
 8000b2c:	ee37 7ae6 	vsubmi.f32	s14, s15, s13
 8000b30:	ee37 7aa6 	vaddpl.f32	s14, s15, s13
 8000b34:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8000b38:	ee17 3a10 	vmov	r3, s14
 8000b3c:	4403      	add	r3, r0
 8000b3e:	2b7e      	cmp	r3, #126	; 0x7e
 8000b40:	ddd0      	ble.n	8000ae4 <AI_Init+0x108>
 8000b42:	237f      	movs	r3, #127	; 0x7f
 8000b44:	e7e1      	b.n	8000b0a <AI_Init+0x12e>
 8000b46:	2380      	movs	r3, #128	; 0x80
 8000b48:	e7df      	b.n	8000b0a <AI_Init+0x12e>
 8000b4a:	bf00      	nop
 8000b4c:	20009708 	.word	0x20009708

08000b50 <AI_Run>:
* @param  Ai_Context_Ptr Pointer to the AI NN context
* @retval None
*/
void AI_Run(AiContext_TypeDef* Ai_Context_Ptr)
{
  ai_run((void*)Ai_Context_Ptr->nn_input_buffer, (void*)Ai_Context_Ptr->nn_output_buffer);
 8000b50:	e9d0 1000 	ldrd	r1, r0, [r0]
 8000b54:	f7ff bf2c 	b.w	80009b0 <ai_run>

08000b58 <AI_PixelValueConversion>:
* @param  Ai_Context_Ptr Pointer to the AI NN context
* @param  pSrc           Pointer to source buffer
* @retval None
*/
void AI_PixelValueConversion(AiContext_TypeDef* Ai_Context_Ptr, void *pSrc)
{
 8000b58:	b538      	push	{r3, r4, r5, lr}
 8000b5a:	4605      	mov	r5, r0
 8000b5c:	460c      	mov	r4, r1
  /**Check format of the input so to call the right fucntion for pixel format conversion**/
  if(ai_get_input_format() == AI_BUFFER_FMT_TYPE_Q)
 8000b5e:	f7ff fe03 	bl	8000768 <ai_get_input_format>
 8000b62:	2802      	cmp	r0, #2
 8000b64:	d02a      	beq.n	8000bbc <AI_PixelValueConversion+0x64>
  {
    AI_PixelValueConversion_QuantizedNN(Ai_Context_Ptr, (uint8_t *)pSrc);
  }
  else if(ai_get_input_format() == AI_BUFFER_FMT_TYPE_FLOAT)
 8000b66:	f7ff fdff 	bl	8000768 <ai_get_input_format>
 8000b6a:	2801      	cmp	r0, #1
 8000b6c:	d000      	beq.n	8000b70 <AI_PixelValueConversion+0x18>
      while(1);
    }
  }
  else
  {
    while(1);
 8000b6e:	e7fe      	b.n	8000b6e <AI_PixelValueConversion+0x16>
    if(Ai_Context_Ptr->nn_input_norm_scale == 255.0f)
 8000b70:	edd5 7a04 	vldr	s15, [r5, #16]
 8000b74:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8000c1c <AI_PixelValueConversion+0xc4>
 8000b78:	eef4 7a47 	vcmp.f32	s15, s14
 8000b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b80:	d02c      	beq.n	8000bdc <AI_PixelValueConversion+0x84>
    else if(Ai_Context_Ptr->nn_input_norm_scale == 127.0f)
 8000b82:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8000c20 <AI_PixelValueConversion+0xc8>
 8000b86:	eef4 7a47 	vcmp.f32	s15, s14
 8000b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b8e:	d144      	bne.n	8000c1a <AI_PixelValueConversion+0xc2>
    while(1);
  }

  for (int32_t i = 0; i < nb_pixels; i++)
  {
    *pDst++ = (((float) *pSrc++) / div) - sub;
 8000b90:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
  float *pDst = (float *) Ai_Context_Ptr->nn_input_buffer;
 8000b94:	686b      	ldr	r3, [r5, #4]
  for (int32_t i = 0; i < nb_pixels; i++)
 8000b96:	f504 4240 	add.w	r2, r4, #49152	; 0xc000
    *pDst++ = (((float) *pSrc++) / div) - sub;
 8000b9a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8000c24 <AI_PixelValueConversion+0xcc>
 8000b9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ba2:	eeb0 6a66 	vmov.f32	s12, s13
 8000ba6:	ee07 1a90 	vmov	s15, r1
  for (int32_t i = 0; i < nb_pixels; i++)
 8000baa:	42a2      	cmp	r2, r4
    *pDst++ = (((float) *pSrc++) / div) - sub;
 8000bac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bb0:	eea7 6a87 	vfma.f32	s12, s15, s14
 8000bb4:	eca3 6a01 	vstmia	r3!, {s12}
  for (int32_t i = 0; i < nb_pixels; i++)
 8000bb8:	d1f1      	bne.n	8000b9e <AI_PixelValueConversion+0x46>
}
 8000bba:	bd38      	pop	{r3, r4, r5, pc}
  uint8_t *pDst = (uint8_t *) Ai_Context_Ptr->nn_input_buffer;
 8000bbc:	686b      	ldr	r3, [r5, #4]
  const uint8_t *lut = Ai_Context_Ptr->lut;
 8000bbe:	68e9      	ldr	r1, [r5, #12]
  if (pDst > pSrc)
 8000bc0:	429c      	cmp	r4, r3
 8000bc2:	d21d      	bcs.n	8000c00 <AI_PixelValueConversion+0xa8>
 8000bc4:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 8000bc8:	f504 4240 	add.w	r2, r4, #49152	; 0xc000
      pDst[i] = lut[pSrc[i]];
 8000bcc:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
 8000bd0:	5c08      	ldrb	r0, [r1, r0]
    for (int32_t i = nb_pixels - 1; i >= 0; i--)
 8000bd2:	42a2      	cmp	r2, r4
      pDst[i] = lut[pSrc[i]];
 8000bd4:	f803 0d01 	strb.w	r0, [r3, #-1]!
    for (int32_t i = nb_pixels - 1; i >= 0; i--)
 8000bd8:	d1f8      	bne.n	8000bcc <AI_PixelValueConversion+0x74>
}
 8000bda:	bd38      	pop	{r3, r4, r5, pc}
  float *pDst = (float *) Ai_Context_Ptr->nn_input_buffer;
 8000bdc:	686b      	ldr	r3, [r5, #4]
  for (int32_t i = 0; i < nb_pixels; i++)
 8000bde:	f504 4240 	add.w	r2, r4, #49152	; 0xc000
    *pDst++ = (((float) *pSrc++) / div) - sub;
 8000be2:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000c28 <AI_PixelValueConversion+0xd0>
 8000be6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000bea:	ee07 1a90 	vmov	s15, r1
  for (int32_t i = 0; i < nb_pixels; i++)
 8000bee:	42a2      	cmp	r2, r4
    *pDst++ = (((float) *pSrc++) / div) - sub;
 8000bf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bf4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bf8:	ece3 7a01 	vstmia	r3!, {s15}
  for (int32_t i = 0; i < nb_pixels; i++)
 8000bfc:	d1f3      	bne.n	8000be6 <AI_PixelValueConversion+0x8e>
}
 8000bfe:	bd38      	pop	{r3, r4, r5, pc}
 8000c00:	f64b 70ff 	movw	r0, #49151	; 0xbfff
 8000c04:	3b01      	subs	r3, #1
 8000c06:	1e62      	subs	r2, r4, #1
 8000c08:	4420      	add	r0, r4
      pDst[i] = lut[pSrc[i]];
 8000c0a:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 8000c0e:	5d0c      	ldrb	r4, [r1, r4]
    for (int32_t i = 0; i < nb_pixels; i++)
 8000c10:	4290      	cmp	r0, r2
      pDst[i] = lut[pSrc[i]];
 8000c12:	f803 4f01 	strb.w	r4, [r3, #1]!
    for (int32_t i = 0; i < nb_pixels; i++)
 8000c16:	d1f8      	bne.n	8000c0a <AI_PixelValueConversion+0xb2>
}
 8000c18:	bd38      	pop	{r3, r4, r5, pc}
      while(1);
 8000c1a:	e7fe      	b.n	8000c1a <AI_PixelValueConversion+0xc2>
 8000c1c:	437f0000 	.word	0x437f0000
 8000c20:	42fe0000 	.word	0x42fe0000
 8000c24:	3c008081 	.word	0x3c008081
 8000c28:	3b808081 	.word	0x3b808081

08000c2c <AI_Output_Dequantize>:
* @brief  Performs the dequantization of a quantized NN output
* @param  Ai_Context_Ptr Pointer to the AI NN context
* @retval None
*/
void AI_Output_Dequantize(AiContext_TypeDef* Ai_Context_Ptr)
{
 8000c2c:	b510      	push	{r4, lr}
 8000c2e:	ed2d 8b02 	vpush	{d8}
 8000c32:	4604      	mov	r4, r0
  /**Check format of the output and convert to float if required**/
  if(ai_get_output_format() == AI_BUFFER_FMT_TYPE_Q)
 8000c34:	f7ff fda0 	bl	8000778 <ai_get_output_format>
 8000c38:	2802      	cmp	r0, #2
 8000c3a:	d002      	beq.n	8000c42 <AI_Output_Dequantize+0x16>
      
    default:
      break;
    }  
  }
}
 8000c3c:	ecbd 8b02 	vpop	{d8}
 8000c40:	bd10      	pop	{r4, pc}
    switch(ai_get_output_quantization_scheme())
 8000c42:	f7ff fdcd 	bl	80007e0 <ai_get_output_quantization_scheme>
 8000c46:	2801      	cmp	r0, #1
 8000c48:	d03b      	beq.n	8000cc2 <AI_Output_Dequantize+0x96>
 8000c4a:	2802      	cmp	r0, #2
 8000c4c:	d019      	beq.n	8000c82 <AI_Output_Dequantize+0x56>
 8000c4e:	2800      	cmp	r0, #0
 8000c50:	d1f4      	bne.n	8000c3c <AI_Output_Dequantize+0x10>
      scale=ai_get_output_fxp_scale();
 8000c52:	f7ff fde3 	bl	800081c <ai_get_output_fxp_scale>
      nn_output_i8 = (ai_i8 *) Ai_Context_Ptr->nn_output_buffer;
 8000c56:	6823      	ldr	r3, [r4, #0]
        float q_value = (float) *(nn_output_i8 + i);
 8000c58:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8000c5c:	ee06 2a90 	vmov	s13, r2
 8000c60:	f993 2000 	ldrsb.w	r2, [r3]
 8000c64:	ee07 2a10 	vmov	s14, r2
 8000c68:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8000c6c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
        *(nn_output_f32 + i) = scale * q_value;
 8000c70:	ee66 6a80 	vmul.f32	s13, s13, s0
 8000c74:	ee67 7a00 	vmul.f32	s15, s14, s0
 8000c78:	edc3 6a01 	vstr	s13, [r3, #4]
 8000c7c:	edc3 7a00 	vstr	s15, [r3]
      for(int32_t i = AI_NET_OUTPUT_SIZE - 1; i >= 0; i--)
 8000c80:	e7dc      	b.n	8000c3c <AI_Output_Dequantize+0x10>
      scale = ai_get_output_scale();
 8000c82:	f7ff fe19 	bl	80008b8 <ai_get_output_scale>
 8000c86:	eeb0 8a40 	vmov.f32	s16, s0
      zero_point = ai_get_output_zero_point();
 8000c8a:	f7ff fe2d 	bl	80008e8 <ai_get_output_zero_point>
      nn_output_i8 = (ai_i8 *) Ai_Context_Ptr->nn_output_buffer;
 8000c8e:	6821      	ldr	r1, [r4, #0]
        int32_t q_value = (int32_t) *(nn_output_i8 + i);
 8000c90:	f991 2001 	ldrsb.w	r2, [r1, #1]
 8000c94:	f991 3000 	ldrsb.w	r3, [r1]
        *(nn_output_f32 + i) = scale * (q_value - zero_point);
 8000c98:	1a12      	subs	r2, r2, r0
 8000c9a:	1a1b      	subs	r3, r3, r0
 8000c9c:	ee06 2a90 	vmov	s13, r2
 8000ca0:	ee07 3a90 	vmov	s15, r3
 8000ca4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8000ca8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cac:	ee66 6a88 	vmul.f32	s13, s13, s16
 8000cb0:	ee67 7a08 	vmul.f32	s15, s14, s16
}
 8000cb4:	ecbd 8b02 	vpop	{d8}
        *(nn_output_f32 + i) = scale * (q_value - zero_point);
 8000cb8:	edc1 6a01 	vstr	s13, [r1, #4]
 8000cbc:	edc1 7a00 	vstr	s15, [r1]
}
 8000cc0:	bd10      	pop	{r4, pc}
      scale = ai_get_output_scale();
 8000cc2:	f7ff fdf9 	bl	80008b8 <ai_get_output_scale>
 8000cc6:	eeb0 8a40 	vmov.f32	s16, s0
      zero_point = ai_get_output_zero_point();
 8000cca:	f7ff fe0d 	bl	80008e8 <ai_get_output_zero_point>
      nn_output_u8 = (ai_u8 *) Ai_Context_Ptr->nn_output_buffer;
 8000cce:	6821      	ldr	r1, [r4, #0]
        int32_t q_value = (int32_t) *(nn_output_u8 + i);
 8000cd0:	784a      	ldrb	r2, [r1, #1]
 8000cd2:	780b      	ldrb	r3, [r1, #0]
 8000cd4:	e7e0      	b.n	8000c98 <AI_Output_Dequantize+0x6c>
 8000cd6:	bf00      	nop

08000cd8 <AI_Deinit>:
/**
 * @brief De-initializes the generated C model for a neural network
 */
void AI_Deinit(void) 
{ 
  ai_deinit(); 
 8000cd8:	f7ff be64 	b.w	80009a4 <ai_deinit>

08000cdc <APP_Init>:
/**
 * @brief Initializes the application context structure
 * @param App_Context_Ptr pointer to application context
 */
void APP_Init(AppContext_TypeDef *App_Context_Ptr)
{  
 8000cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  App_Context_Ptr->Display_ContextPtr=&Display_Context;
 8000ce0:	4a21      	ldr	r2, [pc, #132]	; (8000d68 <APP_Init+0x8c>)
{  
 8000ce2:	4604      	mov	r4, r0
  App_Context_Ptr->Ai_ContextPtr=&Ai_Context;
 8000ce4:	4921      	ldr	r1, [pc, #132]	; (8000d6c <APP_Init+0x90>)
  App_Context_Ptr->Operating_Mode=NOMINAL;
 8000ce6:	2701      	movs	r7, #1
  App_Context_Ptr->Display_ContextPtr=&Display_Context;
 8000ce8:	6262      	str	r2, [r4, #36]	; 0x24
  App_Context_Ptr->Ai_ContextPtr->nn_input_norm_zp=127;
 8000cea:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
  App_Context_Ptr->Ai_ContextPtr=&Ai_Context;
 8000cee:	6321      	str	r1, [r4, #48]	; 0x30
  App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.bpp = IMAGE_BPP_RGB565;
 8000cf0:	f04f 0c02 	mov.w	ip, #2
  App_Context_Ptr->Test_ContextPtr=&TestContext;
 8000cf4:	4b1e      	ldr	r3, [pc, #120]	; (8000d70 <APP_Init+0x94>)
  App_Context_Ptr->Camera_ContextPtr=&CameraContext;
 8000cf6:	4a1f      	ldr	r2, [pc, #124]	; (8000d74 <APP_Init+0x98>)
  App_Context_Ptr->Utils_ContextPtr=&UtilsContext;
 8000cf8:	491f      	ldr	r1, [pc, #124]	; (8000d78 <APP_Init+0x9c>)
  strcpy(App_Context_Ptr->Test_ContextPtr->ValidationContext.class_path,"/onboard_valid_dataset_qvga_mobilenetv2");
 8000cfa:	f503 7570 	add.w	r5, r3, #960	; 0x3c0
  App_Context_Ptr->Preproc_ContextPtr=&Preproc_Context;
 8000cfe:	481f      	ldr	r0, [pc, #124]	; (8000d7c <APP_Init+0xa0>)
  strcpy(App_Context_Ptr->Test_ContextPtr->ValidationContext.class_path,"/onboard_valid_dataset_qvga_mobilenetv2");
 8000d00:	4e1f      	ldr	r6, [pc, #124]	; (8000d80 <APP_Init+0xa4>)
  App_Context_Ptr->Camera_ContextPtr=&CameraContext;
 8000d02:	61e2      	str	r2, [r4, #28]
  App_Context_Ptr->Preproc_ContextPtr=&Preproc_Context;
 8000d04:	6220      	str	r0, [r4, #32]
  App_Context_Ptr->Operating_Mode=NOMINAL;
 8000d06:	7027      	strb	r7, [r4, #0]
  App_Context_Ptr->run_loop=1;
 8000d08:	6067      	str	r7, [r4, #4]
  App_Context_Ptr->Ai_ContextPtr->nn_output_buffer=nn_output_buff;
 8000d0a:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8000d88 <APP_Init+0xac>
  App_Context_Ptr->Test_ContextPtr=&TestContext;
 8000d0e:	e9c4 130a 	strd	r1, r3, [r4, #40]	; 0x28
  App_Context_Ptr->Camera_ContextPtr->mirror_flip=CAMERA_MIRRORFLIP_FLIP;
 8000d12:	e9c2 4706 	strd	r4, r7, [r2, #24]
  App_Context_Ptr->Utils_ContextPtr->AppCtxPtr =App_Context_Ptr;
 8000d16:	638c      	str	r4, [r1, #56]	; 0x38
  App_Context_Ptr->Test_ContextPtr->AppCtxPtr =App_Context_Ptr;
 8000d18:	f8c3 4580 	str.w	r4, [r3, #1408]	; 0x580
  strcpy(App_Context_Ptr->Test_ContextPtr->ValidationContext.class_path,"/onboard_valid_dataset_qvga_mobilenetv2");
 8000d1c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000d1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d20:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000d22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d24:	e896 0003 	ldmia.w	r6, {r0, r1}
  App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.w = AI_NETWORK_WIDTH;
 8000d28:	2280      	movs	r2, #128	; 0x80
  App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.bpp = IMAGE_BPP_RGB888;
 8000d2a:	2604      	movs	r6, #4
  strcpy(App_Context_Ptr->Test_ContextPtr->ValidationContext.class_path,"/onboard_valid_dataset_qvga_mobilenetv2");
 8000d2c:	e885 0003 	stmia.w	r5, {r0, r1}
  App_Context_Ptr->Display_ContextPtr->AppCtxPtr =App_Context_Ptr;
 8000d30:	6a60      	ldr	r0, [r4, #36]	; 0x24
  App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data = NULL; /* Set by Init_DataMemoryLayout */
 8000d32:	2100      	movs	r1, #0
  App_Context_Ptr->Ai_ContextPtr->AppCtxPtr =App_Context_Ptr;
 8000d34:	6b23      	ldr	r3, [r4, #48]	; 0x30
  App_Context_Ptr->Ai_ContextPtr->nn_input_norm_scale=127.5f;
 8000d36:	4d13      	ldr	r5, [pc, #76]	; (8000d84 <APP_Init+0xa8>)
  App_Context_Ptr->Display_ContextPtr->AppCtxPtr =App_Context_Ptr;
 8000d38:	60c4      	str	r4, [r0, #12]
  App_Context_Init(App_Context_Ptr);
  Init_DataMemoryLayout(App_Context_Ptr);
 8000d3a:	4620      	mov	r0, r4
  App_Context_Ptr->Ai_ContextPtr->AppCtxPtr =App_Context_Ptr;
 8000d3c:	619c      	str	r4, [r3, #24]
  App_Context_Ptr->Ai_ContextPtr->nn_output_buffer=nn_output_buff;
 8000d3e:	f8c3 8000 	str.w	r8, [r3]
  App_Context_Ptr->Ai_ContextPtr->nn_input_norm_scale=127.5f;
 8000d42:	611d      	str	r5, [r3, #16]
  App_Context_Ptr->Ai_ContextPtr->nn_input_norm_zp=127;
 8000d44:	f8c3 e014 	str.w	lr, [r3, #20]
  App_Context_Ptr->Preproc_ContextPtr->AppCtxPtr = App_Context_Ptr;
 8000d48:	6a23      	ldr	r3, [r4, #32]
  App_Context_Ptr->Preproc_ContextPtr->red_blue_swap = 1; /* See UM2611 section 3.2.6 Pixel data order */
 8000d4a:	609f      	str	r7, [r3, #8]
  App_Context_Ptr->Preproc_ContextPtr->AppCtxPtr = App_Context_Ptr;
 8000d4c:	64dc      	str	r4, [r3, #76]	; 0x4c
  App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.bpp = IMAGE_BPP_RGB888;
 8000d4e:	625e      	str	r6, [r3, #36]	; 0x24
  App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.bpp = IMAGE_BPP_RGB565;
 8000d50:	f8c3 c044 	str.w	ip, [r3, #68]	; 0x44
  App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data = NULL; /* Set by Init_DataMemoryLayout */
 8000d54:	6499      	str	r1, [r3, #72]	; 0x48
  App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data = NULL; /* Set by Init_DataMemoryLayout */
 8000d56:	6299      	str	r1, [r3, #40]	; 0x28
}
 8000d58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.h = AI_NETWORK_HEIGHT;
 8000d5c:	e9c3 220f 	strd	r2, r2, [r3, #60]	; 0x3c
  App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.h = AI_NETWORK_HEIGHT;
 8000d60:	e9c3 2207 	strd	r2, r2, [r3, #28]
  Init_DataMemoryLayout(App_Context_Ptr);
 8000d64:	f017 bd3a 	b.w	80187dc <Init_DataMemoryLayout>
 8000d68:	200098e4 	.word	0x200098e4
 8000d6c:	20009808 	.word	0x20009808
 8000d70:	20009a40 	.word	0x20009a40
 8000d74:	200098c4 	.word	0x200098c4
 8000d78:	20009fd0 	.word	0x20009fd0
 8000d7c:	200098f4 	.word	0x200098f4
 8000d80:	08028330 	.word	0x08028330
 8000d84:	42ff0000 	.word	0x42ff0000
 8000d88:	200079d8 	.word	0x200079d8

08000d8c <APP_GetNextReadyFrame>:
 *        1. send it to LCD for display
 *        2. make it available for subsequent processing
 * @param App_Context_Ptr pointer to application context
 */
void APP_GetNextReadyFrame(AppContext_TypeDef *App_Context_Ptr)
{
 8000d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t* cam_capture_buff = App_Context_Ptr->Camera_ContextPtr->camera_capture_buffer;
#if MEMORY_SCHEME != FULL_INTERNAL_MEM_OPT
  uint8_t* cam_frame_buff = App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer;
#endif
  
  if((App_Context_Ptr->Operating_Mode == VALID) && (Validation_Ctx_Ptr->validation_completed ==0))
 8000d90:	7807      	ldrb	r7, [r0, #0]
{
 8000d92:	4606      	mov	r6, r0
  uint8_t* cam_capture_buff = App_Context_Ptr->Camera_ContextPtr->camera_capture_buffer;
 8000d94:	69c2      	ldr	r2, [r0, #28]
{
 8000d96:	b08c      	sub	sp, #48	; 0x30
  if((App_Context_Ptr->Operating_Mode == VALID) && (Validation_Ctx_Ptr->validation_completed ==0))
 8000d98:	2f02      	cmp	r7, #2
  ValidationContext_TypeDef* Validation_Ctx_Ptr=&App_Context_Ptr->Test_ContextPtr->ValidationContext;
 8000d9a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  uint8_t* cam_frame_buff = App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer;
 8000d9c:	e9d2 5400 	ldrd	r5, r4, [r2]
  if((App_Context_Ptr->Operating_Mode == VALID) && (Validation_Ctx_Ptr->validation_completed ==0))
 8000da0:	f000 808b 	beq.w	8000eba <APP_GetNextReadyFrame+0x12e>
  {
    TEST_GetNextValidationInput(App_Context_Ptr->Test_ContextPtr, 
                                cam_capture_buff);    
  } 
  else if((App_Context_Ptr->Operating_Mode == DUMP) && 
 8000da4:	2f03      	cmp	r7, #3
          (App_Context_Ptr->Test_ContextPtr->DumpContext.Dump_FrameSource == SDCARD_FILE))
 8000da6:	f890 8004 	ldrb.w	r8, [r0, #4]
  else if((App_Context_Ptr->Operating_Mode == DUMP) && 
 8000daa:	d03c      	beq.n	8000e26 <APP_GetNextReadyFrame+0x9a>
                          cam_capture_buff);
  }
  else
  {
    /* Wait for current camera acquisition to complete*/
    while(App_Context_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 8000dac:	7d13      	ldrb	r3, [r2, #20]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d0fc      	beq.n	8000dac <APP_GetNextReadyFrame+0x20>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8000db2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000db6:	46aa      	mov	sl, r5
 8000db8:	f019 fee0 	bl	801ab7c <UTIL_LCD_Clear>
  if (operating_mode == VALID || ((operating_mode == DUMP) && (frame_source == SDCARD_FILE)))
 8000dbc:	2f02      	cmp	r7, #2
 8000dbe:	d045      	beq.n	8000e4c <APP_GetNextReadyFrame+0xc0>
 8000dc0:	2f03      	cmp	r7, #3
 8000dc2:	d108      	bne.n	8000dd6 <APP_GetNextReadyFrame+0x4a>
 8000dc4:	f1b8 0f03 	cmp.w	r8, #3
 8000dc8:	d105      	bne.n	8000dd6 <APP_GetNextReadyFrame+0x4a>
    UTILS_DCache_Coherency_Maintenance((void *)camera_capture_buffer, buffer_size, CLEAN);
 8000dca:	2202      	movs	r2, #2
 8000dcc:	f44f 3116 	mov.w	r1, #153600	; 0x25800
 8000dd0:	4650      	mov	r0, sl
 8000dd2:	f003 fead 	bl	8004b30 <UTILS_DCache_Coherency_Maintenance>
    DISPLAY_Copy2LCDWriteBuffer(App_Context_Ptr->Display_ContextPtr,
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8000ddc:	2700      	movs	r7, #0
 8000dde:	22f0      	movs	r2, #240	; 0xf0
 8000de0:	9000      	str	r0, [sp, #0]
 8000de2:	4651      	mov	r1, sl
 8000de4:	9201      	str	r2, [sp, #4]
 8000de6:	e9cd 3702 	strd	r3, r7, [sp, #8]
 8000dea:	2378      	movs	r3, #120	; 0x78
 8000dec:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8000dee:	f000 fd61 	bl	80018b4 <DISPLAY_Copy2LCDWriteBuffer>
  
  /* DMA2D transfer from camera frame buffer to LCD write buffer */
  CameraCaptureBuff2LcdBuff_Copy(App_Context_Ptr);
  
#if MEMORY_SCHEME != FULL_INTERNAL_MEM_OPT  
  if(App_Context_Ptr->Operating_Mode != VALID)
 8000df2:	7833      	ldrb	r3, [r6, #0]
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	d005      	beq.n	8000e04 <APP_GetNextReadyFrame+0x78>
  {
    /****Coherency purpose: invalidate the camera_capture_buffer area in L1 D-Cache before CPU reading****/
    UTILS_DCache_Coherency_Maintenance((void*)cam_capture_buff, 
 8000df8:	2201      	movs	r2, #1
 8000dfa:	f44f 3116 	mov.w	r1, #153600	; 0x25800
 8000dfe:	4628      	mov	r0, r5
 8000e00:	f003 fe96 	bl	8004b30 <UTILS_DCache_Coherency_Maintenance>
 8000e04:	1ceb      	adds	r3, r5, #3
 8000e06:	1b1b      	subs	r3, r3, r4
 8000e08:	2b06      	cmp	r3, #6
 8000e0a:	d960      	bls.n	8000ece <APP_GetNextReadyFrame+0x142>
 8000e0c:	462b      	mov	r3, r5
 8000e0e:	4622      	mov	r2, r4
 8000e10:	f505 3016 	add.w	r0, r5, #153600	; 0x25800
  }
  
  /****Copy the camera_capture_buff buffer content onto the camera_frame_buff buffer so to release the camera capture buffer before triggering the subsequent camera frame capture****/
  for(uint32_t i=0;i<CAM_RES_WIDTH*CAM_RES_HEIGHT*RGB_565_BPP; i++)
  {
    *((uint8_t *)(cam_frame_buff + i)) = *((uint8_t *)(cam_capture_buff + i));
 8000e14:	f853 1b04 	ldr.w	r1, [r3], #4
 8000e18:	4283      	cmp	r3, r0
 8000e1a:	f842 1b04 	str.w	r1, [r2], #4
  for(uint32_t i=0;i<CAM_RES_WIDTH*CAM_RES_HEIGHT*RGB_565_BPP; i++)
 8000e1e:	d1f9      	bne.n	8000e14 <APP_GetNextReadyFrame+0x88>
  }
#endif
}
 8000e20:	b00c      	add	sp, #48	; 0x30
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  else if((App_Context_Ptr->Operating_Mode == DUMP) && 
 8000e26:	f1b8 0f03 	cmp.w	r8, #3
 8000e2a:	d1bf      	bne.n	8000dac <APP_GetNextReadyFrame+0x20>
    TEST_GetNextDumpInput(App_Context_Ptr->Test_ContextPtr, 
 8000e2c:	4629      	mov	r1, r5
 8000e2e:	f002 fa49 	bl	80032c4 <TEST_GetNextDumpInput>
 8000e32:	6af2      	ldr	r2, [r6, #44]	; 0x2c
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8000e34:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000e38:	69f3      	ldr	r3, [r6, #28]
 8000e3a:	7837      	ldrb	r7, [r6, #0]
 8000e3c:	f892 8004 	ldrb.w	r8, [r2, #4]
 8000e40:	f8d3 a000 	ldr.w	sl, [r3]
 8000e44:	f019 fe9a 	bl	801ab7c <UTIL_LCD_Clear>
  if (operating_mode == VALID || ((operating_mode == DUMP) && (frame_source == SDCARD_FILE)))
 8000e48:	2f02      	cmp	r7, #2
 8000e4a:	d1b9      	bne.n	8000dc0 <APP_GetNextReadyFrame+0x34>
    UTILS_DCache_Coherency_Maintenance((void *)camera_capture_buffer, buffer_size, CLEAN);
 8000e4c:	463a      	mov	r2, r7
 8000e4e:	4650      	mov	r0, sl
 8000e50:	f44f 3116 	mov.w	r1, #153600	; 0x25800
    thumb_img.w = 224;
 8000e54:	f04f 08e0 	mov.w	r8, #224	; 0xe0
    UTILS_DCache_Coherency_Maintenance((void *)camera_capture_buffer, buffer_size, CLEAN);
 8000e58:	f003 fe6a 	bl	8004b30 <UTILS_DCache_Coherency_Maintenance>
    camera_out_img.w = CAM_RES_WIDTH;
 8000e5c:	23f0      	movs	r3, #240	; 0xf0
 8000e5e:	f44f 72a0 	mov.w	r2, #320	; 0x140
    thumb_img.data = valid_image_buff;
 8000e62:	4823      	ldr	r0, [pc, #140]	; (8000ef0 <APP_GetNextReadyFrame+0x164>)
    thumb_img.w = 224;
 8000e64:	f04f 09e0 	mov.w	r9, #224	; 0xe0
    STM32Ipl_Downscale(&camera_out_img, &thumb_img, false);
 8000e68:	a908      	add	r1, sp, #32
    camera_out_img.data = camera_capture_buffer;
 8000e6a:	f8cd a01c 	str.w	sl, [sp, #28]
    camera_out_img.bpp = IMAGE_BPP_RGB565;
 8000e6e:	9706      	str	r7, [sp, #24]
    camera_out_img.w = CAM_RES_WIDTH;
 8000e70:	e9cd 2304 	strd	r2, r3, [sp, #16]
    thumb_img.data = valid_image_buff;
 8000e74:	e9cd 700a 	strd	r7, r0, [sp, #40]	; 0x28
    STM32Ipl_Downscale(&camera_out_img, &thumb_img, false);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	a804      	add	r0, sp, #16
    thumb_img.w = 224;
 8000e7c:	e9cd 8908 	strd	r8, r9, [sp, #32]
    STM32Ipl_Downscale(&camera_out_img, &thumb_img, false);
 8000e80:	f019 fb3a 	bl	801a4f8 <STM32Ipl_Downscale>
    UTILS_DCache_Coherency_Maintenance((void *)thumb_img.data, STM32Ipl_ImageDataSize(&thumb_img), CLEAN);
 8000e84:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8000e88:	a808      	add	r0, sp, #32
 8000e8a:	f017 fde7 	bl	8018a5c <STM32Ipl_ImageDataSize>
 8000e8e:	463a      	mov	r2, r7
 8000e90:	4601      	mov	r1, r0
 8000e92:	4640      	mov	r0, r8
 8000e94:	f003 fe4c 	bl	8004b30 <UTILS_DCache_Coherency_Maintenance>
    DISPLAY_Copy2LCDWriteBuffer(App_Context_Ptr->Display_ContextPtr,
 8000e98:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
 8000e9c:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8000ea0:	f04f 0c00 	mov.w	ip, #0
 8000ea4:	2382      	movs	r3, #130	; 0x82
 8000ea6:	2232      	movs	r2, #50	; 0x32
 8000ea8:	e9cd 1000 	strd	r1, r0, [sp]
 8000eac:	e9cd 7c02 	strd	r7, ip, [sp, #8]
 8000eb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8000eb2:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8000eb4:	f000 fcfe 	bl	80018b4 <DISPLAY_Copy2LCDWriteBuffer>
 8000eb8:	e79b      	b.n	8000df2 <APP_GetNextReadyFrame+0x66>
  if((App_Context_Ptr->Operating_Mode == VALID) && (Validation_Ctx_Ptr->validation_completed ==0))
 8000eba:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8000ebe:	b19b      	cbz	r3, 8000ee8 <APP_GetNextReadyFrame+0x15c>
    while(App_Context_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 8000ec0:	7d13      	ldrb	r3, [r2, #20]
 8000ec2:	f890 8004 	ldrb.w	r8, [r0, #4]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	f43f af70 	beq.w	8000dac <APP_GetNextReadyFrame+0x20>
 8000ecc:	e771      	b.n	8000db2 <APP_GetNextReadyFrame+0x26>
 8000ece:	4809      	ldr	r0, [pc, #36]	; (8000ef4 <APP_GetNextReadyFrame+0x168>)
 8000ed0:	1e62      	subs	r2, r4, #1
 8000ed2:	1e6b      	subs	r3, r5, #1
 8000ed4:	4428      	add	r0, r5
    *((uint8_t *)(cam_frame_buff + i)) = *((uint8_t *)(cam_capture_buff + i));
 8000ed6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  for(uint32_t i=0;i<CAM_RES_WIDTH*CAM_RES_HEIGHT*RGB_565_BPP; i++)
 8000eda:	4283      	cmp	r3, r0
    *((uint8_t *)(cam_frame_buff + i)) = *((uint8_t *)(cam_capture_buff + i));
 8000edc:	f802 1f01 	strb.w	r1, [r2, #1]!
  for(uint32_t i=0;i<CAM_RES_WIDTH*CAM_RES_HEIGHT*RGB_565_BPP; i++)
 8000ee0:	d1f9      	bne.n	8000ed6 <APP_GetNextReadyFrame+0x14a>
}
 8000ee2:	b00c      	add	sp, #48	; 0x30
 8000ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    TEST_GetNextValidationInput(App_Context_Ptr->Test_ContextPtr, 
 8000ee8:	4629      	mov	r1, r5
 8000eea:	f002 fa49 	bl	8003380 <TEST_GetNextValidationInput>
 8000eee:	e7a0      	b.n	8000e32 <APP_GetNextReadyFrame+0xa6>
 8000ef0:	d0100000 	.word	0xd0100000
 8000ef4:	000257ff 	.word	0x000257ff

08000ef8 <APP_StartNewFrameAcquisition>:
/**
 * @brief Start the camera acquisition of the subsequent frame
 * @param App_Context_Ptr pointer to application context
 */
void APP_StartNewFrameAcquisition(AppContext_TypeDef *App_Context_Ptr)
{
 8000ef8:	b570      	push	{r4, r5, r6, lr}
  if(App_Context_Ptr->Operating_Mode == NOMINAL || 
 8000efa:	7803      	ldrb	r3, [r0, #0]
{
 8000efc:	4604      	mov	r4, r0
  if(App_Context_Ptr->Operating_Mode == NOMINAL || 
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d008      	beq.n	8000f14 <APP_StartNewFrameAcquisition+0x1c>
 8000f02:	2b04      	cmp	r3, #4
 8000f04:	d006      	beq.n	8000f14 <APP_StartNewFrameAcquisition+0x1c>
     App_Context_Ptr->Operating_Mode == CAPTURE || 
 8000f06:	2b03      	cmp	r3, #3
 8000f08:	d000      	beq.n	8000f0c <APP_StartNewFrameAcquisition+0x14>
    
    /***Resume the camera capture in NOMINAL mode****/
    BSP_CAMERA_Resume(0);
  //  __enable_irq();
  }
}
 8000f0a:	bd70      	pop	{r4, r5, r6, pc}
       ((App_Context_Ptr->Operating_Mode == DUMP)&& (App_Context_Ptr->Test_ContextPtr->DumpContext.Dump_FrameSource != SDCARD_FILE)))
 8000f0c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000f0e:	791b      	ldrb	r3, [r3, #4]
 8000f10:	2b03      	cmp	r3, #3
 8000f12:	d0fa      	beq.n	8000f0a <APP_StartNewFrameAcquisition+0x12>
    App_Context_Ptr->Camera_ContextPtr->vsync_it=0;
 8000f14:	69e3      	ldr	r3, [r4, #28]
 8000f16:	2500      	movs	r5, #0
    App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1=HAL_GetTick();
 8000f18:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    App_Context_Ptr->Camera_ContextPtr->vsync_it=0;
 8000f1a:	609d      	str	r5, [r3, #8]
    App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1=HAL_GetTick();
 8000f1c:	f00a f966 	bl	800b1ec <HAL_GetTick>
    App_Context_Ptr->Camera_ContextPtr->new_frame_ready = 0;
 8000f20:	69e3      	ldr	r3, [r4, #28]
    App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1=HAL_GetTick();
 8000f22:	4602      	mov	r2, r0
    BSP_CAMERA_Resume(0);
 8000f24:	4628      	mov	r0, r5
    App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1=HAL_GetTick();
 8000f26:	61b2      	str	r2, [r6, #24]
    App_Context_Ptr->Camera_ContextPtr->new_frame_ready = 0;
 8000f28:	751d      	strb	r5, [r3, #20]
}
 8000f2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    BSP_CAMERA_Resume(0);
 8000f2e:	f009 b985 	b.w	800a23c <BSP_CAMERA_Resume>
 8000f32:	bf00      	nop

08000f34 <APP_FramePreprocess>:
 * @param App_Context_Ptr pointer to application context
 */
void APP_FramePreprocess(AppContext_TypeDef *App_Context_Ptr)
{
  /*Call a fct in charge of executing the sequence of preprocessing steps*/
  Run_Preprocessing(App_Context_Ptr);
 8000f34:	f017 bc66 	b.w	8018804 <Run_Preprocessing>

08000f38 <APP_NetworkInference>:
/**
 * @brief Run neural network inference on preprocessed captured frame
 * @param App_Context_Ptr pointer to application context
 */
void APP_NetworkInference(AppContext_TypeDef *App_Context_Ptr)
{
 8000f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tinf_start;
  uint32_t tinf_stop;
  TestRunContext_TypeDef* TestRunCtxt_Ptr=&App_Context_Ptr->Test_ContextPtr->TestRunContext;
  
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Ai_ContextPtr->nn_input_buffer);
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[3];
 8000f3a:	4a17      	ldr	r2, [pc, #92]	; (8000f98 <APP_NetworkInference+0x60>)
{
 8000f3c:	4604      	mov	r4, r0
  TestRunCtxt_Ptr->src_width_size=AI_NETWORK_WIDTH;
  TestRunCtxt_Ptr->src_height_size=AI_NETWORK_HEIGHT;
  TestRunCtxt_Ptr->src_bpp=IMAGE_BPP_RGB888;
  TestRunCtxt_Ptr->src_size=AI_NET_INPUT_SIZE_BYTES;
  TestRunCtxt_Ptr->PerformCapture=1;
  TestRunCtxt_Ptr->DumpFormat=DATA_FORMAT_RAW;
 8000f3e:	2500      	movs	r5, #0
  TestRunCtxt_Ptr->src_bpp=IMAGE_BPP_RGB888;
 8000f40:	2704      	movs	r7, #4
  TestRunCtxt_Ptr->src_size=AI_NET_INPUT_SIZE_BYTES;
 8000f42:	f44f 4640 	mov.w	r6, #49152	; 0xc000
  TestRunContext_TypeDef* TestRunCtxt_Ptr=&App_Context_Ptr->Test_ContextPtr->TestRunContext;
 8000f46:	e9d0 010b 	ldrd	r0, r1, [r0, #44]	; 0x2c
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Ai_ContextPtr->nn_input_buffer);
 8000f4a:	684b      	ldr	r3, [r1, #4]
  TestRunCtxt_Ptr->src_width_size=AI_NETWORK_WIDTH;
 8000f4c:	2180      	movs	r1, #128	; 0x80
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[3];
 8000f4e:	f8c0 254c 	str.w	r2, [r0, #1356]	; 0x54c
  TestRunCtxt_Ptr->PerformCapture=1;
 8000f52:	2201      	movs	r2, #1
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Ai_ContextPtr->nn_input_buffer);
 8000f54:	f8c0 3548 	str.w	r3, [r0, #1352]	; 0x548
  TestRunCtxt_Ptr->PerformCapture=1;
 8000f58:	f8c0 2560 	str.w	r2, [r0, #1376]	; 0x560
  TestRunCtxt_Ptr->rb_swap=1;
 8000f5c:	f8c0 2568 	str.w	r2, [r0, #1384]	; 0x568
  TestRunCtxt_Ptr->DumpFormat=DATA_FORMAT_RAW;
 8000f60:	f880 5564 	strb.w	r5, [r0, #1380]	; 0x564
  TestRunCtxt_Ptr->src_bpp=IMAGE_BPP_RGB888;
 8000f64:	f8c0 7558 	str.w	r7, [r0, #1368]	; 0x558
  TestRunCtxt_Ptr->src_size=AI_NET_INPUT_SIZE_BYTES;
 8000f68:	f8c0 655c 	str.w	r6, [r0, #1372]	; 0x55c
  TestRunCtxt_Ptr->src_width_size=AI_NETWORK_WIDTH;
 8000f6c:	f8c0 1550 	str.w	r1, [r0, #1360]	; 0x550
  TestRunCtxt_Ptr->src_height_size=AI_NETWORK_HEIGHT;
 8000f70:	f8c0 1554 	str.w	r1, [r0, #1364]	; 0x554
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 8000f74:	7821      	ldrb	r1, [r4, #0]
 8000f76:	f002 fdd9 	bl	8003b2c <TEST_Run>
 
  tinf_start=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 8000f7a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000f7c:	f003 fd1a 	bl	80049b4 <UTILS_GetTimeStamp>
 8000f80:	4605      	mov	r5, r0
  
  /***********************************/
  /*********Run NN inference**********/
  /***********************************/
  AI_Run(App_Context_Ptr->Ai_ContextPtr);
 8000f82:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000f84:	f7ff fde4 	bl	8000b50 <AI_Run>
  
  tinf_stop=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 8000f88:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000f8a:	f003 fd13 	bl	80049b4 <UTILS_GetTimeStamp>

  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE]=tinf_stop-tinf_start;
 8000f8e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000f90:	1b40      	subs	r0, r0, r5
 8000f92:	6118      	str	r0, [r3, #16]
}
 8000f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000074 	.word	0x20000074

08000f9c <APP_Postprocess>:
/**
 * @brief Run post-processing operation
 * @param App_Context_Ptr pointer to application context
 */
void APP_Postprocess(AppContext_TypeDef *App_Context_Ptr)
{
 8000f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TestRunContext_TypeDef* TestRunCtxt_Ptr=&App_Context_Ptr->Test_ContextPtr->TestRunContext;

  /*** At that point, it is recommended to wait until current camera acquisition is completed before proceeding  
  *** before proceeding in order to avoid bottleneck at FMC slave (btw LTDC/DMA2D and DMA).
  ***/
  while(App_Context_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 8000fa0:	69c2      	ldr	r2, [r0, #28]
{
 8000fa2:	b094      	sub	sp, #80	; 0x50
 8000fa4:	4604      	mov	r4, r0
  TestRunContext_TypeDef* TestRunCtxt_Ptr=&App_Context_Ptr->Test_ContextPtr->TestRunContext;
 8000fa6:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  while(App_Context_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 8000fa8:	7d13      	ldrb	r3, [r2, #20]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d0fc      	beq.n	8000fa8 <APP_Postprocess+0xc>
  
  UTILS_Compute_ExecutionTiming(App_Context_Ptr->Utils_ContextPtr);
 8000fae:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  /**NN ouput dequantization if required**/
  AI_Output_Dequantize(App_Context_Ptr->Ai_ContextPtr);

  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer);
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[4];
  TestRunCtxt_Ptr->src_width_size=0;
 8000fb0:	2600      	movs	r6, #0
  UTILS_Compute_ExecutionTiming(App_Context_Ptr->Utils_ContextPtr);
 8000fb2:	f003 fe17 	bl	8004be4 <UTILS_Compute_ExecutionTiming>
  AI_Output_Dequantize(App_Context_Ptr->Ai_ContextPtr);
 8000fb6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000fb8:	f7ff fe38 	bl	8000c2c <AI_Output_Dequantize>
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer);
 8000fbc:	6b22      	ldr	r2, [r4, #48]	; 0x30
  TestRunCtxt_Ptr->src_height_size=0;
  TestRunCtxt_Ptr->src_size=AI_NETWORK_OUT_1_SIZE * sizeof(float);
 8000fbe:	2308      	movs	r3, #8
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[4];
 8000fc0:	499a      	ldr	r1, [pc, #616]	; (800122c <APP_Postprocess+0x290>)
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer);
 8000fc2:	6812      	ldr	r2, [r2, #0]
  TestRunCtxt_Ptr->PerformCapture=0;
  TestRunCtxt_Ptr->DumpFormat=DATA_FORMAT_TXT;
 8000fc4:	2702      	movs	r7, #2
  TestRunCtxt_Ptr->src_size=AI_NETWORK_OUT_1_SIZE * sizeof(float);
 8000fc6:	f8c5 355c 	str.w	r3, [r5, #1372]	; 0x55c
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer);
 8000fca:	f8c5 2548 	str.w	r2, [r5, #1352]	; 0x548
  TestRunCtxt_Ptr->DumpFormat=DATA_FORMAT_TXT;
 8000fce:	f885 7564 	strb.w	r7, [r5, #1380]	; 0x564
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[4];
 8000fd2:	f8c5 154c 	str.w	r1, [r5, #1356]	; 0x54c
  TestRunCtxt_Ptr->src_width_size=0;
 8000fd6:	f8c5 6550 	str.w	r6, [r5, #1360]	; 0x550
  TestRunCtxt_Ptr->src_height_size=0;
 8000fda:	f8c5 6554 	str.w	r6, [r5, #1364]	; 0x554
  TestRunCtxt_Ptr->PerformCapture=0;
 8000fde:	f8c5 6560 	str.w	r6, [r5, #1376]	; 0x560
  TestRunCtxt_Ptr->rb_swap=0;
 8000fe2:	f8c5 6568 	str.w	r6, [r5, #1384]	; 0x568
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 8000fe6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8000fe8:	7821      	ldrb	r1, [r4, #0]
 8000fea:	f002 fd9f 	bl	8003b2c <TEST_Run>
  for (int i = 0; i < NN_OUTPUT_CLASS_NUMBER; i++)
  {
    App_Context_Ptr->ranking[i] = i;
  }
  
  UTILS_Bubblesort((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer), App_Context_Ptr->ranking, NN_OUTPUT_CLASS_NUMBER);
 8000fee:	6b23      	ldr	r3, [r4, #48]	; 0x30
    App_Context_Ptr->ranking[i] = i;
 8000ff0:	2001      	movs	r0, #1
  UTILS_Bubblesort((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer), App_Context_Ptr->ranking, NN_OUTPUT_CLASS_NUMBER);
 8000ff2:	463a      	mov	r2, r7
 8000ff4:	f104 0114 	add.w	r1, r4, #20
    App_Context_Ptr->ranking[i] = i;
 8000ff8:	6166      	str	r6, [r4, #20]
 8000ffa:	61a0      	str	r0, [r4, #24]
  UTILS_Bubblesort((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer), App_Context_Ptr->ranking, NN_OUTPUT_CLASS_NUMBER);
 8000ffc:	6818      	ldr	r0, [r3, #0]
 8000ffe:	f003 fdc9 	bl	8004b94 <UTILS_Bubblesort>
  
  App_Context_Ptr->nn_top1_output_class_name=NN_OUTPUT_CLASS_LIST[App_Context_Ptr->ranking[0]];
  App_Context_Ptr->nn_top1_output_class_proba=*((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+0);
 8001002:	6b23      	ldr	r3, [r4, #48]	; 0x30
  App_Context_Ptr->nn_top1_output_class_name=NN_OUTPUT_CLASS_LIST[App_Context_Ptr->ranking[0]];
 8001004:	4d8a      	ldr	r5, [pc, #552]	; (8001230 <APP_Postprocess+0x294>)
  App_Context_Ptr->nn_top1_output_class_proba=*((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+0);
 8001006:	681a      	ldr	r2, [r3, #0]
  App_Context_Ptr->nn_top1_output_class_name=NN_OUTPUT_CLASS_LIST[App_Context_Ptr->ranking[0]];
 8001008:	6963      	ldr	r3, [r4, #20]
  App_Context_Ptr->nn_top1_output_class_proba=*((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+0);
 800100a:	6811      	ldr	r1, [r2, #0]
  App_Context_Ptr->nn_top1_output_class_name=NN_OUTPUT_CLASS_LIST[App_Context_Ptr->ranking[0]];
 800100c:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
  
  if(App_Context_Ptr->Operating_Mode == NOMINAL)
 8001010:	7823      	ldrb	r3, [r4, #0]
  App_Context_Ptr->nn_top1_output_class_proba=*((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+0);
 8001012:	6121      	str	r1, [r4, #16]
  if(App_Context_Ptr->Operating_Mode == NOMINAL)
 8001014:	2b01      	cmp	r3, #1
  App_Context_Ptr->nn_top1_output_class_name=NN_OUTPUT_CLASS_LIST[App_Context_Ptr->ranking[0]];
 8001016:	60e2      	str	r2, [r4, #12]
  if(App_Context_Ptr->Operating_Mode == NOMINAL)
 8001018:	d005      	beq.n	8001026 <APP_Postprocess+0x8a>
    
    BSP_LED_Toggle(LED_BLUE);
  }
  else 
  {
    TEST_PostProcess(App_Context_Ptr->Test_ContextPtr);
 800101a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800101c:	f003 f864 	bl	80040e8 <TEST_PostProcess>
  }
}
 8001020:	b014      	add	sp, #80	; 0x50
 8001022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  occurrence_number--;
 8001026:	4a83      	ldr	r2, [pc, #524]	; (8001234 <APP_Postprocess+0x298>)
 8001028:	6813      	ldr	r3, [r2, #0]
  if (occurrence_number == 0)
 800102a:	1e5e      	subs	r6, r3, #1
 800102c:	d006      	beq.n	800103c <APP_Postprocess+0xa0>
  occurrence_number--;
 800102e:	6016      	str	r6, [r2, #0]
    BSP_LED_Toggle(LED_BLUE);
 8001030:	2003      	movs	r0, #3
 8001032:	f008 f861 	bl	80090f8 <BSP_LED_Toggle>
}
 8001036:	b014      	add	sp, #80	; 0x50
 8001038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (BSP_PB_GetState(BUTTON_WAKEUP) != RESET)
 800103c:	4630      	mov	r0, r6
 800103e:	f008 f8b5 	bl	80091ac <BSP_PB_GetState>
 8001042:	2800      	cmp	r0, #0
 8001044:	d16d      	bne.n	8001122 <APP_Postprocess+0x186>
 8001046:	af02      	add	r7, sp, #8
      sprintf(msg, "%s %.0f%%", NN_OUTPUT_CLASS_LIST[App_Context_Ptr->ranking[i]], *((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+i) * 100);
 8001048:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800104a:	4638      	mov	r0, r7
 800104c:	eddf 7a7a 	vldr	s15, [pc, #488]	; 8001238 <APP_Postprocess+0x29c>
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	6963      	ldr	r3, [r4, #20]
 8001054:	ed92 7a00 	vldr	s14, [r2]
 8001058:	4978      	ldr	r1, [pc, #480]	; (800123c <APP_Postprocess+0x2a0>)
 800105a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800105e:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 8001062:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8001066:	ed8d 7b00 	vstr	d7, [sp]
 800106a:	f024 fc1f 	bl	80258ac <siprintf>
      UTIL_LCD_DisplayStringAt(0, LINE(DISPLAY_TOP_N_LAST_LINE - NN_TOP_N_DISPLAY + i), (uint8_t *)msg, CENTER_MODE);
 800106e:	f019 fd7d 	bl	801ab6c <UTIL_LCD_GetFont>
 8001072:	88c1      	ldrh	r1, [r0, #6]
 8001074:	2301      	movs	r3, #1
 8001076:	463a      	mov	r2, r7
 8001078:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 800107c:	2000      	movs	r0, #0
 800107e:	eb01 0145 	add.w	r1, r1, r5, lsl #1
 8001082:	f019 fe63 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
    sprintf(msg, "Inference: %ldms", App_Context_Ptr->nn_inference_time);
 8001086:	68a2      	ldr	r2, [r4, #8]
 8001088:	496d      	ldr	r1, [pc, #436]	; (8001240 <APP_Postprocess+0x2a4>)
 800108a:	4638      	mov	r0, r7
 800108c:	f024 fc0e 	bl	80258ac <siprintf>
    UTIL_LCD_DisplayStringAt(0, LINE(DISPLAY_INFER_TIME_LINE), (uint8_t *)msg, CENTER_MODE);
 8001090:	f019 fd6c 	bl	801ab6c <UTIL_LCD_GetFont>
 8001094:	88c1      	ldrh	r1, [r0, #6]
 8001096:	2301      	movs	r3, #1
 8001098:	463a      	mov	r2, r7
 800109a:	2000      	movs	r0, #0
 800109c:	0109      	lsls	r1, r1, #4
 800109e:	f019 fe55 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
    sprintf(msg, "Fps: %.1f", 1000.0F / (float)(App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.Tfps));
 80010a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80010a4:	eddf 6a67 	vldr	s13, [pc, #412]	; 8001244 <APP_Postprocess+0x2a8>
 80010a8:	4638      	mov	r0, r7
 80010aa:	edd3 7a05 	vldr	s15, [r3, #20]
 80010ae:	4966      	ldr	r1, [pc, #408]	; (8001248 <APP_Postprocess+0x2ac>)
 80010b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80010b8:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80010bc:	ec53 2b17 	vmov	r2, r3, d7
 80010c0:	f024 fbf4 	bl	80258ac <siprintf>
    UTIL_LCD_DisplayStringAt(0, LINE(DISPLAY_FPS_LINE), (uint8_t *)msg, CENTER_MODE);
 80010c4:	f019 fd52 	bl	801ab6c <UTIL_LCD_GetFont>
 80010c8:	88c1      	ldrh	r1, [r0, #6]
 80010ca:	2301      	movs	r3, #1
 80010cc:	463a      	mov	r2, r7
 80010ce:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80010d2:	2000      	movs	r0, #0
 80010d4:	4099      	lsls	r1, r3
 80010d6:	f019 fe39 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Context_Ptr->Display_ContextPtr);
 80010da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80010dc:	f000 fbc8 	bl	8001870 <DISPLAY_Refresh>
    BSP_LED_Off(LED_GREEN);
 80010e0:	2000      	movs	r0, #0
 80010e2:	f007 fff9 	bl	80090d8 <BSP_LED_Off>
    BSP_LED_Off(LED_ORANGE);
 80010e6:	2001      	movs	r0, #1
 80010e8:	f007 fff6 	bl	80090d8 <BSP_LED_Off>
    BSP_LED_Off(LED_RED);
 80010ec:	2002      	movs	r0, #2
 80010ee:	f007 fff3 	bl	80090d8 <BSP_LED_Off>
    if ((*((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+0) * 100) < NN_BAD_RES)
 80010f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80010f4:	ed9f 7a55 	vldr	s14, [pc, #340]	; 800124c <APP_Postprocess+0x2b0>
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	edd3 7a00 	vldr	s15, [r3]
 80010fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001106:	f100 808c 	bmi.w	8001222 <APP_Postprocess+0x286>
    else if (((*((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+0) * 100) >= NN_BAD_RES) && ((*((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+0) * 100) < NN_GOOD_RES))
 800110a:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8001250 <APP_Postprocess+0x2b4>
 800110e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      BSP_LED_On(LED_ORANGE);
 8001116:	bf4c      	ite	mi
 8001118:	2001      	movmi	r0, #1
      BSP_LED_On(LED_GREEN);
 800111a:	2000      	movpl	r0, #0
 800111c:	f007 ffcc 	bl	80090b8 <BSP_LED_On>
 8001120:	e786      	b.n	8001030 <APP_Postprocess+0x94>
      display_mode  = (display_mode + 1) % 4;
 8001122:	4a4c      	ldr	r2, [pc, #304]	; (8001254 <APP_Postprocess+0x2b8>)
 8001124:	6813      	ldr	r3, [r2, #0]
 8001126:	3301      	adds	r3, #1
 8001128:	f003 0803 	and.w	r8, r3, #3
      switch (display_mode)
 800112c:	f1b8 0f02 	cmp.w	r8, #2
      display_mode  = (display_mode + 1) % 4;
 8001130:	f8c2 8000 	str.w	r8, [r2]
      switch (display_mode)
 8001134:	d067      	beq.n	8001206 <APP_Postprocess+0x26a>
 8001136:	f1b8 0f03 	cmp.w	r8, #3
 800113a:	d04c      	beq.n	80011d6 <APP_Postprocess+0x23a>
 800113c:	f1b8 0f01 	cmp.w	r8, #1
 8001140:	d055      	beq.n	80011ee <APP_Postprocess+0x252>
        sprintf(msg, "Normal CAMERA mode");
 8001142:	f8df c118 	ldr.w	ip, [pc, #280]	; 800125c <APP_Postprocess+0x2c0>
 8001146:	af02      	add	r7, sp, #8
        mirror_flip = CAMERA_MIRRORFLIP_NONE;
 8001148:	46b0      	mov	r8, r6
        sprintf(msg, "Normal CAMERA mode");
 800114a:	463e      	mov	r6, r7
 800114c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001150:	f8dc c000 	ldr.w	ip, [ip]
 8001154:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001158:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800115a:	f826 cb02 	strh.w	ip, [r6], #2
 800115e:	f886 e000 	strb.w	lr, [r6]
      UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8001162:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
      sprintf(msg, "Please release button");
 8001166:	463e      	mov	r6, r7
      UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8001168:	f019 fd08 	bl	801ab7c <UTIL_LCD_Clear>
      UTIL_LCD_DisplayStringAt(0, LINE(9), (uint8_t*)msg, CENTER_MODE);
 800116c:	f019 fcfe 	bl	801ab6c <UTIL_LCD_GetFont>
 8001170:	88c1      	ldrh	r1, [r0, #6]
 8001172:	2301      	movs	r3, #1
 8001174:	463a      	mov	r2, r7
 8001176:	2000      	movs	r0, #0
 8001178:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800117c:	f019 fde6 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
      CAMERA_Set_MirrorFlip(App_Context_Ptr->Camera_ContextPtr, mirror_flip);
 8001180:	4641      	mov	r1, r8
 8001182:	69e0      	ldr	r0, [r4, #28]
 8001184:	f000 f9a6 	bl	80014d4 <CAMERA_Set_MirrorFlip>
      sprintf(msg, "Please release button");
 8001188:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 8001260 <APP_Postprocess+0x2c4>
 800118c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001190:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001192:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8001196:	f846 0b04 	str.w	r0, [r6], #4
 800119a:	8031      	strh	r1, [r6, #0]
      UTIL_LCD_DisplayStringAt(0, LINE(11), (uint8_t*)msg, CENTER_MODE);
 800119c:	f019 fce6 	bl	801ab6c <UTIL_LCD_GetFont>
 80011a0:	4601      	mov	r1, r0
 80011a2:	2301      	movs	r3, #1
 80011a4:	2000      	movs	r0, #0
 80011a6:	88c9      	ldrh	r1, [r1, #6]
 80011a8:	463a      	mov	r2, r7
 80011aa:	eb01 0681 	add.w	r6, r1, r1, lsl #2
 80011ae:	eb01 0146 	add.w	r1, r1, r6, lsl #1
 80011b2:	f019 fdcb 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
      DISPLAY_Refresh(App_Context_Ptr->Display_ContextPtr);
 80011b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80011b8:	f000 fb5a 	bl	8001870 <DISPLAY_Refresh>
      while (BSP_PB_GetState(BUTTON_WAKEUP) != RESET);
 80011bc:	2000      	movs	r0, #0
 80011be:	f007 fff5 	bl	80091ac <BSP_PB_GetState>
 80011c2:	2800      	cmp	r0, #0
 80011c4:	d1fa      	bne.n	80011bc <APP_Postprocess+0x220>
      HAL_Delay(200);
 80011c6:	20c8      	movs	r0, #200	; 0xc8
 80011c8:	f00a f816 	bl	800b1f8 <HAL_Delay>
      UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 80011cc:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80011d0:	f019 fcd4 	bl	801ab7c <UTIL_LCD_Clear>
 80011d4:	e738      	b.n	8001048 <APP_Postprocess+0xac>
        sprintf(msg, "Mirror and Flip CAMERA mode");
 80011d6:	af02      	add	r7, sp, #8
 80011d8:	f8df c088 	ldr.w	ip, [pc, #136]	; 8001264 <APP_Postprocess+0x2c8>
 80011dc:	463e      	mov	r6, r7
 80011de:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80011e2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80011e4:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80011e8:	e886 0007 	stmia.w	r6, {r0, r1, r2}
        break;
 80011ec:	e7b9      	b.n	8001162 <APP_Postprocess+0x1c6>
        sprintf(msg, "Flip CAMERA mode");
 80011ee:	f8df c078 	ldr.w	ip, [pc, #120]	; 8001268 <APP_Postprocess+0x2cc>
 80011f2:	af02      	add	r7, sp, #8
 80011f4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80011f8:	463e      	mov	r6, r7
 80011fa:	f8dc c000 	ldr.w	ip, [ip]
 80011fe:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001200:	f886 c000 	strb.w	ip, [r6]
        break;
 8001204:	e7ad      	b.n	8001162 <APP_Postprocess+0x1c6>
        sprintf(msg, "Mirror CAMERA mode");
 8001206:	4e14      	ldr	r6, [pc, #80]	; (8001258 <APP_Postprocess+0x2bc>)
 8001208:	af02      	add	r7, sp, #8
 800120a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800120c:	f8d6 c000 	ldr.w	ip, [r6]
 8001210:	463e      	mov	r6, r7
 8001212:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001216:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001218:	f826 cb02 	strh.w	ip, [r6], #2
 800121c:	f886 e000 	strb.w	lr, [r6]
        break;
 8001220:	e79f      	b.n	8001162 <APP_Postprocess+0x1c6>
      BSP_LED_On(LED_RED);
 8001222:	2002      	movs	r0, #2
 8001224:	f007 ff48 	bl	80090b8 <BSP_LED_On>
 8001228:	e702      	b.n	8001030 <APP_Postprocess+0x94>
 800122a:	bf00      	nop
 800122c:	20000094 	.word	0x20000094
 8001230:	20000004 	.word	0x20000004
 8001234:	20000000 	.word	0x20000000
 8001238:	42c80000 	.word	0x42c80000
 800123c:	080283c8 	.word	0x080283c8
 8001240:	080283d4 	.word	0x080283d4
 8001244:	447a0000 	.word	0x447a0000
 8001248:	080283e8 	.word	0x080283e8
 800124c:	3f0ccccd 	.word	0x3f0ccccd
 8001250:	3f333333 	.word	0x3f333333
 8001254:	200079d4 	.word	0x200079d4
 8001258:	0802836c 	.word	0x0802836c
 800125c:	0802839c 	.word	0x0802839c
 8001260:	080283b0 	.word	0x080283b0
 8001264:	08028380 	.word	0x08028380
 8001268:	08028358 	.word	0x08028358

0800126c <DCMI_MDMAError>:
  * @retval None
  */
static void DCMI_MDMAError(MDMA_HandleTypeDef *hmdma)
{
  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800126c:	6802      	ldr	r2, [r0, #0]
 800126e:	68d3      	ldr	r3, [r2, #12]
 8001270:	f023 0301 	bic.w	r3, r3, #1
 8001274:	60d3      	str	r3, [r2, #12]

  Error_Handler();
 8001276:	f003 bcc9 	b.w	8004c0c <Error_Handler>
 800127a:	bf00      	nop

0800127c <DCMI_DMAError>:
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800127c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 800127e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001280:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001282:	2a02      	cmp	r2, #2
 8001284:	d006      	beq.n	8001294 <DCMI_DMAError+0x18>
    hdcmi->State = HAL_DCMI_STATE_READY;
 8001286:	2201      	movs	r2, #1
 8001288:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 800128c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800128e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001292:	64da      	str	r2, [r3, #76]	; 0x4c
  Error_Handler();
 8001294:	f003 bcba 	b.w	8004c0c <Error_Handler>

08001298 <DCMI_DMALineXferCplt>:
{
 8001298:	b530      	push	{r4, r5, lr}
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800129a:	6b84      	ldr	r4, [r0, #56]	; 0x38
{
 800129c:	b083      	sub	sp, #12
  if (HAL_MDMA_Start_IT(&hmdma, (uint32_t) pCameraLineBuffer, (uint32_t) pDst, line_size, 1) != HAL_OK)
 800129e:	2501      	movs	r5, #1
 80012a0:	4909      	ldr	r1, [pc, #36]	; (80012c8 <DCMI_DMALineXferCplt+0x30>)
  uint32_t line_size =  hdcmi->XferSize * 4U;
 80012a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  uint8_t *pDst = (uint8_t *) hdcmi->pBuffPtr + line_size * hdcmi->XferCount;
 80012a4:	6c62      	ldr	r2, [r4, #68]	; 0x44
  uint32_t line_size =  hdcmi->XferSize * 4U;
 80012a6:	009b      	lsls	r3, r3, #2
  uint8_t *pDst = (uint8_t *) hdcmi->pBuffPtr + line_size * hdcmi->XferCount;
 80012a8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
  if (HAL_MDMA_Start_IT(&hmdma, (uint32_t) pCameraLineBuffer, (uint32_t) pDst, line_size, 1) != HAL_OK)
 80012aa:	4808      	ldr	r0, [pc, #32]	; (80012cc <DCMI_DMALineXferCplt+0x34>)
 80012ac:	fb03 2204 	mla	r2, r3, r4, r2
 80012b0:	9500      	str	r5, [sp, #0]
 80012b2:	f00d fcdf 	bl	800ec74 <HAL_MDMA_Start_IT>
 80012b6:	b908      	cbnz	r0, 80012bc <DCMI_DMALineXferCplt+0x24>
}
 80012b8:	b003      	add	sp, #12
 80012ba:	bd30      	pop	{r4, r5, pc}
 80012bc:	b003      	add	sp, #12
 80012be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    Error_Handler();
 80012c2:	f003 bca3 	b.w	8004c0c <Error_Handler>
 80012c6:	bf00      	nop
 80012c8:	30000000 	.word	0x30000000
 80012cc:	20009858 	.word	0x20009858

080012d0 <DCMI_MDMAFrameXferCplt>:
  __HAL_MDMA_DISABLE(hmdma);
 80012d0:	6801      	ldr	r1, [r0, #0]
  hdcmi->XferCount++;
 80012d2:	4b0e      	ldr	r3, [pc, #56]	; (800130c <DCMI_MDMAFrameXferCplt+0x3c>)
  __HAL_MDMA_DISABLE(hmdma);
 80012d4:	68ca      	ldr	r2, [r1, #12]
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 80012d6:	6c18      	ldr	r0, [r3, #64]	; 0x40
  __HAL_MDMA_DISABLE(hmdma);
 80012d8:	f022 0201 	bic.w	r2, r2, #1
 80012dc:	60ca      	str	r2, [r1, #12]
  hdcmi->XferCount++;
 80012de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012e0:	3201      	adds	r2, #1
 80012e2:	639a      	str	r2, [r3, #56]	; 0x38
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 80012e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012e6:	4282      	cmp	r2, r0
 80012e8:	d000      	beq.n	80012ec <DCMI_MDMAFrameXferCplt+0x1c>
}
 80012ea:	4770      	bx	lr
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	68d1      	ldr	r1, [r2, #12]
 80012f0:	f041 0101 	orr.w	r1, r1, #1
 80012f4:	60d1      	str	r1, [r2, #12]
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80012f6:	6812      	ldr	r2, [r2, #0]
 80012f8:	f012 0202 	ands.w	r2, r2, #2
 80012fc:	d003      	beq.n	8001306 <DCMI_MDMAFrameXferCplt+0x36>
      hdcmi->State = HAL_DCMI_STATE_READY;
 80012fe:	2201      	movs	r2, #1
 8001300:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8001304:	4770      	bx	lr
      hdcmi->XferCount = 0;
 8001306:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	2000a060 	.word	0x2000a060

08001310 <CAMERA_Init>:
  Camera_Context_Ptr->new_frame_ready=0;
 8001310:	2300      	movs	r3, #0
  __HAL_RCC_MDMA_CLK_ENABLE();
 8001312:	4a64      	ldr	r2, [pc, #400]	; (80014a4 <CAMERA_Init+0x194>)
  hmdma.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8001314:	f04f 5c80 	mov.w	ip, #268435456	; 0x10000000
{
 8001318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Camera_Context_Ptr->vsync_it=0;
 800131c:	6083      	str	r3, [r0, #8]
{
 800131e:	b082      	sub	sp, #8
  Camera_Context_Ptr->new_frame_ready=0;
 8001320:	7503      	strb	r3, [r0, #20]
  hmdma.Init.Request                  = MDMA_REQUEST_SW;
 8001322:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  hmdma.Instance = MDMA_Channel0;
 8001326:	4c60      	ldr	r4, [pc, #384]	; (80014a8 <CAMERA_Init+0x198>)
{
 8001328:	4606      	mov	r6, r0
  hmdma.Init.SourceInc                = MDMA_SRC_INC_WORD;
 800132a:	f240 2702 	movw	r7, #514	; 0x202
  Camera_Context_Ptr->Tvsync_evt=0;
 800132e:	e9c0 3303 	strd	r3, r3, [r0, #12]
  __HAL_RCC_MDMA_CLK_ENABLE();
 8001332:	f8d2 10d4 	ldr.w	r1, [r2, #212]	; 0xd4
  hmdma.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8001336:	f640 0008 	movw	r0, #2056	; 0x808
  hmdma.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800133a:	6123      	str	r3, [r4, #16]
  __HAL_RCC_MDMA_CLK_ENABLE();
 800133c:	f041 0101 	orr.w	r1, r1, #1
  hmdma.Init.SourceBurst              = MDMA_DEST_BURST_SINGLE;
 8001340:	62e3      	str	r3, [r4, #44]	; 0x2c
  hmdma.Init.SourceBlockAddressOffset = 0;
 8001342:	6363      	str	r3, [r4, #52]	; 0x34
  __HAL_RCC_MDMA_CLK_ENABLE();
 8001344:	f8c2 10d4 	str.w	r1, [r2, #212]	; 0xd4
  hmdma.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8001348:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  __HAL_RCC_MDMA_CLK_ENABLE();
 800134c:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
  hmdma.Init.DestBlockAddressOffset   = 0;
 8001350:	63a3      	str	r3, [r4, #56]	; 0x38
  __HAL_RCC_MDMA_CLK_ENABLE();
 8001352:	f002 0301 	and.w	r3, r2, #1
  hmdma.Instance = MDMA_Channel0;
 8001356:	4a55      	ldr	r2, [pc, #340]	; (80014ac <CAMERA_Init+0x19c>)
  hmdma.Init.Request                  = MDMA_REQUEST_SW;
 8001358:	6065      	str	r5, [r4, #4]
  hmdma.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 800135a:	2520      	movs	r5, #32
  __HAL_RCC_MDMA_CLK_ENABLE();
 800135c:	9301      	str	r3, [sp, #4]
 800135e:	9b01      	ldr	r3, [sp, #4]
  hmdma.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8001360:	2380      	movs	r3, #128	; 0x80
  hmdma.Instance = MDMA_Channel0;
 8001362:	6022      	str	r2, [r4, #0]
  hmdma.Init.DestBurst                = MDMA_DEST_BURST_16BEATS;
 8001364:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  hmdma.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8001368:	f8c4 c008 	str.w	ip, [r4, #8]
  hmdma.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 800136c:	61e5      	str	r5, [r4, #28]
  hmdma.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 800136e:	6261      	str	r1, [r4, #36]	; 0x24
  hmdma.Init.DestBurst                = MDMA_DEST_BURST_16BEATS;
 8001370:	6322      	str	r2, [r4, #48]	; 0x30
  hmdma.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8001372:	60e3      	str	r3, [r4, #12]
  hmdma.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 8001374:	6223      	str	r3, [r4, #32]
  hmdma.Init.BufferTransferLength     = 128;
 8001376:	62a3      	str	r3, [r4, #40]	; 0x28
  hmdma.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8001378:	e9c4 7005 	strd	r7, r0, [r4, #20]
  if (HAL_MDMA_Init(&hmdma) != HAL_OK)
 800137c:	4620      	mov	r0, r4
 800137e:	f00d fbff 	bl	800eb80 <HAL_MDMA_Init>
 8001382:	2800      	cmp	r0, #0
 8001384:	f040 8085 	bne.w	8001492 <CAMERA_Init+0x182>
  HAL_NVIC_SetPriority(MDMA_IRQn, 15U, 0);
 8001388:	2200      	movs	r2, #0
 800138a:	210f      	movs	r1, #15
 800138c:	207a      	movs	r0, #122	; 0x7a
 800138e:	f009 ff67 	bl	800b260 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8001392:	207a      	movs	r0, #122	; 0x7a
 8001394:	f009 ff9e 	bl	800b2d4 <HAL_NVIC_EnableIRQ>
  BSP_CAMERA_PwrDown(0);
 8001398:	2000      	movs	r0, #0
 800139a:	f008 ffcb 	bl	800a334 <BSP_CAMERA_PwrDown>
  HAL_Delay(200);
 800139e:	20c8      	movs	r0, #200	; 0xc8
 80013a0:	f009 ff2a 	bl	800b1f8 <HAL_Delay>
  if (BSP_CAMERA_Init(0, CAMERA_RESOLUTION, CAMERA_PF_RGB565) != BSP_ERROR_NONE) 
 80013a4:	2200      	movs	r2, #0
 80013a6:	2101      	movs	r1, #1
 80013a8:	4610      	mov	r0, r2
 80013aa:	f008 fd01 	bl	8009db0 <BSP_CAMERA_Init>
 80013ae:	2800      	cmp	r0, #0
 80013b0:	d16c      	bne.n	800148c <CAMERA_Init+0x17c>
  MODIFY_REG(DMA2_Stream3->CR, DMA_SxCR_PL, DMA_PRIORITY_VERY_HIGH);
 80013b2:	4a3f      	ldr	r2, [pc, #252]	; (80014b0 <CAMERA_Init+0x1a0>)
  if (Camera_Ctx[0].CameraId == OV5640_ID)
 80013b4:	f245 6140 	movw	r1, #22080	; 0x5640
 80013b8:	483e      	ldr	r0, [pc, #248]	; (80014b4 <CAMERA_Init+0x1a4>)
  MODIFY_REG(DMA2_Stream3->CR, DMA_SxCR_PL, DMA_PRIORITY_VERY_HIGH);
 80013ba:	6813      	ldr	r3, [r2, #0]
 80013bc:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80013c0:	6013      	str	r3, [r2, #0]
  MODIFY_REG(DMA2_Stream3->CR, DMA_SxCR_MBURST, DMA_MBURST_INC4);
 80013c2:	6813      	ldr	r3, [r2, #0]
 80013c4:	f023 73c0 	bic.w	r3, r3, #25165824	; 0x1800000
 80013c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80013cc:	6013      	str	r3, [r2, #0]
  if (Camera_Ctx[0].CameraId == OV5640_ID)
 80013ce:	6803      	ldr	r3, [r0, #0]
 80013d0:	428b      	cmp	r3, r1
 80013d2:	d04b      	beq.n	800146c <CAMERA_Init+0x15c>
  if (BSP_CAMERA_SetMirrorFlip(0, Camera_Context_Ptr->mirror_flip) != BSP_ERROR_NONE)
 80013d4:	69f1      	ldr	r1, [r6, #28]
 80013d6:	2000      	movs	r0, #0
 80013d8:	f008 ff88 	bl	800a2ec <BSP_CAMERA_SetMirrorFlip>
 80013dc:	4607      	mov	r7, r0
 80013de:	2800      	cmp	r0, #0
 80013e0:	d143      	bne.n	800146a <CAMERA_Init+0x15a>
  __HAL_LOCK(hdcmi);
 80013e2:	4d35      	ldr	r5, [pc, #212]	; (80014b8 <CAMERA_Init+0x1a8>)
  HAL_Delay(100);
 80013e4:	2064      	movs	r0, #100	; 0x64
 80013e6:	f009 ff07 	bl	800b1f8 <HAL_Delay>
  __HAL_LOCK(hdcmi);
 80013ea:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d056      	beq.n	80014a0 <CAMERA_Init+0x190>
  __HAL_DCMI_ENABLE(hdcmi);
 80013f2:	682b      	ldr	r3, [r5, #0]
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80013f4:	2202      	movs	r2, #2
  __HAL_LOCK(hdcmi);
 80013f6:	f04f 0801 	mov.w	r8, #1
  if (HAL_DCMIEx_Start_DMA_MDMA(&hcamera_dcmi, CAMERA_MODE_CONTINUOUS,
 80013fa:	6836      	ldr	r6, [r6, #0]
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80013fc:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8001400:	4619      	mov	r1, r3
  __HAL_LOCK(hdcmi);
 8001402:	f885 8034 	strb.w	r8, [r5, #52]	; 0x34
  hdcmi->XferSize = line_size / 4U;
 8001406:	f04f 0ca0 	mov.w	ip, #160	; 0xa0
  __HAL_DCMI_ENABLE(hdcmi);
 800140a:	681a      	ldr	r2, [r3, #0]
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMALineXferCplt;
 800140c:	6ca8      	ldr	r0, [r5, #72]	; 0x48
  __HAL_DCMI_ENABLE(hdcmi);
 800140e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001412:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	f022 0202 	bic.w	r2, r2, #2
 800141a:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 800141c:	681a      	ldr	r2, [r3, #0]
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMALineXferCplt;
 800141e:	4b27      	ldr	r3, [pc, #156]	; (80014bc <CAMERA_Init+0x1ac>)
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8001420:	f841 2b28 	str.w	r2, [r1], #40
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMALineXferCplt;
 8001424:	63c3      	str	r3, [r0, #60]	; 0x3c
  hmdma.XferCpltCallback = DCMI_MDMAFrameXferCplt;
 8001426:	4a26      	ldr	r2, [pc, #152]	; (80014c0 <CAMERA_Init+0x1b0>)
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8001428:	4b26      	ldr	r3, [pc, #152]	; (80014c4 <CAMERA_Init+0x1b4>)
  hdcmi->XferCount = 0;
 800142a:	63af      	str	r7, [r5, #56]	; 0x38
  hdcmi->pBuffPtr = (uint32_t) pData;
 800142c:	646e      	str	r6, [r5, #68]	; 0x44
  hdcmi->XferSize = line_size / 4U;
 800142e:	f8c5 c03c 	str.w	ip, [r5, #60]	; 0x3c
  hdcmi->XferTransferNumber = num_lines;
 8001432:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  hmdma.XferErrorCallback = DCMI_MDMAError;
 8001436:	4e24      	ldr	r6, [pc, #144]	; (80014c8 <CAMERA_Init+0x1b8>)
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8001438:	64c3      	str	r3, [r0, #76]	; 0x4c
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 800143a:	6507      	str	r7, [r0, #80]	; 0x50
  if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, pLineData, hdcmi->XferSize) != HAL_OK)
 800143c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  hmdma.XferCpltCallback = DCMI_MDMAFrameXferCplt;
 800143e:	6462      	str	r2, [r4, #68]	; 0x44
  if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, pLineData, hdcmi->XferSize) != HAL_OK)
 8001440:	4a22      	ldr	r2, [pc, #136]	; (80014cc <CAMERA_Init+0x1bc>)
  hdcmi->XferTransferNumber = num_lines;
 8001442:	f8c5 c040 	str.w	ip, [r5, #64]	; 0x40
  hmdma.XferErrorCallback = DCMI_MDMAError;
 8001446:	6566      	str	r6, [r4, #84]	; 0x54
  if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, pLineData, hdcmi->XferSize) != HAL_OK)
 8001448:	f00a fdf6 	bl	800c038 <HAL_DMA_Start_IT>
 800144c:	4603      	mov	r3, r0
 800144e:	bb18      	cbnz	r0, 8001498 <CAMERA_Init+0x188>
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8001450:	6829      	ldr	r1, [r5, #0]
  HAL_Delay(200);
 8001452:	20c8      	movs	r0, #200	; 0xc8
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8001454:	680a      	ldr	r2, [r1, #0]
 8001456:	f042 0201 	orr.w	r2, r2, #1
 800145a:	600a      	str	r2, [r1, #0]
  __HAL_UNLOCK(hdcmi);
 800145c:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
  HAL_Delay(200);
 8001460:	f009 feca 	bl	800b1f8 <HAL_Delay>
}
 8001464:	b002      	add	sp, #8
 8001466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while(1);
 800146a:	e7fe      	b.n	800146a <CAMERA_Init+0x15a>
    OV5640_Object_t *pObj = Camera_CompObj;
 800146c:	4918      	ldr	r1, [pc, #96]	; (80014d0 <CAMERA_Init+0x1c0>)
    uint8_t tmp = 0xC0; /* Bits[7:0]: PLL multiplier */
 800146e:	25c0      	movs	r5, #192	; 0xc0
    if (ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL2,  &tmp, 1) != OV5640_OK)
 8001470:	2301      	movs	r3, #1
 8001472:	f10d 0203 	add.w	r2, sp, #3
    OV5640_Object_t *pObj = Camera_CompObj;
 8001476:	6808      	ldr	r0, [r1, #0]
    if (ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL2,  &tmp, 1) != OV5640_OK)
 8001478:	f243 0136 	movw	r1, #12342	; 0x3036
    uint8_t tmp = 0xC0; /* Bits[7:0]: PLL multiplier */
 800147c:	f88d 5003 	strb.w	r5, [sp, #3]
    if (ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL2,  &tmp, 1) != OV5640_OK)
 8001480:	3018      	adds	r0, #24
 8001482:	f007 f947 	bl	8008714 <ov5640_write_reg>
 8001486:	2800      	cmp	r0, #0
 8001488:	d0a4      	beq.n	80013d4 <CAMERA_Init+0xc4>
      while(1);
 800148a:	e7fe      	b.n	800148a <CAMERA_Init+0x17a>
    Error_Handler();
 800148c:	f003 fbbe 	bl	8004c0c <Error_Handler>
 8001490:	e78f      	b.n	80013b2 <CAMERA_Init+0xa2>
    Error_Handler();
 8001492:	f003 fbbb 	bl	8004c0c <Error_Handler>
 8001496:	e777      	b.n	8001388 <CAMERA_Init+0x78>
    hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8001498:	2340      	movs	r3, #64	; 0x40
 800149a:	64eb      	str	r3, [r5, #76]	; 0x4c
    hdcmi->State = HAL_DCMI_STATE_READY;
 800149c:	f885 8035 	strb.w	r8, [r5, #53]	; 0x35
    while(1);
 80014a0:	e7fe      	b.n	80014a0 <CAMERA_Init+0x190>
 80014a2:	bf00      	nop
 80014a4:	58024400 	.word	0x58024400
 80014a8:	20009858 	.word	0x20009858
 80014ac:	52000040 	.word	0x52000040
 80014b0:	40020458 	.word	0x40020458
 80014b4:	2000a0b0 	.word	0x2000a0b0
 80014b8:	2000a060 	.word	0x2000a060
 80014bc:	08001299 	.word	0x08001299
 80014c0:	080012d1 	.word	0x080012d1
 80014c4:	0800127d 	.word	0x0800127d
 80014c8:	0800126d 	.word	0x0800126d
 80014cc:	30000000 	.word	0x30000000
 80014d0:	20009428 	.word	0x20009428

080014d4 <CAMERA_Set_MirrorFlip>:
{
 80014d4:	b508      	push	{r3, lr}
 80014d6:	4603      	mov	r3, r0
  if (BSP_CAMERA_SetMirrorFlip(0, Camera_Context_Ptr->mirror_flip) != BSP_ERROR_NONE)
 80014d8:	2000      	movs	r0, #0
  Camera_Context_Ptr->mirror_flip = MirrorFlip;
 80014da:	61d9      	str	r1, [r3, #28]
  if (BSP_CAMERA_SetMirrorFlip(0, Camera_Context_Ptr->mirror_flip) != BSP_ERROR_NONE)
 80014dc:	f008 ff06 	bl	800a2ec <BSP_CAMERA_SetMirrorFlip>
 80014e0:	b900      	cbnz	r0, 80014e4 <CAMERA_Set_MirrorFlip+0x10>
}
 80014e2:	bd08      	pop	{r3, pc}
    while(1);
 80014e4:	e7fe      	b.n	80014e4 <CAMERA_Set_MirrorFlip+0x10>
 80014e6:	bf00      	nop

080014e8 <CAMERA_Enable_TestBar_Mode>:
  uint32_t camera_id = Camera_Ctx[0].CameraId;
 80014e8:	4a15      	ldr	r2, [pc, #84]	; (8001540 <CAMERA_Enable_TestBar_Mode+0x58>)
  if ((camera_id == OV9655_ID) || (camera_id == OV9655_ID_2))
 80014ea:	4b16      	ldr	r3, [pc, #88]	; (8001544 <CAMERA_Enable_TestBar_Mode+0x5c>)
 80014ec:	6812      	ldr	r2, [r2, #0]
 80014ee:	4413      	add	r3, r2
 80014f0:	2b01      	cmp	r3, #1
{ 
 80014f2:	b510      	push	{r4, lr}
 80014f4:	b082      	sub	sp, #8
  if ((camera_id == OV9655_ID) || (camera_id == OV9655_ID_2))
 80014f6:	d906      	bls.n	8001506 <CAMERA_Enable_TestBar_Mode+0x1e>
    OV5640_Object_t *pObj = Camera_CompObj;
 80014f8:	4b13      	ldr	r3, [pc, #76]	; (8001548 <CAMERA_Enable_TestBar_Mode+0x60>)
    if (OV5640_ColorbarModeConfig(pObj, COLORBAR_MODE_ENABLE) != OV5640_OK)
 80014fa:	2101      	movs	r1, #1
 80014fc:	6818      	ldr	r0, [r3, #0]
 80014fe:	f007 f8b3 	bl	8008668 <OV5640_ColorbarModeConfig>
 8001502:	b1b8      	cbz	r0, 8001534 <CAMERA_Enable_TestBar_Mode+0x4c>
      while(1);
 8001504:	e7fe      	b.n	8001504 <CAMERA_Enable_TestBar_Mode+0x1c>
    OV9655_Object_t *pObj = Camera_CompObj;
 8001506:	4a10      	ldr	r2, [pc, #64]	; (8001548 <CAMERA_Enable_TestBar_Mode+0x60>)
    ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL20, &tmp, 1);
 8001508:	2301      	movs	r3, #1
 800150a:	218d      	movs	r1, #141	; 0x8d
 800150c:	6814      	ldr	r4, [r2, #0]
 800150e:	f10d 0207 	add.w	r2, sp, #7
 8001512:	3418      	adds	r4, #24
 8001514:	4620      	mov	r0, r4
 8001516:	f007 fd91 	bl	800903c <ov9655_read_reg>
    tmp |= 0x10; /* Set bit[4]: Color bar test mode */
 800151a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL20, &tmp, 1);
 800151e:	4620      	mov	r0, r4
 8001520:	f10d 0207 	add.w	r2, sp, #7
    tmp |= 0x10; /* Set bit[4]: Color bar test mode */
 8001524:	f043 0410 	orr.w	r4, r3, #16
    ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL20, &tmp, 1);
 8001528:	218d      	movs	r1, #141	; 0x8d
 800152a:	2301      	movs	r3, #1
    tmp |= 0x10; /* Set bit[4]: Color bar test mode */
 800152c:	f88d 4007 	strb.w	r4, [sp, #7]
    ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL20, &tmp, 1);
 8001530:	f007 fd8c 	bl	800904c <ov9655_write_reg>
  HAL_Delay(500);
 8001534:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001538:	f009 fe5e 	bl	800b1f8 <HAL_Delay>
}
 800153c:	b002      	add	sp, #8
 800153e:	bd10      	pop	{r4, pc}
 8001540:	2000a0b0 	.word	0x2000a0b0
 8001544:	ffff69aa 	.word	0xffff69aa
 8001548:	20009428 	.word	0x20009428

0800154c <CAMERA_Disable_TestBar_Mode>:
  uint32_t camera_id = Camera_Ctx[0].CameraId;
 800154c:	4a18      	ldr	r2, [pc, #96]	; (80015b0 <CAMERA_Disable_TestBar_Mode+0x64>)
  if ((camera_id == OV9655_ID) || (camera_id == OV9655_ID_2))
 800154e:	4b19      	ldr	r3, [pc, #100]	; (80015b4 <CAMERA_Disable_TestBar_Mode+0x68>)
 8001550:	6812      	ldr	r2, [r2, #0]
 8001552:	4413      	add	r3, r2
 8001554:	2b01      	cmp	r3, #1
{ 
 8001556:	b510      	push	{r4, lr}
 8001558:	b082      	sub	sp, #8
  if ((camera_id == OV9655_ID) || (camera_id == OV9655_ID_2))
 800155a:	d906      	bls.n	800156a <CAMERA_Disable_TestBar_Mode+0x1e>
    OV5640_Object_t *pObj = Camera_CompObj;
 800155c:	4b16      	ldr	r3, [pc, #88]	; (80015b8 <CAMERA_Disable_TestBar_Mode+0x6c>)
    if (OV5640_ColorbarModeConfig(pObj, COLORBAR_MODE_DISABLE) != OV5640_OK)
 800155e:	2100      	movs	r1, #0
 8001560:	6818      	ldr	r0, [r3, #0]
 8001562:	f007 f881 	bl	8008668 <OV5640_ColorbarModeConfig>
 8001566:	b1e0      	cbz	r0, 80015a2 <CAMERA_Disable_TestBar_Mode+0x56>
      while(1);
 8001568:	e7fe      	b.n	8001568 <CAMERA_Disable_TestBar_Mode+0x1c>
    OV9655_Object_t *pObj = Camera_CompObj;
 800156a:	4a13      	ldr	r2, [pc, #76]	; (80015b8 <CAMERA_Disable_TestBar_Mode+0x6c>)
    tmp=0x00;
 800156c:	2100      	movs	r1, #0
    ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL20, &tmp, 1);
 800156e:	2301      	movs	r3, #1
    OV9655_Object_t *pObj = Camera_CompObj;
 8001570:	6814      	ldr	r4, [r2, #0]
    ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL20, &tmp, 1);
 8001572:	f10d 0207 	add.w	r2, sp, #7
    tmp=0x00;
 8001576:	f88d 1007 	strb.w	r1, [sp, #7]
    ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL20, &tmp, 1);
 800157a:	218d      	movs	r1, #141	; 0x8d
 800157c:	3418      	adds	r4, #24
 800157e:	4620      	mov	r0, r4
 8001580:	f007 fd64 	bl	800904c <ov9655_write_reg>
    HAL_Delay(300);
 8001584:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001588:	f009 fe36 	bl	800b1f8 <HAL_Delay>
    ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL3, &tmp, 1);
 800158c:	4620      	mov	r0, r4
 800158e:	f10d 0207 	add.w	r2, sp, #7
 8001592:	2301      	movs	r3, #1
 8001594:	210c      	movs	r1, #12
 8001596:	f007 fd59 	bl	800904c <ov9655_write_reg>
    HAL_Delay(300);
 800159a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800159e:	f009 fe2b 	bl	800b1f8 <HAL_Delay>
  HAL_Delay(500);
 80015a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015a6:	f009 fe27 	bl	800b1f8 <HAL_Delay>
}
 80015aa:	b002      	add	sp, #8
 80015ac:	bd10      	pop	{r4, pc}
 80015ae:	bf00      	nop
 80015b0:	2000a0b0 	.word	0x2000a0b0
 80015b4:	ffff69aa 	.word	0xffff69aa
 80015b8:	20009428 	.word	0x20009428

080015bc <BSP_CAMERA_FrameEventCallback>:
{
 80015bc:	b570      	push	{r4, r5, r6, lr}
  AppContext_TypeDef *App_Cxt_Ptr=CameraContext.AppCtxPtr;
 80015be:	4c0c      	ldr	r4, [pc, #48]	; (80015f0 <BSP_CAMERA_FrameEventCallback+0x34>)
 80015c0:	69a3      	ldr	r3, [r4, #24]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015c2:	b672      	cpsid	i
  CameraContext.new_frame_ready = 1;
 80015c4:	2501      	movs	r5, #1
  App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestop = HAL_GetTick();
 80015c6:	6a9e      	ldr	r6, [r3, #40]	; 0x28
  CameraContext.new_frame_ready = 1;
 80015c8:	7525      	strb	r5, [r4, #20]
  App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestop = HAL_GetTick();
 80015ca:	f009 fe0f 	bl	800b1ec <HAL_GetTick>
 80015ce:	6270      	str	r0, [r6, #36]	; 0x24
  CameraContext.new_frame_ready = 1;
 80015d0:	7525      	strb	r5, [r4, #20]
  CameraContext.Tframe_evt=HAL_GetTick();
 80015d2:	f009 fe0b 	bl	800b1ec <HAL_GetTick>
  if((CameraContext.Tframe_evt-CameraContext.Tvsync_evt)<3)
 80015d6:	6923      	ldr	r3, [r4, #16]
  CameraContext.Tframe_evt=HAL_GetTick();
 80015d8:	60e0      	str	r0, [r4, #12]
  if((CameraContext.Tframe_evt-CameraContext.Tvsync_evt)<3)
 80015da:	1ac3      	subs	r3, r0, r3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d801      	bhi.n	80015e4 <BSP_CAMERA_FrameEventCallback+0x28>
    CameraContext.vsync_it =2;
 80015e0:	2302      	movs	r3, #2
 80015e2:	60a3      	str	r3, [r4, #8]
  BSP_CAMERA_Suspend(0);
 80015e4:	2000      	movs	r0, #0
 80015e6:	f008 fe19 	bl	800a21c <BSP_CAMERA_Suspend>
  __ASM volatile ("cpsie i" : : : "memory");
 80015ea:	b662      	cpsie	i
}
 80015ec:	bd70      	pop	{r4, r5, r6, pc}
 80015ee:	bf00      	nop
 80015f0:	200098c4 	.word	0x200098c4

080015f4 <BSP_CAMERA_VsyncEventCallback>:
{ 
 80015f4:	b570      	push	{r4, r5, r6, lr}
  AppContext_TypeDef *App_Cxt_Ptr=CameraContext.AppCtxPtr;
 80015f6:	4c19      	ldr	r4, [pc, #100]	; (800165c <BSP_CAMERA_VsyncEventCallback+0x68>)
 80015f8:	69a5      	ldr	r5, [r4, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 80015fa:	b672      	cpsid	i
  CameraContext.Tvsync_evt=HAL_GetTick();
 80015fc:	f009 fdf6 	bl	800b1ec <HAL_GetTick>
  if(CameraContext.vsync_it==0)
 8001600:	68a3      	ldr	r3, [r4, #8]
  CameraContext.Tvsync_evt=HAL_GetTick();
 8001602:	6120      	str	r0, [r4, #16]
  if(CameraContext.vsync_it==0)
 8001604:	b19b      	cbz	r3, 800162e <BSP_CAMERA_VsyncEventCallback+0x3a>
  else if(CameraContext.vsync_it==1 && ((CameraContext.new_frame_ready == 0) || ((CameraContext.new_frame_ready == 1) && ((CameraContext.Tvsync_evt - CameraContext.Tframe_evt) < 3))))//3 ms: in reality the time diff is in the magnitude of a few hundreds of ns, but some margin is required because there could be other interrupts in between the vsync_evt IT and the frame_evt IT.
 8001606:	2b01      	cmp	r3, #1
 8001608:	d007      	beq.n	800161a <BSP_CAMERA_VsyncEventCallback+0x26>
 800160a:	68e3      	ldr	r3, [r4, #12]
 800160c:	1ac0      	subs	r0, r0, r3
  if(CameraContext.Tvsync_evt - CameraContext.Tframe_evt <3)
 800160e:	2802      	cmp	r0, #2
 8001610:	d801      	bhi.n	8001616 <BSP_CAMERA_VsyncEventCallback+0x22>
    CameraContext.vsync_it =2;
 8001612:	2302      	movs	r3, #2
 8001614:	60a3      	str	r3, [r4, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8001616:	b662      	cpsie	i
}
 8001618:	bd70      	pop	{r4, r5, r6, pc}
  else if(CameraContext.vsync_it==1 && ((CameraContext.new_frame_ready == 0) || ((CameraContext.new_frame_ready == 1) && ((CameraContext.Tvsync_evt - CameraContext.Tframe_evt) < 3))))//3 ms: in reality the time diff is in the magnitude of a few hundreds of ns, but some margin is required because there could be other interrupts in between the vsync_evt IT and the frame_evt IT.
 800161a:	7d23      	ldrb	r3, [r4, #20]
 800161c:	b9a3      	cbnz	r3, 8001648 <BSP_CAMERA_VsyncEventCallback+0x54>
 800161e:	68e3      	ldr	r3, [r4, #12]
 8001620:	1ac0      	subs	r0, r0, r3
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart=App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart2;
 8001622:	6aab      	ldr	r3, [r5, #40]	; 0x28
    CameraContext.vsync_it ++;
 8001624:	2102      	movs	r1, #2
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart=App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart2;
 8001626:	69da      	ldr	r2, [r3, #28]
    CameraContext.vsync_it ++;
 8001628:	60a1      	str	r1, [r4, #8]
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart=App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart2;
 800162a:	621a      	str	r2, [r3, #32]
    CameraContext.vsync_it ++;
 800162c:	e7ef      	b.n	800160e <BSP_CAMERA_VsyncEventCallback+0x1a>
    CameraContext.vsync_it ++;
 800162e:	2301      	movs	r3, #1
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart2 = HAL_GetTick();
 8001630:	6aae      	ldr	r6, [r5, #40]	; 0x28
    CameraContext.vsync_it ++;
 8001632:	60a3      	str	r3, [r4, #8]
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart2 = HAL_GetTick();
 8001634:	f009 fdda 	bl	800b1ec <HAL_GetTick>
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart=App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1;
 8001638:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800163a:	6923      	ldr	r3, [r4, #16]
 800163c:	6991      	ldr	r1, [r2, #24]
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart2 = HAL_GetTick();
 800163e:	61f0      	str	r0, [r6, #28]
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart=App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1;
 8001640:	68e0      	ldr	r0, [r4, #12]
 8001642:	6211      	str	r1, [r2, #32]
 8001644:	1a18      	subs	r0, r3, r0
 8001646:	e7e2      	b.n	800160e <BSP_CAMERA_VsyncEventCallback+0x1a>
  else if(CameraContext.vsync_it==1 && ((CameraContext.new_frame_ready == 0) || ((CameraContext.new_frame_ready == 1) && ((CameraContext.Tvsync_evt - CameraContext.Tframe_evt) < 3))))//3 ms: in reality the time diff is in the magnitude of a few hundreds of ns, but some margin is required because there could be other interrupts in between the vsync_evt IT and the frame_evt IT.
 8001648:	7d23      	ldrb	r3, [r4, #20]
 800164a:	2b01      	cmp	r3, #1
 800164c:	68e3      	ldr	r3, [r4, #12]
 800164e:	eba0 0003 	sub.w	r0, r0, r3
 8001652:	d1dc      	bne.n	800160e <BSP_CAMERA_VsyncEventCallback+0x1a>
 8001654:	2802      	cmp	r0, #2
 8001656:	d8de      	bhi.n	8001616 <BSP_CAMERA_VsyncEventCallback+0x22>
 8001658:	e7e3      	b.n	8001622 <BSP_CAMERA_VsyncEventCallback+0x2e>
 800165a:	bf00      	nop
 800165c:	200098c4 	.word	0x200098c4

08001660 <BSP_CAMERA_ErrorCallback>:
  Error_Handler();
 8001660:	f003 bad4 	b.w	8004c0c <Error_Handler>

08001664 <DISPLAY_Init>:
 * @brief  Dispaly Initialization
 * @param Display_Context_Ptr pointer to display context
 * @retval None
 */
void DISPLAY_Init(DisplayContext_TypeDef* Display_Context_Ptr)
{
 8001664:	b5f0      	push	{r4, r5, r6, r7, lr}

  /*
   * Disable FMC Bank1 to prevent CPU speculative read accesses
   * AN4861: 4.6.1 Disable FMC bank1 if not used.
   */
  __FMC_NORSRAM_DISABLE(FMC_Bank1_R, FMC_NORSRAM_BANK1);
 8001666:	4a21      	ldr	r2, [pc, #132]	; (80016ec <DISPLAY_Init+0x88>)
  Display_Context_Ptr->lcd_sync=0;
 8001668:	2500      	movs	r5, #0
{
 800166a:	4604      	mov	r4, r0
  Display_Context_Ptr->lcd_frame_read_buff=lcd_display_read_buffer;
 800166c:	4f20      	ldr	r7, [pc, #128]	; (80016f0 <DISPLAY_Init+0x8c>)
  Display_Context_Ptr->lcd_frame_write_buff=lcd_display_write_buffer;
 800166e:	4e21      	ldr	r6, [pc, #132]	; (80016f4 <DISPLAY_Init+0x90>)
{
 8001670:	b087      	sub	sp, #28
  Display_Context_Ptr->lcd_sync=0;
 8001672:	60a5      	str	r5, [r4, #8]

  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);/*by default, 0xD0000000 is used as start address for lcd frame buffer*/
 8001674:	2101      	movs	r1, #1
  __FMC_NORSRAM_DISABLE(FMC_Bank1_R, FMC_NORSRAM_BANK1);
 8001676:	6813      	ldr	r3, [r2, #0]
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);/*by default, 0xD0000000 is used as start address for lcd frame buffer*/
 8001678:	4628      	mov	r0, r5
  Display_Context_Ptr->lcd_frame_read_buff=lcd_display_read_buffer;
 800167a:	683f      	ldr	r7, [r7, #0]
  Display_Context_Ptr->lcd_frame_write_buff=lcd_display_write_buffer;
 800167c:	6836      	ldr	r6, [r6, #0]
  __FMC_NORSRAM_DISABLE(FMC_Bank1_R, FMC_NORSRAM_BANK1);
 800167e:	f023 0301 	bic.w	r3, r3, #1
  Display_Context_Ptr->lcd_frame_write_buff=lcd_display_write_buffer;
 8001682:	e9c4 7600 	strd	r7, r6, [r4]
  __FMC_NORSRAM_DISABLE(FMC_Bank1_R, FMC_NORSRAM_BANK1);
 8001686:	6013      	str	r3, [r2, #0]

  config.X0          = 0;
 8001688:	2600      	movs	r6, #0
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);/*by default, 0xD0000000 is used as start address for lcd frame buffer*/
 800168a:	f009 fbf9 	bl	800ae80 <BSP_LCD_Init>
  config.X0          = 0;
 800168e:	f44f 7348 	mov.w	r3, #800	; 0x320
  config.X1          = LCD_DEFAULT_WIDTH;
  config.Y0          = 0;
  config.Y1          = LCD_DEFAULT_HEIGHT;
  config.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
  config.Address     = (uint32_t)Display_Context_Ptr->lcd_frame_read_buff;/*lcd_frame_read_buff buffer used as lcd frame buffer*/
 8001692:	6820      	ldr	r0, [r4, #0]
  config.X0          = 0;
 8001694:	2200      	movs	r2, #0
 8001696:	f44f 77f0 	mov.w	r7, #480	; 0x1e0
  BSP_LCD_ConfigLayer(0, 0, &config);//overwrite config 
 800169a:	4629      	mov	r1, r5
  config.X0          = 0;
 800169c:	e9cd 2300 	strd	r2, r3, [sp]
  config.Address     = (uint32_t)Display_Context_Ptr->lcd_frame_read_buff;/*lcd_frame_read_buff buffer used as lcd frame buffer*/
 80016a0:	e9cd 5004 	strd	r5, r0, [sp, #16]
  BSP_LCD_ConfigLayer(0, 0, &config);//overwrite config 
 80016a4:	466a      	mov	r2, sp
 80016a6:	4628      	mov	r0, r5
  config.X0          = 0;
 80016a8:	e9cd 6702 	strd	r6, r7, [sp, #8]
  BSP_LCD_ConfigLayer(0, 0, &config);//overwrite config 
 80016ac:	f009 fbf4 	bl	800ae98 <BSP_LCD_ConfigLayer>
  
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
 80016b0:	4811      	ldr	r0, [pc, #68]	; (80016f8 <DISPLAY_Init+0x94>)
 80016b2:	f019 fa01 	bl	801aab8 <UTIL_LCD_SetFuncDriver>
  UTIL_LCD_SetLayer(0);
 80016b6:	4628      	mov	r0, r5
 80016b8:	f019 fa30 	bl	801ab1c <UTIL_LCD_SetLayer>
  
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
 80016bc:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80016c0:	f019 fa44 	bl	801ab4c <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 80016c4:	f04f 30ff 	mov.w	r0, #4294967295
 80016c8:	f019 fa38 	bl	801ab3c <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetFont(&Font24);
 80016cc:	480b      	ldr	r0, [pc, #44]	; (80016fc <DISPLAY_Init+0x98>)
 80016ce:	f019 fa45 	bl	801ab5c <UTIL_LCD_SetFont>
  
  /*Use lcd_frame_write_buff buffer for display composition*/
  hlcd_ltdc.LayerCfg[Lcd_Ctx[0].ActiveLayer].FBStartAdress=(uint32_t)Display_Context_Ptr->lcd_frame_write_buff;
 80016d2:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <DISPLAY_Init+0x9c>)
 80016d4:	480b      	ldr	r0, [pc, #44]	; (8001704 <DISPLAY_Init+0xa0>)
 80016d6:	2534      	movs	r5, #52	; 0x34
 80016d8:	689b      	ldr	r3, [r3, #8]
  
  /*LCD sync: set LTDCreload type to vertical blanking*/
  HAL_LTDC_Reload(&hlcd_ltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 80016da:	2102      	movs	r1, #2
  hlcd_ltdc.LayerCfg[Lcd_Ctx[0].ActiveLayer].FBStartAdress=(uint32_t)Display_Context_Ptr->lcd_frame_write_buff;
 80016dc:	6862      	ldr	r2, [r4, #4]
 80016de:	fb05 0303 	mla	r3, r5, r3, r0
 80016e2:	65da      	str	r2, [r3, #92]	; 0x5c
  HAL_LTDC_Reload(&hlcd_ltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 80016e4:	f00d fa32 	bl	800eb4c <HAL_LTDC_Reload>
}
 80016e8:	b007      	add	sp, #28
 80016ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016ec:	52004000 	.word	0x52004000
 80016f0:	2000000c 	.word	0x2000000c
 80016f4:	20000010 	.word	0x20000010
 80016f8:	08097a2c 	.word	0x08097a2c
 80016fc:	20007710 	.word	0x20007710
 8001700:	2000a18c 	.word	0x2000a18c
 8001704:	2000a0e4 	.word	0x2000a0e4

08001708 <DISPLAY_WelcomeScreen>:
 *
 * @param Display_Context_Ptr pointer to display context
 * @return int boolean value, 1 if WakeUp button has been pressed, 0 otherwise
 */
int DISPLAY_WelcomeScreen(DisplayContext_TypeDef* Display_Context_Ptr)
{
 8001708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800170a:	4605      	mov	r5, r0
 800170c:	b089      	sub	sp, #36	; 0x24
  int magic_menu = 0;
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 800170e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001712:	f019 fa33 	bl	801ab7c <UTIL_LCD_Clear>

  /* Draw logos.*/
  BSP_LCD_DrawBitmap(0, 50, 77, (uint8_t *)stlogo);
 8001716:	4b4b      	ldr	r3, [pc, #300]	; (8001844 <DISPLAY_WelcomeScreen+0x13c>)
 8001718:	224d      	movs	r2, #77	; 0x4d
 800171a:	2132      	movs	r1, #50	; 0x32
 800171c:	2000      	movs	r0, #0
 800171e:	f008 ff3d 	bl	800a59c <BSP_LCD_DrawBitmap>
  BSP_LCD_DrawBitmap(0, 620, 85, (uint8_t *)stm32h7logo);
 8001722:	4b49      	ldr	r3, [pc, #292]	; (8001848 <DISPLAY_WelcomeScreen+0x140>)
 8001724:	2255      	movs	r2, #85	; 0x55
 8001726:	f44f 711b 	mov.w	r1, #620	; 0x26c
 800172a:	2000      	movs	r0, #0
 800172c:	f008 ff36 	bl	800a59c <BSP_LCD_DrawBitmap>

  /*Display welcome message*/
  UTIL_LCD_DisplayStringAt(0, LINE(6), (uint8_t *)"VISION1 Function Pack", CENTER_MODE);
 8001730:	f019 fa1c 	bl	801ab6c <UTIL_LCD_GetFont>
 8001734:	88c1      	ldrh	r1, [r0, #6]
 8001736:	2301      	movs	r3, #1
 8001738:	4a44      	ldr	r2, [pc, #272]	; (800184c <DISPLAY_WelcomeScreen+0x144>)
 800173a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800173e:	2000      	movs	r0, #0
 8001740:	4099      	lsls	r1, r3
 8001742:	f019 fb03 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(7), (uint8_t *)"V3.1.0", CENTER_MODE);
 8001746:	f019 fa11 	bl	801ab6c <UTIL_LCD_GetFont>
 800174a:	88c1      	ldrh	r1, [r0, #6]
 800174c:	2301      	movs	r3, #1
 800174e:	4a40      	ldr	r2, [pc, #256]	; (8001850 <DISPLAY_WelcomeScreen+0x148>)
 8001750:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8001754:	2000      	movs	r0, #0
 8001756:	f019 faf9 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(10), (uint8_t *)WELCOME_MSG_0, CENTER_MODE);
 800175a:	f019 fa07 	bl	801ab6c <UTIL_LCD_GetFont>
 800175e:	88c1      	ldrh	r1, [r0, #6]
 8001760:	2301      	movs	r3, #1
 8001762:	4a3c      	ldr	r2, [pc, #240]	; (8001854 <DISPLAY_WelcomeScreen+0x14c>)
 8001764:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001768:	2000      	movs	r0, #0
 800176a:	4099      	lsls	r1, r3
 800176c:	f019 faee 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(11), (uint8_t *)WELCOME_MSG_2, CENTER_MODE);
 8001770:	f019 f9fc 	bl	801ab6c <UTIL_LCD_GetFont>
 8001774:	88c1      	ldrh	r1, [r0, #6]
 8001776:	2301      	movs	r3, #1
 8001778:	4a37      	ldr	r2, [pc, #220]	; (8001858 <DISPLAY_WelcomeScreen+0x150>)
 800177a:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 800177e:	2000      	movs	r0, #0
 8001780:	eb01 0144 	add.w	r1, r1, r4, lsl #1
 8001784:	f019 fae2 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(12), (uint8_t *)WELCOME_MSG_1, CENTER_MODE);
 8001788:	f019 f9f0 	bl	801ab6c <UTIL_LCD_GetFont>
 800178c:	88c1      	ldrh	r1, [r0, #6]
 800178e:	2301      	movs	r3, #1
 8001790:	4a32      	ldr	r2, [pc, #200]	; (800185c <DISPLAY_WelcomeScreen+0x154>)
 8001792:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001796:	2000      	movs	r0, #0
 8001798:	0089      	lsls	r1, r1, #2
 800179a:	f019 fad7 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(13), (uint8_t *)WELCOME_MSG_4, CENTER_MODE);
 800179e:	f019 f9e5 	bl	801ab6c <UTIL_LCD_GetFont>
 80017a2:	88c1      	ldrh	r1, [r0, #6]
 80017a4:	2301      	movs	r3, #1
 80017a6:	4a2e      	ldr	r2, [pc, #184]	; (8001860 <DISPLAY_WelcomeScreen+0x158>)
 80017a8:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 80017ac:	2000      	movs	r0, #0
 80017ae:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80017b2:	f019 facb 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)WELCOME_MSG_5, CENTER_MODE);
 80017b6:	f019 f9d9 	bl	801ab6c <UTIL_LCD_GetFont>
 80017ba:	88c1      	ldrh	r1, [r0, #6]
 80017bc:	2301      	movs	r3, #1
 80017be:	4a29      	ldr	r2, [pc, #164]	; (8001864 <DISPLAY_WelcomeScreen+0x15c>)
 80017c0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80017c4:	2000      	movs	r0, #0
 80017c6:	4099      	lsls	r1, r3
 80017c8:	f019 fac0 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(15), (uint8_t *)WELCOME_MSG_3, CENTER_MODE);
 80017cc:	f019 f9ce 	bl	801ab6c <UTIL_LCD_GetFont>
 80017d0:	88c1      	ldrh	r1, [r0, #6]
 80017d2:	2301      	movs	r3, #1
 80017d4:	4a24      	ldr	r2, [pc, #144]	; (8001868 <DISPLAY_WelcomeScreen+0x160>)
 80017d6:	2000      	movs	r0, #0
 80017d8:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 80017dc:	f019 fab6 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
 */
void DISPLAY_Refresh(DisplayContext_TypeDef* Display_Context_Ptr)
{
  /*LCD sync: wait for next VSYNC event before refreshing, i.e. before updating the content of the buffer that will be read by the LTDC for display. 
  The refresh occurs during the blanking period => this sync mecanism should enable to avoid tearing effect*/
  Display_Context_Ptr->lcd_sync =0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60ab      	str	r3, [r5, #8]
  while(Display_Context_Ptr->lcd_sync==0);
 80017e4:	68ab      	ldr	r3, [r5, #8]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d0fc      	beq.n	80017e4 <DISPLAY_WelcomeScreen+0xdc>
  
  /*Coherency purpose: clean the lcd_frame_write_buff area in L1 D-Cache before DMA2D reading*/
  UTILS_DCache_Coherency_Maintenance((void *)Display_Context_Ptr->lcd_frame_write_buff, LCD_FRAME_BUFFER_SIZE, CLEAN);
 80017ea:	2202      	movs	r2, #2
 80017ec:	491f      	ldr	r1, [pc, #124]	; (800186c <DISPLAY_WelcomeScreen+0x164>)
 80017ee:	6868      	ldr	r0, [r5, #4]
  
  UTILS_Dma2d_Memcpy((uint32_t *)(Display_Context_Ptr->lcd_frame_write_buff), (uint32_t *)(Display_Context_Ptr->lcd_frame_read_buff), 0, 0, LCD_RES_WIDTH,
 80017f0:	2700      	movs	r7, #0
  UTILS_DCache_Coherency_Maintenance((void *)Display_Context_Ptr->lcd_frame_write_buff, LCD_FRAME_BUFFER_SIZE, CLEAN);
 80017f2:	f003 f99d 	bl	8004b30 <UTILS_DCache_Coherency_Maintenance>
  UTILS_Dma2d_Memcpy((uint32_t *)(Display_Context_Ptr->lcd_frame_write_buff), (uint32_t *)(Display_Context_Ptr->lcd_frame_read_buff), 0, 0, LCD_RES_WIDTH,
 80017f6:	f44f 7148 	mov.w	r1, #800	; 0x320
 80017fa:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80017fe:	9706      	str	r7, [sp, #24]
 8001800:	9705      	str	r7, [sp, #20]
 8001802:	463b      	mov	r3, r7
 8001804:	9102      	str	r1, [sp, #8]
 8001806:	463a      	mov	r2, r7
  int magic_menu = 0;
 8001808:	463e      	mov	r6, r7
  UTILS_Dma2d_Memcpy((uint32_t *)(Display_Context_Ptr->lcd_frame_write_buff), (uint32_t *)(Display_Context_Ptr->lcd_frame_read_buff), 0, 0, LCD_RES_WIDTH,
 800180a:	2405      	movs	r4, #5
 800180c:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8001810:	e9cd 1000 	strd	r1, r0, [sp]
 8001814:	e9d5 1000 	ldrd	r1, r0, [r5]
 8001818:	f003 f8ce 	bl	80049b8 <UTILS_Dma2d_Memcpy>
    HAL_Delay(500);
 800181c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001820:	f009 fcea 	bl	800b1f8 <HAL_Delay>
    if (BSP_PB_GetState(BUTTON_WAKEUP) != RESET)
 8001824:	2000      	movs	r0, #0
 8001826:	f007 fcc1 	bl	80091ac <BSP_PB_GetState>
      magic_menu = 1;
 800182a:	2800      	cmp	r0, #0
 800182c:	bf18      	it	ne
 800182e:	2601      	movne	r6, #1
  for (int i = 0; i < 5; i++)
 8001830:	3c01      	subs	r4, #1
 8001832:	d1f3      	bne.n	800181c <DISPLAY_WelcomeScreen+0x114>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8001834:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001838:	f019 f9a0 	bl	801ab7c <UTIL_LCD_Clear>
}
 800183c:	4630      	mov	r0, r6
 800183e:	b009      	add	sp, #36	; 0x24
 8001840:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001842:	bf00      	nop
 8001844:	081000a8 	.word	0x081000a8
 8001848:	081082f0 	.word	0x081082f0
 800184c:	08100008 	.word	0x08100008
 8001850:	08100020 	.word	0x08100020
 8001854:	08100028 	.word	0x08100028
 8001858:	0810003c 	.word	0x0810003c
 800185c:	08100054 	.word	0x08100054
 8001860:	0810006c 	.word	0x0810006c
 8001864:	08100080 	.word	0x08100080
 8001868:	081000a0 	.word	0x081000a0
 800186c:	00177000 	.word	0x00177000

08001870 <DISPLAY_Refresh>:
{
 8001870:	b510      	push	{r4, lr}
  Display_Context_Ptr->lcd_sync =0;
 8001872:	2300      	movs	r3, #0
{
 8001874:	b088      	sub	sp, #32
 8001876:	4604      	mov	r4, r0
  Display_Context_Ptr->lcd_sync =0;
 8001878:	6083      	str	r3, [r0, #8]
  while(Display_Context_Ptr->lcd_sync==0);
 800187a:	68a3      	ldr	r3, [r4, #8]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d0fc      	beq.n	800187a <DISPLAY_Refresh+0xa>
  UTILS_DCache_Coherency_Maintenance((void *)Display_Context_Ptr->lcd_frame_write_buff, LCD_FRAME_BUFFER_SIZE, CLEAN);
 8001880:	6860      	ldr	r0, [r4, #4]
 8001882:	2202      	movs	r2, #2
 8001884:	490a      	ldr	r1, [pc, #40]	; (80018b0 <DISPLAY_Refresh+0x40>)
 8001886:	f003 f953 	bl	8004b30 <UTILS_DCache_Coherency_Maintenance>
  UTILS_Dma2d_Memcpy((uint32_t *)(Display_Context_Ptr->lcd_frame_write_buff), (uint32_t *)(Display_Context_Ptr->lcd_frame_read_buff), 0, 0, LCD_RES_WIDTH,
 800188a:	2300      	movs	r3, #0
 800188c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001890:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001894:	461a      	mov	r2, r3
 8001896:	9102      	str	r1, [sp, #8]
 8001898:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800189c:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80018a0:	e9cd 1000 	strd	r1, r0, [sp]
 80018a4:	e9d4 1000 	ldrd	r1, r0, [r4]
 80018a8:	f003 f886 	bl	80049b8 <UTILS_Dma2d_Memcpy>
                     LCD_RES_HEIGHT, LCD_RES_WIDTH, DMA2D_INPUT_ARGB8888, DMA2D_OUTPUT_ARGB8888, 0, 0);
}
 80018ac:	b008      	add	sp, #32
 80018ae:	bd10      	pop	{r4, pc}
 80018b0:	00177000 	.word	0x00177000

080018b4 <DISPLAY_Copy2LCDWriteBuffer>:
 * @param input_color_format input color format (e.g DMA2D_INPUT_RGB888)
 * @param red_blue_swap boolean flag for red-blue channel swap, 0 is no swap, 1 is swap
 */
void DISPLAY_Copy2LCDWriteBuffer(DisplayContext_TypeDef* Display_Context_Ptr, uint32_t *pSrc, uint16_t x, uint16_t y, uint16_t xsize, uint16_t ysize,
                              uint32_t input_color_format, int red_blue_swap)
{
 80018b4:	b570      	push	{r4, r5, r6, lr}
 80018b6:	b088      	sub	sp, #32
 80018b8:	4606      	mov	r6, r0
 80018ba:	4608      	mov	r0, r1
  UTILS_Dma2d_Memcpy((uint32_t *)pSrc, (uint32_t *)Display_Context_Ptr->lcd_frame_write_buff, x, y, xsize, ysize, LCD_RES_WIDTH,
 80018bc:	2501      	movs	r5, #1
{
 80018be:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
  UTILS_Dma2d_Memcpy((uint32_t *)pSrc, (uint32_t *)Display_Context_Ptr->lcd_frame_write_buff, x, y, xsize, ysize, LCD_RES_WIDTH,
 80018c2:	6871      	ldr	r1, [r6, #4]
 80018c4:	2600      	movs	r6, #0
 80018c6:	9400      	str	r4, [sp, #0]
{
 80018c8:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
  UTILS_Dma2d_Memcpy((uint32_t *)pSrc, (uint32_t *)Display_Context_Ptr->lcd_frame_write_buff, x, y, xsize, ysize, LCD_RES_WIDTH,
 80018cc:	9505      	str	r5, [sp, #20]
 80018ce:	f44f 7548 	mov.w	r5, #800	; 0x320
 80018d2:	9401      	str	r4, [sp, #4]
{
 80018d4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  UTILS_Dma2d_Memcpy((uint32_t *)pSrc, (uint32_t *)Display_Context_Ptr->lcd_frame_write_buff, x, y, xsize, ysize, LCD_RES_WIDTH,
 80018d6:	9502      	str	r5, [sp, #8]
 80018d8:	e9cd 4603 	strd	r4, r6, [sp, #12]
{
 80018dc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  UTILS_Dma2d_Memcpy((uint32_t *)pSrc, (uint32_t *)Display_Context_Ptr->lcd_frame_write_buff, x, y, xsize, ysize, LCD_RES_WIDTH,
 80018de:	9406      	str	r4, [sp, #24]
 80018e0:	f003 f86a 	bl	80049b8 <UTILS_Dma2d_Memcpy>
                input_color_format, DMA2D_OUTPUT_ARGB8888, 1, red_blue_swap);
}
 80018e4:	b008      	add	sp, #32
 80018e6:	bd70      	pop	{r4, r5, r6, pc}

080018e8 <HAL_LTDC_ReloadEventCallback>:

}

void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
  Display_Context.lcd_sync=1;
 80018e8:	4b02      	ldr	r3, [pc, #8]	; (80018f4 <HAL_LTDC_ReloadEventCallback+0xc>)
 80018ea:	2201      	movs	r2, #1
  
  /*Set LTDCreload type to vertical blanking*/
  HAL_LTDC_Reload(hltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 80018ec:	2102      	movs	r1, #2
  Display_Context.lcd_sync=1;
 80018ee:	609a      	str	r2, [r3, #8]
  HAL_LTDC_Reload(hltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 80018f0:	f00d b92c 	b.w	800eb4c <HAL_LTDC_Reload>
 80018f4:	200098e4 	.word	0x200098e4

080018f8 <PREPROC_ImageResize>:
/**
 * @brief Performs image (or selected Region Of Interest) resizing
 * @param Preproc_Context_Ptr Pointer to PREPROC context
 */
void PREPROC_ImageResize(PreprocContext_TypeDef* Preproc_Context_Ptr)
{
 80018f8:	b510      	push	{r4, lr}
  image_t *src_img = &Preproc_Context_Ptr->Resize_Src_Img;
 80018fa:	f100 042c 	add.w	r4, r0, #44	; 0x2c
{
 80018fe:	b082      	sub	sp, #8
  image_t *dst_img = &Preproc_Context_Ptr->Resize_Dst_Img;
 8001900:	f100 013c 	add.w	r1, r0, #60	; 0x3c
  bool reverse = Image_CheckResizeMemoryLayout(src_img, dst_img);
 8001904:	4620      	mov	r0, r4
 8001906:	9101      	str	r1, [sp, #4]
 8001908:	f017 f858 	bl	80189bc <Image_CheckResizeMemoryLayout>

  if (STM32Ipl_Downscale(src_img, dst_img, reverse) != stm32ipl_err_Ok)
 800190c:	9901      	ldr	r1, [sp, #4]
  bool reverse = Image_CheckResizeMemoryLayout(src_img, dst_img);
 800190e:	4602      	mov	r2, r0
  if (STM32Ipl_Downscale(src_img, dst_img, reverse) != stm32ipl_err_Ok)
 8001910:	4620      	mov	r0, r4
 8001912:	f018 fdf1 	bl	801a4f8 <STM32Ipl_Downscale>
 8001916:	b908      	cbnz	r0, 800191c <PREPROC_ImageResize+0x24>
  {
    while (1);
  }
}
 8001918:	b002      	add	sp, #8
 800191a:	bd10      	pop	{r4, pc}
    while (1);
 800191c:	e7fe      	b.n	800191c <PREPROC_ImageResize+0x24>
 800191e:	bf00      	nop

08001920 <PREPROC_PixelFormatConversion>:
  image_t *src_img = &Preproc_Context_Ptr->Pfc_Src_Img;
  image_t *dst_img = &Preproc_Context_Ptr->Pfc_Dst_Img;
  uint32_t rb_swap = Preproc_Context_Ptr->red_blue_swap;

#if PIXEL_FMT_CONV == HW_PFC
  if((src_img->bpp == IMAGE_BPP_RGB565) && (dst_img->bpp == IMAGE_BPP_RGB888))
 8001920:	6942      	ldr	r2, [r0, #20]
 8001922:	2a02      	cmp	r2, #2
 8001924:	d000      	beq.n	8001928 <PREPROC_PixelFormatConversion+0x8>
                       1,
                       rb_swap);
  }
  else
  {
    while (1);
 8001926:	e7fe      	b.n	8001926 <PREPROC_PixelFormatConversion+0x6>
  if((src_img->bpp == IMAGE_BPP_RGB565) && (dst_img->bpp == IMAGE_BPP_RGB888))
 8001928:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800192a:	2b04      	cmp	r3, #4
 800192c:	d1fb      	bne.n	8001926 <PREPROC_PixelFormatConversion+0x6>
    UTILS_Dma2d_Memcpy((uint32_t *)(src_img->data),
 800192e:	2101      	movs	r1, #1
 8001930:	2300      	movs	r3, #0
{
 8001932:	b570      	push	{r4, r5, r6, lr}
    UTILS_Dma2d_Memcpy((uint32_t *)(src_img->data),
 8001934:	6886      	ldr	r6, [r0, #8]
{
 8001936:	b088      	sub	sp, #32
    UTILS_Dma2d_Memcpy((uint32_t *)(src_img->data),
 8001938:	69c5      	ldr	r5, [r0, #28]
 800193a:	9203      	str	r2, [sp, #12]
 800193c:	461a      	mov	r2, r3
 800193e:	8a04      	ldrh	r4, [r0, #16]
 8001940:	9606      	str	r6, [sp, #24]
 8001942:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8001946:	8981      	ldrh	r1, [r0, #12]
 8001948:	e9cd 4501 	strd	r4, r5, [sp, #4]
 800194c:	9100      	str	r1, [sp, #0]
 800194e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001950:	6980      	ldr	r0, [r0, #24]
 8001952:	f003 f831 	bl	80049b8 <UTILS_Dma2d_Memcpy>
    while (1);
  }
#else
 #error PFC method not valid!
#endif
}
 8001956:	b008      	add	sp, #32
 8001958:	bd70      	pop	{r4, r5, r6, pc}
 800195a:	bf00      	nop

0800195c <PREPROC_Pixel_RB_Swap>:
  uint8_t tmp_r;
  
  struct rgb_Src *pivot = (struct rgb_Src *) pSrc;
  struct rgb_Dst *dest = (struct rgb_Dst *) pDst;
  
  for (int i = pixels-1; i >= 0; i--)
 800195c:	1e53      	subs	r3, r2, #1
 800195e:	d414      	bmi.n	800198a <PREPROC_Pixel_RB_Swap+0x2e>
 8001960:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001964:	4410      	add	r0, r2
 8001966:	4411      	add	r1, r2
{
 8001968:	b410      	push	{r4}
  {
    tmp_r=pivot[i].r;
    
    dest[i].r = pivot[i].b;
 800196a:	f810 2c01 	ldrb.w	r2, [r0, #-1]
  for (int i = pixels-1; i >= 0; i--)
 800196e:	3b01      	subs	r3, #1
    tmp_r=pivot[i].r;
 8001970:	f810 4c03 	ldrb.w	r4, [r0, #-3]
    dest[i].r = pivot[i].b;
 8001974:	3903      	subs	r1, #3
 8001976:	700a      	strb	r2, [r1, #0]
    dest[i].b = tmp_r;
    dest[i].g = pivot[i].g;
 8001978:	3803      	subs	r0, #3
    dest[i].b = tmp_r;
 800197a:	708c      	strb	r4, [r1, #2]
    dest[i].g = pivot[i].g;
 800197c:	7842      	ldrb	r2, [r0, #1]
 800197e:	704a      	strb	r2, [r1, #1]
  for (int i = pixels-1; i >= 0; i--)
 8001980:	1c5a      	adds	r2, r3, #1
 8001982:	d1f2      	bne.n	800196a <PREPROC_Pixel_RB_Swap+0xe>
  }
}
 8001984:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	4770      	bx	lr

0800198c <UartCmd_Run_Validation>:
  /***Resume the camera capture in NOMINAL mode****/
  BSP_CAMERA_Resume(0);
}

static void UartCmd_Run_Validation(TestContext_TypeDef *Test_Context_Ptr, uint8_t* data_buffer, uint16_t data_size)
{
 800198c:	b430      	push	{r4, r5}

  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;

  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
  Test_Context_Ptr->UartContext.uart_host_requested_mode=VALID;
  Test_Context_Ptr->ValidationContext.validation_write_bufferPtr=(uint8_t*)validation_output_buff;
 800198e:	4907      	ldr	r1, [pc, #28]	; (80019ac <UartCmd_Run_Validation+0x20>)
  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8001990:	2501      	movs	r5, #1
  Test_Context_Ptr->UartContext.uart_host_requested_mode=VALID;
 8001992:	2402      	movs	r4, #2

#ifdef OBJECTDETECT  
  Test_Context_Ptr->ValidationContext.acc_num_object_detected=0;
#endif
  
  App_Cxt_Ptr->run_loop = 0;
 8001994:	2200      	movs	r2, #0
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 8001996:	f8d0 3580 	ldr.w	r3, [r0, #1408]	; 0x580
  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 800199a:	f8c0 54a0 	str.w	r5, [r0, #1184]	; 0x4a0
  Test_Context_Ptr->UartContext.uart_host_requested_mode=VALID;
 800199e:	f880 44a4 	strb.w	r4, [r0, #1188]	; 0x4a4
  Test_Context_Ptr->ValidationContext.validation_write_bufferPtr=(uint8_t*)validation_output_buff;
 80019a2:	f8c0 1498 	str.w	r1, [r0, #1176]	; 0x498
  App_Cxt_Ptr->run_loop = 0;
 80019a6:	605a      	str	r2, [r3, #4]
}
 80019a8:	bc30      	pop	{r4, r5}
 80019aa:	4770      	bx	lr
 80019ac:	d0cb0920 	.word	0xd0cb0920

080019b0 <UartCmd_Launch_Dump>:
  Uart_Rx(Test_Context_Ptr, aRxBuffer, RX_TRANSFER_SIZE);
}


static void UartCmd_Launch_Dump(TestContext_TypeDef *Test_Context_Ptr, uint8_t* data_buffer, uint16_t data_size)
{
 80019b0:	b430      	push	{r4, r5}
  *This command has two parameters:
  *Dump sub-mode (1 byte): CAMERA_LIVE= 0x01, CAMERA_COLORBAR= 0x02, SDCARD_FILE= 0x03
  *Dump memory location (1 byte): SDCARD (0x00) or SDRAM (0x01)
  ***********************************************************************************/

  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 80019b2:	f8d0 3580 	ldr.w	r3, [r0, #1408]	; 0x580
  
  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 80019b6:	2501      	movs	r5, #1
  Test_Context_Ptr->UartContext.uart_host_requested_mode=DUMP;
 80019b8:	2403      	movs	r4, #3
  App_Cxt_Ptr->run_loop = 0;
 80019ba:	2200      	movs	r2, #0
  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 80019bc:	f8c0 54a0 	str.w	r5, [r0, #1184]	; 0x4a0
  Test_Context_Ptr->UartContext.uart_host_requested_mode=DUMP;
 80019c0:	f880 44a4 	strb.w	r4, [r0, #1188]	; 0x4a4
  App_Cxt_Ptr->run_loop = 0;
 80019c4:	605a      	str	r2, [r3, #4]
  
  Test_Context_Ptr->UartContext.uart_host_requested_dump_submode=(MemDumpFrameSource_TypeDef)(*(uint8_t*)(data_buffer));
 80019c6:	780b      	ldrb	r3, [r1, #0]
 80019c8:	f880 34a5 	strb.w	r3, [r0, #1189]	; 0x4a5
  Test_Context_Ptr->UartContext.uart_host_requested_dump_memory=(MemDumpMemoryLocation_TypeDef)(*(uint8_t*)(data_buffer+1));
 80019cc:	784b      	ldrb	r3, [r1, #1]
  
  if(Test_Context_Ptr->UartContext.uart_host_requested_dump_memory == SDRAM)
 80019ce:	42ab      	cmp	r3, r5
  Test_Context_Ptr->UartContext.uart_host_requested_dump_memory=(MemDumpMemoryLocation_TypeDef)(*(uint8_t*)(data_buffer+1));
 80019d0:	f880 34a6 	strb.w	r3, [r0, #1190]	; 0x4a6
  if(Test_Context_Ptr->UartContext.uart_host_requested_dump_memory == SDRAM)
 80019d4:	d101      	bne.n	80019da <UartCmd_Launch_Dump+0x2a>
    Test_Context_Ptr->DumpContext.dump_write_bufferPtr=dump_intermediate_data_ping_buff;
 80019d6:	4b02      	ldr	r3, [pc, #8]	; (80019e0 <UartCmd_Launch_Dump+0x30>)
 80019d8:	6003      	str	r3, [r0, #0]
}
 80019da:	bc30      	pop	{r4, r5}
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	d0cb0a40 	.word	0xd0cb0a40

080019e4 <UartCmd_Launch_Capture>:
    Uart_Rx(Test_Context_Ptr, aRxBuffer, RX_TRANSFER_SIZE);
  }
}

static void UartCmd_Launch_Capture(TestContext_TypeDef *Test_Context_Ptr, uint8_t* data_buffer, uint16_t data_size)
{
 80019e4:	b430      	push	{r4, r5}

  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;

  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
  Test_Context_Ptr->UartContext.uart_host_requested_mode=CAPTURE;
  App_Cxt_Ptr->run_loop = 0;
 80019e6:	2200      	movs	r2, #0
  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 80019e8:	2501      	movs	r5, #1
  Test_Context_Ptr->UartContext.uart_host_requested_mode=CAPTURE;
 80019ea:	2404      	movs	r4, #4
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 80019ec:	f8d0 3580 	ldr.w	r3, [r0, #1408]	; 0x580
  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 80019f0:	f8c0 54a0 	str.w	r5, [r0, #1184]	; 0x4a0
  Test_Context_Ptr->UartContext.uart_host_requested_mode=CAPTURE;
 80019f4:	f880 44a4 	strb.w	r4, [r0, #1188]	; 0x4a4
  App_Cxt_Ptr->run_loop = 0;
 80019f8:	605a      	str	r2, [r3, #4]

  Test_Context_Ptr->UartContext.uart_host_requested_capture_format=(DataFormat_TypeDef)(*(uint8_t*)(data_buffer));
 80019fa:	780b      	ldrb	r3, [r1, #0]
 80019fc:	f880 34ac 	strb.w	r3, [r0, #1196]	; 0x4ac
  Test_Context_Ptr->UartContext.uart_host_requested_capture_delay=*(uint16_t*)(data_buffer+1);
 8001a00:	f8b1 2001 	ldrh.w	r2, [r1, #1]
  Test_Context_Ptr->UartContext.uart_host_requested_capture_number=*(uint16_t*)(data_buffer+3);
 8001a04:	f8b1 3003 	ldrh.w	r3, [r1, #3]
  Test_Context_Ptr->UartContext.uart_host_requested_capture_delay=*(uint16_t*)(data_buffer+1);
 8001a08:	f8c0 24b0 	str.w	r2, [r0, #1200]	; 0x4b0
  Test_Context_Ptr->UartContext.uart_host_requested_capture_number=*(uint16_t*)(data_buffer+3);
 8001a0c:	f8c0 34b4 	str.w	r3, [r0, #1204]	; 0x4b4
  else
  {
    /*Automatic mode => Program TIM for periodic capture*/
    ;
  }
}
 8001a10:	bc30      	pop	{r4, r5}
 8001a12:	4770      	bx	lr

08001a14 <UartCmd_Set_Camera_Mode>:
  /**Configure the UART in reception mode for receiving subsequent command from Host**/
  Uart_Rx(Test_Context_Ptr, aRxBuffer, RX_TRANSFER_SIZE);
}

static void UartCmd_Set_Camera_Mode(TestContext_TypeDef *Test_Context_Ptr, uint8_t* data_buffer, uint16_t data_size)
{
 8001a14:	b510      	push	{r4, lr}
  /******************************SET_CAMERA_MODE_CMD**********************
  *Configure the camera in test bar or normal mode.
  *This command has one parameter:
  *Camera mode: 0x00=Normal, 0x01= Test bar
  ***********************************************************************************/
  if(*(data_buffer) == 0x00)
 8001a16:	780b      	ldrb	r3, [r1, #0]
{
 8001a18:	4604      	mov	r4, r0
  if(*(data_buffer) == 0x00)
 8001a1a:	b14b      	cbz	r3, 8001a30 <UartCmd_Set_Camera_Mode+0x1c>
  {
    CAMERA_Disable_TestBar_Mode(NULL);
  }
  else if(*(data_buffer) == 0x01)
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d00f      	beq.n	8001a40 <UartCmd_Set_Camera_Mode+0x2c>
 * @param RxDataSize Data size in bytes expected to RX
 */
static void Uart_Rx(TestContext_TypeDef *Test_Context_Ptr, uint8_t *RxDataBufPtr, uint32_t RxDataSize)
{
  /**Configure the UART in reception mode for receiving subsequent command from Host**/
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8001a20:	f204 40bc 	addw	r0, r4, #1212	; 0x4bc
 8001a24:	220a      	movs	r2, #10
 8001a26:	4908      	ldr	r1, [pc, #32]	; (8001a48 <UartCmd_Set_Camera_Mode+0x34>)
 8001a28:	f010 fcb4 	bl	8012394 <HAL_UART_Receive_DMA>
 8001a2c:	b920      	cbnz	r0, 8001a38 <UartCmd_Set_Camera_Mode+0x24>
}
 8001a2e:	bd10      	pop	{r4, pc}
    CAMERA_Disable_TestBar_Mode(NULL);
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff fd8b 	bl	800154c <CAMERA_Disable_TestBar_Mode>
 8001a36:	e7f3      	b.n	8001a20 <UartCmd_Set_Camera_Mode+0xc>
}
 8001a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  {
    /* Transfer error in reception process */
    Error_Handler();
 8001a3c:	f003 b8e6 	b.w	8004c0c <Error_Handler>
    CAMERA_Enable_TestBar_Mode(NULL);
 8001a40:	2000      	movs	r0, #0
 8001a42:	f7ff fd51 	bl	80014e8 <CAMERA_Enable_TestBar_Mode>
 8001a46:	e7eb      	b.n	8001a20 <UartCmd_Set_Camera_Mode+0xc>
 8001a48:	300002a0 	.word	0x300002a0

08001a4c <UartCmd_Write_Camera_Register>:
  OV9655_Object_t *pObj=Camera_CompObj;
 8001a4c:	4a10      	ldr	r2, [pc, #64]	; (8001a90 <UartCmd_Write_Camera_Register+0x44>)
  ov9655_write_reg(&pObj->Ctx, *(data_buffer), &tmp, 1);
 8001a4e:	2301      	movs	r3, #1
{
 8001a50:	b570      	push	{r4, r5, r6, lr}
  OV9655_Object_t *pObj=Camera_CompObj;
 8001a52:	6816      	ldr	r6, [r2, #0]
{
 8001a54:	b082      	sub	sp, #8
  uint8_t tmp=*(data_buffer+1);
 8001a56:	784d      	ldrb	r5, [r1, #1]
{
 8001a58:	4604      	mov	r4, r0
  ov9655_write_reg(&pObj->Ctx, *(data_buffer), &tmp, 1);
 8001a5a:	f10d 0207 	add.w	r2, sp, #7
 8001a5e:	7809      	ldrb	r1, [r1, #0]
 8001a60:	f106 0018 	add.w	r0, r6, #24
  uint8_t tmp=*(data_buffer+1);
 8001a64:	f88d 5007 	strb.w	r5, [sp, #7]
  ov9655_write_reg(&pObj->Ctx, *(data_buffer), &tmp, 1);
 8001a68:	f007 faf0 	bl	800904c <ov9655_write_reg>
  HAL_Delay(300);
 8001a6c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001a70:	f009 fbc2 	bl	800b1f8 <HAL_Delay>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8001a74:	f204 40bc 	addw	r0, r4, #1212	; 0x4bc
 8001a78:	220a      	movs	r2, #10
 8001a7a:	4906      	ldr	r1, [pc, #24]	; (8001a94 <UartCmd_Write_Camera_Register+0x48>)
 8001a7c:	f010 fc8a 	bl	8012394 <HAL_UART_Receive_DMA>
 8001a80:	b908      	cbnz	r0, 8001a86 <UartCmd_Write_Camera_Register+0x3a>
}
 8001a82:	b002      	add	sp, #8
 8001a84:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler();
 8001a86:	f003 f8c1 	bl	8004c0c <Error_Handler>
}
 8001a8a:	b002      	add	sp, #8
 8001a8c:	bd70      	pop	{r4, r5, r6, pc}
 8001a8e:	bf00      	nop
 8001a90:	20009428 	.word	0x20009428
 8001a94:	300002a0 	.word	0x300002a0

08001a98 <UartCmd_Run_NonRegression>:
{
 8001a98:	b570      	push	{r4, r5, r6, lr}
 8001a9a:	4603      	mov	r3, r0
  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8001a9c:	2401      	movs	r4, #1
  Test_Context_Ptr->UartContext.uart_host_requested_mode=DUMP;
 8001a9e:	f240 2203 	movw	r2, #515	; 0x203
  Test_Context_Ptr->DumpContext.Dump_FrameSource=CAMERA_COLORBAR;
 8001aa2:	2002      	movs	r0, #2
  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8001aa4:	f8c3 44a0 	str.w	r4, [r3, #1184]	; 0x4a0
  Test_Context_Ptr->UartContext.uart_host_requested_mode=DUMP;
 8001aa8:	f8a3 24a4 	strh.w	r2, [r3, #1188]	; 0x4a4
  memset(dump_output_buff, 0, sizeof(dump_output_buff));
 8001aac:	2280      	movs	r2, #128	; 0x80
  Test_Context_Ptr->UartContext.uart_host_requested_dump_memory=SDRAM;
 8001aae:	f883 44a6 	strb.w	r4, [r3, #1190]	; 0x4a6
  Test_Context_Ptr->DumpContext.dump_write_bufferPtr=dump_intermediate_data_ping_buff;
 8001ab2:	4e14      	ldr	r6, [pc, #80]	; (8001b04 <UartCmd_Run_NonRegression+0x6c>)
  Test_Context_Ptr->UartContext.uart_host_requested_dump_number=*(uint32_t*)(data_buffer);
 8001ab4:	680d      	ldr	r5, [r1, #0]
  memset(dump_output_buff, 0, sizeof(dump_output_buff));
 8001ab6:	2100      	movs	r1, #0
  Test_Context_Ptr->UartContext.uart_host_nonreg_run=1;
 8001ab8:	f8c3 44b8 	str.w	r4, [r3, #1208]	; 0x4b8
  Test_Context_Ptr->NonReg_FirstRun=1;
 8001abc:	f8c3 4584 	str.w	r4, [r3, #1412]	; 0x584
  Test_Context_Ptr->DumpContext.dump_state = 1;
 8001ac0:	f8c3 40b8 	str.w	r4, [r3, #184]	; 0xb8
  Test_Context_Ptr->DumpContext.Dump_FrameSource=CAMERA_COLORBAR;
 8001ac4:	7118      	strb	r0, [r3, #4]
  Test_Context_Ptr->DumpContext.dump_write_bufferPtr=dump_intermediate_data_ping_buff;
 8001ac6:	601e      	str	r6, [r3, #0]
  Test_Context_Ptr->UartContext.uart_host_requested_dump_number=*(uint32_t*)(data_buffer);
 8001ac8:	f8c3 54a8 	str.w	r5, [r3, #1192]	; 0x4a8
  memset(dump_output_buff, 0, sizeof(dump_output_buff));
 8001acc:	480e      	ldr	r0, [pc, #56]	; (8001b08 <UartCmd_Run_NonRegression+0x70>)
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 8001ace:	f8d3 4580 	ldr.w	r4, [r3, #1408]	; 0x580
  memset(dump_output_buff, 0, sizeof(dump_output_buff));
 8001ad2:	f023 f9b3 	bl	8024e3c <memset>
  App_Cxt_Ptr->Operating_Mode=DUMP;
 8001ad6:	2303      	movs	r3, #3
  CAMERA_Enable_TestBar_Mode(App_Cxt_Ptr->Camera_ContextPtr);
 8001ad8:	69e0      	ldr	r0, [r4, #28]
  App_Cxt_Ptr->Operating_Mode=DUMP;
 8001ada:	7023      	strb	r3, [r4, #0]
  CAMERA_Enable_TestBar_Mode(App_Cxt_Ptr->Camera_ContextPtr);
 8001adc:	f7ff fd04 	bl	80014e8 <CAMERA_Enable_TestBar_Mode>
  while(App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 8001ae0:	69e2      	ldr	r2, [r4, #28]
 8001ae2:	7d13      	ldrb	r3, [r2, #20]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d0fc      	beq.n	8001ae2 <UartCmd_Run_NonRegression+0x4a>
  App_Cxt_Ptr->Camera_ContextPtr->vsync_it=0;
 8001ae8:	2500      	movs	r5, #0
  App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1=HAL_GetTick();
 8001aea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  App_Cxt_Ptr->Camera_ContextPtr->vsync_it=0;
 8001aec:	6095      	str	r5, [r2, #8]
  App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1=HAL_GetTick();
 8001aee:	f009 fb7d 	bl	800b1ec <HAL_GetTick>
  App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready = 0;
 8001af2:	69e3      	ldr	r3, [r4, #28]
  App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1=HAL_GetTick();
 8001af4:	4602      	mov	r2, r0
  BSP_CAMERA_Resume(0);
 8001af6:	4628      	mov	r0, r5
  App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1=HAL_GetTick();
 8001af8:	61b2      	str	r2, [r6, #24]
  App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready = 0;
 8001afa:	751d      	strb	r5, [r3, #20]
}
 8001afc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  BSP_CAMERA_Resume(0);
 8001b00:	f008 bb9c 	b.w	800a23c <BSP_CAMERA_Resume>
 8001b04:	d0cb0a40 	.word	0xd0cb0a40
 8001b08:	d0cb08a0 	.word	0xd0cb08a0

08001b0c <count_dir.isra.0>:
static uint32_t count_dir(const char *path, AppContext_TypeDef *app)
 8001b0c:	b570      	push	{r4, r5, r6, lr}
 8001b0e:	4605      	mov	r5, r0
 8001b10:	b08e      	sub	sp, #56	; 0x38
 8001b12:	460e      	mov	r6, r1
  res = f_opendir(&dir, path);
 8001b14:	a801      	add	r0, sp, #4
 8001b16:	4629      	mov	r1, r5
 8001b18:	f016 f81e 	bl	8017b58 <f_opendir>
  if (res != FR_OK)
 8001b1c:	b9c8      	cbnz	r0, 8001b52 <count_dir.isra.0+0x46>
 8001b1e:	4d1b      	ldr	r5, [pc, #108]	; (8001b8c <count_dir.isra.0+0x80>)
 8001b20:	4604      	mov	r4, r0
    res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8001b22:	462e      	mov	r6, r5
 8001b24:	4631      	mov	r1, r6
 8001b26:	a801      	add	r0, sp, #4
 8001b28:	f016 f91c 	bl	8017d64 <f_readdir>
    if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8001b2c:	b958      	cbnz	r0, 8001b46 <count_dir.isra.0+0x3a>
 8001b2e:	7dab      	ldrb	r3, [r5, #22]
 8001b30:	b14b      	cbz	r3, 8001b46 <count_dir.isra.0+0x3a>
    if (fno.fattrib & AM_DIR) nbr_dir++;           /* Directory found */
 8001b32:	7a2b      	ldrb	r3, [r5, #8]
 8001b34:	06db      	lsls	r3, r3, #27
 8001b36:	d5f5      	bpl.n	8001b24 <count_dir.isra.0+0x18>
    res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8001b38:	4631      	mov	r1, r6
 8001b3a:	a801      	add	r0, sp, #4
    if (fno.fattrib & AM_DIR) nbr_dir++;           /* Directory found */
 8001b3c:	3401      	adds	r4, #1
    res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8001b3e:	f016 f911 	bl	8017d64 <f_readdir>
    if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8001b42:	2800      	cmp	r0, #0
 8001b44:	d0f3      	beq.n	8001b2e <count_dir.isra.0+0x22>
  f_closedir(&dir);
 8001b46:	a801      	add	r0, sp, #4
 8001b48:	f016 f8da 	bl	8017d00 <f_closedir>
}
 8001b4c:	4620      	mov	r0, r4
 8001b4e:	b00e      	add	sp, #56	; 0x38
 8001b50:	bd70      	pop	{r4, r5, r6, pc}
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *) "Error. Could not open directory", CENTER_MODE);
 8001b52:	f019 f80b 	bl	801ab6c <UTIL_LCD_GetFont>
 8001b56:	88c4      	ldrh	r4, [r0, #6]
 8001b58:	2301      	movs	r3, #1
 8001b5a:	4a0d      	ldr	r2, [pc, #52]	; (8001b90 <count_dir.isra.0+0x84>)
 8001b5c:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8001b60:	2000      	movs	r0, #0
 8001b62:	fa04 f103 	lsl.w	r1, r4, r3
 8001b66:	f019 f8f1 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(15), (uint8_t *) path, CENTER_MODE);
 8001b6a:	f018 ffff 	bl	801ab6c <UTIL_LCD_GetFont>
 8001b6e:	88c1      	ldrh	r1, [r0, #6]
 8001b70:	462a      	mov	r2, r5
 8001b72:	2301      	movs	r3, #1
 8001b74:	2000      	movs	r0, #0
 8001b76:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8001b7a:	f019 f8e7 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(app->Display_ContextPtr);
 8001b7e:	6830      	ldr	r0, [r6, #0]
 8001b80:	f7ff fe76 	bl	8001870 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 8001b84:	2002      	movs	r0, #2
 8001b86:	f007 fa97 	bl	80090b8 <BSP_LED_On>
    while (1);
 8001b8a:	e7fe      	b.n	8001b8a <count_dir.isra.0+0x7e>
 8001b8c:	2000818c 	.word	0x2000818c
 8001b90:	0802846c 	.word	0x0802846c

08001b94 <write_txt.isra.0>:
static void write_txt(char *path, char *content, BYTE flags, AppContext_TypeDef *app)
 8001b94:	b570      	push	{r4, r5, r6, lr}
 8001b96:	4605      	mov	r5, r0
 8001b98:	b082      	sub	sp, #8
 8001b9a:	460c      	mov	r4, r1
  if (f_open(&File, path, flags) != FR_OK)
 8001b9c:	481c      	ldr	r0, [pc, #112]	; (8001c10 <write_txt.isra.0+0x7c>)
 8001b9e:	4629      	mov	r1, r5
static void write_txt(char *path, char *content, BYTE flags, AppContext_TypeDef *app)
 8001ba0:	461e      	mov	r6, r3
  if (f_open(&File, path, flags) != FR_OK)
 8001ba2:	f015 f869 	bl	8016c78 <f_open>
 8001ba6:	b1d8      	cbz	r0, 8001be0 <write_txt.isra.0+0x4c>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"Error. Unable to create file", CENTER_MODE);
 8001ba8:	f018 ffe0 	bl	801ab6c <UTIL_LCD_GetFont>
 8001bac:	88c1      	ldrh	r1, [r0, #6]
 8001bae:	2301      	movs	r3, #1
 8001bb0:	4a18      	ldr	r2, [pc, #96]	; (8001c14 <write_txt.isra.0+0x80>)
 8001bb2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8001bb6:	2000      	movs	r0, #0
 8001bb8:	4099      	lsls	r1, r3
 8001bba:	f019 f8c7 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(15), (uint8_t *) path, CENTER_MODE);
 8001bbe:	f018 ffd5 	bl	801ab6c <UTIL_LCD_GetFont>
 8001bc2:	88c1      	ldrh	r1, [r0, #6]
 8001bc4:	462a      	mov	r2, r5
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	2000      	movs	r0, #0
 8001bca:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8001bce:	f019 f8bd 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(app->Display_ContextPtr);
 8001bd2:	6830      	ldr	r0, [r6, #0]
 8001bd4:	f7ff fe4c 	bl	8001870 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 8001bd8:	2002      	movs	r0, #2
 8001bda:	f007 fa6d 	bl	80090b8 <BSP_LED_On>
    while (1);
 8001bde:	e7fe      	b.n	8001bde <write_txt.isra.0+0x4a>
  res = f_write(&File, (uint8_t *)content, strlen(content), (void *)&byteswritten);
 8001be0:	4620      	mov	r0, r4
 8001be2:	f7fe fb87 	bl	80002f4 <strlen>
 8001be6:	ab01      	add	r3, sp, #4
 8001be8:	4602      	mov	r2, r0
 8001bea:	4621      	mov	r1, r4
 8001bec:	4808      	ldr	r0, [pc, #32]	; (8001c10 <write_txt.isra.0+0x7c>)
 8001bee:	f015 fbf9 	bl	80173e4 <f_write>
  if (res != FR_OK)
 8001bf2:	b100      	cbz	r0, 8001bf6 <write_txt.isra.0+0x62>
    while (1);
 8001bf4:	e7fe      	b.n	8001bf4 <write_txt.isra.0+0x60>
  if (byteswritten != strlen(content))
 8001bf6:	4620      	mov	r0, r4
 8001bf8:	f7fe fb7c 	bl	80002f4 <strlen>
 8001bfc:	9b01      	ldr	r3, [sp, #4]
 8001bfe:	4298      	cmp	r0, r3
 8001c00:	d000      	beq.n	8001c04 <write_txt.isra.0+0x70>
    while (1);
 8001c02:	e7fe      	b.n	8001c02 <write_txt.isra.0+0x6e>
  f_close(&File);
 8001c04:	4802      	ldr	r0, [pc, #8]	; (8001c10 <write_txt.isra.0+0x7c>)
 8001c06:	f015 fd4d 	bl	80176a4 <f_close>
}
 8001c0a:	b002      	add	sp, #8
 8001c0c:	bd70      	pop	{r4, r5, r6, pc}
 8001c0e:	bf00      	nop
 8001c10:	20007c10 	.word	0x20007c10
 8001c14:	0802848c 	.word	0x0802848c

08001c18 <write_raw.isra.0>:
static void write_raw(char *path, uint8_t *buffer, size_t length, AppContext_TypeDef *app)
 8001c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c1c:	4605      	mov	r5, r0
 8001c1e:	b082      	sub	sp, #8
 8001c20:	4617      	mov	r7, r2
 8001c22:	4688      	mov	r8, r1
  res = f_open(&File, path, FA_CREATE_ALWAYS | FA_WRITE);
 8001c24:	220a      	movs	r2, #10
 8001c26:	482a      	ldr	r0, [pc, #168]	; (8001cd0 <write_raw.isra.0+0xb8>)
 8001c28:	4629      	mov	r1, r5
static void write_raw(char *path, uint8_t *buffer, size_t length, AppContext_TypeDef *app)
 8001c2a:	461e      	mov	r6, r3
  res = f_open(&File, path, FA_CREATE_ALWAYS | FA_WRITE);
 8001c2c:	f015 f824 	bl	8016c78 <f_open>
  if (res != FR_OK)
 8001c30:	b1e8      	cbz	r0, 8001c6e <write_raw.isra.0+0x56>
    UTIL_LCD_DisplayStringAt(0, LINE(12), (uint8_t *)"Cannot create file on uSD", CENTER_MODE);
 8001c32:	f018 ff9b 	bl	801ab6c <UTIL_LCD_GetFont>
 8001c36:	88c1      	ldrh	r1, [r0, #6]
 8001c38:	2301      	movs	r3, #1
 8001c3a:	4a26      	ldr	r2, [pc, #152]	; (8001cd4 <write_raw.isra.0+0xbc>)
 8001c3c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001c40:	2000      	movs	r0, #0
 8001c42:	0089      	lsls	r1, r1, #2
 8001c44:	f019 f882 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(13), (uint8_t *) path, CENTER_MODE);
 8001c48:	f018 ff90 	bl	801ab6c <UTIL_LCD_GetFont>
 8001c4c:	88c1      	ldrh	r1, [r0, #6]
 8001c4e:	462a      	mov	r2, r5
 8001c50:	2301      	movs	r3, #1
 8001c52:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8001c56:	2000      	movs	r0, #0
 8001c58:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8001c5c:	f019 f876 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(app->Display_ContextPtr);
 8001c60:	6830      	ldr	r0, [r6, #0]
 8001c62:	f7ff fe05 	bl	8001870 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 8001c66:	2002      	movs	r0, #2
 8001c68:	f007 fa26 	bl	80090b8 <BSP_LED_On>
    while (1);
 8001c6c:	e7fe      	b.n	8001c6c <write_raw.isra.0+0x54>
  __ASM volatile ("cpsid i" : : : "memory");
 8001c6e:	4604      	mov	r4, r0
 8001c70:	b672      	cpsid	i
  f_write(&File, buffer, length, (void *)&byteswritten);
 8001c72:	4817      	ldr	r0, [pc, #92]	; (8001cd0 <write_raw.isra.0+0xb8>)
 8001c74:	4641      	mov	r1, r8
 8001c76:	ab01      	add	r3, sp, #4
 8001c78:	463a      	mov	r2, r7
 8001c7a:	f015 fbb3 	bl	80173e4 <f_write>
  __ASM volatile ("cpsie i" : : : "memory");
 8001c7e:	b662      	cpsie	i
  f_close(&File);
 8001c80:	4813      	ldr	r0, [pc, #76]	; (8001cd0 <write_raw.isra.0+0xb8>)
 8001c82:	f015 fd0f 	bl	80176a4 <f_close>
  if (byteswritten != length)
 8001c86:	9b01      	ldr	r3, [sp, #4]
 8001c88:	429f      	cmp	r7, r3
 8001c8a:	d102      	bne.n	8001c92 <write_raw.isra.0+0x7a>
}
 8001c8c:	b002      	add	sp, #8
 8001c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UTIL_LCD_DisplayStringAt(0, LINE(12), (uint8_t *)"Cannot save to uSD", CENTER_MODE);
 8001c92:	f018 ff6b 	bl	801ab6c <UTIL_LCD_GetFont>
 8001c96:	88c1      	ldrh	r1, [r0, #6]
 8001c98:	2301      	movs	r3, #1
 8001c9a:	4a0f      	ldr	r2, [pc, #60]	; (8001cd8 <write_raw.isra.0+0xc0>)
 8001c9c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001ca0:	4620      	mov	r0, r4
 8001ca2:	0089      	lsls	r1, r1, #2
 8001ca4:	f019 f852 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(13), (uint8_t *) path, CENTER_MODE);
 8001ca8:	f018 ff60 	bl	801ab6c <UTIL_LCD_GetFont>
 8001cac:	4603      	mov	r3, r0
 8001cae:	4620      	mov	r0, r4
 8001cb0:	462a      	mov	r2, r5
 8001cb2:	88d9      	ldrh	r1, [r3, #6]
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8001cba:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8001cbe:	f019 f845 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(app->Display_ContextPtr);
 8001cc2:	6830      	ldr	r0, [r6, #0]
 8001cc4:	f7ff fdd4 	bl	8001870 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 8001cc8:	2002      	movs	r0, #2
 8001cca:	f007 f9f5 	bl	80090b8 <BSP_LED_On>
    while (1);
 8001cce:	e7fe      	b.n	8001cce <write_raw.isra.0+0xb6>
 8001cd0:	200079e0 	.word	0x200079e0
 8001cd4:	080284ac 	.word	0x080284ac
 8001cd8:	080284c8 	.word	0x080284c8

08001cdc <write_bmp.isra.0>:
static void write_bmp(char *path, image_t *img, AppContext_TypeDef *app)
 8001cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cde:	460f      	mov	r7, r1
 8001ce0:	4605      	mov	r5, r0
 8001ce2:	4616      	mov	r6, r2
  if (strcmp(&path[strlen(path) - 4], ".bmp") != 0)
 8001ce4:	f7fe fb06 	bl	80002f4 <strlen>
 8001ce8:	3804      	subs	r0, #4
 8001cea:	4916      	ldr	r1, [pc, #88]	; (8001d44 <write_bmp.isra.0+0x68>)
 8001cec:	4428      	add	r0, r5
 8001cee:	f7fe faf7 	bl	80002e0 <strcmp>
 8001cf2:	b100      	cbz	r0, 8001cf6 <write_bmp.isra.0+0x1a>
    while (1); /* Format not supported */
 8001cf4:	e7fe      	b.n	8001cf4 <write_bmp.isra.0+0x18>
  if (STM32Ipl_WriteImage(img, path) != stm32ipl_err_Ok)
 8001cf6:	4604      	mov	r4, r0
 8001cf8:	4629      	mov	r1, r5
 8001cfa:	4638      	mov	r0, r7
 8001cfc:	f018 fb38 	bl	801a370 <STM32Ipl_WriteImage>
 8001d00:	b900      	cbnz	r0, 8001d04 <write_bmp.isra.0+0x28>
}
 8001d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    UTIL_LCD_DisplayStringAt(0, LINE(12), (uint8_t *)"Cannot save to uSD", CENTER_MODE);
 8001d04:	f018 ff32 	bl	801ab6c <UTIL_LCD_GetFont>
 8001d08:	88c1      	ldrh	r1, [r0, #6]
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	4a0e      	ldr	r2, [pc, #56]	; (8001d48 <write_bmp.isra.0+0x6c>)
 8001d0e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001d12:	4620      	mov	r0, r4
 8001d14:	0089      	lsls	r1, r1, #2
 8001d16:	f019 f819 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(13), (uint8_t *) path, CENTER_MODE);
 8001d1a:	f018 ff27 	bl	801ab6c <UTIL_LCD_GetFont>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	4620      	mov	r0, r4
 8001d22:	462a      	mov	r2, r5
 8001d24:	88d9      	ldrh	r1, [r3, #6]
 8001d26:	2301      	movs	r3, #1
 8001d28:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8001d2c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8001d30:	f019 f80c 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(app->Display_ContextPtr);
 8001d34:	6830      	ldr	r0, [r6, #0]
 8001d36:	f7ff fd9b 	bl	8001870 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 8001d3a:	2002      	movs	r0, #2
 8001d3c:	f007 f9bc 	bl	80090b8 <BSP_LED_On>
    while (1);
 8001d40:	e7fe      	b.n	8001d40 <write_bmp.isra.0+0x64>
 8001d42:	bf00      	nop
 8001d44:	08028a1c 	.word	0x08028a1c
 8001d48:	080284c8 	.word	0x080284c8

08001d4c <UartCmd_Upload_NonRegression_Report>:
{
 8001d4c:	b510      	push	{r4, lr}
 8001d4e:	4604      	mov	r4, r0
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001d50:	2202      	movs	r2, #2
 8001d52:	2180      	movs	r1, #128	; 0x80
 8001d54:	480e      	ldr	r0, [pc, #56]	; (8001d90 <UartCmd_Upload_NonRegression_Report+0x44>)
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8001d56:	f204 44bc 	addw	r4, r4, #1212	; 0x4bc
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001d5a:	f002 fee9 	bl	8004b30 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8001d5e:	2208      	movs	r2, #8
 8001d60:	490b      	ldr	r1, [pc, #44]	; (8001d90 <UartCmd_Upload_NonRegression_Report+0x44>)
 8001d62:	4620      	mov	r0, r4
 8001d64:	f010 fac6 	bl	80122f4 <HAL_UART_Transmit_DMA>
 8001d68:	b958      	cbnz	r0, 8001d82 <UartCmd_Upload_NonRegression_Report+0x36>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8001d6a:	4620      	mov	r0, r4
 8001d6c:	f010 fcec 	bl	8012748 <HAL_UART_GetState>
 8001d70:	2820      	cmp	r0, #32
 8001d72:	d1fa      	bne.n	8001d6a <UartCmd_Upload_NonRegression_Report+0x1e>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8001d74:	4620      	mov	r0, r4
 8001d76:	220a      	movs	r2, #10
 8001d78:	4906      	ldr	r1, [pc, #24]	; (8001d94 <UartCmd_Upload_NonRegression_Report+0x48>)
 8001d7a:	f010 fb0b 	bl	8012394 <HAL_UART_Receive_DMA>
 8001d7e:	b918      	cbnz	r0, 8001d88 <UartCmd_Upload_NonRegression_Report+0x3c>
}
 8001d80:	bd10      	pop	{r4, pc}
      Error_Handler();
 8001d82:	f002 ff43 	bl	8004c0c <Error_Handler>
 8001d86:	e7f0      	b.n	8001d6a <UartCmd_Upload_NonRegression_Report+0x1e>
}
 8001d88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001d8c:	f002 bf3e 	b.w	8004c0c <Error_Handler>
 8001d90:	d0cb08a0 	.word	0xd0cb08a0
 8001d94:	300002a0 	.word	0x300002a0

08001d98 <UartCmd_Upload_Validation_Report>:
{
 8001d98:	b510      	push	{r4, lr}
 8001d9a:	4604      	mov	r4, r0
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001d9c:	2202      	movs	r2, #2
 8001d9e:	f44f 7190 	mov.w	r1, #288	; 0x120
 8001da2:	480f      	ldr	r0, [pc, #60]	; (8001de0 <UartCmd_Upload_Validation_Report+0x48>)
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8001da4:	f204 44bc 	addw	r4, r4, #1212	; 0x4bc
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001da8:	f002 fec2 	bl	8004b30 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8001dac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001db0:	490b      	ldr	r1, [pc, #44]	; (8001de0 <UartCmd_Upload_Validation_Report+0x48>)
 8001db2:	4620      	mov	r0, r4
 8001db4:	f010 fa9e 	bl	80122f4 <HAL_UART_Transmit_DMA>
 8001db8:	b958      	cbnz	r0, 8001dd2 <UartCmd_Upload_Validation_Report+0x3a>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8001dba:	4620      	mov	r0, r4
 8001dbc:	f010 fcc4 	bl	8012748 <HAL_UART_GetState>
 8001dc0:	2820      	cmp	r0, #32
 8001dc2:	d1fa      	bne.n	8001dba <UartCmd_Upload_Validation_Report+0x22>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8001dc4:	4620      	mov	r0, r4
 8001dc6:	220a      	movs	r2, #10
 8001dc8:	4906      	ldr	r1, [pc, #24]	; (8001de4 <UartCmd_Upload_Validation_Report+0x4c>)
 8001dca:	f010 fae3 	bl	8012394 <HAL_UART_Receive_DMA>
 8001dce:	b918      	cbnz	r0, 8001dd8 <UartCmd_Upload_Validation_Report+0x40>
}
 8001dd0:	bd10      	pop	{r4, pc}
      Error_Handler();
 8001dd2:	f002 ff1b 	bl	8004c0c <Error_Handler>
 8001dd6:	e7f0      	b.n	8001dba <UartCmd_Upload_Validation_Report+0x22>
}
 8001dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001ddc:	f002 bf16 	b.w	8004c0c <Error_Handler>
 8001de0:	d0cb0920 	.word	0xd0cb0920
 8001de4:	300002a0 	.word	0x300002a0

08001de8 <UartCmd_Upload_Timing_Report>:
{
 8001de8:	b510      	push	{r4, lr}
 8001dea:	4604      	mov	r4, r0
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001dec:	2202      	movs	r2, #2
 8001dee:	2180      	movs	r1, #128	; 0x80
 8001df0:	480e      	ldr	r0, [pc, #56]	; (8001e2c <UartCmd_Upload_Timing_Report+0x44>)
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8001df2:	f204 44bc 	addw	r4, r4, #1212	; 0x4bc
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001df6:	f002 fe9b 	bl	8004b30 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8001dfa:	2214      	movs	r2, #20
 8001dfc:	490b      	ldr	r1, [pc, #44]	; (8001e2c <UartCmd_Upload_Timing_Report+0x44>)
 8001dfe:	4620      	mov	r0, r4
 8001e00:	f010 fa78 	bl	80122f4 <HAL_UART_Transmit_DMA>
 8001e04:	b958      	cbnz	r0, 8001e1e <UartCmd_Upload_Timing_Report+0x36>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8001e06:	4620      	mov	r0, r4
 8001e08:	f010 fc9e 	bl	8012748 <HAL_UART_GetState>
 8001e0c:	2820      	cmp	r0, #32
 8001e0e:	d1fa      	bne.n	8001e06 <UartCmd_Upload_Timing_Report+0x1e>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8001e10:	4620      	mov	r0, r4
 8001e12:	220a      	movs	r2, #10
 8001e14:	4906      	ldr	r1, [pc, #24]	; (8001e30 <UartCmd_Upload_Timing_Report+0x48>)
 8001e16:	f010 fabd 	bl	8012394 <HAL_UART_Receive_DMA>
 8001e1a:	b918      	cbnz	r0, 8001e24 <UartCmd_Upload_Timing_Report+0x3c>
}
 8001e1c:	bd10      	pop	{r4, pc}
      Error_Handler();
 8001e1e:	f002 fef5 	bl	8004c0c <Error_Handler>
 8001e22:	e7f0      	b.n	8001e06 <UartCmd_Upload_Timing_Report+0x1e>
}
 8001e24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001e28:	f002 bef0 	b.w	8004c0c <Error_Handler>
 8001e2c:	d0d3bbc0 	.word	0xd0d3bbc0
 8001e30:	300002a0 	.word	0x300002a0

08001e34 <UartCmd_Get_Dump_Output_Data_Size>:
{
 8001e34:	b538      	push	{r3, r4, r5, lr}
 8001e36:	4604      	mov	r4, r0
  *((uint16_t*)aTxBuffer) = AI_NET_OUTPUT_SIZE*4;/* expression (AI_NET_OUTPUT_SIZE*4) should not be replaced by expression AI_NET_OUTPUT_SIZE_BYTES since NN output could be quantized (i.e. on 1 byte). However, dequantization operation (1 byte -> 4 bytes) always occurs before uploading the data to the host*/
 8001e38:	4d11      	ldr	r5, [pc, #68]	; (8001e80 <UartCmd_Get_Dump_Output_Data_Size+0x4c>)
 8001e3a:	2308      	movs	r3, #8
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001e3c:	2202      	movs	r2, #2
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8001e3e:	f204 44bc 	addw	r4, r4, #1212	; 0x4bc
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001e42:	4628      	mov	r0, r5
 8001e44:	2120      	movs	r1, #32
  *((uint16_t*)aTxBuffer) = AI_NET_OUTPUT_SIZE*4;/* expression (AI_NET_OUTPUT_SIZE*4) should not be replaced by expression AI_NET_OUTPUT_SIZE_BYTES since NN output could be quantized (i.e. on 1 byte). However, dequantization operation (1 byte -> 4 bytes) always occurs before uploading the data to the host*/
 8001e46:	802b      	strh	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001e48:	f002 fe72 	bl	8004b30 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8001e4c:	4629      	mov	r1, r5
 8001e4e:	2202      	movs	r2, #2
 8001e50:	4620      	mov	r0, r4
 8001e52:	f010 fa4f 	bl	80122f4 <HAL_UART_Transmit_DMA>
 8001e56:	b958      	cbnz	r0, 8001e70 <UartCmd_Get_Dump_Output_Data_Size+0x3c>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8001e58:	4620      	mov	r0, r4
 8001e5a:	f010 fc75 	bl	8012748 <HAL_UART_GetState>
 8001e5e:	2820      	cmp	r0, #32
 8001e60:	d1fa      	bne.n	8001e58 <UartCmd_Get_Dump_Output_Data_Size+0x24>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8001e62:	4620      	mov	r0, r4
 8001e64:	220a      	movs	r2, #10
 8001e66:	4907      	ldr	r1, [pc, #28]	; (8001e84 <UartCmd_Get_Dump_Output_Data_Size+0x50>)
 8001e68:	f010 fa94 	bl	8012394 <HAL_UART_Receive_DMA>
 8001e6c:	b918      	cbnz	r0, 8001e76 <UartCmd_Get_Dump_Output_Data_Size+0x42>
}
 8001e6e:	bd38      	pop	{r3, r4, r5, pc}
      Error_Handler();
 8001e70:	f002 fecc 	bl	8004c0c <Error_Handler>
 8001e74:	e7f0      	b.n	8001e58 <UartCmd_Get_Dump_Output_Data_Size+0x24>
}
 8001e76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8001e7a:	f002 bec7 	b.w	8004c0c <Error_Handler>
 8001e7e:	bf00      	nop
 8001e80:	30000280 	.word	0x30000280
 8001e84:	300002a0 	.word	0x300002a0

08001e88 <UartCmd_Get_Validation_Final_Accuracy>:
{
 8001e88:	b538      	push	{r3, r4, r5, lr}
 8001e8a:	4604      	mov	r4, r0
  *((float*)aTxBuffer) = Test_Context_Ptr->ValidationContext.final_accuracy;
 8001e8c:	4d12      	ldr	r5, [pc, #72]	; (8001ed8 <UartCmd_Get_Validation_Final_Accuracy+0x50>)
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001e8e:	2202      	movs	r2, #2
 8001e90:	2120      	movs	r1, #32
  *((float*)aTxBuffer) = Test_Context_Ptr->ValidationContext.final_accuracy;
 8001e92:	f204 4344 	addw	r3, r4, #1092	; 0x444
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8001e96:	f204 44bc 	addw	r4, r4, #1212	; 0x4bc
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001e9a:	4628      	mov	r0, r5
  *((float*)aTxBuffer) = Test_Context_Ptr->ValidationContext.final_accuracy;
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	602b      	str	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001ea0:	f002 fe46 	bl	8004b30 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8001ea4:	4629      	mov	r1, r5
 8001ea6:	4620      	mov	r0, r4
 8001ea8:	2204      	movs	r2, #4
 8001eaa:	f010 fa23 	bl	80122f4 <HAL_UART_Transmit_DMA>
 8001eae:	b958      	cbnz	r0, 8001ec8 <UartCmd_Get_Validation_Final_Accuracy+0x40>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8001eb0:	4620      	mov	r0, r4
 8001eb2:	f010 fc49 	bl	8012748 <HAL_UART_GetState>
 8001eb6:	2820      	cmp	r0, #32
 8001eb8:	d1fa      	bne.n	8001eb0 <UartCmd_Get_Validation_Final_Accuracy+0x28>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8001eba:	4620      	mov	r0, r4
 8001ebc:	220a      	movs	r2, #10
 8001ebe:	4907      	ldr	r1, [pc, #28]	; (8001edc <UartCmd_Get_Validation_Final_Accuracy+0x54>)
 8001ec0:	f010 fa68 	bl	8012394 <HAL_UART_Receive_DMA>
 8001ec4:	b918      	cbnz	r0, 8001ece <UartCmd_Get_Validation_Final_Accuracy+0x46>
}
 8001ec6:	bd38      	pop	{r3, r4, r5, pc}
      Error_Handler();
 8001ec8:	f002 fea0 	bl	8004c0c <Error_Handler>
 8001ecc:	e7f0      	b.n	8001eb0 <UartCmd_Get_Validation_Final_Accuracy+0x28>
}
 8001ece:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8001ed2:	f002 be9b 	b.w	8004c0c <Error_Handler>
 8001ed6:	bf00      	nop
 8001ed8:	30000280 	.word	0x30000280
 8001edc:	300002a0 	.word	0x300002a0

08001ee0 <UartCmd_Upload_Valid_Output>:
 8001ee0:	b510      	push	{r4, lr}
 8001ee2:	4604      	mov	r4, r0
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	f44f 7190 	mov.w	r1, #288	; 0x120
 8001eea:	480f      	ldr	r0, [pc, #60]	; (8001f28 <UartCmd_Upload_Valid_Output+0x48>)
 8001eec:	f204 44bc 	addw	r4, r4, #1212	; 0x4bc
 8001ef0:	f002 fe1e 	bl	8004b30 <UTILS_DCache_Coherency_Maintenance>
 8001ef4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ef8:	490b      	ldr	r1, [pc, #44]	; (8001f28 <UartCmd_Upload_Valid_Output+0x48>)
 8001efa:	4620      	mov	r0, r4
 8001efc:	f010 f9fa 	bl	80122f4 <HAL_UART_Transmit_DMA>
 8001f00:	b958      	cbnz	r0, 8001f1a <UartCmd_Upload_Valid_Output+0x3a>
 8001f02:	4620      	mov	r0, r4
 8001f04:	f010 fc20 	bl	8012748 <HAL_UART_GetState>
 8001f08:	2820      	cmp	r0, #32
 8001f0a:	d1fa      	bne.n	8001f02 <UartCmd_Upload_Valid_Output+0x22>
 8001f0c:	4620      	mov	r0, r4
 8001f0e:	220a      	movs	r2, #10
 8001f10:	4906      	ldr	r1, [pc, #24]	; (8001f2c <UartCmd_Upload_Valid_Output+0x4c>)
 8001f12:	f010 fa3f 	bl	8012394 <HAL_UART_Receive_DMA>
 8001f16:	b918      	cbnz	r0, 8001f20 <UartCmd_Upload_Valid_Output+0x40>
 8001f18:	bd10      	pop	{r4, pc}
 8001f1a:	f002 fe77 	bl	8004c0c <Error_Handler>
 8001f1e:	e7f0      	b.n	8001f02 <UartCmd_Upload_Valid_Output+0x22>
 8001f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f24:	f002 be72 	b.w	8004c0c <Error_Handler>
 8001f28:	d0cb0920 	.word	0xd0cb0920
 8001f2c:	300002a0 	.word	0x300002a0

08001f30 <UartCmd_Upload_Dump_Output_Data>:
 8001f30:	b510      	push	{r4, lr}
 8001f32:	4604      	mov	r4, r0
 8001f34:	2202      	movs	r2, #2
 8001f36:	2180      	movs	r1, #128	; 0x80
 8001f38:	480e      	ldr	r0, [pc, #56]	; (8001f74 <UartCmd_Upload_Dump_Output_Data+0x44>)
 8001f3a:	f204 44bc 	addw	r4, r4, #1212	; 0x4bc
 8001f3e:	f002 fdf7 	bl	8004b30 <UTILS_DCache_Coherency_Maintenance>
 8001f42:	2208      	movs	r2, #8
 8001f44:	490b      	ldr	r1, [pc, #44]	; (8001f74 <UartCmd_Upload_Dump_Output_Data+0x44>)
 8001f46:	4620      	mov	r0, r4
 8001f48:	f010 f9d4 	bl	80122f4 <HAL_UART_Transmit_DMA>
 8001f4c:	b958      	cbnz	r0, 8001f66 <UartCmd_Upload_Dump_Output_Data+0x36>
 8001f4e:	4620      	mov	r0, r4
 8001f50:	f010 fbfa 	bl	8012748 <HAL_UART_GetState>
 8001f54:	2820      	cmp	r0, #32
 8001f56:	d1fa      	bne.n	8001f4e <UartCmd_Upload_Dump_Output_Data+0x1e>
 8001f58:	4620      	mov	r0, r4
 8001f5a:	220a      	movs	r2, #10
 8001f5c:	4906      	ldr	r1, [pc, #24]	; (8001f78 <UartCmd_Upload_Dump_Output_Data+0x48>)
 8001f5e:	f010 fa19 	bl	8012394 <HAL_UART_Receive_DMA>
 8001f62:	b918      	cbnz	r0, 8001f6c <UartCmd_Upload_Dump_Output_Data+0x3c>
 8001f64:	bd10      	pop	{r4, pc}
 8001f66:	f002 fe51 	bl	8004c0c <Error_Handler>
 8001f6a:	e7f0      	b.n	8001f4e <UartCmd_Upload_Dump_Output_Data+0x1e>
 8001f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f70:	f002 be4c 	b.w	8004c0c <Error_Handler>
 8001f74:	d0cb08a0 	.word	0xd0cb08a0
 8001f78:	300002a0 	.word	0x300002a0

08001f7c <UartCmd_Upload_NonRegression_Debug_Report>:
{
 8001f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f7e:	4d32      	ldr	r5, [pc, #200]	; (8002048 <UartCmd_Upload_NonRegression_Debug_Report+0xcc>)
 8001f80:	4604      	mov	r4, r0
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001f82:	2202      	movs	r2, #2
 8001f84:	4931      	ldr	r1, [pc, #196]	; (800204c <UartCmd_Upload_NonRegression_Debug_Report+0xd0>)
 8001f86:	4628      	mov	r0, r5
 8001f88:	4f31      	ldr	r7, [pc, #196]	; (8002050 <UartCmd_Upload_NonRegression_Debug_Report+0xd4>)
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8001f8a:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8001f8e:	f204 44bc 	addw	r4, r4, #1212	; 0x4bc
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001f92:	f002 fdcd 	bl	8004b30 <UTILS_DCache_Coherency_Maintenance>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8001f96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f9a:	4629      	mov	r1, r5
 8001f9c:	4620      	mov	r0, r4
 8001f9e:	f010 f9a9 	bl	80122f4 <HAL_UART_Transmit_DMA>
 8001fa2:	2800      	cmp	r0, #0
 8001fa4:	d142      	bne.n	800202c <UartCmd_Upload_NonRegression_Debug_Report+0xb0>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8001fa6:	4620      	mov	r0, r4
 8001fa8:	f010 fbce 	bl	8012748 <HAL_UART_GetState>
 8001fac:	2820      	cmp	r0, #32
 8001fae:	d1fa      	bne.n	8001fa6 <UartCmd_Upload_NonRegression_Debug_Report+0x2a>
    for(i=0;i<dma_xfer_num;i++)
 8001fb0:	4435      	add	r5, r6
 8001fb2:	42af      	cmp	r7, r5
 8001fb4:	d1ef      	bne.n	8001f96 <UartCmd_Upload_NonRegression_Debug_Report+0x1a>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), TxDataTransferSize%0xFFFF)!= HAL_OK)
 8001fb6:	f645 02ac 	movw	r2, #22700	; 0x58ac
 8001fba:	4925      	ldr	r1, [pc, #148]	; (8002050 <UartCmd_Upload_NonRegression_Debug_Report+0xd4>)
 8001fbc:	4620      	mov	r0, r4
 8001fbe:	f010 f999 	bl	80122f4 <HAL_UART_Transmit_DMA>
 8001fc2:	2800      	cmp	r0, #0
 8001fc4:	d13c      	bne.n	8002040 <UartCmd_Upload_NonRegression_Debug_Report+0xc4>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8001fc6:	4620      	mov	r0, r4
 8001fc8:	f010 fbbe 	bl	8012748 <HAL_UART_GetState>
 8001fcc:	2820      	cmp	r0, #32
 8001fce:	d1fa      	bne.n	8001fc6 <UartCmd_Upload_NonRegression_Debug_Report+0x4a>
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001fd0:	4d20      	ldr	r5, [pc, #128]	; (8002054 <UartCmd_Upload_NonRegression_Debug_Report+0xd8>)
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8001fd2:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8001fd6:	4e20      	ldr	r6, [pc, #128]	; (8002058 <UartCmd_Upload_NonRegression_Debug_Report+0xdc>)
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001fd8:	2202      	movs	r2, #2
 8001fda:	491c      	ldr	r1, [pc, #112]	; (800204c <UartCmd_Upload_NonRegression_Debug_Report+0xd0>)
 8001fdc:	4628      	mov	r0, r5
 8001fde:	f002 fda7 	bl	8004b30 <UTILS_DCache_Coherency_Maintenance>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8001fe2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fe6:	4629      	mov	r1, r5
 8001fe8:	4620      	mov	r0, r4
 8001fea:	f010 f983 	bl	80122f4 <HAL_UART_Transmit_DMA>
 8001fee:	b9d0      	cbnz	r0, 8002026 <UartCmd_Upload_NonRegression_Debug_Report+0xaa>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8001ff0:	4620      	mov	r0, r4
 8001ff2:	f010 fba9 	bl	8012748 <HAL_UART_GetState>
 8001ff6:	2820      	cmp	r0, #32
 8001ff8:	d1fa      	bne.n	8001ff0 <UartCmd_Upload_NonRegression_Debug_Report+0x74>
    for(i=0;i<dma_xfer_num;i++)
 8001ffa:	443d      	add	r5, r7
 8001ffc:	42b5      	cmp	r5, r6
 8001ffe:	d1f0      	bne.n	8001fe2 <UartCmd_Upload_NonRegression_Debug_Report+0x66>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), TxDataTransferSize%0xFFFF)!= HAL_OK)
 8002000:	f645 02ac 	movw	r2, #22700	; 0x58ac
 8002004:	4914      	ldr	r1, [pc, #80]	; (8002058 <UartCmd_Upload_NonRegression_Debug_Report+0xdc>)
 8002006:	4620      	mov	r0, r4
 8002008:	f010 f974 	bl	80122f4 <HAL_UART_Transmit_DMA>
 800200c:	b9a8      	cbnz	r0, 800203a <UartCmd_Upload_NonRegression_Debug_Report+0xbe>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 800200e:	4620      	mov	r0, r4
 8002010:	f010 fb9a 	bl	8012748 <HAL_UART_GetState>
 8002014:	2820      	cmp	r0, #32
 8002016:	d1fa      	bne.n	800200e <UartCmd_Upload_NonRegression_Debug_Report+0x92>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002018:	4620      	mov	r0, r4
 800201a:	220a      	movs	r2, #10
 800201c:	490f      	ldr	r1, [pc, #60]	; (800205c <UartCmd_Upload_NonRegression_Debug_Report+0xe0>)
 800201e:	f010 f9b9 	bl	8012394 <HAL_UART_Receive_DMA>
 8002022:	b930      	cbnz	r0, 8002032 <UartCmd_Upload_NonRegression_Debug_Report+0xb6>
}
 8002024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        Error_Handler();
 8002026:	f002 fdf1 	bl	8004c0c <Error_Handler>
 800202a:	e7e1      	b.n	8001ff0 <UartCmd_Upload_NonRegression_Debug_Report+0x74>
 800202c:	f002 fdee 	bl	8004c0c <Error_Handler>
 8002030:	e7b9      	b.n	8001fa6 <UartCmd_Upload_NonRegression_Debug_Report+0x2a>
}
 8002032:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Error_Handler();
 8002036:	f002 bde9 	b.w	8004c0c <Error_Handler>
        Error_Handler();
 800203a:	f002 fde7 	bl	8004c0c <Error_Handler>
 800203e:	e7e6      	b.n	800200e <UartCmd_Upload_NonRegression_Debug_Report+0x92>
 8002040:	f002 fde4 	bl	8004c0c <Error_Handler>
 8002044:	e7bf      	b.n	8001fc6 <UartCmd_Upload_NonRegression_Debug_Report+0x4a>
 8002046:	bf00      	nop
 8002048:	d0cb0a40 	.word	0xd0cb0a40
 800204c:	000458c0 	.word	0x000458c0
 8002050:	d0cf0a3c 	.word	0xd0cf0a3c
 8002054:	d0cf6300 	.word	0xd0cf6300
 8002058:	d0d362fc 	.word	0xd0d362fc
 800205c:	300002a0 	.word	0x300002a0

08002060 <UartCmd_Get_Valid_Output_Size>:
 8002060:	b538      	push	{r3, r4, r5, lr}
 8002062:	4604      	mov	r4, r0
 8002064:	4d11      	ldr	r5, [pc, #68]	; (80020ac <UartCmd_Get_Valid_Output_Size+0x4c>)
 8002066:	f44f 7380 	mov.w	r3, #256	; 0x100
 800206a:	2202      	movs	r2, #2
 800206c:	f204 44bc 	addw	r4, r4, #1212	; 0x4bc
 8002070:	4628      	mov	r0, r5
 8002072:	2120      	movs	r1, #32
 8002074:	602b      	str	r3, [r5, #0]
 8002076:	f002 fd5b 	bl	8004b30 <UTILS_DCache_Coherency_Maintenance>
 800207a:	4629      	mov	r1, r5
 800207c:	2204      	movs	r2, #4
 800207e:	4620      	mov	r0, r4
 8002080:	f010 f938 	bl	80122f4 <HAL_UART_Transmit_DMA>
 8002084:	b958      	cbnz	r0, 800209e <UartCmd_Get_Valid_Output_Size+0x3e>
 8002086:	4620      	mov	r0, r4
 8002088:	f010 fb5e 	bl	8012748 <HAL_UART_GetState>
 800208c:	2820      	cmp	r0, #32
 800208e:	d1fa      	bne.n	8002086 <UartCmd_Get_Valid_Output_Size+0x26>
 8002090:	4620      	mov	r0, r4
 8002092:	220a      	movs	r2, #10
 8002094:	4906      	ldr	r1, [pc, #24]	; (80020b0 <UartCmd_Get_Valid_Output_Size+0x50>)
 8002096:	f010 f97d 	bl	8012394 <HAL_UART_Receive_DMA>
 800209a:	b918      	cbnz	r0, 80020a4 <UartCmd_Get_Valid_Output_Size+0x44>
 800209c:	bd38      	pop	{r3, r4, r5, pc}
 800209e:	f002 fdb5 	bl	8004c0c <Error_Handler>
 80020a2:	e7f0      	b.n	8002086 <UartCmd_Get_Valid_Output_Size+0x26>
 80020a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80020a8:	f002 bdb0 	b.w	8004c0c <Error_Handler>
 80020ac:	30000280 	.word	0x30000280
 80020b0:	300002a0 	.word	0x300002a0

080020b4 <UartCmd_Get_Dump_Whole_Data_Size>:
{
 80020b4:	b538      	push	{r3, r4, r5, lr}
 80020b6:	4604      	mov	r4, r0
  *((uint32_t*)aTxBuffer) = DUMP_INTERMEDIATE_DATA_BUFFER_SIZE;
 80020b8:	4d11      	ldr	r5, [pc, #68]	; (8002100 <UartCmd_Get_Dump_Whole_Data_Size+0x4c>)
 80020ba:	4b12      	ldr	r3, [pc, #72]	; (8002104 <UartCmd_Get_Dump_Whole_Data_Size+0x50>)
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80020bc:	2202      	movs	r2, #2
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80020be:	f204 44bc 	addw	r4, r4, #1212	; 0x4bc
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80020c2:	4628      	mov	r0, r5
 80020c4:	2120      	movs	r1, #32
  *((uint32_t*)aTxBuffer) = DUMP_INTERMEDIATE_DATA_BUFFER_SIZE;
 80020c6:	602b      	str	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80020c8:	f002 fd32 	bl	8004b30 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80020cc:	4629      	mov	r1, r5
 80020ce:	2204      	movs	r2, #4
 80020d0:	4620      	mov	r0, r4
 80020d2:	f010 f90f 	bl	80122f4 <HAL_UART_Transmit_DMA>
 80020d6:	b958      	cbnz	r0, 80020f0 <UartCmd_Get_Dump_Whole_Data_Size+0x3c>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 80020d8:	4620      	mov	r0, r4
 80020da:	f010 fb35 	bl	8012748 <HAL_UART_GetState>
 80020de:	2820      	cmp	r0, #32
 80020e0:	d1fa      	bne.n	80020d8 <UartCmd_Get_Dump_Whole_Data_Size+0x24>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 80020e2:	4620      	mov	r0, r4
 80020e4:	220a      	movs	r2, #10
 80020e6:	4908      	ldr	r1, [pc, #32]	; (8002108 <UartCmd_Get_Dump_Whole_Data_Size+0x54>)
 80020e8:	f010 f954 	bl	8012394 <HAL_UART_Receive_DMA>
 80020ec:	b918      	cbnz	r0, 80020f6 <UartCmd_Get_Dump_Whole_Data_Size+0x42>
}
 80020ee:	bd38      	pop	{r3, r4, r5, pc}
      Error_Handler();
 80020f0:	f002 fd8c 	bl	8004c0c <Error_Handler>
 80020f4:	e7f0      	b.n	80020d8 <UartCmd_Get_Dump_Whole_Data_Size+0x24>
}
 80020f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 80020fa:	f002 bd87 	b.w	8004c0c <Error_Handler>
 80020fe:	bf00      	nop
 8002100:	30000280 	.word	0x30000280
 8002104:	000458a8 	.word	0x000458a8
 8002108:	300002a0 	.word	0x300002a0

0800210c <UartCmd_Get_Timing_Report_Size>:
{
 800210c:	b538      	push	{r3, r4, r5, lr}
 800210e:	4604      	mov	r4, r0
  *((uint32_t*)aTxBuffer) = APP_FRAMEOPERATION_NUM*sizeof(uint32_t);
 8002110:	4d11      	ldr	r5, [pc, #68]	; (8002158 <UartCmd_Get_Timing_Report_Size+0x4c>)
 8002112:	2314      	movs	r3, #20
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002114:	2202      	movs	r2, #2
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002116:	f204 44bc 	addw	r4, r4, #1212	; 0x4bc
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 800211a:	4628      	mov	r0, r5
 800211c:	2120      	movs	r1, #32
  *((uint32_t*)aTxBuffer) = APP_FRAMEOPERATION_NUM*sizeof(uint32_t);
 800211e:	602b      	str	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002120:	f002 fd06 	bl	8004b30 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002124:	4629      	mov	r1, r5
 8002126:	2204      	movs	r2, #4
 8002128:	4620      	mov	r0, r4
 800212a:	f010 f8e3 	bl	80122f4 <HAL_UART_Transmit_DMA>
 800212e:	b958      	cbnz	r0, 8002148 <UartCmd_Get_Timing_Report_Size+0x3c>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002130:	4620      	mov	r0, r4
 8002132:	f010 fb09 	bl	8012748 <HAL_UART_GetState>
 8002136:	2820      	cmp	r0, #32
 8002138:	d1fa      	bne.n	8002130 <UartCmd_Get_Timing_Report_Size+0x24>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 800213a:	4620      	mov	r0, r4
 800213c:	220a      	movs	r2, #10
 800213e:	4907      	ldr	r1, [pc, #28]	; (800215c <UartCmd_Get_Timing_Report_Size+0x50>)
 8002140:	f010 f928 	bl	8012394 <HAL_UART_Receive_DMA>
 8002144:	b918      	cbnz	r0, 800214e <UartCmd_Get_Timing_Report_Size+0x42>
}
 8002146:	bd38      	pop	{r3, r4, r5, pc}
      Error_Handler();
 8002148:	f002 fd60 	bl	8004c0c <Error_Handler>
 800214c:	e7f0      	b.n	8002130 <UartCmd_Get_Timing_Report_Size+0x24>
}
 800214e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8002152:	f002 bd5b 	b.w	8004c0c <Error_Handler>
 8002156:	bf00      	nop
 8002158:	30000280 	.word	0x30000280
 800215c:	300002a0 	.word	0x300002a0

08002160 <UartCmd_Get_NonRegression_Debug_Report_Size>:
{
 8002160:	b538      	push	{r3, r4, r5, lr}
 8002162:	4604      	mov	r4, r0
  *((uint32_t*)aTxBuffer) = DUMP_INTERMEDIATE_DATA_BUFFER_SIZE*2;
 8002164:	4d11      	ldr	r5, [pc, #68]	; (80021ac <UartCmd_Get_NonRegression_Debug_Report_Size+0x4c>)
 8002166:	4b12      	ldr	r3, [pc, #72]	; (80021b0 <UartCmd_Get_NonRegression_Debug_Report_Size+0x50>)
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002168:	2202      	movs	r2, #2
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 800216a:	f204 44bc 	addw	r4, r4, #1212	; 0x4bc
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 800216e:	4628      	mov	r0, r5
 8002170:	2120      	movs	r1, #32
  *((uint32_t*)aTxBuffer) = DUMP_INTERMEDIATE_DATA_BUFFER_SIZE*2;
 8002172:	602b      	str	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002174:	f002 fcdc 	bl	8004b30 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002178:	4629      	mov	r1, r5
 800217a:	2204      	movs	r2, #4
 800217c:	4620      	mov	r0, r4
 800217e:	f010 f8b9 	bl	80122f4 <HAL_UART_Transmit_DMA>
 8002182:	b958      	cbnz	r0, 800219c <UartCmd_Get_NonRegression_Debug_Report_Size+0x3c>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002184:	4620      	mov	r0, r4
 8002186:	f010 fadf 	bl	8012748 <HAL_UART_GetState>
 800218a:	2820      	cmp	r0, #32
 800218c:	d1fa      	bne.n	8002184 <UartCmd_Get_NonRegression_Debug_Report_Size+0x24>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 800218e:	4620      	mov	r0, r4
 8002190:	220a      	movs	r2, #10
 8002192:	4908      	ldr	r1, [pc, #32]	; (80021b4 <UartCmd_Get_NonRegression_Debug_Report_Size+0x54>)
 8002194:	f010 f8fe 	bl	8012394 <HAL_UART_Receive_DMA>
 8002198:	b918      	cbnz	r0, 80021a2 <UartCmd_Get_NonRegression_Debug_Report_Size+0x42>
}
 800219a:	bd38      	pop	{r3, r4, r5, pc}
      Error_Handler();
 800219c:	f002 fd36 	bl	8004c0c <Error_Handler>
 80021a0:	e7f0      	b.n	8002184 <UartCmd_Get_NonRegression_Debug_Report_Size+0x24>
}
 80021a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 80021a6:	f002 bd31 	b.w	8004c0c <Error_Handler>
 80021aa:	bf00      	nop
 80021ac:	30000280 	.word	0x30000280
 80021b0:	0008b150 	.word	0x0008b150
 80021b4:	300002a0 	.word	0x300002a0

080021b8 <UartCmd_Get_NonRegression_Report_Size>:
{
 80021b8:	b538      	push	{r3, r4, r5, lr}
 80021ba:	4604      	mov	r4, r0
  *((uint32_t*)aTxBuffer) = AI_NET_OUTPUT_SIZE*4;/* expression (AI_NET_OUTPUT_SIZE*4) should not be replaced by expression AI_NET_OUTPUT_SIZE_BYTES since NN output could be quantized (i.e. on 1 byte). However, dequantization operation (1 byte -> 4 bytes) always occurs before uploading the data to the host*/
 80021bc:	4d11      	ldr	r5, [pc, #68]	; (8002204 <UartCmd_Get_NonRegression_Report_Size+0x4c>)
 80021be:	2308      	movs	r3, #8
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80021c0:	2202      	movs	r2, #2
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80021c2:	f204 44bc 	addw	r4, r4, #1212	; 0x4bc
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80021c6:	4628      	mov	r0, r5
 80021c8:	2120      	movs	r1, #32
  *((uint32_t*)aTxBuffer) = AI_NET_OUTPUT_SIZE*4;/* expression (AI_NET_OUTPUT_SIZE*4) should not be replaced by expression AI_NET_OUTPUT_SIZE_BYTES since NN output could be quantized (i.e. on 1 byte). However, dequantization operation (1 byte -> 4 bytes) always occurs before uploading the data to the host*/
 80021ca:	602b      	str	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80021cc:	f002 fcb0 	bl	8004b30 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80021d0:	4629      	mov	r1, r5
 80021d2:	2204      	movs	r2, #4
 80021d4:	4620      	mov	r0, r4
 80021d6:	f010 f88d 	bl	80122f4 <HAL_UART_Transmit_DMA>
 80021da:	b958      	cbnz	r0, 80021f4 <UartCmd_Get_NonRegression_Report_Size+0x3c>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 80021dc:	4620      	mov	r0, r4
 80021de:	f010 fab3 	bl	8012748 <HAL_UART_GetState>
 80021e2:	2820      	cmp	r0, #32
 80021e4:	d1fa      	bne.n	80021dc <UartCmd_Get_NonRegression_Report_Size+0x24>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 80021e6:	4620      	mov	r0, r4
 80021e8:	220a      	movs	r2, #10
 80021ea:	4907      	ldr	r1, [pc, #28]	; (8002208 <UartCmd_Get_NonRegression_Report_Size+0x50>)
 80021ec:	f010 f8d2 	bl	8012394 <HAL_UART_Receive_DMA>
 80021f0:	b918      	cbnz	r0, 80021fa <UartCmd_Get_NonRegression_Report_Size+0x42>
}
 80021f2:	bd38      	pop	{r3, r4, r5, pc}
      Error_Handler();
 80021f4:	f002 fd0a 	bl	8004c0c <Error_Handler>
 80021f8:	e7f0      	b.n	80021dc <UartCmd_Get_NonRegression_Report_Size+0x24>
}
 80021fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 80021fe:	f002 bd05 	b.w	8004c0c <Error_Handler>
 8002202:	bf00      	nop
 8002204:	30000280 	.word	0x30000280
 8002208:	300002a0 	.word	0x300002a0

0800220c <UartCmd_Get_Validation_Report_Size>:
{
 800220c:	b538      	push	{r3, r4, r5, lr}
 800220e:	4604      	mov	r4, r0
  *((uint32_t*)aTxBuffer) = AI_NET_OUTPUT_SIZE*4*ONBOARD_VALID_NUM_FILE_PER_DIR;/* expression (AI_NET_OUTPUT_SIZE*4) should not be replaced by expression AI_NET_OUTPUT_SIZE_BYTES since NN output could be quantized (i.e. on 1 byte). However, dequantization operation (1 byte -> 4 bytes) always occurs before uploading the data to the host*/
 8002210:	4d11      	ldr	r5, [pc, #68]	; (8002258 <UartCmd_Get_Validation_Report_Size+0x4c>)
 8002212:	f44f 7380 	mov.w	r3, #256	; 0x100
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002216:	2202      	movs	r2, #2
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002218:	f204 44bc 	addw	r4, r4, #1212	; 0x4bc
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 800221c:	4628      	mov	r0, r5
 800221e:	2120      	movs	r1, #32
  *((uint32_t*)aTxBuffer) = AI_NET_OUTPUT_SIZE*4*ONBOARD_VALID_NUM_FILE_PER_DIR;/* expression (AI_NET_OUTPUT_SIZE*4) should not be replaced by expression AI_NET_OUTPUT_SIZE_BYTES since NN output could be quantized (i.e. on 1 byte). However, dequantization operation (1 byte -> 4 bytes) always occurs before uploading the data to the host*/
 8002220:	602b      	str	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002222:	f002 fc85 	bl	8004b30 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002226:	4629      	mov	r1, r5
 8002228:	2204      	movs	r2, #4
 800222a:	4620      	mov	r0, r4
 800222c:	f010 f862 	bl	80122f4 <HAL_UART_Transmit_DMA>
 8002230:	b958      	cbnz	r0, 800224a <UartCmd_Get_Validation_Report_Size+0x3e>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002232:	4620      	mov	r0, r4
 8002234:	f010 fa88 	bl	8012748 <HAL_UART_GetState>
 8002238:	2820      	cmp	r0, #32
 800223a:	d1fa      	bne.n	8002232 <UartCmd_Get_Validation_Report_Size+0x26>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 800223c:	4620      	mov	r0, r4
 800223e:	220a      	movs	r2, #10
 8002240:	4906      	ldr	r1, [pc, #24]	; (800225c <UartCmd_Get_Validation_Report_Size+0x50>)
 8002242:	f010 f8a7 	bl	8012394 <HAL_UART_Receive_DMA>
 8002246:	b918      	cbnz	r0, 8002250 <UartCmd_Get_Validation_Report_Size+0x44>
}
 8002248:	bd38      	pop	{r3, r4, r5, pc}
      Error_Handler();
 800224a:	f002 fcdf 	bl	8004c0c <Error_Handler>
 800224e:	e7f0      	b.n	8002232 <UartCmd_Get_Validation_Report_Size+0x26>
}
 8002250:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8002254:	f002 bcda 	b.w	8004c0c <Error_Handler>
 8002258:	30000280 	.word	0x30000280
 800225c:	300002a0 	.word	0x300002a0

08002260 <UartCmd_Read_Camera_Register>:
{
 8002260:	e92d 46f0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, lr}
 8002264:	460f      	mov	r7, r1
  uint32_t Num_reg_to_read=(*(data_buffer+1) - *data_buffer)+1;
 8002266:	7809      	ldrb	r1, [r1, #0]
{
 8002268:	b083      	sub	sp, #12
 800226a:	4682      	mov	sl, r0
  uint32_t Num_reg_to_read=(*(data_buffer+1) - *data_buffer)+1;
 800226c:	787e      	ldrb	r6, [r7, #1]
 800226e:	1a76      	subs	r6, r6, r1
  for(uint8_t i=0; i<Num_reg_to_read;i++)
 8002270:	3601      	adds	r6, #1
 8002272:	d017      	beq.n	80022a4 <UartCmd_Read_Camera_Register+0x44>
 8002274:	2400      	movs	r4, #0
 8002276:	f8df 907c 	ldr.w	r9, [pc, #124]	; 80022f4 <UartCmd_Read_Camera_Register+0x94>
 800227a:	4d1c      	ldr	r5, [pc, #112]	; (80022ec <UartCmd_Read_Camera_Register+0x8c>)
 800227c:	e000      	b.n	8002280 <UartCmd_Read_Camera_Register+0x20>
 800227e:	5d39      	ldrb	r1, [r7, r4]
    ov9655_read_reg(&pObj->Ctx, *(data_buffer+i), &tmp, 1);
 8002280:	f8d9 0000 	ldr.w	r0, [r9]
 8002284:	2301      	movs	r3, #1
 8002286:	f10d 0207 	add.w	r2, sp, #7
 800228a:	3018      	adds	r0, #24
 800228c:	f006 fed6 	bl	800903c <ov9655_read_reg>
    Cam_Reg_Table[i]=tmp;
 8002290:	f89d 2007 	ldrb.w	r2, [sp, #7]
  for(uint8_t i=0; i<Num_reg_to_read;i++)
 8002294:	1c63      	adds	r3, r4, #1
    Cam_Reg_Table[i]=tmp;
 8002296:	552a      	strb	r2, [r5, r4]
  for(uint8_t i=0; i<Num_reg_to_read;i++)
 8002298:	b2dc      	uxtb	r4, r3
 800229a:	42b4      	cmp	r4, r6
 800229c:	d3ef      	bcc.n	800227e <UartCmd_Read_Camera_Register+0x1e>
  if(TxDataTransferSize > TxDataBufSize)
 800229e:	2ee0      	cmp	r6, #224	; 0xe0
 80022a0:	d900      	bls.n	80022a4 <UartCmd_Read_Camera_Register+0x44>
    while(1);
 80022a2:	e7fe      	b.n	80022a2 <UartCmd_Read_Camera_Register+0x42>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80022a4:	f20a 4abc 	addw	sl, sl, #1212	; 0x4bc
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80022a8:	2202      	movs	r2, #2
 80022aa:	21e0      	movs	r1, #224	; 0xe0
 80022ac:	480f      	ldr	r0, [pc, #60]	; (80022ec <UartCmd_Read_Camera_Register+0x8c>)
 80022ae:	f002 fc3f 	bl	8004b30 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80022b2:	4650      	mov	r0, sl
 80022b4:	b2b2      	uxth	r2, r6
 80022b6:	490d      	ldr	r1, [pc, #52]	; (80022ec <UartCmd_Read_Camera_Register+0x8c>)
 80022b8:	f010 f81c 	bl	80122f4 <HAL_UART_Transmit_DMA>
 80022bc:	b990      	cbnz	r0, 80022e4 <UartCmd_Read_Camera_Register+0x84>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 80022be:	4650      	mov	r0, sl
 80022c0:	f010 fa42 	bl	8012748 <HAL_UART_GetState>
 80022c4:	2820      	cmp	r0, #32
 80022c6:	d1fa      	bne.n	80022be <UartCmd_Read_Camera_Register+0x5e>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 80022c8:	4650      	mov	r0, sl
 80022ca:	220a      	movs	r2, #10
 80022cc:	4908      	ldr	r1, [pc, #32]	; (80022f0 <UartCmd_Read_Camera_Register+0x90>)
 80022ce:	f010 f861 	bl	8012394 <HAL_UART_Receive_DMA>
 80022d2:	b910      	cbnz	r0, 80022da <UartCmd_Read_Camera_Register+0x7a>
}
 80022d4:	b003      	add	sp, #12
 80022d6:	e8bd 86f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, pc}
    Error_Handler();
 80022da:	f002 fc97 	bl	8004c0c <Error_Handler>
}
 80022de:	b003      	add	sp, #12
 80022e0:	e8bd 86f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, pc}
      Error_Handler();
 80022e4:	f002 fc92 	bl	8004c0c <Error_Handler>
 80022e8:	e7e9      	b.n	80022be <UartCmd_Read_Camera_Register+0x5e>
 80022ea:	bf00      	nop
 80022ec:	20009960 	.word	0x20009960
 80022f0:	300002a0 	.word	0x300002a0
 80022f4:	20009428 	.word	0x20009428

080022f8 <UartCmd_Trigger_Capture>:
{
 80022f8:	b538      	push	{r3, r4, r5, lr}
  if((Test_Context_Ptr->UartContext.uart_host_requested_mode==CAPTURE)&&(Test_Context_Ptr->UartContext.uart_host_requested_capture_delay==0))
 80022fa:	f890 24a4 	ldrb.w	r2, [r0, #1188]	; 0x4a4
{
 80022fe:	4603      	mov	r3, r0
  if((Test_Context_Ptr->UartContext.uart_host_requested_mode==CAPTURE)&&(Test_Context_Ptr->UartContext.uart_host_requested_capture_delay==0))
 8002300:	2a04      	cmp	r2, #4
 8002302:	d108      	bne.n	8002316 <UartCmd_Trigger_Capture+0x1e>
 8002304:	f8d0 24b0 	ldr.w	r2, [r0, #1200]	; 0x4b0
 8002308:	b92a      	cbnz	r2, 8002316 <UartCmd_Trigger_Capture+0x1e>
    Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 800230a:	2201      	movs	r2, #1
 800230c:	f8c0 24a0 	str.w	r2, [r0, #1184]	; 0x4a0
    Test_Context_Ptr->CaptureContext.capture_state = 1;
 8002310:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
}
 8002314:	bd38      	pop	{r3, r4, r5, pc}
    *(aTxBuffer) = CMD_ERROR_EVT;
 8002316:	4d14      	ldr	r5, [pc, #80]	; (8002368 <UartCmd_Trigger_Capture+0x70>)
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002318:	f203 44bc 	addw	r4, r3, #1212	; 0x4bc
    *(aTxBuffer) = CMD_ERROR_EVT;
 800231c:	2304      	movs	r3, #4
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 800231e:	2202      	movs	r2, #2
 8002320:	4628      	mov	r0, r5
 8002322:	2120      	movs	r1, #32
    *(aTxBuffer) = CMD_ERROR_EVT;
 8002324:	702b      	strb	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002326:	f002 fc03 	bl	8004b30 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 800232a:	4629      	mov	r1, r5
 800232c:	4620      	mov	r0, r4
 800232e:	2201      	movs	r2, #1
 8002330:	f00f ffe0 	bl	80122f4 <HAL_UART_Transmit_DMA>
 8002334:	b978      	cbnz	r0, 8002356 <UartCmd_Trigger_Capture+0x5e>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002336:	4620      	mov	r0, r4
 8002338:	f010 fa06 	bl	8012748 <HAL_UART_GetState>
 800233c:	2820      	cmp	r0, #32
 800233e:	d1fa      	bne.n	8002336 <UartCmd_Trigger_Capture+0x3e>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002340:	4620      	mov	r0, r4
 8002342:	220a      	movs	r2, #10
 8002344:	4909      	ldr	r1, [pc, #36]	; (800236c <UartCmd_Trigger_Capture+0x74>)
 8002346:	f010 f825 	bl	8012394 <HAL_UART_Receive_DMA>
 800234a:	2800      	cmp	r0, #0
 800234c:	d0e2      	beq.n	8002314 <UartCmd_Trigger_Capture+0x1c>
}
 800234e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8002352:	f002 bc5b 	b.w	8004c0c <Error_Handler>
      Error_Handler();
 8002356:	f002 fc59 	bl	8004c0c <Error_Handler>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 800235a:	4620      	mov	r0, r4
 800235c:	f010 f9f4 	bl	8012748 <HAL_UART_GetState>
 8002360:	2820      	cmp	r0, #32
 8002362:	d1e8      	bne.n	8002336 <UartCmd_Trigger_Capture+0x3e>
 8002364:	e7ec      	b.n	8002340 <UartCmd_Trigger_Capture+0x48>
 8002366:	bf00      	nop
 8002368:	30000280 	.word	0x30000280
 800236c:	300002a0 	.word	0x300002a0

08002370 <UartCmd_Trigger_Dump>:
{
 8002370:	b538      	push	{r3, r4, r5, lr}
  if(Test_Context_Ptr->UartContext.uart_host_requested_mode==DUMP)
 8002372:	f890 24a4 	ldrb.w	r2, [r0, #1188]	; 0x4a4
{
 8002376:	4603      	mov	r3, r0
  if(Test_Context_Ptr->UartContext.uart_host_requested_mode==DUMP)
 8002378:	2a03      	cmp	r2, #3
 800237a:	d027      	beq.n	80023cc <UartCmd_Trigger_Dump+0x5c>
    *(aTxBuffer) = CMD_ERROR_EVT;
 800237c:	4d1b      	ldr	r5, [pc, #108]	; (80023ec <UartCmd_Trigger_Dump+0x7c>)
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 800237e:	f200 44bc 	addw	r4, r0, #1212	; 0x4bc
    *(aTxBuffer) = CMD_ERROR_EVT;
 8002382:	2304      	movs	r3, #4
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002384:	2202      	movs	r2, #2
 8002386:	4628      	mov	r0, r5
 8002388:	2120      	movs	r1, #32
    *(aTxBuffer) = CMD_ERROR_EVT;
 800238a:	702b      	strb	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 800238c:	f002 fbd0 	bl	8004b30 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002390:	4629      	mov	r1, r5
 8002392:	4620      	mov	r0, r4
 8002394:	2201      	movs	r2, #1
 8002396:	f00f ffad 	bl	80122f4 <HAL_UART_Transmit_DMA>
 800239a:	b978      	cbnz	r0, 80023bc <UartCmd_Trigger_Dump+0x4c>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 800239c:	4620      	mov	r0, r4
 800239e:	f010 f9d3 	bl	8012748 <HAL_UART_GetState>
 80023a2:	2820      	cmp	r0, #32
 80023a4:	d1fa      	bne.n	800239c <UartCmd_Trigger_Dump+0x2c>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 80023a6:	4620      	mov	r0, r4
 80023a8:	220a      	movs	r2, #10
 80023aa:	4911      	ldr	r1, [pc, #68]	; (80023f0 <UartCmd_Trigger_Dump+0x80>)
 80023ac:	f00f fff2 	bl	8012394 <HAL_UART_Receive_DMA>
 80023b0:	b900      	cbnz	r0, 80023b4 <UartCmd_Trigger_Dump+0x44>
}
 80023b2:	bd38      	pop	{r3, r4, r5, pc}
 80023b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 80023b8:	f002 bc28 	b.w	8004c0c <Error_Handler>
      Error_Handler();
 80023bc:	f002 fc26 	bl	8004c0c <Error_Handler>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 80023c0:	4620      	mov	r0, r4
 80023c2:	f010 f9c1 	bl	8012748 <HAL_UART_GetState>
 80023c6:	2820      	cmp	r0, #32
 80023c8:	d1e8      	bne.n	800239c <UartCmd_Trigger_Dump+0x2c>
 80023ca:	e7ec      	b.n	80023a6 <UartCmd_Trigger_Dump+0x36>
    Test_Context_Ptr->UartContext.uart_host_requested_dump_number=*(uint16_t*)(data_buffer);
 80023cc:	880c      	ldrh	r4, [r1, #0]
    Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 80023ce:	2001      	movs	r0, #1
    memset(dump_output_buff, 0, sizeof(dump_output_buff));
 80023d0:	2280      	movs	r2, #128	; 0x80
 80023d2:	2100      	movs	r1, #0
    Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 80023d4:	f8c3 04a0 	str.w	r0, [r3, #1184]	; 0x4a0
    Test_Context_Ptr->DumpContext.dump_state = 1;
 80023d8:	f8c3 00b8 	str.w	r0, [r3, #184]	; 0xb8
    Test_Context_Ptr->UartContext.uart_host_requested_dump_number=*(uint16_t*)(data_buffer);
 80023dc:	f8c3 44a8 	str.w	r4, [r3, #1192]	; 0x4a8
    memset(dump_output_buff, 0, sizeof(dump_output_buff));
 80023e0:	4804      	ldr	r0, [pc, #16]	; (80023f4 <UartCmd_Trigger_Dump+0x84>)
}
 80023e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    memset(dump_output_buff, 0, sizeof(dump_output_buff));
 80023e6:	f022 bd29 	b.w	8024e3c <memset>
 80023ea:	bf00      	nop
 80023ec:	30000280 	.word	0x30000280
 80023f0:	300002a0 	.word	0x300002a0
 80023f4:	d0cb08a0 	.word	0xd0cb08a0

080023f8 <MemoryDumpInit>:
{
 80023f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  char dump_dir_path[64]=  "/dump_src_image_qvga";
 80023fc:	4dc8      	ldr	r5, [pc, #800]	; (8002720 <MemoryDumpInit+0x328>)
{
 80023fe:	b094      	sub	sp, #80	; 0x50
 8002400:	4604      	mov	r4, r0
  UTIL_LCD_DrawRect(200, 10, 400, 50, UTIL_LCD_COLOR_WHITE);
 8002402:	f04f 37ff 	mov.w	r7, #4294967295
  char dump_dir_path[64]=  "/dump_src_image_qvga";
 8002406:	ae04      	add	r6, sp, #16
 8002408:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800240a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800240c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002410:	222b      	movs	r2, #43	; 0x2b
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 8002412:	f8d4 5580 	ldr.w	r5, [r4, #1408]	; 0x580
  char dump_dir_path[64]=  "/dump_src_image_qvga";
 8002416:	f846 0b04 	str.w	r0, [r6], #4
 800241a:	f10d 0025 	add.w	r0, sp, #37	; 0x25
 800241e:	7031      	strb	r1, [r6, #0]
 8002420:	2100      	movs	r1, #0
 8002422:	f022 fd0b 	bl	8024e3c <memset>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8002426:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800242a:	f018 fba7 	bl	801ab7c <UTIL_LCD_Clear>
  UTIL_LCD_DrawRect(200, 10, 400, 50, UTIL_LCD_COLOR_WHITE);
 800242e:	2332      	movs	r3, #50	; 0x32
 8002430:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002434:	210a      	movs	r1, #10
 8002436:	20c8      	movs	r0, #200	; 0xc8
 8002438:	9700      	str	r7, [sp, #0]
 800243a:	f018 fd6f 	bl	801af1c <UTIL_LCD_DrawRect>
  UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"Memory dump sub-mode", CENTER_MODE);
 800243e:	f018 fb95 	bl	801ab6c <UTIL_LCD_GetFont>
 8002442:	2301      	movs	r3, #1
 8002444:	88c1      	ldrh	r1, [r0, #6]
 8002446:	2000      	movs	r0, #0
 8002448:	4ab6      	ldr	r2, [pc, #728]	; (8002724 <MemoryDumpInit+0x32c>)
 800244a:	f018 fc7f 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(5), (uint8_t *)"Press one of the key of the joystick", CENTER_MODE);
 800244e:	f018 fb8d 	bl	801ab6c <UTIL_LCD_GetFont>
 8002452:	88c1      	ldrh	r1, [r0, #6]
 8002454:	2301      	movs	r3, #1
 8002456:	4ab4      	ldr	r2, [pc, #720]	; (8002728 <MemoryDumpInit+0x330>)
 8002458:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800245c:	2000      	movs	r0, #0
 800245e:	f018 fc75 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(6), (uint8_t *)"to select the frame source", CENTER_MODE);
 8002462:	f018 fb83 	bl	801ab6c <UTIL_LCD_GetFont>
 8002466:	88c1      	ldrh	r1, [r0, #6]
 8002468:	2301      	movs	r3, #1
 800246a:	4ab0      	ldr	r2, [pc, #704]	; (800272c <MemoryDumpInit+0x334>)
 800246c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8002470:	2000      	movs	r0, #0
 8002472:	4099      	lsls	r1, r3
 8002474:	f018 fc6a 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DrawLine(pt_center.x - pt_offset, pt_center.y, pt_center.x, pt_center.y - pt_offset, UTIL_LCD_COLOR_WHITE);
 8002478:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800247c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002480:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002484:	4608      	mov	r0, r1
 8002486:	9700      	str	r7, [sp, #0]
 8002488:	f018 fcb0 	bl	801adec <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x, pt_center.y - pt_offset, pt_center.x + pt_offset, pt_center.y, UTIL_LCD_COLOR_WHITE);
 800248c:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8002490:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8002494:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002498:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800249c:	9700      	str	r7, [sp, #0]
 800249e:	f018 fca5 	bl	801adec <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x + pt_offset, pt_center.y, pt_center.x, pt_center.y + pt_offset, UTIL_LCD_COLOR_WHITE);
 80024a2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80024a6:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80024aa:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 80024ae:	461a      	mov	r2, r3
 80024b0:	9700      	str	r7, [sp, #0]
 80024b2:	f018 fc9b 	bl	801adec <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x, pt_center.y + pt_offset, pt_center.x - pt_offset, pt_center.y, UTIL_LCD_COLOR_WHITE);
 80024b6:	f44f 73af 	mov.w	r3, #350	; 0x15e
 80024ba:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80024be:	9700      	str	r7, [sp, #0]
 80024c0:	461a      	mov	r2, r3
 80024c2:	4608      	mov	r0, r1
 80024c4:	f018 fc92 	bl	801adec <UTIL_LCD_DrawLine>
  UTIL_LCD_DisplayStringAt(0, pt_center.y - pt_offset - LINE(2), (uint8_t*)appli_names[0], CENTER_MODE);//UP
 80024c8:	f018 fb50 	bl	801ab6c <UTIL_LCD_GetFont>
 80024cc:	2301      	movs	r3, #1
 80024ce:	88c1      	ldrh	r1, [r0, #6]
 80024d0:	2000      	movs	r0, #0
 80024d2:	4a97      	ldr	r2, [pc, #604]	; (8002730 <MemoryDumpInit+0x338>)
 80024d4:	4099      	lsls	r1, r3
 80024d6:	f5c1 7196 	rsb	r1, r1, #300	; 0x12c
 80024da:	f018 fc37 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(pt_center.x + pt_offset + 10, pt_center.y - LINE(1) / 2, (uint8_t*)appli_names[1], LEFT_MODE);//RIGHT
 80024de:	f018 fb45 	bl	801ab6c <UTIL_LCD_GetFont>
 80024e2:	88c1      	ldrh	r1, [r0, #6]
 80024e4:	2303      	movs	r3, #3
 80024e6:	4a93      	ldr	r2, [pc, #588]	; (8002734 <MemoryDumpInit+0x33c>)
 80024e8:	1049      	asrs	r1, r1, #1
 80024ea:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
 80024ee:	f5c1 71af 	rsb	r1, r1, #350	; 0x15e
 80024f2:	f018 fc2b 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(200, pt_center.y - LINE(1) / 2, (uint8_t*)appli_names[2], LEFT_MODE);//LEFT
 80024f6:	f018 fb39 	bl	801ab6c <UTIL_LCD_GetFont>
 80024fa:	88c1      	ldrh	r1, [r0, #6]
 80024fc:	2303      	movs	r3, #3
 80024fe:	4a8e      	ldr	r2, [pc, #568]	; (8002738 <MemoryDumpInit+0x340>)
 8002500:	1049      	asrs	r1, r1, #1
 8002502:	20c8      	movs	r0, #200	; 0xc8
 8002504:	f5c1 71af 	rsb	r1, r1, #350	; 0x15e
 8002508:	f018 fc20 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
  DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 800250c:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800250e:	f7ff f9af 	bl	8001870 <DISPLAY_Refresh>
  if(Test_Context_Ptr->UartContext.uart_cmd_ongoing)
 8002512:	f8d4 34a0 	ldr.w	r3, [r4, #1184]	; 0x4a0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d06b      	beq.n	80025f2 <MemoryDumpInit+0x1fa>
    switch (Test_Context_Ptr->UartContext.uart_host_requested_dump_submode)
 800251a:	f894 34a5 	ldrb.w	r3, [r4, #1189]	; 0x4a5
 800251e:	2b02      	cmp	r3, #2
 8002520:	f000 8087 	beq.w	8002632 <MemoryDumpInit+0x23a>
 8002524:	2b03      	cmp	r3, #3
 8002526:	d05e      	beq.n	80025e6 <MemoryDumpInit+0x1ee>
 8002528:	2b01      	cmp	r3, #1
 800252a:	d05c      	beq.n	80025e6 <MemoryDumpInit+0x1ee>
    if(Test_Context_Ptr->UartContext.uart_host_nonreg_run==1)
 800252c:	f8d4 34b8 	ldr.w	r3, [r4, #1208]	; 0x4b8
 8002530:	2b01      	cmp	r3, #1
 8002532:	d071      	beq.n	8002618 <MemoryDumpInit+0x220>
      Test_Context_Ptr->UartContext.uart_cmd_ongoing = 0;
 8002534:	2300      	movs	r3, #0
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002536:	220a      	movs	r2, #10
 8002538:	4980      	ldr	r1, [pc, #512]	; (800273c <MemoryDumpInit+0x344>)
 800253a:	f204 40bc 	addw	r0, r4, #1212	; 0x4bc
      Test_Context_Ptr->UartContext.uart_cmd_ongoing = 0;
 800253e:	f8c4 34a0 	str.w	r3, [r4, #1184]	; 0x4a0
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002542:	f00f ff27 	bl	8012394 <HAL_UART_Receive_DMA>
 8002546:	2800      	cmp	r0, #0
 8002548:	d170      	bne.n	800262c <MemoryDumpInit+0x234>
  if (BSP_SD_Init(0) != BSP_ERROR_NONE)
 800254a:	2000      	movs	r0, #0
 800254c:	f008 fd06 	bl	800af5c <BSP_SD_Init>
 8002550:	b188      	cbz	r0, 8002576 <MemoryDumpInit+0x17e>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"Error. SD Card not detected", CENTER_MODE);
 8002552:	f018 fb0b 	bl	801ab6c <UTIL_LCD_GetFont>
 8002556:	88c1      	ldrh	r1, [r0, #6]
 8002558:	2301      	movs	r3, #1
 800255a:	4a79      	ldr	r2, [pc, #484]	; (8002740 <MemoryDumpInit+0x348>)
 800255c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8002560:	2000      	movs	r0, #0
 8002562:	4099      	lsls	r1, r3
 8002564:	f018 fbf2 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8002568:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800256a:	f7ff f981 	bl	8001870 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 800256e:	2002      	movs	r0, #2
 8002570:	f006 fda2 	bl	80090b8 <BSP_LED_On>
    while (1);
 8002574:	e7fe      	b.n	8002574 <MemoryDumpInit+0x17c>
  if (FATFS_LinkDriver(&SD_Driver, SDPath) != 0)
 8002576:	4873      	ldr	r0, [pc, #460]	; (8002744 <MemoryDumpInit+0x34c>)
 8002578:	a903      	add	r1, sp, #12
 800257a:	f016 f905 	bl	8018788 <FATFS_LinkDriver>
 800257e:	4602      	mov	r2, r0
 8002580:	b118      	cbz	r0, 800258a <MemoryDumpInit+0x192>
    BSP_LED_On(LED_RED);
 8002582:	2002      	movs	r0, #2
 8002584:	f006 fd98 	bl	80090b8 <BSP_LED_On>
    while (1);
 8002588:	e7fe      	b.n	8002588 <MemoryDumpInit+0x190>
  if (f_mount(&SDFatFS, (TCHAR const *)SDPath, 0) != FR_OK)
 800258a:	a903      	add	r1, sp, #12
 800258c:	486e      	ldr	r0, [pc, #440]	; (8002748 <MemoryDumpInit+0x350>)
 800258e:	f014 fb15 	bl	8016bbc <f_mount>
 8002592:	4607      	mov	r7, r0
 8002594:	2800      	cmp	r0, #0
 8002596:	d165      	bne.n	8002664 <MemoryDumpInit+0x26c>
  Test_Context_Ptr->RngHandle.Instance = RNG;
 8002598:	4b6c      	ldr	r3, [pc, #432]	; (800274c <MemoryDumpInit+0x354>)
  HAL_RNG_DeInit(&Test_Context_Ptr->RngHandle);
 800259a:	f204 566c 	addw	r6, r4, #1388	; 0x56c
  sprintf(Test_Context_Ptr->DumpContext.dump_folder_name, "/Memory_Dump");
 800259e:	f104 0822 	add.w	r8, r4, #34	; 0x22
  Test_Context_Ptr->RngHandle.Instance = RNG;
 80025a2:	f8c4 356c 	str.w	r3, [r4, #1388]	; 0x56c
  HAL_RNG_DeInit(&Test_Context_Ptr->RngHandle);
 80025a6:	4630      	mov	r0, r6
 80025a8:	f00e fcf6 	bl	8010f98 <HAL_RNG_DeInit>
  HAL_RNG_Init(&Test_Context_Ptr->RngHandle);
 80025ac:	4630      	mov	r0, r6
 80025ae:	f00e fcb7 	bl	8010f20 <HAL_RNG_Init>
  sprintf(Test_Context_Ptr->DumpContext.dump_folder_name, "/Memory_Dump");
 80025b2:	4b67      	ldr	r3, [pc, #412]	; (8002750 <MemoryDumpInit+0x358>)
 80025b4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	f8c4 0022 	str.w	r0, [r4, #34]	; 0x22
  res = f_mkdir(path);
 80025bc:	4640      	mov	r0, r8
  sprintf(Test_Context_Ptr->DumpContext.dump_folder_name, "/Memory_Dump");
 80025be:	f8c4 1026 	str.w	r1, [r4, #38]	; 0x26
 80025c2:	f8c4 202a 	str.w	r2, [r4, #42]	; 0x2a
 80025c6:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  res = f_mkdir(path);
 80025ca:	f015 fc37 	bl	8017e3c <f_mkdir>
  if ((res != FR_OK) && (res != FR_EXIST))
 80025ce:	f010 06f7 	ands.w	r6, r0, #247	; 0xf7
 80025d2:	d14b      	bne.n	800266c <MemoryDumpInit+0x274>
  if(Test_Context_Ptr->DumpContext.Dump_FrameSource==SDCARD_FILE)
 80025d4:	7923      	ldrb	r3, [r4, #4]
 80025d6:	2b03      	cmp	r3, #3
 80025d8:	d065      	beq.n	80026a6 <MemoryDumpInit+0x2ae>
    BSP_SD_DeInit(0);
 80025da:	4630      	mov	r0, r6
 80025dc:	f008 fc80 	bl	800aee0 <BSP_SD_DeInit>
}
 80025e0:	b014      	add	sp, #80	; 0x50
 80025e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      Test_Context_Ptr->DumpContext.Dump_FrameSource=SDCARD_FILE;
 80025e6:	7123      	strb	r3, [r4, #4]
    if(Test_Context_Ptr->UartContext.uart_host_nonreg_run==1)
 80025e8:	f8d4 34b8 	ldr.w	r3, [r4, #1208]	; 0x4b8
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d1a1      	bne.n	8002534 <MemoryDumpInit+0x13c>
 80025f0:	e012      	b.n	8002618 <MemoryDumpInit+0x220>
    HAL_Delay(200);
 80025f2:	20c8      	movs	r0, #200	; 0xc8
 80025f4:	f008 fe00 	bl	800b1f8 <HAL_Delay>
      joy_state = (JOYPin_TypeDef) BSP_JOY_GetState(JOY1, 0);
 80025f8:	2100      	movs	r1, #0
 80025fa:	4608      	mov	r0, r1
 80025fc:	f006 fe7a 	bl	80092f4 <BSP_JOY_GetState>
 8002600:	b2c3      	uxtb	r3, r0
    while (joy_state == JOY_NONE || joy_state == JOY_DOWN || joy_state == JOY_SEL)
 8002602:	2b02      	cmp	r3, #2
 8002604:	d9f8      	bls.n	80025f8 <MemoryDumpInit+0x200>
    switch (joy_state)
 8002606:	2b08      	cmp	r3, #8
 8002608:	d023      	beq.n	8002652 <MemoryDumpInit+0x25a>
 800260a:	2b10      	cmp	r3, #16
 800260c:	d01e      	beq.n	800264c <MemoryDumpInit+0x254>
 800260e:	2b04      	cmp	r3, #4
 8002610:	d19b      	bne.n	800254a <MemoryDumpInit+0x152>
      Test_Context_Ptr->DumpContext.Dump_FrameSource=SDCARD_FILE;
 8002612:	2303      	movs	r3, #3
 8002614:	7123      	strb	r3, [r4, #4]
   break;
 8002616:	e798      	b.n	800254a <MemoryDumpInit+0x152>
      Test_Context_Ptr->UartContext.uart_host_nonreg_run=0;
 8002618:	2100      	movs	r1, #0
      memset(dump_output_buff, 0, sizeof(dump_output_buff));
 800261a:	2280      	movs	r2, #128	; 0x80
      Test_Context_Ptr->DumpContext.dump_state = 1;
 800261c:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
      Test_Context_Ptr->UartContext.uart_host_nonreg_run=0;
 8002620:	f8c4 14b8 	str.w	r1, [r4, #1208]	; 0x4b8
      memset(dump_output_buff, 0, sizeof(dump_output_buff));
 8002624:	484b      	ldr	r0, [pc, #300]	; (8002754 <MemoryDumpInit+0x35c>)
 8002626:	f022 fc09 	bl	8024e3c <memset>
 800262a:	e78e      	b.n	800254a <MemoryDumpInit+0x152>
    Error_Handler();
 800262c:	f002 faee 	bl	8004c0c <Error_Handler>
 8002630:	e78b      	b.n	800254a <MemoryDumpInit+0x152>
      Test_Context_Ptr->DumpContext.Dump_FrameSource=CAMERA_COLORBAR;
 8002632:	7123      	strb	r3, [r4, #4]
      CAMERA_Init(App_Cxt_Ptr->Camera_ContextPtr);
 8002634:	69e8      	ldr	r0, [r5, #28]
 8002636:	f7fe fe6b 	bl	8001310 <CAMERA_Init>
      CAMERA_Enable_TestBar_Mode(App_Cxt_Ptr->Camera_ContextPtr);
 800263a:	69e8      	ldr	r0, [r5, #28]
 800263c:	f7fe ff54 	bl	80014e8 <CAMERA_Enable_TestBar_Mode>
    if(Test_Context_Ptr->UartContext.uart_host_nonreg_run==1)
 8002640:	f8d4 34b8 	ldr.w	r3, [r4, #1208]	; 0x4b8
 8002644:	2b01      	cmp	r3, #1
 8002646:	f47f af75 	bne.w	8002534 <MemoryDumpInit+0x13c>
 800264a:	e7e5      	b.n	8002618 <MemoryDumpInit+0x220>
      Test_Context_Ptr->DumpContext.Dump_FrameSource=CAMERA_LIVE;
 800264c:	2301      	movs	r3, #1
 800264e:	7123      	strb	r3, [r4, #4]
      break;
 8002650:	e77b      	b.n	800254a <MemoryDumpInit+0x152>
      Test_Context_Ptr->DumpContext.Dump_FrameSource=CAMERA_COLORBAR;
 8002652:	2302      	movs	r3, #2
 8002654:	7123      	strb	r3, [r4, #4]
      CAMERA_Init(App_Cxt_Ptr->Camera_ContextPtr);
 8002656:	69e8      	ldr	r0, [r5, #28]
 8002658:	f7fe fe5a 	bl	8001310 <CAMERA_Init>
      CAMERA_Enable_TestBar_Mode(App_Cxt_Ptr->Camera_ContextPtr);
 800265c:	69e8      	ldr	r0, [r5, #28]
 800265e:	f7fe ff43 	bl	80014e8 <CAMERA_Enable_TestBar_Mode>
      break;
 8002662:	e772      	b.n	800254a <MemoryDumpInit+0x152>
    BSP_LED_On(LED_RED);
 8002664:	2002      	movs	r0, #2
 8002666:	f006 fd27 	bl	80090b8 <BSP_LED_On>
    while (1);
 800266a:	e7fe      	b.n	800266a <MemoryDumpInit+0x272>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *) "Error. Could not create directory", CENTER_MODE);
 800266c:	f018 fa7e 	bl	801ab6c <UTIL_LCD_GetFont>
 8002670:	88c1      	ldrh	r1, [r0, #6]
 8002672:	2301      	movs	r3, #1
 8002674:	4a38      	ldr	r2, [pc, #224]	; (8002758 <MemoryDumpInit+0x360>)
 8002676:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800267a:	4638      	mov	r0, r7
 800267c:	4099      	lsls	r1, r3
 800267e:	f018 fb65 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(15), (uint8_t *) path, CENTER_MODE);
 8002682:	f018 fa73 	bl	801ab6c <UTIL_LCD_GetFont>
 8002686:	4603      	mov	r3, r0
 8002688:	4642      	mov	r2, r8
 800268a:	4638      	mov	r0, r7
 800268c:	88d9      	ldrh	r1, [r3, #6]
 800268e:	2301      	movs	r3, #1
 8002690:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8002694:	f018 fb5a 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(app->Display_ContextPtr);
 8002698:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800269a:	f7ff f8e9 	bl	8001870 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 800269e:	2002      	movs	r0, #2
 80026a0:	f006 fd0a 	bl	80090b8 <BSP_LED_On>
    while (1);
 80026a4:	e7fe      	b.n	80026a4 <MemoryDumpInit+0x2ac>
  res = f_stat(path, &fno);
 80026a6:	492d      	ldr	r1, [pc, #180]	; (800275c <MemoryDumpInit+0x364>)
 80026a8:	a804      	add	r0, sp, #16
 80026aa:	f015 fb97 	bl	8017ddc <f_stat>
  if (res != FR_OK)
 80026ae:	4604      	mov	r4, r0
 80026b0:	b9c8      	cbnz	r0, 80026e6 <MemoryDumpInit+0x2ee>
    nbr_dir = count_dir(dump_dir_path, App_Cxt_Ptr);
 80026b2:	a804      	add	r0, sp, #16
 80026b4:	f105 0124 	add.w	r1, r5, #36	; 0x24
 80026b8:	f7ff fa28 	bl	8001b0c <count_dir.isra.0>
    if (nbr_dir != 0)
 80026bc:	2800      	cmp	r0, #0
 80026be:	d08f      	beq.n	80025e0 <MemoryDumpInit+0x1e8>
      UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"Error. Number of found directories incorrect", CENTER_MODE);
 80026c0:	f018 fa54 	bl	801ab6c <UTIL_LCD_GetFont>
 80026c4:	4602      	mov	r2, r0
 80026c6:	2301      	movs	r3, #1
 80026c8:	4620      	mov	r0, r4
 80026ca:	88d1      	ldrh	r1, [r2, #6]
 80026cc:	4a24      	ldr	r2, [pc, #144]	; (8002760 <MemoryDumpInit+0x368>)
 80026ce:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80026d2:	4099      	lsls	r1, r3
 80026d4:	f018 fb3a 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
      DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 80026d8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80026da:	f7ff f8c9 	bl	8001870 <DISPLAY_Refresh>
      BSP_LED_On(LED_RED);
 80026de:	2002      	movs	r0, #2
 80026e0:	f006 fcea 	bl	80090b8 <BSP_LED_On>
      while (1)
 80026e4:	e7fe      	b.n	80026e4 <MemoryDumpInit+0x2ec>
      UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *) "Error. Could not find directory", CENTER_MODE);
 80026e6:	f018 fa41 	bl	801ab6c <UTIL_LCD_GetFont>
 80026ea:	88c1      	ldrh	r1, [r0, #6]
 80026ec:	2301      	movs	r3, #1
 80026ee:	4a1d      	ldr	r2, [pc, #116]	; (8002764 <MemoryDumpInit+0x36c>)
 80026f0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80026f4:	4630      	mov	r0, r6
 80026f6:	4099      	lsls	r1, r3
 80026f8:	f018 fb28 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
      UTIL_LCD_DisplayStringAt(0, LINE(15), (uint8_t *) path, CENTER_MODE);
 80026fc:	f018 fa36 	bl	801ab6c <UTIL_LCD_GetFont>
 8002700:	4603      	mov	r3, r0
 8002702:	aa04      	add	r2, sp, #16
 8002704:	4630      	mov	r0, r6
 8002706:	88d9      	ldrh	r1, [r3, #6]
 8002708:	2301      	movs	r3, #1
 800270a:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 800270e:	f018 fb1d 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
      DISPLAY_Refresh(app->Display_ContextPtr);
 8002712:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8002714:	f7ff f8ac 	bl	8001870 <DISPLAY_Refresh>
      BSP_LED_On(LED_RED);
 8002718:	2002      	movs	r0, #2
 800271a:	f006 fccd 	bl	80090b8 <BSP_LED_On>
      while (1);
 800271e:	e7fe      	b.n	800271e <MemoryDumpInit+0x326>
 8002720:	08028260 	.word	0x08028260
 8002724:	080284dc 	.word	0x080284dc
 8002728:	080284f4 	.word	0x080284f4
 800272c:	0802851c 	.word	0x0802851c
 8002730:	08028448 	.word	0x08028448
 8002734:	08028454 	.word	0x08028454
 8002738:	08028464 	.word	0x08028464
 800273c:	300002a0 	.word	0x300002a0
 8002740:	08028538 	.word	0x08028538
 8002744:	080970b4 	.word	0x080970b4
 8002748:	20007e40 	.word	0x20007e40
 800274c:	48021800 	.word	0x48021800
 8002750:	08028554 	.word	0x08028554
 8002754:	d0cb08a0 	.word	0xd0cb08a0
 8002758:	08028564 	.word	0x08028564
 800275c:	20008074 	.word	0x20008074
 8002760:	080285a8 	.word	0x080285a8
 8002764:	08028588 	.word	0x08028588

08002768 <OnBoardValidInit>:
{
 8002768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800276c:	4605      	mov	r5, r0
 800276e:	b093      	sub	sp, #76	; 0x4c
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 8002770:	f8d5 6580 	ldr.w	r6, [r5, #1408]	; 0x580
  char msg[64];
  
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
  static const uint16_t margin = 15; /* margin for text in pixels*/
  
  sprintf(msg, "%s", App_Cxt_Ptr->Test_ContextPtr->ValidationContext.class_path);
 8002774:	a802      	add	r0, sp, #8
 8002776:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8002778:	f501 7170 	add.w	r1, r1, #960	; 0x3c0
 800277c:	f023 f8bf 	bl	80258fe <strcpy>

  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8002780:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002784:	f018 f9fa 	bl	801ab7c <UTIL_LCD_Clear>
  UTIL_LCD_DrawRect(200, 10, 400, 50, UTIL_LCD_COLOR_WHITE);
 8002788:	f04f 31ff 	mov.w	r1, #4294967295
 800278c:	2332      	movs	r3, #50	; 0x32
 800278e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002792:	9100      	str	r1, [sp, #0]
 8002794:	20c8      	movs	r0, #200	; 0xc8
 8002796:	210a      	movs	r1, #10
 8002798:	f018 fbc0 	bl	801af1c <UTIL_LCD_DrawRect>
  UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"Onboard Validation", CENTER_MODE);
 800279c:	f018 f9e6 	bl	801ab6c <UTIL_LCD_GetFont>
 80027a0:	2301      	movs	r3, #1
 80027a2:	88c1      	ldrh	r1, [r0, #6]
 80027a4:	2000      	movs	r0, #0
 80027a6:	4a9b      	ldr	r2, [pc, #620]	; (8002a14 <OnBoardValidInit+0x2ac>)
 80027a8:	f018 fad0 	bl	801ad4c <UTIL_LCD_DisplayStringAt>

  UTIL_LCD_DisplayStringAt(margin, LINE(4), (uint8_t *)"Onboard validation will look for a directory", LEFT_MODE);
 80027ac:	f018 f9de 	bl	801ab6c <UTIL_LCD_GetFont>
 80027b0:	88c1      	ldrh	r1, [r0, #6]
 80027b2:	2303      	movs	r3, #3
 80027b4:	4a98      	ldr	r2, [pc, #608]	; (8002a18 <OnBoardValidInit+0x2b0>)
 80027b6:	0089      	lsls	r1, r1, #2
 80027b8:	200f      	movs	r0, #15
 80027ba:	f018 fac7 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(margin, LINE(5), (uint8_t *)msg, LEFT_MODE);
 80027be:	f018 f9d5 	bl	801ab6c <UTIL_LCD_GetFont>
 80027c2:	88c1      	ldrh	r1, [r0, #6]
 80027c4:	aa02      	add	r2, sp, #8
 80027c6:	2303      	movs	r3, #3
 80027c8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80027cc:	200f      	movs	r0, #15
 80027ce:	f018 fabd 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(margin, LINE(6), (uint8_t *)"at the root of the SDCard.", LEFT_MODE);
 80027d2:	f018 f9cb 	bl	801ab6c <UTIL_LCD_GetFont>
 80027d6:	88c1      	ldrh	r1, [r0, #6]
 80027d8:	2303      	movs	r3, #3
 80027da:	4a90      	ldr	r2, [pc, #576]	; (8002a1c <OnBoardValidInit+0x2b4>)
 80027dc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80027e0:	200f      	movs	r0, #15
 80027e2:	0049      	lsls	r1, r1, #1
 80027e4:	f018 fab2 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(margin, LINE(7), (uint8_t *)"This directory should contain one directory", LEFT_MODE);
 80027e8:	f018 f9c0 	bl	801ab6c <UTIL_LCD_GetFont>
 80027ec:	88c1      	ldrh	r1, [r0, #6]
 80027ee:	2303      	movs	r3, #3
 80027f0:	4a8b      	ldr	r2, [pc, #556]	; (8002a20 <OnBoardValidInit+0x2b8>)
 80027f2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80027f6:	200f      	movs	r0, #15
 80027f8:	f018 faa8 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(margin, LINE(8), (uint8_t *)"per class containing images in BPM 16 bpp", LEFT_MODE);
 80027fc:	f018 f9b6 	bl	801ab6c <UTIL_LCD_GetFont>
 8002800:	2303      	movs	r3, #3
 8002802:	88c1      	ldrh	r1, [r0, #6]
 8002804:	200f      	movs	r0, #15
 8002806:	4a87      	ldr	r2, [pc, #540]	; (8002a24 <OnBoardValidInit+0x2bc>)
 8002808:	4099      	lsls	r1, r3
 800280a:	f018 fa9f 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(margin, LINE(9), (uint8_t *)"format.", LEFT_MODE);
 800280e:	f018 f9ad 	bl	801ab6c <UTIL_LCD_GetFont>
 8002812:	88c1      	ldrh	r1, [r0, #6]
 8002814:	2303      	movs	r3, #3
 8002816:	4a84      	ldr	r2, [pc, #528]	; (8002a28 <OnBoardValidInit+0x2c0>)
 8002818:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800281c:	200f      	movs	r0, #15
 800281e:	f018 fa95 	bl	801ad4c <UTIL_LCD_DisplayStringAt>

  UTIL_LCD_DisplayStringAt(margin, LINE(12), (uint8_t *)"Please insert the SDCard now,", LEFT_MODE);
 8002822:	f018 f9a3 	bl	801ab6c <UTIL_LCD_GetFont>
 8002826:	88c1      	ldrh	r1, [r0, #6]
 8002828:	2303      	movs	r3, #3
 800282a:	4a80      	ldr	r2, [pc, #512]	; (8002a2c <OnBoardValidInit+0x2c4>)
 800282c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8002830:	200f      	movs	r0, #15
 8002832:	0089      	lsls	r1, r1, #2
 8002834:	f018 fa8a 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(margin, LINE(13), (uint8_t *)"then press the WAKE-UP button to get started", LEFT_MODE);
 8002838:	f018 f998 	bl	801ab6c <UTIL_LCD_GetFont>
 800283c:	88c1      	ldrh	r1, [r0, #6]
 800283e:	2303      	movs	r3, #3
 8002840:	4a7b      	ldr	r2, [pc, #492]	; (8002a30 <OnBoardValidInit+0x2c8>)
 8002842:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8002846:	200f      	movs	r0, #15
 8002848:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800284c:	f018 fa7e 	bl	801ad4c <UTIL_LCD_DisplayStringAt>

  DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8002850:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8002852:	f7ff f80d 	bl	8001870 <DISPLAY_Refresh>

  /* Wait for button input */
  while ((Test_Context_Ptr->UartContext.uart_cmd_ongoing==0) && (BSP_PB_GetState(BUTTON_WAKEUP) == RESET))
 8002856:	e002      	b.n	800285e <OnBoardValidInit+0xf6>
 8002858:	f006 fca8 	bl	80091ac <BSP_PB_GetState>
 800285c:	b918      	cbnz	r0, 8002866 <OnBoardValidInit+0xfe>
 800285e:	f8d5 04a0 	ldr.w	r0, [r5, #1184]	; 0x4a0
 8002862:	2800      	cmp	r0, #0
 8002864:	d0f8      	beq.n	8002858 <OnBoardValidInit+0xf0>
  BSP_CAMERA_DeInit(0);
 8002866:	2000      	movs	r0, #0
 8002868:	f007 f9f6 	bl	8009c58 <BSP_CAMERA_DeInit>
  sd_error = BSP_SD_Init(0);
 800286c:	2000      	movs	r0, #0
 800286e:	f008 fb75 	bl	800af5c <BSP_SD_Init>
  if (sd_error != BSP_ERROR_NONE)
 8002872:	f010 0fff 	tst.w	r0, #255	; 0xff
 8002876:	d011      	beq.n	800289c <OnBoardValidInit+0x134>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"Error. SD Card not detected", CENTER_MODE);
 8002878:	f018 f978 	bl	801ab6c <UTIL_LCD_GetFont>
 800287c:	88c1      	ldrh	r1, [r0, #6]
 800287e:	2301      	movs	r3, #1
 8002880:	4a6c      	ldr	r2, [pc, #432]	; (8002a34 <OnBoardValidInit+0x2cc>)
 8002882:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8002886:	2000      	movs	r0, #0
 8002888:	4099      	lsls	r1, r3
 800288a:	f018 fa5f 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 800288e:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8002890:	f7fe ffee 	bl	8001870 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 8002894:	2002      	movs	r0, #2
 8002896:	f006 fc0f 	bl	80090b8 <BSP_LED_On>
    while (1)
 800289a:	e7fe      	b.n	800289a <OnBoardValidInit+0x132>
  if (FATFS_LinkDriver(&SD_Driver, SDPath) != 0)
 800289c:	a902      	add	r1, sp, #8
 800289e:	4866      	ldr	r0, [pc, #408]	; (8002a38 <OnBoardValidInit+0x2d0>)
 80028a0:	f015 ff72 	bl	8018788 <FATFS_LinkDriver>
 80028a4:	4602      	mov	r2, r0
 80028a6:	b118      	cbz	r0, 80028b0 <OnBoardValidInit+0x148>
    BSP_LED_On(LED_RED);
 80028a8:	2002      	movs	r0, #2
 80028aa:	f006 fc05 	bl	80090b8 <BSP_LED_On>
    while (1);
 80028ae:	e7fe      	b.n	80028ae <OnBoardValidInit+0x146>
  if (f_mount(&SDFatFS, (TCHAR const *)SDPath, 0) != FR_OK)
 80028b0:	a902      	add	r1, sp, #8
 80028b2:	4862      	ldr	r0, [pc, #392]	; (8002a3c <OnBoardValidInit+0x2d4>)
 80028b4:	f014 f982 	bl	8016bbc <f_mount>
 80028b8:	4607      	mov	r7, r0
 80028ba:	bb08      	cbnz	r0, 8002900 <OnBoardValidInit+0x198>
  strcpy(valid_dir_path, Test_Context_Ptr->ValidationContext.class_path);
 80028bc:	f505 7a70 	add.w	sl, r5, #960	; 0x3c0
 80028c0:	f106 0b24 	add.w	fp, r6, #36	; 0x24
 80028c4:	a802      	add	r0, sp, #8
 80028c6:	4651      	mov	r1, sl
 80028c8:	f023 f819 	bl	80258fe <strcpy>
  nbr_dir = count_dir(valid_dir_path, App_Cxt_Ptr);
 80028cc:	4659      	mov	r1, fp
 80028ce:	a802      	add	r0, sp, #8
 80028d0:	f7ff f91c 	bl	8001b0c <count_dir.isra.0>
  if (nbr_dir != AI_NETWORK_OUT_1_SIZE)
 80028d4:	2802      	cmp	r0, #2
  nbr_dir = count_dir(valid_dir_path, App_Cxt_Ptr);
 80028d6:	4680      	mov	r8, r0
  if (nbr_dir != AI_NETWORK_OUT_1_SIZE)
 80028d8:	d016      	beq.n	8002908 <OnBoardValidInit+0x1a0>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"Error. Number of found directories incorrect", CENTER_MODE);
 80028da:	f018 f947 	bl	801ab6c <UTIL_LCD_GetFont>
 80028de:	4602      	mov	r2, r0
 80028e0:	2301      	movs	r3, #1
 80028e2:	4638      	mov	r0, r7
 80028e4:	88d1      	ldrh	r1, [r2, #6]
 80028e6:	4a56      	ldr	r2, [pc, #344]	; (8002a40 <OnBoardValidInit+0x2d8>)
 80028e8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80028ec:	4099      	lsls	r1, r3
 80028ee:	f018 fa2d 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 80028f2:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80028f4:	f7fe ffbc 	bl	8001870 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 80028f8:	2002      	movs	r0, #2
 80028fa:	f006 fbdd 	bl	80090b8 <BSP_LED_On>
    while (1)
 80028fe:	e7fe      	b.n	80028fe <OnBoardValidInit+0x196>
    BSP_LED_On(LED_RED);
 8002900:	2002      	movs	r0, #2
 8002902:	f006 fbd9 	bl	80090b8 <BSP_LED_On>
    while (1);
 8002906:	e7fe      	b.n	8002906 <OnBoardValidInit+0x19e>
  BSP_LED_On(LED_GREEN);
 8002908:	4638      	mov	r0, r7
  sprintf(tmp_msg, "List of missclassified files:\n");
 800290a:	4c4e      	ldr	r4, [pc, #312]	; (8002a44 <OnBoardValidInit+0x2dc>)
  BSP_LED_On(LED_GREEN);
 800290c:	f006 fbd4 	bl	80090b8 <BSP_LED_On>
  sprintf(tmp_msg, "List of missclassified files:\n");
 8002910:	f8df c144 	ldr.w	ip, [pc, #324]	; 8002a58 <OnBoardValidInit+0x2f0>
  DIR *dir = &Test_Context_Ptr->ValidationContext.dataset_dir;
 8002914:	f505 7992 	add.w	r9, r5, #292	; 0x124
  sprintf(tmp_msg, "List of missclassified files:\n");
 8002918:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800291c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800291e:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8002922:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8002926:	c407      	stmia	r4!, {r0, r1, r2}
 8002928:	f824 3b02 	strh.w	r3, [r4], #2
 800292c:	4621      	mov	r1, r4
  write_txt("missclassified.txt", tmp_msg, FA_WRITE | FA_CREATE_ALWAYS, App_Cxt_Ptr);
 800292e:	465b      	mov	r3, fp
 8002930:	220a      	movs	r2, #10
  sprintf(tmp_msg, "List of missclassified files:\n");
 8002932:	f801 c91e 	strb.w	ip, [r1], #-30
  write_txt("missclassified.txt", tmp_msg, FA_WRITE | FA_CREATE_ALWAYS, App_Cxt_Ptr);
 8002936:	4844      	ldr	r0, [pc, #272]	; (8002a48 <OnBoardValidInit+0x2e0>)
 8002938:	f7ff f92c 	bl	8001b94 <write_txt.isra.0>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 800293c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002940:	f018 f91c 	bl	801ab7c <UTIL_LCD_Clear>
  UTIL_LCD_SetFont(&Font20);
 8002944:	4841      	ldr	r0, [pc, #260]	; (8002a4c <OnBoardValidInit+0x2e4>)
 8002946:	f018 f909 	bl	801ab5c <UTIL_LCD_SetFont>
  sprintf(tmp_msg, "Found %d classes", (unsigned int)nbr_dir);
 800294a:	4642      	mov	r2, r8
 800294c:	4940      	ldr	r1, [pc, #256]	; (8002a50 <OnBoardValidInit+0x2e8>)
 800294e:	f1a4 001e 	sub.w	r0, r4, #30
 8002952:	f022 ffab 	bl	80258ac <siprintf>
  UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)tmp_msg, CENTER_MODE);
 8002956:	f018 f909 	bl	801ab6c <UTIL_LCD_GetFont>
 800295a:	4603      	mov	r3, r0
 800295c:	f1a4 021e 	sub.w	r2, r4, #30
 8002960:	4638      	mov	r0, r7
 8002962:	88d9      	ldrh	r1, [r3, #6]
 8002964:	2301      	movs	r3, #1
 8002966:	f018 f9f1 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
  f_opendir(dir, valid_dir_path);
 800296a:	a902      	add	r1, sp, #8
 800296c:	4648      	mov	r0, r9
 800296e:	f015 f8f3 	bl	8017b58 <f_opendir>
  res = f_readdir(dir, &Test_Context_Ptr->ValidationContext.fno);
 8002972:	4648      	mov	r0, r9
 8002974:	f505 71ac 	add.w	r1, r5, #344	; 0x158
 8002978:	f015 f9f4 	bl	8017d64 <f_readdir>
  if (res != FR_OK)
 800297c:	4607      	mov	r7, r0
 800297e:	bb60      	cbnz	r0, 80029da <OnBoardValidInit+0x272>
  Test_Context_Ptr->ValidationContext.class_index = FindClassIndexFromString(Test_Context_Ptr->ValidationContext.fno.fname);
 8002980:	f505 79b7 	add.w	r9, r5, #366	; 0x16e
    if (strcmp(className, NN_OUTPUT_CLASS_LIST[j]) == 0)
 8002984:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 8002a5c <OnBoardValidInit+0x2f4>
 8002988:	4648      	mov	r0, r9
 800298a:	f8db 1000 	ldr.w	r1, [fp]
 800298e:	f7fd fca7 	bl	80002e0 <strcmp>
 8002992:	b320      	cbz	r0, 80029de <OnBoardValidInit+0x276>
 8002994:	f8db 1004 	ldr.w	r1, [fp, #4]
 8002998:	4648      	mov	r0, r9
 800299a:	f7fd fca1 	bl	80002e0 <strcmp>
 800299e:	b1e8      	cbz	r0, 80029dc <OnBoardValidInit+0x274>
  Test_Context_Ptr->ValidationContext.class_index = FindClassIndexFromString(Test_Context_Ptr->ValidationContext.fno.fname);
 80029a0:	f04f 33ff 	mov.w	r3, #4294967295
    sprintf(tmp_msg, "Error, class %s doesn't exists", Test_Context_Ptr->ValidationContext.fno.fname);
 80029a4:	464a      	mov	r2, r9
 80029a6:	492b      	ldr	r1, [pc, #172]	; (8002a54 <OnBoardValidInit+0x2ec>)
 80029a8:	f1a4 001e 	sub.w	r0, r4, #30
  Test_Context_Ptr->ValidationContext.class_index = FindClassIndexFromString(Test_Context_Ptr->ValidationContext.fno.fname);
 80029ac:	f8c5 33bc 	str.w	r3, [r5, #956]	; 0x3bc
    sprintf(tmp_msg, "Error, class %s doesn't exists", Test_Context_Ptr->ValidationContext.fno.fname);
 80029b0:	f022 ff7c 	bl	80258ac <siprintf>
    UTIL_LCD_DisplayStringAt(0, LINE(3), (uint8_t *)tmp_msg, CENTER_MODE);
 80029b4:	f018 f8da 	bl	801ab6c <UTIL_LCD_GetFont>
 80029b8:	4603      	mov	r3, r0
 80029ba:	f1a4 021e 	sub.w	r2, r4, #30
 80029be:	4638      	mov	r0, r7
 80029c0:	88d9      	ldrh	r1, [r3, #6]
 80029c2:	2301      	movs	r3, #1
 80029c4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80029c8:	f018 f9c0 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 80029cc:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80029ce:	f7fe ff4f 	bl	8001870 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 80029d2:	4640      	mov	r0, r8
 80029d4:	f006 fb70 	bl	80090b8 <BSP_LED_On>
    while (1)
 80029d8:	e7fe      	b.n	80029d8 <OnBoardValidInit+0x270>
    while (1);
 80029da:	e7fe      	b.n	80029da <OnBoardValidInit+0x272>
    if (strcmp(className, NN_OUTPUT_CLASS_LIST[j]) == 0)
 80029dc:	2001      	movs	r0, #1
  strcpy(Test_Context_Ptr->ValidationContext.tmp_class_path, ""); //string "null"
 80029de:	f505 6480 	add.w	r4, r5, #1024	; 0x400
  strcpy(Test_Context_Ptr->ValidationContext.tmp_class_path, Test_Context_Ptr->ValidationContext.class_path );
 80029e2:	4651      	mov	r1, sl
  Test_Context_Ptr->ValidationContext.class_index = FindClassIndexFromString(Test_Context_Ptr->ValidationContext.fno.fname);
 80029e4:	f8c5 03bc 	str.w	r0, [r5, #956]	; 0x3bc
  strcpy(Test_Context_Ptr->ValidationContext.tmp_class_path, Test_Context_Ptr->ValidationContext.class_path );
 80029e8:	4620      	mov	r0, r4
 80029ea:	f022 ff7f 	bl	80258ec <stpcpy>
  strcat(Test_Context_Ptr->ValidationContext.tmp_class_path, "/");
 80029ee:	232f      	movs	r3, #47	; 0x2f
  strcat(Test_Context_Ptr->ValidationContext.tmp_class_path, Test_Context_Ptr->ValidationContext.fno.fname);
 80029f0:	4649      	mov	r1, r9
 80029f2:	3001      	adds	r0, #1
  strcat(Test_Context_Ptr->ValidationContext.tmp_class_path, "/");
 80029f4:	f800 3c01 	strb.w	r3, [r0, #-1]
  strcat(Test_Context_Ptr->ValidationContext.tmp_class_path, Test_Context_Ptr->ValidationContext.fno.fname);
 80029f8:	f022 ff81 	bl	80258fe <strcpy>
  res = f_opendir(&Test_Context_Ptr->ValidationContext.class_dir, Test_Context_Ptr->ValidationContext.tmp_class_path);
 80029fc:	4621      	mov	r1, r4
 80029fe:	f505 701c 	add.w	r0, r5, #624	; 0x270
 8002a02:	f015 f8a9 	bl	8017b58 <f_opendir>
  Test_Context_Ptr->ValidationContext.validation_completed = 0;
 8002a06:	2300      	movs	r3, #0
 8002a08:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
}
 8002a0c:	b013      	add	sp, #76	; 0x4c
 8002a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a12:	bf00      	nop
 8002a14:	080285d8 	.word	0x080285d8
 8002a18:	080285ec 	.word	0x080285ec
 8002a1c:	0802861c 	.word	0x0802861c
 8002a20:	08028638 	.word	0x08028638
 8002a24:	08028664 	.word	0x08028664
 8002a28:	08028690 	.word	0x08028690
 8002a2c:	08028698 	.word	0x08028698
 8002a30:	080286b8 	.word	0x080286b8
 8002a34:	08028538 	.word	0x08028538
 8002a38:	080970b4 	.word	0x080970b4
 8002a3c:	20007e40 	.word	0x20007e40
 8002a40:	080285a8 	.word	0x080285a8
 8002a44:	200083c0 	.word	0x200083c0
 8002a48:	08028708 	.word	0x08028708
 8002a4c:	20007708 	.word	0x20007708
 8002a50:	0802871c 	.word	0x0802871c
 8002a54:	08028730 	.word	0x08028730
 8002a58:	080286e8 	.word	0x080286e8
 8002a5c:	20000004 	.word	0x20000004

08002a60 <FrameCaptureInit>:
{
 8002a60:	b5f0      	push	{r4, r5, r6, r7, lr}
  UTIL_LCD_DrawRect(200, 10, 400, 50, UTIL_LCD_COLOR_WHITE);
 8002a62:	f04f 35ff 	mov.w	r5, #4294967295
{
 8002a66:	b085      	sub	sp, #20
 8002a68:	4604      	mov	r4, r0
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8002a6a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 8002a6e:	f8d4 6580 	ldr.w	r6, [r4, #1408]	; 0x580
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8002a72:	f018 f883 	bl	801ab7c <UTIL_LCD_Clear>
  UTIL_LCD_DrawRect(200, 10, 400, 50, UTIL_LCD_COLOR_WHITE);
 8002a76:	2332      	movs	r3, #50	; 0x32
 8002a78:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002a7c:	210a      	movs	r1, #10
 8002a7e:	20c8      	movs	r0, #200	; 0xc8
 8002a80:	9500      	str	r5, [sp, #0]
 8002a82:	f018 fa4b 	bl	801af1c <UTIL_LCD_DrawRect>
  UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"Capture file format", CENTER_MODE);
 8002a86:	f018 f871 	bl	801ab6c <UTIL_LCD_GetFont>
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	88c1      	ldrh	r1, [r0, #6]
 8002a8e:	2000      	movs	r0, #0
 8002a90:	4a92      	ldr	r2, [pc, #584]	; (8002cdc <FrameCaptureInit+0x27c>)
 8002a92:	f018 f95b 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(5), (uint8_t *)"Press one of the key of the joystick", CENTER_MODE);
 8002a96:	f018 f869 	bl	801ab6c <UTIL_LCD_GetFont>
 8002a9a:	88c1      	ldrh	r1, [r0, #6]
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	4a90      	ldr	r2, [pc, #576]	; (8002ce0 <FrameCaptureInit+0x280>)
 8002aa0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002aa4:	2000      	movs	r0, #0
 8002aa6:	f018 f951 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(6), (uint8_t *)"to select the format of the captured files", CENTER_MODE);
 8002aaa:	f018 f85f 	bl	801ab6c <UTIL_LCD_GetFont>
 8002aae:	88c1      	ldrh	r1, [r0, #6]
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	4a8c      	ldr	r2, [pc, #560]	; (8002ce4 <FrameCaptureInit+0x284>)
 8002ab4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8002ab8:	2000      	movs	r0, #0
 8002aba:	4099      	lsls	r1, r3
 8002abc:	f018 f946 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DrawLine(pt_center.x - pt_offset, pt_center.y, pt_center.x, pt_center.y - pt_offset, UTIL_LCD_COLOR_WHITE);
 8002ac0:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8002ac4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002ac8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002acc:	4608      	mov	r0, r1
 8002ace:	9500      	str	r5, [sp, #0]
 8002ad0:	f018 f98c 	bl	801adec <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x, pt_center.y - pt_offset, pt_center.x + pt_offset, pt_center.y, UTIL_LCD_COLOR_WHITE);
 8002ad4:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8002ad8:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8002adc:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002ae0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002ae4:	9500      	str	r5, [sp, #0]
 8002ae6:	f018 f981 	bl	801adec <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x + pt_offset, pt_center.y, pt_center.x, pt_center.y + pt_offset, UTIL_LCD_COLOR_WHITE);
 8002aea:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002aee:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8002af2:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8002af6:	461a      	mov	r2, r3
 8002af8:	9500      	str	r5, [sp, #0]
 8002afa:	f018 f977 	bl	801adec <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x, pt_center.y + pt_offset, pt_center.x - pt_offset, pt_center.y, UTIL_LCD_COLOR_WHITE);
 8002afe:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8002b02:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002b06:	9500      	str	r5, [sp, #0]
 8002b08:	461a      	mov	r2, r3
 8002b0a:	4608      	mov	r0, r1
 8002b0c:	f018 f96e 	bl	801adec <UTIL_LCD_DrawLine>
  UTIL_LCD_DisplayStringAt(0, pt_center.y - pt_offset - LINE(2), (uint8_t*)appli_names[0], CENTER_MODE);//UP
 8002b10:	f018 f82c 	bl	801ab6c <UTIL_LCD_GetFont>
 8002b14:	2301      	movs	r3, #1
 8002b16:	88c1      	ldrh	r1, [r0, #6]
 8002b18:	2000      	movs	r0, #0
 8002b1a:	4a73      	ldr	r2, [pc, #460]	; (8002ce8 <FrameCaptureInit+0x288>)
 8002b1c:	4099      	lsls	r1, r3
 8002b1e:	f5c1 7196 	rsb	r1, r1, #300	; 0x12c
 8002b22:	f018 f913 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, pt_center.y + pt_offset + LINE(1), (uint8_t*)appli_names[1], CENTER_MODE);//DOWN
 8002b26:	f018 f821 	bl	801ab6c <UTIL_LCD_GetFont>
 8002b2a:	88c1      	ldrh	r1, [r0, #6]
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	4a6f      	ldr	r2, [pc, #444]	; (8002cec <FrameCaptureInit+0x28c>)
 8002b30:	2000      	movs	r0, #0
 8002b32:	f501 71c8 	add.w	r1, r1, #400	; 0x190
 8002b36:	f018 f909 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
  DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8002b3a:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8002b3c:	f7fe fe98 	bl	8001870 <DISPLAY_Refresh>
  if(Test_Context_Ptr->UartContext.uart_cmd_ongoing)
 8002b40:	f8d4 34a0 	ldr.w	r3, [r4, #1184]	; 0x4a0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d04a      	beq.n	8002bde <FrameCaptureInit+0x17e>
    switch (Test_Context_Ptr->UartContext.uart_host_requested_capture_format)
 8002b48:	f894 34ac 	ldrb.w	r3, [r4, #1196]	; 0x4ac
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d043      	beq.n	8002bd8 <FrameCaptureInit+0x178>
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d041      	beq.n	8002bd8 <FrameCaptureInit+0x178>
    Test_Context_Ptr->UartContext.uart_cmd_ongoing = 0;
 8002b54:	2300      	movs	r3, #0
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002b56:	220a      	movs	r2, #10
 8002b58:	4965      	ldr	r1, [pc, #404]	; (8002cf0 <FrameCaptureInit+0x290>)
 8002b5a:	f204 40bc 	addw	r0, r4, #1212	; 0x4bc
    Test_Context_Ptr->UartContext.uart_cmd_ongoing = 0;
 8002b5e:	f8c4 34a0 	str.w	r3, [r4, #1184]	; 0x4a0
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002b62:	f00f fc17 	bl	8012394 <HAL_UART_Receive_DMA>
 8002b66:	2800      	cmp	r0, #0
 8002b68:	d172      	bne.n	8002c50 <FrameCaptureInit+0x1f0>
  Test_Context_Ptr->RngHandle.Instance = RNG;
 8002b6a:	4b62      	ldr	r3, [pc, #392]	; (8002cf4 <FrameCaptureInit+0x294>)
  HAL_RNG_DeInit(&Test_Context_Ptr->RngHandle);
 8002b6c:	f204 556c 	addw	r5, r4, #1388	; 0x56c
  Test_Context_Ptr->RngHandle.Instance = RNG;
 8002b70:	f8c4 356c 	str.w	r3, [r4, #1388]	; 0x56c
  HAL_RNG_DeInit(&Test_Context_Ptr->RngHandle);
 8002b74:	4628      	mov	r0, r5
 8002b76:	f00e fa0f 	bl	8010f98 <HAL_RNG_DeInit>
  HAL_RNG_Init(&Test_Context_Ptr->RngHandle);
 8002b7a:	4628      	mov	r0, r5
 8002b7c:	f00e f9d0 	bl	8010f20 <HAL_RNG_Init>
  HAL_RNG_GenerateRandomNumber(&Test_Context_Ptr->RngHandle, &Test_Context_Ptr->CaptureContext.capture_session_id);
 8002b80:	f104 01c4 	add.w	r1, r4, #196	; 0xc4
 8002b84:	4628      	mov	r0, r5
 8002b86:	f00e fa21 	bl	8010fcc <HAL_RNG_GenerateRandomNumber>
  sprintf(Test_Context_Ptr->CaptureContext.capture_session_name, "Session %X", (unsigned int)Test_Context_Ptr->CaptureContext.capture_session_id);
 8002b8a:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8002b8e:	495a      	ldr	r1, [pc, #360]	; (8002cf8 <FrameCaptureInit+0x298>)
 8002b90:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
 8002b94:	f022 fe8a 	bl	80258ac <siprintf>
  if (BSP_SD_Init(0) != BSP_ERROR_NONE)
 8002b98:	2000      	movs	r0, #0
 8002b9a:	f008 f9df 	bl	800af5c <BSP_SD_Init>
 8002b9e:	b948      	cbnz	r0, 8002bb4 <FrameCaptureInit+0x154>
  if (FATFS_LinkDriver(&SD_Driver, SDPath) != 0)
 8002ba0:	4856      	ldr	r0, [pc, #344]	; (8002cfc <FrameCaptureInit+0x29c>)
 8002ba2:	a903      	add	r1, sp, #12
 8002ba4:	f015 fdf0 	bl	8018788 <FATFS_LinkDriver>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	b398      	cbz	r0, 8002c14 <FrameCaptureInit+0x1b4>
    BSP_LED_On(LED_RED);
 8002bac:	2002      	movs	r0, #2
 8002bae:	f006 fa83 	bl	80090b8 <BSP_LED_On>
    while (1);
 8002bb2:	e7fe      	b.n	8002bb2 <FrameCaptureInit+0x152>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"Error. SD Card not detected", CENTER_MODE);
 8002bb4:	f017 ffda 	bl	801ab6c <UTIL_LCD_GetFont>
 8002bb8:	88c1      	ldrh	r1, [r0, #6]
 8002bba:	2301      	movs	r3, #1
 8002bbc:	4a50      	ldr	r2, [pc, #320]	; (8002d00 <FrameCaptureInit+0x2a0>)
 8002bbe:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8002bc2:	2000      	movs	r0, #0
 8002bc4:	4099      	lsls	r1, r3
 8002bc6:	f018 f8c1 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8002bca:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8002bcc:	f7fe fe50 	bl	8001870 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 8002bd0:	2002      	movs	r0, #2
 8002bd2:	f006 fa71 	bl	80090b8 <BSP_LED_On>
    while (1);
 8002bd6:	e7fe      	b.n	8002bd6 <FrameCaptureInit+0x176>
      Test_Context_Ptr->CaptureContext.capture_file_format = DATA_FORMAT_BMP;
 8002bd8:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
      break;
 8002bdc:	e7ba      	b.n	8002b54 <FrameCaptureInit+0xf4>
    HAL_Delay(200);
 8002bde:	20c8      	movs	r0, #200	; 0xc8
 8002be0:	f008 fb0a 	bl	800b1f8 <HAL_Delay>
      joy_state = (JOYPin_TypeDef) BSP_JOY_GetState(JOY1, 0);
 8002be4:	2100      	movs	r1, #0
 8002be6:	4608      	mov	r0, r1
 8002be8:	f006 fb84 	bl	80092f4 <BSP_JOY_GetState>
    while (joy_state == JOY_NONE || joy_state == JOY_RIGHT || joy_state == JOY_LEFT || joy_state == JOY_SEL)
 8002bec:	f010 0ff7 	tst.w	r0, #247	; 0xf7
      joy_state = (JOYPin_TypeDef) BSP_JOY_GetState(JOY1, 0);
 8002bf0:	b2c3      	uxtb	r3, r0
    while (joy_state == JOY_NONE || joy_state == JOY_RIGHT || joy_state == JOY_LEFT || joy_state == JOY_SEL)
 8002bf2:	d0f7      	beq.n	8002be4 <FrameCaptureInit+0x184>
 8002bf4:	2b04      	cmp	r3, #4
 8002bf6:	d0f5      	beq.n	8002be4 <FrameCaptureInit+0x184>
 8002bf8:	f1a3 0201 	sub.w	r2, r3, #1
 8002bfc:	fab2 f282 	clz	r2, r2
 8002c00:	0952      	lsrs	r2, r2, #5
 8002c02:	2a00      	cmp	r2, #0
 8002c04:	d1ee      	bne.n	8002be4 <FrameCaptureInit+0x184>
    switch (joy_state)
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d025      	beq.n	8002c56 <FrameCaptureInit+0x1f6>
 8002c0a:	2b10      	cmp	r3, #16
 8002c0c:	d1ad      	bne.n	8002b6a <FrameCaptureInit+0x10a>
      Test_Context_Ptr->CaptureContext.capture_file_format = DATA_FORMAT_RAW;
 8002c0e:	f884 20bc 	strb.w	r2, [r4, #188]	; 0xbc
      break;
 8002c12:	e7aa      	b.n	8002b6a <FrameCaptureInit+0x10a>
  if (f_mount(&SDFatFS, (TCHAR const *)SDPath, 0) != FR_OK)
 8002c14:	a903      	add	r1, sp, #12
 8002c16:	483b      	ldr	r0, [pc, #236]	; (8002d04 <FrameCaptureInit+0x2a4>)
 8002c18:	f013 ffd0 	bl	8016bbc <f_mount>
 8002c1c:	4605      	mov	r5, r0
 8002c1e:	b9f0      	cbnz	r0, 8002c5e <FrameCaptureInit+0x1fe>
  char *capture_session_dir_path = Test_Context_Ptr->CaptureContext.capture_folder_name;
 8002c20:	f104 07de 	add.w	r7, r4, #222	; 0xde
  sprintf(capture_session_dir_path, "/Camera_Capture/CAM_CAPTURE_SESS_%X", capture_session_id);
 8002c24:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8002c28:	4937      	ldr	r1, [pc, #220]	; (8002d08 <FrameCaptureInit+0x2a8>)
 8002c2a:	4638      	mov	r0, r7
 8002c2c:	f022 fe3e 	bl	80258ac <siprintf>
  res = f_mkdir(path);
 8002c30:	4836      	ldr	r0, [pc, #216]	; (8002d0c <FrameCaptureInit+0x2ac>)
 8002c32:	f015 f903 	bl	8017e3c <f_mkdir>
  if ((res != FR_OK) && (res != FR_EXIST))
 8002c36:	f010 04f7 	ands.w	r4, r0, #247	; 0xf7
 8002c3a:	d114      	bne.n	8002c66 <FrameCaptureInit+0x206>
  res = f_mkdir(path);
 8002c3c:	4638      	mov	r0, r7
 8002c3e:	f015 f8fd 	bl	8017e3c <f_mkdir>
  if ((res != FR_OK) && (res != FR_EXIST))
 8002c42:	f010 00f7 	ands.w	r0, r0, #247	; 0xf7
 8002c46:	d12b      	bne.n	8002ca0 <FrameCaptureInit+0x240>
  BSP_SD_DeInit(0);
 8002c48:	f008 f94a 	bl	800aee0 <BSP_SD_DeInit>
}
 8002c4c:	b005      	add	sp, #20
 8002c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 8002c50:	f001 ffdc 	bl	8004c0c <Error_Handler>
 8002c54:	e789      	b.n	8002b6a <FrameCaptureInit+0x10a>
      Test_Context_Ptr->CaptureContext.capture_file_format = DATA_FORMAT_BMP;
 8002c56:	2301      	movs	r3, #1
 8002c58:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
      break;
 8002c5c:	e785      	b.n	8002b6a <FrameCaptureInit+0x10a>
    BSP_LED_On(LED_RED);
 8002c5e:	2002      	movs	r0, #2
 8002c60:	f006 fa2a 	bl	80090b8 <BSP_LED_On>
    while (1);
 8002c64:	e7fe      	b.n	8002c64 <FrameCaptureInit+0x204>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *) "Error. Could not create directory", CENTER_MODE);
 8002c66:	f017 ff81 	bl	801ab6c <UTIL_LCD_GetFont>
 8002c6a:	88c1      	ldrh	r1, [r0, #6]
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	4a28      	ldr	r2, [pc, #160]	; (8002d10 <FrameCaptureInit+0x2b0>)
 8002c70:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8002c74:	4628      	mov	r0, r5
 8002c76:	4099      	lsls	r1, r3
 8002c78:	f018 f868 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(15), (uint8_t *) path, CENTER_MODE);
 8002c7c:	f017 ff76 	bl	801ab6c <UTIL_LCD_GetFont>
 8002c80:	4602      	mov	r2, r0
 8002c82:	2301      	movs	r3, #1
 8002c84:	4628      	mov	r0, r5
 8002c86:	88d1      	ldrh	r1, [r2, #6]
 8002c88:	4a20      	ldr	r2, [pc, #128]	; (8002d0c <FrameCaptureInit+0x2ac>)
 8002c8a:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8002c8e:	f018 f85d 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(app->Display_ContextPtr);
 8002c92:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8002c94:	f7fe fdec 	bl	8001870 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 8002c98:	2002      	movs	r0, #2
 8002c9a:	f006 fa0d 	bl	80090b8 <BSP_LED_On>
    while (1);
 8002c9e:	e7fe      	b.n	8002c9e <FrameCaptureInit+0x23e>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *) "Error. Could not create directory", CENTER_MODE);
 8002ca0:	f017 ff64 	bl	801ab6c <UTIL_LCD_GetFont>
 8002ca4:	88c1      	ldrh	r1, [r0, #6]
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	4a19      	ldr	r2, [pc, #100]	; (8002d10 <FrameCaptureInit+0x2b0>)
 8002caa:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8002cae:	4620      	mov	r0, r4
 8002cb0:	4099      	lsls	r1, r3
 8002cb2:	f018 f84b 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(15), (uint8_t *) path, CENTER_MODE);
 8002cb6:	f017 ff59 	bl	801ab6c <UTIL_LCD_GetFont>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	463a      	mov	r2, r7
 8002cbe:	4620      	mov	r0, r4
 8002cc0:	88d9      	ldrh	r1, [r3, #6]
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8002cc8:	f018 f840 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(app->Display_ContextPtr);
 8002ccc:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8002cce:	f7fe fdcf 	bl	8001870 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 8002cd2:	2002      	movs	r0, #2
 8002cd4:	f006 f9f0 	bl	80090b8 <BSP_LED_On>
    while (1);
 8002cd8:	e7fe      	b.n	8002cd8 <FrameCaptureInit+0x278>
 8002cda:	bf00      	nop
 8002cdc:	08028750 	.word	0x08028750
 8002ce0:	080284f4 	.word	0x080284f4
 8002ce4:	08028764 	.word	0x08028764
 8002ce8:	08028440 	.word	0x08028440
 8002cec:	08028444 	.word	0x08028444
 8002cf0:	300002a0 	.word	0x300002a0
 8002cf4:	48021800 	.word	0x48021800
 8002cf8:	08028790 	.word	0x08028790
 8002cfc:	080970b4 	.word	0x080970b4
 8002d00:	08028538 	.word	0x08028538
 8002d04:	20007e40 	.word	0x20007e40
 8002d08:	0802879c 	.word	0x0802879c
 8002d0c:	080287c0 	.word	0x080287c0
 8002d10:	08028564 	.word	0x08028564

08002d14 <UartCmd_Upload_Dump_Whole_Data>:
{
 8002d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if((*(uint8_t*)(data_buffer))== 0x00)
 8002d16:	780b      	ldrb	r3, [r1, #0]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d04f      	beq.n	8002dbc <UartCmd_Upload_Dump_Whole_Data+0xa8>
  else if((*(uint8_t*)(data_buffer))== 0x01)
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d01d      	beq.n	8002d5c <UartCmd_Upload_Dump_Whole_Data+0x48>
    *(aTxBuffer) = CMD_ERROR_EVT;
 8002d20:	4d45      	ldr	r5, [pc, #276]	; (8002e38 <UartCmd_Upload_Dump_Whole_Data+0x124>)
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002d22:	f200 44bc 	addw	r4, r0, #1212	; 0x4bc
    *(aTxBuffer) = CMD_ERROR_EVT;
 8002d26:	2304      	movs	r3, #4
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002d28:	2202      	movs	r2, #2
 8002d2a:	4628      	mov	r0, r5
 8002d2c:	2120      	movs	r1, #32
    *(aTxBuffer) = CMD_ERROR_EVT;
 8002d2e:	702b      	strb	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002d30:	f001 fefe 	bl	8004b30 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002d34:	4629      	mov	r1, r5
 8002d36:	4620      	mov	r0, r4
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f00f fadb 	bl	80122f4 <HAL_UART_Transmit_DMA>
 8002d3e:	2800      	cmp	r0, #0
 8002d40:	d170      	bne.n	8002e24 <UartCmd_Upload_Dump_Whole_Data+0x110>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002d42:	4620      	mov	r0, r4
 8002d44:	f00f fd00 	bl	8012748 <HAL_UART_GetState>
 8002d48:	2820      	cmp	r0, #32
 8002d4a:	d1fa      	bne.n	8002d42 <UartCmd_Upload_Dump_Whole_Data+0x2e>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002d4c:	4620      	mov	r0, r4
 8002d4e:	220a      	movs	r2, #10
 8002d50:	493a      	ldr	r1, [pc, #232]	; (8002e3c <UartCmd_Upload_Dump_Whole_Data+0x128>)
 8002d52:	f00f fb1f 	bl	8012394 <HAL_UART_Receive_DMA>
 8002d56:	2800      	cmp	r0, #0
 8002d58:	d15d      	bne.n	8002e16 <UartCmd_Upload_Dump_Whole_Data+0x102>
}
 8002d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002d5c:	4d38      	ldr	r5, [pc, #224]	; (8002e40 <UartCmd_Upload_Dump_Whole_Data+0x12c>)
 8002d5e:	f200 44bc 	addw	r4, r0, #1212	; 0x4bc
 8002d62:	2202      	movs	r2, #2
 8002d64:	4937      	ldr	r1, [pc, #220]	; (8002e44 <UartCmd_Upload_Dump_Whole_Data+0x130>)
 8002d66:	4628      	mov	r0, r5
 8002d68:	4f37      	ldr	r7, [pc, #220]	; (8002e48 <UartCmd_Upload_Dump_Whole_Data+0x134>)
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8002d6a:	f64f 76ff 	movw	r6, #65535	; 0xffff
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002d6e:	f001 fedf 	bl	8004b30 <UTILS_DCache_Coherency_Maintenance>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8002d72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d76:	4629      	mov	r1, r5
 8002d78:	4620      	mov	r0, r4
 8002d7a:	f00f fabb 	bl	80122f4 <HAL_UART_Transmit_DMA>
 8002d7e:	b9d0      	cbnz	r0, 8002db6 <UartCmd_Upload_Dump_Whole_Data+0xa2>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002d80:	4620      	mov	r0, r4
 8002d82:	f00f fce1 	bl	8012748 <HAL_UART_GetState>
 8002d86:	2820      	cmp	r0, #32
 8002d88:	d1fa      	bne.n	8002d80 <UartCmd_Upload_Dump_Whole_Data+0x6c>
    for(i=0;i<dma_xfer_num;i++)
 8002d8a:	4435      	add	r5, r6
 8002d8c:	42bd      	cmp	r5, r7
 8002d8e:	d1f0      	bne.n	8002d72 <UartCmd_Upload_Dump_Whole_Data+0x5e>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), TxDataTransferSize%0xFFFF)!= HAL_OK)
 8002d90:	f645 02ac 	movw	r2, #22700	; 0x58ac
 8002d94:	492c      	ldr	r1, [pc, #176]	; (8002e48 <UartCmd_Upload_Dump_Whole_Data+0x134>)
 8002d96:	4620      	mov	r0, r4
 8002d98:	f00f faac 	bl	80122f4 <HAL_UART_Transmit_DMA>
 8002d9c:	2800      	cmp	r0, #0
 8002d9e:	d144      	bne.n	8002e2a <UartCmd_Upload_Dump_Whole_Data+0x116>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002da0:	4620      	mov	r0, r4
 8002da2:	f00f fcd1 	bl	8012748 <HAL_UART_GetState>
 8002da6:	2820      	cmp	r0, #32
 8002da8:	d0d0      	beq.n	8002d4c <UartCmd_Upload_Dump_Whole_Data+0x38>
 8002daa:	4620      	mov	r0, r4
 8002dac:	f00f fccc 	bl	8012748 <HAL_UART_GetState>
 8002db0:	2820      	cmp	r0, #32
 8002db2:	d1f5      	bne.n	8002da0 <UartCmd_Upload_Dump_Whole_Data+0x8c>
 8002db4:	e7ca      	b.n	8002d4c <UartCmd_Upload_Dump_Whole_Data+0x38>
        Error_Handler();
 8002db6:	f001 ff29 	bl	8004c0c <Error_Handler>
 8002dba:	e7e1      	b.n	8002d80 <UartCmd_Upload_Dump_Whole_Data+0x6c>
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002dbc:	4d23      	ldr	r5, [pc, #140]	; (8002e4c <UartCmd_Upload_Dump_Whole_Data+0x138>)
 8002dbe:	f200 44bc 	addw	r4, r0, #1212	; 0x4bc
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	491f      	ldr	r1, [pc, #124]	; (8002e44 <UartCmd_Upload_Dump_Whole_Data+0x130>)
 8002dc6:	4628      	mov	r0, r5
 8002dc8:	4f21      	ldr	r7, [pc, #132]	; (8002e50 <UartCmd_Upload_Dump_Whole_Data+0x13c>)
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8002dca:	f64f 76ff 	movw	r6, #65535	; 0xffff
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002dce:	f001 feaf 	bl	8004b30 <UTILS_DCache_Coherency_Maintenance>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8002dd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002dd6:	4629      	mov	r1, r5
 8002dd8:	4620      	mov	r0, r4
 8002dda:	f00f fa8b 	bl	80122f4 <HAL_UART_Transmit_DMA>
 8002dde:	b9f0      	cbnz	r0, 8002e1e <UartCmd_Upload_Dump_Whole_Data+0x10a>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002de0:	4620      	mov	r0, r4
 8002de2:	f00f fcb1 	bl	8012748 <HAL_UART_GetState>
 8002de6:	2820      	cmp	r0, #32
 8002de8:	d1fa      	bne.n	8002de0 <UartCmd_Upload_Dump_Whole_Data+0xcc>
    for(i=0;i<dma_xfer_num;i++)
 8002dea:	4435      	add	r5, r6
 8002dec:	42af      	cmp	r7, r5
 8002dee:	d1f0      	bne.n	8002dd2 <UartCmd_Upload_Dump_Whole_Data+0xbe>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), TxDataTransferSize%0xFFFF)!= HAL_OK)
 8002df0:	f645 02ac 	movw	r2, #22700	; 0x58ac
 8002df4:	4916      	ldr	r1, [pc, #88]	; (8002e50 <UartCmd_Upload_Dump_Whole_Data+0x13c>)
 8002df6:	4620      	mov	r0, r4
 8002df8:	f00f fa7c 	bl	80122f4 <HAL_UART_Transmit_DMA>
 8002dfc:	b9c0      	cbnz	r0, 8002e30 <UartCmd_Upload_Dump_Whole_Data+0x11c>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002dfe:	4620      	mov	r0, r4
 8002e00:	f00f fca2 	bl	8012748 <HAL_UART_GetState>
 8002e04:	2820      	cmp	r0, #32
 8002e06:	d1fa      	bne.n	8002dfe <UartCmd_Upload_Dump_Whole_Data+0xea>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002e08:	4620      	mov	r0, r4
 8002e0a:	220a      	movs	r2, #10
 8002e0c:	490b      	ldr	r1, [pc, #44]	; (8002e3c <UartCmd_Upload_Dump_Whole_Data+0x128>)
 8002e0e:	f00f fac1 	bl	8012394 <HAL_UART_Receive_DMA>
 8002e12:	2800      	cmp	r0, #0
 8002e14:	d0a1      	beq.n	8002d5a <UartCmd_Upload_Dump_Whole_Data+0x46>
}
 8002e16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Error_Handler();
 8002e1a:	f001 bef7 	b.w	8004c0c <Error_Handler>
        Error_Handler();
 8002e1e:	f001 fef5 	bl	8004c0c <Error_Handler>
 8002e22:	e7dd      	b.n	8002de0 <UartCmd_Upload_Dump_Whole_Data+0xcc>
      Error_Handler();
 8002e24:	f001 fef2 	bl	8004c0c <Error_Handler>
 8002e28:	e78b      	b.n	8002d42 <UartCmd_Upload_Dump_Whole_Data+0x2e>
        Error_Handler();
 8002e2a:	f001 feef 	bl	8004c0c <Error_Handler>
 8002e2e:	e7b7      	b.n	8002da0 <UartCmd_Upload_Dump_Whole_Data+0x8c>
 8002e30:	f001 feec 	bl	8004c0c <Error_Handler>
 8002e34:	e7e3      	b.n	8002dfe <UartCmd_Upload_Dump_Whole_Data+0xea>
 8002e36:	bf00      	nop
 8002e38:	30000280 	.word	0x30000280
 8002e3c:	300002a0 	.word	0x300002a0
 8002e40:	d0cf6300 	.word	0xd0cf6300
 8002e44:	000458c0 	.word	0x000458c0
 8002e48:	d0d362fc 	.word	0xd0d362fc
 8002e4c:	d0cb0a40 	.word	0xd0cb0a40
 8002e50:	d0cf0a3c 	.word	0xd0cf0a3c

08002e54 <TEST_Init>:
 * @brief Test Init
 *
 * @param Test_Context_Ptr pointer to test context
 */
void TEST_Init(TestContext_TypeDef *Test_Context_Ptr)
{
 8002e54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  Test_Context_Ptr->ValidationContext.overall_loss = 0.0;
 8002e58:	2100      	movs	r1, #0
{
 8002e5a:	4604      	mov	r4, r0
  Test_Context_Ptr->ValidationContext.overall_loss = 0.0;
 8002e5c:	2000      	movs	r0, #0
  Test_Context_Ptr->DumpContext.dump_state = 0;
 8002e5e:	2300      	movs	r3, #0
  Test_Context_Ptr->DumpContext.dump_session_id = 0;
 8002e60:	2600      	movs	r6, #0
 8002e62:	2700      	movs	r7, #0
  Test_Context_Ptr->DumpContext.Dump_FrameSource=CAMERA_LIVE;
 8002e64:	2201      	movs	r2, #1
      Test_Context_Ptr->ValidationContext.valid_conf_matrix[i][j]=0;
 8002e66:	f504 6989 	add.w	r9, r4, #1096	; 0x448
 8002e6a:	f504 688a 	add.w	r8, r4, #1104	; 0x450
  Test_Context_Ptr->UartContext.UartHandle.Instance        = USARTx;
 8002e6e:	f8df e170 	ldr.w	lr, [pc, #368]	; 8002fe0 <TEST_Init+0x18c>
  Test_Context_Ptr->UartContext.UartHandle.Init.BaudRate   = 115200;
 8002e72:	f504 6c98 	add.w	ip, r4, #1216	; 0x4c0
  Test_Context_Ptr->DumpContext.Dump_FrameSource=CAMERA_LIVE;
 8002e76:	7122      	strb	r2, [r4, #4]
  Test_Context_Ptr->ValidationContext.nbr_tested = 1;
 8002e78:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
  Test_Context_Ptr->UartContext.UartHandle.Init.BaudRate   = 115200;
 8002e7c:	f504 6599 	add.w	r5, r4, #1224	; 0x4c8
  Test_Context_Ptr->DumpContext.dump_state = 0;
 8002e80:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
{
 8002e84:	b091      	sub	sp, #68	; 0x44
  Test_Context_Ptr->CaptureContext.capture_file_format=DATA_FORMAT_RAW;
 8002e86:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
  Test_Context_Ptr->CaptureContext.capture_frame_count=0;
 8002e8a:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
  Test_Context_Ptr->ValidationContext.validation_completed=0;
 8002e8e:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  Test_Context_Ptr->ValidationContext.overall_loss = 0.0;
 8002e92:	e9c4 0144 	strd	r0, r1, [r4, #272]	; 0x110
  Test_Context_Ptr->ValidationContext.avg_loss = 0.0;
 8002e96:	e9c4 0146 	strd	r0, r1, [r4, #280]	; 0x118
  Test_Context_Ptr->UartContext.UartHandle.Init.BaudRate   = 115200;
 8002e9a:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8002e9e:	2100      	movs	r1, #0
  Test_Context_Ptr->DumpContext.dump_session_id = 0;
 8002ea0:	e9c4 6702 	strd	r6, r7, [r4, #8]
  Test_Context_Ptr->CaptureContext.capture_state=0;
 8002ea4:	e9c4 6730 	strd	r6, r7, [r4, #192]	; 0xc0
      Test_Context_Ptr->ValidationContext.valid_conf_matrix[i][j]=0;
 8002ea8:	e9c9 6700 	strd	r6, r7, [r9]
 8002eac:	e9c8 6700 	strd	r6, r7, [r8]
  Test_Context_Ptr->UartContext.UartHandle.Init.BaudRate   = 115200;
 8002eb0:	f504 699a 	add.w	r9, r4, #1232	; 0x4d0
  Test_Context_Ptr->UartContext.uart_host_requested_mode = NOMINAL;
 8002eb4:	f884 24a4 	strb.w	r2, [r4, #1188]	; 0x4a4
  Test_Context_Ptr->UartContext.uart_cmd_ongoing=0;
 8002eb8:	f8c4 34a0 	str.w	r3, [r4, #1184]	; 0x4a0
  Test_Context_Ptr->UartContext.UartHandle.Init.BaudRate   = 115200;
 8002ebc:	f504 629b 	add.w	r2, r4, #1240	; 0x4d8
  Test_Context_Ptr->UartContext.uart_host_nonreg_run=0;
 8002ec0:	f8c4 34b8 	str.w	r3, [r4, #1208]	; 0x4b8
  if(HAL_UART_Init(&Test_Context_Ptr->UartContext.UartHandle) != HAL_OK)
 8002ec4:	f204 48bc 	addw	r8, r4, #1212	; 0x4bc
  Test_Context_Ptr->NonReg_FirstRun=0;
 8002ec8:	f8c4 3584 	str.w	r3, [r4, #1412]	; 0x584
  Test_Context_Ptr->UartContext.UartHandle.Init.ClockPrescaler  = UART_PRESCALER_DIV1;
 8002ecc:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
  Test_Context_Ptr->UartContext.UartHandle.Instance        = USARTx;
 8002ed0:	f8c4 e4bc 	str.w	lr, [r4, #1212]	; 0x4bc
  Test_Context_Ptr->UartContext.UartHandle.Init.BaudRate   = 115200;
 8002ed4:	e9cc 0100 	strd	r0, r1, [ip]
 8002ed8:	200c      	movs	r0, #12
 8002eda:	2100      	movs	r1, #0
 8002edc:	e9c5 6700 	strd	r6, r7, [r5]
 8002ee0:	e9c9 0100 	strd	r0, r1, [r9]
  if(HAL_UART_Init(&Test_Context_Ptr->UartContext.UartHandle) != HAL_OK)
 8002ee4:	4640      	mov	r0, r8
  Test_Context_Ptr->UartContext.UartHandle.Init.BaudRate   = 115200;
 8002ee6:	e9c2 6700 	strd	r6, r7, [r2]
  if(HAL_UART_Init(&Test_Context_Ptr->UartContext.UartHandle) != HAL_OK)
 8002eea:	f00f fcef 	bl	80128cc <HAL_UART_Init>
 8002eee:	2800      	cmp	r0, #0
 8002ef0:	d15b      	bne.n	8002faa <TEST_Init+0x156>
  char alive_msg[64]="Board ON & UART link OK \n";
 8002ef2:	4f32      	ldr	r7, [pc, #200]	; (8002fbc <TEST_Init+0x168>)
 8002ef4:	466e      	mov	r6, sp
  strcpy((char*)aTxBuffer, alive_msg);
 8002ef6:	4d32      	ldr	r5, [pc, #200]	; (8002fc0 <TEST_Init+0x16c>)
  char alive_msg[64]="Board ON & UART link OK \n";
 8002ef8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8002efa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002efc:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8002f00:	c603      	stmia	r6!, {r0, r1}
 8002f02:	8032      	strh	r2, [r6, #0]
  strcpy((char*)aTxBuffer, alive_msg);
 8002f04:	466e      	mov	r6, sp
  char alive_msg[64]="Board ON & UART link OK \n";
 8002f06:	2100      	movs	r1, #0
 8002f08:	2226      	movs	r2, #38	; 0x26
 8002f0a:	f10d 001a 	add.w	r0, sp, #26
 8002f0e:	f021 ff95 	bl	8024e3c <memset>
  strcpy((char*)aTxBuffer, alive_msg);
 8002f12:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002f14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f16:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8002f1a:	c503      	stmia	r5!, {r0, r1}
 8002f1c:	4628      	mov	r0, r5
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002f1e:	2120      	movs	r1, #32
  strcpy((char*)aTxBuffer, alive_msg);
 8002f20:	f820 2918 	strh.w	r2, [r0], #-24
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002f24:	2202      	movs	r2, #2
 8002f26:	f001 fe03 	bl	8004b30 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002f2a:	f1a5 0118 	sub.w	r1, r5, #24
 8002f2e:	2219      	movs	r2, #25
 8002f30:	4640      	mov	r0, r8
 8002f32:	f00f f9df 	bl	80122f4 <HAL_UART_Transmit_DMA>
 8002f36:	2800      	cmp	r0, #0
 8002f38:	d13d      	bne.n	8002fb6 <TEST_Init+0x162>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002f3a:	4640      	mov	r0, r8
 8002f3c:	f00f fc04 	bl	8012748 <HAL_UART_GetState>
 8002f40:	2820      	cmp	r0, #32
 8002f42:	d1fa      	bne.n	8002f3a <TEST_Init+0xe6>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002f44:	4640      	mov	r0, r8
 8002f46:	220a      	movs	r2, #10
 8002f48:	491e      	ldr	r1, [pc, #120]	; (8002fc4 <TEST_Init+0x170>)
 8002f4a:	f00f fa23 	bl	8012394 <HAL_UART_Receive_DMA>
 8002f4e:	bb78      	cbnz	r0, 8002fb0 <TEST_Init+0x15c>
  Test_ComIf_Init(Test_Context_Ptr);
  
  /*Compute the total char size for the array Test_buffer_names[]*/
  for (int i=0; i<APP_BUFF_NUM; i++)
  {
    Test_Context_Ptr->Total_Char_Name_Size+=strlen(Test_buffer_names[i]);
 8002f50:	481d      	ldr	r0, [pc, #116]	; (8002fc8 <TEST_Init+0x174>)
 8002f52:	f7fd f9cf 	bl	80002f4 <strlen>
 8002f56:	f8d4 6588 	ldr.w	r6, [r4, #1416]	; 0x588
 8002f5a:	4607      	mov	r7, r0
 8002f5c:	481b      	ldr	r0, [pc, #108]	; (8002fcc <TEST_Init+0x178>)
 8002f5e:	4437      	add	r7, r6
 8002f60:	f8c4 7588 	str.w	r7, [r4, #1416]	; 0x588
 8002f64:	f7fd f9c6 	bl	80002f4 <strlen>
 8002f68:	4606      	mov	r6, r0
 8002f6a:	4819      	ldr	r0, [pc, #100]	; (8002fd0 <TEST_Init+0x17c>)
 8002f6c:	4437      	add	r7, r6
 8002f6e:	f8c4 7588 	str.w	r7, [r4, #1416]	; 0x588
 8002f72:	f7fd f9bf 	bl	80002f4 <strlen>
 8002f76:	4605      	mov	r5, r0
 8002f78:	4816      	ldr	r0, [pc, #88]	; (8002fd4 <TEST_Init+0x180>)
 8002f7a:	442f      	add	r7, r5
 8002f7c:	f8c4 7588 	str.w	r7, [r4, #1416]	; 0x588
 8002f80:	f7fd f9b8 	bl	80002f4 <strlen>
 8002f84:	4605      	mov	r5, r0
 8002f86:	4814      	ldr	r0, [pc, #80]	; (8002fd8 <TEST_Init+0x184>)
 8002f88:	443d      	add	r5, r7
 8002f8a:	f8c4 5588 	str.w	r5, [r4, #1416]	; 0x588
 8002f8e:	f7fd f9b1 	bl	80002f4 <strlen>
 8002f92:	4603      	mov	r3, r0
  }

  /* Init IPL heap memory for image read/write operations */
  STM32Ipl_InitLib((void *) &ipl_heap, IPL_MEMORY_SIZE);
 8002f94:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8002f98:	4810      	ldr	r0, [pc, #64]	; (8002fdc <TEST_Init+0x188>)
    Test_Context_Ptr->Total_Char_Name_Size+=strlen(Test_buffer_names[i]);
 8002f9a:	441d      	add	r5, r3
 8002f9c:	f8c4 5588 	str.w	r5, [r4, #1416]	; 0x588
}
 8002fa0:	b011      	add	sp, #68	; 0x44
 8002fa2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  STM32Ipl_InitLib((void *) &ipl_heap, IPL_MEMORY_SIZE);
 8002fa6:	f015 bd1f 	b.w	80189e8 <STM32Ipl_InitLib>
    Error_Handler();
 8002faa:	f001 fe2f 	bl	8004c0c <Error_Handler>
 8002fae:	e7a0      	b.n	8002ef2 <TEST_Init+0x9e>
    Error_Handler();
 8002fb0:	f001 fe2c 	bl	8004c0c <Error_Handler>
 8002fb4:	e7cc      	b.n	8002f50 <TEST_Init+0xfc>
      Error_Handler();
 8002fb6:	f001 fe29 	bl	8004c0c <Error_Handler>
 8002fba:	e7be      	b.n	8002f3a <TEST_Init+0xe6>
 8002fbc:	080282a0 	.word	0x080282a0
 8002fc0:	30000280 	.word	0x30000280
 8002fc4:	300002a0 	.word	0x300002a0
 8002fc8:	20000014 	.word	0x20000014
 8002fcc:	20000034 	.word	0x20000034
 8002fd0:	20000054 	.word	0x20000054
 8002fd4:	20000074 	.word	0x20000074
 8002fd8:	20000094 	.word	0x20000094
 8002fdc:	d0000000 	.word	0xd0000000
 8002fe0:	40011000 	.word	0x40011000

08002fe4 <TEST_CmdIf_Check>:
 * @brief Check UART status for any received frame
 *
 * @param Test_Context_Ptr pointer to test context
 */
void TEST_CmdIf_Check(TestContext_TypeDef *Test_Context_Ptr)
{
 8002fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if((HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) == HAL_UART_STATE_READY) && (Test_Context_Ptr->UartContext.uart_cmd_ongoing ==0))
 8002fe8:	f200 46bc 	addw	r6, r0, #1212	; 0x4bc
{
 8002fec:	4604      	mov	r4, r0
  if((HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) == HAL_UART_STATE_READY) && (Test_Context_Ptr->UartContext.uart_cmd_ongoing ==0))
 8002fee:	4630      	mov	r0, r6
 8002ff0:	f00f fbaa 	bl	8012748 <HAL_UART_GetState>
 8002ff4:	2820      	cmp	r0, #32
 8002ff6:	d001      	beq.n	8002ffc <TEST_CmdIf_Check+0x18>

      /**Configure the UART in reception mode for receiving subsequent command from Host**/
      Uart_Rx(Test_Context_Ptr, aRxBuffer, RX_TRANSFER_SIZE);
    }
  }
}
 8002ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if((HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) == HAL_UART_STATE_READY) && (Test_Context_Ptr->UartContext.uart_cmd_ongoing ==0))
 8002ffc:	f8d4 74a0 	ldr.w	r7, [r4, #1184]	; 0x4a0
 8003000:	2f00      	cmp	r7, #0
 8003002:	d1f9      	bne.n	8002ff8 <TEST_CmdIf_Check+0x14>
    UTILS_DCache_Coherency_Maintenance((void *)aRxBuffer, RX_BUFFER_SIZE, INVALIDATE);
 8003004:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80030b4 <TEST_CmdIf_Check+0xd0>
 8003008:	4601      	mov	r1, r0
 800300a:	4605      	mov	r5, r0
 800300c:	2201      	movs	r2, #1
 800300e:	4640      	mov	r0, r8
 8003010:	f001 fd8e 	bl	8004b30 <UTILS_DCache_Coherency_Maintenance>
    if(aRxBuffer[0]< UART_CMD_NUMBER)
 8003014:	f898 3000 	ldrb.w	r3, [r8]
 8003018:	2b18      	cmp	r3, #24
 800301a:	d820      	bhi.n	800305e <TEST_CmdIf_Check+0x7a>
      *(aTxBuffer) = CMD_ACK_EVT;
 800301c:	4822      	ldr	r0, [pc, #136]	; (80030a8 <TEST_CmdIf_Check+0xc4>)
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 800301e:	4629      	mov	r1, r5
 8003020:	2202      	movs	r2, #2
      *(aTxBuffer) = CMD_ACK_EVT;
 8003022:	7007      	strb	r7, [r0, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8003024:	f001 fd84 	bl	8004b30 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8003028:	481f      	ldr	r0, [pc, #124]	; (80030a8 <TEST_CmdIf_Check+0xc4>)
 800302a:	2201      	movs	r2, #1
 800302c:	4601      	mov	r1, r0
 800302e:	4630      	mov	r0, r6
 8003030:	f00f f960 	bl	80122f4 <HAL_UART_Transmit_DMA>
 8003034:	bba0      	cbnz	r0, 80030a0 <TEST_CmdIf_Check+0xbc>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8003036:	4630      	mov	r0, r6
 8003038:	f00f fb86 	bl	8012748 <HAL_UART_GetState>
 800303c:	2820      	cmp	r0, #32
 800303e:	d1fa      	bne.n	8003036 <TEST_CmdIf_Check+0x52>
      HAL_Delay(500);
 8003040:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003044:	f008 f8d8 	bl	800b1f8 <HAL_Delay>
      (*UartCmdFct_Table[*(uint8_t*)aRxBuffer])(Test_Context_Ptr, (uint8_t *)(aRxBuffer+1), 0/*not used for now*/);
 8003048:	f898 5000 	ldrb.w	r5, [r8]
 800304c:	4b17      	ldr	r3, [pc, #92]	; (80030ac <TEST_CmdIf_Check+0xc8>)
 800304e:	4620      	mov	r0, r4
 8003050:	2200      	movs	r2, #0
 8003052:	4917      	ldr	r1, [pc, #92]	; (80030b0 <TEST_CmdIf_Check+0xcc>)
 8003054:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
}
 8003058:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      (*UartCmdFct_Table[*(uint8_t*)aRxBuffer])(Test_Context_Ptr, (uint8_t *)(aRxBuffer+1), 0/*not used for now*/);
 800305c:	4718      	bx	r3
      *(aTxBuffer) = CMD_NACK_EVT;
 800305e:	4c12      	ldr	r4, [pc, #72]	; (80030a8 <TEST_CmdIf_Check+0xc4>)
 8003060:	2701      	movs	r7, #1
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8003062:	4629      	mov	r1, r5
 8003064:	2202      	movs	r2, #2
 8003066:	4620      	mov	r0, r4
      *(aTxBuffer) = CMD_NACK_EVT;
 8003068:	7027      	strb	r7, [r4, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 800306a:	f001 fd61 	bl	8004b30 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 800306e:	463a      	mov	r2, r7
 8003070:	4621      	mov	r1, r4
 8003072:	4630      	mov	r0, r6
 8003074:	f00f f93e 	bl	80122f4 <HAL_UART_Transmit_DMA>
 8003078:	b978      	cbnz	r0, 800309a <TEST_CmdIf_Check+0xb6>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 800307a:	4630      	mov	r0, r6
 800307c:	f00f fb64 	bl	8012748 <HAL_UART_GetState>
 8003080:	2820      	cmp	r0, #32
 8003082:	d1fa      	bne.n	800307a <TEST_CmdIf_Check+0x96>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8003084:	4630      	mov	r0, r6
 8003086:	220a      	movs	r2, #10
 8003088:	490a      	ldr	r1, [pc, #40]	; (80030b4 <TEST_CmdIf_Check+0xd0>)
 800308a:	f00f f983 	bl	8012394 <HAL_UART_Receive_DMA>
 800308e:	2800      	cmp	r0, #0
 8003090:	d0b2      	beq.n	8002ff8 <TEST_CmdIf_Check+0x14>
}
 8003092:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    Error_Handler();
 8003096:	f001 bdb9 	b.w	8004c0c <Error_Handler>
      Error_Handler();
 800309a:	f001 fdb7 	bl	8004c0c <Error_Handler>
 800309e:	e7ec      	b.n	800307a <TEST_CmdIf_Check+0x96>
 80030a0:	f001 fdb4 	bl	8004c0c <Error_Handler>
 80030a4:	e7c7      	b.n	8003036 <TEST_CmdIf_Check+0x52>
 80030a6:	bf00      	nop
 80030a8:	30000280 	.word	0x30000280
 80030ac:	08028ab8 	.word	0x08028ab8
 80030b0:	300002a1 	.word	0x300002a1
 80030b4:	300002a0 	.word	0x300002a0

080030b8 <TEST_MainMenu>:
 *        - Camera Capture
 *
 * @param Test_Context_Ptr pointer to test context
 */
void TEST_MainMenu(TestContext_TypeDef *Test_Context_Ptr)
{
 80030b8:	b570      	push	{r4, r5, r6, lr}
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;

  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);

  UTIL_LCD_DrawRect(200, 10, 400, 50, UTIL_LCD_COLOR_WHITE);
 80030ba:	f04f 35ff 	mov.w	r5, #4294967295
{
 80030be:	b082      	sub	sp, #8
 80030c0:	4604      	mov	r4, r0
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 80030c2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 80030c6:	f8d4 6580 	ldr.w	r6, [r4, #1408]	; 0x580
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 80030ca:	f017 fd57 	bl	801ab7c <UTIL_LCD_Clear>
  UTIL_LCD_DrawRect(200, 10, 400, 50, UTIL_LCD_COLOR_WHITE);
 80030ce:	2332      	movs	r3, #50	; 0x32
 80030d0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80030d4:	210a      	movs	r1, #10
 80030d6:	20c8      	movs	r0, #200	; 0xc8
 80030d8:	9500      	str	r5, [sp, #0]
 80030da:	f017 ff1f 	bl	801af1c <UTIL_LCD_DrawRect>
  UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"Operating mode", CENTER_MODE);
 80030de:	f017 fd45 	bl	801ab6c <UTIL_LCD_GetFont>
 80030e2:	2301      	movs	r3, #1
 80030e4:	88c1      	ldrh	r1, [r0, #6]
 80030e6:	2000      	movs	r0, #0
 80030e8:	4a6f      	ldr	r2, [pc, #444]	; (80032a8 <TEST_MainMenu+0x1f0>)
 80030ea:	f017 fe2f 	bl	801ad4c <UTIL_LCD_DisplayStringAt>

  UTIL_LCD_DisplayStringAt(0, LINE(5), (uint8_t *)"Press one of the key of the joystick", CENTER_MODE);
 80030ee:	f017 fd3d 	bl	801ab6c <UTIL_LCD_GetFont>
 80030f2:	88c1      	ldrh	r1, [r0, #6]
 80030f4:	2301      	movs	r3, #1
 80030f6:	4a6d      	ldr	r2, [pc, #436]	; (80032ac <TEST_MainMenu+0x1f4>)
 80030f8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80030fc:	2000      	movs	r0, #0
 80030fe:	f017 fe25 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(6), (uint8_t *)"to select an operating mode", CENTER_MODE);
 8003102:	f017 fd33 	bl	801ab6c <UTIL_LCD_GetFont>
 8003106:	88c1      	ldrh	r1, [r0, #6]
 8003108:	2301      	movs	r3, #1
 800310a:	4a69      	ldr	r2, [pc, #420]	; (80032b0 <TEST_MainMenu+0x1f8>)
 800310c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8003110:	2000      	movs	r0, #0
 8003112:	4099      	lsls	r1, r3
 8003114:	f017 fe1a 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
    uint16_t y;
  };
  const struct point_t pt_center = {.x = 400, .y = 350}; /* x,y coordinates */
  const uint16_t pt_offset = 50;                         /* pixels offset from the center (wideness of the square) */

  UTIL_LCD_DrawLine(pt_center.x - pt_offset, pt_center.y, pt_center.x, pt_center.y - pt_offset, UTIL_LCD_COLOR_WHITE);
 8003118:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800311c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003120:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003124:	4608      	mov	r0, r1
 8003126:	9500      	str	r5, [sp, #0]
 8003128:	f017 fe60 	bl	801adec <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x, pt_center.y - pt_offset, pt_center.x + pt_offset, pt_center.y, UTIL_LCD_COLOR_WHITE);
 800312c:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8003130:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8003134:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003138:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800313c:	9500      	str	r5, [sp, #0]
 800313e:	f017 fe55 	bl	801adec <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x + pt_offset, pt_center.y, pt_center.x, pt_center.y + pt_offset, UTIL_LCD_COLOR_WHITE);
 8003142:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003146:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800314a:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 800314e:	461a      	mov	r2, r3
 8003150:	9500      	str	r5, [sp, #0]
 8003152:	f017 fe4b 	bl	801adec <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x, pt_center.y + pt_offset, pt_center.x - pt_offset, pt_center.y, UTIL_LCD_COLOR_WHITE);
 8003156:	f44f 73af 	mov.w	r3, #350	; 0x15e
 800315a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800315e:	9500      	str	r5, [sp, #0]
 8003160:	461a      	mov	r2, r3
 8003162:	4608      	mov	r0, r1
 8003164:	f017 fe42 	bl	801adec <UTIL_LCD_DrawLine>

  const char *appli_names[] = {"Nominal Run", "Frame Capture", "OnBoard Validation",
                                   "Memory Dump"};

  UTIL_LCD_DisplayStringAt(0, pt_center.y - pt_offset - LINE(2), (uint8_t*)appli_names[0], CENTER_MODE);//UP
 8003168:	f017 fd00 	bl	801ab6c <UTIL_LCD_GetFont>
 800316c:	2301      	movs	r3, #1
 800316e:	88c1      	ldrh	r1, [r0, #6]
 8003170:	2000      	movs	r0, #0
 8003172:	4a50      	ldr	r2, [pc, #320]	; (80032b4 <TEST_MainMenu+0x1fc>)
 8003174:	4099      	lsls	r1, r3
 8003176:	f5c1 7196 	rsb	r1, r1, #300	; 0x12c
 800317a:	f017 fde7 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(pt_center.x + pt_offset + 10, pt_center.y - LINE(1) / 2, (uint8_t*)appli_names[1], LEFT_MODE);//RIGHT
 800317e:	f017 fcf5 	bl	801ab6c <UTIL_LCD_GetFont>
 8003182:	88c1      	ldrh	r1, [r0, #6]
 8003184:	2303      	movs	r3, #3
 8003186:	4a4c      	ldr	r2, [pc, #304]	; (80032b8 <TEST_MainMenu+0x200>)
 8003188:	1049      	asrs	r1, r1, #1
 800318a:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
 800318e:	f5c1 71af 	rsb	r1, r1, #350	; 0x15e
 8003192:	f017 fddb 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, pt_center.y + pt_offset + LINE(1), (uint8_t*)appli_names[2], CENTER_MODE);//DOWN
 8003196:	f017 fce9 	bl	801ab6c <UTIL_LCD_GetFont>
 800319a:	88c1      	ldrh	r1, [r0, #6]
 800319c:	2301      	movs	r3, #1
 800319e:	4a47      	ldr	r2, [pc, #284]	; (80032bc <TEST_MainMenu+0x204>)
 80031a0:	f501 71c8 	add.w	r1, r1, #400	; 0x190
 80031a4:	2000      	movs	r0, #0
 80031a6:	f017 fdd1 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(150, pt_center.y - LINE(1) / 2, (uint8_t*)appli_names[3], LEFT_MODE);//LEFT
 80031aa:	f017 fcdf 	bl	801ab6c <UTIL_LCD_GetFont>
 80031ae:	88c1      	ldrh	r1, [r0, #6]
 80031b0:	2303      	movs	r3, #3
 80031b2:	4a43      	ldr	r2, [pc, #268]	; (80032c0 <TEST_MainMenu+0x208>)
 80031b4:	1049      	asrs	r1, r1, #1
 80031b6:	2096      	movs	r0, #150	; 0x96
 80031b8:	f5c1 71af 	rsb	r1, r1, #350	; 0x15e
 80031bc:	f017 fdc6 	bl	801ad4c <UTIL_LCD_DisplayStringAt>

  DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 80031c0:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80031c2:	f7fe fb55 	bl	8001870 <DISPLAY_Refresh>

  if(Test_Context_Ptr->UartContext.uart_cmd_ongoing)
 80031c6:	f8d4 34a0 	ldr.w	r3, [r4, #1184]	; 0x4a0
 80031ca:	b143      	cbz	r3, 80031de <TEST_MainMenu+0x126>
  {
    switch (Test_Context_Ptr->UartContext.uart_host_requested_mode)
 80031cc:	f894 34a4 	ldrb.w	r3, [r4, #1188]	; 0x4a4
 80031d0:	442b      	add	r3, r5
 80031d2:	2b03      	cmp	r3, #3
 80031d4:	d827      	bhi.n	8003226 <TEST_MainMenu+0x16e>
 80031d6:	e8df f003 	tbb	[pc, r3]
 80031da:	2f21      	.short	0x2f21
 80031dc:	2839      	.short	0x2839
  else
  {
    JOYPin_TypeDef joy_state = JOY_NONE;
    while (joy_state == JOY_NONE)
    {
      joy_state = (JOYPin_TypeDef) BSP_JOY_GetState(JOY1, 0);
 80031de:	2100      	movs	r1, #0
 80031e0:	4608      	mov	r0, r1
 80031e2:	f006 f887 	bl	80092f4 <BSP_JOY_GetState>
    while (joy_state == JOY_NONE)
 80031e6:	f010 03ff 	ands.w	r3, r0, #255	; 0xff
 80031ea:	d0f8      	beq.n	80031de <TEST_MainMenu+0x126>
    }

    switch (joy_state)
 80031ec:	3b02      	subs	r3, #2
 80031ee:	2b0e      	cmp	r3, #14
 80031f0:	d80e      	bhi.n	8003210 <TEST_MainMenu+0x158>
 80031f2:	e8df f003 	tbb	[pc, r3]
 80031f6:	0d43      	.short	0x0d43
 80031f8:	0d0d0d37 	.word	0x0d0d0d37
 80031fc:	0d0d0d08 	.word	0x0d0d0d08
 8003200:	0d0d0d0d 	.word	0x0d0d0d0d
 8003204:	51          	.byte	0x51
 8003205:	00          	.byte	0x00
    {
    case JOY_RIGHT:
      FrameCaptureInit(Test_Context_Ptr);
 8003206:	4620      	mov	r0, r4
 8003208:	f7ff fc2a 	bl	8002a60 <FrameCaptureInit>
      App_Cxt_Ptr->Operating_Mode=CAPTURE;
 800320c:	2304      	movs	r3, #4
 800320e:	7033      	strb	r3, [r6, #0]
    default:
      break;
    };

    //Tempo joystick
    HAL_Delay(200);
 8003210:	20c8      	movs	r0, #200	; 0xc8
  }
}
 8003212:	b002      	add	sp, #8
 8003214:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_Delay(200);
 8003218:	f007 bfee 	b.w	800b1f8 <HAL_Delay>
      App_Cxt_Ptr->Operating_Mode=NOMINAL;
 800321c:	2201      	movs	r2, #1
      Test_Context_Ptr->UartContext.uart_cmd_ongoing=0;//returning to NOMINAL mode terminates the UART command processing
 800321e:	2300      	movs	r3, #0
      App_Cxt_Ptr->Operating_Mode=NOMINAL;
 8003220:	7032      	strb	r2, [r6, #0]
      Test_Context_Ptr->UartContext.uart_cmd_ongoing=0;//returning to NOMINAL mode terminates the UART command processing
 8003222:	f8c4 34a0 	str.w	r3, [r4, #1184]	; 0x4a0
}
 8003226:	b002      	add	sp, #8
 8003228:	bd70      	pop	{r4, r5, r6, pc}
      FrameCaptureInit(Test_Context_Ptr);
 800322a:	4620      	mov	r0, r4
 800322c:	f7ff fc18 	bl	8002a60 <FrameCaptureInit>
      App_Cxt_Ptr->Operating_Mode=CAPTURE;
 8003230:	2304      	movs	r3, #4
 8003232:	7033      	strb	r3, [r6, #0]
}
 8003234:	b002      	add	sp, #8
 8003236:	bd70      	pop	{r4, r5, r6, pc}
      OnBoardValidInit(Test_Context_Ptr);
 8003238:	4620      	mov	r0, r4
 800323a:	f7ff fa95 	bl	8002768 <OnBoardValidInit>
      App_Cxt_Ptr->Operating_Mode=VALID;
 800323e:	2102      	movs	r1, #2
      App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready=1;
 8003240:	69f3      	ldr	r3, [r6, #28]
 8003242:	2201      	movs	r2, #1
      App_Cxt_Ptr->Operating_Mode=VALID;
 8003244:	7031      	strb	r1, [r6, #0]
      App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready=1;
 8003246:	751a      	strb	r2, [r3, #20]
}
 8003248:	b002      	add	sp, #8
 800324a:	bd70      	pop	{r4, r5, r6, pc}
      MemoryDumpInit(Test_Context_Ptr);
 800324c:	4620      	mov	r0, r4
 800324e:	f7ff f8d3 	bl	80023f8 <MemoryDumpInit>
      App_Cxt_Ptr->Operating_Mode=DUMP;
 8003252:	2303      	movs	r3, #3
 8003254:	7033      	strb	r3, [r6, #0]
      if(Test_Context_Ptr->DumpContext.Dump_FrameSource == SDCARD_FILE)
 8003256:	7923      	ldrb	r3, [r4, #4]
 8003258:	2b03      	cmp	r3, #3
 800325a:	d1e4      	bne.n	8003226 <TEST_MainMenu+0x16e>
        App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready=1;
 800325c:	69f3      	ldr	r3, [r6, #28]
 800325e:	2201      	movs	r2, #1
 8003260:	751a      	strb	r2, [r3, #20]
 8003262:	e7e0      	b.n	8003226 <TEST_MainMenu+0x16e>
      MemoryDumpInit(Test_Context_Ptr);
 8003264:	4620      	mov	r0, r4
 8003266:	f7ff f8c7 	bl	80023f8 <MemoryDumpInit>
      App_Cxt_Ptr->Operating_Mode=DUMP;
 800326a:	2303      	movs	r3, #3
 800326c:	7033      	strb	r3, [r6, #0]
      if(Test_Context_Ptr->DumpContext.Dump_FrameSource == SDCARD_FILE)
 800326e:	7923      	ldrb	r3, [r4, #4]
 8003270:	2b03      	cmp	r3, #3
 8003272:	d1cd      	bne.n	8003210 <TEST_MainMenu+0x158>
        App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready=1;
 8003274:	69f3      	ldr	r3, [r6, #28]
 8003276:	2201      	movs	r2, #1
 8003278:	751a      	strb	r2, [r3, #20]
 800327a:	e7c9      	b.n	8003210 <TEST_MainMenu+0x158>
      OnBoardValidInit(Test_Context_Ptr);
 800327c:	4620      	mov	r0, r4
 800327e:	f7ff fa73 	bl	8002768 <OnBoardValidInit>
      App_Cxt_Ptr->Operating_Mode=VALID;
 8003282:	2102      	movs	r1, #2
      App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready=1;
 8003284:	69f3      	ldr	r3, [r6, #28]
 8003286:	2201      	movs	r2, #1
    HAL_Delay(200);
 8003288:	20c8      	movs	r0, #200	; 0xc8
      App_Cxt_Ptr->Operating_Mode=VALID;
 800328a:	7031      	strb	r1, [r6, #0]
      App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready=1;
 800328c:	751a      	strb	r2, [r3, #20]
}
 800328e:	b002      	add	sp, #8
 8003290:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_Delay(200);
 8003294:	f007 bfb0 	b.w	800b1f8 <HAL_Delay>
      App_Cxt_Ptr->Operating_Mode=NOMINAL;
 8003298:	2301      	movs	r3, #1
    HAL_Delay(200);
 800329a:	20c8      	movs	r0, #200	; 0xc8
      App_Cxt_Ptr->Operating_Mode=NOMINAL;
 800329c:	7033      	strb	r3, [r6, #0]
}
 800329e:	b002      	add	sp, #8
 80032a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_Delay(200);
 80032a4:	f007 bfa8 	b.w	800b1f8 <HAL_Delay>
 80032a8:	080287d0 	.word	0x080287d0
 80032ac:	080284f4 	.word	0x080284f4
 80032b0:	080287e0 	.word	0x080287e0
 80032b4:	08028404 	.word	0x08028404
 80032b8:	08028410 	.word	0x08028410
 80032bc:	08028420 	.word	0x08028420
 80032c0:	08028434 	.word	0x08028434

080032c4 <TEST_GetNextDumpInput>:
 *
 * @param TestContext_Ptr pointer to test context
 * @param DestBuffPtr pointer to the destination buffer where the input file data content is copied to
 */
void TEST_GetNextDumpInput(TestContext_TypeDef *TestContext_Ptr, uint8_t * DestBuffPtr)
{
 80032c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  image_t tmp_img;
  image_t dum_img;
#if CAMERA_CAPTURE_RES == VGA_640_480_RES
  char  class_path[64]=  "/dump_src_image_vga";
#elif CAMERA_CAPTURE_RES == QVGA_320_240_RES
  char class_path[64]=  "/dump_src_image_qvga";
 80032c6:	4d2a      	ldr	r5, [pc, #168]	; (8003370 <TEST_GetNextDumpInput+0xac>)
{
 80032c8:	b0a7      	sub	sp, #156	; 0x9c
 80032ca:	4607      	mov	r7, r0
 80032cc:	460e      	mov	r6, r1
  char class_path[64]=  "/dump_src_image_qvga";
 80032ce:	ac16      	add	r4, sp, #88	; 0x58
 80032d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032d4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80032d8:	222b      	movs	r2, #43	; 0x2b
 80032da:	f844 0b04 	str.w	r0, [r4], #4
 80032de:	f10d 006d 	add.w	r0, sp, #109	; 0x6d
 80032e2:	7021      	strb	r1, [r4, #0]
 80032e4:	2100      	movs	r1, #0
 80032e6:	f021 fda9 	bl	8024e3c <memset>
#endif
  FRESULT res;
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;

  res = f_opendir(&class_dir, class_path);
 80032ea:	a916      	add	r1, sp, #88	; 0x58
 80032ec:	a809      	add	r0, sp, #36	; 0x24
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 80032ee:	f8d7 5580 	ldr.w	r5, [r7, #1408]	; 0x580
  res = f_opendir(&class_dir, class_path);
 80032f2:	f014 fc31 	bl	8017b58 <f_opendir>
  if (res != FR_OK)
 80032f6:	b100      	cbz	r0, 80032fa <TEST_GetNextDumpInput+0x36>
  {
    while (1);
 80032f8:	e7fe      	b.n	80032f8 <TEST_GetNextDumpInput+0x34>
  }

  /* Find next image file in current class directory */
  res = f_readdir(&class_dir, &img_fno);
 80032fa:	4c1e      	ldr	r4, [pc, #120]	; (8003374 <TEST_GetNextDumpInput+0xb0>)
 80032fc:	a809      	add	r0, sp, #36	; 0x24
 80032fe:	4621      	mov	r1, r4
 8003300:	f014 fd30 	bl	8017d64 <f_readdir>
  if ((res != FR_OK) || (img_fno.fname[0] == 0) || (img_fno.fattrib & AM_DIR))
 8003304:	7da3      	ldrb	r3, [r4, #22]
 8003306:	b903      	cbnz	r3, 800330a <TEST_GetNextDumpInput+0x46>
  {
    while (1); /* error: end of dir or not a file */
 8003308:	e7fe      	b.n	8003308 <TEST_GetNextDumpInput+0x44>
  if ((res != FR_OK) || (img_fno.fname[0] == 0) || (img_fno.fattrib & AM_DIR))
 800330a:	7a23      	ldrb	r3, [r4, #8]
 800330c:	f003 0310 	and.w	r3, r3, #16
 8003310:	4303      	orrs	r3, r0
 8003312:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003316:	d1f7      	bne.n	8003308 <TEST_GetNextDumpInput+0x44>
  }

  strcpy(tmp_msg, class_path);
 8003318:	4f17      	ldr	r7, [pc, #92]	; (8003378 <TEST_GetNextDumpInput+0xb4>)
 800331a:	a916      	add	r1, sp, #88	; 0x58
 800331c:	4638      	mov	r0, r7
 800331e:	f022 fae5 	bl	80258ec <stpcpy>
  strcat(tmp_msg, "/");
 8003322:	232f      	movs	r3, #47	; 0x2f
  strcat(tmp_msg, img_fno.fname);
 8003324:	f104 0116 	add.w	r1, r4, #22
 8003328:	3001      	adds	r0, #1
  strcat(tmp_msg, "/");
 800332a:	f800 3c01 	strb.w	r3, [r0, #-1]
  strcat(tmp_msg, img_fno.fname);
 800332e:	f022 fae6 	bl	80258fe <strcpy>

  /* Read the image to DestBuffPtr */
  if (STM32Ipl_ReadImage(&tmp_img, tmp_msg) != stm32ipl_err_Ok)
 8003332:	4639      	mov	r1, r7
 8003334:	a801      	add	r0, sp, #4
 8003336:	f015 feeb 	bl	8019110 <STM32Ipl_ReadImage>
 800333a:	b100      	cbz	r0, 800333e <TEST_GetNextDumpInput+0x7a>
  {
    while(1);
 800333c:	e7fe      	b.n	800333c <TEST_GetNextDumpInput+0x78>
  }
  dum_img.data = DestBuffPtr;
  dum_img.w = tmp_img.w;
 800333e:	9b02      	ldr	r3, [sp, #8]
  dum_img.h = tmp_img.h;
  dum_img.bpp = tmp_img.bpp;
  if (STM32Ipl_CopyData(&tmp_img, &dum_img) != stm32ipl_err_Ok)
 8003340:	a905      	add	r1, sp, #20
  dum_img.w = tmp_img.w;
 8003342:	9a03      	ldr	r2, [sp, #12]
  if (STM32Ipl_CopyData(&tmp_img, &dum_img) != stm32ipl_err_Ok)
 8003344:	a801      	add	r0, sp, #4
  dum_img.w = tmp_img.w;
 8003346:	9306      	str	r3, [sp, #24]
 8003348:	9b01      	ldr	r3, [sp, #4]
  dum_img.data = DestBuffPtr;
 800334a:	9608      	str	r6, [sp, #32]
  dum_img.w = tmp_img.w;
 800334c:	9207      	str	r2, [sp, #28]
 800334e:	9305      	str	r3, [sp, #20]
  if (STM32Ipl_CopyData(&tmp_img, &dum_img) != stm32ipl_err_Ok)
 8003350:	f015 fbba 	bl	8018ac8 <STM32Ipl_CopyData>
 8003354:	b100      	cbz	r0, 8003358 <TEST_GetNextDumpInput+0x94>
  {
    while (1); // Invalid dim or format
 8003356:	e7fe      	b.n	8003356 <TEST_GetNextDumpInput+0x92>
  }
  STM32Ipl_ReleaseData(&tmp_img);
 8003358:	a801      	add	r0, sp, #4
 800335a:	f015 fb55 	bl	8018a08 <STM32Ipl_ReleaseData>

  f_closedir(&class_dir);
 800335e:	a809      	add	r0, sp, #36	; 0x24
 8003360:	f014 fcce 	bl	8017d00 <f_closedir>

  App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready = 1;
 8003364:	69eb      	ldr	r3, [r5, #28]
 8003366:	2201      	movs	r2, #1
 8003368:	751a      	strb	r2, [r3, #20]
}
 800336a:	b027      	add	sp, #156	; 0x9c
 800336c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800336e:	bf00      	nop
 8003370:	08028260 	.word	0x08028260
 8003374:	200082a8 	.word	0x200082a8
 8003378:	200083c0 	.word	0x200083c0
 800337c:	00000000 	.word	0x00000000

08003380 <TEST_GetNextValidationInput>:
 *
 * @param TestContext_Ptr pointer to test context
 * @param DestBuffPtr pointer to the destination buffer where the input file data content is copied to
 */
void TEST_GetNextValidationInput(TestContext_TypeDef *TestContext_Ptr, uint8_t * DestBuffPtr)
{
 8003380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#endif
#endif /* OBJECTDETECT */

  /* Get next image in this directory (i.e class) */
  dir = &TestContext_Ptr->ValidationContext.class_dir;
  fno = &TestContext_Ptr->ValidationContext.img_fno;
 8003384:	f500 7929 	add.w	r9, r0, #676	; 0x2a4
  dir = &TestContext_Ptr->ValidationContext.class_dir;
 8003388:	f500 781c 	add.w	r8, r0, #624	; 0x270
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 800338c:	f8d0 3580 	ldr.w	r3, [r0, #1408]	; 0x580
{
 8003390:	4604      	mov	r4, r0
  fno = &TestContext_Ptr->ValidationContext.img_fno;
 8003392:	4e6b      	ldr	r6, [pc, #428]	; (8003540 <TEST_GetNextValidationInput+0x1c0>)
  res = f_readdir(dir, fno); /* Read a directory item */
 8003394:	4640      	mov	r0, r8
{
 8003396:	ed2d 8b10 	vpush	{d8-d15}
 800339a:	f5ad 7d3b 	sub.w	sp, sp, #748	; 0x2ec
  fno = &TestContext_Ptr->ValidationContext.img_fno;
 800339e:	f8c6 9000 	str.w	r9, [r6]
{
 80033a2:	910b      	str	r1, [sp, #44]	; 0x2c
  res = f_readdir(dir, fno); /* Read a directory item */
 80033a4:	4649      	mov	r1, r9
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 80033a6:	930a      	str	r3, [sp, #40]	; 0x28
  res = f_readdir(dir, fno); /* Read a directory item */
 80033a8:	f014 fcdc 	bl	8017d64 <f_readdir>
  if ((res == FR_OK) && (fno->fname[0] != 0) && !(fno->fattrib & AM_DIR)) /* If file */
 80033ac:	b920      	cbnz	r0, 80033b8 <TEST_GetNextValidationInput+0x38>
 80033ae:	6833      	ldr	r3, [r6, #0]
 80033b0:	7d9a      	ldrb	r2, [r3, #22]
 80033b2:	2a00      	cmp	r2, #0
 80033b4:	f040 82fe 	bne.w	80039b4 <TEST_GetNextValidationInput+0x634>

  } /* End for each file in class directory */
  else
  {
    /*Close class directory*/
    f_closedir(&TestContext_Ptr->ValidationContext.class_dir);
 80033b8:	f504 7392 	add.w	r3, r4, #292	; 0x124
 80033bc:	4640      	mov	r0, r8
 80033be:	f504 7bac 	add.w	fp, r4, #344	; 0x158
    fno = &TestContext_Ptr->ValidationContext.fno;
    res = f_readdir(dir, fno);
    if ((res == FR_OK) && (fno->fname[0] != 0) && (fno->fattrib & AM_DIR)) /* If directory */
    {
      /* Find corresponding class index */
      TestContext_Ptr->ValidationContext.class_index = FindClassIndexFromString(TestContext_Ptr->ValidationContext.fno.fname);
 80033c2:	f504 77b7 	add.w	r7, r4, #366	; 0x16e
 80033c6:	ee08 3a10 	vmov	s16, r3
 80033ca:	4b5e      	ldr	r3, [pc, #376]	; (8003544 <TEST_GetNextValidationInput+0x1c4>)
        BSP_LED_On(LED_RED);
        while (1)
          ;
      }

      strcpy(TestContext_Ptr->ValidationContext.tmp_class_path, ""); //chaine "nulle"
 80033cc:	f504 6a80 	add.w	sl, r4, #1024	; 0x400
 80033d0:	9309      	str	r3, [sp, #36]	; 0x24
    f_closedir(&TestContext_Ptr->ValidationContext.class_dir);
 80033d2:	f014 fc95 	bl	8017d00 <f_closedir>
    res = f_readdir(dir, fno);
 80033d6:	4659      	mov	r1, fp
 80033d8:	ee18 0a10 	vmov	r0, s16
    fno = &TestContext_Ptr->ValidationContext.fno;
 80033dc:	f8c6 b000 	str.w	fp, [r6]
    res = f_readdir(dir, fno);
 80033e0:	f014 fcc0 	bl	8017d64 <f_readdir>
 80033e4:	4605      	mov	r5, r0
    if (strcmp(className, NN_OUTPUT_CLASS_LIST[j]) == 0)
 80033e6:	4638      	mov	r0, r7
    if ((res == FR_OK) && (fno->fname[0] != 0) && (fno->fattrib & AM_DIR)) /* If directory */
 80033e8:	2d00      	cmp	r5, #0
 80033ea:	d16d      	bne.n	80034c8 <TEST_GetNextValidationInput+0x148>
 80033ec:	6833      	ldr	r3, [r6, #0]
 80033ee:	7d9a      	ldrb	r2, [r3, #22]
 80033f0:	2a00      	cmp	r2, #0
 80033f2:	d069      	beq.n	80034c8 <TEST_GetNextValidationInput+0x148>
 80033f4:	7a1b      	ldrb	r3, [r3, #8]
 80033f6:	06da      	lsls	r2, r3, #27
 80033f8:	d566      	bpl.n	80034c8 <TEST_GetNextValidationInput+0x148>
    if (strcmp(className, NN_OUTPUT_CLASS_LIST[j]) == 0)
 80033fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033fc:	6819      	ldr	r1, [r3, #0]
 80033fe:	f7fc ff6f 	bl	80002e0 <strcmp>
 8003402:	4603      	mov	r3, r0
 8003404:	4638      	mov	r0, r7
 8003406:	b30b      	cbz	r3, 800344c <TEST_GetNextValidationInput+0xcc>
 8003408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800340a:	6859      	ldr	r1, [r3, #4]
 800340c:	f7fc ff68 	bl	80002e0 <strcmp>
 8003410:	b1d8      	cbz	r0, 800344a <TEST_GetNextValidationInput+0xca>
      TestContext_Ptr->ValidationContext.class_index = FindClassIndexFromString(TestContext_Ptr->ValidationContext.fno.fname);
 8003412:	f04f 33ff 	mov.w	r3, #4294967295
        sprintf(tmp_msg, "Error, class %s doesn't exists", TestContext_Ptr->ValidationContext.fno.fname);
 8003416:	463a      	mov	r2, r7
 8003418:	494b      	ldr	r1, [pc, #300]	; (8003548 <TEST_GetNextValidationInput+0x1c8>)
      TestContext_Ptr->ValidationContext.class_index = FindClassIndexFromString(TestContext_Ptr->ValidationContext.fno.fname);
 800341a:	f8c4 33bc 	str.w	r3, [r4, #956]	; 0x3bc
        sprintf(tmp_msg, "Error, class %s doesn't exists", TestContext_Ptr->ValidationContext.fno.fname);
 800341e:	484b      	ldr	r0, [pc, #300]	; (800354c <TEST_GetNextValidationInput+0x1cc>)
 8003420:	f022 fa44 	bl	80258ac <siprintf>
        UTIL_LCD_DisplayStringAt(0, LINE(3), (uint8_t *)tmp_msg, CENTER_MODE);
 8003424:	f017 fba2 	bl	801ab6c <UTIL_LCD_GetFont>
 8003428:	4602      	mov	r2, r0
 800342a:	2301      	movs	r3, #1
 800342c:	4628      	mov	r0, r5
 800342e:	88d1      	ldrh	r1, [r2, #6]
 8003430:	4a46      	ldr	r2, [pc, #280]	; (800354c <TEST_GetNextValidationInput+0x1cc>)
 8003432:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8003436:	f017 fc89 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
        DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 800343a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800343c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800343e:	f7fe fa17 	bl	8001870 <DISPLAY_Refresh>
        BSP_LED_On(LED_RED);
 8003442:	2002      	movs	r0, #2
 8003444:	f005 fe38 	bl	80090b8 <BSP_LED_On>
        while (1)
 8003448:	e7fe      	b.n	8003448 <TEST_GetNextValidationInput+0xc8>
    if (strcmp(className, NN_OUTPUT_CLASS_LIST[j]) == 0)
 800344a:	2301      	movs	r3, #1
      strcpy(TestContext_Ptr->ValidationContext.tmp_class_path, TestContext_Ptr->ValidationContext.class_path );
      strcat(TestContext_Ptr->ValidationContext.tmp_class_path, "/");
 800344c:	252f      	movs	r5, #47	; 0x2f
      TestContext_Ptr->ValidationContext.class_index = FindClassIndexFromString(TestContext_Ptr->ValidationContext.fno.fname);
 800344e:	f8c4 33bc 	str.w	r3, [r4, #956]	; 0x3bc
      strcpy(TestContext_Ptr->ValidationContext.tmp_class_path, TestContext_Ptr->ValidationContext.class_path );
 8003452:	f504 7170 	add.w	r1, r4, #960	; 0x3c0
 8003456:	4650      	mov	r0, sl
 8003458:	f022 fa48 	bl	80258ec <stpcpy>
      strcat(TestContext_Ptr->ValidationContext.tmp_class_path, TestContext_Ptr->ValidationContext.fno.fname);
 800345c:	4639      	mov	r1, r7
      strcat(TestContext_Ptr->ValidationContext.tmp_class_path, "/");
 800345e:	7005      	strb	r5, [r0, #0]
      strcat(TestContext_Ptr->ValidationContext.tmp_class_path, TestContext_Ptr->ValidationContext.fno.fname);
 8003460:	3001      	adds	r0, #1
 8003462:	f022 fa4c 	bl	80258fe <strcpy>

      dir = &TestContext_Ptr->ValidationContext.class_dir;
      path = TestContext_Ptr->ValidationContext.tmp_class_path;
      res = f_opendir(dir, path);
 8003466:	4651      	mov	r1, sl
 8003468:	4640      	mov	r0, r8
 800346a:	f014 fb75 	bl	8017b58 <f_opendir>
 800346e:	4603      	mov	r3, r0
      }

      /*Get first file immediately*/
      dir = &TestContext_Ptr->ValidationContext.class_dir;
      fno = &TestContext_Ptr->ValidationContext.img_fno;
      res = f_readdir(dir, fno);
 8003470:	4649      	mov	r1, r9
 8003472:	4640      	mov	r0, r8
      if (res != FR_OK)
 8003474:	2b00      	cmp	r3, #0
 8003476:	f040 832d 	bne.w	8003ad4 <TEST_GetNextValidationInput+0x754>
      fno = &TestContext_Ptr->ValidationContext.img_fno;
 800347a:	f8c6 9000 	str.w	r9, [r6]
      res = f_readdir(dir, fno);
 800347e:	f014 fc71 	bl	8017d64 <f_readdir>
      if ((res == FR_OK) && (fno->fname[0] != 0) && !(fno->fattrib & AM_DIR)) /* If file */
 8003482:	2800      	cmp	r0, #0
 8003484:	d1a7      	bne.n	80033d6 <TEST_GetNextValidationInput+0x56>
 8003486:	6833      	ldr	r3, [r6, #0]
 8003488:	7d9a      	ldrb	r2, [r3, #22]
 800348a:	2a00      	cmp	r2, #0
 800348c:	d0a3      	beq.n	80033d6 <TEST_GetNextValidationInput+0x56>
 800348e:	7a1b      	ldrb	r3, [r3, #8]
 8003490:	06db      	lsls	r3, r3, #27
 8003492:	d4a0      	bmi.n	80033d6 <TEST_GetNextValidationInput+0x56>
      {
        BSP_LED_Toggle(LED_BLUE);
        UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);

        strcpy(tmp_msg, TestContext_Ptr->ValidationContext.tmp_class_path);
 8003494:	4e2d      	ldr	r6, [pc, #180]	; (800354c <TEST_GetNextValidationInput+0x1cc>)
        BSP_LED_Toggle(LED_BLUE);
 8003496:	2003      	movs	r0, #3
 8003498:	f005 fe2e 	bl	80090f8 <BSP_LED_Toggle>
        UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 800349c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80034a0:	f017 fb6c 	bl	801ab7c <UTIL_LCD_Clear>
        strcpy(tmp_msg, TestContext_Ptr->ValidationContext.tmp_class_path);
 80034a4:	4651      	mov	r1, sl
 80034a6:	4630      	mov	r0, r6
 80034a8:	f022 fa20 	bl	80258ec <stpcpy>
        strcat(tmp_msg, "/");
        strcat(tmp_msg, TestContext_Ptr->ValidationContext.img_fno.fname);
 80034ac:	f204 21ba 	addw	r1, r4, #698	; 0x2ba
        strcat(tmp_msg, "/");
 80034b0:	7005      	strb	r5, [r0, #0]
        strcat(tmp_msg, TestContext_Ptr->ValidationContext.img_fno.fname);
 80034b2:	3001      	adds	r0, #1
 80034b4:	f022 fa23 	bl	80258fe <strcpy>

        /* Read the image to DestBuffPtr */
        if (STM32Ipl_ReadImage(&tmp_img, tmp_msg) != stm32ipl_err_Ok)
 80034b8:	4631      	mov	r1, r6
 80034ba:	a81e      	add	r0, sp, #120	; 0x78
 80034bc:	f015 fe28 	bl	8019110 <STM32Ipl_ReadImage>
 80034c0:	2800      	cmp	r0, #0
 80034c2:	f000 8316 	beq.w	8003af2 <TEST_GetNextValidationInput+0x772>
        {
          while(1);
 80034c6:	e7fe      	b.n	80034c6 <TEST_GetNextValidationInput+0x146>
    }
    else
    {
      /* Program has Looped through all class dirs*/
      /*=>Close the onboard_valid_dataset directory*/
      f_closedir(&TestContext_Ptr->ValidationContext.dataset_dir);
 80034c8:	ee18 0a10 	vmov	r0, s16

      /******Moved here from the postprocess() to avoid going thru the main appli while(1) loop again after the validation is completed******/
      /* End of validation */

      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLACK);
      BSP_LCD_FillRect(0, 50, 130, 224, 224, UTIL_LCD_COLOR_WHITE);
 80034cc:	f04f 35ff 	mov.w	r5, #4294967295
      f_closedir(&TestContext_Ptr->ValidationContext.dataset_dir);
 80034d0:	f014 fc16 	bl	8017d00 <f_closedir>
      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLACK);
 80034d4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80034d8:	f017 fb30 	bl	801ab3c <UTIL_LCD_SetTextColor>
      BSP_LCD_FillRect(0, 50, 130, 224, 224, UTIL_LCD_COLOR_WHITE);
 80034dc:	23e0      	movs	r3, #224	; 0xe0
 80034de:	2282      	movs	r2, #130	; 0x82
 80034e0:	2132      	movs	r1, #50	; 0x32
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	2000      	movs	r0, #0
 80034e6:	9501      	str	r5, [sp, #4]
 80034e8:	f007 f99e 	bl	800a828 <BSP_LCD_FillRect>
      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 80034ec:	4628      	mov	r0, r5
 80034ee:	f017 fb25 	bl	801ab3c <UTIL_LCD_SetTextColor>
      UTIL_LCD_DisplayStringAt(40, LINE(10), (uint8_t*)"End of validation.", LEFT_MODE);
 80034f2:	f017 fb3b 	bl	801ab6c <UTIL_LCD_GetFont>
 80034f6:	88c1      	ldrh	r1, [r0, #6]
 80034f8:	2303      	movs	r3, #3
 80034fa:	4a15      	ldr	r2, [pc, #84]	; (8003550 <TEST_GetNextValidationInput+0x1d0>)
 80034fc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003500:	2028      	movs	r0, #40	; 0x28
 8003502:	0049      	lsls	r1, r1, #1
 8003504:	f017 fc22 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
      UTIL_LCD_DisplayStringAt(40, LINE(11), (uint8_t*)"Press wake-up", LEFT_MODE);
 8003508:	f017 fb30 	bl	801ab6c <UTIL_LCD_GetFont>
 800350c:	88c1      	ldrh	r1, [r0, #6]
 800350e:	2303      	movs	r3, #3
 8003510:	4a10      	ldr	r2, [pc, #64]	; (8003554 <TEST_GetNextValidationInput+0x1d4>)
 8003512:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 8003516:	2028      	movs	r0, #40	; 0x28
 8003518:	eb01 0145 	add.w	r1, r1, r5, lsl #1
 800351c:	f017 fc16 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
      UTIL_LCD_DisplayStringAt(40, LINE(12), (uint8_t*)"button to see report", LEFT_MODE);
 8003520:	f017 fb24 	bl	801ab6c <UTIL_LCD_GetFont>
 8003524:	88c1      	ldrh	r1, [r0, #6]
 8003526:	2303      	movs	r3, #3
 8003528:	4a0b      	ldr	r2, [pc, #44]	; (8003558 <TEST_GetNextValidationInput+0x1d8>)
 800352a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800352e:	2028      	movs	r0, #40	; 0x28
 8003530:	0089      	lsls	r1, r1, #2
 8003532:	f017 fc0b 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
      DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8003536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003538:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800353a:	f7fe f999 	bl	8001870 <DISPLAY_Refresh>

      /* Wait for button input */
      while((TestContext_Ptr->UartContext.uart_cmd_ongoing==0) && (BSP_PB_GetState(BUTTON_WAKEUP) == RESET))
 800353e:	e012      	b.n	8003566 <TEST_GetNextValidationInput+0x1e6>
 8003540:	200082a4 	.word	0x200082a4
 8003544:	20000004 	.word	0x20000004
 8003548:	08028730 	.word	0x08028730
 800354c:	200083c0 	.word	0x200083c0
 8003550:	080287fc 	.word	0x080287fc
 8003554:	08028810 	.word	0x08028810
 8003558:	08028820 	.word	0x08028820
 800355c:	f005 fe26 	bl	80091ac <BSP_PB_GetState>
 8003560:	2800      	cmp	r0, #0
 8003562:	f040 8290 	bne.w	8003a86 <TEST_GetNextValidationInput+0x706>
 8003566:	f8d4 04a0 	ldr.w	r0, [r4, #1184]	; 0x4a0
 800356a:	2800      	cmp	r0, #0
 800356c:	d0f6      	beq.n	800355c <TEST_GetNextValidationInput+0x1dc>
        ;

      if(TestContext_Ptr->UartContext.uart_cmd_ongoing)
        HAL_Delay(1000);
 800356e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003572:	f007 fe41 	bl	800b1f8 <HAL_Delay>

      UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8003576:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800357a:	f017 faff 	bl	801ab7c <UTIL_LCD_Clear>
      support += conf_matrix[target][pred];
 800357e:	f8d4 2448 	ldr.w	r2, [r4, #1096]	; 0x448
        false_positives += conf_matrix[gtruth][target];
 8003582:	f8d4 3450 	ldr.w	r3, [r4, #1104]	; 0x450
      support += conf_matrix[target][pred];
 8003586:	f8d4 144c 	ldr.w	r1, [r4, #1100]	; 0x44c
    if ((true_positives + false_positives) != 0)
 800358a:	18d0      	adds	r0, r2, r3
      support += conf_matrix[target][pred];
 800358c:	eb02 0501 	add.w	r5, r2, r1
    if ((true_positives + false_positives) != 0)
 8003590:	ee07 0a10 	vmov	s14, r0
 8003594:	f000 8266 	beq.w	8003a64 <TEST_GetNextValidationInput+0x6e4>
      precision = true_positives / (float)(true_positives + false_positives);
 8003598:	ee07 2a90 	vmov	s15, r2
 800359c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80035a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035a4:	ee87 8a87 	vdiv.f32	s16, s15, s14
    if ((true_positives + false_negatives) != 0)
 80035a8:	2d00      	cmp	r5, #0
 80035aa:	f000 8287 	beq.w	8003abc <TEST_GetNextValidationInput+0x73c>
      recall = true_positives / (float)(true_positives + false_negatives);
 80035ae:	ee07 5a10 	vmov	s14, r5
 80035b2:	eeb8 5a47 	vcvt.f32.u32	s10, s14
 80035b6:	eeb0 aa48 	vmov.f32	s20, s16
 80035ba:	ee87 9a85 	vdiv.f32	s18, s15, s10
 80035be:	ee39 8a08 	vadd.f32	s16, s18, s16
    if ((recall + precision) != 0.0f)
 80035c2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80035c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ca:	d005      	beq.n	80035d8 <TEST_GetNextValidationInput+0x258>
      f1_score = 2 * (recall * precision) / (recall + precision);
 80035cc:	ee6a 7a09 	vmul.f32	s15, s20, s18
 80035d0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80035d4:	ee87 8a88 	vdiv.f32	s16, s15, s16
      support += conf_matrix[target][pred];
 80035d8:	f8d4 0454 	ldr.w	r0, [r4, #1108]	; 0x454
    report.precisions[target] = precision;
 80035dc:	ed8d aa2e 	vstr	s20, [sp, #184]	; 0xb8
    if ((true_positives + false_positives) != 0)
 80035e0:	1809      	adds	r1, r1, r0
      support += conf_matrix[target][pred];
 80035e2:	4403      	add	r3, r0
    report.recalls[target] = recall;
 80035e4:	ed8d 9a30 	vstr	s18, [sp, #192]	; 0xc0
    report.f1_scores[target] = f1_score;
 80035e8:	ed8d 8a32 	vstr	s16, [sp, #200]	; 0xc8
    report.supports[target] = support;
 80035ec:	9534      	str	r5, [sp, #208]	; 0xd0
    if ((true_positives + false_positives) != 0)
 80035ee:	f000 8203 	beq.w	80039f8 <TEST_GetNextValidationInput+0x678>
      precision = true_positives / (float)(true_positives + false_positives);
 80035f2:	ee07 0a90 	vmov	s15, r0
 80035f6:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 80035fa:	ee07 1a90 	vmov	s15, r1
 80035fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003602:	eec6 7a07 	vdiv.f32	s15, s12, s14
    if ((true_positives + false_negatives) != 0)
 8003606:	2b00      	cmp	r3, #0
 8003608:	f000 8251 	beq.w	8003aae <TEST_GetNextValidationInput+0x72e>
      recall = true_positives / (float)(true_positives + false_negatives);
 800360c:	ee07 3a10 	vmov	s14, r3
 8003610:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8003614:	eef0 5a67 	vmov.f32	s11, s15
 8003618:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800361c:	ee77 7a87 	vadd.f32	s15, s15, s14
    if ((recall + precision) != 0.0f)
 8003620:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003628:	d005      	beq.n	8003636 <TEST_GetNextValidationInput+0x2b6>
      f1_score = 2 * (recall * precision) / (recall + precision);
 800362a:	ee25 6a87 	vmul.f32	s12, s11, s14
 800362e:	ee36 6a06 	vadd.f32	s12, s12, s12
 8003632:	eec6 7a27 	vdiv.f32	s15, s12, s15
  if (total_support != 0)
 8003636:	18ed      	adds	r5, r5, r3
    report.precisions[target] = precision;
 8003638:	edcd 5a2f 	vstr	s11, [sp, #188]	; 0xbc
    report.recalls[target] = recall;
 800363c:	ed8d 7a31 	vstr	s14, [sp, #196]	; 0xc4
    report.f1_scores[target] = f1_score;
 8003640:	edcd 7a33 	vstr	s15, [sp, #204]	; 0xcc
    report.supports[target] = support;
 8003644:	9335      	str	r3, [sp, #212]	; 0xd4
  if (total_support != 0)
 8003646:	f000 8217 	beq.w	8003a78 <TEST_GetNextValidationInput+0x6f8>
    report.accuracy = diagonal_sum / (float)total_support;
 800364a:	ee06 5a10 	vmov	s12, r5
    diagonal_sum += true_positives;
 800364e:	4402      	add	r2, r0
    report.accuracy = diagonal_sum / (float)total_support;
 8003650:	eef8 4a46 	vcvt.f32.u32	s9, s12
 8003654:	ee06 2a10 	vmov	s12, r2
 8003658:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 800365c:	ee86 fa24 	vdiv.f32	s30, s12, s9
 8003660:	eeb7 cacf 	vcvt.f64.f32	d12, s30
    report.macro_avg_precision += (float)report.precisions[target];
 8003664:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
  return report;
 8003668:	f10d 0eb8 	add.w	lr, sp, #184	; 0xb8
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 800366c:	ee25 eaa6 	vmul.f32	s28, s11, s13
  return report;
 8003670:	ed8d fa36 	vstr	s30, [sp, #216]	; 0xd8
    report.weighted_avg_recall += (float)report.recalls[target] * report.supports[target];
 8003674:	ee27 da26 	vmul.f32	s26, s14, s13
  return report;
 8003678:	9537      	str	r5, [sp, #220]	; 0xdc
 800367a:	ee86 ba24 	vdiv.f32	s22, s12, s9
 800367e:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 8003682:	f8df 83d4 	ldr.w	r8, [pc, #980]	; 8003a58 <TEST_GetNextValidationInput+0x6d8>
  UTIL_LCD_DisplayStringAt(320, LINE(0), (uint8_t *)"precision recall f1-score support", LEFT_MODE);
 8003686:	2602      	movs	r6, #2
 8003688:	4667      	mov	r7, ip
 800368a:	46e1      	mov	r9, ip
 800368c:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8003690:	46c2      	mov	sl, r8
    sprintf(line, "%20s %8.3f %8.3f %8.3f %4d", NN_OUTPUT_CLASS_LIST[target], report->precisions[target],
 8003692:	f8df b38c 	ldr.w	fp, [pc, #908]	; 8003a20 <TEST_GetNextValidationInput+0x6a0>
    report.weighted_avg_f1_score += (float)report.f1_scores[target] * report.supports[target];
 8003696:	ee66 6aa7 	vmul.f32	s13, s13, s15
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 800369a:	eeaa ea05 	vfma.f32	s28, s20, s10
    report.weighted_avg_recall += (float)report.recalls[target] * report.supports[target];
 800369e:	eea9 da05 	vfma.f32	s26, s18, s10
    report.weighted_avg_f1_score += (float)report.f1_scores[target] * report.supports[target];
 80036a2:	eee5 6a08 	vfma.f32	s13, s10, s16
    report.macro_avg_precision += (float)report.precisions[target];
 80036a6:	ee35 aa8a 	vadd.f32	s20, s11, s20
    report.macro_avg_recall += (float)report.recalls[target];
 80036aa:	ee37 9a09 	vadd.f32	s18, s14, s18
    report.macro_avg_f1_score += (float)report.f1_scores[target];
 80036ae:	ee38 8a27 	vadd.f32	s16, s16, s15
  report.macro_avg_precision /= (float)AI_NET_OUTPUT_SIZE;
 80036b2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80036b6:	ee2a aa27 	vmul.f32	s20, s20, s15
  report.macro_avg_recall /= (float)AI_NET_OUTPUT_SIZE;
 80036ba:	ee29 9a27 	vmul.f32	s18, s18, s15
  report.macro_avg_f1_score /= (float)AI_NET_OUTPUT_SIZE;
 80036be:	ee28 8a27 	vmul.f32	s16, s16, s15
  report.weighted_avg_precision /= (float)report.total_support;
 80036c2:	ee2b ea0e 	vmul.f32	s28, s22, s28
  return report;
 80036c6:	ed8d aa38 	vstr	s20, [sp, #224]	; 0xe0
  report.weighted_avg_recall /= (float)report.total_support;
 80036ca:	ee2b da0d 	vmul.f32	s26, s22, s26
  return report;
 80036ce:	ed8d 9a39 	vstr	s18, [sp, #228]	; 0xe4
  report.weighted_avg_f1_score /= (float)report.total_support;
 80036d2:	ee2b ba26 	vmul.f32	s22, s22, s13
  return report;
 80036d6:	ed8d 8a3a 	vstr	s16, [sp, #232]	; 0xe8
 80036da:	ed8d ea3b 	vstr	s28, [sp, #236]	; 0xec
 80036de:	ed8d da3c 	vstr	s26, [sp, #240]	; 0xf0
 80036e2:	ed8d ba3d 	vstr	s22, [sp, #244]	; 0xf4
 80036e6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80036ea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80036ee:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80036f2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80036f6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80036fa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80036fe:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8003702:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 8003706:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800370a:	930a      	str	r3, [sp, #40]	; 0x28
  UTIL_LCD_DisplayStringAt(320, LINE(0), (uint8_t *)"precision recall f1-score support", LEFT_MODE);
 800370c:	f017 fa2e 	bl	801ab6c <UTIL_LCD_GetFont>
 8003710:	2303      	movs	r3, #3
 8003712:	4abf      	ldr	r2, [pc, #764]	; (8003a10 <TEST_GetNextValidationInput+0x690>)
 8003714:	2100      	movs	r1, #0
 8003716:	f44f 70a0 	mov.w	r0, #320	; 0x140
 800371a:	f017 fb17 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
    sprintf(line, "%20s %8.3f %8.3f %8.3f %4d", NN_OUTPUT_CLASS_LIST[target], report->precisions[target],
 800371e:	ecb9 7a01 	vldmia	r9!, {s14}
 8003722:	4659      	mov	r1, fp
 8003724:	f85a 2b04 	ldr.w	r2, [sl], #4
 8003728:	a82e      	add	r0, sp, #184	; 0xb8
 800372a:	ed99 5a03 	vldr	s10, [r9, #12]
 800372e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003732:	ed99 6a01 	vldr	s12, [r9, #4]
 8003736:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
 800373a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800373e:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8003742:	9306      	str	r3, [sp, #24]
 8003744:	ed8d 5b04 	vstr	d5, [sp, #16]
 8003748:	ed8d 6b02 	vstr	d6, [sp, #8]
 800374c:	ed8d 7b00 	vstr	d7, [sp]
 8003750:	f022 f8ac 	bl	80258ac <siprintf>
    UTIL_LCD_DisplayStringAt(40, LINE(2 + target), (uint8_t *)line, LEFT_MODE);
 8003754:	f017 fa0a 	bl	801ab6c <UTIL_LCD_GetFont>
 8003758:	88c1      	ldrh	r1, [r0, #6]
 800375a:	2303      	movs	r3, #3
 800375c:	aa2e      	add	r2, sp, #184	; 0xb8
 800375e:	2028      	movs	r0, #40	; 0x28
 8003760:	fb06 f101 	mul.w	r1, r6, r1
 8003764:	f017 faf2 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
  for (uint32_t target = 0; target < AI_NET_OUTPUT_SIZE; target++)
 8003768:	2e03      	cmp	r6, #3
 800376a:	f040 8143 	bne.w	80039f4 <TEST_GetNextValidationInput+0x674>
  sprintf(line, "%20s %26.3f %4d", "accuracy", report->accuracy, (unsigned int)report->total_support);
 800376e:	4aa9      	ldr	r2, [pc, #676]	; (8003a14 <TEST_GetNextValidationInput+0x694>)
 8003770:	a82e      	add	r0, sp, #184	; 0xb8
 8003772:	49a9      	ldr	r1, [pc, #676]	; (8003a18 <TEST_GetNextValidationInput+0x698>)
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d", "macro avg", report->macro_avg_precision, report->macro_avg_recall,
 8003774:	eeb7 aaca 	vcvt.f64.f32	d10, s20
  sprintf(line, "%20s %26.3f %4d", "accuracy", report->accuracy, (unsigned int)report->total_support);
 8003778:	9502      	str	r5, [sp, #8]
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d", "macro avg", report->macro_avg_precision, report->macro_avg_recall,
 800377a:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
 800377e:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 8003782:	f8df 92d8 	ldr.w	r9, [pc, #728]	; 8003a5c <TEST_GetNextValidationInput+0x6dc>
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d", "weighted avg", report->weighted_avg_precision,
 8003786:	eeb7 eace 	vcvt.f64.f32	d14, s28
 800378a:	eeb7 dacd 	vcvt.f64.f32	d13, s26
 800378e:	eeb7 bacb 	vcvt.f64.f32	d11, s22
  sprintf(line, "%20s %26.3f %4d", "accuracy", report->accuracy, (unsigned int)report->total_support);
 8003792:	ed8d cb00 	vstr	d12, [sp]
 8003796:	f022 f889 	bl	80258ac <siprintf>
  UTIL_LCD_DisplayStringAt(40, LINE(3 + AI_NET_OUTPUT_SIZE), (uint8_t *)line, LEFT_MODE);
 800379a:	f017 f9e7 	bl	801ab6c <UTIL_LCD_GetFont>
 800379e:	88c1      	ldrh	r1, [r0, #6]
 80037a0:	4633      	mov	r3, r6
 80037a2:	aa2e      	add	r2, sp, #184	; 0xb8
 80037a4:	2028      	movs	r0, #40	; 0x28
 80037a6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80037aa:	f017 facf 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d", "macro avg", report->macro_avg_precision, report->macro_avg_recall,
 80037ae:	4a9b      	ldr	r2, [pc, #620]	; (8003a1c <TEST_GetNextValidationInput+0x69c>)
 80037b0:	499b      	ldr	r1, [pc, #620]	; (8003a20 <TEST_GetNextValidationInput+0x6a0>)
 80037b2:	a82e      	add	r0, sp, #184	; 0xb8
 80037b4:	9506      	str	r5, [sp, #24]
 80037b6:	ed8d ab00 	vstr	d10, [sp]
 80037ba:	ed8d 9b02 	vstr	d9, [sp, #8]
 80037be:	ed8d 8b04 	vstr	d8, [sp, #16]
 80037c2:	f022 f873 	bl	80258ac <siprintf>
  UTIL_LCD_DisplayStringAt(40, LINE(4 + AI_NET_OUTPUT_SIZE), (uint8_t *)line, LEFT_MODE);
 80037c6:	f017 f9d1 	bl	801ab6c <UTIL_LCD_GetFont>
 80037ca:	88c1      	ldrh	r1, [r0, #6]
 80037cc:	4633      	mov	r3, r6
 80037ce:	aa2e      	add	r2, sp, #184	; 0xb8
 80037d0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80037d4:	2028      	movs	r0, #40	; 0x28
 80037d6:	0049      	lsls	r1, r1, #1
 80037d8:	f017 fab8 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d", "weighted avg", report->weighted_avg_precision,
 80037dc:	4a91      	ldr	r2, [pc, #580]	; (8003a24 <TEST_GetNextValidationInput+0x6a4>)
 80037de:	4990      	ldr	r1, [pc, #576]	; (8003a20 <TEST_GetNextValidationInput+0x6a0>)
 80037e0:	a82e      	add	r0, sp, #184	; 0xb8
 80037e2:	9506      	str	r5, [sp, #24]
 80037e4:	ed8d eb00 	vstr	d14, [sp]
 80037e8:	ed8d db02 	vstr	d13, [sp, #8]
 80037ec:	ed8d bb04 	vstr	d11, [sp, #16]
 80037f0:	f022 f85c 	bl	80258ac <siprintf>
  UTIL_LCD_DisplayStringAt(40, LINE(5 + AI_NET_OUTPUT_SIZE), (uint8_t *)line, LEFT_MODE);
 80037f4:	f017 f9ba 	bl	801ab6c <UTIL_LCD_GetFont>
 80037f8:	88c1      	ldrh	r1, [r0, #6]
 80037fa:	4633      	mov	r3, r6
 80037fc:	aa2e      	add	r2, sp, #184	; 0xb8
 80037fe:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8003802:	2028      	movs	r0, #40	; 0x28
 8003804:	f017 faa2 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
  DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8003808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    sprintf(line, "%20s %8.3f %8.3f %8.3f %4d\n", NN_OUTPUT_CLASS_LIST[target], report->precisions[target],
 800380a:	4e87      	ldr	r6, [pc, #540]	; (8003a28 <TEST_GetNextValidationInput+0x6a8>)
  DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 800380c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800380e:	f7fe f82f 	bl	8001870 <DISPLAY_Refresh>
  f_open(&File, path, FA_CREATE_ALWAYS | FA_WRITE);
 8003812:	220a      	movs	r2, #10
 8003814:	4985      	ldr	r1, [pc, #532]	; (8003a2c <TEST_GetNextValidationInput+0x6ac>)
 8003816:	a82e      	add	r0, sp, #184	; 0xb8
 8003818:	f013 fa2e 	bl	8016c78 <f_open>
  f_close(&File);
 800381c:	a82e      	add	r0, sp, #184	; 0xb8
 800381e:	f013 ff41 	bl	80176a4 <f_close>
  f_open(&File, path, FA_OPEN_APPEND | FA_WRITE);
 8003822:	4982      	ldr	r1, [pc, #520]	; (8003a2c <TEST_GetNextValidationInput+0x6ac>)
 8003824:	2232      	movs	r2, #50	; 0x32
 8003826:	a82e      	add	r0, sp, #184	; 0xb8
 8003828:	f013 fa26 	bl	8016c78 <f_open>
  f_printf(&File, "                       precision recall f1-score support\n");
 800382c:	4980      	ldr	r1, [pc, #512]	; (8003a30 <TEST_GetNextValidationInput+0x6b0>)
 800382e:	a82e      	add	r0, sp, #184	; 0xb8
 8003830:	f014 fd42 	bl	80182b8 <f_printf>
    sprintf(line, "%20s %8.3f %8.3f %8.3f %4d\n", NN_OUTPUT_CLASS_LIST[target], report->precisions[target],
 8003834:	ecb7 7a01 	vldmia	r7!, {s14}
 8003838:	4631      	mov	r1, r6
 800383a:	f858 2b04 	ldr.w	r2, [r8], #4
 800383e:	a81e      	add	r0, sp, #120	; 0x78
 8003840:	ed97 5a03 	vldr	s10, [r7, #12]
 8003844:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003848:	ed97 6a01 	vldr	s12, [r7, #4]
 800384c:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8003856:	9306      	str	r3, [sp, #24]
 8003858:	ed8d 5b04 	vstr	d5, [sp, #16]
 800385c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8003860:	ed8d 7b00 	vstr	d7, [sp]
 8003864:	f022 f822 	bl	80258ac <siprintf>
    f_write(&File, line, strlen(line), (void *)&byteswritten);
 8003868:	a81e      	add	r0, sp, #120	; 0x78
 800386a:	f7fc fd43 	bl	80002f4 <strlen>
 800386e:	ab0d      	add	r3, sp, #52	; 0x34
 8003870:	4602      	mov	r2, r0
 8003872:	a91e      	add	r1, sp, #120	; 0x78
 8003874:	a82e      	add	r0, sp, #184	; 0xb8
 8003876:	f013 fdb5 	bl	80173e4 <f_write>
  for (uint32_t target = 0; target < AI_NET_OUTPUT_SIZE; target++)
 800387a:	45c8      	cmp	r8, r9
 800387c:	d1da      	bne.n	8003834 <TEST_GetNextValidationInput+0x4b4>
  f_printf(&File, "\n");
 800387e:	496d      	ldr	r1, [pc, #436]	; (8003a34 <TEST_GetNextValidationInput+0x6b4>)
 8003880:	a82e      	add	r0, sp, #184	; 0xb8
 8003882:	f014 fd19 	bl	80182b8 <f_printf>
  sprintf(line, "%20s %26.3f %4d\n", "accuracy", report->accuracy, (unsigned int)report->total_support);
 8003886:	4a63      	ldr	r2, [pc, #396]	; (8003a14 <TEST_GetNextValidationInput+0x694>)
 8003888:	496b      	ldr	r1, [pc, #428]	; (8003a38 <TEST_GetNextValidationInput+0x6b8>)
 800388a:	a81e      	add	r0, sp, #120	; 0x78
 800388c:	9502      	str	r5, [sp, #8]
 800388e:	ed8d cb00 	vstr	d12, [sp]
 8003892:	f022 f80b 	bl	80258ac <siprintf>
  f_write(&File, line, strlen(line), (void *)&byteswritten);
 8003896:	a81e      	add	r0, sp, #120	; 0x78
 8003898:	f7fc fd2c 	bl	80002f4 <strlen>
 800389c:	ab0d      	add	r3, sp, #52	; 0x34
 800389e:	4602      	mov	r2, r0
 80038a0:	a91e      	add	r1, sp, #120	; 0x78
 80038a2:	a82e      	add	r0, sp, #184	; 0xb8
 80038a4:	f013 fd9e 	bl	80173e4 <f_write>
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d\n", "macro avg", report->macro_avg_precision, report->macro_avg_recall,
 80038a8:	4a5c      	ldr	r2, [pc, #368]	; (8003a1c <TEST_GetNextValidationInput+0x69c>)
 80038aa:	495f      	ldr	r1, [pc, #380]	; (8003a28 <TEST_GetNextValidationInput+0x6a8>)
 80038ac:	a81e      	add	r0, sp, #120	; 0x78
 80038ae:	9506      	str	r5, [sp, #24]
 80038b0:	ed8d 8b04 	vstr	d8, [sp, #16]
 80038b4:	ed8d 9b02 	vstr	d9, [sp, #8]
 80038b8:	ed8d ab00 	vstr	d10, [sp]
 80038bc:	f021 fff6 	bl	80258ac <siprintf>
  f_write(&File, line, strlen(line), (void *)&byteswritten);
 80038c0:	a81e      	add	r0, sp, #120	; 0x78
 80038c2:	f7fc fd17 	bl	80002f4 <strlen>
 80038c6:	ab0d      	add	r3, sp, #52	; 0x34
 80038c8:	4602      	mov	r2, r0
 80038ca:	a91e      	add	r1, sp, #120	; 0x78
 80038cc:	a82e      	add	r0, sp, #184	; 0xb8
 80038ce:	f013 fd89 	bl	80173e4 <f_write>
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d\n", "weighted avg", report->weighted_avg_precision,
 80038d2:	4a54      	ldr	r2, [pc, #336]	; (8003a24 <TEST_GetNextValidationInput+0x6a4>)
 80038d4:	4954      	ldr	r1, [pc, #336]	; (8003a28 <TEST_GetNextValidationInput+0x6a8>)
 80038d6:	a81e      	add	r0, sp, #120	; 0x78
 80038d8:	9506      	str	r5, [sp, #24]
 80038da:	ed8d bb04 	vstr	d11, [sp, #16]
 80038de:	ed8d db02 	vstr	d13, [sp, #8]
 80038e2:	ed8d eb00 	vstr	d14, [sp]
 80038e6:	f021 ffe1 	bl	80258ac <siprintf>
  f_write(&File, line, strlen(line), (void *)&byteswritten);
 80038ea:	a81e      	add	r0, sp, #120	; 0x78
 80038ec:	f7fc fd02 	bl	80002f4 <strlen>
 80038f0:	ab0d      	add	r3, sp, #52	; 0x34
 80038f2:	4602      	mov	r2, r0
 80038f4:	a91e      	add	r1, sp, #120	; 0x78
 80038f6:	a82e      	add	r0, sp, #184	; 0xb8
 80038f8:	f013 fd74 	bl	80173e4 <f_write>
  f_close(&File);
 80038fc:	a82e      	add	r0, sp, #184	; 0xb8
 80038fe:	f013 fed1 	bl	80176a4 <f_close>

      DisplayClassificationReport(TestContext_Ptr, &report);

      WriteClassificationReport(&report, "classification_report.txt");

      TestContext_Ptr->ValidationContext.final_accuracy=report.accuracy;
 8003902:	f204 4344 	addw	r3, r4, #1092	; 0x444
  f_open(&File, path, FA_CREATE_ALWAYS | FA_WRITE);
 8003906:	220a      	movs	r2, #10
 8003908:	494c      	ldr	r1, [pc, #304]	; (8003a3c <TEST_GetNextValidationInput+0x6bc>)
      TestContext_Ptr->ValidationContext.final_accuracy=report.accuracy;
 800390a:	ed83 fa00 	vstr	s30, [r3]
  f_open(&File, path, FA_CREATE_ALWAYS | FA_WRITE);
 800390e:	a82e      	add	r0, sp, #184	; 0xb8
 8003910:	f013 f9b2 	bl	8016c78 <f_open>
  f_close(&File);
 8003914:	a82e      	add	r0, sp, #184	; 0xb8
 8003916:	f013 fec5 	bl	80176a4 <f_close>
  f_open(&File, path, FA_OPEN_APPEND | FA_WRITE);
 800391a:	2232      	movs	r2, #50	; 0x32
 800391c:	4947      	ldr	r1, [pc, #284]	; (8003a3c <TEST_GetNextValidationInput+0x6bc>)
 800391e:	a82e      	add	r0, sp, #184	; 0xb8
 8003920:	f013 f9aa 	bl	8016c78 <f_open>
  f_printf(&File, ",Confusion Matrix\n\n");
 8003924:	4946      	ldr	r1, [pc, #280]	; (8003a40 <TEST_GetNextValidationInput+0x6c0>)
 8003926:	a82e      	add	r0, sp, #184	; 0xb8
 8003928:	f014 fcc6 	bl	80182b8 <f_printf>
  f_printf(&File, ",Predicted\n");
 800392c:	4945      	ldr	r1, [pc, #276]	; (8003a44 <TEST_GetNextValidationInput+0x6c4>)
 800392e:	a82e      	add	r0, sp, #184	; 0xb8
 8003930:	f014 fcc2 	bl	80182b8 <f_printf>
    f_printf(&File, "%s,", NN_OUTPUT_CLASS_LIST[row]);
 8003934:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8003936:	4944      	ldr	r1, [pc, #272]	; (8003a48 <TEST_GetNextValidationInput+0x6c8>)
 8003938:	a82e      	add	r0, sp, #184	; 0xb8
 800393a:	682a      	ldr	r2, [r5, #0]
 800393c:	f014 fcbc 	bl	80182b8 <f_printf>
      f_printf(&File, "%d,", value);
 8003940:	f8d4 2448 	ldr.w	r2, [r4, #1096]	; 0x448
 8003944:	4941      	ldr	r1, [pc, #260]	; (8003a4c <TEST_GetNextValidationInput+0x6cc>)
 8003946:	a82e      	add	r0, sp, #184	; 0xb8
 8003948:	f014 fcb6 	bl	80182b8 <f_printf>
 800394c:	f8d4 244c 	ldr.w	r2, [r4, #1100]	; 0x44c
 8003950:	493e      	ldr	r1, [pc, #248]	; (8003a4c <TEST_GetNextValidationInput+0x6cc>)
 8003952:	a82e      	add	r0, sp, #184	; 0xb8
 8003954:	f014 fcb0 	bl	80182b8 <f_printf>
    f_printf(&File, "\n");
 8003958:	4936      	ldr	r1, [pc, #216]	; (8003a34 <TEST_GetNextValidationInput+0x6b4>)
 800395a:	a82e      	add	r0, sp, #184	; 0xb8
 800395c:	f014 fcac 	bl	80182b8 <f_printf>
    f_printf(&File, "%s,", NN_OUTPUT_CLASS_LIST[row]);
 8003960:	686a      	ldr	r2, [r5, #4]
 8003962:	4939      	ldr	r1, [pc, #228]	; (8003a48 <TEST_GetNextValidationInput+0x6c8>)
 8003964:	a82e      	add	r0, sp, #184	; 0xb8
 8003966:	f014 fca7 	bl	80182b8 <f_printf>
      f_printf(&File, "%d,", value);
 800396a:	f8d4 2450 	ldr.w	r2, [r4, #1104]	; 0x450
 800396e:	4937      	ldr	r1, [pc, #220]	; (8003a4c <TEST_GetNextValidationInput+0x6cc>)
 8003970:	a82e      	add	r0, sp, #184	; 0xb8
 8003972:	f014 fca1 	bl	80182b8 <f_printf>
 8003976:	f8d4 2454 	ldr.w	r2, [r4, #1108]	; 0x454
 800397a:	4934      	ldr	r1, [pc, #208]	; (8003a4c <TEST_GetNextValidationInput+0x6cc>)
 800397c:	a82e      	add	r0, sp, #184	; 0xb8
 800397e:	f014 fc9b 	bl	80182b8 <f_printf>
      f_printf(&File, " Ground truth");
 8003982:	4933      	ldr	r1, [pc, #204]	; (8003a50 <TEST_GetNextValidationInput+0x6d0>)
 8003984:	a82e      	add	r0, sp, #184	; 0xb8
 8003986:	f014 fc97 	bl	80182b8 <f_printf>
    f_printf(&File, "\n");
 800398a:	492a      	ldr	r1, [pc, #168]	; (8003a34 <TEST_GetNextValidationInput+0x6b4>)
 800398c:	a82e      	add	r0, sp, #184	; 0xb8
 800398e:	f014 fc93 	bl	80182b8 <f_printf>
  f_close(&File);
 8003992:	a82e      	add	r0, sp, #184	; 0xb8
 8003994:	f013 fe86 	bl	80176a4 <f_close>

      WriteConfusionMatrix(TestContext_Ptr->ValidationContext.valid_conf_matrix, "confusion_matrix.csv");

      if(TestContext_Ptr->UartContext.uart_cmd_ongoing)
 8003998:	f8d4 34a0 	ldr.w	r3, [r4, #1184]	; 0x4a0
 800399c:	2b00      	cmp	r3, #0
 800399e:	f040 8094 	bne.w	8003aca <TEST_GetNextValidationInput+0x74a>
        HAL_Delay(1000);

      TestContext_Ptr->ValidationContext.validation_completed =1;
 80039a2:	2301      	movs	r3, #1
 80039a4:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
    }
#endif /* OBJECTDETECT */

  }
}
 80039a8:	f50d 7d3b 	add.w	sp, sp, #748	; 0x2ec
 80039ac:	ecbd 8b10 	vpop	{d8-d15}
 80039b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((res == FR_OK) && (fno->fname[0] != 0) && !(fno->fattrib & AM_DIR)) /* If file */
 80039b4:	7a1b      	ldrb	r3, [r3, #8]
 80039b6:	06d9      	lsls	r1, r3, #27
 80039b8:	f53f acfe 	bmi.w	80033b8 <TEST_GetNextValidationInput+0x38>
    strcpy(tmp_msg, TestContext_Ptr->ValidationContext.tmp_class_path);
 80039bc:	4d25      	ldr	r5, [pc, #148]	; (8003a54 <TEST_GetNextValidationInput+0x6d4>)
    BSP_LED_Toggle(LED_BLUE);
 80039be:	2003      	movs	r0, #3
 80039c0:	f005 fb9a 	bl	80090f8 <BSP_LED_Toggle>
    UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 80039c4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80039c8:	f017 f8d8 	bl	801ab7c <UTIL_LCD_Clear>
    strcpy(tmp_msg, TestContext_Ptr->ValidationContext.tmp_class_path);
 80039cc:	f504 6180 	add.w	r1, r4, #1024	; 0x400
 80039d0:	4628      	mov	r0, r5
 80039d2:	f021 ff8b 	bl	80258ec <stpcpy>
    strcat(tmp_msg, "/");
 80039d6:	232f      	movs	r3, #47	; 0x2f
    strcat(tmp_msg, TestContext_Ptr->ValidationContext.img_fno.fname);
 80039d8:	f204 21ba 	addw	r1, r4, #698	; 0x2ba
 80039dc:	3001      	adds	r0, #1
    strcat(tmp_msg, "/");
 80039de:	f800 3c01 	strb.w	r3, [r0, #-1]
    strcat(tmp_msg, TestContext_Ptr->ValidationContext.img_fno.fname);
 80039e2:	f021 ff8c 	bl	80258fe <strcpy>
    if (STM32Ipl_ReadImage(&tmp_img, tmp_msg) != stm32ipl_err_Ok)
 80039e6:	4629      	mov	r1, r5
 80039e8:	a81e      	add	r0, sp, #120	; 0x78
 80039ea:	f015 fb91 	bl	8019110 <STM32Ipl_ReadImage>
 80039ee:	2800      	cmp	r0, #0
 80039f0:	d071      	beq.n	8003ad6 <TEST_GetNextValidationInput+0x756>
      while(1);
 80039f2:	e7fe      	b.n	80039f2 <TEST_GetNextValidationInput+0x672>
 80039f4:	2603      	movs	r6, #3
 80039f6:	e692      	b.n	800371e <TEST_GetNextValidationInput+0x39e>
    if ((true_positives + false_negatives) != 0)
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d151      	bne.n	8003aa0 <TEST_GetNextValidationInput+0x720>
    float recall = 0.0f;
 80039fc:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003a60 <TEST_GetNextValidationInput+0x6e0>
    float precision = 0.0f;
 8003a00:	eef0 5a47 	vmov.f32	s11, s14
    float f1_score = 0.0f;
 8003a04:	eef0 7a47 	vmov.f32	s15, s14
 8003a08:	eef0 6a47 	vmov.f32	s13, s14
 8003a0c:	e613      	b.n	8003636 <TEST_GetNextValidationInput+0x2b6>
 8003a0e:	bf00      	nop
 8003a10:	08028838 	.word	0x08028838
 8003a14:	08028878 	.word	0x08028878
 8003a18:	08028884 	.word	0x08028884
 8003a1c:	08028894 	.word	0x08028894
 8003a20:	0802885c 	.word	0x0802885c
 8003a24:	080288a0 	.word	0x080288a0
 8003a28:	08028908 	.word	0x08028908
 8003a2c:	080288b0 	.word	0x080288b0
 8003a30:	080288cc 	.word	0x080288cc
 8003a34:	080289e8 	.word	0x080289e8
 8003a38:	08028924 	.word	0x08028924
 8003a3c:	08028938 	.word	0x08028938
 8003a40:	08028950 	.word	0x08028950
 8003a44:	08028964 	.word	0x08028964
 8003a48:	08028970 	.word	0x08028970
 8003a4c:	08028974 	.word	0x08028974
 8003a50:	08028978 	.word	0x08028978
 8003a54:	200083c0 	.word	0x200083c0
 8003a58:	20000004 	.word	0x20000004
 8003a5c:	2000000c 	.word	0x2000000c
 8003a60:	00000000 	.word	0x00000000
    if ((true_positives + false_negatives) != 0)
 8003a64:	b9ad      	cbnz	r5, 8003a92 <TEST_GetNextValidationInput+0x712>
    float recall = 0.0f;
 8003a66:	ed1f 9a02 	vldr	s18, [pc, #-8]	; 8003a60 <TEST_GetNextValidationInput+0x6e0>
    float precision = 0.0f;
 8003a6a:	eeb0 aa49 	vmov.f32	s20, s18
    float f1_score = 0.0f;
 8003a6e:	eeb0 8a49 	vmov.f32	s16, s18
 8003a72:	eeb0 5a49 	vmov.f32	s10, s18
 8003a76:	e5af      	b.n	80035d8 <TEST_GetNextValidationInput+0x258>
 8003a78:	ed5f 4a07 	vldr	s9, [pc, #-28]	; 8003a60 <TEST_GetNextValidationInput+0x6e0>
 8003a7c:	ed9f cb28 	vldr	d12, [pc, #160]	; 8003b20 <TEST_GetNextValidationInput+0x7a0>
  report.accuracy = 0.0f;
 8003a80:	eeb0 fa64 	vmov.f32	s30, s9
 8003a84:	e5ee      	b.n	8003664 <TEST_GetNextValidationInput+0x2e4>
      if(TestContext_Ptr->UartContext.uart_cmd_ongoing)
 8003a86:	f8d4 34a0 	ldr.w	r3, [r4, #1184]	; 0x4a0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f43f ad73 	beq.w	8003576 <TEST_GetNextValidationInput+0x1f6>
 8003a90:	e56d      	b.n	800356e <TEST_GetNextValidationInput+0x1ee>
 8003a92:	ee07 2a90 	vmov	s15, r2
    float precision = 0.0f;
 8003a96:	ed9f 8a24 	vldr	s16, [pc, #144]	; 8003b28 <TEST_GetNextValidationInput+0x7a8>
 8003a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a9e:	e586      	b.n	80035ae <TEST_GetNextValidationInput+0x22e>
 8003aa0:	ee07 0a90 	vmov	s15, r0
 8003aa4:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8003aa8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8003b28 <TEST_GetNextValidationInput+0x7a8>
 8003aac:	e5ae      	b.n	800360c <TEST_GetNextValidationInput+0x28c>
    float recall = 0.0f;
 8003aae:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8003b28 <TEST_GetNextValidationInput+0x7a8>
      precision = true_positives / (float)(true_positives + false_positives);
 8003ab2:	eef0 5a67 	vmov.f32	s11, s15
 8003ab6:	eef0 6a47 	vmov.f32	s13, s14
 8003aba:	e5b1      	b.n	8003620 <TEST_GetNextValidationInput+0x2a0>
    float recall = 0.0f;
 8003abc:	ed9f 9a1a 	vldr	s18, [pc, #104]	; 8003b28 <TEST_GetNextValidationInput+0x7a8>
      precision = true_positives / (float)(true_positives + false_positives);
 8003ac0:	eeb0 aa48 	vmov.f32	s20, s16
 8003ac4:	eeb0 5a49 	vmov.f32	s10, s18
 8003ac8:	e57b      	b.n	80035c2 <TEST_GetNextValidationInput+0x242>
        HAL_Delay(1000);
 8003aca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ace:	f007 fb93 	bl	800b1f8 <HAL_Delay>
 8003ad2:	e766      	b.n	80039a2 <TEST_GetNextValidationInput+0x622>
        while (1);
 8003ad4:	e7fe      	b.n	8003ad4 <TEST_GetNextValidationInput+0x754>
    val_img.w = tmp_img.w;
 8003ad6:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
    val_img.data = DestBuffPtr;
 8003ada:	990b      	ldr	r1, [sp, #44]	; 0x2c
    if (STM32Ipl_CopyData(&tmp_img, &val_img) != stm32ipl_err_Ok)
 8003adc:	a81e      	add	r0, sp, #120	; 0x78
    val_img.w = tmp_img.w;
 8003ade:	e9cd 232e 	strd	r2, r3, [sp, #184]	; 0xb8
 8003ae2:	9b20      	ldr	r3, [sp, #128]	; 0x80
    val_img.data = DestBuffPtr;
 8003ae4:	9131      	str	r1, [sp, #196]	; 0xc4
    if (STM32Ipl_CopyData(&tmp_img, &val_img) != stm32ipl_err_Ok)
 8003ae6:	a92e      	add	r1, sp, #184	; 0xb8
    val_img.w = tmp_img.w;
 8003ae8:	9330      	str	r3, [sp, #192]	; 0xc0
    if (STM32Ipl_CopyData(&tmp_img, &val_img) != stm32ipl_err_Ok)
 8003aea:	f014 ffed 	bl	8018ac8 <STM32Ipl_CopyData>
 8003aee:	b170      	cbz	r0, 8003b0e <TEST_GetNextValidationInput+0x78e>
      while (1); /* Invalid dimensions or format */
 8003af0:	e7fe      	b.n	8003af0 <TEST_GetNextValidationInput+0x770>
        val_img.w = tmp_img.w;
 8003af2:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
        val_img.data = DestBuffPtr;
 8003af6:	990b      	ldr	r1, [sp, #44]	; 0x2c
        if (STM32Ipl_CopyData(&tmp_img, &val_img) != stm32ipl_err_Ok)
 8003af8:	a81e      	add	r0, sp, #120	; 0x78
        val_img.w = tmp_img.w;
 8003afa:	e9cd 232e 	strd	r2, r3, [sp, #184]	; 0xb8
 8003afe:	9b20      	ldr	r3, [sp, #128]	; 0x80
        val_img.data = DestBuffPtr;
 8003b00:	9131      	str	r1, [sp, #196]	; 0xc4
        if (STM32Ipl_CopyData(&tmp_img, &val_img) != stm32ipl_err_Ok)
 8003b02:	a92e      	add	r1, sp, #184	; 0xb8
        val_img.w = tmp_img.w;
 8003b04:	9330      	str	r3, [sp, #192]	; 0xc0
        if (STM32Ipl_CopyData(&tmp_img, &val_img) != stm32ipl_err_Ok)
 8003b06:	f014 ffdf 	bl	8018ac8 <STM32Ipl_CopyData>
 8003b0a:	b100      	cbz	r0, 8003b0e <TEST_GetNextValidationInput+0x78e>
          while (1); // Invalid dim or format
 8003b0c:	e7fe      	b.n	8003b0c <TEST_GetNextValidationInput+0x78c>
        STM32Ipl_ReleaseData(&tmp_img);
 8003b0e:	a81e      	add	r0, sp, #120	; 0x78
 8003b10:	f014 ff7a 	bl	8018a08 <STM32Ipl_ReleaseData>
        App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready = 1;
 8003b14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b16:	2201      	movs	r2, #1
 8003b18:	69db      	ldr	r3, [r3, #28]
 8003b1a:	751a      	strb	r2, [r3, #20]
      if ((res == FR_OK) && (fno->fname[0] != 0) && !(fno->fattrib & AM_DIR)) /* If file */
 8003b1c:	e744      	b.n	80039a8 <TEST_GetNextValidationInput+0x628>
 8003b1e:	bf00      	nop
	...

08003b2c <TEST_Run>:
  char msg[70];
  uint8_t sd_error;
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;


  if((Operating_Mode == DUMP) && (TestContext_Ptr->TestRunContext.src_buff_addr != NULL))
 8003b2c:	2903      	cmp	r1, #3
{
 8003b2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b32:	4604      	mov	r4, r0
 8003b34:	b0da      	sub	sp, #360	; 0x168
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 8003b36:	f8d0 5580 	ldr.w	r5, [r0, #1408]	; 0x580
  if((Operating_Mode == DUMP) && (TestContext_Ptr->TestRunContext.src_buff_addr != NULL))
 8003b3a:	d039      	beq.n	8003bb0 <TEST_Run+0x84>
        }
      }
      break;
    }
  }
  else if((Operating_Mode == CAPTURE) && (TestContext_Ptr->TestRunContext.PerformCapture == 1) && (TestContext_Ptr->TestRunContext.src_buff_addr != NULL))
 8003b3c:	2904      	cmp	r1, #4
 8003b3e:	d002      	beq.n	8003b46 <TEST_Run+0x1a>

    default:
      break;
    }
  }
}
 8003b40:	b05a      	add	sp, #360	; 0x168
 8003b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  else if((Operating_Mode == CAPTURE) && (TestContext_Ptr->TestRunContext.PerformCapture == 1) && (TestContext_Ptr->TestRunContext.src_buff_addr != NULL))
 8003b46:	f8d0 3560 	ldr.w	r3, [r0, #1376]	; 0x560
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d1f8      	bne.n	8003b40 <TEST_Run+0x14>
 8003b4e:	f8d0 1548 	ldr.w	r1, [r0, #1352]	; 0x548
 8003b52:	2900      	cmp	r1, #0
 8003b54:	d0f4      	beq.n	8003b40 <TEST_Run+0x14>
    switch(TestContext_Ptr->CaptureContext.capture_state)
 8003b56:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	f000 813f 	beq.w	8003dde <TEST_Run+0x2b2>
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d1ed      	bne.n	8003b40 <TEST_Run+0x14>
      while(App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 8003b64:	69ea      	ldr	r2, [r5, #28]
 8003b66:	7d13      	ldrb	r3, [r2, #20]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d0fc      	beq.n	8003b66 <TEST_Run+0x3a>
      if(TestContext_Ptr->TestRunContext.rb_swap == 1)
 8003b6c:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	f000 829f 	beq.w	80040b4 <TEST_Run+0x588>
      if (TestContext_Ptr->CaptureContext.capture_file_format == DATA_FORMAT_BMP)
 8003b76:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	f000 828e 	beq.w	800409c <TEST_Run+0x570>
      else if (TestContext_Ptr->CaptureContext.capture_file_format == DATA_FORMAT_RAW)
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f040 80c4 	bne.w	8003d0e <TEST_Run+0x1e2>
        sprintf(file_name, "%s/%s_%d.raw", TestContext_Ptr->CaptureContext.capture_folder_name, TestContext_Ptr->TestRunContext.src_buff_name, (unsigned int)TestContext_Ptr->CaptureContext.capture_frame_count);
 8003b86:	f8d4 10c8 	ldr.w	r1, [r4, #200]	; 0xc8
 8003b8a:	f104 02de 	add.w	r2, r4, #222	; 0xde
 8003b8e:	f8d4 354c 	ldr.w	r3, [r4, #1356]	; 0x54c
 8003b92:	a834      	add	r0, sp, #208	; 0xd0
 8003b94:	9100      	str	r1, [sp, #0]
 8003b96:	49ca      	ldr	r1, [pc, #808]	; (8003ec0 <TEST_Run+0x394>)
 8003b98:	f021 fe88 	bl	80258ac <siprintf>
        write_raw(file_name, dst, size, App_Cxt_Ptr);
 8003b9c:	a834      	add	r0, sp, #208	; 0xd0
 8003b9e:	f105 0324 	add.w	r3, r5, #36	; 0x24
 8003ba2:	f8d4 255c 	ldr.w	r2, [r4, #1372]	; 0x55c
 8003ba6:	f8d4 1548 	ldr.w	r1, [r4, #1352]	; 0x548
 8003baa:	f7fe f835 	bl	8001c18 <write_raw.isra.0>
}
 8003bae:	e7c7      	b.n	8003b40 <TEST_Run+0x14>
  if((Operating_Mode == DUMP) && (TestContext_Ptr->TestRunContext.src_buff_addr != NULL))
 8003bb0:	f8d0 3548 	ldr.w	r3, [r0, #1352]	; 0x548
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d0c3      	beq.n	8003b40 <TEST_Run+0x14>
    switch(TestContext_Ptr->DumpContext.dump_state)
 8003bb8:	f8d0 60b8 	ldr.w	r6, [r0, #184]	; 0xb8
 8003bbc:	2e01      	cmp	r6, #1
 8003bbe:	d02f      	beq.n	8003c20 <TEST_Run+0xf4>
 8003bc0:	2e02      	cmp	r6, #2
 8003bc2:	d1bd      	bne.n	8003b40 <TEST_Run+0x14>
      if((App_Cxt_Ptr->Test_ContextPtr->UartContext.uart_cmd_ongoing) && (App_Cxt_Ptr->Test_ContextPtr->UartContext.uart_host_requested_dump_memory == SDRAM))
 8003bc4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003bc6:	f8d3 24a0 	ldr.w	r2, [r3, #1184]	; 0x4a0
 8003bca:	2a00      	cmp	r2, #0
 8003bcc:	f000 8094 	beq.w	8003cf8 <TEST_Run+0x1cc>
 8003bd0:	f893 34a6 	ldrb.w	r3, [r3, #1190]	; 0x4a6
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	f040 808f 	bne.w	8003cf8 <TEST_Run+0x1cc>
        for(int i=0; i<strlen(TestContext_Ptr->TestRunContext.src_buff_name);i++)
 8003bda:	2600      	movs	r6, #0
 8003bdc:	e006      	b.n	8003bec <TEST_Run+0xc0>
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(TestContext_Ptr->TestRunContext.src_buff_name+i);
 8003bde:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003be0:	6813      	ldr	r3, [r2, #0]
 8003be2:	1c59      	adds	r1, r3, #1
 8003be4:	6011      	str	r1, [r2, #0]
 8003be6:	5dba      	ldrb	r2, [r7, r6]
        for(int i=0; i<strlen(TestContext_Ptr->TestRunContext.src_buff_name);i++)
 8003be8:	3601      	adds	r6, #1
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(TestContext_Ptr->TestRunContext.src_buff_name+i);
 8003bea:	701a      	strb	r2, [r3, #0]
        for(int i=0; i<strlen(TestContext_Ptr->TestRunContext.src_buff_name);i++)
 8003bec:	f8d4 754c 	ldr.w	r7, [r4, #1356]	; 0x54c
 8003bf0:	4638      	mov	r0, r7
 8003bf2:	f7fc fb7f 	bl	80002f4 <strlen>
 8003bf6:	42b0      	cmp	r0, r6
 8003bf8:	d8f1      	bhi.n	8003bde <TEST_Run+0xb2>
        for(int i=0; i<TestContext_Ptr->TestRunContext.src_size;i++)
 8003bfa:	f8d4 355c 	ldr.w	r3, [r4, #1372]	; 0x55c
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d09e      	beq.n	8003b40 <TEST_Run+0x14>
 8003c02:	2300      	movs	r3, #0
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(((uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr)+i);
 8003c04:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8003c06:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
 8003c0a:	680a      	ldr	r2, [r1, #0]
 8003c0c:	1c56      	adds	r6, r2, #1
 8003c0e:	600e      	str	r6, [r1, #0]
 8003c10:	5cc1      	ldrb	r1, [r0, r3]
        for(int i=0; i<TestContext_Ptr->TestRunContext.src_size;i++)
 8003c12:	3301      	adds	r3, #1
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(((uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr)+i);
 8003c14:	7011      	strb	r1, [r2, #0]
        for(int i=0; i<TestContext_Ptr->TestRunContext.src_size;i++)
 8003c16:	f8d4 255c 	ldr.w	r2, [r4, #1372]	; 0x55c
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d8f2      	bhi.n	8003c04 <TEST_Run+0xd8>
 8003c1e:	e78f      	b.n	8003b40 <TEST_Run+0x14>
      BSP_LED_Off(LED_GREEN);
 8003c20:	2000      	movs	r0, #0
 8003c22:	f005 fa59 	bl	80090d8 <BSP_LED_Off>
      BSP_LED_On(LED_RED);
 8003c26:	2002      	movs	r0, #2
 8003c28:	f005 fa46 	bl	80090b8 <BSP_LED_On>
      UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"DUMP BUSY ", RIGHT_MODE);
 8003c2c:	f016 ff9e 	bl	801ab6c <UTIL_LCD_GetFont>
 8003c30:	2302      	movs	r3, #2
 8003c32:	88c1      	ldrh	r1, [r0, #6]
 8003c34:	2000      	movs	r0, #0
 8003c36:	4aa3      	ldr	r2, [pc, #652]	; (8003ec4 <TEST_Run+0x398>)
 8003c38:	f017 f888 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
      sprintf(msg, "%s %.0f%%", App_Cxt_Ptr->nn_top1_output_class_name, App_Cxt_Ptr->nn_top1_output_class_proba * 100);
 8003c3c:	ed95 7a04 	vldr	s14, [r5, #16]
 8003c40:	eddf 7aa1 	vldr	s15, [pc, #644]	; 8003ec8 <TEST_Run+0x39c>
 8003c44:	a802      	add	r0, sp, #8
 8003c46:	68ea      	ldr	r2, [r5, #12]
 8003c48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c4c:	499f      	ldr	r1, [pc, #636]	; (8003ecc <TEST_Run+0x3a0>)
 8003c4e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003c52:	ed8d 7b00 	vstr	d7, [sp]
 8003c56:	f021 fe29 	bl	80258ac <siprintf>
      UTIL_LCD_DisplayStringAt(0, LINE(DISPLAY_TOP_N_LAST_LINE - NN_TOP_N_DISPLAY + 0), (uint8_t *)msg, CENTER_MODE);
 8003c5a:	f016 ff87 	bl	801ab6c <UTIL_LCD_GetFont>
 8003c5e:	88c1      	ldrh	r1, [r0, #6]
 8003c60:	4633      	mov	r3, r6
 8003c62:	aa02      	add	r2, sp, #8
 8003c64:	eb01 0781 	add.w	r7, r1, r1, lsl #2
 8003c68:	2000      	movs	r0, #0
 8003c6a:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 8003c6e:	f017 f86d 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
      sprintf(msg, "Inference: %ldms", App_Cxt_Ptr->nn_inference_time);
 8003c72:	68aa      	ldr	r2, [r5, #8]
 8003c74:	4996      	ldr	r1, [pc, #600]	; (8003ed0 <TEST_Run+0x3a4>)
 8003c76:	a802      	add	r0, sp, #8
 8003c78:	f021 fe18 	bl	80258ac <siprintf>
      UTIL_LCD_DisplayStringAt(0, LINE(DISPLAY_INFER_TIME_LINE), (uint8_t *)msg, CENTER_MODE);
 8003c7c:	f016 ff76 	bl	801ab6c <UTIL_LCD_GetFont>
 8003c80:	88c1      	ldrh	r1, [r0, #6]
 8003c82:	aa02      	add	r2, sp, #8
 8003c84:	4633      	mov	r3, r6
 8003c86:	0109      	lsls	r1, r1, #4
 8003c88:	2000      	movs	r0, #0
 8003c8a:	f017 f85f 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
      DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8003c8e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003c90:	f7fd fdee 	bl	8001870 <DISPLAY_Refresh>
      HAL_Delay(200);
 8003c94:	20c8      	movs	r0, #200	; 0xc8
 8003c96:	f007 faaf 	bl	800b1f8 <HAL_Delay>
      while(App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 8003c9a:	69ea      	ldr	r2, [r5, #28]
 8003c9c:	7d13      	ldrb	r3, [r2, #20]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d0fc      	beq.n	8003c9c <TEST_Run+0x170>
      if((App_Cxt_Ptr->Test_ContextPtr->UartContext.uart_cmd_ongoing) && (App_Cxt_Ptr->Test_ContextPtr->UartContext.uart_host_requested_dump_memory == SDRAM))
 8003ca2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003ca4:	f8d3 24a0 	ldr.w	r2, [r3, #1184]	; 0x4a0
 8003ca8:	b3a2      	cbz	r2, 8003d14 <TEST_Run+0x1e8>
 8003caa:	f893 24a6 	ldrb.w	r2, [r3, #1190]	; 0x4a6
 8003cae:	2a01      	cmp	r2, #1
 8003cb0:	d130      	bne.n	8003d14 <TEST_Run+0x1e8>
        for(int i=0; i<strlen(TestContext_Ptr->TestRunContext.src_buff_name);i++)
 8003cb2:	2600      	movs	r6, #0
 8003cb4:	e006      	b.n	8003cc4 <TEST_Run+0x198>
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(TestContext_Ptr->TestRunContext.src_buff_name+i);
 8003cb6:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003cb8:	6813      	ldr	r3, [r2, #0]
 8003cba:	1c59      	adds	r1, r3, #1
 8003cbc:	6011      	str	r1, [r2, #0]
 8003cbe:	5dba      	ldrb	r2, [r7, r6]
        for(int i=0; i<strlen(TestContext_Ptr->TestRunContext.src_buff_name);i++)
 8003cc0:	3601      	adds	r6, #1
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(TestContext_Ptr->TestRunContext.src_buff_name+i);
 8003cc2:	701a      	strb	r2, [r3, #0]
        for(int i=0; i<strlen(TestContext_Ptr->TestRunContext.src_buff_name);i++)
 8003cc4:	f8d4 754c 	ldr.w	r7, [r4, #1356]	; 0x54c
 8003cc8:	4638      	mov	r0, r7
 8003cca:	f7fc fb13 	bl	80002f4 <strlen>
 8003cce:	42b0      	cmp	r0, r6
 8003cd0:	d8f1      	bhi.n	8003cb6 <TEST_Run+0x18a>
        for(int i=0; i<TestContext_Ptr->TestRunContext.src_size;i++)
 8003cd2:	f8d4 355c 	ldr.w	r3, [r4, #1372]	; 0x55c
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d048      	beq.n	8003d6c <TEST_Run+0x240>
 8003cda:	2300      	movs	r3, #0
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(((uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr)+i);
 8003cdc:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8003cde:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
 8003ce2:	680a      	ldr	r2, [r1, #0]
 8003ce4:	1c56      	adds	r6, r2, #1
 8003ce6:	600e      	str	r6, [r1, #0]
 8003ce8:	5cc1      	ldrb	r1, [r0, r3]
        for(int i=0; i<TestContext_Ptr->TestRunContext.src_size;i++)
 8003cea:	3301      	adds	r3, #1
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(((uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr)+i);
 8003cec:	7011      	strb	r1, [r2, #0]
        for(int i=0; i<TestContext_Ptr->TestRunContext.src_size;i++)
 8003cee:	f8d4 255c 	ldr.w	r2, [r4, #1372]	; 0x55c
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d8f2      	bhi.n	8003cdc <TEST_Run+0x1b0>
 8003cf6:	e039      	b.n	8003d6c <TEST_Run+0x240>
        if (TestContext_Ptr->TestRunContext.DumpFormat == DATA_FORMAT_BMP)
 8003cf8:	f894 3564 	ldrb.w	r3, [r4, #1380]	; 0x564
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	f000 80c3 	beq.w	8003e88 <TEST_Run+0x35c>
        else if(TestContext_Ptr->TestRunContext.DumpFormat == DATA_FORMAT_RAW)
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f000 80b7 	beq.w	8003e76 <TEST_Run+0x34a>
        else if(TestContext_Ptr->TestRunContext.DumpFormat == DATA_FORMAT_TXT)
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	f000 80f1 	beq.w	8003ef0 <TEST_Run+0x3c4>
          Error_Handler(); /* DumpFormat no supported */
 8003d0e:	f000 ff7d 	bl	8004c0c <Error_Handler>
 8003d12:	e715      	b.n	8003b40 <TEST_Run+0x14>
        if(App_Cxt_Ptr->Test_ContextPtr->DumpContext.Dump_FrameSource != SDCARD_FILE)
 8003d14:	791b      	ldrb	r3, [r3, #4]
 8003d16:	2b03      	cmp	r3, #3
 8003d18:	d12c      	bne.n	8003d74 <TEST_Run+0x248>
        HAL_RNG_GenerateRandomNumber(&TestContext_Ptr->RngHandle, &TestContext_Ptr->DumpContext.dump_session_id);
 8003d1a:	f104 0108 	add.w	r1, r4, #8
        sprintf(TestContext_Ptr->DumpContext.dump_session_folder_name,"%s/DUMP_SESS_%X", TestContext_Ptr->DumpContext.dump_folder_name, (unsigned int)TestContext_Ptr->DumpContext.dump_session_id);
 8003d1e:	f104 0754 	add.w	r7, r4, #84	; 0x54
        HAL_RNG_GenerateRandomNumber(&TestContext_Ptr->RngHandle, &TestContext_Ptr->DumpContext.dump_session_id);
 8003d22:	f204 506c 	addw	r0, r4, #1388	; 0x56c
 8003d26:	f00d f951 	bl	8010fcc <HAL_RNG_GenerateRandomNumber>
        sprintf(TestContext_Ptr->DumpContext.dump_session_name, "Session %X", (unsigned int)TestContext_Ptr->DumpContext.dump_session_id);
 8003d2a:	68a2      	ldr	r2, [r4, #8]
 8003d2c:	4969      	ldr	r1, [pc, #420]	; (8003ed4 <TEST_Run+0x3a8>)
 8003d2e:	f104 0010 	add.w	r0, r4, #16
 8003d32:	f021 fdbb 	bl	80258ac <siprintf>
        sprintf(TestContext_Ptr->DumpContext.dump_session_folder_name,"%s/DUMP_SESS_%X", TestContext_Ptr->DumpContext.dump_folder_name, (unsigned int)TestContext_Ptr->DumpContext.dump_session_id);
 8003d36:	68a3      	ldr	r3, [r4, #8]
 8003d38:	f104 0222 	add.w	r2, r4, #34	; 0x22
 8003d3c:	4966      	ldr	r1, [pc, #408]	; (8003ed8 <TEST_Run+0x3ac>)
 8003d3e:	4638      	mov	r0, r7
 8003d40:	f021 fdb4 	bl	80258ac <siprintf>
  res = f_mkdir(path);
 8003d44:	4638      	mov	r0, r7
 8003d46:	f014 f879 	bl	8017e3c <f_mkdir>
  if ((res != FR_OK) && (res != FR_EXIST))
 8003d4a:	f010 06f7 	ands.w	r6, r0, #247	; 0xf7
 8003d4e:	d12a      	bne.n	8003da6 <TEST_Run+0x27a>
        if (TestContext_Ptr->TestRunContext.DumpFormat == DATA_FORMAT_BMP)
 8003d50:	f894 3564 	ldrb.w	r3, [r4, #1380]	; 0x564
 8003d54:	3524      	adds	r5, #36	; 0x24
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	f000 8113 	beq.w	8003f82 <TEST_Run+0x456>
        else if (TestContext_Ptr->TestRunContext.DumpFormat == DATA_FORMAT_RAW)
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f000 8100 	beq.w	8003f62 <TEST_Run+0x436>
        else if (TestContext_Ptr->TestRunContext.DumpFormat == DATA_FORMAT_TXT)
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	f000 8129 	beq.w	8003fba <TEST_Run+0x48e>
          Error_Handler(); /* DumpFormat no supported */
 8003d68:	f000 ff50 	bl	8004c0c <Error_Handler>
      TestContext_Ptr->DumpContext.dump_state = 2;
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
      break;
 8003d72:	e6e5      	b.n	8003b40 <TEST_Run+0x14>
          BSP_CAMERA_DeInit(0);
 8003d74:	2000      	movs	r0, #0
 8003d76:	f005 ff6f 	bl	8009c58 <BSP_CAMERA_DeInit>
          if (BSP_SD_Init(0) != BSP_ERROR_NONE)
 8003d7a:	2000      	movs	r0, #0
 8003d7c:	f007 f8ee 	bl	800af5c <BSP_SD_Init>
 8003d80:	2800      	cmp	r0, #0
 8003d82:	d0ca      	beq.n	8003d1a <TEST_Run+0x1ee>
            UTIL_LCD_DisplayStringAt(0, LINE(12), (uint8_t *)"Error. SD Card not detected", CENTER_MODE);
 8003d84:	f016 fef2 	bl	801ab6c <UTIL_LCD_GetFont>
 8003d88:	88c1      	ldrh	r1, [r0, #6]
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	4a53      	ldr	r2, [pc, #332]	; (8003edc <TEST_Run+0x3b0>)
 8003d8e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8003d92:	2000      	movs	r0, #0
 8003d94:	0089      	lsls	r1, r1, #2
 8003d96:	f016 ffd9 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
            DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8003d9a:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003d9c:	f7fd fd68 	bl	8001870 <DISPLAY_Refresh>
            Error_Handler();
 8003da0:	f000 ff34 	bl	8004c0c <Error_Handler>
 8003da4:	e7b9      	b.n	8003d1a <TEST_Run+0x1ee>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *) "Error. Could not create directory", CENTER_MODE);
 8003da6:	f016 fee1 	bl	801ab6c <UTIL_LCD_GetFont>
 8003daa:	88c1      	ldrh	r1, [r0, #6]
 8003dac:	2301      	movs	r3, #1
 8003dae:	4a4c      	ldr	r2, [pc, #304]	; (8003ee0 <TEST_Run+0x3b4>)
 8003db0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8003db4:	2000      	movs	r0, #0
 8003db6:	4099      	lsls	r1, r3
 8003db8:	f016 ffc8 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(15), (uint8_t *) path, CENTER_MODE);
 8003dbc:	f016 fed6 	bl	801ab6c <UTIL_LCD_GetFont>
 8003dc0:	88c1      	ldrh	r1, [r0, #6]
 8003dc2:	463a      	mov	r2, r7
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	2000      	movs	r0, #0
 8003dc8:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8003dcc:	f016 ffbe 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(app->Display_ContextPtr);
 8003dd0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003dd2:	f7fd fd4d 	bl	8001870 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 8003dd6:	2002      	movs	r0, #2
 8003dd8:	f005 f96e 	bl	80090b8 <BSP_LED_On>
    while (1);
 8003ddc:	e7fe      	b.n	8003ddc <TEST_Run+0x2b0>
      BSP_LED_Off(LED_GREEN);
 8003dde:	2000      	movs	r0, #0
 8003de0:	f005 f97a 	bl	80090d8 <BSP_LED_Off>
      BSP_LED_On(LED_RED);
 8003de4:	2002      	movs	r0, #2
 8003de6:	f005 f967 	bl	80090b8 <BSP_LED_On>
      UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"CAPTURE BUSY ", RIGHT_MODE);
 8003dea:	f016 febf 	bl	801ab6c <UTIL_LCD_GetFont>
 8003dee:	4a3d      	ldr	r2, [pc, #244]	; (8003ee4 <TEST_Run+0x3b8>)
 8003df0:	88c1      	ldrh	r1, [r0, #6]
 8003df2:	2302      	movs	r3, #2
 8003df4:	2000      	movs	r0, #0
 8003df6:	f016 ffa9 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
      DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8003dfa:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003dfc:	f7fd fd38 	bl	8001870 <DISPLAY_Refresh>
      HAL_Delay(200);
 8003e00:	20c8      	movs	r0, #200	; 0xc8
 8003e02:	f007 f9f9 	bl	800b1f8 <HAL_Delay>
      while(App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 8003e06:	69ea      	ldr	r2, [r5, #28]
 8003e08:	7d13      	ldrb	r3, [r2, #20]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d0fc      	beq.n	8003e08 <TEST_Run+0x2dc>
      BSP_CAMERA_DeInit(0);
 8003e0e:	2000      	movs	r0, #0
 8003e10:	f005 ff22 	bl	8009c58 <BSP_CAMERA_DeInit>
      TestContext_Ptr->CaptureContext.capture_frame_count ++;
 8003e14:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
      sd_error = BSP_SD_Init(0);
 8003e18:	2000      	movs	r0, #0
      TestContext_Ptr->CaptureContext.capture_frame_count ++;
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
      sd_error = BSP_SD_Init(0);
 8003e20:	f007 f89c 	bl	800af5c <BSP_SD_Init>
      if (sd_error != BSP_ERROR_NONE)
 8003e24:	f010 0fff 	tst.w	r0, #255	; 0xff
 8003e28:	f040 80fd 	bne.w	8004026 <TEST_Run+0x4fa>
      if(TestContext_Ptr->TestRunContext.rb_swap == 1)
 8003e2c:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	f000 8127 	beq.w	8004084 <TEST_Run+0x558>
      if (TestContext_Ptr->CaptureContext.capture_file_format == DATA_FORMAT_BMP)
 8003e36:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	f000 8104 	beq.w	8004048 <TEST_Run+0x51c>
      else if (TestContext_Ptr->CaptureContext.capture_file_format == DATA_FORMAT_RAW)
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f040 80b7 	bne.w	8003fb4 <TEST_Run+0x488>
        sprintf(file_name, "%s/%s_%d.raw", TestContext_Ptr->CaptureContext.capture_folder_name, TestContext_Ptr->TestRunContext.src_buff_name, (unsigned int)TestContext_Ptr->CaptureContext.capture_frame_count);
 8003e46:	f8d4 10c8 	ldr.w	r1, [r4, #200]	; 0xc8
 8003e4a:	f104 02de 	add.w	r2, r4, #222	; 0xde
 8003e4e:	f8d4 354c 	ldr.w	r3, [r4, #1356]	; 0x54c
 8003e52:	a834      	add	r0, sp, #208	; 0xd0
 8003e54:	9100      	str	r1, [sp, #0]
 8003e56:	491a      	ldr	r1, [pc, #104]	; (8003ec0 <TEST_Run+0x394>)
 8003e58:	f021 fd28 	bl	80258ac <siprintf>
        write_raw(file_name, dst, size, App_Cxt_Ptr);
 8003e5c:	a834      	add	r0, sp, #208	; 0xd0
 8003e5e:	f105 0324 	add.w	r3, r5, #36	; 0x24
 8003e62:	f8d4 255c 	ldr.w	r2, [r4, #1372]	; 0x55c
 8003e66:	f8d4 1548 	ldr.w	r1, [r4, #1352]	; 0x548
 8003e6a:	f7fd fed5 	bl	8001c18 <write_raw.isra.0>
      TestContext_Ptr->CaptureContext.capture_state = 2;
 8003e6e:	2302      	movs	r3, #2
 8003e70:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
      break;
 8003e74:	e664      	b.n	8003b40 <TEST_Run+0x14>
          sprintf(file_name, "%s/%s.raw", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 8003e76:	f8d4 354c 	ldr.w	r3, [r4, #1356]	; 0x54c
 8003e7a:	f104 0254 	add.w	r2, r4, #84	; 0x54
 8003e7e:	491a      	ldr	r1, [pc, #104]	; (8003ee8 <TEST_Run+0x3bc>)
 8003e80:	a834      	add	r0, sp, #208	; 0xd0
 8003e82:	f021 fd13 	bl	80258ac <siprintf>
          write_raw(file_name, dst, size, App_Cxt_Ptr);
 8003e86:	e689      	b.n	8003b9c <TEST_Run+0x70>
          sprintf(file_name, "%s/%s.bmp", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 8003e88:	f8d4 354c 	ldr.w	r3, [r4, #1356]	; 0x54c
 8003e8c:	f104 0254 	add.w	r2, r4, #84	; 0x54
 8003e90:	4916      	ldr	r1, [pc, #88]	; (8003eec <TEST_Run+0x3c0>)
 8003e92:	a834      	add	r0, sp, #208	; 0xd0
 8003e94:	f021 fd0a 	bl	80258ac <siprintf>
        img.w = TestContext_Ptr->TestRunContext.src_width_size;
 8003e98:	f8d4 7550 	ldr.w	r7, [r4, #1360]	; 0x550
        write_bmp(file_name, &img, App_Cxt_Ptr);
 8003e9c:	f105 0224 	add.w	r2, r5, #36	; 0x24
        img.w = TestContext_Ptr->TestRunContext.src_width_size;
 8003ea0:	f8d4 6554 	ldr.w	r6, [r4, #1364]	; 0x554
        write_bmp(file_name, &img, App_Cxt_Ptr);
 8003ea4:	a834      	add	r0, sp, #208	; 0xd0
        img.w = TestContext_Ptr->TestRunContext.src_width_size;
 8003ea6:	f8d4 5558 	ldr.w	r5, [r4, #1368]	; 0x558
        write_bmp(file_name, &img, App_Cxt_Ptr);
 8003eaa:	a914      	add	r1, sp, #80	; 0x50
        img.data = (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr;
 8003eac:	f8d4 3548 	ldr.w	r3, [r4, #1352]	; 0x548
        img.w = TestContext_Ptr->TestRunContext.src_width_size;
 8003eb0:	e9cd 7614 	strd	r7, r6, [sp, #80]	; 0x50
        img.data = (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr;
 8003eb4:	e9cd 5316 	strd	r5, r3, [sp, #88]	; 0x58
        write_bmp(file_name, &img, App_Cxt_Ptr);
 8003eb8:	f7fd ff10 	bl	8001cdc <write_bmp.isra.0>
 8003ebc:	e640      	b.n	8003b40 <TEST_Run+0x14>
 8003ebe:	bf00      	nop
 8003ec0:	08028a24 	.word	0x08028a24
 8003ec4:	08028988 	.word	0x08028988
 8003ec8:	42c80000 	.word	0x42c80000
 8003ecc:	080283c8 	.word	0x080283c8
 8003ed0:	080283d4 	.word	0x080283d4
 8003ed4:	08028790 	.word	0x08028790
 8003ed8:	08028994 	.word	0x08028994
 8003edc:	08028538 	.word	0x08028538
 8003ee0:	08028564 	.word	0x08028564
 8003ee4:	08028a04 	.word	0x08028a04
 8003ee8:	080289b0 	.word	0x080289b0
 8003eec:	080289f8 	.word	0x080289f8
          sprintf(file_name, "%s/%s.txt", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 8003ef0:	f10d 08d0 	add.w	r8, sp, #208	; 0xd0
 8003ef4:	f105 0924 	add.w	r9, r5, #36	; 0x24
 8003ef8:	f8d4 354c 	ldr.w	r3, [r4, #1356]	; 0x54c
 8003efc:	f104 0254 	add.w	r2, r4, #84	; 0x54
 8003f00:	4971      	ldr	r1, [pc, #452]	; (80040c8 <TEST_Run+0x59c>)
 8003f02:	4640      	mov	r0, r8
 8003f04:	f021 fcd2 	bl	80258ac <siprintf>
          write_txt(file_name, "          Neural Network Output\n\n", FA_WRITE | FA_CREATE_ALWAYS, App_Cxt_Ptr);
 8003f08:	464b      	mov	r3, r9
 8003f0a:	4640      	mov	r0, r8
 8003f0c:	220a      	movs	r2, #10
 8003f0e:	496f      	ldr	r1, [pc, #444]	; (80040cc <TEST_Run+0x5a0>)
 8003f10:	f7fd fe40 	bl	8001b94 <write_txt.isra.0>
          for (int i = 0; i < (TestContext_Ptr->TestRunContext.src_size)/4; i++)
 8003f14:	f8d4 355c 	ldr.w	r3, [r4, #1372]	; 0x55c
 8003f18:	089b      	lsrs	r3, r3, #2
 8003f1a:	f43f ae11 	beq.w	8003b40 <TEST_Run+0x14>
 8003f1e:	4d6c      	ldr	r5, [pc, #432]	; (80040d0 <TEST_Run+0x5a4>)
 8003f20:	2600      	movs	r6, #0
 8003f22:	af14      	add	r7, sp, #80	; 0x50
            sprintf(str, "%20s:%8.3f\n", NN_OUTPUT_CLASS_LIST[i], *((float*)TestContext_Ptr->TestRunContext.src_buff_addr + i));
 8003f24:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 80040e4 <TEST_Run+0x5b8>
 8003f28:	f8d4 3548 	ldr.w	r3, [r4, #1352]	; 0x548
 8003f2c:	4651      	mov	r1, sl
 8003f2e:	f855 2b04 	ldr.w	r2, [r5], #4
 8003f32:	4638      	mov	r0, r7
 8003f34:	eb03 0386 	add.w	r3, r3, r6, lsl #2
          for (int i = 0; i < (TestContext_Ptr->TestRunContext.src_size)/4; i++)
 8003f38:	3601      	adds	r6, #1
            sprintf(str, "%20s:%8.3f\n", NN_OUTPUT_CLASS_LIST[i], *((float*)TestContext_Ptr->TestRunContext.src_buff_addr + i));
 8003f3a:	ed93 7a00 	vldr	s14, [r3]
 8003f3e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003f42:	ed8d 7b00 	vstr	d7, [sp]
 8003f46:	f021 fcb1 	bl	80258ac <siprintf>
            write_txt(file_name, str, FA_WRITE | FA_OPEN_APPEND, App_Cxt_Ptr);
 8003f4a:	464b      	mov	r3, r9
 8003f4c:	2232      	movs	r2, #50	; 0x32
 8003f4e:	4639      	mov	r1, r7
 8003f50:	4640      	mov	r0, r8
 8003f52:	f7fd fe1f 	bl	8001b94 <write_txt.isra.0>
          for (int i = 0; i < (TestContext_Ptr->TestRunContext.src_size)/4; i++)
 8003f56:	f8d4 355c 	ldr.w	r3, [r4, #1372]	; 0x55c
 8003f5a:	ebb6 0f93 	cmp.w	r6, r3, lsr #2
 8003f5e:	d3e3      	bcc.n	8003f28 <TEST_Run+0x3fc>
 8003f60:	e5ee      	b.n	8003b40 <TEST_Run+0x14>
          sprintf(file_name, "%s/%s.raw", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 8003f62:	463a      	mov	r2, r7
 8003f64:	f8d4 354c 	ldr.w	r3, [r4, #1356]	; 0x54c
 8003f68:	a834      	add	r0, sp, #208	; 0xd0
 8003f6a:	495a      	ldr	r1, [pc, #360]	; (80040d4 <TEST_Run+0x5a8>)
 8003f6c:	f021 fc9e 	bl	80258ac <siprintf>
          write_raw(file_name, dst, size, App_Cxt_Ptr);
 8003f70:	462b      	mov	r3, r5
 8003f72:	a834      	add	r0, sp, #208	; 0xd0
 8003f74:	f8d4 255c 	ldr.w	r2, [r4, #1372]	; 0x55c
 8003f78:	f8d4 1548 	ldr.w	r1, [r4, #1352]	; 0x548
 8003f7c:	f7fd fe4c 	bl	8001c18 <write_raw.isra.0>
 8003f80:	e6f4      	b.n	8003d6c <TEST_Run+0x240>
          sprintf(file_name, "%s/%s_.bmp", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 8003f82:	463a      	mov	r2, r7
 8003f84:	f8d4 354c 	ldr.w	r3, [r4, #1356]	; 0x54c
 8003f88:	a834      	add	r0, sp, #208	; 0xd0
 8003f8a:	4953      	ldr	r1, [pc, #332]	; (80040d8 <TEST_Run+0x5ac>)
 8003f8c:	f021 fc8e 	bl	80258ac <siprintf>
          img.w = TestContext_Ptr->TestRunContext.src_width_size;
 8003f90:	f8d4 3550 	ldr.w	r3, [r4, #1360]	; 0x550
 8003f94:	f8d4 6554 	ldr.w	r6, [r4, #1364]	; 0x554
          write_bmp(file_name, &img, App_Cxt_Ptr);
 8003f98:	462a      	mov	r2, r5
          img.w = TestContext_Ptr->TestRunContext.src_width_size;
 8003f9a:	9314      	str	r3, [sp, #80]	; 0x50
          write_bmp(file_name, &img, App_Cxt_Ptr);
 8003f9c:	a834      	add	r0, sp, #208	; 0xd0
          img.w = TestContext_Ptr->TestRunContext.src_width_size;
 8003f9e:	f8d4 5558 	ldr.w	r5, [r4, #1368]	; 0x558
          write_bmp(file_name, &img, App_Cxt_Ptr);
 8003fa2:	a914      	add	r1, sp, #80	; 0x50
          img.data = (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr;
 8003fa4:	f8d4 3548 	ldr.w	r3, [r4, #1352]	; 0x548
          img.w = TestContext_Ptr->TestRunContext.src_width_size;
 8003fa8:	e9cd 6515 	strd	r6, r5, [sp, #84]	; 0x54
          img.data = (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr;
 8003fac:	9317      	str	r3, [sp, #92]	; 0x5c
          write_bmp(file_name, &img, App_Cxt_Ptr);
 8003fae:	f7fd fe95 	bl	8001cdc <write_bmp.isra.0>
 8003fb2:	e6db      	b.n	8003d6c <TEST_Run+0x240>
        Error_Handler(); /* Capture Format no supported */
 8003fb4:	f000 fe2a 	bl	8004c0c <Error_Handler>
 8003fb8:	e759      	b.n	8003e6e <TEST_Run+0x342>
          sprintf(file_name, "%s/%s.txt", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 8003fba:	f10d 08d0 	add.w	r8, sp, #208	; 0xd0
 8003fbe:	463a      	mov	r2, r7
 8003fc0:	f8d4 354c 	ldr.w	r3, [r4, #1356]	; 0x54c
 8003fc4:	4940      	ldr	r1, [pc, #256]	; (80040c8 <TEST_Run+0x59c>)
 8003fc6:	4640      	mov	r0, r8
 8003fc8:	f021 fc70 	bl	80258ac <siprintf>
          write_txt(file_name, "          Neural Network Output\n\n", FA_WRITE | FA_CREATE_ALWAYS, App_Cxt_Ptr);
 8003fcc:	462b      	mov	r3, r5
 8003fce:	4640      	mov	r0, r8
 8003fd0:	220a      	movs	r2, #10
 8003fd2:	493e      	ldr	r1, [pc, #248]	; (80040cc <TEST_Run+0x5a0>)
 8003fd4:	f7fd fdde 	bl	8001b94 <write_txt.isra.0>
          for (int i = 0; i < (TestContext_Ptr->TestRunContext.src_size/4); i++)
 8003fd8:	f8d4 355c 	ldr.w	r3, [r4, #1372]	; 0x55c
 8003fdc:	089b      	lsrs	r3, r3, #2
 8003fde:	f43f aec5 	beq.w	8003d6c <TEST_Run+0x240>
 8003fe2:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 80040d0 <TEST_Run+0x5a4>
 8003fe6:	af14      	add	r7, sp, #80	; 0x50
            sprintf(str, "%20s:%8.3f\n", NN_OUTPUT_CLASS_LIST[i], *((float*)TestContext_Ptr->TestRunContext.src_buff_addr + i));
 8003fe8:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 80040e4 <TEST_Run+0x5b8>
 8003fec:	f8d4 3548 	ldr.w	r3, [r4, #1352]	; 0x548
 8003ff0:	4651      	mov	r1, sl
 8003ff2:	f859 2b04 	ldr.w	r2, [r9], #4
 8003ff6:	4638      	mov	r0, r7
 8003ff8:	eb03 0386 	add.w	r3, r3, r6, lsl #2
          for (int i = 0; i < (TestContext_Ptr->TestRunContext.src_size/4); i++)
 8003ffc:	3601      	adds	r6, #1
            sprintf(str, "%20s:%8.3f\n", NN_OUTPUT_CLASS_LIST[i], *((float*)TestContext_Ptr->TestRunContext.src_buff_addr + i));
 8003ffe:	ed93 7a00 	vldr	s14, [r3]
 8004002:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8004006:	ed8d 7b00 	vstr	d7, [sp]
 800400a:	f021 fc4f 	bl	80258ac <siprintf>
            write_txt(file_name, str, FA_WRITE | FA_OPEN_APPEND, App_Cxt_Ptr);
 800400e:	462b      	mov	r3, r5
 8004010:	2232      	movs	r2, #50	; 0x32
 8004012:	4639      	mov	r1, r7
 8004014:	4640      	mov	r0, r8
 8004016:	f7fd fdbd 	bl	8001b94 <write_txt.isra.0>
          for (int i = 0; i < (TestContext_Ptr->TestRunContext.src_size/4); i++)
 800401a:	f8d4 355c 	ldr.w	r3, [r4, #1372]	; 0x55c
 800401e:	ebb6 0f93 	cmp.w	r6, r3, lsr #2
 8004022:	d3e3      	bcc.n	8003fec <TEST_Run+0x4c0>
 8004024:	e6a2      	b.n	8003d6c <TEST_Run+0x240>
        UTIL_LCD_DisplayStringAt(0, LINE(12), (uint8_t *)"Error. SD Card not detected", CENTER_MODE);
 8004026:	f016 fda1 	bl	801ab6c <UTIL_LCD_GetFont>
 800402a:	88c1      	ldrh	r1, [r0, #6]
 800402c:	2301      	movs	r3, #1
 800402e:	4a2b      	ldr	r2, [pc, #172]	; (80040dc <TEST_Run+0x5b0>)
 8004030:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8004034:	2000      	movs	r0, #0
 8004036:	0089      	lsls	r1, r1, #2
 8004038:	f016 fe88 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
        DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 800403c:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800403e:	f7fd fc17 	bl	8001870 <DISPLAY_Refresh>
        Error_Handler();
 8004042:	f000 fde3 	bl	8004c0c <Error_Handler>
 8004046:	e6f1      	b.n	8003e2c <TEST_Run+0x300>
        sprintf(file_name, "%s/%s_%d.bmp", TestContext_Ptr->CaptureContext.capture_folder_name, TestContext_Ptr->TestRunContext.src_buff_name, (unsigned int)TestContext_Ptr->CaptureContext.capture_frame_count);
 8004048:	f8d4 10c8 	ldr.w	r1, [r4, #200]	; 0xc8
 800404c:	f104 02de 	add.w	r2, r4, #222	; 0xde
 8004050:	f8d4 354c 	ldr.w	r3, [r4, #1356]	; 0x54c
 8004054:	a834      	add	r0, sp, #208	; 0xd0
 8004056:	9100      	str	r1, [sp, #0]
 8004058:	4921      	ldr	r1, [pc, #132]	; (80040e0 <TEST_Run+0x5b4>)
 800405a:	f021 fc27 	bl	80258ac <siprintf>
        img.w = TestContext_Ptr->TestRunContext.src_width_size;
 800405e:	f8d4 3550 	ldr.w	r3, [r4, #1360]	; 0x550
 8004062:	f8d4 6554 	ldr.w	r6, [r4, #1364]	; 0x554
        write_bmp(file_name, &img, App_Cxt_Ptr);
 8004066:	f105 0224 	add.w	r2, r5, #36	; 0x24
        img.w = TestContext_Ptr->TestRunContext.src_width_size;
 800406a:	9314      	str	r3, [sp, #80]	; 0x50
        write_bmp(file_name, &img, App_Cxt_Ptr);
 800406c:	a834      	add	r0, sp, #208	; 0xd0
        img.w = TestContext_Ptr->TestRunContext.src_width_size;
 800406e:	f8d4 5558 	ldr.w	r5, [r4, #1368]	; 0x558
        write_bmp(file_name, &img, App_Cxt_Ptr);
 8004072:	a914      	add	r1, sp, #80	; 0x50
        img.data = (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr;
 8004074:	f8d4 3548 	ldr.w	r3, [r4, #1352]	; 0x548
        img.w = TestContext_Ptr->TestRunContext.src_width_size;
 8004078:	e9cd 6515 	strd	r6, r5, [sp, #84]	; 0x54
        img.data = (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr;
 800407c:	9317      	str	r3, [sp, #92]	; 0x5c
        write_bmp(file_name, &img, App_Cxt_Ptr);
 800407e:	f7fd fe2d 	bl	8001cdc <write_bmp.isra.0>
 8004082:	e6f4      	b.n	8003e6e <TEST_Run+0x342>
        PREPROC_Pixel_RB_Swap((void*)TestContext_Ptr->TestRunContext.src_buff_addr, (void*)TestContext_Ptr->TestRunContext.src_buff_addr, TestContext_Ptr->TestRunContext.src_width_size*TestContext_Ptr->TestRunContext.src_height_size);//caution: this is modifying the content of the data contained at src_buff_addr! To do: implement this on the fly when writing onto the SD card!!
 8004084:	f8d4 1548 	ldr.w	r1, [r4, #1352]	; 0x548
 8004088:	f8d4 3550 	ldr.w	r3, [r4, #1360]	; 0x550
 800408c:	f8d4 2554 	ldr.w	r2, [r4, #1364]	; 0x554
 8004090:	4608      	mov	r0, r1
 8004092:	fb02 f203 	mul.w	r2, r2, r3
 8004096:	f7fd fc61 	bl	800195c <PREPROC_Pixel_RB_Swap>
 800409a:	e6cc      	b.n	8003e36 <TEST_Run+0x30a>
        sprintf(file_name, "%s/%s_%d.bmp", TestContext_Ptr->CaptureContext.capture_folder_name, TestContext_Ptr->TestRunContext.src_buff_name, (unsigned int)TestContext_Ptr->CaptureContext.capture_frame_count);
 800409c:	f8d4 10c8 	ldr.w	r1, [r4, #200]	; 0xc8
 80040a0:	f104 02de 	add.w	r2, r4, #222	; 0xde
 80040a4:	f8d4 354c 	ldr.w	r3, [r4, #1356]	; 0x54c
 80040a8:	a834      	add	r0, sp, #208	; 0xd0
 80040aa:	9100      	str	r1, [sp, #0]
 80040ac:	490c      	ldr	r1, [pc, #48]	; (80040e0 <TEST_Run+0x5b4>)
 80040ae:	f021 fbfd 	bl	80258ac <siprintf>
 80040b2:	e6f1      	b.n	8003e98 <TEST_Run+0x36c>
        PREPROC_Pixel_RB_Swap((void*)TestContext_Ptr->TestRunContext.src_buff_addr, (void*)TestContext_Ptr->TestRunContext.src_buff_addr, TestContext_Ptr->TestRunContext.src_width_size*TestContext_Ptr->TestRunContext.src_height_size);//caution: this is modifying the content of the data contained at src_buff_addr! To do: implement this on the fly when writing onto the SD card!!
 80040b4:	f8d4 3550 	ldr.w	r3, [r4, #1360]	; 0x550
 80040b8:	4608      	mov	r0, r1
 80040ba:	f8d4 2554 	ldr.w	r2, [r4, #1364]	; 0x554
 80040be:	fb02 f203 	mul.w	r2, r2, r3
 80040c2:	f7fd fc4b 	bl	800195c <PREPROC_Pixel_RB_Swap>
 80040c6:	e556      	b.n	8003b76 <TEST_Run+0x4a>
 80040c8:	080289bc 	.word	0x080289bc
 80040cc:	080289c8 	.word	0x080289c8
 80040d0:	20000004 	.word	0x20000004
 80040d4:	080289b0 	.word	0x080289b0
 80040d8:	080289a4 	.word	0x080289a4
 80040dc:	08028538 	.word	0x08028538
 80040e0:	08028a14 	.word	0x08028a14
 80040e4:	080289ec 	.word	0x080289ec

080040e8 <TEST_PostProcess>:
 *
 * @param TestContext_Ptr pointer to test context
 */
void TEST_PostProcess(TestContext_TypeDef *TestContext_Ptr)
{
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 80040e8:	f8d0 3580 	ldr.w	r3, [r0, #1408]	; 0x580
{
 80040ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040f0:	ed2d 8b04 	vpush	{d8-d9}

  if(App_Cxt_Ptr->Operating_Mode == CAPTURE)
 80040f4:	781f      	ldrb	r7, [r3, #0]
{
 80040f6:	b099      	sub	sp, #100	; 0x64
  if(App_Cxt_Ptr->Operating_Mode == CAPTURE)
 80040f8:	2f04      	cmp	r7, #4
 80040fa:	d009      	beq.n	8004110 <TEST_PostProcess+0x28>
  {
    Capture_PostProcess(App_Cxt_Ptr->Test_ContextPtr);
  }
  else if(App_Cxt_Ptr->Operating_Mode == DUMP)
 80040fc:	2f03      	cmp	r7, #3
 80040fe:	d049      	beq.n	8004194 <TEST_PostProcess+0xac>
  {
    Dump_PostProcess(App_Cxt_Ptr->Test_ContextPtr);
  }
  else if(App_Cxt_Ptr->Operating_Mode == VALID)
 8004100:	2f02      	cmp	r7, #2
 8004102:	f000 809e 	beq.w	8004242 <TEST_PostProcess+0x15a>
  {
    Validation_PostProcess(App_Cxt_Ptr->Test_ContextPtr);
  }
}
 8004106:	b019      	add	sp, #100	; 0x64
 8004108:	ecbd 8b04 	vpop	{d8-d9}
 800410c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Capture_PostProcess(App_Cxt_Ptr->Test_ContextPtr);
 8004110:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if ((TestContext_Ptr->CaptureContext.capture_state==0) /*&& (BSP_PB_GetState(BUTTON_WAKEUP) != RESET)*/)
 8004112:	f8d4 50c0 	ldr.w	r5, [r4, #192]	; 0xc0
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 8004116:	f8d4 6580 	ldr.w	r6, [r4, #1408]	; 0x580
  if ((TestContext_Ptr->CaptureContext.capture_state==0) /*&& (BSP_PB_GetState(BUTTON_WAKEUP) != RESET)*/)
 800411a:	b1f5      	cbz	r5, 800415a <TEST_PostProcess+0x72>
  else if(TestContext_Ptr->CaptureContext.capture_state==2)
 800411c:	2d02      	cmp	r5, #2
 800411e:	d1f2      	bne.n	8004106 <TEST_PostProcess+0x1e>
    TestContext_Ptr->CaptureContext.capture_state = 0;
 8004120:	2000      	movs	r0, #0
 8004122:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
    BSP_SD_DeInit(0);
 8004126:	f006 fedb 	bl	800aee0 <BSP_SD_DeInit>
    CAMERA_Init(App_Cxt_Ptr->Camera_ContextPtr);
 800412a:	69f0      	ldr	r0, [r6, #28]
 800412c:	f7fd f8f0 	bl	8001310 <CAMERA_Init>
    while (!App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready);
 8004130:	69f2      	ldr	r2, [r6, #28]
 8004132:	7d13      	ldrb	r3, [r2, #20]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d0fc      	beq.n	8004132 <TEST_PostProcess+0x4a>
    App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready = 0; /* Reset flag */
 8004138:	2600      	movs	r6, #0
    BSP_CAMERA_Resume(0);
 800413a:	4630      	mov	r0, r6
    App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready = 0; /* Reset flag */
 800413c:	7516      	strb	r6, [r2, #20]
    BSP_CAMERA_Resume(0);
 800413e:	f006 f87d 	bl	800a23c <BSP_CAMERA_Resume>
    if(TestContext_Ptr->UartContext.uart_cmd_ongoing)
 8004142:	f8d4 34a0 	ldr.w	r3, [r4, #1184]	; 0x4a0
 8004146:	2b00      	cmp	r3, #0
 8004148:	f040 82b7 	bne.w	80046ba <TEST_PostProcess+0x5d2>
    BSP_LED_On(LED_GREEN);
 800414c:	2000      	movs	r0, #0
 800414e:	f004 ffb3 	bl	80090b8 <BSP_LED_On>
    BSP_LED_Off(LED_RED);
 8004152:	2002      	movs	r0, #2
 8004154:	f004 ffc0 	bl	80090d8 <BSP_LED_Off>
 8004158:	e7d5      	b.n	8004106 <TEST_PostProcess+0x1e>
    UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)TestContext_Ptr->CaptureContext.capture_session_name, LEFT_MODE);
 800415a:	f016 fd07 	bl	801ab6c <UTIL_LCD_GetFont>
 800415e:	2303      	movs	r3, #3
 8004160:	88c1      	ldrh	r1, [r0, #6]
 8004162:	f104 02cc 	add.w	r2, r4, #204	; 0xcc
 8004166:	4628      	mov	r0, r5
 8004168:	f016 fdf0 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"CAPTURE READY", RIGHT_MODE);
 800416c:	f016 fcfe 	bl	801ab6c <UTIL_LCD_GetFont>
 8004170:	2302      	movs	r3, #2
 8004172:	88c1      	ldrh	r1, [r0, #6]
 8004174:	4628      	mov	r0, r5
 8004176:	4a87      	ldr	r2, [pc, #540]	; (8004394 <TEST_PostProcess+0x2ac>)
 8004178:	f016 fde8 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 800417c:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800417e:	f7fd fb77 	bl	8001870 <DISPLAY_Refresh>
    if(BSP_PB_GetState(BUTTON_WAKEUP) != RESET)
 8004182:	4628      	mov	r0, r5
 8004184:	f005 f812 	bl	80091ac <BSP_PB_GetState>
 8004188:	2800      	cmp	r0, #0
 800418a:	d0bc      	beq.n	8004106 <TEST_PostProcess+0x1e>
      TestContext_Ptr->CaptureContext.capture_state = 1;
 800418c:	2301      	movs	r3, #1
 800418e:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
 8004192:	e7b8      	b.n	8004106 <TEST_PostProcess+0x1e>
    Dump_PostProcess(App_Cxt_Ptr->Test_ContextPtr);
 8004194:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if(TestContext_Ptr->DumpContext.dump_state==0)
 8004196:	f8d4 60b8 	ldr.w	r6, [r4, #184]	; 0xb8
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 800419a:	f8d4 5580 	ldr.w	r5, [r4, #1408]	; 0x580
  if(TestContext_Ptr->DumpContext.dump_state==0)
 800419e:	2e00      	cmp	r6, #0
 80041a0:	f000 80b1 	beq.w	8004306 <TEST_PostProcess+0x21e>
  else if(TestContext_Ptr->DumpContext.dump_state == 2)
 80041a4:	2e02      	cmp	r6, #2
 80041a6:	d1ae      	bne.n	8004106 <TEST_PostProcess+0x1e>
    if(TestContext_Ptr->DumpContext.Dump_FrameSource != SDCARD_FILE)
 80041a8:	7923      	ldrb	r3, [r4, #4]
 80041aa:	2b03      	cmp	r3, #3
 80041ac:	f000 825c 	beq.w	8004668 <TEST_PostProcess+0x580>
      if((TestContext_Ptr->UartContext.uart_cmd_ongoing==0)|| (TestContext_Ptr->UartContext.uart_cmd_ongoing==1 && TestContext_Ptr->UartContext.uart_host_requested_dump_memory == SDCARD))
 80041b0:	f8d4 34a0 	ldr.w	r3, [r4, #1184]	; 0x4a0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f000 8245 	beq.w	8004644 <TEST_PostProcess+0x55c>
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	f894 34a6 	ldrb.w	r3, [r4, #1190]	; 0x4a6
 80041c0:	f000 823d 	beq.w	800463e <TEST_PostProcess+0x556>
    TestContext_Ptr->DumpContext.dump_state = 0;
 80041c4:	2200      	movs	r2, #0
 80041c6:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
      if(TestContext_Ptr->UartContext.uart_host_requested_dump_memory == SDRAM)
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	f000 82b4 	beq.w	8004738 <TEST_PostProcess+0x650>
 80041d0:	f8d4 34a8 	ldr.w	r3, [r4, #1192]	; 0x4a8
  uint8_t cmd_status=CMD_COMPLETE_SUCCESS_EVT;
 80041d4:	2702      	movs	r7, #2
 80041d6:	4e70      	ldr	r6, [pc, #448]	; (8004398 <TEST_PostProcess+0x2b0>)
      if(TestContext_Ptr->UartContext.uart_host_requested_dump_number == 0)
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 82d3 	beq.w	8004784 <TEST_PostProcess+0x69c>
        if(TestContext_Ptr->UartContext.uart_host_requested_dump_number == 0xFFFF)
 80041de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041e2:	4293      	cmp	r3, r2
 80041e4:	f000 8312 	beq.w	800480c <TEST_PostProcess+0x724>
          TestContext_Ptr->UartContext.uart_host_requested_dump_number --;
 80041e8:	3b01      	subs	r3, #1
 80041ea:	f8c4 34a8 	str.w	r3, [r4, #1192]	; 0x4a8
        UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)TestContext_Ptr->DumpContext.dump_session_name, LEFT_MODE);
 80041ee:	f016 fcbd 	bl	801ab6c <UTIL_LCD_GetFont>
 80041f2:	2303      	movs	r3, #3
 80041f4:	88c1      	ldrh	r1, [r0, #6]
 80041f6:	f104 0210 	add.w	r2, r4, #16
 80041fa:	2000      	movs	r0, #0
 80041fc:	f016 fda6 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
        UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"DUMP READY", RIGHT_MODE);
 8004200:	f016 fcb4 	bl	801ab6c <UTIL_LCD_GetFont>
 8004204:	2302      	movs	r3, #2
 8004206:	88c1      	ldrh	r1, [r0, #6]
 8004208:	2000      	movs	r0, #0
 800420a:	4a64      	ldr	r2, [pc, #400]	; (800439c <TEST_PostProcess+0x2b4>)
 800420c:	f016 fd9e 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
        DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8004210:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004212:	f7fd fb2d 	bl	8001870 <DISPLAY_Refresh>
        TestContext_Ptr->DumpContext.dump_state = 1;
 8004216:	2301      	movs	r3, #1
 8004218:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
        dump_output_buff[i] = *((float*)App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer + i);
 800421c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
        execution_timings_buff[i] = App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[i];
 800421e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
        dump_output_buff[i] = *((float*)App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer + i);
 8004220:	6819      	ldr	r1, [r3, #0]
        execution_timings_buff[i] = App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[i];
 8004222:	6814      	ldr	r4, [r2, #0]
        dump_output_buff[i] = *((float*)App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer + i);
 8004224:	6808      	ldr	r0, [r1, #0]
        execution_timings_buff[i] = App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[i];
 8004226:	4b5e      	ldr	r3, [pc, #376]	; (80043a0 <TEST_PostProcess+0x2b8>)
        dump_output_buff[i] = *((float*)App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer + i);
 8004228:	6030      	str	r0, [r6, #0]
 800422a:	6848      	ldr	r0, [r1, #4]
        execution_timings_buff[i] = App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[i];
 800422c:	601c      	str	r4, [r3, #0]
 800422e:	6851      	ldr	r1, [r2, #4]
        dump_output_buff[i] = *((float*)App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer + i);
 8004230:	6070      	str	r0, [r6, #4]
        execution_timings_buff[i] = App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[i];
 8004232:	6059      	str	r1, [r3, #4]
 8004234:	6891      	ldr	r1, [r2, #8]
 8004236:	6099      	str	r1, [r3, #8]
 8004238:	68d1      	ldr	r1, [r2, #12]
 800423a:	60d9      	str	r1, [r3, #12]
 800423c:	6912      	ldr	r2, [r2, #16]
 800423e:	611a      	str	r2, [r3, #16]
      for(uint32_t i=0; i<APP_FRAMEOPERATION_NUM;i++)
 8004240:	e784      	b.n	800414c <TEST_PostProcess+0x64>
    Validation_PostProcess(App_Cxt_Ptr->Test_ContextPtr);
 8004242:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if(TestContext_Ptr->ValidationContext.validation_completed == 0)
 8004244:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 8004248:	f8d4 6580 	ldr.w	r6, [r4, #1408]	; 0x580
  if(TestContext_Ptr->ValidationContext.validation_completed == 0)
 800424c:	2b00      	cmp	r3, #0
 800424e:	f000 80b3 	beq.w	80043b8 <TEST_PostProcess+0x2d0>
    if(TestContext_Ptr->UartContext.uart_cmd_ongoing)
 8004252:	f8d4 34a0 	ldr.w	r3, [r4, #1184]	; 0x4a0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d048      	beq.n	80042ec <TEST_PostProcess+0x204>
          TestContext_Ptr->ValidationContext.valid_conf_matrix[i][j]=0;
 800425a:	f504 6c89 	add.w	ip, r4, #1096	; 0x448
 800425e:	f504 618a 	add.w	r1, r4, #1104	; 0x450
 8004262:	2200      	movs	r2, #0
 8004264:	2300      	movs	r3, #0
      TestContext_Ptr->UartContext.uart_host_requested_mode=NOMINAL;
 8004266:	f04f 0801 	mov.w	r8, #1
      TestContext_Ptr->ValidationContext.validation_completed=0;
 800426a:	2000      	movs	r0, #0
      TestContext_Ptr->ValidationContext.overall_loss = 0.0;
 800426c:	f04f 0a00 	mov.w	sl, #0
 8004270:	f04f 0b00 	mov.w	fp, #0
      *(aTxBuffer) = CMD_COMPLETE_SUCCESS_EVT;
 8004274:	4d4b      	ldr	r5, [pc, #300]	; (80043a4 <TEST_PostProcess+0x2bc>)
      TestContext_Ptr->UartContext.uart_host_requested_mode=NOMINAL;
 8004276:	f884 84a4 	strb.w	r8, [r4, #1188]	; 0x4a4
      TestContext_Ptr->ValidationContext.validation_completed=0;
 800427a:	f8c4 0440 	str.w	r0, [r4, #1088]	; 0x440
      TestContext_Ptr->ValidationContext.nbr_tested = 1;
 800427e:	f8c4 8120 	str.w	r8, [r4, #288]	; 0x120
      TestContext_Ptr->ValidationContext.overall_loss = 0.0;
 8004282:	e9c4 ab44 	strd	sl, fp, [r4, #272]	; 0x110
      TestContext_Ptr->ValidationContext.avg_loss = 0.0;
 8004286:	e9c4 ab46 	strd	sl, fp, [r4, #280]	; 0x118
          TestContext_Ptr->ValidationContext.valid_conf_matrix[i][j]=0;
 800428a:	e9cc 2300 	strd	r2, r3, [ip]
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 800428e:	f204 44bc 	addw	r4, r4, #1212	; 0x4bc
          TestContext_Ptr->ValidationContext.valid_conf_matrix[i][j]=0;
 8004292:	e9c1 2300 	strd	r2, r3, [r1]
      App_Cxt_Ptr->run_loop = 0;
 8004296:	6070      	str	r0, [r6, #4]
      BSP_SD_DeInit(0);
 8004298:	f006 fe22 	bl	800aee0 <BSP_SD_DeInit>
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 800429c:	463a      	mov	r2, r7
 800429e:	4628      	mov	r0, r5
 80042a0:	2120      	movs	r1, #32
      *(aTxBuffer) = CMD_COMPLETE_SUCCESS_EVT;
 80042a2:	702f      	strb	r7, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80042a4:	f000 fc44 	bl	8004b30 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80042a8:	4642      	mov	r2, r8
 80042aa:	4629      	mov	r1, r5
 80042ac:	4620      	mov	r0, r4
 80042ae:	f00e f821 	bl	80122f4 <HAL_UART_Transmit_DMA>
 80042b2:	2800      	cmp	r0, #0
 80042b4:	f040 81fb 	bne.w	80046ae <TEST_PostProcess+0x5c6>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 80042b8:	4620      	mov	r0, r4
 80042ba:	f00e fa45 	bl	8012748 <HAL_UART_GetState>
 80042be:	2820      	cmp	r0, #32
 80042c0:	d1fa      	bne.n	80042b8 <TEST_PostProcess+0x1d0>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 80042c2:	4620      	mov	r0, r4
 80042c4:	220a      	movs	r2, #10
 80042c6:	4938      	ldr	r1, [pc, #224]	; (80043a8 <TEST_PostProcess+0x2c0>)
 80042c8:	f00e f864 	bl	8012394 <HAL_UART_Receive_DMA>
 80042cc:	2800      	cmp	r0, #0
 80042ce:	f040 81f1 	bne.w	80046b4 <TEST_PostProcess+0x5cc>
        execution_timings_buff[i] = App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[i];
 80042d2:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 80042d4:	4b32      	ldr	r3, [pc, #200]	; (80043a0 <TEST_PostProcess+0x2b8>)
 80042d6:	6811      	ldr	r1, [r2, #0]
 80042d8:	6019      	str	r1, [r3, #0]
 80042da:	6851      	ldr	r1, [r2, #4]
 80042dc:	6059      	str	r1, [r3, #4]
 80042de:	6891      	ldr	r1, [r2, #8]
 80042e0:	6099      	str	r1, [r3, #8]
 80042e2:	68d1      	ldr	r1, [r2, #12]
 80042e4:	60d9      	str	r1, [r3, #12]
 80042e6:	6912      	ldr	r2, [r2, #16]
 80042e8:	611a      	str	r2, [r3, #16]
      for(uint32_t i=0; i<APP_FRAMEOPERATION_NUM;i++)
 80042ea:	e70c      	b.n	8004106 <TEST_PostProcess+0x1e>
        HAL_Delay(100);
 80042ec:	2064      	movs	r0, #100	; 0x64
 80042ee:	f006 ff83 	bl	800b1f8 <HAL_Delay>
        BSP_LED_Toggle(LED_GREEN);
 80042f2:	2000      	movs	r0, #0
 80042f4:	f004 ff00 	bl	80090f8 <BSP_LED_Toggle>
        HAL_Delay(100);
 80042f8:	2064      	movs	r0, #100	; 0x64
 80042fa:	f006 ff7d 	bl	800b1f8 <HAL_Delay>
        BSP_LED_Toggle(LED_GREEN);
 80042fe:	2000      	movs	r0, #0
 8004300:	f004 fefa 	bl	80090f8 <BSP_LED_Toggle>
      while (1)
 8004304:	e7f2      	b.n	80042ec <TEST_PostProcess+0x204>
    UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)TestContext_Ptr->DumpContext.dump_session_name, LEFT_MODE);
 8004306:	f016 fc31 	bl	801ab6c <UTIL_LCD_GetFont>
 800430a:	463b      	mov	r3, r7
 800430c:	88c1      	ldrh	r1, [r0, #6]
 800430e:	f104 0210 	add.w	r2, r4, #16
 8004312:	4630      	mov	r0, r6
 8004314:	f016 fd1a 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"DUMP READY", RIGHT_MODE);
 8004318:	f016 fc28 	bl	801ab6c <UTIL_LCD_GetFont>
 800431c:	2302      	movs	r3, #2
 800431e:	88c1      	ldrh	r1, [r0, #6]
 8004320:	4630      	mov	r0, r6
 8004322:	4a1e      	ldr	r2, [pc, #120]	; (800439c <TEST_PostProcess+0x2b4>)
 8004324:	f016 fd12 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
    sprintf(msg, "%s %.0f%%", App_Cxt_Ptr->nn_top1_output_class_name, App_Cxt_Ptr->nn_top1_output_class_proba * 100);
 8004328:	ed95 7a04 	vldr	s14, [r5, #16]
 800432c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80043ac <TEST_PostProcess+0x2c4>
 8004330:	a806      	add	r0, sp, #24
 8004332:	68ea      	ldr	r2, [r5, #12]
 8004334:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004338:	491d      	ldr	r1, [pc, #116]	; (80043b0 <TEST_PostProcess+0x2c8>)
 800433a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800433e:	ed8d 7b00 	vstr	d7, [sp]
 8004342:	f021 fab3 	bl	80258ac <siprintf>
    UTIL_LCD_DisplayStringAt(0, LINE(DISPLAY_TOP_N_LAST_LINE - NN_TOP_N_DISPLAY + 0), (uint8_t *)msg, CENTER_MODE);
 8004346:	f016 fc11 	bl	801ab6c <UTIL_LCD_GetFont>
 800434a:	88c1      	ldrh	r1, [r0, #6]
 800434c:	2301      	movs	r3, #1
 800434e:	aa06      	add	r2, sp, #24
 8004350:	eb01 0781 	add.w	r7, r1, r1, lsl #2
 8004354:	4630      	mov	r0, r6
 8004356:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 800435a:	f016 fcf7 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
    sprintf(msg, "Inference: %ldms", App_Cxt_Ptr->nn_inference_time);
 800435e:	68aa      	ldr	r2, [r5, #8]
 8004360:	4914      	ldr	r1, [pc, #80]	; (80043b4 <TEST_PostProcess+0x2cc>)
 8004362:	a806      	add	r0, sp, #24
 8004364:	f021 faa2 	bl	80258ac <siprintf>
    UTIL_LCD_DisplayStringAt(0, LINE(DISPLAY_INFER_TIME_LINE), (uint8_t *)msg, CENTER_MODE);
 8004368:	f016 fc00 	bl	801ab6c <UTIL_LCD_GetFont>
 800436c:	88c1      	ldrh	r1, [r0, #6]
 800436e:	aa06      	add	r2, sp, #24
 8004370:	2301      	movs	r3, #1
 8004372:	4630      	mov	r0, r6
 8004374:	0109      	lsls	r1, r1, #4
 8004376:	f016 fce9 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 800437a:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800437c:	f7fd fa78 	bl	8001870 <DISPLAY_Refresh>
    if(BSP_PB_GetState(BUTTON_WAKEUP) != RESET)
 8004380:	4630      	mov	r0, r6
 8004382:	f004 ff13 	bl	80091ac <BSP_PB_GetState>
 8004386:	2800      	cmp	r0, #0
 8004388:	f43f aebd 	beq.w	8004106 <TEST_PostProcess+0x1e>
      TestContext_Ptr->DumpContext.dump_state = 1;
 800438c:	2301      	movs	r3, #1
 800438e:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 8004392:	e6b8      	b.n	8004106 <TEST_PostProcess+0x1e>
 8004394:	08028a34 	.word	0x08028a34
 8004398:	d0cb08a0 	.word	0xd0cb08a0
 800439c:	08028a44 	.word	0x08028a44
 80043a0:	d0d3bbc0 	.word	0xd0d3bbc0
 80043a4:	30000280 	.word	0x30000280
 80043a8:	300002a0 	.word	0x300002a0
 80043ac:	42c80000 	.word	0x42c80000
 80043b0:	080283c8 	.word	0x080283c8
 80043b4:	080283d4 	.word	0x080283d4
    strcpy(tmp_msg, TestContext_Ptr->ValidationContext.tmp_class_path);
 80043b8:	f504 6880 	add.w	r8, r4, #1024	; 0x400
 80043bc:	4fd0      	ldr	r7, [pc, #832]	; (8004700 <TEST_PostProcess+0x618>)
    strcat(tmp_msg, TestContext_Ptr->ValidationContext.img_fno.fname);
 80043be:	f204 29ba 	addw	r9, r4, #698	; 0x2ba
    strcpy(tmp_msg, TestContext_Ptr->ValidationContext.tmp_class_path);
 80043c2:	4641      	mov	r1, r8
 80043c4:	4638      	mov	r0, r7
 80043c6:	f021 fa91 	bl	80258ec <stpcpy>
    strcat(tmp_msg, "/");
 80043ca:	232f      	movs	r3, #47	; 0x2f
    strcat(tmp_msg, TestContext_Ptr->ValidationContext.img_fno.fname);
 80043cc:	4649      	mov	r1, r9
 80043ce:	3001      	adds	r0, #1
    strcat(tmp_msg, "/");
 80043d0:	f800 3c01 	strb.w	r3, [r0, #-1]
    strcat(tmp_msg, TestContext_Ptr->ValidationContext.img_fno.fname);
 80043d4:	f021 fa93 	bl	80258fe <strcpy>
    size_t predicted_class = App_Cxt_Ptr->ranking[0];
 80043d8:	f8d6 b014 	ldr.w	fp, [r6, #20]
    if (predicted_class != TestContext_Ptr->ValidationContext.class_index)
 80043dc:	f8d4 53bc 	ldr.w	r5, [r4, #956]	; 0x3bc
      const char *predicted_class_name = NN_OUTPUT_CLASS_LIST[predicted_class];
 80043e0:	4bc8      	ldr	r3, [pc, #800]	; (8004704 <TEST_PostProcess+0x61c>)
    if (predicted_class != TestContext_Ptr->ValidationContext.class_index)
 80043e2:	45ab      	cmp	fp, r5
 80043e4:	f040 814b 	bne.w	800467e <TEST_PostProcess+0x596>
 80043e8:	9305      	str	r3, [sp, #20]
    float confidence = App_Cxt_Ptr->nn_top1_output_class_proba;
 80043ea:	edd6 8a04 	vldr	s17, [r6, #16]
    TestContext_Ptr->ValidationContext.nbr_tested++;
 80043ee:	f8d4 7120 	ldr.w	r7, [r4, #288]	; 0x120
    if (confidence > 0)
 80043f2:	eef5 8ac0 	vcmpe.f32	s17, #0.0
    TestContext_Ptr->ValidationContext.nbr_tested++;
 80043f6:	3701      	adds	r7, #1
    if (confidence > 0)
 80043f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    TestContext_Ptr->ValidationContext.nbr_tested++;
 80043fc:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
    if (confidence > 0)
 8004400:	f340 8152 	ble.w	80046a8 <TEST_PostProcess+0x5c0>
      categorical_crossentropy = -log((double)confidence);
 8004404:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
 8004408:	f023 fb36 	bl	8027a78 <log>
 800440c:	eeb1 0b40 	vneg.f64	d0, d0
    TestContext_Ptr->ValidationContext.overall_loss += categorical_crossentropy;
 8004410:	ed94 6b44 	vldr	d6, [r4, #272]	; 0x110
 8004414:	ee30 6b06 	vadd.f64	d6, d0, d6
 8004418:	ed84 6b44 	vstr	d6, [r4, #272]	; 0x110
    if (TestContext_Ptr->ValidationContext.nbr_tested > 0)
 800441c:	b13f      	cbz	r7, 800442e <TEST_PostProcess+0x346>
      TestContext_Ptr->ValidationContext.avg_loss = TestContext_Ptr->ValidationContext.overall_loss / (double)TestContext_Ptr->ValidationContext.nbr_tested;
 800441e:	ee07 7a90 	vmov	s15, r7
 8004422:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8004426:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800442a:	ed84 5b46 	vstr	d5, [r4, #280]	; 0x118
    TestContext_Ptr->ValidationContext.valid_conf_matrix[TestContext_Ptr->ValidationContext.class_index][predicted_class]++;
 800442e:	eb0b 0545 	add.w	r5, fp, r5, lsl #1
  UTIL_LCD_SetFont(&Font12);
 8004432:	48b5      	ldr	r0, [pc, #724]	; (8004708 <TEST_PostProcess+0x620>)
 8004434:	f204 4a44 	addw	sl, r4, #1092	; 0x444
        float value_norm = value / (float)(conf_max + 1);
 8004438:	f04f 083c 	mov.w	r8, #60	; 0x3c
 800443c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004440:	f10d 0918 	add.w	r9, sp, #24
    TestContext_Ptr->ValidationContext.valid_conf_matrix[TestContext_Ptr->ValidationContext.class_index][predicted_class]++;
 8004444:	f8d5 3448 	ldr.w	r3, [r5, #1096]	; 0x448
 8004448:	3301      	adds	r3, #1
 800444a:	f8c5 3448 	str.w	r3, [r5, #1096]	; 0x448
      if (conf_matrix[row][col] > conf_max)
 800444e:	f8d4 544c 	ldr.w	r5, [r4, #1100]	; 0x44c
 8004452:	f8d4 3448 	ldr.w	r3, [r4, #1096]	; 0x448
 8004456:	429d      	cmp	r5, r3
 8004458:	bf38      	it	cc
 800445a:	461d      	movcc	r5, r3
 800445c:	f8d4 3450 	ldr.w	r3, [r4, #1104]	; 0x450
 8004460:	429d      	cmp	r5, r3
 8004462:	bf38      	it	cc
 8004464:	461d      	movcc	r5, r3
 8004466:	f8d4 3454 	ldr.w	r3, [r4, #1108]	; 0x454
 800446a:	429d      	cmp	r5, r3
 800446c:	bf38      	it	cc
 800446e:	461d      	movcc	r5, r3
  UTIL_LCD_SetFont(&Font12);
 8004470:	f016 fb74 	bl	801ab5c <UTIL_LCD_SetFont>
  for (int row = 0; row < NN_OUTPUT_CLASS_NUMBER; row++)
 8004474:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
        float value_norm = value / (float)(conf_max + 1);
 8004478:	3501      	adds	r5, #1
 800447a:	ee07 5a90 	vmov	s15, r5
 800447e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004482:	e9cd 4603 	strd	r4, r6, [sp, #12]
 8004486:	ee87 9a27 	vdiv.f32	s18, s14, s15
    double categorical_crossentropy = 10.0;
 800448a:	4655      	mov	r5, sl
 800448c:	f240 1481 	movw	r4, #385	; 0x181
        sprintf(conf_value, ".");
 8004490:	272e      	movs	r7, #46	; 0x2e
      uint32_t value = conf_matrix[row][col];
 8004492:	f855 3f04 	ldr.w	r3, [r5, #4]!
        float value_norm = value / (float)(conf_max + 1);
 8004496:	ee07 3a90 	vmov	s15, r3
        int heat_map_idx = (int)floorf(value_norm * 9.0f);
 800449a:	eeb2 8a02 	vmov.f32	s16, #34	; 0x41100000  9.0
        float value_norm = value / (float)(conf_max + 1);
 800449e:	eef8 7a67 	vcvt.f32.u32	s15, s15
      if (value > 0)
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f000 80c8 	beq.w	8004638 <TEST_PostProcess+0x550>
        int heat_map_idx = (int)floorf(value_norm * 9.0f);
 80044a8:	ee27 8a88 	vmul.f32	s16, s15, s16
        UTIL_LCD_SetBackColor(heat_map[heat_map_idx]);
 80044ac:	4b97      	ldr	r3, [pc, #604]	; (800470c <TEST_PostProcess+0x624>)
        int heat_map_idx = (int)floorf(value_norm * 9.0f);
 80044ae:	ee28 8a09 	vmul.f32	s16, s16, s18
 80044b2:	febb 8a48 	vrintm.f32	s16, s16
 80044b6:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80044ba:	ee17 6a90 	vmov	r6, s15
        UTIL_LCD_SetBackColor(heat_map[heat_map_idx]);
 80044be:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80044c2:	f016 fb43 	bl	801ab4c <UTIL_LCD_SetBackColor>
        uint32_t text_color = heat_map_idx > 5 ? UTIL_LCD_COLOR_BLACK : UTIL_LCD_COLOR_WHITE;
 80044c6:	2e05      	cmp	r6, #5
        UTIL_LCD_SetTextColor(text_color);
 80044c8:	bfcc      	ite	gt
 80044ca:	f04f 407f 	movgt.w	r0, #4278190080	; 0xff000000
 80044ce:	f04f 30ff 	movle.w	r0, #4294967295
 80044d2:	f016 fb33 	bl	801ab3c <UTIL_LCD_SetTextColor>
        sprintf(conf_value, "%d", (unsigned int)conf_matrix[row][col]);
 80044d6:	682a      	ldr	r2, [r5, #0]
 80044d8:	498d      	ldr	r1, [pc, #564]	; (8004710 <TEST_PostProcess+0x628>)
 80044da:	4648      	mov	r0, r9
 80044dc:	f021 f9e6 	bl	80258ac <siprintf>
      UTIL_LCD_DisplayStringAt(x_off + col * 20, y_off + row * 20, (uint8_t *)conf_value, LEFT_MODE);
 80044e0:	2303      	movs	r3, #3
 80044e2:	464a      	mov	r2, r9
 80044e4:	4641      	mov	r1, r8
 80044e6:	4620      	mov	r0, r4
 80044e8:	f016 fc30 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
      UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
 80044ec:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80044f0:	f016 fb2c 	bl	801ab4c <UTIL_LCD_SetBackColor>
      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 80044f4:	f04f 30ff 	mov.w	r0, #4294967295
 80044f8:	f016 fb20 	bl	801ab3c <UTIL_LCD_SetTextColor>
    for (int col = 0; col < NN_OUTPUT_CLASS_NUMBER; col++)
 80044fc:	3414      	adds	r4, #20
 80044fe:	f240 13a9 	movw	r3, #425	; 0x1a9
 8004502:	429c      	cmp	r4, r3
 8004504:	d1c5      	bne.n	8004492 <TEST_PostProcess+0x3aa>
  for (int row = 0; row < NN_OUTPUT_CLASS_NUMBER; row++)
 8004506:	f108 0814 	add.w	r8, r8, #20
 800450a:	f10a 0a08 	add.w	sl, sl, #8
 800450e:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
 8004512:	d1ba      	bne.n	800448a <TEST_PostProcess+0x3a2>
  UTIL_LCD_SetFont(&Font20);
 8004514:	487f      	ldr	r0, [pc, #508]	; (8004714 <TEST_PostProcess+0x62c>)
    UTIL_LCD_DisplayStringAt(40, LINE(22), (uint8_t *)tmp_msg, LEFT_MODE);
 8004516:	2516      	movs	r5, #22
 8004518:	e9dd 4603 	ldrd	r4, r6, [sp, #12]
  UTIL_LCD_SetFont(&Font20);
 800451c:	f016 fb1e 	bl	801ab5c <UTIL_LCD_SetFont>
    sprintf(tmp_msg, "%s %.0f%%", NN_OUTPUT_CLASS_LIST[predicted_class], confidence * 100);
 8004520:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8004718 <TEST_PostProcess+0x630>
 8004524:	9b05      	ldr	r3, [sp, #20]
 8004526:	ee28 7a87 	vmul.f32	s14, s17, s14
 800452a:	497c      	ldr	r1, [pc, #496]	; (800471c <TEST_PostProcess+0x634>)
 800452c:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
 8004530:	4873      	ldr	r0, [pc, #460]	; (8004700 <TEST_PostProcess+0x618>)
 8004532:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8004536:	ed8d 7b00 	vstr	d7, [sp]
 800453a:	f021 f9b7 	bl	80258ac <siprintf>
    UTIL_LCD_DisplayStringAt(40, LINE(21), (uint8_t *)tmp_msg, LEFT_MODE);
 800453e:	f016 fb15 	bl	801ab6c <UTIL_LCD_GetFont>
 8004542:	88c1      	ldrh	r1, [r0, #6]
 8004544:	2303      	movs	r3, #3
 8004546:	4a6e      	ldr	r2, [pc, #440]	; (8004700 <TEST_PostProcess+0x618>)
 8004548:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800454c:	2028      	movs	r0, #40	; 0x28
 800454e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8004552:	f016 fbfb 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
    sprintf(tmp_msg, "Average loss (categorical cross-entropy) %.4f ", TestContext_Ptr->ValidationContext.avg_loss);
 8004556:	4972      	ldr	r1, [pc, #456]	; (8004720 <TEST_PostProcess+0x638>)
 8004558:	4869      	ldr	r0, [pc, #420]	; (8004700 <TEST_PostProcess+0x618>)
 800455a:	e9d4 2346 	ldrd	r2, r3, [r4, #280]	; 0x118
 800455e:	f021 f9a5 	bl	80258ac <siprintf>
    UTIL_LCD_DisplayStringAt(40, LINE(22), (uint8_t *)tmp_msg, LEFT_MODE);
 8004562:	f016 fb03 	bl	801ab6c <UTIL_LCD_GetFont>
 8004566:	88c1      	ldrh	r1, [r0, #6]
 8004568:	2303      	movs	r3, #3
 800456a:	2028      	movs	r0, #40	; 0x28
 800456c:	4a64      	ldr	r2, [pc, #400]	; (8004700 <TEST_PostProcess+0x618>)
 800456e:	fb05 f101 	mul.w	r1, r5, r1
 8004572:	f016 fbeb 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
    sprintf(tmp_msg, "Class: %s, id %d", TestContext_Ptr->ValidationContext.fno.fname, TestContext_Ptr->ValidationContext.class_index);
 8004576:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 800457a:	f504 72b7 	add.w	r2, r4, #366	; 0x16e
 800457e:	4969      	ldr	r1, [pc, #420]	; (8004724 <TEST_PostProcess+0x63c>)
 8004580:	485f      	ldr	r0, [pc, #380]	; (8004700 <TEST_PostProcess+0x618>)
 8004582:	f021 f993 	bl	80258ac <siprintf>
    UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)tmp_msg, CENTER_MODE);
 8004586:	f016 faf1 	bl	801ab6c <UTIL_LCD_GetFont>
 800458a:	2301      	movs	r3, #1
 800458c:	88c1      	ldrh	r1, [r0, #6]
 800458e:	2000      	movs	r0, #0
 8004590:	4a5b      	ldr	r2, [pc, #364]	; (8004700 <TEST_PostProcess+0x618>)
 8004592:	f016 fbdb 	bl	801ad4c <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8004596:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8004598:	f7fd f96a 	bl	8001870 <DISPLAY_Refresh>
    if(TestContext_Ptr->UartContext.uart_cmd_ongoing)
 800459c:	f8d4 34a0 	ldr.w	r3, [r4, #1184]	; 0x4a0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f43f adb0 	beq.w	8004106 <TEST_PostProcess+0x1e>
        *(TestContext_Ptr->ValidationContext.validation_write_bufferPtr)++=*((uint8_t *)(App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer) + i);
 80045a6:	f8d4 3498 	ldr.w	r3, [r4, #1176]	; 0x498
 80045aa:	6b32      	ldr	r2, [r6, #48]	; 0x30
 80045ac:	1c59      	adds	r1, r3, #1
 80045ae:	6812      	ldr	r2, [r2, #0]
 80045b0:	f8c4 1498 	str.w	r1, [r4, #1176]	; 0x498
 80045b4:	7812      	ldrb	r2, [r2, #0]
 80045b6:	701a      	strb	r2, [r3, #0]
 80045b8:	f8d4 3498 	ldr.w	r3, [r4, #1176]	; 0x498
 80045bc:	6b32      	ldr	r2, [r6, #48]	; 0x30
 80045be:	1c59      	adds	r1, r3, #1
 80045c0:	6812      	ldr	r2, [r2, #0]
 80045c2:	f8c4 1498 	str.w	r1, [r4, #1176]	; 0x498
 80045c6:	7852      	ldrb	r2, [r2, #1]
 80045c8:	701a      	strb	r2, [r3, #0]
 80045ca:	f8d4 3498 	ldr.w	r3, [r4, #1176]	; 0x498
 80045ce:	6b32      	ldr	r2, [r6, #48]	; 0x30
 80045d0:	1c59      	adds	r1, r3, #1
 80045d2:	6812      	ldr	r2, [r2, #0]
 80045d4:	f8c4 1498 	str.w	r1, [r4, #1176]	; 0x498
 80045d8:	7892      	ldrb	r2, [r2, #2]
 80045da:	701a      	strb	r2, [r3, #0]
 80045dc:	f8d4 3498 	ldr.w	r3, [r4, #1176]	; 0x498
 80045e0:	6b32      	ldr	r2, [r6, #48]	; 0x30
 80045e2:	1c59      	adds	r1, r3, #1
 80045e4:	6812      	ldr	r2, [r2, #0]
 80045e6:	f8c4 1498 	str.w	r1, [r4, #1176]	; 0x498
 80045ea:	78d2      	ldrb	r2, [r2, #3]
 80045ec:	701a      	strb	r2, [r3, #0]
 80045ee:	f8d4 3498 	ldr.w	r3, [r4, #1176]	; 0x498
 80045f2:	6b32      	ldr	r2, [r6, #48]	; 0x30
 80045f4:	1c59      	adds	r1, r3, #1
 80045f6:	6812      	ldr	r2, [r2, #0]
 80045f8:	f8c4 1498 	str.w	r1, [r4, #1176]	; 0x498
 80045fc:	7912      	ldrb	r2, [r2, #4]
 80045fe:	701a      	strb	r2, [r3, #0]
 8004600:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	f8d4 3498 	ldr.w	r3, [r4, #1176]	; 0x498
 8004608:	1c59      	adds	r1, r3, #1
 800460a:	f8c4 1498 	str.w	r1, [r4, #1176]	; 0x498
 800460e:	7952      	ldrb	r2, [r2, #5]
 8004610:	701a      	strb	r2, [r3, #0]
 8004612:	f8d4 3498 	ldr.w	r3, [r4, #1176]	; 0x498
 8004616:	6b32      	ldr	r2, [r6, #48]	; 0x30
 8004618:	1c59      	adds	r1, r3, #1
 800461a:	6812      	ldr	r2, [r2, #0]
 800461c:	f8c4 1498 	str.w	r1, [r4, #1176]	; 0x498
 8004620:	7992      	ldrb	r2, [r2, #6]
 8004622:	701a      	strb	r2, [r3, #0]
 8004624:	6b32      	ldr	r2, [r6, #48]	; 0x30
 8004626:	f8d4 3498 	ldr.w	r3, [r4, #1176]	; 0x498
 800462a:	6812      	ldr	r2, [r2, #0]
 800462c:	1c59      	adds	r1, r3, #1
 800462e:	f8c4 1498 	str.w	r1, [r4, #1176]	; 0x498
 8004632:	79d2      	ldrb	r2, [r2, #7]
 8004634:	701a      	strb	r2, [r3, #0]
      for (int i=0; i<AI_NET_OUTPUT_SIZE*4; i++)
 8004636:	e566      	b.n	8004106 <TEST_PostProcess+0x1e>
        sprintf(conf_value, ".");
 8004638:	f8a9 7000 	strh.w	r7, [r9]
 800463c:	e750      	b.n	80044e0 <TEST_PostProcess+0x3f8>
      if((TestContext_Ptr->UartContext.uart_cmd_ongoing==0)|| (TestContext_Ptr->UartContext.uart_cmd_ongoing==1 && TestContext_Ptr->UartContext.uart_host_requested_dump_memory == SDCARD))
 800463e:	2b00      	cmp	r3, #0
 8004640:	f47f adc0 	bne.w	80041c4 <TEST_PostProcess+0xdc>
        BSP_SD_DeInit(0);
 8004644:	2000      	movs	r0, #0
 8004646:	f006 fc4b 	bl	800aee0 <BSP_SD_DeInit>
        CAMERA_Init(App_Cxt_Ptr->Camera_ContextPtr);
 800464a:	69e8      	ldr	r0, [r5, #28]
 800464c:	f7fc fe60 	bl	8001310 <CAMERA_Init>
        if(TestContext_Ptr->DumpContext.Dump_FrameSource == CAMERA_COLORBAR)
 8004650:	7923      	ldrb	r3, [r4, #4]
 8004652:	2b02      	cmp	r3, #2
 8004654:	f000 814d 	beq.w	80048f2 <TEST_PostProcess+0x80a>
        while (!App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready);
 8004658:	69ea      	ldr	r2, [r5, #28]
 800465a:	7d13      	ldrb	r3, [r2, #20]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d0fc      	beq.n	800465a <TEST_PostProcess+0x572>
        App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready = 0; /* Reset flag */
 8004660:	2000      	movs	r0, #0
 8004662:	7510      	strb	r0, [r2, #20]
        BSP_CAMERA_Resume(0);
 8004664:	f005 fdea 	bl	800a23c <BSP_CAMERA_Resume>
    TestContext_Ptr->DumpContext.dump_state = 0;
 8004668:	2300      	movs	r3, #0
 800466a:	f8d4 24a0 	ldr.w	r2, [r4, #1184]	; 0x4a0
 800466e:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
    if(TestContext_Ptr->UartContext.uart_cmd_ongoing)
 8004672:	2a00      	cmp	r2, #0
 8004674:	f43f ad6a 	beq.w	800414c <TEST_PostProcess+0x64>
 8004678:	f894 34a6 	ldrb.w	r3, [r4, #1190]	; 0x4a6
 800467c:	e5a5      	b.n	80041ca <TEST_PostProcess+0xe2>
      const char *predicted_class_name = NN_OUTPUT_CLASS_LIST[predicted_class];
 800467e:	4618      	mov	r0, r3
      sprintf(tmp_msg, "%s/%s was missclassified as %s\n", class_path, image_name, predicted_class_name);
 8004680:	4642      	mov	r2, r8
 8004682:	4929      	ldr	r1, [pc, #164]	; (8004728 <TEST_PostProcess+0x640>)
 8004684:	f850 502b 	ldr.w	r5, [r0, fp, lsl #2]
 8004688:	4638      	mov	r0, r7
      const char *predicted_class_name = NN_OUTPUT_CLASS_LIST[predicted_class];
 800468a:	9305      	str	r3, [sp, #20]
      sprintf(tmp_msg, "%s/%s was missclassified as %s\n", class_path, image_name, predicted_class_name);
 800468c:	464b      	mov	r3, r9
 800468e:	9500      	str	r5, [sp, #0]
 8004690:	f021 f90c 	bl	80258ac <siprintf>
      write_txt("missclassified.txt", tmp_msg, FA_WRITE | FA_OPEN_APPEND, App_Cxt_Ptr);
 8004694:	4639      	mov	r1, r7
 8004696:	f106 0324 	add.w	r3, r6, #36	; 0x24
 800469a:	2232      	movs	r2, #50	; 0x32
 800469c:	4823      	ldr	r0, [pc, #140]	; (800472c <TEST_PostProcess+0x644>)
 800469e:	f7fd fa79 	bl	8001b94 <write_txt.isra.0>
 80046a2:	f8d4 53bc 	ldr.w	r5, [r4, #956]	; 0x3bc
 80046a6:	e6a0      	b.n	80043ea <TEST_PostProcess+0x302>
    double categorical_crossentropy = 10.0;
 80046a8:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 80046ac:	e6b0      	b.n	8004410 <TEST_PostProcess+0x328>
      Error_Handler();
 80046ae:	f000 faad 	bl	8004c0c <Error_Handler>
 80046b2:	e601      	b.n	80042b8 <TEST_PostProcess+0x1d0>
    Error_Handler();
 80046b4:	f000 faaa 	bl	8004c0c <Error_Handler>
 80046b8:	e60b      	b.n	80042d2 <TEST_PostProcess+0x1ea>
      *(aTxBuffer) = CMD_COMPLETE_SUCCESS_EVT;
 80046ba:	4f1d      	ldr	r7, [pc, #116]	; (8004730 <TEST_PostProcess+0x648>)
 80046bc:	2202      	movs	r2, #2
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80046be:	f204 45bc 	addw	r5, r4, #1212	; 0x4bc
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80046c2:	2120      	movs	r1, #32
 80046c4:	4638      	mov	r0, r7
      TestContext_Ptr->UartContext.uart_cmd_ongoing=0;//terminates the UART command processing
 80046c6:	f8c4 64a0 	str.w	r6, [r4, #1184]	; 0x4a0
      *(aTxBuffer) = CMD_COMPLETE_SUCCESS_EVT;
 80046ca:	703a      	strb	r2, [r7, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80046cc:	f000 fa30 	bl	8004b30 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80046d0:	4639      	mov	r1, r7
 80046d2:	4628      	mov	r0, r5
 80046d4:	2201      	movs	r2, #1
 80046d6:	f00d fe0d 	bl	80122f4 <HAL_UART_Transmit_DMA>
 80046da:	2800      	cmp	r0, #0
 80046dc:	f040 8093 	bne.w	8004806 <TEST_PostProcess+0x71e>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 80046e0:	4628      	mov	r0, r5
 80046e2:	f00e f831 	bl	8012748 <HAL_UART_GetState>
 80046e6:	2820      	cmp	r0, #32
 80046e8:	d1fa      	bne.n	80046e0 <TEST_PostProcess+0x5f8>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 80046ea:	4628      	mov	r0, r5
 80046ec:	220a      	movs	r2, #10
 80046ee:	4911      	ldr	r1, [pc, #68]	; (8004734 <TEST_PostProcess+0x64c>)
 80046f0:	f00d fe50 	bl	8012394 <HAL_UART_Receive_DMA>
 80046f4:	2800      	cmp	r0, #0
 80046f6:	f43f ad29 	beq.w	800414c <TEST_PostProcess+0x64>
    Error_Handler();
 80046fa:	f000 fa87 	bl	8004c0c <Error_Handler>
    BSP_LED_On(LED_GREEN);
 80046fe:	e525      	b.n	800414c <TEST_PostProcess+0x64>
 8004700:	200083c0 	.word	0x200083c0
 8004704:	20000004 	.word	0x20000004
 8004708:	20007700 	.word	0x20007700
 800470c:	08028b1c 	.word	0x08028b1c
 8004710:	08028a70 	.word	0x08028a70
 8004714:	20007708 	.word	0x20007708
 8004718:	42c80000 	.word	0x42c80000
 800471c:	080283c8 	.word	0x080283c8
 8004720:	08028a74 	.word	0x08028a74
 8004724:	08028aa4 	.word	0x08028aa4
 8004728:	08028a50 	.word	0x08028a50
 800472c:	08028708 	.word	0x08028708
 8004730:	30000280 	.word	0x30000280
 8004734:	300002a0 	.word	0x300002a0
        if(TestContext_Ptr->NonReg_FirstRun == 0)
 8004738:	f8d4 3584 	ldr.w	r3, [r4, #1412]	; 0x584
 800473c:	2b00      	cmp	r3, #0
 800473e:	d15b      	bne.n	80047f8 <TEST_PostProcess+0x710>
            if(dump_output_buff[i] != *((float*)App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer + i))   
 8004740:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8004742:	4e80      	ldr	r6, [pc, #512]	; (8004944 <TEST_PostProcess+0x85c>)
 8004744:	6812      	ldr	r2, [r2, #0]
 8004746:	ed96 7a00 	vldr	s14, [r6]
 800474a:	edd2 7a00 	vldr	s15, [r2]
 800474e:	eeb4 7a67 	vcmp.f32	s14, s15
 8004752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004756:	f000 80e1 	beq.w	800491c <TEST_PostProcess+0x834>
            TestContext_Ptr->UartContext.uart_host_requested_dump_number = 0;//so to subsequently terminates the UART command processing
 800475a:	2200      	movs	r2, #0
 800475c:	f8c4 24a8 	str.w	r2, [r4, #1192]	; 0x4a8
        if(TestContext_Ptr->DumpContext.dump_write_bufferPtr == (dump_intermediate_data_ping_buff + DUMP_INTERMEDIATE_DATA_BUFFER_SIZE - (BUFF_NAME_STRING_TOTAL_SIZE-TestContext_Ptr->Total_Char_Name_Size)))
 8004760:	f8d4 1588 	ldr.w	r1, [r4, #1416]	; 0x588
 8004764:	4a78      	ldr	r2, [pc, #480]	; (8004948 <TEST_PostProcess+0x860>)
 8004766:	4879      	ldr	r0, [pc, #484]	; (800494c <TEST_PostProcess+0x864>)
 8004768:	440a      	add	r2, r1
 800476a:	6821      	ldr	r1, [r4, #0]
 800476c:	eb02 0c00 	add.w	ip, r2, r0
 8004770:	4561      	cmp	r1, ip
 8004772:	f000 80d0 	beq.w	8004916 <TEST_PostProcess+0x82e>
        else if(TestContext_Ptr->DumpContext.dump_write_bufferPtr == (dump_intermediate_data_pong_buff + DUMP_INTERMEDIATE_DATA_BUFFER_SIZE - (BUFF_NAME_STRING_TOTAL_SIZE-TestContext_Ptr->Total_Char_Name_Size)))
 8004776:	f8df c1ec 	ldr.w	ip, [pc, #492]	; 8004964 <TEST_PostProcess+0x87c>
 800477a:	4462      	add	r2, ip
 800477c:	4291      	cmp	r1, r2
          TestContext_Ptr->DumpContext.dump_write_bufferPtr=dump_intermediate_data_ping_buff;
 800477e:	bf08      	it	eq
 8004780:	6020      	streq	r0, [r4, #0]
 8004782:	e529      	b.n	80041d8 <TEST_PostProcess+0xf0>
        TestContext_Ptr->UartContext.uart_host_requested_mode=NOMINAL;
 8004784:	f04f 0901 	mov.w	r9, #1
        *(aTxBuffer) = cmd_status;
 8004788:	4871      	ldr	r0, [pc, #452]	; (8004950 <TEST_PostProcess+0x868>)
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 800478a:	2202      	movs	r2, #2
 800478c:	2120      	movs	r1, #32
        TestContext_Ptr->UartContext.uart_host_requested_mode=NOMINAL;
 800478e:	f884 94a4 	strb.w	r9, [r4, #1188]	; 0x4a4
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8004792:	f204 48bc 	addw	r8, r4, #1212	; 0x4bc
        *(aTxBuffer) = cmd_status;
 8004796:	7007      	strb	r7, [r0, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8004798:	f000 f9ca 	bl	8004b30 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 800479c:	486c      	ldr	r0, [pc, #432]	; (8004950 <TEST_PostProcess+0x868>)
 800479e:	464a      	mov	r2, r9
 80047a0:	4601      	mov	r1, r0
 80047a2:	4640      	mov	r0, r8
 80047a4:	f00d fda6 	bl	80122f4 <HAL_UART_Transmit_DMA>
 80047a8:	2800      	cmp	r0, #0
 80047aa:	f040 80ae 	bne.w	800490a <TEST_PostProcess+0x822>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 80047ae:	4640      	mov	r0, r8
 80047b0:	f00d ffca 	bl	8012748 <HAL_UART_GetState>
 80047b4:	2820      	cmp	r0, #32
 80047b6:	d1fa      	bne.n	80047ae <TEST_PostProcess+0x6c6>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 80047b8:	4640      	mov	r0, r8
 80047ba:	220a      	movs	r2, #10
 80047bc:	4965      	ldr	r1, [pc, #404]	; (8004954 <TEST_PostProcess+0x86c>)
 80047be:	f00d fde9 	bl	8012394 <HAL_UART_Receive_DMA>
 80047c2:	2800      	cmp	r0, #0
 80047c4:	f040 80a4 	bne.w	8004910 <TEST_PostProcess+0x828>
        CAMERA_Disable_TestBar_Mode(App_Cxt_Ptr->Camera_ContextPtr);
 80047c8:	69e8      	ldr	r0, [r5, #28]
 80047ca:	f7fc febf 	bl	800154c <CAMERA_Disable_TestBar_Mode>
        App_Cxt_Ptr->Operating_Mode=NOMINAL;
 80047ce:	2201      	movs	r2, #1
        TestContext_Ptr->UartContext.uart_cmd_ongoing=0;//returning to NOMINAL mode terminates the UART command processing  
 80047d0:	2300      	movs	r3, #0
        App_Cxt_Ptr->Operating_Mode=NOMINAL;
 80047d2:	702a      	strb	r2, [r5, #0]
        if(TestContext_Ptr->UartContext.uart_host_nonreg_run==1)
 80047d4:	f8d4 24b8 	ldr.w	r2, [r4, #1208]	; 0x4b8
        TestContext_Ptr->UartContext.uart_cmd_ongoing=0;//returning to NOMINAL mode terminates the UART command processing  
 80047d8:	f8c4 34a0 	str.w	r3, [r4, #1184]	; 0x4a0
        if(TestContext_Ptr->UartContext.uart_host_nonreg_run==1)
 80047dc:	2a01      	cmp	r2, #1
          App_Cxt_Ptr->run_loop = 0;
 80047de:	bf18      	it	ne
 80047e0:	606b      	strne	r3, [r5, #4]
        if(TestContext_Ptr->UartContext.uart_host_requested_dump_memory == SDCARD)
 80047e2:	f894 04a6 	ldrb.w	r0, [r4, #1190]	; 0x4a6
          TestContext_Ptr->UartContext.uart_host_nonreg_run=0;
 80047e6:	bf08      	it	eq
 80047e8:	f8c4 34b8 	streq.w	r3, [r4, #1208]	; 0x4b8
        if(TestContext_Ptr->UartContext.uart_host_requested_dump_memory == SDCARD)
 80047ec:	2800      	cmp	r0, #0
 80047ee:	f47f ad15 	bne.w	800421c <TEST_PostProcess+0x134>
          BSP_SD_DeInit(0);/*Required in order to avoid subsequent call to Camera_Init() fct to fail*/
 80047f2:	f006 fb75 	bl	800aee0 <BSP_SD_DeInit>
 80047f6:	e511      	b.n	800421c <TEST_PostProcess+0x134>
        if(TestContext_Ptr->NonReg_FirstRun==1)
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d07e      	beq.n	80048fa <TEST_PostProcess+0x812>
 80047fc:	f8d4 34a8 	ldr.w	r3, [r4, #1192]	; 0x4a8
  uint8_t cmd_status=CMD_COMPLETE_SUCCESS_EVT;
 8004800:	2702      	movs	r7, #2
 8004802:	4e50      	ldr	r6, [pc, #320]	; (8004944 <TEST_PostProcess+0x85c>)
 8004804:	e7ac      	b.n	8004760 <TEST_PostProcess+0x678>
      Error_Handler();
 8004806:	f000 fa01 	bl	8004c0c <Error_Handler>
 800480a:	e769      	b.n	80046e0 <TEST_PostProcess+0x5f8>
          sprintf(msg, "%s %.0f%%", App_Cxt_Ptr->nn_top1_output_class_name, App_Cxt_Ptr->nn_top1_output_class_proba * 100);
 800480c:	ed95 7a04 	vldr	s14, [r5, #16]
 8004810:	f10d 0918 	add.w	r9, sp, #24
 8004814:	eddf 7a50 	vldr	s15, [pc, #320]	; 8004958 <TEST_PostProcess+0x870>
          for(int i=0;i<strlen(msg);i++)
 8004818:	f04f 0b00 	mov.w	fp, #0
 800481c:	f8df a130 	ldr.w	sl, [pc, #304]	; 8004950 <TEST_PostProcess+0x868>
          sprintf(msg, "%s %.0f%%", App_Cxt_Ptr->nn_top1_output_class_name, App_Cxt_Ptr->nn_top1_output_class_proba * 100);
 8004820:	4648      	mov	r0, r9
 8004822:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004826:	68ea      	ldr	r2, [r5, #12]
 8004828:	494c      	ldr	r1, [pc, #304]	; (800495c <TEST_PostProcess+0x874>)
          for(int i=0;i<strlen(msg);i++)
 800482a:	46c8      	mov	r8, r9
 800482c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004830:	4657      	mov	r7, sl
          sprintf(msg, "%s %.0f%%", App_Cxt_Ptr->nn_top1_output_class_name, App_Cxt_Ptr->nn_top1_output_class_proba * 100);
 8004832:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8004836:	ed8d 7b00 	vstr	d7, [sp]
 800483a:	f021 f837 	bl	80258ac <siprintf>
          for(int i=0;i<strlen(msg);i++)
 800483e:	e003      	b.n	8004848 <TEST_PostProcess+0x760>
            *(aTxBuffer + i) = msg[i];
 8004840:	f818 3b01 	ldrb.w	r3, [r8], #1
 8004844:	f807 3b01 	strb.w	r3, [r7], #1
          for(int i=0;i<strlen(msg);i++)
 8004848:	4648      	mov	r0, r9
 800484a:	f7fb fd53 	bl	80002f4 <strlen>
 800484e:	4583      	cmp	fp, r0
 8004850:	f10b 0b01 	add.w	fp, fp, #1
 8004854:	d3f4      	bcc.n	8004840 <TEST_PostProcess+0x758>
          *(aTxBuffer + strlen(msg)) = 32;//Space
 8004856:	2120      	movs	r1, #32
          Uart_Tx(TestContext_Ptr, (uint8_t*)aTxBuffer, sizeof(aTxBuffer), strlen(msg)+1);
 8004858:	f100 0801 	add.w	r8, r0, #1
          *(aTxBuffer + strlen(msg)) = 32;//Space
 800485c:	4b3c      	ldr	r3, [pc, #240]	; (8004950 <TEST_PostProcess+0x868>)
  if(TxDataTransferSize > TxDataBufSize)
 800485e:	4588      	cmp	r8, r1
          *(aTxBuffer + strlen(msg)) = 32;//Space
 8004860:	5419      	strb	r1, [r3, r0]
  if(TxDataTransferSize > TxDataBufSize)
 8004862:	d900      	bls.n	8004866 <TEST_PostProcess+0x77e>
    while(1);
 8004864:	e7fe      	b.n	8004864 <TEST_PostProcess+0x77c>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8004866:	f204 47bc 	addw	r7, r4, #1212	; 0x4bc
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 800486a:	2202      	movs	r2, #2
 800486c:	4838      	ldr	r0, [pc, #224]	; (8004950 <TEST_PostProcess+0x868>)
 800486e:	f000 f95f 	bl	8004b30 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8004872:	4638      	mov	r0, r7
 8004874:	fa1f f288 	uxth.w	r2, r8
 8004878:	4935      	ldr	r1, [pc, #212]	; (8004950 <TEST_PostProcess+0x868>)
 800487a:	f00d fd3b 	bl	80122f4 <HAL_UART_Transmit_DMA>
 800487e:	2800      	cmp	r0, #0
 8004880:	d15a      	bne.n	8004938 <TEST_PostProcess+0x850>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8004882:	4638      	mov	r0, r7
 8004884:	f00d ff60 	bl	8012748 <HAL_UART_GetState>
 8004888:	2820      	cmp	r0, #32
 800488a:	d1fa      	bne.n	8004882 <TEST_PostProcess+0x79a>
          sprintf(msg, "Inference: %ldms", App_Cxt_Ptr->nn_inference_time);
 800488c:	68aa      	ldr	r2, [r5, #8]
 800488e:	4648      	mov	r0, r9
 8004890:	4933      	ldr	r1, [pc, #204]	; (8004960 <TEST_PostProcess+0x878>)
          for(int i=0;i<strlen(msg);i++)
 8004892:	f04f 0800 	mov.w	r8, #0
          sprintf(msg, "Inference: %ldms", App_Cxt_Ptr->nn_inference_time);
 8004896:	f021 f809 	bl	80258ac <siprintf>
          for(int i=0;i<strlen(msg);i++)
 800489a:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800489e:	e003      	b.n	80048a8 <TEST_PostProcess+0x7c0>
            *(aTxBuffer + i) = msg[i];
 80048a0:	f81b 3b01 	ldrb.w	r3, [fp], #1
 80048a4:	f80a 3b01 	strb.w	r3, [sl], #1
          for(int i=0;i<strlen(msg);i++)
 80048a8:	4648      	mov	r0, r9
 80048aa:	f7fb fd23 	bl	80002f4 <strlen>
 80048ae:	4580      	cmp	r8, r0
 80048b0:	f108 0801 	add.w	r8, r8, #1
 80048b4:	d3f4      	bcc.n	80048a0 <TEST_PostProcess+0x7b8>
          *(aTxBuffer + strlen(msg)) = 13;//CR
 80048b6:	220d      	movs	r2, #13
          *(aTxBuffer + strlen(msg)+1) = 10;//LF
 80048b8:	4925      	ldr	r1, [pc, #148]	; (8004950 <TEST_PostProcess+0x868>)
          Uart_Tx(TestContext_Ptr, (uint8_t*)aTxBuffer, sizeof(aTxBuffer), strlen(msg)+2);
 80048ba:	f100 0802 	add.w	r8, r0, #2
          *(aTxBuffer + strlen(msg)) = 13;//CR
 80048be:	540a      	strb	r2, [r1, r0]
          *(aTxBuffer + strlen(msg)+1) = 10;//LF
 80048c0:	180b      	adds	r3, r1, r0
 80048c2:	220a      	movs	r2, #10
  if(TxDataTransferSize > TxDataBufSize)
 80048c4:	f1b8 0f20 	cmp.w	r8, #32
          *(aTxBuffer + strlen(msg)+1) = 10;//LF
 80048c8:	705a      	strb	r2, [r3, #1]
  if(TxDataTransferSize > TxDataBufSize)
 80048ca:	d900      	bls.n	80048ce <TEST_PostProcess+0x7e6>
    while(1);
 80048cc:	e7fe      	b.n	80048cc <TEST_PostProcess+0x7e4>
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80048ce:	2202      	movs	r2, #2
 80048d0:	2120      	movs	r1, #32
 80048d2:	481f      	ldr	r0, [pc, #124]	; (8004950 <TEST_PostProcess+0x868>)
 80048d4:	f000 f92c 	bl	8004b30 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80048d8:	491d      	ldr	r1, [pc, #116]	; (8004950 <TEST_PostProcess+0x868>)
 80048da:	fa1f f288 	uxth.w	r2, r8
 80048de:	4638      	mov	r0, r7
 80048e0:	f00d fd08 	bl	80122f4 <HAL_UART_Transmit_DMA>
 80048e4:	bb58      	cbnz	r0, 800493e <TEST_PostProcess+0x856>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 80048e6:	4638      	mov	r0, r7
 80048e8:	f00d ff2e 	bl	8012748 <HAL_UART_GetState>
 80048ec:	2820      	cmp	r0, #32
 80048ee:	d1fa      	bne.n	80048e6 <TEST_PostProcess+0x7fe>
 80048f0:	e47d      	b.n	80041ee <TEST_PostProcess+0x106>
          CAMERA_Enable_TestBar_Mode(App_Cxt_Ptr->Camera_ContextPtr);
 80048f2:	69e8      	ldr	r0, [r5, #28]
 80048f4:	f7fc fdf8 	bl	80014e8 <CAMERA_Enable_TestBar_Mode>
 80048f8:	e6ae      	b.n	8004658 <TEST_PostProcess+0x570>
          TestContext_Ptr->NonReg_FirstRun=0;
 80048fa:	2200      	movs	r2, #0
 80048fc:	f8d4 34a8 	ldr.w	r3, [r4, #1192]	; 0x4a8
  uint8_t cmd_status=CMD_COMPLETE_SUCCESS_EVT;
 8004900:	2702      	movs	r7, #2
 8004902:	4e10      	ldr	r6, [pc, #64]	; (8004944 <TEST_PostProcess+0x85c>)
          TestContext_Ptr->NonReg_FirstRun=0;
 8004904:	f8c4 2584 	str.w	r2, [r4, #1412]	; 0x584
 8004908:	e72a      	b.n	8004760 <TEST_PostProcess+0x678>
      Error_Handler();
 800490a:	f000 f97f 	bl	8004c0c <Error_Handler>
 800490e:	e74e      	b.n	80047ae <TEST_PostProcess+0x6c6>
    Error_Handler();
 8004910:	f000 f97c 	bl	8004c0c <Error_Handler>
 8004914:	e758      	b.n	80047c8 <TEST_PostProcess+0x6e0>
          TestContext_Ptr->DumpContext.dump_write_bufferPtr=dump_intermediate_data_pong_buff;
 8004916:	4a13      	ldr	r2, [pc, #76]	; (8004964 <TEST_PostProcess+0x87c>)
 8004918:	6022      	str	r2, [r4, #0]
 800491a:	e45d      	b.n	80041d8 <TEST_PostProcess+0xf0>
            if(dump_output_buff[i] != *((float*)App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer + i))   
 800491c:	ed96 7a01 	vldr	s14, [r6, #4]
 8004920:	edd2 7a01 	vldr	s15, [r2, #4]
 8004924:	eeb4 7a67 	vcmp.f32	s14, s15
 8004928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800492c:	f47f af15 	bne.w	800475a <TEST_PostProcess+0x672>
 8004930:	f8d4 34a8 	ldr.w	r3, [r4, #1192]	; 0x4a8
  uint8_t cmd_status=CMD_COMPLETE_SUCCESS_EVT;
 8004934:	2702      	movs	r7, #2
 8004936:	e713      	b.n	8004760 <TEST_PostProcess+0x678>
      Error_Handler();
 8004938:	f000 f968 	bl	8004c0c <Error_Handler>
 800493c:	e7a1      	b.n	8004882 <TEST_PostProcess+0x79a>
 800493e:	f000 f965 	bl	8004c0c <Error_Handler>
 8004942:	e7d0      	b.n	80048e6 <TEST_PostProcess+0x7fe>
 8004944:	d0cb08a0 	.word	0xd0cb08a0
 8004948:	00045808 	.word	0x00045808
 800494c:	d0cb0a40 	.word	0xd0cb0a40
 8004950:	30000280 	.word	0x30000280
 8004954:	300002a0 	.word	0x300002a0
 8004958:	42c80000 	.word	0x42c80000
 800495c:	080283c8 	.word	0x080283c8
 8004960:	080283d4 	.word	0x080283d4
 8004964:	d0cf6300 	.word	0xd0cf6300

08004968 <HAL_UART_ErrorCallback>:
 *
 * @param huart pointer to UART handle
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
  while(1);
 8004968:	e7fe      	b.n	8004968 <HAL_UART_ErrorCallback>
 800496a:	bf00      	nop

0800496c <UTILS_Init>:
* @brief  UTILS Initialization
* @param  Utils_Context_Ptr  Pointer to Utilities context
* @retval None
*/
void UTILS_Init(UtilsContext_TypeDef *Utils_Context_Ptr)
{
 800496c:	b510      	push	{r4, lr}
 800496e:	4603      	mov	r3, r0
  Utils_Context_Ptr->JoystickContext.joyState=JOY_NONE;
 8004970:	2400      	movs	r4, #0
  Utils_Context_Ptr->JoystickContext.lcdBrightness=LCD_BRIGHTNESS_MID;
 8004972:	2232      	movs	r2, #50	; 0x32
  Utils_Context_Ptr->JoystickContext.joyState=JOY_NONE;
 8004974:	f883 4028 	strb.w	r4, [r3, #40]	; 0x28
  Utils_Context_Init(Utils_Context_Ptr);
  
  /*LEDs Init*/
  BSP_LED_Init(LED_GREEN);
 8004978:	4620      	mov	r0, r4
  Utils_Context_Ptr->JoystickContext.lcdBrightness=LCD_BRIGHTNESS_MID;
 800497a:	635a      	str	r2, [r3, #52]	; 0x34
  Utils_Context_Ptr->JoystickContext.camBrightness=0;/* Mid-level camera brightness. */
 800497c:	e9c3 440b 	strd	r4, r4, [r3, #44]	; 0x2c
  Utils_Context_Ptr->ExecTimingContext.tcapturestart2= 0;
 8004980:	e9c3 4406 	strd	r4, r4, [r3, #24]
  Utils_Context_Ptr->ExecTimingContext.tcapturestop=0; 
 8004984:	e9c3 4408 	strd	r4, r4, [r3, #32]
  BSP_LED_Init(LED_GREEN);
 8004988:	f004 fb68 	bl	800905c <BSP_LED_Init>
  BSP_LED_Init(LED_ORANGE);
 800498c:	2001      	movs	r0, #1
 800498e:	f004 fb65 	bl	800905c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8004992:	2002      	movs	r0, #2
 8004994:	f004 fb62 	bl	800905c <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 8004998:	2003      	movs	r0, #3
 800499a:	f004 fb5f 	bl	800905c <BSP_LED_Init>
  
  /* Activate joystick. */
  BSP_JOY_Init(JOY1, JOY_MODE_GPIO,JOY_ALL);
 800499e:	4621      	mov	r1, r4
 80049a0:	4620      	mov	r0, r4
 80049a2:	221f      	movs	r2, #31
 80049a4:	f004 fc14 	bl	80091d0 <BSP_JOY_Init>
  
  /* Configure the Wakeup push-button in GPIO Mode */
  BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 80049a8:	4621      	mov	r1, r4
 80049aa:	4620      	mov	r0, r4
}
 80049ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 80049b0:	f004 bbb2 	b.w	8009118 <BSP_PB_Init>

080049b4 <UTILS_GetTimeStamp>:
* @param  Utils_Context_Ptr  Pointer to Utilities context
* @retval Time stamp
*/
uint32_t UTILS_GetTimeStamp(UtilsContext_TypeDef *Utils_Context_Ptr)
{
  return HAL_GetTick();
 80049b4:	f006 bc1a 	b.w	800b1ec <HAL_GetTick>

080049b8 <UTILS_Dma2d_Memcpy>:
 * @param red_blue_swap boolean flag for red-blue channel swap, 0 if no swap, else 1
*/
void UTILS_Dma2d_Memcpy(uint32_t *pSrc, uint32_t *pDst, uint16_t x, uint16_t y, uint16_t xsize, uint16_t ysize,
                        uint32_t rowStride, uint32_t input_color_format, uint32_t output_color_format, int pfc,
                        int red_blue_swap)
{
 80049b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049bc:	b087      	sub	sp, #28
 80049be:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80049c0:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 80049c4:	2e04      	cmp	r6, #4
 80049c6:	e9cd 0103 	strd	r0, r1, [sp, #12]
 80049ca:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 80049ce:	e9dd 5712 	ldrd	r5, r7, [sp, #72]	; 0x48
 80049d2:	e9dd 4b15 	ldrd	r4, fp, [sp, #84]	; 0x54
 80049d6:	9105      	str	r1, [sp, #20]
 80049d8:	d82c      	bhi.n	8004a34 <UTILS_Dma2d_Memcpy+0x7c>
 80049da:	4824      	ldr	r0, [pc, #144]	; (8004a6c <UTILS_Dma2d_Memcpy+0xb4>)
 80049dc:	fb05 2203 	mla	r2, r5, r3, r2
 80049e0:	f850 3026 	ldr.w	r3, [r0, r6, lsl #2]
 80049e4:	fb03 f902 	mul.w	r9, r3, r2
  uint32_t bytepp = GetBytesPerPixel(output_color_format);

  uint32_t destination = (uint32_t)pDst + (y * rowStride + x) * bytepp;
  uint32_t source = (uint32_t)pSrc;

  HAL_DMA2D_DeInit(&hlcd_dma2d);
 80049e8:	4821      	ldr	r0, [pc, #132]	; (8004a70 <UTILS_Dma2d_Memcpy+0xb8>)
  hlcd_dma2d.Init.Mode = pfc ? DMA2D_M2M_PFC : DMA2D_M2M;
  hlcd_dma2d.Init.ColorMode = output_color_format;

  /* Output offset in pixels == nb of pixels to be added at end of line to come to the  */
  /* first pixel of the next line : on the output side of the DMA2D computation         */
  hlcd_dma2d.Init.OutputOffset = rowStride - xsize;
 80049ea:	eba5 050a 	sub.w	r5, r5, sl
  HAL_DMA2D_DeInit(&hlcd_dma2d);
 80049ee:	f008 fabf 	bl	800cf70 <HAL_DMA2D_DeInit>
  hlcd_dma2d.Init.Mode = pfc ? DMA2D_M2M_PFC : DMA2D_M2M;
 80049f2:	2c00      	cmp	r4, #0
 80049f4:	4c1e      	ldr	r4, [pc, #120]	; (8004a70 <UTILS_Dma2d_Memcpy+0xb8>)

  /*##-2- DMA2D Callbacks Configuration ######################################*/
  hlcd_dma2d.XferCpltCallback = NULL;
 80049f6:	f04f 0300 	mov.w	r3, #0
  hlcd_dma2d.Init.Mode = pfc ? DMA2D_M2M_PFC : DMA2D_M2M;
 80049fa:	bf14      	ite	ne
 80049fc:	f44f 3280 	movne.w	r2, #65536	; 0x10000
 8004a00:	2200      	moveq	r2, #0
  /*##-3- Foreground Configuration ###########################################*/
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
  hlcd_dma2d.LayerCfg[1].InputColorMode = input_color_format;
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
  hlcd_dma2d.LayerCfg[1].RedBlueSwap = red_blue_swap ? DMA2D_RB_SWAP : DMA2D_RB_REGULAR;
 8004a02:	f1bb 0100 	subs.w	r1, fp, #0
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8004a06:	f04f 0801 	mov.w	r8, #1
  hlcd_dma2d.Init.OutputOffset = rowStride - xsize;
 8004a0a:	60e5      	str	r5, [r4, #12]
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8004a0c:	f04f 05ff 	mov.w	r5, #255	; 0xff
  hlcd_dma2d.LayerCfg[1].RedBlueSwap = red_blue_swap ? DMA2D_RB_SWAP : DMA2D_RB_REGULAR;
 8004a10:	bf18      	it	ne
 8004a12:	2101      	movne	r1, #1

  /* DMA2D Initialization */
  if (HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8004a14:	4620      	mov	r0, r4
  hlcd_dma2d.LayerCfg[1].InputColorMode = input_color_format;
 8004a16:	64a7      	str	r7, [r4, #72]	; 0x48
  hlcd_dma2d.LayerCfg[1].RedBlueSwap = red_blue_swap ? DMA2D_RB_SWAP : DMA2D_RB_REGULAR;
 8004a18:	65a1      	str	r1, [r4, #88]	; 0x58
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8004a1a:	6525      	str	r5, [r4, #80]	; 0x50
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 8004a1c:	6463      	str	r3, [r4, #68]	; 0x44
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8004a1e:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
  hlcd_dma2d.Init.ColorMode = output_color_format;
 8004a22:	60a6      	str	r6, [r4, #8]
  hlcd_dma2d.Init.Mode = pfc ? DMA2D_M2M_PFC : DMA2D_M2M;
 8004a24:	6062      	str	r2, [r4, #4]
  hlcd_dma2d.XferCpltCallback = NULL;
 8004a26:	6223      	str	r3, [r4, #32]
  if (HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8004a28:	f008 fa5e 	bl	800cee8 <HAL_DMA2D_Init>
 8004a2c:	b128      	cbz	r0, 8004a3a <UTILS_Dma2d_Memcpy+0x82>
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 30);
      }
    }
  }
}
 8004a2e:	b007      	add	sp, #28
 8004a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
 8004a34:	f04f 0900 	mov.w	r9, #0
 8004a38:	e7d6      	b.n	80049e8 <UTILS_Dma2d_Memcpy+0x30>
    if (HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8004a3a:	4641      	mov	r1, r8
 8004a3c:	4620      	mov	r0, r4
 8004a3e:	f008 fca9 	bl	800d394 <HAL_DMA2D_ConfigLayer>
 8004a42:	2800      	cmp	r0, #0
 8004a44:	d1f3      	bne.n	8004a2e <UTILS_Dma2d_Memcpy+0x76>
      if (HAL_DMA2D_Start(&hlcd_dma2d, source, destination, xsize, ysize) == HAL_OK)
 8004a46:	9b05      	ldr	r3, [sp, #20]
 8004a48:	4620      	mov	r0, r4
 8004a4a:	9a04      	ldr	r2, [sp, #16]
 8004a4c:	9300      	str	r3, [sp, #0]
 8004a4e:	4653      	mov	r3, sl
 8004a50:	444a      	add	r2, r9
 8004a52:	9903      	ldr	r1, [sp, #12]
 8004a54:	f008 fb12 	bl	800d07c <HAL_DMA2D_Start>
 8004a58:	2800      	cmp	r0, #0
 8004a5a:	d1e8      	bne.n	8004a2e <UTILS_Dma2d_Memcpy+0x76>
        HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 30);
 8004a5c:	4620      	mov	r0, r4
 8004a5e:	211e      	movs	r1, #30
}
 8004a60:	b007      	add	sp, #28
 8004a62:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 30);
 8004a66:	f008 bb65 	b.w	800d134 <HAL_DMA2D_PollForTransfer>
 8004a6a:	bf00      	nop
 8004a6c:	08028b44 	.word	0x08028b44
 8004a70:	2000a1c4 	.word	0x2000a1c4

08004a74 <UTILS_Joystick_Check>:
void UTILS_Joystick_Check(UtilsContext_TypeDef *Utils_Context_Ptr)
{
  JoystickContext_TypeDef* Joystick_Ctx_Ptr=&Utils_Context_Ptr->JoystickContext;
  
  /* Get the joystick state. */
  Joystick_Ctx_Ptr->joyState = (JOYPin_TypeDef) BSP_JOY_GetState(JOY1, 0);
 8004a74:	2100      	movs	r1, #0
{
 8004a76:	b538      	push	{r3, r4, r5, lr}
 8004a78:	4604      	mov	r4, r0
  Joystick_Ctx_Ptr->joyState = (JOYPin_TypeDef) BSP_JOY_GetState(JOY1, 0);
 8004a7a:	4608      	mov	r0, r1
 8004a7c:	f004 fc3a 	bl	80092f4 <BSP_JOY_GetState>
 8004a80:	b2c0      	uxtb	r0, r0
 8004a82:	1e83      	subs	r3, r0, #2
 8004a84:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28

  switch (Joystick_Ctx_Ptr->joyState)
 8004a88:	2b0e      	cmp	r3, #14
 8004a8a:	d809      	bhi.n	8004aa0 <UTILS_Joystick_Check+0x2c>
 8004a8c:	e8df f003 	tbb	[pc, r3]
 8004a90:	081c082f 	.word	0x081c082f
 8004a94:	08290808 	.word	0x08290808
 8004a98:	08080808 	.word	0x08080808
 8004a9c:	0808      	.short	0x0808
 8004a9e:	23          	.byte	0x23
 8004a9f:	00          	.byte	0x00

    default:
      break;
  }

  if ((Joystick_Ctx_Ptr->joyState == JOY_UP) || (Joystick_Ctx_Ptr->joyState == JOY_DOWN) || (Joystick_Ctx_Ptr->joyState == JOY_LEFT) || (Joystick_Ctx_Ptr->joyState == JOY_RIGHT))
 8004aa0:	2810      	cmp	r0, #16
 8004aa2:	d817      	bhi.n	8004ad4 <UTILS_Joystick_Check+0x60>
 8004aa4:	4b21      	ldr	r3, [pc, #132]	; (8004b2c <UTILS_Joystick_Check+0xb8>)
 8004aa6:	40c3      	lsrs	r3, r0
 8004aa8:	07db      	lsls	r3, r3, #31
 8004aaa:	d529      	bpl.n	8004b00 <UTILS_Joystick_Check+0x8c>
  {
    /* Execute the change. */
    BSP_CAMERA_SetBrightness(0, Joystick_Ctx_Ptr->camBrightness);
 8004aac:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004aae:	2000      	movs	r0, #0
 8004ab0:	f005 fbd4 	bl	800a25c <BSP_CAMERA_SetBrightness>
    BSP_CAMERA_SetContrast(0, Joystick_Ctx_Ptr->camContrast);
 8004ab4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004ab6:	2000      	movs	r0, #0
 8004ab8:	f005 fbf4 	bl	800a2a4 <BSP_CAMERA_SetContrast>
    BSP_LCD_SetBrightness(0, Joystick_Ctx_Ptr->lcdBrightness);
 8004abc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004abe:	2000      	movs	r0, #0
    /* Restore the default values. */
    BSP_CAMERA_SetBrightness(0, Joystick_Ctx_Ptr->camBrightness);
    BSP_CAMERA_SetContrast(0, Joystick_Ctx_Ptr->camContrast);
    BSP_LCD_SetBrightness(0, Joystick_Ctx_Ptr->lcdBrightness);
  }
}
 8004ac0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    BSP_LCD_SetBrightness(0, Joystick_Ctx_Ptr->lcdBrightness);
 8004ac4:	f006 b9f8 	b.w	800aeb8 <BSP_LCD_SetBrightness>
      if (Joystick_Ctx_Ptr->camContrast > CAMERA_CONTRAST_MIN)
 8004ac8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004aca:	1cda      	adds	r2, r3, #3
 8004acc:	da15      	bge.n	8004afa <UTILS_Joystick_Check+0x86>
        Joystick_Ctx_Ptr->joyState = JOY_NONE; /* Cancel LCD brightness change. */
 8004ace:	2300      	movs	r3, #0
 8004ad0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
 8004ad4:	bd38      	pop	{r3, r4, r5, pc}
      if (Joystick_Ctx_Ptr->lcdBrightness < LCD_BRIGHTNESS_MAX)
 8004ad6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004ad8:	2b63      	cmp	r3, #99	; 0x63
 8004ada:	dcf8      	bgt.n	8004ace <UTILS_Joystick_Check+0x5a>
        Joystick_Ctx_Ptr->lcdBrightness += LCD_BRIGHTNESS_STEP;
 8004adc:	330a      	adds	r3, #10
 8004ade:	6363      	str	r3, [r4, #52]	; 0x34
 8004ae0:	e7e4      	b.n	8004aac <UTILS_Joystick_Check+0x38>
      if (Joystick_Ctx_Ptr->camContrast < CAMERA_CONTRAST_MAX)
 8004ae2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004ae4:	2b03      	cmp	r3, #3
 8004ae6:	dcf2      	bgt.n	8004ace <UTILS_Joystick_Check+0x5a>
        Joystick_Ctx_Ptr->camContrast++;
 8004ae8:	3301      	adds	r3, #1
 8004aea:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004aec:	e7de      	b.n	8004aac <UTILS_Joystick_Check+0x38>
      if (Joystick_Ctx_Ptr->lcdBrightness > LCD_BRIGHTNESS_MIN)
 8004aee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	ddec      	ble.n	8004ace <UTILS_Joystick_Check+0x5a>
        Joystick_Ctx_Ptr->lcdBrightness -= LCD_BRIGHTNESS_STEP;
 8004af4:	3b0a      	subs	r3, #10
 8004af6:	6363      	str	r3, [r4, #52]	; 0x34
 8004af8:	e7d8      	b.n	8004aac <UTILS_Joystick_Check+0x38>
        Joystick_Ctx_Ptr->camContrast--;
 8004afa:	3b01      	subs	r3, #1
 8004afc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004afe:	e7d5      	b.n	8004aac <UTILS_Joystick_Check+0x38>
  else if (Joystick_Ctx_Ptr->joyState == JOY_SEL)
 8004b00:	2801      	cmp	r0, #1
 8004b02:	d1e7      	bne.n	8004ad4 <UTILS_Joystick_Check+0x60>
    Joystick_Ctx_Ptr->camContrast = 0;     /* Mid-level camera contrast. */
 8004b04:	2500      	movs	r5, #0
    Joystick_Ctx_Ptr->lcdBrightness = LCD_BRIGHTNESS_MID;       /* Mid-level LCD brightness. */
 8004b06:	2332      	movs	r3, #50	; 0x32
    BSP_CAMERA_SetBrightness(0, Joystick_Ctx_Ptr->camBrightness);
 8004b08:	4629      	mov	r1, r5
    Joystick_Ctx_Ptr->lcdBrightness = LCD_BRIGHTNESS_MID;       /* Mid-level LCD brightness. */
 8004b0a:	6363      	str	r3, [r4, #52]	; 0x34
    BSP_CAMERA_SetBrightness(0, Joystick_Ctx_Ptr->camBrightness);
 8004b0c:	4628      	mov	r0, r5
    Joystick_Ctx_Ptr->camContrast = 0;     /* Mid-level camera contrast. */
 8004b0e:	62e5      	str	r5, [r4, #44]	; 0x2c
    Joystick_Ctx_Ptr->camBrightness = 0; /* Mid-level camera brightness. */
 8004b10:	6325      	str	r5, [r4, #48]	; 0x30
    BSP_CAMERA_SetBrightness(0, Joystick_Ctx_Ptr->camBrightness);
 8004b12:	f005 fba3 	bl	800a25c <BSP_CAMERA_SetBrightness>
    BSP_CAMERA_SetContrast(0, Joystick_Ctx_Ptr->camContrast);
 8004b16:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004b18:	4628      	mov	r0, r5
 8004b1a:	f005 fbc3 	bl	800a2a4 <BSP_CAMERA_SetContrast>
    BSP_LCD_SetBrightness(0, Joystick_Ctx_Ptr->lcdBrightness);
 8004b1e:	4628      	mov	r0, r5
 8004b20:	6b61      	ldr	r1, [r4, #52]	; 0x34
}
 8004b22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    BSP_LCD_SetBrightness(0, Joystick_Ctx_Ptr->lcdBrightness);
 8004b26:	f006 b9c7 	b.w	800aeb8 <BSP_LCD_SetBrightness>
 8004b2a:	bf00      	nop
 8004b2c:	00010114 	.word	0x00010114

08004b30 <UTILS_DCache_Coherency_Maintenance>:
 * @retval None
 */
void UTILS_DCache_Coherency_Maintenance(uint32_t *mem_addr, int32_t mem_size, DCache_Coherency_TypeDef Maintenance_operation)
{
  /*Check alignement on 32-bytes for the memory adress and check that the memory size is multiple of 32-bytes*/
  if(((uint32_t)mem_addr%32 != 0) || (mem_size%32 != 0))
 8004b30:	ea40 0301 	orr.w	r3, r0, r1
 8004b34:	06db      	lsls	r3, r3, #27
 8004b36:	d104      	bne.n	8004b42 <UTILS_DCache_Coherency_Maintenance+0x12>
    while(1);
  
  if(Maintenance_operation == INVALIDATE)
 8004b38:	2a01      	cmp	r2, #1
 8004b3a:	d003      	beq.n	8004b44 <UTILS_DCache_Coherency_Maintenance+0x14>
  {
    SCB_InvalidateDCache_by_Addr((void*)mem_addr, mem_size);
  }
  else if(Maintenance_operation == CLEAN)
 8004b3c:	2a02      	cmp	r2, #2
 8004b3e:	d016      	beq.n	8004b6e <UTILS_DCache_Coherency_Maintenance+0x3e>
  {
    SCB_CleanDCache_by_Addr((void *)mem_addr, mem_size);
  }
}
 8004b40:	4770      	bx	lr
    while(1);
 8004b42:	e7fe      	b.n	8004b42 <UTILS_DCache_Coherency_Maintenance+0x12>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004b44:	f3bf 8f4f 	dsb	sy
    uint32_t op_addr = (uint32_t)addr;
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */

    __DSB();

    while (op_size > 0) {
 8004b48:	2900      	cmp	r1, #0
 8004b4a:	dd0b      	ble.n	8004b64 <UTILS_DCache_Coherency_Maintenance+0x34>
 8004b4c:	1e4b      	subs	r3, r1, #1
 8004b4e:	f100 0220 	add.w	r2, r0, #32
      SCB->DCIMVAC = op_addr;
 8004b52:	490f      	ldr	r1, [pc, #60]	; (8004b90 <UTILS_DCache_Coherency_Maintenance+0x60>)
 8004b54:	f023 031f 	bic.w	r3, r3, #31
 8004b58:	4413      	add	r3, r2
 8004b5a:	f8c1 025c 	str.w	r0, [r1, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8004b5e:	3020      	adds	r0, #32
    while (op_size > 0) {
 8004b60:	4283      	cmp	r3, r0
 8004b62:	d1fa      	bne.n	8004b5a <UTILS_DCache_Coherency_Maintenance+0x2a>
 8004b64:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004b68:	f3bf 8f6f 	isb	sy
}
 8004b6c:	4770      	bx	lr
  __ASM volatile ("dsb 0xF":::"memory");
 8004b6e:	f3bf 8f4f 	dsb	sy
    uint32_t op_addr = (uint32_t) addr;
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */

    __DSB();

    while (op_size > 0) {
 8004b72:	2900      	cmp	r1, #0
 8004b74:	ddf6      	ble.n	8004b64 <UTILS_DCache_Coherency_Maintenance+0x34>
 8004b76:	1e4b      	subs	r3, r1, #1
 8004b78:	f100 0220 	add.w	r2, r0, #32
      SCB->DCCMVAC = op_addr;
 8004b7c:	4904      	ldr	r1, [pc, #16]	; (8004b90 <UTILS_DCache_Coherency_Maintenance+0x60>)
 8004b7e:	f023 031f 	bic.w	r3, r3, #31
 8004b82:	4413      	add	r3, r2
 8004b84:	f8c1 0268 	str.w	r0, [r1, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 8004b88:	3020      	adds	r0, #32
    while (op_size > 0) {
 8004b8a:	4298      	cmp	r0, r3
 8004b8c:	d1fa      	bne.n	8004b84 <UTILS_DCache_Coherency_Maintenance+0x54>
 8004b8e:	e7e9      	b.n	8004b64 <UTILS_DCache_Coherency_Maintenance+0x34>
 8004b90:	e000ed00 	.word	0xe000ed00

08004b94 <UTILS_Bubblesort>:
void UTILS_Bubblesort(float *prob, int *classes, int size)
{
  float p;
  int c;

  for (int i = 0; i < size; i++)
 8004b94:	2a00      	cmp	r2, #0
 8004b96:	dd24      	ble.n	8004be2 <UTILS_Bubblesort+0x4e>
 8004b98:	468c      	mov	ip, r1
 8004b9a:	1e51      	subs	r1, r2, #1
{
 8004b9c:	b4f0      	push	{r4, r5, r6, r7}
 8004b9e:	1f05      	subs	r5, r0, #4
 8004ba0:	eb05 0582 	add.w	r5, r5, r2, lsl #2
  {
    for (int ii = 0; ii < size - i - 1; ii++)
 8004ba4:	b1d9      	cbz	r1, 8004bde <UTILS_Bubblesort+0x4a>
 8004ba6:	4663      	mov	r3, ip
 8004ba8:	1d04      	adds	r4, r0, #4
 8004baa:	4602      	mov	r2, r0
    {
      if (prob[ii] < prob[ii + 1])
 8004bac:	ecf2 7a01 	vldmia	r2!, {s15}
 8004bb0:	ecb4 7a01 	vldmia	r4!, {s14}
 8004bb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bbc:	d507      	bpl.n	8004bce <UTILS_Bubblesort+0x3a>
      {
        p = prob[ii];
        prob[ii] = prob[ii + 1];
        prob[ii + 1] = p;
        c = classes[ii];
        classes[ii] = classes[ii + 1];
 8004bbe:	e9d3 7600 	ldrd	r7, r6, [r3]
        prob[ii] = prob[ii + 1];
 8004bc2:	ed02 7a01 	vstr	s14, [r2, #-4]
        prob[ii + 1] = p;
 8004bc6:	ed44 7a01 	vstr	s15, [r4, #-4]
        classes[ii] = classes[ii + 1];
 8004bca:	e9c3 6700 	strd	r6, r7, [r3]
    for (int ii = 0; ii < size - i - 1; ii++)
 8004bce:	42aa      	cmp	r2, r5
 8004bd0:	f103 0304 	add.w	r3, r3, #4
 8004bd4:	d1ea      	bne.n	8004bac <UTILS_Bubblesort+0x18>
  for (int i = 0; i < size; i++)
 8004bd6:	3901      	subs	r1, #1
 8004bd8:	3d04      	subs	r5, #4
    for (int ii = 0; ii < size - i - 1; ii++)
 8004bda:	2900      	cmp	r1, #0
 8004bdc:	d1e3      	bne.n	8004ba6 <UTILS_Bubblesort+0x12>
        classes[ii + 1] = c;
      }
    }
  }
}
 8004bde:	bcf0      	pop	{r4, r5, r6, r7}
 8004be0:	4770      	bx	lr
 8004be2:	4770      	bx	lr

08004be4 <UTILS_Compute_ExecutionTiming>:
  UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE] = UtilsContext_Ptr->ExecTimingContext.tcapturestop - UtilsContext_Ptr->ExecTimingContext.tcapturestart;
  
#if MEMORY_SCHEME == FULL_INTERNAL_MEM_OPT  
  UtilsContext_Ptr->ExecTimingContext.Tfps =UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PFC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PVC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_RESIZE] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE];
#elif MEMORY_SCHEME != FULL_INTERNAL_MEM_OPT 
  if((UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PFC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE]) > UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE])
 8004be4:	6901      	ldr	r1, [r0, #16]
 8004be6:	6882      	ldr	r2, [r0, #8]
{
 8004be8:	b430      	push	{r4, r5}
  UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE] = UtilsContext_Ptr->ExecTimingContext.tcapturestop - UtilsContext_Ptr->ExecTimingContext.tcapturestart;
 8004bea:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
  if((UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PFC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE]) > UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE])
 8004bee:	440a      	add	r2, r1
  UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE] = UtilsContext_Ptr->ExecTimingContext.tcapturestop - UtilsContext_Ptr->ExecTimingContext.tcapturestart;
 8004bf0:	1b1b      	subs	r3, r3, r4
  AppContext_TypeDef *App_Cxt_Ptr=UtilsContext_Ptr->AppCtxPtr;
 8004bf2:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if((UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PFC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE]) > UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE])
 8004bf4:	4293      	cmp	r3, r2
  UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE] = UtilsContext_Ptr->ExecTimingContext.tcapturestop - UtilsContext_Ptr->ExecTimingContext.tcapturestart;
 8004bf6:	6003      	str	r3, [r0, #0]
  if((UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PFC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE]) > UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE])
 8004bf8:	d203      	bcs.n	8004c02 <UTILS_Compute_ExecutionTiming+0x1e>
    UtilsContext_Ptr->ExecTimingContext.Tfps = UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PFC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PVC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_RESIZE] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE];
 8004bfa:	68c3      	ldr	r3, [r0, #12]
 8004bfc:	6845      	ldr	r5, [r0, #4]
 8004bfe:	442b      	add	r3, r5
 8004c00:	4413      	add	r3, r2
 8004c02:	6143      	str	r3, [r0, #20]
  else
    UtilsContext_Ptr->ExecTimingContext.Tfps =  UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE];
#endif
  
  App_Cxt_Ptr->nn_inference_time=UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE];
 8004c04:	60a1      	str	r1, [r4, #8]
}
 8004c06:	bc30      	pop	{r4, r5}
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop

08004c0c <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
void Error_Handler(void)
{
 8004c0c:	b508      	push	{r3, lr}
  BSP_LED_Off(LED_GREEN);
 8004c0e:	2000      	movs	r0, #0
 8004c10:	f004 fa62 	bl	80090d8 <BSP_LED_Off>
  BSP_LED_Off(LED_ORANGE);
 8004c14:	2001      	movs	r0, #1
 8004c16:	f004 fa5f 	bl	80090d8 <BSP_LED_Off>
  BSP_LED_Off(LED_RED);
 8004c1a:	2002      	movs	r0, #2
 8004c1c:	f004 fa5c 	bl	80090d8 <BSP_LED_Off>
  BSP_LED_Off(LED_BLUE);
 8004c20:	2003      	movs	r0, #3
 8004c22:	f004 fa59 	bl	80090d8 <BSP_LED_Off>

  /* Turn LED RED on */
  BSP_LED_On(LED_RED);
 8004c26:	2002      	movs	r0, #2
 8004c28:	f004 fa46 	bl	80090b8 <BSP_LED_On>
  while (1)
 8004c2c:	e7fe      	b.n	8004c2c <Error_Handler+0x20>
 8004c2e:	bf00      	nop

08004c30 <main>:
{
 8004c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c34:	b09e      	sub	sp, #120	; 0x78
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8004c36:	f04f 4450 	mov.w	r4, #3489660928	; 0xd0000000
  HAL_MPU_Disable();
 8004c3a:	f006 fb85 	bl	800b348 <HAL_MPU_Disable>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8004c3e:	2101      	movs	r1, #1
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8004c40:	4a89      	ldr	r2, [pc, #548]	; (8004e68 <main+0x238>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8004c42:	a80a      	add	r0, sp, #40	; 0x28
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8004c44:	4b89      	ldr	r3, [pc, #548]	; (8004e6c <main+0x23c>)
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8004c46:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8004c4a:	940b      	str	r4, [sp, #44]	; 0x2c
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8004c4c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8004c50:	f006 fb9c 	bl	800b38c <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8004c54:	2004      	movs	r0, #4
 8004c56:	f006 fb87 	bl	800b368 <HAL_MPU_Enable>
 8004c5a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004c5e:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8004c62:	4b83      	ldr	r3, [pc, #524]	; (8004e70 <main+0x240>)
 8004c64:	2100      	movs	r1, #0
 8004c66:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8004c6a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004c6e:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8004c72:	695a      	ldr	r2, [r3, #20]
 8004c74:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004c78:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8004c7a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004c7e:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8004c82:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8004c86:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8004c8a:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8004c8e:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8004c92:	f3c0 314e 	ubfx	r1, r0, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8004c96:	f3c0 00c9 	ubfx	r0, r0, #3, #10
 8004c9a:	0149      	lsls	r1, r1, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8004c9c:	ea01 0506 	and.w	r5, r1, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8004ca0:	4602      	mov	r2, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8004ca2:	ea45 7482 	orr.w	r4, r5, r2, lsl #30
      } while (ways-- != 0U);
 8004ca6:	3a01      	subs	r2, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8004ca8:	f8c3 4260 	str.w	r4, [r3, #608]	; 0x260
      } while (ways-- != 0U);
 8004cac:	1c54      	adds	r4, r2, #1
 8004cae:	d1f8      	bne.n	8004ca2 <main+0x72>
    } while(sets-- != 0U);
 8004cb0:	3920      	subs	r1, #32
 8004cb2:	f111 0f20 	cmn.w	r1, #32
 8004cb6:	d1f1      	bne.n	8004c9c <main+0x6c>
 8004cb8:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8004cbc:	695a      	ldr	r2, [r3, #20]
 8004cbe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004cc2:	615a      	str	r2, [r3, #20]
 8004cc4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004cc8:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8004ccc:	f006 fa52 	bl	800b174 <HAL_Init>
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8004cd0:	2004      	movs	r0, #4
 8004cd2:	f00a f907 	bl	800eee4 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004cd6:	4a67      	ldr	r2, [pc, #412]	; (8004e74 <main+0x244>)
 8004cd8:	2300      	movs	r3, #0
 8004cda:	9300      	str	r3, [sp, #0]
 8004cdc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004cde:	4b66      	ldr	r3, [pc, #408]	; (8004e78 <main+0x248>)
 8004ce0:	f021 0101 	bic.w	r1, r1, #1
  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8004ce4:	4618      	mov	r0, r3
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ce6:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004ce8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004cea:	f002 0201 	and.w	r2, r2, #1
 8004cee:	9200      	str	r2, [sp, #0]
 8004cf0:	699a      	ldr	r2, [r3, #24]
 8004cf2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004cf6:	619a      	str	r2, [r3, #24]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004cfe:	9300      	str	r3, [sp, #0]
 8004d00:	9b00      	ldr	r3, [sp, #0]
  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8004d02:	6983      	ldr	r3, [r0, #24]
 8004d04:	049b      	lsls	r3, r3, #18
 8004d06:	d5fc      	bpl.n	8004d02 <main+0xd2>
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8004d08:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004d0a:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004d0c:	2601      	movs	r6, #1
 8004d0e:	f44f 3780 	mov.w	r7, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLM = 5;
 8004d12:	2505      	movs	r5, #5
  RCC_OscInitStruct.PLL.PLLN = 160;
 8004d14:	21a0      	movs	r1, #160	; 0xa0
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004d16:	2204      	movs	r2, #4
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8004d18:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8004d1a:	9311      	str	r3, [sp, #68]	; 0x44
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8004d1c:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLP = 2;
 8004d1e:	9417      	str	r4, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004d20:	9419      	str	r4, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLM = 5;
 8004d22:	9515      	str	r5, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 160;
 8004d24:	9116      	str	r1, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004d26:	9218      	str	r2, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8004d28:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8004d2c:	2308      	movs	r3, #8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004d2e:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8004d32:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004d34:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8004d38:	f00a f994 	bl	800f064 <HAL_RCC_OscConfig>
  if (ret != HAL_OK)
 8004d3c:	2800      	cmp	r0, #0
 8004d3e:	f040 8090 	bne.w	8004e62 <main+0x232>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 |
 8004d42:	223f      	movs	r2, #63	; 0x3f
 8004d44:	2303      	movs	r3, #3
 8004d46:	2600      	movs	r6, #0
 8004d48:	2708      	movs	r7, #8
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 8004d4a:	4621      	mov	r1, r4
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 |
 8004d4c:	2540      	movs	r5, #64	; 0x40
 8004d4e:	2440      	movs	r4, #64	; 0x40
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 8004d50:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 |
 8004d52:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004d56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d5a:	2340      	movs	r3, #64	; 0x40
 8004d5c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004d60:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004d64:	e9cd 2308 	strd	r2, r3, [sp, #32]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 8004d68:	f00a fd16 	bl	800f798 <HAL_RCC_ClockConfig>
  if (ret != HAL_OK)
 8004d6c:	2800      	cmp	r0, #0
 8004d6e:	d178      	bne.n	8004e62 <main+0x232>
  __HAL_RCC_CSI_ENABLE();
 8004d70:	4e42      	ldr	r6, [pc, #264]	; (8004e7c <main+0x24c>)
    App_Context.run_loop = 1;
 8004d72:	f04f 0801 	mov.w	r8, #1
  APP_Init(&App_Context);
 8004d76:	4c42      	ldr	r4, [pc, #264]	; (8004e80 <main+0x250>)
  __HAL_RCC_CSI_ENABLE();
 8004d78:	6833      	ldr	r3, [r6, #0]
    APP_GetNextReadyFrame(&App_Context);
 8004d7a:	4625      	mov	r5, r4
    UTIL_LCD_SetFont(&Font24);
 8004d7c:	4f41      	ldr	r7, [pc, #260]	; (8004e84 <main+0x254>)
  __HAL_RCC_CSI_ENABLE();
 8004d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d82:	6033      	str	r3, [r6, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d84:	f8d6 30f4 	ldr.w	r3, [r6, #244]	; 0xf4
 8004d88:	f043 0302 	orr.w	r3, r3, #2
 8004d8c:	f8c6 30f4 	str.w	r3, [r6, #244]	; 0xf4
 8004d90:	f8d6 30f4 	ldr.w	r3, [r6, #244]	; 0xf4
 8004d94:	f003 0302 	and.w	r3, r3, #2
 8004d98:	9301      	str	r3, [sp, #4]
 8004d9a:	9b01      	ldr	r3, [sp, #4]
  HAL_EnableCompensationCell();
 8004d9c:	f006 fa44 	bl	800b228 <HAL_EnableCompensationCell>
  __HAL_RCC_CRC_CLK_ENABLE();
 8004da0:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
  APP_Init(&App_Context);
 8004da4:	4620      	mov	r0, r4
  __HAL_RCC_CRC_CLK_ENABLE();
 8004da6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004daa:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
 8004dae:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 8004db2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004db6:	930a      	str	r3, [sp, #40]	; 0x28
 8004db8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  APP_Init(&App_Context);
 8004dba:	f7fb ff8f 	bl	8000cdc <APP_Init>
  TEST_Init(App_Context.Test_ContextPtr);
 8004dbe:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004dc0:	f7fe f848 	bl	8002e54 <TEST_Init>
  UTILS_Init(App_Context.Utils_ContextPtr);
 8004dc4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004dc6:	f7ff fdd1 	bl	800496c <UTILS_Init>
  DISPLAY_Init(App_Context.Display_ContextPtr);
 8004dca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004dcc:	f7fc fc4a 	bl	8001664 <DISPLAY_Init>
  AI_Init(App_Context.Ai_ContextPtr);
 8004dd0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004dd2:	f7fb fe03 	bl	80009dc <AI_Init>
  int is_menu = DISPLAY_WelcomeScreen(App_Context.Display_ContextPtr);
 8004dd6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004dd8:	f7fc fc96 	bl	8001708 <DISPLAY_WelcomeScreen>
 8004ddc:	4606      	mov	r6, r0
  if ((is_menu != 0) || (App_Context.Test_ContextPtr->UartContext.uart_cmd_ongoing == 1))
 8004dde:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004de0:	bb76      	cbnz	r6, 8004e40 <main+0x210>
 8004de2:	f8d0 34a0 	ldr.w	r3, [r0, #1184]	; 0x4a0
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d02a      	beq.n	8004e40 <main+0x210>
  if(App_Context.Operating_Mode == NOMINAL || App_Context.Operating_Mode == CAPTURE || (App_Context.Operating_Mode == DUMP && App_Context.Test_ContextPtr->DumpContext.Dump_FrameSource == CAMERA_LIVE))
 8004dea:	7823      	ldrb	r3, [r4, #0]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d02c      	beq.n	8004e4a <main+0x21a>
 8004df0:	2b04      	cmp	r3, #4
 8004df2:	d02a      	beq.n	8004e4a <main+0x21a>
 8004df4:	2b03      	cmp	r3, #3
 8004df6:	d02c      	beq.n	8004e52 <main+0x222>
  while(App_Context.run_loop)
 8004df8:	6863      	ldr	r3, [r4, #4]
 8004dfa:	b1bb      	cbz	r3, 8004e2c <main+0x1fc>
    UTILS_Joystick_Check(App_Context.Utils_ContextPtr);
 8004dfc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004dfe:	f7ff fe39 	bl	8004a74 <UTILS_Joystick_Check>
    TEST_CmdIf_Check(App_Context.Test_ContextPtr);          
 8004e02:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004e04:	f7fe f8ee 	bl	8002fe4 <TEST_CmdIf_Check>
    APP_GetNextReadyFrame(&App_Context);
 8004e08:	4628      	mov	r0, r5
 8004e0a:	f7fb ffbf 	bl	8000d8c <APP_GetNextReadyFrame>
    APP_StartNewFrameAcquisition(&App_Context);
 8004e0e:	4628      	mov	r0, r5
 8004e10:	f7fc f872 	bl	8000ef8 <APP_StartNewFrameAcquisition>
    APP_FramePreprocess(&App_Context);
 8004e14:	4628      	mov	r0, r5
 8004e16:	f7fc f88d 	bl	8000f34 <APP_FramePreprocess>
    APP_NetworkInference(&App_Context);
 8004e1a:	4628      	mov	r0, r5
 8004e1c:	f7fc f88c 	bl	8000f38 <APP_NetworkInference>
    APP_Postprocess(&App_Context);  
 8004e20:	4628      	mov	r0, r5
 8004e22:	f7fc f8bb 	bl	8000f9c <APP_Postprocess>
  while(App_Context.run_loop)
 8004e26:	6863      	ldr	r3, [r4, #4]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d1e7      	bne.n	8004dfc <main+0x1cc>
    AI_Deinit();
 8004e2c:	f7fb ff54 	bl	8000cd8 <AI_Deinit>
    UTIL_LCD_SetFont(&Font24);
 8004e30:	4638      	mov	r0, r7
    App_Context.run_loop = 1;
 8004e32:	f8c4 8004 	str.w	r8, [r4, #4]
    UTIL_LCD_SetFont(&Font24);
 8004e36:	f015 fe91 	bl	801ab5c <UTIL_LCD_SetFont>
  if ((is_menu != 0) || (App_Context.Test_ContextPtr->UartContext.uart_cmd_ongoing == 1))
 8004e3a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004e3c:	2e00      	cmp	r6, #0
 8004e3e:	d0d0      	beq.n	8004de2 <main+0x1b2>
    TEST_MainMenu(App_Context.Test_ContextPtr);
 8004e40:	f7fe f93a 	bl	80030b8 <TEST_MainMenu>
  if(App_Context.Operating_Mode == NOMINAL || App_Context.Operating_Mode == CAPTURE || (App_Context.Operating_Mode == DUMP && App_Context.Test_ContextPtr->DumpContext.Dump_FrameSource == CAMERA_LIVE))
 8004e44:	7823      	ldrb	r3, [r4, #0]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d1d2      	bne.n	8004df0 <main+0x1c0>
    CAMERA_Init(App_Context.Camera_ContextPtr); 
 8004e4a:	69e0      	ldr	r0, [r4, #28]
 8004e4c:	f7fc fa60 	bl	8001310 <CAMERA_Init>
 8004e50:	e7d2      	b.n	8004df8 <main+0x1c8>
  if(App_Context.Operating_Mode == NOMINAL || App_Context.Operating_Mode == CAPTURE || (App_Context.Operating_Mode == DUMP && App_Context.Test_ContextPtr->DumpContext.Dump_FrameSource == CAMERA_LIVE))
 8004e52:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004e54:	791b      	ldrb	r3, [r3, #4]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d1ce      	bne.n	8004df8 <main+0x1c8>
    CAMERA_Init(App_Context.Camera_ContextPtr); 
 8004e5a:	69e0      	ldr	r0, [r4, #28]
 8004e5c:	f7fc fa58 	bl	8001310 <CAMERA_Init>
 8004e60:	e7ca      	b.n	8004df8 <main+0x1c8>
    Error_Handler();
 8004e62:	f7ff fed3 	bl	8004c0c <Error_Handler>
 8004e66:	bf00      	nop
 8004e68:	03010018 	.word	0x03010018
 8004e6c:	01010000 	.word	0x01010000
 8004e70:	e000ed00 	.word	0xe000ed00
 8004e74:	58000400 	.word	0x58000400
 8004e78:	58024800 	.word	0x58024800
 8004e7c:	58024400 	.word	0x58024400
 8004e80:	20009824 	.word	0x20009824
 8004e84:	20007710 	.word	0x20007710

08004e88 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8004e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e8c:	b087      	sub	sp, #28
  AI_ASSERT(net_ctx)

  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 8004e8e:	2500      	movs	r5, #0
{
 8004e90:	460a      	mov	r2, r1
 8004e92:	4604      	mov	r4, r0

  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 8004e94:	2101      	movs	r1, #1
 8004e96:	a805      	add	r0, sp, #20
  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 8004e98:	9505      	str	r5, [sp, #20]
  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 8004e9a:	f016 f929 	bl	801b0f0 <ai_platform_get_weights_map>
 8004e9e:	9000      	str	r0, [sp, #0]
 8004ea0:	2800      	cmp	r0, #0
 8004ea2:	f000 856d 	beq.w	8005980 <network_configure_weights+0xaf8>
    /* Updating weights (byte) offsets */
    
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_1_weights_array.data = AI_PTR(weights_map[0] + 0);
    conv2d_1_weights_array.data_start = AI_PTR(weights_map[0] + 0);
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8004ea6:	4dd1      	ldr	r5, [pc, #836]	; (80051ec <network_configure_weights+0x364>)
    conv2d_12_bias_array.data_start = AI_PTR(weights_map[0] + 4480);
    conv2d_14_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_14_weights_array.data = AI_PTR(weights_map[0] + 4672);
    conv2d_14_weights_array.data_start = AI_PTR(weights_map[0] + 4672);
    conv2d_14_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_14_bias_array.data = AI_PTR(weights_map[0] + 5104);
 8004ea8:	f241 38f0 	movw	r8, #5104	; 0x13f0
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8004eac:	4cd0      	ldr	r4, [pc, #832]	; (80051f0 <network_configure_weights+0x368>)
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8004eae:	682e      	ldr	r6, [r5, #0]
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8004eb0:	48d0      	ldr	r0, [pc, #832]	; (80051f4 <network_configure_weights+0x36c>)
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8004eb2:	f046 4b80 	orr.w	fp, r6, #1073741824	; 0x40000000
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8004eb6:	6826      	ldr	r6, [r4, #0]
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8004eb8:	f8df c3a4 	ldr.w	ip, [pc, #932]	; 8005260 <network_configure_weights+0x3d8>
    conv2d_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8004ebc:	4ace      	ldr	r2, [pc, #824]	; (80051f8 <network_configure_weights+0x370>)
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8004ebe:	f046 4a80 	orr.w	sl, r6, #1073741824	; 0x40000000
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8004ec2:	6806      	ldr	r6, [r0, #0]
    conv2d_4_weights_array.format |= AI_FMT_FLAG_CONST;
 8004ec4:	4bcd      	ldr	r3, [pc, #820]	; (80051fc <network_configure_weights+0x374>)
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8004ec6:	f8dc 7000 	ldr.w	r7, [ip]
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8004eca:	f046 4980 	orr.w	r9, r6, #1073741824	; 0x40000000
    conv2d_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8004ece:	6816      	ldr	r6, [r2, #0]
    conv2d_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8004ed0:	49cb      	ldr	r1, [pc, #812]	; (8005200 <network_configure_weights+0x378>)
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8004ed2:	f047 4780 	orr.w	r7, r7, #1073741824	; 0x40000000
    conv2d_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8004ed6:	f8df e38c 	ldr.w	lr, [pc, #908]	; 8005264 <network_configure_weights+0x3dc>
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8004eda:	f8c4 a000 	str.w	sl, [r4]
    conv2d_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8004ede:	f046 4a80 	orr.w	sl, r6, #1073741824	; 0x40000000
    conv2d_4_weights_array.format |= AI_FMT_FLAG_CONST;
 8004ee2:	681e      	ldr	r6, [r3, #0]
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8004ee4:	f8cc 7000 	str.w	r7, [ip]
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8004ee8:	f8c0 9000 	str.w	r9, [r0]
    conv2d_4_weights_array.format |= AI_FMT_FLAG_CONST;
 8004eec:	f046 4980 	orr.w	r9, r6, #1073741824	; 0x40000000
    conv2d_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8004ef0:	680f      	ldr	r7, [r1, #0]
    conv2d_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8004ef2:	f8de 6000 	ldr.w	r6, [lr]
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8004ef6:	f8c5 b000 	str.w	fp, [r5]
    conv2d_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8004efa:	f047 4780 	orr.w	r7, r7, #1073741824	; 0x40000000
    conv2d_1_weights_array.data = AI_PTR(weights_map[0] + 0);
 8004efe:	f8dd b014 	ldr.w	fp, [sp, #20]
    conv2d_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8004f02:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
    conv2d_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8004f06:	600f      	str	r7, [r1, #0]
    conv2d_4_weights_array.format |= AI_FMT_FLAG_CONST;
 8004f08:	f8c3 9000 	str.w	r9, [r3]
    conv2d_2_bias_array.data = AI_PTR(weights_map[0] + 640);
 8004f0c:	f50b 7720 	add.w	r7, fp, #640	; 0x280
    conv2d_1_bias_array.data = AI_PTR(weights_map[0] + 432);
 8004f10:	f50b 79d8 	add.w	r9, fp, #432	; 0x1b0
    conv2d_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8004f14:	f8ce 6000 	str.w	r6, [lr]
    conv2d_2_weights_array.data = AI_PTR(weights_map[0] + 496);
 8004f18:	f50b 76f8 	add.w	r6, fp, #496	; 0x1f0
    conv2d_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8004f1c:	f8c2 a000 	str.w	sl, [r2]
    conv2d_1_weights_array.data = AI_PTR(weights_map[0] + 0);
 8004f20:	f8cc b008 	str.w	fp, [ip, #8]
    conv2d_3_bias_array.data = AI_PTR(weights_map[0] + 832);
 8004f24:	f50b 7a50 	add.w	sl, fp, #832	; 0x340
    conv2d_1_weights_array.data = AI_PTR(weights_map[0] + 0);
 8004f28:	f8cc b00c 	str.w	fp, [ip, #12]
    conv2d_14_bias_array.data = AI_PTR(weights_map[0] + 5104);
 8004f2c:	44d8      	add	r8, fp
    conv2d_6_weights_array.format |= AI_FMT_FLAG_CONST;
 8004f2e:	f8df c338 	ldr.w	ip, [pc, #824]	; 8005268 <network_configure_weights+0x3e0>
    conv2d_1_bias_array.data = AI_PTR(weights_map[0] + 432);
 8004f32:	e9c5 9902 	strd	r9, r9, [r5, #8]
    conv2d_2_weights_array.data = AI_PTR(weights_map[0] + 496);
 8004f36:	e9c4 6602 	strd	r6, r6, [r4, #8]
    conv2d_3_weights_array.data = AI_PTR(weights_map[0] + 704);
 8004f3a:	f50b 7530 	add.w	r5, fp, #704	; 0x2c0
    conv2d_4_weights_array.data = AI_PTR(weights_map[0] + 864);
 8004f3e:	f50b 7958 	add.w	r9, fp, #864	; 0x360
    conv2d_4_bias_array.data = AI_PTR(weights_map[0] + 1248);
 8004f42:	f50b 669c 	add.w	r6, fp, #1248	; 0x4e0
    conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
 8004f46:	4caf      	ldr	r4, [pc, #700]	; (8005204 <network_configure_weights+0x37c>)
    conv2d_2_bias_array.data = AI_PTR(weights_map[0] + 640);
 8004f48:	e9c0 7702 	strd	r7, r7, [r0, #8]
    conv2d_6_bias_array.format |= AI_FMT_FLAG_CONST;
 8004f4c:	4fae      	ldr	r7, [pc, #696]	; (8005208 <network_configure_weights+0x380>)
    conv2d_8_weights_array.format |= AI_FMT_FLAG_CONST;
 8004f4e:	48af      	ldr	r0, [pc, #700]	; (800520c <network_configure_weights+0x384>)
    conv2d_3_weights_array.data = AI_PTR(weights_map[0] + 704);
 8004f50:	e9c1 5502 	strd	r5, r5, [r1, #8]
    conv2d_3_bias_array.data = AI_PTR(weights_map[0] + 832);
 8004f54:	e9c2 aa02 	strd	sl, sl, [r2, #8]
    conv2d_4_weights_array.data = AI_PTR(weights_map[0] + 864);
 8004f58:	e9c3 9902 	strd	r9, r9, [r3, #8]
    conv2d_4_bias_array.data = AI_PTR(weights_map[0] + 1248);
 8004f5c:	e9ce 6602 	strd	r6, r6, [lr, #8]
    conv2d_6_weights_array.format |= AI_FMT_FLAG_CONST;
 8004f60:	f8dc 6000 	ldr.w	r6, [ip]
    conv2d_6_weights_array.data = AI_PTR(weights_map[0] + 1440);
 8004f64:	f50b 6eb4 	add.w	lr, fp, #1440	; 0x5a0
    conv2d_6_bias_array.format |= AI_FMT_FLAG_CONST;
 8004f68:	683b      	ldr	r3, [r7, #0]
    conv2d_9_bias_array.data = AI_PTR(weights_map[0] + 3488);
 8004f6a:	f50b 6a5a 	add.w	sl, fp, #3488	; 0xda0
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 8004f6e:	4da8      	ldr	r5, [pc, #672]	; (8005210 <network_configure_weights+0x388>)
    conv2d_6_weights_array.format |= AI_FMT_FLAG_CONST;
 8004f70:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
    conv2d_6_bias_array.format |= AI_FMT_FLAG_CONST;
 8004f74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    conv2d_8_bias_array.format |= AI_FMT_FLAG_CONST;
 8004f78:	49a6      	ldr	r1, [pc, #664]	; (8005214 <network_configure_weights+0x38c>)
    conv2d_6_weights_array.format |= AI_FMT_FLAG_CONST;
 8004f7a:	f8cc 6000 	str.w	r6, [ip]
    conv2d_6_bias_array.format |= AI_FMT_FLAG_CONST;
 8004f7e:	603b      	str	r3, [r7, #0]
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 8004f80:	682e      	ldr	r6, [r5, #0]
    conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
 8004f82:	6823      	ldr	r3, [r4, #0]
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 8004f84:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
    conv2d_9_weights_array.format |= AI_FMT_FLAG_CONST;
 8004f88:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 800526c <network_configure_weights+0x3e4>
    conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
 8004f8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    conv2d_9_bias_array.format |= AI_FMT_FLAG_CONST;
 8004f90:	4aa1      	ldr	r2, [pc, #644]	; (8005218 <network_configure_weights+0x390>)
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 8004f92:	602e      	str	r6, [r5, #0]
    conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
 8004f94:	6023      	str	r3, [r4, #0]
    conv2d_8_weights_array.format |= AI_FMT_FLAG_CONST;
 8004f96:	6806      	ldr	r6, [r0, #0]
    conv2d_8_bias_array.format |= AI_FMT_FLAG_CONST;
 8004f98:	680b      	ldr	r3, [r1, #0]
    conv2d_6_weights_array.data = AI_PTR(weights_map[0] + 1440);
 8004f9a:	f8cc e008 	str.w	lr, [ip, #8]
    conv2d_8_weights_array.format |= AI_FMT_FLAG_CONST;
 8004f9e:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
    conv2d_6_weights_array.data = AI_PTR(weights_map[0] + 1440);
 8004fa2:	f8cc e00c 	str.w	lr, [ip, #12]
    conv2d_8_bias_array.format |= AI_FMT_FLAG_CONST;
 8004fa6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    conv2d_6_bias_array.data = AI_PTR(weights_map[0] + 1872);
 8004faa:	f50b 6cea 	add.w	ip, fp, #1872	; 0x750
    conv2d_7_weights_array.data = AI_PTR(weights_map[0] + 2064);
 8004fae:	f50b 6e01 	add.w	lr, fp, #2064	; 0x810
    conv2d_8_weights_array.format |= AI_FMT_FLAG_CONST;
 8004fb2:	6006      	str	r6, [r0, #0]
    conv2d_6_bias_array.data = AI_PTR(weights_map[0] + 1872);
 8004fb4:	f8c7 c008 	str.w	ip, [r7, #8]
    conv2d_9_weights_array.format |= AI_FMT_FLAG_CONST;
 8004fb8:	f8d9 6000 	ldr.w	r6, [r9]
    conv2d_6_bias_array.data = AI_PTR(weights_map[0] + 1872);
 8004fbc:	f8c7 c00c 	str.w	ip, [r7, #12]
    conv2d_7_bias_array.data = AI_PTR(weights_map[0] + 2448);
 8004fc0:	f50b 6719 	add.w	r7, fp, #2448	; 0x990
    conv2d_8_bias_array.format |= AI_FMT_FLAG_CONST;
 8004fc4:	600b      	str	r3, [r1, #0]
    conv2d_8_weights_array.data = AI_PTR(weights_map[0] + 2480);
 8004fc6:	f50b 6c1b 	add.w	ip, fp, #2480	; 0x9b0
    conv2d_9_bias_array.format |= AI_FMT_FLAG_CONST;
 8004fca:	6813      	ldr	r3, [r2, #0]
    conv2d_9_weights_array.format |= AI_FMT_FLAG_CONST;
 8004fcc:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
    conv2d_7_weights_array.data = AI_PTR(weights_map[0] + 2064);
 8004fd0:	f8c5 e008 	str.w	lr, [r5, #8]
 8004fd4:	f8c5 e00c 	str.w	lr, [r5, #12]
    conv2d_9_bias_array.format |= AI_FMT_FLAG_CONST;
 8004fd8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    conv2d_8_bias_array.data = AI_PTR(weights_map[0] + 2864);
 8004fdc:	f50b 6533 	add.w	r5, fp, #2864	; 0xb30
    conv2d_9_weights_array.data = AI_PTR(weights_map[0] + 3056);
 8004fe0:	f50b 6e3f 	add.w	lr, fp, #3056	; 0xbf0
    conv2d_7_bias_array.data = AI_PTR(weights_map[0] + 2448);
 8004fe4:	60a7      	str	r7, [r4, #8]
 8004fe6:	60e7      	str	r7, [r4, #12]
    conv2d_14_bias_array.data_start = AI_PTR(weights_map[0] + 5104);
    conv2d_15_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_15_weights_array.data = AI_PTR(weights_map[0] + 5296);
 8004fe8:	f241 44b0 	movw	r4, #5296	; 0x14b0
    conv2d_10_weights_array.format |= AI_FMT_FLAG_CONST;
 8004fec:	4f8b      	ldr	r7, [pc, #556]	; (800521c <network_configure_weights+0x394>)
    conv2d_9_weights_array.format |= AI_FMT_FLAG_CONST;
 8004fee:	f8c9 6000 	str.w	r6, [r9]
    conv2d_15_weights_array.data = AI_PTR(weights_map[0] + 5296);
 8004ff2:	445c      	add	r4, fp
    conv2d_9_bias_array.format |= AI_FMT_FLAG_CONST;
 8004ff4:	6013      	str	r3, [r2, #0]
    conv2d_12_weights_array.format |= AI_FMT_FLAG_CONST;
 8004ff6:	4e8a      	ldr	r6, [pc, #552]	; (8005220 <network_configure_weights+0x398>)
    conv2d_15_weights_array.format |= AI_FMT_FLAG_CONST;
 8004ff8:	4b8a      	ldr	r3, [pc, #552]	; (8005224 <network_configure_weights+0x39c>)
    conv2d_8_weights_array.data = AI_PTR(weights_map[0] + 2480);
 8004ffa:	e9c0 cc02 	strd	ip, ip, [r0, #8]
    conv2d_8_bias_array.data = AI_PTR(weights_map[0] + 2864);
 8004ffe:	e9c1 5502 	strd	r5, r5, [r1, #8]
    conv2d_9_weights_array.data = AI_PTR(weights_map[0] + 3056);
 8005002:	e9c9 ee02 	strd	lr, lr, [r9, #8]
    conv2d_9_bias_array.data = AI_PTR(weights_map[0] + 3488);
 8005006:	e9c2 aa02 	strd	sl, sl, [r2, #8]
    conv2d_10_weights_array.format |= AI_FMT_FLAG_CONST;
 800500a:	683a      	ldr	r2, [r7, #0]
    conv2d_15_weights_array.data_start = AI_PTR(weights_map[0] + 5296);
    conv2d_15_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_15_bias_array.data = AI_PTR(weights_map[0] + 6064);
 800500c:	f241 79b0 	movw	r9, #6064	; 0x17b0
    conv2d_10_bias_array.format |= AI_FMT_FLAG_CONST;
 8005010:	f8df c25c 	ldr.w	ip, [pc, #604]	; 8005270 <network_configure_weights+0x3e8>
    conv2d_10_weights_array.format |= AI_FMT_FLAG_CONST;
 8005014:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    conv2d_12_bias_array.format |= AI_FMT_FLAG_CONST;
 8005018:	4883      	ldr	r0, [pc, #524]	; (8005228 <network_configure_weights+0x3a0>)
    conv2d_14_bias_array.format |= AI_FMT_FLAG_CONST;
 800501a:	4d84      	ldr	r5, [pc, #528]	; (800522c <network_configure_weights+0x3a4>)
    conv2d_15_bias_array.data = AI_PTR(weights_map[0] + 6064);
 800501c:	44d9      	add	r9, fp
    conv2d_10_weights_array.format |= AI_FMT_FLAG_CONST;
 800501e:	603a      	str	r2, [r7, #0]
    conv2d_10_bias_array.format |= AI_FMT_FLAG_CONST;
 8005020:	f8dc 2000 	ldr.w	r2, [ip]
    conv2d_14_bias_array.data = AI_PTR(weights_map[0] + 5104);
 8005024:	f8c5 8008 	str.w	r8, [r5, #8]
    conv2d_10_bias_array.format |= AI_FMT_FLAG_CONST;
 8005028:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    conv2d_14_bias_array.data = AI_PTR(weights_map[0] + 5104);
 800502c:	f8c5 800c 	str.w	r8, [r5, #12]
    conv2d_10_weights_array.data = AI_PTR(weights_map[0] + 3680);
 8005030:	f50b 6866 	add.w	r8, fp, #3680	; 0xe60
    conv2d_14_weights_array.format |= AI_FMT_FLAG_CONST;
 8005034:	497e      	ldr	r1, [pc, #504]	; (8005230 <network_configure_weights+0x3a8>)
    conv2d_10_bias_array.format |= AI_FMT_FLAG_CONST;
 8005036:	f8cc 2000 	str.w	r2, [ip]
    conv2d_12_bias_array.format |= AI_FMT_FLAG_CONST;
 800503a:	6802      	ldr	r2, [r0, #0]
    conv2d_10_weights_array.data = AI_PTR(weights_map[0] + 3680);
 800503c:	f8c7 8008 	str.w	r8, [r7, #8]
 8005040:	f8c7 800c 	str.w	r8, [r7, #12]
    conv2d_12_bias_array.format |= AI_FMT_FLAG_CONST;
 8005044:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    conv2d_12_weights_array.format |= AI_FMT_FLAG_CONST;
 8005048:	6837      	ldr	r7, [r6, #0]
    conv2d_10_bias_array.data = AI_PTR(weights_map[0] + 4064);
 800504a:	f50b 687e 	add.w	r8, fp, #4064	; 0xfe0
    conv2d_12_bias_array.format |= AI_FMT_FLAG_CONST;
 800504e:	6002      	str	r2, [r0, #0]
    conv2d_12_weights_array.format |= AI_FMT_FLAG_CONST;
 8005050:	f047 4780 	orr.w	r7, r7, #1073741824	; 0x40000000
    conv2d_14_bias_array.format |= AI_FMT_FLAG_CONST;
 8005054:	682a      	ldr	r2, [r5, #0]
    conv2d_15_bias_array.format |= AI_FMT_FLAG_CONST;
 8005056:	f8df e21c 	ldr.w	lr, [pc, #540]	; 8005274 <network_configure_weights+0x3ec>
    conv2d_12_weights_array.format |= AI_FMT_FLAG_CONST;
 800505a:	6037      	str	r7, [r6, #0]
    conv2d_14_bias_array.format |= AI_FMT_FLAG_CONST;
 800505c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    conv2d_14_weights_array.format |= AI_FMT_FLAG_CONST;
 8005060:	680f      	ldr	r7, [r1, #0]
    conv2d_10_bias_array.data = AI_PTR(weights_map[0] + 4064);
 8005062:	f8cc 8008 	str.w	r8, [ip, #8]
 8005066:	f8cc 800c 	str.w	r8, [ip, #12]
    conv2d_14_weights_array.format |= AI_FMT_FLAG_CONST;
 800506a:	f047 4780 	orr.w	r7, r7, #1073741824	; 0x40000000
    conv2d_12_weights_array.data = AI_PTR(weights_map[0] + 4096);
 800506e:	f50b 5880 	add.w	r8, fp, #4096	; 0x1000
    conv2d_14_bias_array.format |= AI_FMT_FLAG_CONST;
 8005072:	602a      	str	r2, [r5, #0]
    conv2d_15_bias_array.format |= AI_FMT_FLAG_CONST;
 8005074:	f8de 2000 	ldr.w	r2, [lr]
    conv2d_12_bias_array.data = AI_PTR(weights_map[0] + 4480);
 8005078:	f50b 5c8c 	add.w	ip, fp, #4480	; 0x1180
    conv2d_15_weights_array.format |= AI_FMT_FLAG_CONST;
 800507c:	681d      	ldr	r5, [r3, #0]
    conv2d_12_weights_array.data = AI_PTR(weights_map[0] + 4096);
 800507e:	f8c6 8008 	str.w	r8, [r6, #8]
    conv2d_15_bias_array.format |= AI_FMT_FLAG_CONST;
 8005082:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    conv2d_14_weights_array.format |= AI_FMT_FLAG_CONST;
 8005086:	600f      	str	r7, [r1, #0]
    conv2d_15_weights_array.format |= AI_FMT_FLAG_CONST;
 8005088:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    conv2d_14_weights_array.data = AI_PTR(weights_map[0] + 4672);
 800508c:	f50b 5792 	add.w	r7, fp, #4672	; 0x1240
    conv2d_12_weights_array.data = AI_PTR(weights_map[0] + 4096);
 8005090:	f8c6 800c 	str.w	r8, [r6, #12]
    conv2d_15_bias_array.data_start = AI_PTR(weights_map[0] + 6064);
    conv2d_16_weights_array.format |= AI_FMT_FLAG_CONST;
 8005094:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 8005278 <network_configure_weights+0x3f0>
    conv2d_16_weights_array.data = AI_PTR(weights_map[0] + 6128);
 8005098:	f241 76f0 	movw	r6, #6128	; 0x17f0
    conv2d_12_bias_array.data = AI_PTR(weights_map[0] + 4480);
 800509c:	f8c0 c008 	str.w	ip, [r0, #8]
 80050a0:	f8c0 c00c 	str.w	ip, [r0, #12]
    conv2d_16_weights_array.data_start = AI_PTR(weights_map[0] + 6128);
    conv2d_16_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_16_bias_array.data = AI_PTR(weights_map[0] + 7664);
 80050a4:	f641 5cf0 	movw	ip, #7664	; 0x1df0
    conv2d_15_bias_array.format |= AI_FMT_FLAG_CONST;
 80050a8:	f8ce 2000 	str.w	r2, [lr]
    conv2d_16_weights_array.data = AI_PTR(weights_map[0] + 6128);
 80050ac:	445e      	add	r6, fp
    conv2d_15_weights_array.format |= AI_FMT_FLAG_CONST;
 80050ae:	601d      	str	r5, [r3, #0]
    conv2d_16_bias_array.data = AI_PTR(weights_map[0] + 7664);
 80050b0:	44dc      	add	ip, fp
    conv2d_16_bias_array.format |= AI_FMT_FLAG_CONST;
 80050b2:	4d60      	ldr	r5, [pc, #384]	; (8005234 <network_configure_weights+0x3ac>)
    conv2d_16_bias_array.data_start = AI_PTR(weights_map[0] + 7664);
    conv2d_17_weights_array.format |= AI_FMT_FLAG_CONST;
 80050b4:	4860      	ldr	r0, [pc, #384]	; (8005238 <network_configure_weights+0x3b0>)
    conv2d_17_weights_array.data = AI_PTR(weights_map[0] + 8048);
    conv2d_17_weights_array.data_start = AI_PTR(weights_map[0] + 8048);
    conv2d_17_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_17_bias_array.data = AI_PTR(weights_map[0] + 8912);
    conv2d_17_bias_array.data_start = AI_PTR(weights_map[0] + 8912);
    conv2d_18_weights_array.format |= AI_FMT_FLAG_CONST;
 80050b6:	4a61      	ldr	r2, [pc, #388]	; (800523c <network_configure_weights+0x3b4>)
    conv2d_18_weights_array.data = AI_PTR(weights_map[0] + 9296);
    conv2d_18_weights_array.data_start = AI_PTR(weights_map[0] + 9296);
    conv2d_18_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_18_bias_array.data = AI_PTR(weights_map[0] + 10832);
    conv2d_18_bias_array.data_start = AI_PTR(weights_map[0] + 10832);
    conv2d_20_weights_array.format |= AI_FMT_FLAG_CONST;
 80050b8:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 800527c <network_configure_weights+0x3f4>
    conv2d_14_weights_array.data = AI_PTR(weights_map[0] + 4672);
 80050bc:	e9c1 7702 	strd	r7, r7, [r1, #8]
    conv2d_15_bias_array.data = AI_PTR(weights_map[0] + 6064);
 80050c0:	e9ce 9902 	strd	r9, r9, [lr, #8]
    conv2d_15_weights_array.data = AI_PTR(weights_map[0] + 5296);
 80050c4:	e9c3 4402 	strd	r4, r4, [r3, #8]
    conv2d_16_weights_array.format |= AI_FMT_FLAG_CONST;
 80050c8:	f8d8 3000 	ldr.w	r3, [r8]
    conv2d_17_weights_array.data = AI_PTR(weights_map[0] + 8048);
 80050cc:	f641 7970 	movw	r9, #8048	; 0x1f70
    conv2d_16_bias_array.data = AI_PTR(weights_map[0] + 7664);
 80050d0:	f8c5 c008 	str.w	ip, [r5, #8]
    conv2d_17_bias_array.data = AI_PTR(weights_map[0] + 8912);
 80050d4:	f242 27d0 	movw	r7, #8912	; 0x22d0
    conv2d_16_weights_array.format |= AI_FMT_FLAG_CONST;
 80050d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    conv2d_16_bias_array.data = AI_PTR(weights_map[0] + 7664);
 80050dc:	f8c5 c00c 	str.w	ip, [r5, #12]
    conv2d_17_bias_array.format |= AI_FMT_FLAG_CONST;
 80050e0:	4957      	ldr	r1, [pc, #348]	; (8005240 <network_configure_weights+0x3b8>)
    conv2d_17_weights_array.data = AI_PTR(weights_map[0] + 8048);
 80050e2:	44d9      	add	r9, fp
    conv2d_16_weights_array.format |= AI_FMT_FLAG_CONST;
 80050e4:	f8c8 3000 	str.w	r3, [r8]
    conv2d_17_bias_array.data = AI_PTR(weights_map[0] + 8912);
 80050e8:	445f      	add	r7, fp
    conv2d_16_bias_array.format |= AI_FMT_FLAG_CONST;
 80050ea:	682b      	ldr	r3, [r5, #0]
    conv2d_20_weights_array.data = AI_PTR(weights_map[0] + 10896);
 80050ec:	f642 2c90 	movw	ip, #10896	; 0x2a90
    conv2d_17_weights_array.data = AI_PTR(weights_map[0] + 8048);
 80050f0:	f8c0 9008 	str.w	r9, [r0, #8]
    conv2d_16_bias_array.format |= AI_FMT_FLAG_CONST;
 80050f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    conv2d_17_weights_array.data = AI_PTR(weights_map[0] + 8048);
 80050f8:	f8c0 900c 	str.w	r9, [r0, #12]
    conv2d_18_bias_array.format |= AI_FMT_FLAG_CONST;
 80050fc:	4c51      	ldr	r4, [pc, #324]	; (8005244 <network_configure_weights+0x3bc>)
    conv2d_20_weights_array.data = AI_PTR(weights_map[0] + 10896);
 80050fe:	44dc      	add	ip, fp
    conv2d_16_bias_array.format |= AI_FMT_FLAG_CONST;
 8005100:	602b      	str	r3, [r5, #0]
    conv2d_20_weights_array.data_start = AI_PTR(weights_map[0] + 10896);
    conv2d_20_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_20_bias_array.data = AI_PTR(weights_map[0] + 12432);
 8005102:	f243 0390 	movw	r3, #12432	; 0x3090
    conv2d_17_weights_array.format |= AI_FMT_FLAG_CONST;
 8005106:	6805      	ldr	r5, [r0, #0]
    conv2d_20_bias_array.data_start = AI_PTR(weights_map[0] + 12432);
    conv2d_21_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_21_weights_array.data = AI_PTR(weights_map[0] + 12816);
    conv2d_21_weights_array.data_start = AI_PTR(weights_map[0] + 12816);
    conv2d_21_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_21_bias_array.data = AI_PTR(weights_map[0] + 13680);
 8005108:	f243 5970 	movw	r9, #13680	; 0x3570
    conv2d_20_bias_array.format |= AI_FMT_FLAG_CONST;
 800510c:	f8df e170 	ldr.w	lr, [pc, #368]	; 8005280 <network_configure_weights+0x3f8>
    conv2d_20_bias_array.data = AI_PTR(weights_map[0] + 12432);
 8005110:	445b      	add	r3, fp
    conv2d_17_weights_array.format |= AI_FMT_FLAG_CONST;
 8005112:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    conv2d_17_bias_array.data = AI_PTR(weights_map[0] + 8912);
 8005116:	608f      	str	r7, [r1, #8]
 8005118:	60cf      	str	r7, [r1, #12]
    conv2d_21_bias_array.data = AI_PTR(weights_map[0] + 13680);
 800511a:	44d9      	add	r9, fp
    conv2d_17_weights_array.format |= AI_FMT_FLAG_CONST;
 800511c:	6005      	str	r5, [r0, #0]
    conv2d_17_bias_array.format |= AI_FMT_FLAG_CONST;
 800511e:	680d      	ldr	r5, [r1, #0]
    conv2d_18_weights_array.format |= AI_FMT_FLAG_CONST;
 8005120:	6810      	ldr	r0, [r2, #0]
    conv2d_17_bias_array.format |= AI_FMT_FLAG_CONST;
 8005122:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    conv2d_16_weights_array.data = AI_PTR(weights_map[0] + 6128);
 8005126:	f8c8 6008 	str.w	r6, [r8, #8]
    conv2d_18_weights_array.format |= AI_FMT_FLAG_CONST;
 800512a:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_16_weights_array.data = AI_PTR(weights_map[0] + 6128);
 800512e:	f8c8 600c 	str.w	r6, [r8, #12]
    conv2d_17_bias_array.format |= AI_FMT_FLAG_CONST;
 8005132:	600d      	str	r5, [r1, #0]
    conv2d_21_weights_array.data = AI_PTR(weights_map[0] + 12816);
 8005134:	f243 2110 	movw	r1, #12816	; 0x3210
    conv2d_18_bias_array.format |= AI_FMT_FLAG_CONST;
 8005138:	6825      	ldr	r5, [r4, #0]
    conv2d_18_weights_array.data = AI_PTR(weights_map[0] + 9296);
 800513a:	f242 4850 	movw	r8, #9296	; 0x2450
    conv2d_18_weights_array.format |= AI_FMT_FLAG_CONST;
 800513e:	6010      	str	r0, [r2, #0]
    conv2d_21_weights_array.data = AI_PTR(weights_map[0] + 12816);
 8005140:	460f      	mov	r7, r1
    conv2d_20_bias_array.format |= AI_FMT_FLAG_CONST;
 8005142:	f8de 0000 	ldr.w	r0, [lr]
    conv2d_18_bias_array.data = AI_PTR(weights_map[0] + 10832);
 8005146:	f642 2650 	movw	r6, #10832	; 0x2a50
    conv2d_20_weights_array.format |= AI_FMT_FLAG_CONST;
 800514a:	f8da 1000 	ldr.w	r1, [sl]
    conv2d_18_weights_array.data = AI_PTR(weights_map[0] + 9296);
 800514e:	44d8      	add	r8, fp
    conv2d_18_bias_array.data = AI_PTR(weights_map[0] + 10832);
 8005150:	445e      	add	r6, fp
    conv2d_21_weights_array.data = AI_PTR(weights_map[0] + 12816);
 8005152:	445f      	add	r7, fp
    conv2d_18_bias_array.format |= AI_FMT_FLAG_CONST;
 8005154:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    conv2d_20_weights_array.format |= AI_FMT_FLAG_CONST;
 8005158:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    conv2d_20_bias_array.format |= AI_FMT_FLAG_CONST;
 800515c:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_21_weights_array.data = AI_PTR(weights_map[0] + 12816);
 8005160:	9701      	str	r7, [sp, #4]
    conv2d_18_bias_array.format |= AI_FMT_FLAG_CONST;
 8005162:	6025      	str	r5, [r4, #0]
    conv2d_21_bias_array.data_start = AI_PTR(weights_map[0] + 13680);
    conv2d_22_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_22_weights_array.data = AI_PTR(weights_map[0] + 14064);
 8005164:	f243 67f0 	movw	r7, #14064	; 0x36f0
    conv2d_22_weights_array.format |= AI_FMT_FLAG_CONST;
 8005168:	4d37      	ldr	r5, [pc, #220]	; (8005248 <network_configure_weights+0x3c0>)
    conv2d_20_weights_array.format |= AI_FMT_FLAG_CONST;
 800516a:	f8ca 1000 	str.w	r1, [sl]
    conv2d_22_weights_array.data = AI_PTR(weights_map[0] + 14064);
 800516e:	445f      	add	r7, fp
    conv2d_21_weights_array.format |= AI_FMT_FLAG_CONST;
 8005170:	4936      	ldr	r1, [pc, #216]	; (800524c <network_configure_weights+0x3c4>)
    conv2d_20_bias_array.format |= AI_FMT_FLAG_CONST;
 8005172:	f8ce 0000 	str.w	r0, [lr]
    conv2d_22_weights_array.data_start = AI_PTR(weights_map[0] + 14064);
    conv2d_22_bias_array.format |= AI_FMT_FLAG_CONST;
 8005176:	4836      	ldr	r0, [pc, #216]	; (8005250 <network_configure_weights+0x3c8>)
    conv2d_18_weights_array.data = AI_PTR(weights_map[0] + 9296);
 8005178:	e9c2 8802 	strd	r8, r8, [r2, #8]
    conv2d_18_bias_array.data = AI_PTR(weights_map[0] + 10832);
 800517c:	e9c4 6602 	strd	r6, r6, [r4, #8]
    conv2d_20_weights_array.data = AI_PTR(weights_map[0] + 10896);
 8005180:	e9ca cc02 	strd	ip, ip, [sl, #8]
    conv2d_20_bias_array.data = AI_PTR(weights_map[0] + 12432);
 8005184:	e9ce 3302 	strd	r3, r3, [lr, #8]
    conv2d_21_weights_array.data = AI_PTR(weights_map[0] + 12816);
 8005188:	9e01      	ldr	r6, [sp, #4]
    conv2d_22_bias_array.data = AI_PTR(weights_map[0] + 15600);
 800518a:	f643 4cf0 	movw	ip, #15600	; 0x3cf0
    conv2d_22_bias_array.data_start = AI_PTR(weights_map[0] + 15600);
    conv2d_24_weights_array.format |= AI_FMT_FLAG_CONST;
 800518e:	4c31      	ldr	r4, [pc, #196]	; (8005254 <network_configure_weights+0x3cc>)
    conv2d_24_weights_array.data = AI_PTR(weights_map[0] + 15664);
 8005190:	f643 5e30 	movw	lr, #15664	; 0x3d30
    conv2d_21_weights_array.data = AI_PTR(weights_map[0] + 12816);
 8005194:	608e      	str	r6, [r1, #8]
    conv2d_22_bias_array.data = AI_PTR(weights_map[0] + 15600);
 8005196:	44dc      	add	ip, fp
    conv2d_21_weights_array.data = AI_PTR(weights_map[0] + 12816);
 8005198:	60ce      	str	r6, [r1, #12]
    conv2d_24_weights_array.data = AI_PTR(weights_map[0] + 15664);
 800519a:	44de      	add	lr, fp
    conv2d_22_weights_array.format |= AI_FMT_FLAG_CONST;
 800519c:	682e      	ldr	r6, [r5, #0]
    conv2d_21_weights_array.format |= AI_FMT_FLAG_CONST;
 800519e:	680b      	ldr	r3, [r1, #0]
    conv2d_22_weights_array.format |= AI_FMT_FLAG_CONST;
 80051a0:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
    conv2d_21_bias_array.format |= AI_FMT_FLAG_CONST;
 80051a4:	4a2c      	ldr	r2, [pc, #176]	; (8005258 <network_configure_weights+0x3d0>)
    conv2d_24_weights_array.data_start = AI_PTR(weights_map[0] + 15664);
    conv2d_24_bias_array.format |= AI_FMT_FLAG_CONST;
 80051a6:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8005284 <network_configure_weights+0x3fc>
    conv2d_21_weights_array.format |= AI_FMT_FLAG_CONST;
 80051aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    conv2d_22_weights_array.format |= AI_FMT_FLAG_CONST;
 80051ae:	602e      	str	r6, [r5, #0]
    conv2d_22_bias_array.format |= AI_FMT_FLAG_CONST;
 80051b0:	6806      	ldr	r6, [r0, #0]
    conv2d_22_weights_array.data = AI_PTR(weights_map[0] + 14064);
 80051b2:	60af      	str	r7, [r5, #8]
 80051b4:	60ef      	str	r7, [r5, #12]
    conv2d_22_bias_array.format |= AI_FMT_FLAG_CONST;
 80051b6:	f046 4780 	orr.w	r7, r6, #1073741824	; 0x40000000
    conv2d_24_weights_array.format |= AI_FMT_FLAG_CONST;
 80051ba:	6825      	ldr	r5, [r4, #0]
    conv2d_22_bias_array.data = AI_PTR(weights_map[0] + 15600);
 80051bc:	f8c0 c008 	str.w	ip, [r0, #8]
 80051c0:	f8c0 c00c 	str.w	ip, [r0, #12]
    conv2d_24_weights_array.format |= AI_FMT_FLAG_CONST;
 80051c4:	f045 4680 	orr.w	r6, r5, #1073741824	; 0x40000000
    conv2d_22_bias_array.format |= AI_FMT_FLAG_CONST;
 80051c8:	6007      	str	r7, [r0, #0]
    conv2d_26_weights_array.data_start = AI_PTR(weights_map[0] + 17584);
    conv2d_26_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_26_bias_array.data = AI_PTR(weights_map[0] + 18448);
    conv2d_26_bias_array.data_start = AI_PTR(weights_map[0] + 18448);
    conv2d_27_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_27_weights_array.data = AI_PTR(weights_map[0] + 18832);
 80051ca:	f644 1790 	movw	r7, #18832	; 0x4990
    conv2d_24_bias_array.format |= AI_FMT_FLAG_CONST;
 80051ce:	f8da 5000 	ldr.w	r5, [sl]
    conv2d_21_weights_array.format |= AI_FMT_FLAG_CONST;
 80051d2:	600b      	str	r3, [r1, #0]
    conv2d_24_bias_array.data = AI_PTR(weights_map[0] + 17200);
 80051d4:	f244 3130 	movw	r1, #17200	; 0x4330
    conv2d_21_bias_array.format |= AI_FMT_FLAG_CONST;
 80051d8:	6813      	ldr	r3, [r2, #0]
    conv2d_24_bias_array.format |= AI_FMT_FLAG_CONST;
 80051da:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    conv2d_26_weights_array.format |= AI_FMT_FLAG_CONST;
 80051de:	481f      	ldr	r0, [pc, #124]	; (800525c <network_configure_weights+0x3d4>)
    conv2d_24_bias_array.data = AI_PTR(weights_map[0] + 17200);
 80051e0:	4459      	add	r1, fp
    conv2d_26_bias_array.format |= AI_FMT_FLAG_CONST;
 80051e2:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8005288 <network_configure_weights+0x400>
    conv2d_21_bias_array.format |= AI_FMT_FLAG_CONST;
 80051e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051ea:	e04f      	b.n	800528c <network_configure_weights+0x404>
 80051ec:	20003da8 	.word	0x20003da8
 80051f0:	200048f8 	.word	0x200048f8
 80051f4:	200047f8 	.word	0x200047f8
 80051f8:	200050e8 	.word	0x200050e8
 80051fc:	20005d08 	.word	0x20005d08
 8005200:	200051b8 	.word	0x200051b8
 8005204:	20006d60 	.word	0x20006d60
 8005208:	20006c30 	.word	0x20006c30
 800520c:	20006f60 	.word	0x20006f60
 8005210:	20006e30 	.word	0x20006e30
 8005214:	20006e60 	.word	0x20006e60
 8005218:	20006f90 	.word	0x20006f90
 800521c:	200036b8 	.word	0x200036b8
 8005220:	200037e8 	.word	0x200037e8
 8005224:	20003a18 	.word	0x20003a18
 8005228:	200036e8 	.word	0x200036e8
 800522c:	20003818 	.word	0x20003818
 8005230:	20003918 	.word	0x20003918
 8005234:	20003a48 	.word	0x20003a48
 8005238:	20003c78 	.word	0x20003c78
 800523c:	20003d78 	.word	0x20003d78
 8005240:	20003b78 	.word	0x20003b78
 8005244:	20003ca8 	.word	0x20003ca8
 8005248:	20004208 	.word	0x20004208
 800524c:	20004108 	.word	0x20004108
 8005250:	20004138 	.word	0x20004138
 8005254:	20004338 	.word	0x20004338
 8005258:	20004008 	.word	0x20004008
 800525c:	20004468 	.word	0x20004468
 8005260:	20003ea8 	.word	0x20003ea8
 8005264:	20005c08 	.word	0x20005c08
 8005268:	20006d30 	.word	0x20006d30
 800526c:	20007090 	.word	0x20007090
 8005270:	200035e8 	.word	0x200035e8
 8005274:	20003948 	.word	0x20003948
 8005278:	20003b48 	.word	0x20003b48
 800527c:	20003fd8 	.word	0x20003fd8
 8005280:	20003ed8 	.word	0x20003ed8
 8005284:	20004238 	.word	0x20004238
 8005288:	20004368 	.word	0x20004368
    conv2d_26_weights_array.format |= AI_FMT_FLAG_CONST;
 800528c:	6800      	ldr	r0, [r0, #0]
    conv2d_27_weights_array.data = AI_PTR(weights_map[0] + 18832);
 800528e:	445f      	add	r7, fp
    conv2d_21_bias_array.data = AI_PTR(weights_map[0] + 13680);
 8005290:	f8c2 9008 	str.w	r9, [r2, #8]
 8005294:	f8c2 900c 	str.w	r9, [r2, #12]
    conv2d_26_weights_array.format |= AI_FMT_FLAG_CONST;
 8005298:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_21_bias_array.format |= AI_FMT_FLAG_CONST;
 800529c:	6013      	str	r3, [r2, #0]
    conv2d_26_weights_array.data = AI_PTR(weights_map[0] + 17584);
 800529e:	f244 42b0 	movw	r2, #17584	; 0x44b0
    conv2d_24_weights_array.format |= AI_FMT_FLAG_CONST;
 80052a2:	6026      	str	r6, [r4, #0]
    conv2d_26_bias_array.data = AI_PTR(weights_map[0] + 18448);
 80052a4:	f644 0310 	movw	r3, #18448	; 0x4810
    conv2d_26_bias_array.format |= AI_FMT_FLAG_CONST;
 80052a8:	f8d8 6000 	ldr.w	r6, [r8]
    conv2d_26_weights_array.data = AI_PTR(weights_map[0] + 17584);
 80052ac:	445a      	add	r2, fp
    conv2d_24_bias_array.format |= AI_FMT_FLAG_CONST;
 80052ae:	f8ca 5000 	str.w	r5, [sl]
    conv2d_26_bias_array.data = AI_PTR(weights_map[0] + 18448);
 80052b2:	445b      	add	r3, fp
    conv2d_26_weights_array.format |= AI_FMT_FLAG_CONST;
 80052b4:	4dc7      	ldr	r5, [pc, #796]	; (80055d4 <network_configure_weights+0x74c>)
    conv2d_26_bias_array.format |= AI_FMT_FLAG_CONST;
 80052b6:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
    conv2d_27_weights_array.data_start = AI_PTR(weights_map[0] + 18832);
    conv2d_27_bias_array.format |= AI_FMT_FLAG_CONST;
 80052ba:	f8df c398 	ldr.w	ip, [pc, #920]	; 8005654 <network_configure_weights+0x7cc>
    conv2d_27_bias_array.data = AI_PTR(weights_map[0] + 21136);
 80052be:	f245 2990 	movw	r9, #21136	; 0x5290
    conv2d_26_weights_array.format |= AI_FMT_FLAG_CONST;
 80052c2:	6028      	str	r0, [r5, #0]
    conv2d_27_weights_array.format |= AI_FMT_FLAG_CONST;
 80052c4:	4dc4      	ldr	r5, [pc, #784]	; (80055d8 <network_configure_weights+0x750>)
    conv2d_27_bias_array.data = AI_PTR(weights_map[0] + 21136);
 80052c6:	44d9      	add	r9, fp
    conv2d_26_weights_array.data = AI_PTR(weights_map[0] + 17584);
 80052c8:	48c2      	ldr	r0, [pc, #776]	; (80055d4 <network_configure_weights+0x74c>)
    conv2d_26_bias_array.format |= AI_FMT_FLAG_CONST;
 80052ca:	f8c8 6000 	str.w	r6, [r8]
    conv2d_27_bias_array.data_start = AI_PTR(weights_map[0] + 21136);
    conv2d_28_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_28_weights_array.data = AI_PTR(weights_map[0] + 21232);
    conv2d_28_weights_array.data_start = AI_PTR(weights_map[0] + 21232);
    conv2d_28_bias_array.format |= AI_FMT_FLAG_CONST;
 80052ce:	4ec3      	ldr	r6, [pc, #780]	; (80055dc <network_configure_weights+0x754>)
    conv2d_24_weights_array.data = AI_PTR(weights_map[0] + 15664);
 80052d0:	e9c4 ee02 	strd	lr, lr, [r4, #8]
    conv2d_24_bias_array.data = AI_PTR(weights_map[0] + 17200);
 80052d4:	e9ca 1102 	strd	r1, r1, [sl, #8]
    conv2d_26_weights_array.data = AI_PTR(weights_map[0] + 17584);
 80052d8:	e9c0 2202 	strd	r2, r2, [r0, #8]
    conv2d_26_bias_array.data = AI_PTR(weights_map[0] + 18448);
 80052dc:	e9c8 3302 	strd	r3, r3, [r8, #8]
    conv2d_27_weights_array.format |= AI_FMT_FLAG_CONST;
 80052e0:	6828      	ldr	r0, [r5, #0]
    conv2d_28_bias_array.data = AI_PTR(weights_map[0] + 24688);
 80052e2:	f246 0a70 	movw	sl, #24688	; 0x6070
    conv2d_27_weights_array.data = AI_PTR(weights_map[0] + 18832);
 80052e6:	60af      	str	r7, [r5, #8]
    conv2d_28_weights_array.data = AI_PTR(weights_map[0] + 21232);
 80052e8:	f245 28f0 	movw	r8, #21232	; 0x52f0
    conv2d_27_weights_array.format |= AI_FMT_FLAG_CONST;
 80052ec:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_27_weights_array.data = AI_PTR(weights_map[0] + 18832);
 80052f0:	60ef      	str	r7, [r5, #12]
    conv2d_28_weights_array.format |= AI_FMT_FLAG_CONST;
 80052f2:	f8df e364 	ldr.w	lr, [pc, #868]	; 8005658 <network_configure_weights+0x7d0>
    conv2d_28_bias_array.data = AI_PTR(weights_map[0] + 24688);
 80052f6:	44da      	add	sl, fp
    conv2d_27_weights_array.format |= AI_FMT_FLAG_CONST;
 80052f8:	6028      	str	r0, [r5, #0]
    conv2d_28_bias_array.data_start = AI_PTR(weights_map[0] + 24688);
    conv2d_29_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_29_weights_array.data = AI_PTR(weights_map[0] + 25264);
 80052fa:	f246 27b0 	movw	r7, #25264	; 0x62b0
    conv2d_27_bias_array.format |= AI_FMT_FLAG_CONST;
 80052fe:	f8dc 5000 	ldr.w	r5, [ip]
    conv2d_28_weights_array.data = AI_PTR(weights_map[0] + 21232);
 8005302:	44d8      	add	r8, fp
    conv2d_29_weights_array.format |= AI_FMT_FLAG_CONST;
 8005304:	4cb6      	ldr	r4, [pc, #728]	; (80055e0 <network_configure_weights+0x758>)
    conv2d_29_weights_array.data = AI_PTR(weights_map[0] + 25264);
 8005306:	445f      	add	r7, fp
    conv2d_27_bias_array.format |= AI_FMT_FLAG_CONST;
 8005308:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    conv2d_27_bias_array.data = AI_PTR(weights_map[0] + 21136);
 800530c:	f8cc 9008 	str.w	r9, [ip, #8]
 8005310:	f8cc 900c 	str.w	r9, [ip, #12]
    conv2d_29_weights_array.data_start = AI_PTR(weights_map[0] + 25264);
    conv2d_29_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_29_bias_array.data = AI_PTR(weights_map[0] + 26560);
 8005314:	f246 70c0 	movw	r0, #26560	; 0x67c0
    conv2d_27_bias_array.format |= AI_FMT_FLAG_CONST;
 8005318:	f8cc 5000 	str.w	r5, [ip]
    conv2d_29_bias_array.data_start = AI_PTR(weights_map[0] + 26560);
    conv2d_30_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_30_weights_array.data = AI_PTR(weights_map[0] + 27136);
 800531c:	f50b 4cd4 	add.w	ip, fp, #27136	; 0x6a00
    conv2d_28_weights_array.format |= AI_FMT_FLAG_CONST;
 8005320:	f8de 5000 	ldr.w	r5, [lr]
    conv2d_29_bias_array.data = AI_PTR(weights_map[0] + 26560);
 8005324:	4458      	add	r0, fp
    conv2d_29_bias_array.format |= AI_FMT_FLAG_CONST;
 8005326:	49af      	ldr	r1, [pc, #700]	; (80055e4 <network_configure_weights+0x75c>)
    conv2d_28_weights_array.format |= AI_FMT_FLAG_CONST;
 8005328:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    conv2d_30_weights_array.format |= AI_FMT_FLAG_CONST;
 800532c:	4aae      	ldr	r2, [pc, #696]	; (80055e8 <network_configure_weights+0x760>)
    conv2d_28_bias_array.data = AI_PTR(weights_map[0] + 24688);
 800532e:	f8c6 a008 	str.w	sl, [r6, #8]
    conv2d_28_weights_array.format |= AI_FMT_FLAG_CONST;
 8005332:	f8ce 5000 	str.w	r5, [lr]
    conv2d_28_bias_array.format |= AI_FMT_FLAG_CONST;
 8005336:	6835      	ldr	r5, [r6, #0]
    conv2d_28_bias_array.data = AI_PTR(weights_map[0] + 24688);
 8005338:	f8c6 a00c 	str.w	sl, [r6, #12]
    conv2d_32_weights_array.data_start = AI_PTR(weights_map[0] + 30688);
    conv2d_32_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_32_bias_array.data = AI_PTR(weights_map[0] + 34144);
    conv2d_32_bias_array.data_start = AI_PTR(weights_map[0] + 34144);
    conv2d_33_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_33_weights_array.data = AI_PTR(weights_map[0] + 34720);
 800533c:	f248 7aa0 	movw	sl, #34720	; 0x87a0
    conv2d_28_bias_array.format |= AI_FMT_FLAG_CONST;
 8005340:	f045 4980 	orr.w	r9, r5, #1073741824	; 0x40000000
    conv2d_29_weights_array.format |= AI_FMT_FLAG_CONST;
 8005344:	6825      	ldr	r5, [r4, #0]
    conv2d_30_bias_array.format |= AI_FMT_FLAG_CONST;
 8005346:	4ba9      	ldr	r3, [pc, #676]	; (80055ec <network_configure_weights+0x764>)
    conv2d_33_weights_array.data = AI_PTR(weights_map[0] + 34720);
 8005348:	44da      	add	sl, fp
    conv2d_29_weights_array.format |= AI_FMT_FLAG_CONST;
 800534a:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    conv2d_28_bias_array.format |= AI_FMT_FLAG_CONST;
 800534e:	f8c6 9000 	str.w	r9, [r6]
    conv2d_29_bias_array.format |= AI_FMT_FLAG_CONST;
 8005352:	680e      	ldr	r6, [r1, #0]
    conv2d_32_weights_array.data = AI_PTR(weights_map[0] + 30688);
 8005354:	f247 79e0 	movw	r9, #30688	; 0x77e0
    conv2d_29_weights_array.format |= AI_FMT_FLAG_CONST;
 8005358:	6025      	str	r5, [r4, #0]
    conv2d_30_weights_array.format |= AI_FMT_FLAG_CONST;
 800535a:	6815      	ldr	r5, [r2, #0]
    conv2d_29_bias_array.format |= AI_FMT_FLAG_CONST;
 800535c:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
    conv2d_28_weights_array.data = AI_PTR(weights_map[0] + 21232);
 8005360:	f8ce 8008 	str.w	r8, [lr, #8]
    conv2d_32_weights_array.data = AI_PTR(weights_map[0] + 30688);
 8005364:	44d9      	add	r9, fp
    conv2d_30_weights_array.format |= AI_FMT_FLAG_CONST;
 8005366:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    conv2d_29_bias_array.format |= AI_FMT_FLAG_CONST;
 800536a:	600e      	str	r6, [r1, #0]
    conv2d_30_bias_array.format |= AI_FMT_FLAG_CONST;
 800536c:	681e      	ldr	r6, [r3, #0]
    conv2d_30_weights_array.format |= AI_FMT_FLAG_CONST;
 800536e:	6015      	str	r5, [r2, #0]
    conv2d_32_bias_array.data = AI_PTR(weights_map[0] + 34144);
 8005370:	f248 5560 	movw	r5, #34144	; 0x8560
    conv2d_28_weights_array.data = AI_PTR(weights_map[0] + 21232);
 8005374:	f8ce 800c 	str.w	r8, [lr, #12]
    conv2d_30_bias_array.data = AI_PTR(weights_map[0] + 30592);
 8005378:	f50b 4eef 	add.w	lr, fp, #30592	; 0x7780
    conv2d_32_bias_array.data = AI_PTR(weights_map[0] + 34144);
 800537c:	445d      	add	r5, fp
    conv2d_30_bias_array.format |= AI_FMT_FLAG_CONST;
 800537e:	f046 4880 	orr.w	r8, r6, #1073741824	; 0x40000000
    conv2d_32_weights_array.format |= AI_FMT_FLAG_CONST;
 8005382:	4e9b      	ldr	r6, [pc, #620]	; (80055f0 <network_configure_weights+0x768>)
    conv2d_30_bias_array.format |= AI_FMT_FLAG_CONST;
 8005384:	f8c3 8000 	str.w	r8, [r3]
    conv2d_34_weights_array.data = AI_PTR(weights_map[0] + 36592);
    conv2d_34_weights_array.data_start = AI_PTR(weights_map[0] + 36592);
    conv2d_34_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_34_bias_array.data = AI_PTR(weights_map[0] + 40048);
    conv2d_34_bias_array.data_start = AI_PTR(weights_map[0] + 40048);
    conv2d_36_weights_array.format |= AI_FMT_FLAG_CONST;
 8005388:	f8df 82d0 	ldr.w	r8, [pc, #720]	; 800565c <network_configure_weights+0x7d4>
    conv2d_29_weights_array.data = AI_PTR(weights_map[0] + 25264);
 800538c:	e9c4 7702 	strd	r7, r7, [r4, #8]
    conv2d_32_bias_array.format |= AI_FMT_FLAG_CONST;
 8005390:	4f98      	ldr	r7, [pc, #608]	; (80055f4 <network_configure_weights+0x76c>)
    conv2d_33_weights_array.format |= AI_FMT_FLAG_CONST;
 8005392:	4c99      	ldr	r4, [pc, #612]	; (80055f8 <network_configure_weights+0x770>)
    conv2d_29_bias_array.data = AI_PTR(weights_map[0] + 26560);
 8005394:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_30_weights_array.data = AI_PTR(weights_map[0] + 27136);
 8005398:	e9c2 cc02 	strd	ip, ip, [r2, #8]
    conv2d_30_bias_array.data = AI_PTR(weights_map[0] + 30592);
 800539c:	e9c3 ee02 	strd	lr, lr, [r3, #8]
    conv2d_32_weights_array.format |= AI_FMT_FLAG_CONST;
 80053a0:	6833      	ldr	r3, [r6, #0]
    conv2d_33_bias_array.data = AI_PTR(weights_map[0] + 36016);
 80053a2:	f648 42b0 	movw	r2, #36016	; 0x8cb0
    conv2d_32_bias_array.data = AI_PTR(weights_map[0] + 34144);
 80053a6:	60bd      	str	r5, [r7, #8]
    conv2d_34_weights_array.data = AI_PTR(weights_map[0] + 36592);
 80053a8:	f648 6cf0 	movw	ip, #36592	; 0x8ef0
    conv2d_32_bias_array.data = AI_PTR(weights_map[0] + 34144);
 80053ac:	60fd      	str	r5, [r7, #12]
    conv2d_33_bias_array.data = AI_PTR(weights_map[0] + 36016);
 80053ae:	445a      	add	r2, fp
    conv2d_33_weights_array.format |= AI_FMT_FLAG_CONST;
 80053b0:	6825      	ldr	r5, [r4, #0]
    conv2d_32_weights_array.format |= AI_FMT_FLAG_CONST;
 80053b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    conv2d_33_bias_array.format |= AI_FMT_FLAG_CONST;
 80053b6:	4891      	ldr	r0, [pc, #580]	; (80055fc <network_configure_weights+0x774>)
    conv2d_34_weights_array.data = AI_PTR(weights_map[0] + 36592);
 80053b8:	44dc      	add	ip, fp
    conv2d_33_weights_array.format |= AI_FMT_FLAG_CONST;
 80053ba:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    conv2d_34_weights_array.format |= AI_FMT_FLAG_CONST;
 80053be:	4990      	ldr	r1, [pc, #576]	; (8005600 <network_configure_weights+0x778>)
    conv2d_33_weights_array.data = AI_PTR(weights_map[0] + 34720);
 80053c0:	f8c4 a008 	str.w	sl, [r4, #8]
    conv2d_33_weights_array.format |= AI_FMT_FLAG_CONST;
 80053c4:	6025      	str	r5, [r4, #0]
    conv2d_33_bias_array.format |= AI_FMT_FLAG_CONST;
 80053c6:	6805      	ldr	r5, [r0, #0]
    conv2d_33_weights_array.data = AI_PTR(weights_map[0] + 34720);
 80053c8:	f8c4 a00c 	str.w	sl, [r4, #12]
    conv2d_33_bias_array.data = AI_PTR(weights_map[0] + 36016);
 80053cc:	6082      	str	r2, [r0, #8]
    conv2d_33_bias_array.format |= AI_FMT_FLAG_CONST;
 80053ce:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    conv2d_34_weights_array.format |= AI_FMT_FLAG_CONST;
 80053d2:	680c      	ldr	r4, [r1, #0]
    conv2d_33_bias_array.data = AI_PTR(weights_map[0] + 36016);
 80053d4:	60c2      	str	r2, [r0, #12]
    conv2d_34_bias_array.format |= AI_FMT_FLAG_CONST;
 80053d6:	4a8b      	ldr	r2, [pc, #556]	; (8005604 <network_configure_weights+0x77c>)
    conv2d_34_weights_array.format |= AI_FMT_FLAG_CONST;
 80053d8:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    conv2d_32_weights_array.data = AI_PTR(weights_map[0] + 30688);
 80053dc:	f8c6 9008 	str.w	r9, [r6, #8]
 80053e0:	f8c6 900c 	str.w	r9, [r6, #12]
    conv2d_36_weights_array.data_start = AI_PTR(weights_map[0] + 40144);
    conv2d_36_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_36_bias_array.data = AI_PTR(weights_map[0] + 43600);
    conv2d_36_bias_array.data_start = AI_PTR(weights_map[0] + 43600);
    conv2d_37_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_37_weights_array.data = AI_PTR(weights_map[0] + 44176);
 80053e4:	f64a 4990 	movw	r9, #44176	; 0xac90
    conv2d_32_weights_array.format |= AI_FMT_FLAG_CONST;
 80053e8:	6033      	str	r3, [r6, #0]
    conv2d_34_bias_array.data = AI_PTR(weights_map[0] + 40048);
 80053ea:	f649 4670 	movw	r6, #40048	; 0x9c70
    conv2d_32_bias_array.format |= AI_FMT_FLAG_CONST;
 80053ee:	683b      	ldr	r3, [r7, #0]
    conv2d_37_weights_array.data = AI_PTR(weights_map[0] + 44176);
 80053f0:	44d9      	add	r9, fp
    conv2d_33_bias_array.format |= AI_FMT_FLAG_CONST;
 80053f2:	6005      	str	r5, [r0, #0]
    conv2d_34_bias_array.data = AI_PTR(weights_map[0] + 40048);
 80053f4:	445e      	add	r6, fp
    conv2d_34_bias_array.format |= AI_FMT_FLAG_CONST;
 80053f6:	6815      	ldr	r5, [r2, #0]
    conv2d_32_bias_array.format |= AI_FMT_FLAG_CONST;
 80053f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    conv2d_36_bias_array.format |= AI_FMT_FLAG_CONST;
 80053fc:	f8df e260 	ldr.w	lr, [pc, #608]	; 8005660 <network_configure_weights+0x7d8>
    conv2d_34_weights_array.format |= AI_FMT_FLAG_CONST;
 8005400:	600c      	str	r4, [r1, #0]
    conv2d_34_bias_array.format |= AI_FMT_FLAG_CONST;
 8005402:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    conv2d_36_weights_array.format |= AI_FMT_FLAG_CONST;
 8005406:	f8d8 0000 	ldr.w	r0, [r8]
    conv2d_36_bias_array.format |= AI_FMT_FLAG_CONST;
 800540a:	f8de 4000 	ldr.w	r4, [lr]
    conv2d_32_bias_array.format |= AI_FMT_FLAG_CONST;
 800540e:	603b      	str	r3, [r7, #0]
    conv2d_36_weights_array.data = AI_PTR(weights_map[0] + 40144);
 8005410:	f649 47d0 	movw	r7, #40144	; 0x9cd0
    conv2d_34_bias_array.format |= AI_FMT_FLAG_CONST;
 8005414:	6015      	str	r5, [r2, #0]
    conv2d_36_bias_array.data = AI_PTR(weights_map[0] + 43600);
 8005416:	f64a 2350 	movw	r3, #43600	; 0xaa50
    conv2d_37_weights_array.data_start = AI_PTR(weights_map[0] + 44176);
    conv2d_37_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_37_bias_array.data = AI_PTR(weights_map[0] + 45472);
    conv2d_37_bias_array.data_start = AI_PTR(weights_map[0] + 45472);
    conv2d_38_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_38_weights_array.data = AI_PTR(weights_map[0] + 46048);
 800541a:	f24b 32e0 	movw	r2, #46048	; 0xb3e0
    conv2d_36_weights_array.data = AI_PTR(weights_map[0] + 40144);
 800541e:	445f      	add	r7, fp
    conv2d_36_bias_array.data = AI_PTR(weights_map[0] + 43600);
 8005420:	445b      	add	r3, fp
    conv2d_36_weights_array.format |= AI_FMT_FLAG_CONST;
 8005422:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_38_weights_array.data = AI_PTR(weights_map[0] + 46048);
 8005426:	445a      	add	r2, fp
    conv2d_36_bias_array.format |= AI_FMT_FLAG_CONST;
 8005428:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    conv2d_37_weights_array.format |= AI_FMT_FLAG_CONST;
 800542c:	f8df a234 	ldr.w	sl, [pc, #564]	; 8005664 <network_configure_weights+0x7dc>
    conv2d_36_weights_array.format |= AI_FMT_FLAG_CONST;
 8005430:	f8c8 0000 	str.w	r0, [r8]
    conv2d_36_bias_array.format |= AI_FMT_FLAG_CONST;
 8005434:	f8ce 4000 	str.w	r4, [lr]
    conv2d_37_bias_array.data = AI_PTR(weights_map[0] + 45472);
 8005438:	f24b 14a0 	movw	r4, #45472	; 0xb1a0
    conv2d_38_weights_array.data = AI_PTR(weights_map[0] + 46048);
 800543c:	9202      	str	r2, [sp, #8]
    conv2d_40_bias_array.data_start = AI_PTR(weights_map[0] + 53056);
    conv2d_41_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_41_weights_array.data = AI_PTR(weights_map[0] + 53632);
    conv2d_41_weights_array.data_start = AI_PTR(weights_map[0] + 53632);
    conv2d_41_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_41_bias_array.data = AI_PTR(weights_map[0] + 54928);
 800543e:	f24d 6290 	movw	r2, #54928	; 0xd690
    conv2d_36_weights_array.data = AI_PTR(weights_map[0] + 40144);
 8005442:	f8c8 7008 	str.w	r7, [r8, #8]
    conv2d_37_bias_array.data = AI_PTR(weights_map[0] + 45472);
 8005446:	445c      	add	r4, fp
    conv2d_36_weights_array.data = AI_PTR(weights_map[0] + 40144);
 8005448:	f8c8 700c 	str.w	r7, [r8, #12]
    conv2d_40_weights_array.data = AI_PTR(weights_map[0] + 49600);
 800544c:	f24c 18c0 	movw	r8, #49600	; 0xc1c0
    conv2d_37_bias_array.format |= AI_FMT_FLAG_CONST;
 8005450:	4d6d      	ldr	r5, [pc, #436]	; (8005608 <network_configure_weights+0x780>)
    conv2d_41_bias_array.data = AI_PTR(weights_map[0] + 54928);
 8005452:	445a      	add	r2, fp
    conv2d_38_bias_array.format |= AI_FMT_FLAG_CONST;
 8005454:	4f6d      	ldr	r7, [pc, #436]	; (800560c <network_configure_weights+0x784>)
    conv2d_40_weights_array.data = AI_PTR(weights_map[0] + 49600);
 8005456:	44d8      	add	r8, fp
    conv2d_34_weights_array.data = AI_PTR(weights_map[0] + 36592);
 8005458:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    conv2d_34_bias_array.data = AI_PTR(weights_map[0] + 40048);
 800545c:	4969      	ldr	r1, [pc, #420]	; (8005604 <network_configure_weights+0x77c>)
    conv2d_40_weights_array.format |= AI_FMT_FLAG_CONST;
 800545e:	f8df c208 	ldr.w	ip, [pc, #520]	; 8005668 <network_configure_weights+0x7e0>
    conv2d_34_bias_array.data = AI_PTR(weights_map[0] + 40048);
 8005462:	608e      	str	r6, [r1, #8]
 8005464:	60ce      	str	r6, [r1, #12]
    conv2d_38_bias_array.data = AI_PTR(weights_map[0] + 49504);
 8005466:	f24c 1160 	movw	r1, #49504	; 0xc160
    conv2d_38_weights_array.format |= AI_FMT_FLAG_CONST;
 800546a:	4e69      	ldr	r6, [pc, #420]	; (8005610 <network_configure_weights+0x788>)
    conv2d_38_bias_array.data = AI_PTR(weights_map[0] + 49504);
 800546c:	4459      	add	r1, fp
 800546e:	9103      	str	r1, [sp, #12]
    conv2d_36_bias_array.data = AI_PTR(weights_map[0] + 43600);
 8005470:	f8ce 3008 	str.w	r3, [lr, #8]
 8005474:	f8ce 300c 	str.w	r3, [lr, #12]
    conv2d_40_bias_array.data = AI_PTR(weights_map[0] + 53056);
 8005478:	f64c 7340 	movw	r3, #53056	; 0xcf40
    conv2d_37_weights_array.data = AI_PTR(weights_map[0] + 44176);
 800547c:	f8ca 9008 	str.w	r9, [sl, #8]
    conv2d_41_weights_array.data = AI_PTR(weights_map[0] + 53632);
 8005480:	f24d 1e80 	movw	lr, #53632	; 0xd180
    conv2d_40_bias_array.data = AI_PTR(weights_map[0] + 53056);
 8005484:	4618      	mov	r0, r3
    conv2d_37_weights_array.format |= AI_FMT_FLAG_CONST;
 8005486:	f8da 3000 	ldr.w	r3, [sl]
    conv2d_37_weights_array.data = AI_PTR(weights_map[0] + 44176);
 800548a:	f8ca 900c 	str.w	r9, [sl, #12]
    conv2d_41_weights_array.data = AI_PTR(weights_map[0] + 53632);
 800548e:	44de      	add	lr, fp
    conv2d_37_weights_array.format |= AI_FMT_FLAG_CONST;
 8005490:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    conv2d_40_bias_array.data = AI_PTR(weights_map[0] + 53056);
 8005494:	4458      	add	r0, fp
    conv2d_37_bias_array.data = AI_PTR(weights_map[0] + 45472);
 8005496:	60ac      	str	r4, [r5, #8]
    conv2d_37_weights_array.format |= AI_FMT_FLAG_CONST;
 8005498:	f8ca 3000 	str.w	r3, [sl]
    conv2d_37_bias_array.format |= AI_FMT_FLAG_CONST;
 800549c:	682b      	ldr	r3, [r5, #0]
    conv2d_37_bias_array.data = AI_PTR(weights_map[0] + 45472);
 800549e:	60ec      	str	r4, [r5, #12]
    conv2d_37_bias_array.format |= AI_FMT_FLAG_CONST;
 80054a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    conv2d_38_bias_array.format |= AI_FMT_FLAG_CONST;
 80054a4:	683c      	ldr	r4, [r7, #0]
    conv2d_41_weights_array.format |= AI_FMT_FLAG_CONST;
 80054a6:	495b      	ldr	r1, [pc, #364]	; (8005614 <network_configure_weights+0x78c>)
    conv2d_37_bias_array.format |= AI_FMT_FLAG_CONST;
 80054a8:	602b      	str	r3, [r5, #0]
    conv2d_38_bias_array.format |= AI_FMT_FLAG_CONST;
 80054aa:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    conv2d_38_weights_array.format |= AI_FMT_FLAG_CONST;
 80054ae:	6833      	ldr	r3, [r6, #0]
    conv2d_38_weights_array.data = AI_PTR(weights_map[0] + 46048);
 80054b0:	9d02      	ldr	r5, [sp, #8]
    conv2d_38_weights_array.format |= AI_FMT_FLAG_CONST;
 80054b2:	f043 4980 	orr.w	r9, r3, #1073741824	; 0x40000000
    conv2d_40_bias_array.data = AI_PTR(weights_map[0] + 53056);
 80054b6:	9001      	str	r0, [sp, #4]
    conv2d_38_weights_array.data = AI_PTR(weights_map[0] + 46048);
 80054b8:	60b5      	str	r5, [r6, #8]
    conv2d_40_bias_array.format |= AI_FMT_FLAG_CONST;
 80054ba:	4857      	ldr	r0, [pc, #348]	; (8005618 <network_configure_weights+0x790>)
    conv2d_38_weights_array.format |= AI_FMT_FLAG_CONST;
 80054bc:	f8c6 9000 	str.w	r9, [r6]
    conv2d_41_bias_array.data_start = AI_PTR(weights_map[0] + 54928);
    conv2d_42_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_42_weights_array.data = AI_PTR(weights_map[0] + 55504);
 80054c0:	f64d 09d0 	movw	r9, #55504	; 0xd8d0
    conv2d_38_weights_array.data = AI_PTR(weights_map[0] + 46048);
 80054c4:	60f5      	str	r5, [r6, #12]
    conv2d_38_bias_array.data = AI_PTR(weights_map[0] + 49504);
 80054c6:	9e03      	ldr	r6, [sp, #12]
    conv2d_42_weights_array.data = AI_PTR(weights_map[0] + 55504);
 80054c8:	44d9      	add	r9, fp
    conv2d_40_weights_array.format |= AI_FMT_FLAG_CONST;
 80054ca:	f8dc 5000 	ldr.w	r5, [ip]
    conv2d_41_bias_array.format |= AI_FMT_FLAG_CONST;
 80054ce:	4b53      	ldr	r3, [pc, #332]	; (800561c <network_configure_weights+0x794>)
    conv2d_38_bias_array.data = AI_PTR(weights_map[0] + 49504);
 80054d0:	60be      	str	r6, [r7, #8]
    conv2d_40_weights_array.format |= AI_FMT_FLAG_CONST;
 80054d2:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    conv2d_38_bias_array.data = AI_PTR(weights_map[0] + 49504);
 80054d6:	60fe      	str	r6, [r7, #12]
    conv2d_38_bias_array.format |= AI_FMT_FLAG_CONST;
 80054d8:	603c      	str	r4, [r7, #0]
    conv2d_41_weights_array.format |= AI_FMT_FLAG_CONST;
 80054da:	680e      	ldr	r6, [r1, #0]
    conv2d_40_bias_array.format |= AI_FMT_FLAG_CONST;
 80054dc:	6804      	ldr	r4, [r0, #0]
    conv2d_41_weights_array.format |= AI_FMT_FLAG_CONST;
 80054de:	f046 4780 	orr.w	r7, r6, #1073741824	; 0x40000000
    conv2d_40_weights_array.format |= AI_FMT_FLAG_CONST;
 80054e2:	f8cc 5000 	str.w	r5, [ip]
    conv2d_41_bias_array.format |= AI_FMT_FLAG_CONST;
 80054e6:	681e      	ldr	r6, [r3, #0]
    conv2d_40_bias_array.format |= AI_FMT_FLAG_CONST;
 80054e8:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    conv2d_40_bias_array.data = AI_PTR(weights_map[0] + 53056);
 80054ec:	9d01      	ldr	r5, [sp, #4]
    conv2d_40_bias_array.format |= AI_FMT_FLAG_CONST;
 80054ee:	6004      	str	r4, [r0, #0]
    conv2d_40_bias_array.data = AI_PTR(weights_map[0] + 53056);
 80054f0:	6085      	str	r5, [r0, #8]
    conv2d_41_bias_array.format |= AI_FMT_FLAG_CONST;
 80054f2:	f046 4580 	orr.w	r5, r6, #1073741824	; 0x40000000
    conv2d_42_weights_array.format |= AI_FMT_FLAG_CONST;
 80054f6:	4c4a      	ldr	r4, [pc, #296]	; (8005620 <network_configure_weights+0x798>)
    conv2d_40_bias_array.data = AI_PTR(weights_map[0] + 53056);
 80054f8:	9e01      	ldr	r6, [sp, #4]
    conv2d_40_weights_array.data = AI_PTR(weights_map[0] + 49600);
 80054fa:	f8cc 8008 	str.w	r8, [ip, #8]
 80054fe:	f8cc 800c 	str.w	r8, [ip, #12]
    conv2d_42_weights_array.data_start = AI_PTR(weights_map[0] + 55504);
    conv2d_42_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_42_bias_array.data = AI_PTR(weights_map[0] + 60112);
 8005502:	f64e 2cd0 	movw	ip, #60112	; 0xead0
    conv2d_40_bias_array.data = AI_PTR(weights_map[0] + 53056);
 8005506:	60c6      	str	r6, [r0, #12]
    conv2d_42_bias_array.data_start = AI_PTR(weights_map[0] + 60112);
    conv2d_43_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_43_weights_array.data = AI_PTR(weights_map[0] + 60240);
 8005508:	f64e 3850 	movw	r8, #60240	; 0xeb50
    conv2d_41_weights_array.data = AI_PTR(weights_map[0] + 53632);
 800550c:	f8c1 e008 	str.w	lr, [r1, #8]
    conv2d_42_bias_array.data = AI_PTR(weights_map[0] + 60112);
 8005510:	44dc      	add	ip, fp
    conv2d_41_weights_array.format |= AI_FMT_FLAG_CONST;
 8005512:	600f      	str	r7, [r1, #0]
    conv2d_43_weights_array.data = AI_PTR(weights_map[0] + 60240);
 8005514:	44d8      	add	r8, fp
    conv2d_42_bias_array.format |= AI_FMT_FLAG_CONST;
 8005516:	4f43      	ldr	r7, [pc, #268]	; (8005624 <network_configure_weights+0x79c>)
    conv2d_55_bias_array.data_start = AI_PTR(weights_map[0] + 130800);
    conv2d_56_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_56_weights_array.data = AI_PTR(weights_map[0] + 132144);
    conv2d_56_weights_array.data_start = AI_PTR(weights_map[0] + 132144);
    conv2d_56_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_56_bias_array.data = AI_PTR(weights_map[0] + 135168);
 8005518:	f50b 3004 	add.w	r0, fp, #135168	; 0x21000
    conv2d_43_bias_array.format |= AI_FMT_FLAG_CONST;
 800551c:	4e42      	ldr	r6, [pc, #264]	; (8005628 <network_configure_weights+0x7a0>)
    conv2d_41_weights_array.data = AI_PTR(weights_map[0] + 53632);
 800551e:	f8c1 e00c 	str.w	lr, [r1, #12]
    conv2d_43_weights_array.format |= AI_FMT_FLAG_CONST;
 8005522:	f8df e148 	ldr.w	lr, [pc, #328]	; 800566c <network_configure_weights+0x7e4>
    conv2d_41_bias_array.format |= AI_FMT_FLAG_CONST;
 8005526:	601d      	str	r5, [r3, #0]
    conv2d_42_weights_array.data = AI_PTR(weights_map[0] + 55504);
 8005528:	f8c4 9008 	str.w	r9, [r4, #8]
    conv2d_44_weights_array.format |= AI_FMT_FLAG_CONST;
 800552c:	4d3f      	ldr	r5, [pc, #252]	; (800562c <network_configure_weights+0x7a4>)
    conv2d_42_weights_array.data = AI_PTR(weights_map[0] + 55504);
 800552e:	f8c4 900c 	str.w	r9, [r4, #12]
    conv2d_42_bias_array.data = AI_PTR(weights_map[0] + 60112);
 8005532:	f8c7 c008 	str.w	ip, [r7, #8]
 8005536:	f8c7 c00c 	str.w	ip, [r7, #12]
    conv2d_43_bias_array.data = AI_PTR(weights_map[0] + 66384);
 800553a:	f8df c134 	ldr.w	ip, [pc, #308]	; 8005670 <network_configure_weights+0x7e8>
    conv2d_56_bias_array.data = AI_PTR(weights_map[0] + 135168);
 800553e:	9001      	str	r0, [sp, #4]
    conv2d_43_bias_array.data = AI_PTR(weights_map[0] + 66384);
 8005540:	44dc      	add	ip, fp
    conv2d_45_bias_array.format |= AI_FMT_FLAG_CONST;
 8005542:	483b      	ldr	r0, [pc, #236]	; (8005630 <network_configure_weights+0x7a8>)
    conv2d_43_weights_array.data = AI_PTR(weights_map[0] + 60240);
 8005544:	f8ce 8008 	str.w	r8, [lr, #8]
 8005548:	f8ce 800c 	str.w	r8, [lr, #12]
    conv2d_43_bias_array.data = AI_PTR(weights_map[0] + 66384);
 800554c:	f8c6 c008 	str.w	ip, [r6, #8]
 8005550:	f8c6 c00c 	str.w	ip, [r6, #12]
    conv2d_45_weights_array.data = AI_PTR(weights_map[0] + 69648);
 8005554:	f8df c11c 	ldr.w	ip, [pc, #284]	; 8005674 <network_configure_weights+0x7ec>
    conv2d_45_weights_array.format |= AI_FMT_FLAG_CONST;
 8005558:	4936      	ldr	r1, [pc, #216]	; (8005634 <network_configure_weights+0x7ac>)
    conv2d_45_weights_array.data = AI_PTR(weights_map[0] + 69648);
 800555a:	44dc      	add	ip, fp
    conv2d_41_bias_array.data = AI_PTR(weights_map[0] + 54928);
 800555c:	e9c3 2202 	strd	r2, r2, [r3, #8]
    conv2d_42_weights_array.format |= AI_FMT_FLAG_CONST;
 8005560:	6822      	ldr	r2, [r4, #0]
    conv2d_44_bias_array.format |= AI_FMT_FLAG_CONST;
 8005562:	4b35      	ldr	r3, [pc, #212]	; (8005638 <network_configure_weights+0x7b0>)
    conv2d_42_weights_array.format |= AI_FMT_FLAG_CONST;
 8005564:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005568:	6022      	str	r2, [r4, #0]
    conv2d_42_bias_array.format |= AI_FMT_FLAG_CONST;
 800556a:	683a      	ldr	r2, [r7, #0]
    conv2d_43_weights_array.format |= AI_FMT_FLAG_CONST;
 800556c:	f8de 4000 	ldr.w	r4, [lr]
    conv2d_42_bias_array.format |= AI_FMT_FLAG_CONST;
 8005570:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    conv2d_43_weights_array.format |= AI_FMT_FLAG_CONST;
 8005574:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    conv2d_42_bias_array.format |= AI_FMT_FLAG_CONST;
 8005578:	603a      	str	r2, [r7, #0]
    conv2d_43_bias_array.format |= AI_FMT_FLAG_CONST;
 800557a:	6832      	ldr	r2, [r6, #0]
    conv2d_44_weights_array.data = AI_PTR(weights_map[0] + 67152);
 800557c:	4f2f      	ldr	r7, [pc, #188]	; (800563c <network_configure_weights+0x7b4>)
    conv2d_43_bias_array.format |= AI_FMT_FLAG_CONST;
 800557e:	f042 4980 	orr.w	r9, r2, #1073741824	; 0x40000000
    conv2d_44_weights_array.format |= AI_FMT_FLAG_CONST;
 8005582:	682a      	ldr	r2, [r5, #0]
    conv2d_44_weights_array.data = AI_PTR(weights_map[0] + 67152);
 8005584:	445f      	add	r7, fp
    conv2d_43_weights_array.format |= AI_FMT_FLAG_CONST;
 8005586:	f8ce 4000 	str.w	r4, [lr]
    conv2d_44_weights_array.format |= AI_FMT_FLAG_CONST;
 800558a:	f042 4e80 	orr.w	lr, r2, #1073741824	; 0x40000000
    conv2d_44_bias_array.format |= AI_FMT_FLAG_CONST;
 800558e:	681a      	ldr	r2, [r3, #0]
    conv2d_44_weights_array.data = AI_PTR(weights_map[0] + 67152);
 8005590:	60af      	str	r7, [r5, #8]
    conv2d_44_bias_array.format |= AI_FMT_FLAG_CONST;
 8005592:	f042 4880 	orr.w	r8, r2, #1073741824	; 0x40000000
    conv2d_44_weights_array.data = AI_PTR(weights_map[0] + 67152);
 8005596:	60ef      	str	r7, [r5, #12]
    conv2d_44_weights_array.format |= AI_FMT_FLAG_CONST;
 8005598:	f8c5 e000 	str.w	lr, [r5]
    conv2d_44_bias_array.data = AI_PTR(weights_map[0] + 68880);
 800559c:	4c28      	ldr	r4, [pc, #160]	; (8005640 <network_configure_weights+0x7b8>)
    conv2d_45_bias_array.format |= AI_FMT_FLAG_CONST;
 800559e:	6805      	ldr	r5, [r0, #0]
    conv2d_45_bias_array.data = AI_PTR(weights_map[0] + 75792);
 80055a0:	4a28      	ldr	r2, [pc, #160]	; (8005644 <network_configure_weights+0x7bc>)
    conv2d_44_bias_array.data = AI_PTR(weights_map[0] + 68880);
 80055a2:	445c      	add	r4, fp
    conv2d_47_weights_array.format |= AI_FMT_FLAG_CONST;
 80055a4:	4f28      	ldr	r7, [pc, #160]	; (8005648 <network_configure_weights+0x7c0>)
    conv2d_45_bias_array.format |= AI_FMT_FLAG_CONST;
 80055a6:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    conv2d_45_bias_array.data = AI_PTR(weights_map[0] + 75792);
 80055aa:	445a      	add	r2, fp
    conv2d_43_bias_array.format |= AI_FMT_FLAG_CONST;
 80055ac:	f8c6 9000 	str.w	r9, [r6]
    conv2d_44_bias_array.data = AI_PTR(weights_map[0] + 68880);
 80055b0:	609c      	str	r4, [r3, #8]
    conv2d_45_weights_array.format |= AI_FMT_FLAG_CONST;
 80055b2:	680e      	ldr	r6, [r1, #0]
    conv2d_44_bias_array.data = AI_PTR(weights_map[0] + 68880);
 80055b4:	60dc      	str	r4, [r3, #12]
    conv2d_44_bias_array.format |= AI_FMT_FLAG_CONST;
 80055b6:	f8c3 8000 	str.w	r8, [r3]
    conv2d_45_weights_array.format |= AI_FMT_FLAG_CONST;
 80055ba:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
    conv2d_47_bias_array.format |= AI_FMT_FLAG_CONST;
 80055be:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 8005678 <network_configure_weights+0x7f0>
    conv2d_48_weights_array.format |= AI_FMT_FLAG_CONST;
 80055c2:	4c22      	ldr	r4, [pc, #136]	; (800564c <network_configure_weights+0x7c4>)
    conv2d_48_bias_array.format |= AI_FMT_FLAG_CONST;
 80055c4:	4b22      	ldr	r3, [pc, #136]	; (8005650 <network_configure_weights+0x7c8>)
    conv2d_51_bias_array.format |= AI_FMT_FLAG_CONST;
 80055c6:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 800567c <network_configure_weights+0x7f4>
    conv2d_45_weights_array.data = AI_PTR(weights_map[0] + 69648);
 80055ca:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    conv2d_45_bias_array.data = AI_PTR(weights_map[0] + 75792);
 80055ce:	e9c0 2202 	strd	r2, r2, [r0, #8]
 80055d2:	e055      	b.n	8005680 <network_configure_weights+0x7f8>
 80055d4:	20004468 	.word	0x20004468
 80055d8:	20004568 	.word	0x20004568
 80055dc:	20004598 	.word	0x20004598
 80055e0:	200047c8 	.word	0x200047c8
 80055e4:	200046c8 	.word	0x200046c8
 80055e8:	200049f8 	.word	0x200049f8
 80055ec:	20004928 	.word	0x20004928
 80055f0:	20004b28 	.word	0x20004b28
 80055f4:	20004a28 	.word	0x20004a28
 80055f8:	20004c58 	.word	0x20004c58
 80055fc:	20004b58 	.word	0x20004b58
 8005600:	20004d58 	.word	0x20004d58
 8005604:	20004c88 	.word	0x20004c88
 8005608:	20004eb8 	.word	0x20004eb8
 800560c:	20004fe8 	.word	0x20004fe8
 8005610:	200050b8 	.word	0x200050b8
 8005614:	20005418 	.word	0x20005418
 8005618:	200051e8 	.word	0x200051e8
 800561c:	20005318 	.word	0x20005318
 8005620:	20005518 	.word	0x20005518
 8005624:	20005448 	.word	0x20005448
 8005628:	20005548 	.word	0x20005548
 800562c:	20005778 	.word	0x20005778
 8005630:	200057a8 	.word	0x200057a8
 8005634:	20005878 	.word	0x20005878
 8005638:	20005678 	.word	0x20005678
 800563c:	00010650 	.word	0x00010650
 8005640:	00010d10 	.word	0x00010d10
 8005644:	00012810 	.word	0x00012810
 8005648:	200059a8 	.word	0x200059a8
 800564c:	20005ad8 	.word	0x20005ad8
 8005650:	200059d8 	.word	0x200059d8
 8005654:	20004498 	.word	0x20004498
 8005658:	20004698 	.word	0x20004698
 800565c:	20004e88 	.word	0x20004e88
 8005660:	20004d88 	.word	0x20004d88
 8005664:	20004fb8 	.word	0x20004fb8
 8005668:	200052e8 	.word	0x200052e8
 800566c:	20005648 	.word	0x20005648
 8005670:	00010350 	.word	0x00010350
 8005674:	00011010 	.word	0x00011010
 8005678:	200058a8 	.word	0x200058a8
 800567c:	20005d38 	.word	0x20005d38
    conv2d_45_bias_array.format |= AI_FMT_FLAG_CONST;
 8005680:	6005      	str	r5, [r0, #0]
    conv2d_47_weights_array.format |= AI_FMT_FLAG_CONST;
 8005682:	6838      	ldr	r0, [r7, #0]
    conv2d_47_weights_array.data = AI_PTR(weights_map[0] + 75920);
 8005684:	4dc3      	ldr	r5, [pc, #780]	; (8005994 <network_configure_weights+0xb0c>)
    conv2d_47_weights_array.format |= AI_FMT_FLAG_CONST;
 8005686:	f040 4880 	orr.w	r8, r0, #1073741824	; 0x40000000
    conv2d_47_bias_array.format |= AI_FMT_FLAG_CONST;
 800568a:	f8de 0000 	ldr.w	r0, [lr]
    conv2d_47_weights_array.data = AI_PTR(weights_map[0] + 75920);
 800568e:	445d      	add	r5, fp
    conv2d_45_weights_array.format |= AI_FMT_FLAG_CONST;
 8005690:	600e      	str	r6, [r1, #0]
    conv2d_47_weights_array.format |= AI_FMT_FLAG_CONST;
 8005692:	f8c7 8000 	str.w	r8, [r7]
    conv2d_47_bias_array.format |= AI_FMT_FLAG_CONST;
 8005696:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_47_weights_array.data = AI_PTR(weights_map[0] + 75920);
 800569a:	60bd      	str	r5, [r7, #8]
 800569c:	60fd      	str	r5, [r7, #12]
    conv2d_48_weights_array.format |= AI_FMT_FLAG_CONST;
 800569e:	6825      	ldr	r5, [r4, #0]
    conv2d_48_weights_array.data = AI_PTR(weights_map[0] + 82832);
 80056a0:	4fbd      	ldr	r7, [pc, #756]	; (8005998 <network_configure_weights+0xb10>)
    conv2d_49_weights_array.format |= AI_FMT_FLAG_CONST;
 80056a2:	4ebe      	ldr	r6, [pc, #760]	; (800599c <network_configure_weights+0xb14>)
    conv2d_48_weights_array.format |= AI_FMT_FLAG_CONST;
 80056a4:	f045 4a80 	orr.w	sl, r5, #1073741824	; 0x40000000
    conv2d_48_weights_array.data = AI_PTR(weights_map[0] + 82832);
 80056a8:	445f      	add	r7, fp
    conv2d_47_bias_array.data = AI_PTR(weights_map[0] + 82064);
 80056aa:	f8df c398 	ldr.w	ip, [pc, #920]	; 8005a44 <network_configure_weights+0xbbc>
    conv2d_49_bias_array.format |= AI_FMT_FLAG_CONST;
 80056ae:	49bc      	ldr	r1, [pc, #752]	; (80059a0 <network_configure_weights+0xb18>)
    conv2d_47_bias_array.data = AI_PTR(weights_map[0] + 82064);
 80056b0:	44dc      	add	ip, fp
    conv2d_47_bias_array.format |= AI_FMT_FLAG_CONST;
 80056b2:	f8ce 0000 	str.w	r0, [lr]
    conv2d_48_weights_array.data = AI_PTR(weights_map[0] + 82832);
 80056b6:	60a7      	str	r7, [r4, #8]
    conv2d_48_bias_array.format |= AI_FMT_FLAG_CONST;
 80056b8:	6818      	ldr	r0, [r3, #0]
    conv2d_48_weights_array.data = AI_PTR(weights_map[0] + 82832);
 80056ba:	60e7      	str	r7, [r4, #12]
    conv2d_48_weights_array.format |= AI_FMT_FLAG_CONST;
 80056bc:	f8c4 a000 	str.w	sl, [r4]
    conv2d_48_bias_array.format |= AI_FMT_FLAG_CONST;
 80056c0:	f040 4880 	orr.w	r8, r0, #1073741824	; 0x40000000
    conv2d_49_weights_array.format |= AI_FMT_FLAG_CONST;
 80056c4:	6834      	ldr	r4, [r6, #0]
    conv2d_49_bias_array.format |= AI_FMT_FLAG_CONST;
 80056c6:	680f      	ldr	r7, [r1, #0]
    conv2d_47_bias_array.data = AI_PTR(weights_map[0] + 82064);
 80056c8:	f8ce c008 	str.w	ip, [lr, #8]
 80056cc:	f8ce c00c 	str.w	ip, [lr, #12]
    conv2d_49_weights_array.format |= AI_FMT_FLAG_CONST;
 80056d0:	f044 4e80 	orr.w	lr, r4, #1073741824	; 0x40000000
    conv2d_48_bias_array.data = AI_PTR(weights_map[0] + 84560);
 80056d4:	4db3      	ldr	r5, [pc, #716]	; (80059a4 <network_configure_weights+0xb1c>)
    conv2d_49_bias_array.format |= AI_FMT_FLAG_CONST;
 80056d6:	f047 4780 	orr.w	r7, r7, #1073741824	; 0x40000000
    conv2d_49_weights_array.data = AI_PTR(weights_map[0] + 85328);
 80056da:	f8df c36c 	ldr.w	ip, [pc, #876]	; 8005a48 <network_configure_weights+0xbc0>
    conv2d_49_bias_array.data = AI_PTR(weights_map[0] + 91472);
 80056de:	48b2      	ldr	r0, [pc, #712]	; (80059a8 <network_configure_weights+0xb20>)
    conv2d_48_bias_array.data = AI_PTR(weights_map[0] + 84560);
 80056e0:	445d      	add	r5, fp
    conv2d_51_weights_array.data = AI_PTR(weights_map[0] + 91600);
 80056e2:	4cb2      	ldr	r4, [pc, #712]	; (80059ac <network_configure_weights+0xb24>)
    conv2d_49_weights_array.data = AI_PTR(weights_map[0] + 85328);
 80056e4:	44dc      	add	ip, fp
    conv2d_51_weights_array.format |= AI_FMT_FLAG_CONST;
 80056e6:	4ab2      	ldr	r2, [pc, #712]	; (80059b0 <network_configure_weights+0xb28>)
    conv2d_49_bias_array.data = AI_PTR(weights_map[0] + 91472);
 80056e8:	4458      	add	r0, fp
    conv2d_51_weights_array.data = AI_PTR(weights_map[0] + 91600);
 80056ea:	445c      	add	r4, fp
    conv2d_49_weights_array.format |= AI_FMT_FLAG_CONST;
 80056ec:	f8c6 e000 	str.w	lr, [r6]
    conv2d_53_weights_array.format |= AI_FMT_FLAG_CONST;
 80056f0:	f8df e358 	ldr.w	lr, [pc, #856]	; 8005a4c <network_configure_weights+0xbc4>
    conv2d_48_bias_array.data = AI_PTR(weights_map[0] + 84560);
 80056f4:	609d      	str	r5, [r3, #8]
 80056f6:	60dd      	str	r5, [r3, #12]
    conv2d_48_bias_array.format |= AI_FMT_FLAG_CONST;
 80056f8:	f8c3 8000 	str.w	r8, [r3]
    conv2d_51_weights_array.format |= AI_FMT_FLAG_CONST;
 80056fc:	6815      	ldr	r5, [r2, #0]
    conv2d_49_weights_array.data = AI_PTR(weights_map[0] + 85328);
 80056fe:	f8c6 c008 	str.w	ip, [r6, #8]
 8005702:	f8c6 c00c 	str.w	ip, [r6, #12]
    conv2d_51_weights_array.format |= AI_FMT_FLAG_CONST;
 8005706:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    conv2d_51_bias_array.format |= AI_FMT_FLAG_CONST;
 800570a:	f8d9 6000 	ldr.w	r6, [r9]
    conv2d_49_bias_array.data = AI_PTR(weights_map[0] + 91472);
 800570e:	6088      	str	r0, [r1, #8]
 8005710:	60c8      	str	r0, [r1, #12]
    conv2d_51_bias_array.format |= AI_FMT_FLAG_CONST;
 8005712:	f046 4c80 	orr.w	ip, r6, #1073741824	; 0x40000000
    conv2d_49_bias_array.format |= AI_FMT_FLAG_CONST;
 8005716:	600f      	str	r7, [r1, #0]
    conv2d_51_bias_array.data = AI_PTR(weights_map[0] + 97744);
 8005718:	4ba6      	ldr	r3, [pc, #664]	; (80059b4 <network_configure_weights+0xb2c>)
    conv2d_53_bias_array.format |= AI_FMT_FLAG_CONST;
 800571a:	4fa7      	ldr	r7, [pc, #668]	; (80059b8 <network_configure_weights+0xb30>)
    conv2d_51_bias_array.data = AI_PTR(weights_map[0] + 97744);
 800571c:	445b      	add	r3, fp
    conv2d_53_weights_array.data = AI_PTR(weights_map[0] + 98512);
 800571e:	f8df 8330 	ldr.w	r8, [pc, #816]	; 8005a50 <network_configure_weights+0xbc8>
    conv2d_54_weights_array.format |= AI_FMT_FLAG_CONST;
 8005722:	48a6      	ldr	r0, [pc, #664]	; (80059bc <network_configure_weights+0xb34>)
    conv2d_54_bias_array.format |= AI_FMT_FLAG_CONST;
 8005724:	4ea6      	ldr	r6, [pc, #664]	; (80059c0 <network_configure_weights+0xb38>)
    conv2d_53_weights_array.data = AI_PTR(weights_map[0] + 98512);
 8005726:	44d8      	add	r8, fp
    conv2d_51_weights_array.data = AI_PTR(weights_map[0] + 91600);
 8005728:	e9c2 4402 	strd	r4, r4, [r2, #8]
    conv2d_53_weights_array.format |= AI_FMT_FLAG_CONST;
 800572c:	f8de 1000 	ldr.w	r1, [lr]
    conv2d_51_weights_array.format |= AI_FMT_FLAG_CONST;
 8005730:	6015      	str	r5, [r2, #0]
    conv2d_53_weights_array.format |= AI_FMT_FLAG_CONST;
 8005732:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    conv2d_56_bias_array.data = AI_PTR(weights_map[0] + 135168);
 8005736:	9a01      	ldr	r2, [sp, #4]
    conv2d_51_bias_array.format |= AI_FMT_FLAG_CONST;
 8005738:	f8c9 c000 	str.w	ip, [r9]
    conv2d_53_weights_array.format |= AI_FMT_FLAG_CONST;
 800573c:	f8ce 1000 	str.w	r1, [lr]
    conv2d_53_bias_array.format |= AI_FMT_FLAG_CONST;
 8005740:	6839      	ldr	r1, [r7, #0]
    conv2d_53_bias_array.data = AI_PTR(weights_map[0] + 100240);
 8005742:	f8df c310 	ldr.w	ip, [pc, #784]	; 8005a54 <network_configure_weights+0xbcc>
    conv2d_53_bias_array.format |= AI_FMT_FLAG_CONST;
 8005746:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    conv2d_55_weights_array.format |= AI_FMT_FLAG_CONST;
 800574a:	4d9e      	ldr	r5, [pc, #632]	; (80059c4 <network_configure_weights+0xb3c>)
    conv2d_53_bias_array.data = AI_PTR(weights_map[0] + 100240);
 800574c:	44dc      	add	ip, fp
    conv2d_53_weights_array.data = AI_PTR(weights_map[0] + 98512);
 800574e:	f8ce 8008 	str.w	r8, [lr, #8]
 8005752:	f8ce 800c 	str.w	r8, [lr, #12]
    conv2d_53_bias_array.format |= AI_FMT_FLAG_CONST;
 8005756:	6039      	str	r1, [r7, #0]
    conv2d_54_weights_array.data = AI_PTR(weights_map[0] + 101008);
 8005758:	f8df 82fc 	ldr.w	r8, [pc, #764]	; 8005a58 <network_configure_weights+0xbd0>
    conv2d_54_bias_array.format |= AI_FMT_FLAG_CONST;
 800575c:	6831      	ldr	r1, [r6, #0]
    conv2d_55_bias_array.format |= AI_FMT_FLAG_CONST;
 800575e:	4c9a      	ldr	r4, [pc, #616]	; (80059c8 <network_configure_weights+0xb40>)
    conv2d_54_weights_array.data = AI_PTR(weights_map[0] + 101008);
 8005760:	44d8      	add	r8, fp
    conv2d_53_bias_array.data = AI_PTR(weights_map[0] + 100240);
 8005762:	f8c7 c008 	str.w	ip, [r7, #8]
    conv2d_54_bias_array.format |= AI_FMT_FLAG_CONST;
 8005766:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    conv2d_53_bias_array.data = AI_PTR(weights_map[0] + 100240);
 800576a:	f8c7 c00c 	str.w	ip, [r7, #12]
    conv2d_54_bias_array.data = AI_PTR(weights_map[0] + 111760);
 800576e:	4f97      	ldr	r7, [pc, #604]	; (80059cc <network_configure_weights+0xb44>)
    conv2d_54_weights_array.data = AI_PTR(weights_map[0] + 101008);
 8005770:	f8c0 8008 	str.w	r8, [r0, #8]
    conv2d_54_bias_array.data = AI_PTR(weights_map[0] + 111760);
 8005774:	445f      	add	r7, fp
    conv2d_54_weights_array.data = AI_PTR(weights_map[0] + 101008);
 8005776:	f8c0 800c 	str.w	r8, [r0, #12]
    conv2d_54_bias_array.format |= AI_FMT_FLAG_CONST;
 800577a:	6031      	str	r1, [r6, #0]
    conv2d_55_weights_array.data = AI_PTR(weights_map[0] + 111984);
 800577c:	f8df e2dc 	ldr.w	lr, [pc, #732]	; 8005a5c <network_configure_weights+0xbd4>
    conv2d_56_weights_array.data = AI_PTR(weights_map[0] + 132144);
 8005780:	4993      	ldr	r1, [pc, #588]	; (80059d0 <network_configure_weights+0xb48>)
    conv2d_55_weights_array.data = AI_PTR(weights_map[0] + 111984);
 8005782:	44de      	add	lr, fp
    conv2d_54_bias_array.data = AI_PTR(weights_map[0] + 111760);
 8005784:	60b7      	str	r7, [r6, #8]
    conv2d_56_weights_array.data = AI_PTR(weights_map[0] + 132144);
 8005786:	4459      	add	r1, fp
    conv2d_54_bias_array.data = AI_PTR(weights_map[0] + 111760);
 8005788:	60f7      	str	r7, [r6, #12]
    conv2d_55_weights_array.data = AI_PTR(weights_map[0] + 111984);
 800578a:	f8c5 e008 	str.w	lr, [r5, #8]
 800578e:	f8c5 e00c 	str.w	lr, [r5, #12]
    conv2d_56_bias_array.data_start = AI_PTR(weights_map[0] + 135168);
    conv2d_57_weights_array.format |= AI_FMT_FLAG_CONST;
 8005792:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 8005a60 <network_configure_weights+0xbd8>
    conv2d_51_bias_array.data = AI_PTR(weights_map[0] + 97744);
 8005796:	e9c9 3302 	strd	r3, r3, [r9, #8]
    conv2d_56_bias_array.format |= AI_FMT_FLAG_CONST;
 800579a:	4b8e      	ldr	r3, [pc, #568]	; (80059d4 <network_configure_weights+0xb4c>)
    conv2d_56_bias_array.data = AI_PTR(weights_map[0] + 135168);
 800579c:	609a      	str	r2, [r3, #8]
    conv2d_54_weights_array.format |= AI_FMT_FLAG_CONST;
 800579e:	6802      	ldr	r2, [r0, #0]
    conv2d_56_bias_array.format |= AI_FMT_FLAG_CONST;
 80057a0:	681f      	ldr	r7, [r3, #0]
    conv2d_54_weights_array.format |= AI_FMT_FLAG_CONST;
 80057a2:	f042 4980 	orr.w	r9, r2, #1073741824	; 0x40000000
    conv2d_55_weights_array.format |= AI_FMT_FLAG_CONST;
 80057a6:	682a      	ldr	r2, [r5, #0]
    conv2d_56_bias_array.format |= AI_FMT_FLAG_CONST;
 80057a8:	f047 4c80 	orr.w	ip, r7, #1073741824	; 0x40000000
    conv2d_57_bias_array.data = AI_PTR(weights_map[0] + 155328);
    conv2d_57_bias_array.data_start = AI_PTR(weights_map[0] + 155328);
    conv2d_59_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_59_weights_array.data = AI_PTR(weights_map[0] + 155552);
    conv2d_59_weights_array.data_start = AI_PTR(weights_map[0] + 155552);
    conv2d_59_bias_array.format |= AI_FMT_FLAG_CONST;
 80057ac:	4f8a      	ldr	r7, [pc, #552]	; (80059d8 <network_configure_weights+0xb50>)
    conv2d_55_weights_array.format |= AI_FMT_FLAG_CONST;
 80057ae:	f042 4a80 	orr.w	sl, r2, #1073741824	; 0x40000000
    conv2d_54_weights_array.format |= AI_FMT_FLAG_CONST;
 80057b2:	f8c0 9000 	str.w	r9, [r0]
    conv2d_55_bias_array.format |= AI_FMT_FLAG_CONST;
 80057b6:	6822      	ldr	r2, [r4, #0]
    conv2d_55_bias_array.data = AI_PTR(weights_map[0] + 130800);
 80057b8:	4888      	ldr	r0, [pc, #544]	; (80059dc <network_configure_weights+0xb54>)
    conv2d_55_bias_array.format |= AI_FMT_FLAG_CONST;
 80057ba:	f042 4980 	orr.w	r9, r2, #1073741824	; 0x40000000
    conv2d_56_weights_array.format |= AI_FMT_FLAG_CONST;
 80057be:	4a88      	ldr	r2, [pc, #544]	; (80059e0 <network_configure_weights+0xb58>)
    conv2d_55_bias_array.data = AI_PTR(weights_map[0] + 130800);
 80057c0:	4458      	add	r0, fp
    conv2d_55_weights_array.format |= AI_FMT_FLAG_CONST;
 80057c2:	f8c5 a000 	str.w	sl, [r5]
    conv2d_56_weights_array.format |= AI_FMT_FLAG_CONST;
 80057c6:	6816      	ldr	r6, [r2, #0]
    conv2d_55_bias_array.format |= AI_FMT_FLAG_CONST;
 80057c8:	f8c4 9000 	str.w	r9, [r4]
    conv2d_59_weights_array.format |= AI_FMT_FLAG_CONST;
 80057cc:	4d85      	ldr	r5, [pc, #532]	; (80059e4 <network_configure_weights+0xb5c>)
    conv2d_56_weights_array.format |= AI_FMT_FLAG_CONST;
 80057ce:	f046 4880 	orr.w	r8, r6, #1073741824	; 0x40000000
    conv2d_59_bias_array.data = AI_PTR(weights_map[0] + 174368);
    conv2d_59_bias_array.data_start = AI_PTR(weights_map[0] + 174368);
    conv2d_60_weights_array.format |= AI_FMT_FLAG_CONST;
 80057d2:	4e85      	ldr	r6, [pc, #532]	; (80059e8 <network_configure_weights+0xb60>)
    conv2d_55_bias_array.data = AI_PTR(weights_map[0] + 130800);
 80057d4:	e9c4 0002 	strd	r0, r0, [r4, #8]
    conv2d_56_weights_array.data = AI_PTR(weights_map[0] + 132144);
 80057d8:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_56_bias_array.data = AI_PTR(weights_map[0] + 135168);
 80057dc:	9901      	ldr	r1, [sp, #4]
    conv2d_57_bias_array.format |= AI_FMT_FLAG_CONST;
 80057de:	4883      	ldr	r0, [pc, #524]	; (80059ec <network_configure_weights+0xb64>)
    conv2d_56_bias_array.data = AI_PTR(weights_map[0] + 135168);
 80057e0:	60d9      	str	r1, [r3, #12]
    conv2d_56_bias_array.format |= AI_FMT_FLAG_CONST;
 80057e2:	f8c3 c000 	str.w	ip, [r3]
    conv2d_57_weights_array.format |= AI_FMT_FLAG_CONST;
 80057e6:	f8de 3000 	ldr.w	r3, [lr]
    conv2d_56_weights_array.format |= AI_FMT_FLAG_CONST;
 80057ea:	f8c2 8000 	str.w	r8, [r2]
    conv2d_57_weights_array.format |= AI_FMT_FLAG_CONST;
 80057ee:	f043 4980 	orr.w	r9, r3, #1073741824	; 0x40000000
    conv2d_57_bias_array.format |= AI_FMT_FLAG_CONST;
 80057f2:	6803      	ldr	r3, [r0, #0]
    conv2d_57_weights_array.data = AI_PTR(weights_map[0] + 136512);
 80057f4:	f8df 826c 	ldr.w	r8, [pc, #620]	; 8005a64 <network_configure_weights+0xbdc>
    conv2d_57_bias_array.format |= AI_FMT_FLAG_CONST;
 80057f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    conv2d_60_weights_array.data = AI_PTR(weights_map[0] + 175712);
    conv2d_60_weights_array.data_start = AI_PTR(weights_map[0] + 175712);
    conv2d_60_bias_array.format |= AI_FMT_FLAG_CONST;
 80057fc:	4c7c      	ldr	r4, [pc, #496]	; (80059f0 <network_configure_weights+0xb68>)
    conv2d_57_weights_array.data = AI_PTR(weights_map[0] + 136512);
 80057fe:	44d8      	add	r8, fp
    conv2d_57_weights_array.format |= AI_FMT_FLAG_CONST;
 8005800:	f8ce 9000 	str.w	r9, [lr]
    conv2d_57_bias_array.format |= AI_FMT_FLAG_CONST;
 8005804:	9301      	str	r3, [sp, #4]
    conv2d_59_weights_array.format |= AI_FMT_FLAG_CONST;
 8005806:	682b      	ldr	r3, [r5, #0]
    conv2d_59_weights_array.data = AI_PTR(weights_map[0] + 155552);
 8005808:	f8df 925c 	ldr.w	r9, [pc, #604]	; 8005a68 <network_configure_weights+0xbe0>
    conv2d_59_weights_array.format |= AI_FMT_FLAG_CONST;
 800580c:	f043 4a80 	orr.w	sl, r3, #1073741824	; 0x40000000
    conv2d_57_bias_array.format |= AI_FMT_FLAG_CONST;
 8005810:	9b01      	ldr	r3, [sp, #4]
    conv2d_59_weights_array.data = AI_PTR(weights_map[0] + 155552);
 8005812:	44d9      	add	r9, fp
    conv2d_57_weights_array.data = AI_PTR(weights_map[0] + 136512);
 8005814:	f8ce 8008 	str.w	r8, [lr, #8]
    conv2d_57_bias_array.format |= AI_FMT_FLAG_CONST;
 8005818:	6003      	str	r3, [r0, #0]
    conv2d_59_bias_array.format |= AI_FMT_FLAG_CONST;
 800581a:	683b      	ldr	r3, [r7, #0]
    conv2d_57_weights_array.data = AI_PTR(weights_map[0] + 136512);
 800581c:	f8ce 800c 	str.w	r8, [lr, #12]
    conv2d_59_bias_array.format |= AI_FMT_FLAG_CONST;
 8005820:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    conv2d_57_bias_array.data = AI_PTR(weights_map[0] + 155328);
 8005824:	f8df c244 	ldr.w	ip, [pc, #580]	; 8005a6c <network_configure_weights+0xbe4>
    conv2d_59_bias_array.data = AI_PTR(weights_map[0] + 174368);
 8005828:	f8df 8244 	ldr.w	r8, [pc, #580]	; 8005a70 <network_configure_weights+0xbe8>
    conv2d_59_bias_array.format |= AI_FMT_FLAG_CONST;
 800582c:	9301      	str	r3, [sp, #4]
    conv2d_57_bias_array.data = AI_PTR(weights_map[0] + 155328);
 800582e:	44dc      	add	ip, fp
    conv2d_60_bias_array.format |= AI_FMT_FLAG_CONST;
 8005830:	6823      	ldr	r3, [r4, #0]
    conv2d_59_bias_array.data = AI_PTR(weights_map[0] + 174368);
 8005832:	44d8      	add	r8, fp
    conv2d_60_bias_array.data = AI_PTR(weights_map[0] + 178736);
    conv2d_60_bias_array.data_start = AI_PTR(weights_map[0] + 178736);
    conv2d_61_weights_array.format |= AI_FMT_FLAG_CONST;
 8005834:	4a6f      	ldr	r2, [pc, #444]	; (80059f4 <network_configure_weights+0xb6c>)
    conv2d_59_weights_array.data = AI_PTR(weights_map[0] + 155552);
 8005836:	f8c5 9008 	str.w	r9, [r5, #8]
 800583a:	f8c5 900c 	str.w	r9, [r5, #12]
    conv2d_60_bias_array.format |= AI_FMT_FLAG_CONST;
 800583e:	f043 4980 	orr.w	r9, r3, #1073741824	; 0x40000000
    conv2d_59_bias_array.format |= AI_FMT_FLAG_CONST;
 8005842:	9b01      	ldr	r3, [sp, #4]
    conv2d_61_weights_array.data = AI_PTR(weights_map[0] + 180080);
    conv2d_61_weights_array.data_start = AI_PTR(weights_map[0] + 180080);
    conv2d_61_bias_array.format |= AI_FMT_FLAG_CONST;
 8005844:	496c      	ldr	r1, [pc, #432]	; (80059f8 <network_configure_weights+0xb70>)
    conv2d_57_bias_array.data = AI_PTR(weights_map[0] + 155328);
 8005846:	f8c0 c008 	str.w	ip, [r0, #8]
 800584a:	f8c0 c00c 	str.w	ip, [r0, #12]
    conv2d_59_bias_array.data = AI_PTR(weights_map[0] + 174368);
 800584e:	f8c7 8008 	str.w	r8, [r7, #8]
    conv2d_60_weights_array.format |= AI_FMT_FLAG_CONST;
 8005852:	6830      	ldr	r0, [r6, #0]
    conv2d_59_bias_array.data = AI_PTR(weights_map[0] + 174368);
 8005854:	f8c7 800c 	str.w	r8, [r7, #12]
    conv2d_59_bias_array.format |= AI_FMT_FLAG_CONST;
 8005858:	603b      	str	r3, [r7, #0]
    conv2d_60_weights_array.format |= AI_FMT_FLAG_CONST;
 800585a:	f040 4e80 	orr.w	lr, r0, #1073741824	; 0x40000000
    conv2d_61_weights_array.format |= AI_FMT_FLAG_CONST;
 800585e:	6817      	ldr	r7, [r2, #0]
    conv2d_60_weights_array.data = AI_PTR(weights_map[0] + 175712);
 8005860:	f8df c210 	ldr.w	ip, [pc, #528]	; 8005a74 <network_configure_weights+0xbec>
    conv2d_61_weights_array.format |= AI_FMT_FLAG_CONST;
 8005864:	f047 4880 	orr.w	r8, r7, #1073741824	; 0x40000000
    conv2d_59_weights_array.format |= AI_FMT_FLAG_CONST;
 8005868:	f8c5 a000 	str.w	sl, [r5]
    conv2d_60_weights_array.data = AI_PTR(weights_map[0] + 175712);
 800586c:	44dc      	add	ip, fp
    conv2d_61_bias_array.format |= AI_FMT_FLAG_CONST;
 800586e:	680f      	ldr	r7, [r1, #0]
    conv2d_60_bias_array.data = AI_PTR(weights_map[0] + 178736);
 8005870:	4d62      	ldr	r5, [pc, #392]	; (80059fc <network_configure_weights+0xb74>)
    conv2d_61_bias_array.data = AI_PTR(weights_map[0] + 198896);
 8005872:	4b63      	ldr	r3, [pc, #396]	; (8005a00 <network_configure_weights+0xb78>)
    conv2d_61_bias_array.format |= AI_FMT_FLAG_CONST;
 8005874:	f047 4780 	orr.w	r7, r7, #1073741824	; 0x40000000
    conv2d_60_bias_array.data = AI_PTR(weights_map[0] + 178736);
 8005878:	445d      	add	r5, fp
    conv2d_60_weights_array.data = AI_PTR(weights_map[0] + 175712);
 800587a:	f8c6 c008 	str.w	ip, [r6, #8]
    conv2d_61_bias_array.data = AI_PTR(weights_map[0] + 198896);
 800587e:	445b      	add	r3, fp
    conv2d_60_weights_array.data = AI_PTR(weights_map[0] + 175712);
 8005880:	f8c6 c00c 	str.w	ip, [r6, #12]
    conv2d_60_weights_array.format |= AI_FMT_FLAG_CONST;
 8005884:	f8c6 e000 	str.w	lr, [r6]
    conv2d_61_bias_array.data_start = AI_PTR(weights_map[0] + 198896);
    conv2d_63_weights_array.format |= AI_FMT_FLAG_CONST;
 8005888:	4e5e      	ldr	r6, [pc, #376]	; (8005a04 <network_configure_weights+0xb7c>)
    conv2d_61_weights_array.data = AI_PTR(weights_map[0] + 180080);
 800588a:	485f      	ldr	r0, [pc, #380]	; (8005a08 <network_configure_weights+0xb80>)
    conv2d_63_weights_array.data = AI_PTR(weights_map[0] + 199120);
    conv2d_63_weights_array.data_start = AI_PTR(weights_map[0] + 199120);
    conv2d_63_bias_array.format |= AI_FMT_FLAG_CONST;
    conv2d_63_bias_array.data = AI_PTR(weights_map[0] + 217936);
    conv2d_63_bias_array.data_start = AI_PTR(weights_map[0] + 217936);
    conv2d_64_weights_array.format |= AI_FMT_FLAG_CONST;
 800588c:	f8df c1e8 	ldr.w	ip, [pc, #488]	; 8005a78 <network_configure_weights+0xbf0>
    conv2d_61_weights_array.data = AI_PTR(weights_map[0] + 180080);
 8005890:	4458      	add	r0, fp
    conv2d_64_bias_array.data = AI_PTR(weights_map[0] + 222304);
    conv2d_64_bias_array.data_start = AI_PTR(weights_map[0] + 222304);
    conv2d_65_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_65_weights_array.data = AI_PTR(weights_map[0] + 223648);
    conv2d_65_weights_array.data_start = AI_PTR(weights_map[0] + 223648);
    conv2d_65_bias_array.format |= AI_FMT_FLAG_CONST;
 8005892:	f8df e1e8 	ldr.w	lr, [pc, #488]	; 8005a7c <network_configure_weights+0xbf4>
    conv2d_60_bias_array.data = AI_PTR(weights_map[0] + 178736);
 8005896:	e9c4 5502 	strd	r5, r5, [r4, #8]
    conv2d_63_bias_array.format |= AI_FMT_FLAG_CONST;
 800589a:	4d5c      	ldr	r5, [pc, #368]	; (8005a0c <network_configure_weights+0xb84>)
    conv2d_61_bias_array.format |= AI_FMT_FLAG_CONST;
 800589c:	600f      	str	r7, [r1, #0]
    conv2d_61_weights_array.format |= AI_FMT_FLAG_CONST;
 800589e:	f8c2 8000 	str.w	r8, [r2]
    conv2d_63_weights_array.data = AI_PTR(weights_map[0] + 199120);
 80058a2:	4f5b      	ldr	r7, [pc, #364]	; (8005a10 <network_configure_weights+0xb88>)
    conv2d_60_bias_array.format |= AI_FMT_FLAG_CONST;
 80058a4:	f8c4 9000 	str.w	r9, [r4]
    conv2d_63_weights_array.data = AI_PTR(weights_map[0] + 199120);
 80058a8:	445f      	add	r7, fp
    conv2d_64_bias_array.format |= AI_FMT_FLAG_CONST;
 80058aa:	4c5a      	ldr	r4, [pc, #360]	; (8005a14 <network_configure_weights+0xb8c>)
    conv2d_63_bias_array.data = AI_PTR(weights_map[0] + 217936);
 80058ac:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8005a80 <network_configure_weights+0xbf8>
    conv2d_63_weights_array.data = AI_PTR(weights_map[0] + 199120);
 80058b0:	60b7      	str	r7, [r6, #8]
    conv2d_63_bias_array.data = AI_PTR(weights_map[0] + 217936);
 80058b2:	44d9      	add	r9, fp
    conv2d_63_weights_array.data = AI_PTR(weights_map[0] + 199120);
 80058b4:	60f7      	str	r7, [r6, #12]
    conv2d_64_bias_array.data = AI_PTR(weights_map[0] + 222304);
 80058b6:	4f58      	ldr	r7, [pc, #352]	; (8005a18 <network_configure_weights+0xb90>)
    conv2d_63_bias_array.data = AI_PTR(weights_map[0] + 217936);
 80058b8:	f8c5 9008 	str.w	r9, [r5, #8]
    conv2d_64_bias_array.data = AI_PTR(weights_map[0] + 222304);
 80058bc:	445f      	add	r7, fp
    conv2d_63_bias_array.data = AI_PTR(weights_map[0] + 217936);
 80058be:	f8c5 900c 	str.w	r9, [r5, #12]
    conv2d_61_bias_array.data = AI_PTR(weights_map[0] + 198896);
 80058c2:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_63_weights_array.format |= AI_FMT_FLAG_CONST;
 80058c6:	6831      	ldr	r1, [r6, #0]
    conv2d_65_bias_array.data = AI_PTR(weights_map[0] + 261280);
    conv2d_65_bias_array.data_start = AI_PTR(weights_map[0] + 261280);
    conv2d_66_weights_array.format |= AI_FMT_FLAG_CONST;
    conv2d_66_weights_array.data = AI_PTR(weights_map[0] + 261728);
    conv2d_66_weights_array.data_start = AI_PTR(weights_map[0] + 261728);
    conv2d_66_bias_array.format |= AI_FMT_FLAG_CONST;
 80058c8:	4b54      	ldr	r3, [pc, #336]	; (8005a1c <network_configure_weights+0xb94>)
    conv2d_63_weights_array.format |= AI_FMT_FLAG_CONST;
 80058ca:	f041 4880 	orr.w	r8, r1, #1073741824	; 0x40000000
    conv2d_63_bias_array.format |= AI_FMT_FLAG_CONST;
 80058ce:	6829      	ldr	r1, [r5, #0]
    conv2d_64_bias_array.data = AI_PTR(weights_map[0] + 222304);
 80058d0:	60a7      	str	r7, [r4, #8]
    conv2d_63_bias_array.format |= AI_FMT_FLAG_CONST;
 80058d2:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    conv2d_63_weights_array.format |= AI_FMT_FLAG_CONST;
 80058d6:	f8c6 8000 	str.w	r8, [r6]
    conv2d_64_weights_array.format |= AI_FMT_FLAG_CONST;
 80058da:	f8dc 6000 	ldr.w	r6, [ip]
    conv2d_63_bias_array.format |= AI_FMT_FLAG_CONST;
 80058de:	6029      	str	r1, [r5, #0]
    conv2d_64_bias_array.format |= AI_FMT_FLAG_CONST;
 80058e0:	6821      	ldr	r1, [r4, #0]
    conv2d_64_weights_array.format |= AI_FMT_FLAG_CONST;
 80058e2:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
    conv2d_64_weights_array.data = AI_PTR(weights_map[0] + 219280);
 80058e6:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8005a84 <network_configure_weights+0xbfc>
    conv2d_64_bias_array.format |= AI_FMT_FLAG_CONST;
 80058ea:	f041 4980 	orr.w	r9, r1, #1073741824	; 0x40000000
    conv2d_64_bias_array.data = AI_PTR(weights_map[0] + 222304);
 80058ee:	60e7      	str	r7, [r4, #12]
    conv2d_64_weights_array.data = AI_PTR(weights_map[0] + 219280);
 80058f0:	44d8      	add	r8, fp
    conv2d_65_weights_array.data = AI_PTR(weights_map[0] + 223648);
 80058f2:	4d4b      	ldr	r5, [pc, #300]	; (8005a20 <network_configure_weights+0xb98>)
    conv2d_64_bias_array.format |= AI_FMT_FLAG_CONST;
 80058f4:	f8c4 9000 	str.w	r9, [r4]
    conv2d_65_weights_array.data = AI_PTR(weights_map[0] + 223648);
 80058f8:	445d      	add	r5, fp
    conv2d_64_weights_array.data = AI_PTR(weights_map[0] + 219280);
 80058fa:	f8cc 8008 	str.w	r8, [ip, #8]
 80058fe:	f8cc 800c 	str.w	r8, [ip, #12]
    conv2d_64_weights_array.format |= AI_FMT_FLAG_CONST;
 8005902:	f8cc 6000 	str.w	r6, [ip]
    conv2d_66_bias_array.data = AI_PTR(weights_map[0] + 405088);
 8005906:	4f47      	ldr	r7, [pc, #284]	; (8005a24 <network_configure_weights+0xb9c>)
    conv2d_65_bias_array.data = AI_PTR(weights_map[0] + 261280);
 8005908:	f8df c17c 	ldr.w	ip, [pc, #380]	; 8005a88 <network_configure_weights+0xc00>
    conv2d_66_bias_array.data = AI_PTR(weights_map[0] + 405088);
 800590c:	445f      	add	r7, fp
    conv2d_65_bias_array.format |= AI_FMT_FLAG_CONST;
 800590e:	f8de 6000 	ldr.w	r6, [lr]
    conv2d_65_bias_array.data = AI_PTR(weights_map[0] + 261280);
 8005912:	44dc      	add	ip, fp
    conv2d_65_bias_array.format |= AI_FMT_FLAG_CONST;
 8005914:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
    conv2d_61_weights_array.data = AI_PTR(weights_map[0] + 180080);
 8005918:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_65_weights_array.format |= AI_FMT_FLAG_CONST;
 800591c:	4842      	ldr	r0, [pc, #264]	; (8005a28 <network_configure_weights+0xba0>)
    conv2d_66_weights_array.format |= AI_FMT_FLAG_CONST;
 800591e:	4a43      	ldr	r2, [pc, #268]	; (8005a2c <network_configure_weights+0xba4>)
    conv2d_65_weights_array.format |= AI_FMT_FLAG_CONST;
 8005920:	6801      	ldr	r1, [r0, #0]
    conv2d_66_weights_array.format |= AI_FMT_FLAG_CONST;
 8005922:	6814      	ldr	r4, [r2, #0]
    conv2d_65_weights_array.format |= AI_FMT_FLAG_CONST;
 8005924:	f041 4a80 	orr.w	sl, r1, #1073741824	; 0x40000000
    conv2d_66_weights_array.data = AI_PTR(weights_map[0] + 261728);
 8005928:	4941      	ldr	r1, [pc, #260]	; (8005a30 <network_configure_weights+0xba8>)
    conv2d_66_weights_array.format |= AI_FMT_FLAG_CONST;
 800592a:	f044 4880 	orr.w	r8, r4, #1073741824	; 0x40000000
    conv2d_66_bias_array.format |= AI_FMT_FLAG_CONST;
 800592e:	681c      	ldr	r4, [r3, #0]
    conv2d_66_weights_array.data = AI_PTR(weights_map[0] + 261728);
 8005930:	4459      	add	r1, fp
    conv2d_65_weights_array.data = AI_PTR(weights_map[0] + 223648);
 8005932:	6085      	str	r5, [r0, #8]
 8005934:	60c5      	str	r5, [r0, #12]
    conv2d_66_bias_array.format |= AI_FMT_FLAG_CONST;
 8005936:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    conv2d_65_weights_array.format |= AI_FMT_FLAG_CONST;
 800593a:	f8c0 a000 	str.w	sl, [r0]
    conv2d_66_bias_array.data_start = AI_PTR(weights_map[0] + 405088);
    dense_68_weights_array.format |= AI_FMT_FLAG_CONST;
    dense_68_weights_array.data = AI_PTR(weights_map[0] + 410208);
    dense_68_weights_array.data_start = AI_PTR(weights_map[0] + 410208);
    dense_68_bias_array.format |= AI_FMT_FLAG_CONST;
 800593e:	483d      	ldr	r0, [pc, #244]	; (8005a34 <network_configure_weights+0xbac>)
    dense_68_weights_array.format |= AI_FMT_FLAG_CONST;
 8005940:	4d3d      	ldr	r5, [pc, #244]	; (8005a38 <network_configure_weights+0xbb0>)
    conv2d_65_bias_array.data = AI_PTR(weights_map[0] + 261280);
 8005942:	e9ce cc02 	strd	ip, ip, [lr, #8]
    conv2d_66_weights_array.data = AI_PTR(weights_map[0] + 261728);
 8005946:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_66_bias_array.format |= AI_FMT_FLAG_CONST;
 800594a:	601c      	str	r4, [r3, #0]
    dense_68_bias_array.format |= AI_FMT_FLAG_CONST;
 800594c:	6801      	ldr	r1, [r0, #0]
    dense_68_weights_array.format |= AI_FMT_FLAG_CONST;
 800594e:	682c      	ldr	r4, [r5, #0]
    dense_68_bias_array.format |= AI_FMT_FLAG_CONST;
 8005950:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    conv2d_66_weights_array.format |= AI_FMT_FLAG_CONST;
 8005954:	f8c2 8000 	str.w	r8, [r2]
    dense_68_weights_array.data = AI_PTR(weights_map[0] + 410208);
 8005958:	4a38      	ldr	r2, [pc, #224]	; (8005a3c <network_configure_weights+0xbb4>)
    dense_68_weights_array.format |= AI_FMT_FLAG_CONST;
 800595a:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    dense_68_bias_array.format |= AI_FMT_FLAG_CONST;
 800595e:	6001      	str	r1, [r0, #0]
    dense_68_weights_array.data = AI_PTR(weights_map[0] + 410208);
 8005960:	445a      	add	r2, fp
    conv2d_65_bias_array.format |= AI_FMT_FLAG_CONST;
 8005962:	f8ce 6000 	str.w	r6, [lr]
    dense_68_weights_array.format |= AI_FMT_FLAG_CONST;
 8005966:	602c      	str	r4, [r5, #0]
    dense_68_weights_array.data = AI_PTR(weights_map[0] + 410208);
 8005968:	60aa      	str	r2, [r5, #8]
 800596a:	60ea      	str	r2, [r5, #12]
    conv2d_66_bias_array.data = AI_PTR(weights_map[0] + 405088);
 800596c:	e9c3 7702 	strd	r7, r7, [r3, #8]
    dense_68_bias_array.data = AI_PTR(weights_map[0] + 412768);
 8005970:	4b33      	ldr	r3, [pc, #204]	; (8005a40 <network_configure_weights+0xbb8>)
 8005972:	445b      	add	r3, fp
 8005974:	e9c0 3302 	strd	r3, r3, [r0, #8]
    dense_68_bias_array.data_start = AI_PTR(weights_map[0] + 412768);
    return true;
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
  return false;
}
 8005978:	9800      	ldr	r0, [sp, #0]
 800597a:	b007      	add	sp, #28
 800597c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8005980:	4620      	mov	r0, r4
 8005982:	2212      	movs	r2, #18
 8005984:	2130      	movs	r1, #48	; 0x30
 8005986:	f015 ff13 	bl	801b7b0 <ai_platform_network_set_error>
}
 800598a:	9800      	ldr	r0, [sp, #0]
 800598c:	b007      	add	sp, #28
 800598e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005992:	bf00      	nop
 8005994:	00012890 	.word	0x00012890
 8005998:	00014390 	.word	0x00014390
 800599c:	20005bd8 	.word	0x20005bd8
 80059a0:	20005b08 	.word	0x20005b08
 80059a4:	00014a50 	.word	0x00014a50
 80059a8:	00016550 	.word	0x00016550
 80059ac:	000165d0 	.word	0x000165d0
 80059b0:	20005e38 	.word	0x20005e38
 80059b4:	00017dd0 	.word	0x00017dd0
 80059b8:	20005e68 	.word	0x20005e68
 80059bc:	20006068 	.word	0x20006068
 80059c0:	20005f98 	.word	0x20005f98
 80059c4:	20006198 	.word	0x20006198
 80059c8:	20006098 	.word	0x20006098
 80059cc:	0001b490 	.word	0x0001b490
 80059d0:	00020430 	.word	0x00020430
 80059d4:	200061c8 	.word	0x200061c8
 80059d8:	200063f8 	.word	0x200063f8
 80059dc:	0001fef0 	.word	0x0001fef0
 80059e0:	200062c8 	.word	0x200062c8
 80059e4:	200064f8 	.word	0x200064f8
 80059e8:	20006628 	.word	0x20006628
 80059ec:	200062f8 	.word	0x200062f8
 80059f0:	20006528 	.word	0x20006528
 80059f4:	20006728 	.word	0x20006728
 80059f8:	20006658 	.word	0x20006658
 80059fc:	0002ba30 	.word	0x0002ba30
 8005a00:	000308f0 	.word	0x000308f0
 8005a04:	20006858 	.word	0x20006858
 8005a08:	0002bf70 	.word	0x0002bf70
 8005a0c:	20006758 	.word	0x20006758
 8005a10:	000309d0 	.word	0x000309d0
 8005a14:	20006888 	.word	0x20006888
 8005a18:	00036460 	.word	0x00036460
 8005a1c:	20006ab8 	.word	0x20006ab8
 8005a20:	000369a0 	.word	0x000369a0
 8005a24:	00062e60 	.word	0x00062e60
 8005a28:	20006a88 	.word	0x20006a88
 8005a2c:	20006c00 	.word	0x20006c00
 8005a30:	0003fe60 	.word	0x0003fe60
 8005a34:	20007160 	.word	0x20007160
 8005a38:	200071d8 	.word	0x200071d8
 8005a3c:	00064260 	.word	0x00064260
 8005a40:	00064c60 	.word	0x00064c60
 8005a44:	00014090 	.word	0x00014090
 8005a48:	00014d50 	.word	0x00014d50
 8005a4c:	20005f68 	.word	0x20005f68
 8005a50:	000180d0 	.word	0x000180d0
 8005a54:	00018790 	.word	0x00018790
 8005a58:	00018a90 	.word	0x00018a90
 8005a5c:	0001b570 	.word	0x0001b570
 8005a60:	200063c8 	.word	0x200063c8
 8005a64:	00021540 	.word	0x00021540
 8005a68:	00025fa0 	.word	0x00025fa0
 8005a6c:	00025ec0 	.word	0x00025ec0
 8005a70:	0002a920 	.word	0x0002a920
 8005a74:	0002ae60 	.word	0x0002ae60
 8005a78:	20006988 	.word	0x20006988
 8005a7c:	200069b8 	.word	0x200069b8
 8005a80:	00035350 	.word	0x00035350
 8005a84:	00035890 	.word	0x00035890
 8005a88:	0003fca0 	.word	0x0003fca0

08005a8c <network_configure_activations>:
{
 8005a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a90:	b083      	sub	sp, #12
  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 8005a92:	2400      	movs	r4, #0
{
 8005a94:	460a      	mov	r2, r1
 8005a96:	4605      	mov	r5, r0
  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 8005a98:	2101      	movs	r1, #1
 8005a9a:	a801      	add	r0, sp, #4
  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 8005a9c:	9401      	str	r4, [sp, #4]
  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 8005a9e:	f015 fb7d 	bl	801b19c <ai_platform_get_activations_map>
 8005aa2:	4604      	mov	r4, r0
 8005aa4:	2800      	cmp	r0, #0
 8005aa6:	f000 83de 	beq.w	8006266 <network_configure_activations+0x7da>
    serving_default_input_20_output_array.data = AI_PTR(activations_map[0] + 3772);
 8005aaa:	9b01      	ldr	r3, [sp, #4]
    conversion_0_output_array.data = AI_PTR(activations_map[0] + 52924);
 8005aac:	f64c 61bc 	movw	r1, #52924	; 0xcebc
    serving_default_input_20_output_array.data = AI_PTR(activations_map[0] + 3772);
 8005ab0:	48ee      	ldr	r0, [pc, #952]	; (8005e6c <network_configure_activations+0x3e0>)
    conv2d_1_scratch1_array.data = AI_PTR(activations_map[0] + 35504);
 8005ab2:	f648 27b0 	movw	r7, #35504	; 0x8ab0
    serving_default_input_20_output_array.data = AI_PTR(activations_map[0] + 3772);
 8005ab6:	f603 68bc 	addw	r8, r3, #3772	; 0xebc
    conversion_0_output_array.data = AI_PTR(activations_map[0] + 52924);
 8005aba:	4419      	add	r1, r3
    conv2d_1_scratch0_array.data = AI_PTR(activations_map[0] + 102080);
 8005abc:	f8df e41c 	ldr.w	lr, [pc, #1052]	; 8005edc <network_configure_activations+0x450>
    conv2d_1_scratch1_array.data = AI_PTR(activations_map[0] + 35504);
 8005ac0:	441f      	add	r7, r3
    serving_default_input_20_output_array.data = AI_PTR(activations_map[0] + 3772);
 8005ac2:	f8c0 8008 	str.w	r8, [r0, #8]
    conv2d_2_scratch1_array.data = AI_PTR(activations_map[0] + 33424);
 8005ac6:	f248 2690 	movw	r6, #33424	; 0x8290
    serving_default_input_20_output_array.data = AI_PTR(activations_map[0] + 3772);
 8005aca:	f8c0 800c 	str.w	r8, [r0, #12]
    conv2d_1_scratch0_array.data = AI_PTR(activations_map[0] + 102080);
 8005ace:	449e      	add	lr, r3
    conversion_0_output_array.data = AI_PTR(activations_map[0] + 52924);
 8005ad0:	f8df 840c 	ldr.w	r8, [pc, #1036]	; 8005ee0 <network_configure_activations+0x454>
    conv2d_2_scratch1_array.data = AI_PTR(activations_map[0] + 33424);
 8005ad4:	441e      	add	r6, r3
    conv2d_2_scratch0_array.data = AI_PTR(activations_map[0] + 102680);
 8005ad6:	f8df 940c 	ldr.w	r9, [pc, #1036]	; 8005ee4 <network_configure_activations+0x458>
    conv2d_6_scratch1_array.data = AI_PTR(activations_map[0] + 31696);
 8005ada:	f647 35d0 	movw	r5, #31696	; 0x7bd0
    conversion_0_output_array.data = AI_PTR(activations_map[0] + 52924);
 8005ade:	f8c8 1008 	str.w	r1, [r8, #8]
    conv2d_8_scratch0_array.data = AI_PTR(activations_map[0] + 8464);
 8005ae2:	f242 1210 	movw	r2, #8464	; 0x2110
    conversion_0_output_array.data = AI_PTR(activations_map[0] + 52924);
 8005ae6:	f8c8 100c 	str.w	r1, [r8, #12]
    conv2d_2_scratch0_array.data = AI_PTR(activations_map[0] + 102680);
 8005aea:	4499      	add	r9, r3
    conv2d_1_scratch0_array.data = AI_PTR(activations_map[0] + 102080);
 8005aec:	f8df 83f8 	ldr.w	r8, [pc, #1016]	; 8005ee8 <network_configure_activations+0x45c>
    conv2d_6_scratch1_array.data = AI_PTR(activations_map[0] + 31696);
 8005af0:	441d      	add	r5, r3
    conv2d_8_scratch0_array.data = AI_PTR(activations_map[0] + 8464);
 8005af2:	441a      	add	r2, r3
    conv2d_8_scratch1_array.data = AI_PTR(activations_map[0] + 8976);
 8005af4:	f242 3c10 	movw	ip, #8976	; 0x2310
    conv2d_8_output_array.data = AI_PTR(activations_map[0] + 58128);
 8005af8:	f24e 3b10 	movw	fp, #58128	; 0xe310
    conv2d_9_scratch1_array.data = AI_PTR(activations_map[0] + 107280);
 8005afc:	48dc      	ldr	r0, [pc, #880]	; (8005e70 <network_configure_activations+0x3e4>)
    conv2d_8_scratch1_array.data = AI_PTR(activations_map[0] + 8976);
 8005afe:	449c      	add	ip, r3
    eltwise_11_output_array.data = AI_PTR(activations_map[0] + 16656);
 8005b00:	f244 1110 	movw	r1, #16656	; 0x4110
    conv2d_8_output_array.data = AI_PTR(activations_map[0] + 58128);
 8005b04:	449b      	add	fp, r3
    conv2d_9_scratch1_array.data = AI_PTR(activations_map[0] + 107280);
 8005b06:	4418      	add	r0, r3
    eltwise_11_output_array.data = AI_PTR(activations_map[0] + 16656);
 8005b08:	4419      	add	r1, r3
    conv2d_14_output_array.data = AI_PTR(activations_map[0] + 14068);
 8005b0a:	f243 6af4 	movw	sl, #14068	; 0x36f4
    conv2d_1_scratch0_array.data = AI_PTR(activations_map[0] + 102080);
 8005b0e:	e9c8 ee02 	strd	lr, lr, [r8, #8]
    conv2d_1_scratch1_array.data = AI_PTR(activations_map[0] + 35504);
 8005b12:	f8df e3d8 	ldr.w	lr, [pc, #984]	; 8005eec <network_configure_activations+0x460>
    conv2d_12_scratch1_array.data = AI_PTR(activations_map[0] + 24848);
 8005b16:	f246 1810 	movw	r8, #24848	; 0x6110
    conv2d_14_output_array.data = AI_PTR(activations_map[0] + 14068);
 8005b1a:	449a      	add	sl, r3
    conv2d_12_scratch1_array.data = AI_PTR(activations_map[0] + 24848);
 8005b1c:	4498      	add	r8, r3
    conv2d_1_scratch1_array.data = AI_PTR(activations_map[0] + 35504);
 8005b1e:	e9ce 7702 	strd	r7, r7, [lr, #8]
    conv2d_1_output_array.data = AI_PTR(activations_map[0] + 35504);
 8005b22:	f8df e3cc 	ldr.w	lr, [pc, #972]	; 8005ef0 <network_configure_activations+0x464>
 8005b26:	e9ce 7702 	strd	r7, r7, [lr, #8]
    conv2d_2_scratch0_array.data = AI_PTR(activations_map[0] + 102680);
 8005b2a:	4fd2      	ldr	r7, [pc, #840]	; (8005e74 <network_configure_activations+0x3e8>)
    conv2d_16_output_array.data = AI_PTR(activations_map[0] + 30048);
 8005b2c:	f247 5e60 	movw	lr, #30048	; 0x7560
    conv2d_2_scratch0_array.data = AI_PTR(activations_map[0] + 102680);
 8005b30:	e9c7 9902 	strd	r9, r9, [r7, #8]
    conv2d_2_scratch1_array.data = AI_PTR(activations_map[0] + 33424);
 8005b34:	f8df 93bc 	ldr.w	r9, [pc, #956]	; 8005ef4 <network_configure_activations+0x468>
    conv2d_16_output_array.data = AI_PTR(activations_map[0] + 30048);
 8005b38:	449e      	add	lr, r3
    conv2d_17_scratch1_array.data = AI_PTR(activations_map[0] + 54624);
 8005b3a:	f24d 5760 	movw	r7, #54624	; 0xd560
    conv2d_2_scratch1_array.data = AI_PTR(activations_map[0] + 33424);
 8005b3e:	e9c9 6602 	strd	r6, r6, [r9, #8]
    conv2d_2_output_array.data = AI_PTR(activations_map[0] + 33424);
 8005b42:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8005ef8 <network_configure_activations+0x46c>
    conv2d_17_scratch1_array.data = AI_PTR(activations_map[0] + 54624);
 8005b46:	441f      	add	r7, r3
    conv2d_2_output_array.data = AI_PTR(activations_map[0] + 33424);
 8005b48:	e9c9 6602 	strd	r6, r6, [r9, #8]
    conv2d_3_scratch0_array.data = AI_PTR(activations_map[0] + 33280);
 8005b4c:	f503 4602 	add.w	r6, r3, #33280	; 0x8200
 8005b50:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 8005efc <network_configure_activations+0x470>
 8005b54:	e9c9 6602 	strd	r6, r6, [r9, #8]
    conv2d_4_scratch1_array.data = AI_PTR(activations_map[0] + 33280);
 8005b58:	f8df 93a4 	ldr.w	r9, [pc, #932]	; 8005f00 <network_configure_activations+0x474>
 8005b5c:	e9c9 6602 	strd	r6, r6, [r9, #8]
    conv2d_4_output_array.data = AI_PTR(activations_map[0] + 33280);
 8005b60:	f8df 93a0 	ldr.w	r9, [pc, #928]	; 8005f04 <network_configure_activations+0x478>
 8005b64:	e9c9 6602 	strd	r6, r6, [r9, #8]
    conv2d_3_output_array.data = AI_PTR(activations_map[0] + 512);
 8005b68:	f503 7900 	add.w	r9, r3, #512	; 0x200
 8005b6c:	4ec2      	ldr	r6, [pc, #776]	; (8005e78 <network_configure_activations+0x3ec>)
 8005b6e:	e9c6 9902 	strd	r9, r9, [r6, #8]
    conv2d_6_scratch1_array.data = AI_PTR(activations_map[0] + 31696);
 8005b72:	f8df 9394 	ldr.w	r9, [pc, #916]	; 8005f08 <network_configure_activations+0x47c>
    conv2d_6_output_array.data = AI_PTR(activations_map[0] + 31696);
 8005b76:	4ec1      	ldr	r6, [pc, #772]	; (8005e7c <network_configure_activations+0x3f0>)
    conv2d_6_scratch1_array.data = AI_PTR(activations_map[0] + 31696);
 8005b78:	e9c9 5502 	strd	r5, r5, [r9, #8]
    conv2d_4_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8005b7c:	f8df 938c 	ldr.w	r9, [pc, #908]	; 8005f0c <network_configure_activations+0x480>
    conv2d_6_output_array.data = AI_PTR(activations_map[0] + 31696);
 8005b80:	60b5      	str	r5, [r6, #8]
    conv2d_4_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8005b82:	e9c9 3302 	strd	r3, r3, [r9, #8]
    conv2d_6_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8005b86:	f8df 9388 	ldr.w	r9, [pc, #904]	; 8005f10 <network_configure_activations+0x484>
 8005b8a:	e9c9 3302 	strd	r3, r3, [r9, #8]
    conv2d_6_output_array.data = AI_PTR(activations_map[0] + 31696);
 8005b8e:	60f5      	str	r5, [r6, #12]
    conv2d_7_output_array.data = AI_PTR(activations_map[0] + 272);
 8005b90:	f503 7988 	add.w	r9, r3, #272	; 0x110
 8005b94:	4eba      	ldr	r6, [pc, #744]	; (8005e80 <network_configure_activations+0x3f4>)
    conv2d_20_output_array.data = AI_PTR(activations_map[0] + 37760);
 8005b96:	f249 3580 	movw	r5, #37760	; 0x9380
    conv2d_7_output_array.data = AI_PTR(activations_map[0] + 272);
 8005b9a:	e9c6 9902 	strd	r9, r9, [r6, #8]
    conv2d_8_scratch0_array.data = AI_PTR(activations_map[0] + 8464);
 8005b9e:	f8df 9374 	ldr.w	r9, [pc, #884]	; 8005f14 <network_configure_activations+0x488>
    conv2d_20_output_array.data = AI_PTR(activations_map[0] + 37760);
 8005ba2:	441d      	add	r5, r3
    conv2d_21_output_array.data = AI_PTR(activations_map[0] + 62336);
 8005ba4:	f24f 3680 	movw	r6, #62336	; 0xf380
    conv2d_8_scratch0_array.data = AI_PTR(activations_map[0] + 8464);
 8005ba8:	e9c9 2202 	strd	r2, r2, [r9, #8]
    conv2d_9_scratch0_array.data = AI_PTR(activations_map[0] + 8464);
 8005bac:	f8df 9368 	ldr.w	r9, [pc, #872]	; 8005f18 <network_configure_activations+0x48c>
    conv2d_21_output_array.data = AI_PTR(activations_map[0] + 62336);
 8005bb0:	441e      	add	r6, r3
    conv2d_9_scratch0_array.data = AI_PTR(activations_map[0] + 8464);
 8005bb2:	e9c9 2202 	strd	r2, r2, [r9, #8]
    conv2d_10_output_array.data = AI_PTR(activations_map[0] + 8464);
 8005bb6:	f8df 9364 	ldr.w	r9, [pc, #868]	; 8005f1c <network_configure_activations+0x490>
 8005bba:	e9c9 2202 	strd	r2, r2, [r9, #8]
    conv2d_8_scratch1_array.data = AI_PTR(activations_map[0] + 8976);
 8005bbe:	4ab1      	ldr	r2, [pc, #708]	; (8005e84 <network_configure_activations+0x3f8>)
    conv2d_24_scratch1_array.data = AI_PTR(activations_map[0] + 8736);
 8005bc0:	f242 2920 	movw	r9, #8736	; 0x2220
    conv2d_8_scratch1_array.data = AI_PTR(activations_map[0] + 8976);
 8005bc4:	e9c2 cc02 	strd	ip, ip, [r2, #8]
    conv2d_8_output_array.data = AI_PTR(activations_map[0] + 58128);
 8005bc8:	4aaf      	ldr	r2, [pc, #700]	; (8005e88 <network_configure_activations+0x3fc>)
    conv2d_24_scratch1_array.data = AI_PTR(activations_map[0] + 8736);
 8005bca:	4499      	add	r9, r3
    conv2d_24_output_array.data = AI_PTR(activations_map[0] + 33312);
 8005bcc:	f248 2c20 	movw	ip, #33312	; 0x8220
    conv2d_8_output_array.data = AI_PTR(activations_map[0] + 58128);
 8005bd0:	e9c2 bb02 	strd	fp, fp, [r2, #8]
    conv2d_9_scratch1_array.data = AI_PTR(activations_map[0] + 107280);
 8005bd4:	f8df b348 	ldr.w	fp, [pc, #840]	; 8005f20 <network_configure_activations+0x494>
    conv2d_24_output_array.data = AI_PTR(activations_map[0] + 33312);
 8005bd8:	449c      	add	ip, r3
    conv2d_26_output_array.data = AI_PTR(activations_map[0] + 9700);
 8005bda:	f242 52e4 	movw	r2, #9700	; 0x25e4
    conv2d_9_scratch1_array.data = AI_PTR(activations_map[0] + 107280);
 8005bde:	e9cb 0002 	strd	r0, r0, [fp, #8]
    conv2d_9_output_array.data = AI_PTR(activations_map[0] + 156432);
 8005be2:	48aa      	ldr	r0, [pc, #680]	; (8005e8c <network_configure_activations+0x400>)
    conv2d_26_output_array.data = AI_PTR(activations_map[0] + 9700);
 8005be4:	441a      	add	r2, r3
    conv2d_9_output_array.data = AI_PTR(activations_map[0] + 156432);
 8005be6:	f8df b33c 	ldr.w	fp, [pc, #828]	; 8005f24 <network_configure_activations+0x498>
 8005bea:	4418      	add	r0, r3
 8005bec:	e9cb 0002 	strd	r0, r0, [fp, #8]
    eltwise_11_output_array.data = AI_PTR(activations_map[0] + 16656);
 8005bf0:	f8df b334 	ldr.w	fp, [pc, #820]	; 8005f28 <network_configure_activations+0x49c>
    conv2d_28_output_array.data = AI_PTR(activations_map[0] + 12912);
 8005bf4:	f243 2070 	movw	r0, #12912	; 0x3270
    eltwise_11_output_array.data = AI_PTR(activations_map[0] + 16656);
 8005bf8:	e9cb 1102 	strd	r1, r1, [fp, #8]
    conv2d_12_scratch1_array.data = AI_PTR(activations_map[0] + 24848);
 8005bfc:	f8df b32c 	ldr.w	fp, [pc, #812]	; 8005f2c <network_configure_activations+0x4a0>
    conv2d_28_output_array.data = AI_PTR(activations_map[0] + 12912);
 8005c00:	4418      	add	r0, r3
    conv2d_29_scratch1_array.data = AI_PTR(activations_map[0] + 22128);
 8005c02:	f245 6170 	movw	r1, #22128	; 0x5670
    conv2d_12_scratch1_array.data = AI_PTR(activations_map[0] + 24848);
 8005c06:	e9cb 8802 	strd	r8, r8, [fp, #8]
    conv2d_12_output_array.data = AI_PTR(activations_map[0] + 74000);
 8005c0a:	f8df 8324 	ldr.w	r8, [pc, #804]	; 8005f30 <network_configure_activations+0x4a4>
    conv2d_29_scratch1_array.data = AI_PTR(activations_map[0] + 22128);
 8005c0e:	4419      	add	r1, r3
    conv2d_12_output_array.data = AI_PTR(activations_map[0] + 74000);
 8005c10:	f8df b320 	ldr.w	fp, [pc, #800]	; 8005f34 <network_configure_activations+0x4a8>
 8005c14:	4498      	add	r8, r3
 8005c16:	e9cb 8802 	strd	r8, r8, [fp, #8]
    conv2d_14_scratch1_array.data = AI_PTR(activations_map[0] + 1780);
 8005c1a:	f203 6bf4 	addw	fp, r3, #1780	; 0x6f4
 8005c1e:	f8df 8318 	ldr.w	r8, [pc, #792]	; 8005f38 <network_configure_activations+0x4ac>
 8005c22:	e9c8 bb02 	strd	fp, fp, [r8, #8]
    conv2d_7_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8005c26:	f8df b314 	ldr.w	fp, [pc, #788]	; 8005f3c <network_configure_activations+0x4b0>
    conv2d_29_output_array.data = AI_PTR(activations_map[0] + 31344);
 8005c2a:	f647 2870 	movw	r8, #31344	; 0x7a70
    conv2d_7_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8005c2e:	e9cb 3302 	strd	r3, r3, [fp, #8]
    conv2d_10_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8005c32:	f8df b30c 	ldr.w	fp, [pc, #780]	; 8005f40 <network_configure_activations+0x4b4>
    conv2d_29_output_array.data = AI_PTR(activations_map[0] + 31344);
 8005c36:	4498      	add	r8, r3
    conv2d_10_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8005c38:	e9cb 3302 	strd	r3, r3, [fp, #8]
    conv2d_12_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8005c3c:	f8df b304 	ldr.w	fp, [pc, #772]	; 8005f44 <network_configure_activations+0x4b8>
 8005c40:	e9cb 3302 	strd	r3, r3, [fp, #8]
    conv2d_14_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8005c44:	f8df b300 	ldr.w	fp, [pc, #768]	; 8005f48 <network_configure_activations+0x4bc>
 8005c48:	e9cb 3302 	strd	r3, r3, [fp, #8]
    conv2d_14_output_array.data = AI_PTR(activations_map[0] + 14068);
 8005c4c:	f8df b2fc 	ldr.w	fp, [pc, #764]	; 8005f4c <network_configure_activations+0x4c0>
 8005c50:	e9cb aa02 	strd	sl, sl, [fp, #8]
    conv2d_15_output_array.data = AI_PTR(activations_map[0] + 352);
 8005c54:	f503 7bb0 	add.w	fp, r3, #352	; 0x160
 8005c58:	f8df a2f4 	ldr.w	sl, [pc, #756]	; 8005f50 <network_configure_activations+0x4c4>
 8005c5c:	e9ca bb02 	strd	fp, fp, [sl, #8]
    conv2d_16_scratch0_array.data = AI_PTR(activations_map[0] + 4448);
 8005c60:	f503 5a8b 	add.w	sl, r3, #4448	; 0x1160
 8005c64:	f8df b2ec 	ldr.w	fp, [pc, #748]	; 8005f54 <network_configure_activations+0x4c8>
 8005c68:	e9cb aa02 	strd	sl, sl, [fp, #8]
    conv2d_17_scratch0_array.data = AI_PTR(activations_map[0] + 4448);
 8005c6c:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 8005f58 <network_configure_activations+0x4cc>
 8005c70:	e9cb aa02 	strd	sl, sl, [fp, #8]
    conv2d_18_scratch0_array.data = AI_PTR(activations_map[0] + 4448);
 8005c74:	f8df b2e4 	ldr.w	fp, [pc, #740]	; 8005f5c <network_configure_activations+0x4d0>
 8005c78:	e9cb aa02 	strd	sl, sl, [fp, #8]
    conv2d_16_scratch1_array.data = AI_PTR(activations_map[0] + 5472);
 8005c7c:	f503 5bab 	add.w	fp, r3, #5472	; 0x1560
 8005c80:	f8df a2dc 	ldr.w	sl, [pc, #732]	; 8005f60 <network_configure_activations+0x4d4>
 8005c84:	e9ca bb02 	strd	fp, fp, [sl, #8]
    conv2d_16_output_array.data = AI_PTR(activations_map[0] + 30048);
 8005c88:	f8df a2d8 	ldr.w	sl, [pc, #728]	; 8005f64 <network_configure_activations+0x4d8>
    conv2d_18_output_array.data = AI_PTR(activations_map[0] + 4992);
 8005c8c:	f503 5b9c 	add.w	fp, r3, #4992	; 0x1380
    conv2d_16_output_array.data = AI_PTR(activations_map[0] + 30048);
 8005c90:	e9ca ee02 	strd	lr, lr, [sl, #8]
    conv2d_17_scratch1_array.data = AI_PTR(activations_map[0] + 54624);
 8005c94:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 8005f68 <network_configure_activations+0x4dc>
    eltwise_19_output_array.data = AI_PTR(activations_map[0] + 9088);
 8005c98:	f503 5e0e 	add.w	lr, r3, #9088	; 0x2380
    conv2d_17_scratch1_array.data = AI_PTR(activations_map[0] + 54624);
 8005c9c:	e9ca 7702 	strd	r7, r7, [sl, #8]
    conv2d_17_output_array.data = AI_PTR(activations_map[0] + 79200);
 8005ca0:	4f7b      	ldr	r7, [pc, #492]	; (8005e90 <network_configure_activations+0x404>)
 8005ca2:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8005f6c <network_configure_activations+0x4e0>
 8005ca6:	441f      	add	r7, r3
 8005ca8:	e9ca 7702 	strd	r7, r7, [sl, #8]
    conv2d_18_output_array.data = AI_PTR(activations_map[0] + 4992);
 8005cac:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 8005f70 <network_configure_activations+0x4e4>
    conv2d_20_scratch1_array.data = AI_PTR(activations_map[0] + 13184);
 8005cb0:	f503 574e 	add.w	r7, r3, #13184	; 0x3380
    conv2d_18_output_array.data = AI_PTR(activations_map[0] + 4992);
 8005cb4:	e9ca bb02 	strd	fp, fp, [sl, #8]
    eltwise_19_output_array.data = AI_PTR(activations_map[0] + 9088);
 8005cb8:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 8005f74 <network_configure_activations+0x4e8>
 8005cbc:	e9ca ee02 	strd	lr, lr, [sl, #8]
    conv2d_20_scratch1_array.data = AI_PTR(activations_map[0] + 13184);
 8005cc0:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 8005f78 <network_configure_activations+0x4ec>
    conv2d_21_scratch1_array.data = AI_PTR(activations_map[0] + 13184);
 8005cc4:	f8df e2b4 	ldr.w	lr, [pc, #692]	; 8005f7c <network_configure_activations+0x4f0>
    conv2d_20_scratch1_array.data = AI_PTR(activations_map[0] + 13184);
 8005cc8:	e9ca 7702 	strd	r7, r7, [sl, #8]
    conv2d_20_output_array.data = AI_PTR(activations_map[0] + 37760);
 8005ccc:	f8df a2b0 	ldr.w	sl, [pc, #688]	; 8005f80 <network_configure_activations+0x4f4>
    conv2d_21_scratch1_array.data = AI_PTR(activations_map[0] + 13184);
 8005cd0:	f8ce 7008 	str.w	r7, [lr, #8]
    conv2d_20_output_array.data = AI_PTR(activations_map[0] + 37760);
 8005cd4:	e9ca 5502 	strd	r5, r5, [sl, #8]
    conv2d_15_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8005cd8:	f8df a2a8 	ldr.w	sl, [pc, #680]	; 8005f84 <network_configure_activations+0x4f8>
    conv2d_32_output_array.data = AI_PTR(activations_map[0] + 15264);
 8005cdc:	f643 35a0 	movw	r5, #15264	; 0x3ba0
    conv2d_15_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8005ce0:	e9ca 3302 	strd	r3, r3, [sl, #8]
    conv2d_20_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8005ce4:	f8df a2a0 	ldr.w	sl, [pc, #672]	; 8005f88 <network_configure_activations+0x4fc>
    conv2d_32_output_array.data = AI_PTR(activations_map[0] + 15264);
 8005ce8:	441d      	add	r5, r3
    conv2d_20_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8005cea:	e9ca 3302 	strd	r3, r3, [sl, #8]
    conv2d_21_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8005cee:	f8df a29c 	ldr.w	sl, [pc, #668]	; 8005f8c <network_configure_activations+0x500>
 8005cf2:	e9ca 3302 	strd	r3, r3, [sl, #8]
    conv2d_21_scratch1_array.data = AI_PTR(activations_map[0] + 13184);
 8005cf6:	f8ce 700c 	str.w	r7, [lr, #12]
    conv2d_22_output_array.data = AI_PTR(activations_map[0] + 544);
 8005cfa:	f503 7a08 	add.w	sl, r3, #544	; 0x220
    conv2d_21_output_array.data = AI_PTR(activations_map[0] + 62336);
 8005cfe:	4f65      	ldr	r7, [pc, #404]	; (8005e94 <network_configure_activations+0x408>)
    conv2d_33_scratch1_array.data = AI_PTR(activations_map[0] + 24480);
 8005d00:	f645 7ea0 	movw	lr, #24480	; 0x5fa0
    conv2d_21_output_array.data = AI_PTR(activations_map[0] + 62336);
 8005d04:	e9c7 6602 	strd	r6, r6, [r7, #8]
    conv2d_22_output_array.data = AI_PTR(activations_map[0] + 544);
 8005d08:	4e63      	ldr	r6, [pc, #396]	; (8005e98 <network_configure_activations+0x40c>)
    conv2d_33_scratch1_array.data = AI_PTR(activations_map[0] + 24480);
 8005d0a:	449e      	add	lr, r3
    conv2d_33_output_array.data = AI_PTR(activations_map[0] + 33696);
 8005d0c:	f248 37a0 	movw	r7, #33696	; 0x83a0
    conv2d_22_output_array.data = AI_PTR(activations_map[0] + 544);
 8005d10:	e9c6 aa02 	strd	sl, sl, [r6, #8]
    eltwise_23_output_array.data = AI_PTR(activations_map[0] + 4640);
 8005d14:	f503 5a91 	add.w	sl, r3, #4640	; 0x1220
 8005d18:	4e60      	ldr	r6, [pc, #384]	; (8005e9c <network_configure_activations+0x410>)
    conv2d_33_output_array.data = AI_PTR(activations_map[0] + 33696);
 8005d1a:	441f      	add	r7, r3
    eltwise_23_output_array.data = AI_PTR(activations_map[0] + 4640);
 8005d1c:	e9c6 aa02 	strd	sl, sl, [r6, #8]
    conv2d_24_scratch1_array.data = AI_PTR(activations_map[0] + 8736);
 8005d20:	f8df a26c 	ldr.w	sl, [pc, #620]	; 8005f90 <network_configure_activations+0x504>
    conv2d_36_output_array.data = AI_PTR(activations_map[0] + 13104);
 8005d24:	f243 3630 	movw	r6, #13104	; 0x3330
    conv2d_24_scratch1_array.data = AI_PTR(activations_map[0] + 8736);
 8005d28:	e9ca 9902 	strd	r9, r9, [sl, #8]
    conv2d_24_output_array.data = AI_PTR(activations_map[0] + 33312);
 8005d2c:	f8df 9264 	ldr.w	r9, [pc, #612]	; 8005f94 <network_configure_activations+0x508>
    conv2d_36_output_array.data = AI_PTR(activations_map[0] + 13104);
 8005d30:	441e      	add	r6, r3
    conv2d_37_scratch1_array.data = AI_PTR(activations_map[0] + 22320);
 8005d32:	f245 7a30 	movw	sl, #22320	; 0x5730
    conv2d_24_output_array.data = AI_PTR(activations_map[0] + 33312);
 8005d36:	e9c9 cc02 	strd	ip, ip, [r9, #8]
    conv2d_26_scratch1_array.data = AI_PTR(activations_map[0] + 3556);
 8005d3a:	f603 59e4 	addw	r9, r3, #3556	; 0xde4
 8005d3e:	f8df c258 	ldr.w	ip, [pc, #600]	; 8005f98 <network_configure_activations+0x50c>
    conv2d_37_scratch1_array.data = AI_PTR(activations_map[0] + 22320);
 8005d42:	449a      	add	sl, r3
    conv2d_26_scratch1_array.data = AI_PTR(activations_map[0] + 3556);
 8005d44:	e9cc 9902 	strd	r9, r9, [ip, #8]
    conv2d_26_output_array.data = AI_PTR(activations_map[0] + 9700);
 8005d48:	f8df c250 	ldr.w	ip, [pc, #592]	; 8005f9c <network_configure_activations+0x510>
    conv2d_27_output_array.data = AI_PTR(activations_map[0] + 624);
 8005d4c:	f503 791c 	add.w	r9, r3, #624	; 0x270
    conv2d_26_output_array.data = AI_PTR(activations_map[0] + 9700);
 8005d50:	e9cc 2202 	strd	r2, r2, [ip, #8]
    conv2d_27_output_array.data = AI_PTR(activations_map[0] + 624);
 8005d54:	f8df c248 	ldr.w	ip, [pc, #584]	; 8005fa0 <network_configure_activations+0x514>
    conv2d_28_scratch0_array.data = AI_PTR(activations_map[0] + 2160);
 8005d58:	f503 6207 	add.w	r2, r3, #2160	; 0x870
    conv2d_27_output_array.data = AI_PTR(activations_map[0] + 624);
 8005d5c:	e9cc 9902 	strd	r9, r9, [ip, #8]
    conv2d_28_scratch0_array.data = AI_PTR(activations_map[0] + 2160);
 8005d60:	f8df c240 	ldr.w	ip, [pc, #576]	; 8005fa4 <network_configure_activations+0x518>
    conv2d_28_scratch1_array.data = AI_PTR(activations_map[0] + 3696);
 8005d64:	f503 6967 	add.w	r9, r3, #3696	; 0xe70
    conv2d_28_scratch0_array.data = AI_PTR(activations_map[0] + 2160);
 8005d68:	e9cc 2202 	strd	r2, r2, [ip, #8]
    conv2d_29_scratch0_array.data = AI_PTR(activations_map[0] + 2160);
 8005d6c:	f8df c238 	ldr.w	ip, [pc, #568]	; 8005fa8 <network_configure_activations+0x51c>
 8005d70:	e9cc 2202 	strd	r2, r2, [ip, #8]
    conv2d_28_scratch1_array.data = AI_PTR(activations_map[0] + 3696);
 8005d74:	f8df c234 	ldr.w	ip, [pc, #564]	; 8005fac <network_configure_activations+0x520>
 8005d78:	e9cc 9902 	strd	r9, r9, [ip, #8]
    conv2d_28_output_array.data = AI_PTR(activations_map[0] + 12912);
 8005d7c:	f8df c230 	ldr.w	ip, [pc, #560]	; 8005fb0 <network_configure_activations+0x524>
    conv2d_27_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8005d80:	f8df 9230 	ldr.w	r9, [pc, #560]	; 8005fb4 <network_configure_activations+0x528>
    conv2d_28_output_array.data = AI_PTR(activations_map[0] + 12912);
 8005d84:	e9cc 0002 	strd	r0, r0, [ip, #8]
    conv2d_22_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8005d88:	4845      	ldr	r0, [pc, #276]	; (8005ea0 <network_configure_activations+0x414>)
    conv2d_37_output_array.data = AI_PTR(activations_map[0] + 31536);
 8005d8a:	f647 3c30 	movw	ip, #31536	; 0x7b30
    conv2d_22_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8005d8e:	e9c0 3302 	strd	r3, r3, [r0, #8]
    conv2d_24_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8005d92:	4844      	ldr	r0, [pc, #272]	; (8005ea4 <network_configure_activations+0x418>)
    conv2d_37_output_array.data = AI_PTR(activations_map[0] + 31536);
 8005d94:	449c      	add	ip, r3
    conv2d_24_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8005d96:	e9c0 3302 	strd	r3, r3, [r0, #8]
    conv2d_27_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8005d9a:	e9c9 3302 	strd	r3, r3, [r9, #8]
    conv2d_26_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8005d9e:	4842      	ldr	r0, [pc, #264]	; (8005ea8 <network_configure_activations+0x41c>)
    conv2d_29_scratch1_array.data = AI_PTR(activations_map[0] + 22128);
 8005da0:	f8df 9214 	ldr.w	r9, [pc, #532]	; 8005fb8 <network_configure_activations+0x52c>
    conv2d_26_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8005da4:	e9c0 3302 	strd	r3, r3, [r0, #8]
    conv2d_29_scratch1_array.data = AI_PTR(activations_map[0] + 22128);
 8005da8:	e9c9 1102 	strd	r1, r1, [r9, #8]
    conv2d_30_scratch0_array.data = AI_PTR(activations_map[0] + 2160);
 8005dac:	f8df 920c 	ldr.w	r9, [pc, #524]	; 8005fbc <network_configure_activations+0x530>
    conv2d_40_scratch1_array.data = AI_PTR(activations_map[0] + 5424);
 8005db0:	f241 5030 	movw	r0, #5424	; 0x1530
    conv2d_40_output_array.data = AI_PTR(activations_map[0] + 14640);
 8005db4:	f643 1130 	movw	r1, #14640	; 0x3930
    conv2d_40_scratch1_array.data = AI_PTR(activations_map[0] + 5424);
 8005db8:	4418      	add	r0, r3
    conv2d_40_output_array.data = AI_PTR(activations_map[0] + 14640);
 8005dba:	4419      	add	r1, r3
    conv2d_30_scratch0_array.data = AI_PTR(activations_map[0] + 2160);
 8005dbc:	e9c9 2202 	strd	r2, r2, [r9, #8]
    conv2d_29_output_array.data = AI_PTR(activations_map[0] + 31344);
 8005dc0:	4a3a      	ldr	r2, [pc, #232]	; (8005eac <network_configure_activations+0x420>)
    conv2d_41_scratch1_array.data = AI_PTR(activations_map[0] + 5332);
 8005dc2:	f241 49d4 	movw	r9, #5332	; 0x14d4
    conv2d_29_output_array.data = AI_PTR(activations_map[0] + 31344);
 8005dc6:	e9c2 8802 	strd	r8, r8, [r2, #8]
    conv2d_30_output_array.data = AI_PTR(activations_map[0] + 2976);
 8005dca:	f503 683a 	add.w	r8, r3, #2976	; 0xba0
 8005dce:	4a38      	ldr	r2, [pc, #224]	; (8005eb0 <network_configure_activations+0x424>)
    conv2d_41_scratch1_array.data = AI_PTR(activations_map[0] + 5332);
 8005dd0:	4499      	add	r9, r3
    conv2d_30_output_array.data = AI_PTR(activations_map[0] + 2976);
 8005dd2:	e9c2 8802 	strd	r8, r8, [r2, #8]
    eltwise_31_output_array.data = AI_PTR(activations_map[0] + 4512);
 8005dd6:	f503 588d 	add.w	r8, r3, #4512	; 0x11a0
 8005dda:	4a36      	ldr	r2, [pc, #216]	; (8005eb4 <network_configure_activations+0x428>)
 8005ddc:	e9c2 8802 	strd	r8, r8, [r2, #8]
    conv2d_32_scratch1_array.data = AI_PTR(activations_map[0] + 6048);
 8005de0:	f503 52bd 	add.w	r2, r3, #6048	; 0x17a0
 8005de4:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 8005fc0 <network_configure_activations+0x534>
 8005de8:	e9c8 2202 	strd	r2, r2, [r8, #8]
    conv2d_33_scratch0_array.data = AI_PTR(activations_map[0] + 6048);
 8005dec:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 8005fc4 <network_configure_activations+0x538>
 8005df0:	e9c8 2202 	strd	r2, r2, [r8, #8]
    conv2d_32_output_array.data = AI_PTR(activations_map[0] + 15264);
 8005df4:	4a30      	ldr	r2, [pc, #192]	; (8005eb8 <network_configure_activations+0x42c>)
    conv2d_41_output_array.data = AI_PTR(activations_map[0] + 23856);
 8005df6:	f645 5830 	movw	r8, #23856	; 0x5d30
    conv2d_32_output_array.data = AI_PTR(activations_map[0] + 15264);
 8005dfa:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_33_scratch1_array.data = AI_PTR(activations_map[0] + 24480);
 8005dfe:	4a2f      	ldr	r2, [pc, #188]	; (8005ebc <network_configure_activations+0x430>)
    conv2d_34_output_array.data = AI_PTR(activations_map[0] + 816);
 8005e00:	f503 754c 	add.w	r5, r3, #816	; 0x330
    conv2d_41_output_array.data = AI_PTR(activations_map[0] + 23856);
 8005e04:	4498      	add	r8, r3
    conv2d_33_scratch1_array.data = AI_PTR(activations_map[0] + 24480);
 8005e06:	e9c2 ee02 	strd	lr, lr, [r2, #8]
    conv2d_33_output_array.data = AI_PTR(activations_map[0] + 33696);
 8005e0a:	4a2d      	ldr	r2, [pc, #180]	; (8005ec0 <network_configure_activations+0x434>)
    eltwise_35_output_array.data = AI_PTR(activations_map[0] + 2352);
 8005e0c:	f503 6e13 	add.w	lr, r3, #2352	; 0x930
    conv2d_33_output_array.data = AI_PTR(activations_map[0] + 33696);
 8005e10:	e9c2 7702 	strd	r7, r7, [r2, #8]
    conv2d_34_output_array.data = AI_PTR(activations_map[0] + 816);
 8005e14:	4f2b      	ldr	r7, [pc, #172]	; (8005ec4 <network_configure_activations+0x438>)
    conv2d_36_scratch1_array.data = AI_PTR(activations_map[0] + 3888);
 8005e16:	f503 6273 	add.w	r2, r3, #3888	; 0xf30
    conv2d_34_output_array.data = AI_PTR(activations_map[0] + 816);
 8005e1a:	e9c7 5502 	strd	r5, r5, [r7, #8]
    eltwise_35_output_array.data = AI_PTR(activations_map[0] + 2352);
 8005e1e:	4f2a      	ldr	r7, [pc, #168]	; (8005ec8 <network_configure_activations+0x43c>)
 8005e20:	e9c7 ee02 	strd	lr, lr, [r7, #8]
    conv2d_36_scratch1_array.data = AI_PTR(activations_map[0] + 3888);
 8005e24:	f8df e1a0 	ldr.w	lr, [pc, #416]	; 8005fc8 <network_configure_activations+0x53c>
    conv2d_36_output_array.data = AI_PTR(activations_map[0] + 13104);
 8005e28:	4f28      	ldr	r7, [pc, #160]	; (8005ecc <network_configure_activations+0x440>)
    conv2d_36_scratch1_array.data = AI_PTR(activations_map[0] + 3888);
 8005e2a:	e9ce 2202 	strd	r2, r2, [lr, #8]
    conv2d_32_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8005e2e:	f8df e19c 	ldr.w	lr, [pc, #412]	; 8005fcc <network_configure_activations+0x540>
    conv2d_36_output_array.data = AI_PTR(activations_map[0] + 13104);
 8005e32:	60be      	str	r6, [r7, #8]
    conv2d_32_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8005e34:	e9ce 3302 	strd	r3, r3, [lr, #8]
    conv2d_34_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8005e38:	f8df e194 	ldr.w	lr, [pc, #404]	; 8005fd0 <network_configure_activations+0x544>
 8005e3c:	e9ce 3302 	strd	r3, r3, [lr, #8]
    conv2d_36_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8005e40:	f8df e190 	ldr.w	lr, [pc, #400]	; 8005fd4 <network_configure_activations+0x548>
 8005e44:	e9ce 3302 	strd	r3, r3, [lr, #8]
    conv2d_36_output_array.data = AI_PTR(activations_map[0] + 13104);
 8005e48:	60fe      	str	r6, [r7, #12]
    conv2d_44_output_array.data = AI_PTR(activations_map[0] + 41856);
 8005e4a:	f24a 3e80 	movw	lr, #41856	; 0xa380
    conv2d_37_scratch0_array.data = AI_PTR(activations_map[0] + 3888);
 8005e4e:	4e20      	ldr	r6, [pc, #128]	; (8005ed0 <network_configure_activations+0x444>)
    conv2d_47_output_array.data = AI_PTR(activations_map[0] + 20416);
 8005e50:	f644 77c0 	movw	r7, #20416	; 0x4fc0
    conv2d_44_output_array.data = AI_PTR(activations_map[0] + 41856);
 8005e54:	449e      	add	lr, r3
    conv2d_47_output_array.data = AI_PTR(activations_map[0] + 20416);
 8005e56:	441f      	add	r7, r3
    conv2d_37_scratch0_array.data = AI_PTR(activations_map[0] + 3888);
 8005e58:	e9c6 2202 	strd	r2, r2, [r6, #8]
    conv2d_38_output_array.data = AI_PTR(activations_map[0] + 816);
 8005e5c:	4e1d      	ldr	r6, [pc, #116]	; (8005ed4 <network_configure_activations+0x448>)
 8005e5e:	e9c6 5502 	strd	r5, r5, [r6, #8]
    eltwise_39_output_array.data = AI_PTR(activations_map[0] + 3888);
 8005e62:	4d1d      	ldr	r5, [pc, #116]	; (8005ed8 <network_configure_activations+0x44c>)
    conv2d_48_scratch1_array.data = AI_PTR(activations_map[0] + 32704);
 8005e64:	f647 76c0 	movw	r6, #32704	; 0x7fc0
 8005e68:	e0b6      	b.n	8005fd8 <network_configure_activations+0x54c>
 8005e6a:	bf00      	nop
 8005e6c:	20007608 	.word	0x20007608
 8005e70:	0001a310 	.word	0x0001a310
 8005e74:	20004898 	.word	0x20004898
 8005e78:	20005158 	.word	0x20005158
 8005e7c:	20006ca0 	.word	0x20006ca0
 8005e80:	20006dd0 	.word	0x20006dd0
 8005e84:	20006f30 	.word	0x20006f30
 8005e88:	20006ed0 	.word	0x20006ed0
 8005e8c:	00026310 	.word	0x00026310
 8005e90:	00013560 	.word	0x00013560
 8005e94:	20004078 	.word	0x20004078
 8005e98:	200041a8 	.word	0x200041a8
 8005e9c:	200072c8 	.word	0x200072c8
 8005ea0:	200041d8 	.word	0x200041d8
 8005ea4:	200042d8 	.word	0x200042d8
 8005ea8:	20004408 	.word	0x20004408
 8005eac:	20004738 	.word	0x20004738
 8005eb0:	20004998 	.word	0x20004998
 8005eb4:	20007318 	.word	0x20007318
 8005eb8:	20004a98 	.word	0x20004a98
 8005ebc:	20004c28 	.word	0x20004c28
 8005ec0:	20004bc8 	.word	0x20004bc8
 8005ec4:	20004cf8 	.word	0x20004cf8
 8005ec8:	20007368 	.word	0x20007368
 8005ecc:	20004df8 	.word	0x20004df8
 8005ed0:	20004f58 	.word	0x20004f58
 8005ed4:	20005058 	.word	0x20005058
 8005ed8:	200073b8 	.word	0x200073b8
 8005edc:	00018ec0 	.word	0x00018ec0
 8005ee0:	200070e0 	.word	0x200070e0
 8005ee4:	00019118 	.word	0x00019118
 8005ee8:	20003e48 	.word	0x20003e48
 8005eec:	20003e78 	.word	0x20003e78
 8005ef0:	20003e18 	.word	0x20003e18
 8005ef4:	200048c8 	.word	0x200048c8
 8005ef8:	20004868 	.word	0x20004868
 8005efc:	20005188 	.word	0x20005188
 8005f00:	20005cd8 	.word	0x20005cd8
 8005f04:	20005c78 	.word	0x20005c78
 8005f08:	20006d00 	.word	0x20006d00
 8005f0c:	20005ca8 	.word	0x20005ca8
 8005f10:	20006cd0 	.word	0x20006cd0
 8005f14:	20006f00 	.word	0x20006f00
 8005f18:	20007030 	.word	0x20007030
 8005f1c:	20003658 	.word	0x20003658
 8005f20:	20007060 	.word	0x20007060
 8005f24:	20007000 	.word	0x20007000
 8005f28:	20007228 	.word	0x20007228
 8005f2c:	200037b8 	.word	0x200037b8
 8005f30:	00012110 	.word	0x00012110
 8005f34:	20003758 	.word	0x20003758
 8005f38:	200038e8 	.word	0x200038e8
 8005f3c:	20006e00 	.word	0x20006e00
 8005f40:	20003688 	.word	0x20003688
 8005f44:	20003788 	.word	0x20003788
 8005f48:	200038b8 	.word	0x200038b8
 8005f4c:	20003888 	.word	0x20003888
 8005f50:	200039b8 	.word	0x200039b8
 8005f54:	20003ae8 	.word	0x20003ae8
 8005f58:	20003c18 	.word	0x20003c18
 8005f5c:	20003d48 	.word	0x20003d48
 8005f60:	20003b18 	.word	0x20003b18
 8005f64:	20003ab8 	.word	0x20003ab8
 8005f68:	20003c48 	.word	0x20003c48
 8005f6c:	20003be8 	.word	0x20003be8
 8005f70:	20003d18 	.word	0x20003d18
 8005f74:	20007278 	.word	0x20007278
 8005f78:	20003fa8 	.word	0x20003fa8
 8005f7c:	200040d8 	.word	0x200040d8
 8005f80:	20003f48 	.word	0x20003f48
 8005f84:	200039e8 	.word	0x200039e8
 8005f88:	20003f78 	.word	0x20003f78
 8005f8c:	200040a8 	.word	0x200040a8
 8005f90:	20004308 	.word	0x20004308
 8005f94:	200042a8 	.word	0x200042a8
 8005f98:	20004438 	.word	0x20004438
 8005f9c:	200043d8 	.word	0x200043d8
 8005fa0:	20004508 	.word	0x20004508
 8005fa4:	20004638 	.word	0x20004638
 8005fa8:	20004768 	.word	0x20004768
 8005fac:	20004668 	.word	0x20004668
 8005fb0:	20004608 	.word	0x20004608
 8005fb4:	20004538 	.word	0x20004538
 8005fb8:	20004798 	.word	0x20004798
 8005fbc:	200049c8 	.word	0x200049c8
 8005fc0:	20004af8 	.word	0x20004af8
 8005fc4:	20004bf8 	.word	0x20004bf8
 8005fc8:	20004e58 	.word	0x20004e58
 8005fcc:	20004ac8 	.word	0x20004ac8
 8005fd0:	20004d28 	.word	0x20004d28
 8005fd4:	20004e28 	.word	0x20004e28
    eltwise_39_output_array.data = AI_PTR(activations_map[0] + 3888);
 8005fd8:	e9c5 2202 	strd	r2, r2, [r5, #8]
    conv2d_43_scratch1_array.data = AI_PTR(activations_map[0] + 4992);
 8005fdc:	4aa6      	ldr	r2, [pc, #664]	; (8006278 <network_configure_activations+0x7ec>)
    conv2d_48_scratch1_array.data = AI_PTR(activations_map[0] + 32704);
 8005fde:	441e      	add	r6, r3
    conv2d_48_output_array.data = AI_PTR(activations_map[0] + 44992);
 8005fe0:	f64a 75c0 	movw	r5, #44992	; 0xafc0
    conv2d_43_scratch1_array.data = AI_PTR(activations_map[0] + 4992);
 8005fe4:	e9c2 bb02 	strd	fp, fp, [r2, #8]
    conv2d_37_scratch1_array.data = AI_PTR(activations_map[0] + 22320);
 8005fe8:	4aa4      	ldr	r2, [pc, #656]	; (800627c <network_configure_activations+0x7f0>)
    conv2d_48_output_array.data = AI_PTR(activations_map[0] + 44992);
 8005fea:	441d      	add	r5, r3
    conv2d_53_output_array.data = AI_PTR(activations_map[0] + 10180);
 8005fec:	f242 7bc4 	movw	fp, #10180	; 0x27c4
    conv2d_37_scratch1_array.data = AI_PTR(activations_map[0] + 22320);
 8005ff0:	e9c2 aa02 	strd	sl, sl, [r2, #8]
    conv2d_37_output_array.data = AI_PTR(activations_map[0] + 31536);
 8005ff4:	4aa2      	ldr	r2, [pc, #648]	; (8006280 <network_configure_activations+0x7f4>)
    conv2d_53_output_array.data = AI_PTR(activations_map[0] + 10180);
 8005ff6:	449b      	add	fp, r3
    conv2d_41_scratch1_array.data = AI_PTR(activations_map[0] + 5332);
 8005ff8:	f8df a338 	ldr.w	sl, [pc, #824]	; 8006334 <network_configure_activations+0x8a8>
    conv2d_37_output_array.data = AI_PTR(activations_map[0] + 31536);
 8005ffc:	e9c2 cc02 	strd	ip, ip, [r2, #8]
    conv2d_38_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8006000:	4aa0      	ldr	r2, [pc, #640]	; (8006284 <network_configure_activations+0x7f8>)
    conv2d_42_output_array.data = AI_PTR(activations_map[0] + 896);
 8006002:	f503 7c60 	add.w	ip, r3, #896	; 0x380
    conv2d_38_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8006006:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_41_scratch1_array.data = AI_PTR(activations_map[0] + 5332);
 800600a:	e9ca 9902 	strd	r9, r9, [sl, #8]
    conv2d_40_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 800600e:	4a9e      	ldr	r2, [pc, #632]	; (8006288 <network_configure_activations+0x7fc>)
    conv2d_55_scratch1_array.data = AI_PTR(activations_map[0] + 5808);
 8006010:	f241 6ab0 	movw	sl, #5808	; 0x16b0
    conv2d_41_output_array.data = AI_PTR(activations_map[0] + 23856);
 8006014:	f8df 9320 	ldr.w	r9, [pc, #800]	; 8006338 <network_configure_activations+0x8ac>
    conv2d_55_scratch1_array.data = AI_PTR(activations_map[0] + 5808);
 8006018:	449a      	add	sl, r3
    conv2d_40_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 800601a:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_41_output_array.data = AI_PTR(activations_map[0] + 23856);
 800601e:	e9c9 8802 	strd	r8, r8, [r9, #8]
    conv2d_40_scratch1_array.data = AI_PTR(activations_map[0] + 5424);
 8006022:	4a9a      	ldr	r2, [pc, #616]	; (800628c <network_configure_activations+0x800>)
    conv2d_43_output_array.data = AI_PTR(activations_map[0] + 17280);
 8006024:	f503 4987 	add.w	r9, r3, #17280	; 0x4380
    conv2d_42_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8006028:	f8df 8310 	ldr.w	r8, [pc, #784]	; 800633c <network_configure_activations+0x8b0>
    conv2d_40_scratch1_array.data = AI_PTR(activations_map[0] + 5424);
 800602c:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_42_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8006030:	e9c8 3302 	strd	r3, r3, [r8, #8]
    conv2d_40_output_array.data = AI_PTR(activations_map[0] + 14640);
 8006034:	4a96      	ldr	r2, [pc, #600]	; (8006290 <network_configure_activations+0x804>)
    conv2d_51_output_array.data = AI_PTR(activations_map[0] + 17472);
 8006036:	f244 4040 	movw	r0, #17472	; 0x4440
    conv2d_42_output_array.data = AI_PTR(activations_map[0] + 896);
 800603a:	f8df 8304 	ldr.w	r8, [pc, #772]	; 8006340 <network_configure_activations+0x8b4>
    conv2d_51_output_array.data = AI_PTR(activations_map[0] + 17472);
 800603e:	4418      	add	r0, r3
    conv2d_42_output_array.data = AI_PTR(activations_map[0] + 896);
 8006040:	e9c8 cc02 	strd	ip, ip, [r8, #8]
    conv2d_40_output_array.data = AI_PTR(activations_map[0] + 14640);
 8006044:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_43_scratch0_array.data = AI_PTR(activations_map[0] + 2944);
 8006048:	f8df 82f8 	ldr.w	r8, [pc, #760]	; 8006344 <network_configure_activations+0x8b8>
 800604c:	f503 6238 	add.w	r2, r3, #2944	; 0xb80
    conv2d_41_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8006050:	4990      	ldr	r1, [pc, #576]	; (8006294 <network_configure_activations+0x808>)
    conv2d_43_scratch0_array.data = AI_PTR(activations_map[0] + 2944);
 8006052:	e9c8 2202 	strd	r2, r2, [r8, #8]
    conv2d_43_output_array.data = AI_PTR(activations_map[0] + 17280);
 8006056:	f8df 82f0 	ldr.w	r8, [pc, #752]	; 8006348 <network_configure_activations+0x8bc>
    conv2d_41_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 800605a:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_43_output_array.data = AI_PTR(activations_map[0] + 17280);
 800605e:	e9c8 9902 	strd	r9, r9, [r8, #8]
    conv2d_44_scratch0_array.data = AI_PTR(activations_map[0] + 2944);
 8006062:	f8df 82e8 	ldr.w	r8, [pc, #744]	; 800634c <network_configure_activations+0x8c0>
    conv2d_53_scratch1_array.data = AI_PTR(activations_map[0] + 7108);
 8006066:	f641 31c4 	movw	r1, #7108	; 0x1bc4
    conv2d_55_output_array.data = AI_PTR(activations_map[0] + 11184);
 800606a:	f642 39b0 	movw	r9, #11184	; 0x2bb0
    conv2d_53_scratch1_array.data = AI_PTR(activations_map[0] + 7108);
 800606e:	4419      	add	r1, r3
    conv2d_55_output_array.data = AI_PTR(activations_map[0] + 11184);
 8006070:	4499      	add	r9, r3
    conv2d_44_scratch0_array.data = AI_PTR(activations_map[0] + 2944);
 8006072:	e9c8 2202 	strd	r2, r2, [r8, #8]
    conv2d_45_scratch0_array.data = AI_PTR(activations_map[0] + 2944);
 8006076:	f8df 82d8 	ldr.w	r8, [pc, #728]	; 8006350 <network_configure_activations+0x8c4>
 800607a:	f8c8 2008 	str.w	r2, [r8, #8]
 800607e:	f8c8 200c 	str.w	r2, [r8, #12]
    conv2d_44_scratch1_array.data = AI_PTR(activations_map[0] + 29568);
 8006082:	f503 48e7 	add.w	r8, r3, #29568	; 0x7380
 8006086:	4a84      	ldr	r2, [pc, #528]	; (8006298 <network_configure_activations+0x80c>)
 8006088:	e9c2 8802 	strd	r8, r8, [r2, #8]
    conv2d_44_output_array.data = AI_PTR(activations_map[0] + 41856);
 800608c:	4a83      	ldr	r2, [pc, #524]	; (800629c <network_configure_activations+0x810>)
    conv2d_56_scratch0_array.data = AI_PTR(activations_map[0] + 16560);
 800608e:	f244 08b0 	movw	r8, #16560	; 0x40b0
    conv2d_44_output_array.data = AI_PTR(activations_map[0] + 41856);
 8006092:	e9c2 ee02 	strd	lr, lr, [r2, #8]
    conv2d_45_output_array.data = AI_PTR(activations_map[0] + 4032);
 8006096:	f503 6e7c 	add.w	lr, r3, #4032	; 0xfc0
 800609a:	4a81      	ldr	r2, [pc, #516]	; (80062a0 <network_configure_activations+0x814>)
    conv2d_56_scratch0_array.data = AI_PTR(activations_map[0] + 16560);
 800609c:	4498      	add	r8, r3
    conv2d_45_output_array.data = AI_PTR(activations_map[0] + 4032);
 800609e:	e9c2 ee02 	strd	lr, lr, [r2, #8]
    eltwise_46_output_array.data = AI_PTR(activations_map[0] + 6080);
 80060a2:	f503 5ebe 	add.w	lr, r3, #6080	; 0x17c0
 80060a6:	4a7f      	ldr	r2, [pc, #508]	; (80062a4 <network_configure_activations+0x818>)
 80060a8:	e9c2 ee02 	strd	lr, lr, [r2, #8]
    conv2d_47_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 80060ac:	f8df e2a4 	ldr.w	lr, [pc, #676]	; 8006354 <network_configure_activations+0x8c8>
    conv2d_47_scratch1_array.data = AI_PTR(activations_map[0] + 8128);
 80060b0:	f503 52fe 	add.w	r2, r3, #8128	; 0x1fc0
    conv2d_47_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 80060b4:	e9ce 3302 	strd	r3, r3, [lr, #8]
    conv2d_47_scratch1_array.data = AI_PTR(activations_map[0] + 8128);
 80060b8:	f8df e29c 	ldr.w	lr, [pc, #668]	; 8006358 <network_configure_activations+0x8cc>
 80060bc:	e9ce 2202 	strd	r2, r2, [lr, #8]
    conv2d_48_scratch0_array.data = AI_PTR(activations_map[0] + 8128);
 80060c0:	f8df e298 	ldr.w	lr, [pc, #664]	; 800635c <network_configure_activations+0x8d0>
 80060c4:	e9ce 2202 	strd	r2, r2, [lr, #8]
    conv2d_47_output_array.data = AI_PTR(activations_map[0] + 20416);
 80060c8:	4a77      	ldr	r2, [pc, #476]	; (80062a8 <network_configure_activations+0x81c>)
    conv2d_56_output_array.data = AI_PTR(activations_map[0] + 28996);
 80060ca:	f247 1e44 	movw	lr, #28996	; 0x7144
    conv2d_47_output_array.data = AI_PTR(activations_map[0] + 20416);
 80060ce:	e9c2 7702 	strd	r7, r7, [r2, #8]
    conv2d_48_scratch1_array.data = AI_PTR(activations_map[0] + 32704);
 80060d2:	4a76      	ldr	r2, [pc, #472]	; (80062ac <network_configure_activations+0x820>)
    conv2d_56_output_array.data = AI_PTR(activations_map[0] + 28996);
 80060d4:	449e      	add	lr, r3
    conv2d_59_scratch1_array.data = AI_PTR(activations_map[0] + 6704);
 80060d6:	f641 2730 	movw	r7, #6704	; 0x1a30
    conv2d_48_scratch1_array.data = AI_PTR(activations_map[0] + 32704);
 80060da:	e9c2 6602 	strd	r6, r6, [r2, #8]
    conv2d_48_output_array.data = AI_PTR(activations_map[0] + 44992);
 80060de:	4a74      	ldr	r2, [pc, #464]	; (80062b0 <network_configure_activations+0x824>)
    conv2d_59_scratch1_array.data = AI_PTR(activations_map[0] + 6704);
 80060e0:	441f      	add	r7, r3
    conv2d_59_output_array.data = AI_PTR(activations_map[0] + 12080);
 80060e2:	f642 7630 	movw	r6, #12080	; 0x2f30
    conv2d_48_output_array.data = AI_PTR(activations_map[0] + 44992);
 80060e6:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_49_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 80060ea:	4a72      	ldr	r2, [pc, #456]	; (80062b4 <network_configure_activations+0x828>)
    conv2d_49_output_array.data = AI_PTR(activations_map[0] + 1088);
 80060ec:	f503 6588 	add.w	r5, r3, #1088	; 0x440
    conv2d_59_output_array.data = AI_PTR(activations_map[0] + 12080);
 80060f0:	441e      	add	r6, r3
    conv2d_49_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 80060f2:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_49_output_array.data = AI_PTR(activations_map[0] + 1088);
 80060f6:	4a70      	ldr	r2, [pc, #448]	; (80062b8 <network_configure_activations+0x82c>)
 80060f8:	e9c2 5502 	strd	r5, r5, [r2, #8]
    eltwise_50_output_array.data = AI_PTR(activations_map[0] + 3136);
 80060fc:	f503 6544 	add.w	r5, r3, #3136	; 0xc40
 8006100:	4a6e      	ldr	r2, [pc, #440]	; (80062bc <network_configure_activations+0x830>)
 8006102:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_51_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8006106:	4a6e      	ldr	r2, [pc, #440]	; (80062c0 <network_configure_activations+0x834>)
    conv2d_51_scratch1_array.data = AI_PTR(activations_map[0] + 5184);
 8006108:	f503 55a2 	add.w	r5, r3, #5184	; 0x1440
    conv2d_51_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 800610c:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_51_scratch1_array.data = AI_PTR(activations_map[0] + 5184);
 8006110:	4a6c      	ldr	r2, [pc, #432]	; (80062c4 <network_configure_activations+0x838>)
 8006112:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_51_output_array.data = AI_PTR(activations_map[0] + 17472);
 8006116:	4a6c      	ldr	r2, [pc, #432]	; (80062c8 <network_configure_activations+0x83c>)
    conv2d_60_scratch0_array.data = AI_PTR(activations_map[0] + 17456);
 8006118:	f244 4530 	movw	r5, #17456	; 0x4430
    conv2d_51_output_array.data = AI_PTR(activations_map[0] + 17472);
 800611c:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_53_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8006120:	4a6a      	ldr	r2, [pc, #424]	; (80062cc <network_configure_activations+0x840>)
    conv2d_60_scratch0_array.data = AI_PTR(activations_map[0] + 17456);
 8006122:	441d      	add	r5, r3
    conv2d_60_output_array.data = AI_PTR(activations_map[0] + 29892);
 8006124:	f247 40c4 	movw	r0, #29892	; 0x74c4
    conv2d_53_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8006128:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_53_scratch1_array.data = AI_PTR(activations_map[0] + 7108);
 800612c:	4a68      	ldr	r2, [pc, #416]	; (80062d0 <network_configure_activations+0x844>)
    conv2d_60_output_array.data = AI_PTR(activations_map[0] + 29892);
 800612e:	4418      	add	r0, r3
    conv2d_53_scratch1_array.data = AI_PTR(activations_map[0] + 7108);
 8006130:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_53_output_array.data = AI_PTR(activations_map[0] + 10180);
 8006134:	4a67      	ldr	r2, [pc, #412]	; (80062d4 <network_configure_activations+0x848>)
    conv2d_64_output_array.data = AI_PTR(activations_map[0] + 27668);
 8006136:	f646 4114 	movw	r1, #27668	; 0x6c14
    conv2d_53_output_array.data = AI_PTR(activations_map[0] + 10180);
 800613a:	e9c2 bb02 	strd	fp, fp, [r2, #8]
    conv2d_54_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 800613e:	4a66      	ldr	r2, [pc, #408]	; (80062d8 <network_configure_activations+0x84c>)
    conv2d_54_output_array.data = AI_PTR(activations_map[0] + 1328);
 8006140:	f503 6ba6 	add.w	fp, r3, #1328	; 0x530
    conv2d_64_output_array.data = AI_PTR(activations_map[0] + 27668);
 8006144:	4419      	add	r1, r3
    conv2d_54_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8006146:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_54_output_array.data = AI_PTR(activations_map[0] + 1328);
 800614a:	4a64      	ldr	r2, [pc, #400]	; (80062dc <network_configure_activations+0x850>)
 800614c:	e9c2 bb02 	strd	fp, fp, [r2, #8]
    conv2d_55_scratch0_array.data = AI_PTR(activations_map[0] + 2224);
 8006150:	f503 620b 	add.w	r2, r3, #2224	; 0x8b0
 8006154:	f8df b208 	ldr.w	fp, [pc, #520]	; 8006360 <network_configure_activations+0x8d4>
 8006158:	e9cb 2202 	strd	r2, r2, [fp, #8]
    conv2d_56_scratch1_array.data = AI_PTR(activations_map[0] + 2224);
 800615c:	f8df b204 	ldr.w	fp, [pc, #516]	; 8006364 <network_configure_activations+0x8d8>
 8006160:	e9cb 2202 	strd	r2, r2, [fp, #8]
    conv2d_57_scratch0_array.data = AI_PTR(activations_map[0] + 2224);
 8006164:	f8df b200 	ldr.w	fp, [pc, #512]	; 8006368 <network_configure_activations+0x8dc>
 8006168:	e9cb 2202 	strd	r2, r2, [fp, #8]
    eltwise_58_output_array.data = AI_PTR(activations_map[0] + 2224);
 800616c:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800636c <network_configure_activations+0x8e0>
 8006170:	e9cb 2202 	strd	r2, r2, [fp, #8]
    conv2d_55_scratch1_array.data = AI_PTR(activations_map[0] + 5808);
 8006174:	4a5a      	ldr	r2, [pc, #360]	; (80062e0 <network_configure_activations+0x854>)
    conv2d_66_scratch1_array.data = AI_PTR(activations_map[0] + 17504);
 8006176:	f244 4b60 	movw	fp, #17504	; 0x4460
    conv2d_55_scratch1_array.data = AI_PTR(activations_map[0] + 5808);
 800617a:	e9c2 aa02 	strd	sl, sl, [r2, #8]
    conv2d_55_output_array.data = AI_PTR(activations_map[0] + 11184);
 800617e:	4a59      	ldr	r2, [pc, #356]	; (80062e4 <network_configure_activations+0x858>)
    conv2d_66_scratch1_array.data = AI_PTR(activations_map[0] + 17504);
 8006180:	449b      	add	fp, r3
    conv2d_66_scratch2_array.data = AI_PTR(activations_map[0] + 37984);
 8006182:	f249 4a60 	movw	sl, #37984	; 0x9460
    conv2d_55_output_array.data = AI_PTR(activations_map[0] + 11184);
 8006186:	e9c2 9902 	strd	r9, r9, [r2, #8]
    conv2d_56_scratch0_array.data = AI_PTR(activations_map[0] + 16560);
 800618a:	4a57      	ldr	r2, [pc, #348]	; (80062e8 <network_configure_activations+0x85c>)
    conv2d_66_scratch2_array.data = AI_PTR(activations_map[0] + 37984);
 800618c:	449a      	add	sl, r3
    conv2d_56_scratch0_array.data = AI_PTR(activations_map[0] + 16560);
 800618e:	e9c2 8802 	strd	r8, r8, [r2, #8]
    conv2d_56_output_array.data = AI_PTR(activations_map[0] + 28996);
 8006192:	4a56      	ldr	r2, [pc, #344]	; (80062ec <network_configure_activations+0x860>)
 8006194:	e9c2 ee02 	strd	lr, lr, [r2, #8]
    conv2d_57_output_array.data = AI_PTR(activations_map[0] + 0);
 8006198:	f8df e1d4 	ldr.w	lr, [pc, #468]	; 8006370 <network_configure_activations+0x8e4>
    conv2d_59_scratch0_array.data = AI_PTR(activations_map[0] + 3120);
 800619c:	f503 6243 	add.w	r2, r3, #3120	; 0xc30
    conv2d_57_output_array.data = AI_PTR(activations_map[0] + 0);
 80061a0:	e9ce 3302 	strd	r3, r3, [lr, #8]
    conv2d_59_scratch0_array.data = AI_PTR(activations_map[0] + 3120);
 80061a4:	f8df e1cc 	ldr.w	lr, [pc, #460]	; 8006374 <network_configure_activations+0x8e8>
 80061a8:	e9ce 2202 	strd	r2, r2, [lr, #8]
    conv2d_60_scratch1_array.data = AI_PTR(activations_map[0] + 3120);
 80061ac:	f8df e1c8 	ldr.w	lr, [pc, #456]	; 8006378 <network_configure_activations+0x8ec>
 80061b0:	e9ce 2202 	strd	r2, r2, [lr, #8]
    conv2d_61_output_array.data = AI_PTR(activations_map[0] + 3120);
 80061b4:	f8df e1c4 	ldr.w	lr, [pc, #452]	; 800637c <network_configure_activations+0x8f0>
 80061b8:	e9ce 2202 	strd	r2, r2, [lr, #8]
    conv2d_63_scratch0_array.data = AI_PTR(activations_map[0] + 896);
 80061bc:	4a4c      	ldr	r2, [pc, #304]	; (80062f0 <network_configure_activations+0x864>)
    conv2d_63_scratch1_array.data = AI_PTR(activations_map[0] + 4480);
 80061be:	f503 5e8c 	add.w	lr, r3, #4480	; 0x1180
    conv2d_63_scratch0_array.data = AI_PTR(activations_map[0] + 896);
 80061c2:	e9c2 cc02 	strd	ip, ip, [r2, #8]
    conv2d_59_scratch1_array.data = AI_PTR(activations_map[0] + 6704);
 80061c6:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 8006380 <network_configure_activations+0x8f4>
    conv2d_63_output_array.data = AI_PTR(activations_map[0] + 9856);
 80061ca:	f503 521a 	add.w	r2, r3, #9856	; 0x2680
    conv2d_59_scratch1_array.data = AI_PTR(activations_map[0] + 6704);
 80061ce:	e9cc 7702 	strd	r7, r7, [ip, #8]
    conv2d_59_output_array.data = AI_PTR(activations_map[0] + 12080);
 80061d2:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 8006384 <network_configure_activations+0x8f8>
    conv2d_64_scratch0_array.data = AI_PTR(activations_map[0] + 15232);
 80061d6:	f503 576e 	add.w	r7, r3, #15232	; 0x3b80
    conv2d_59_output_array.data = AI_PTR(activations_map[0] + 12080);
 80061da:	e9cc 6602 	strd	r6, r6, [ip, #8]
    conv2d_60_scratch0_array.data = AI_PTR(activations_map[0] + 17456);
 80061de:	4e45      	ldr	r6, [pc, #276]	; (80062f4 <network_configure_activations+0x868>)
    conv2d_65_output_array.data = AI_PTR(activations_map[0] + 2464);
 80061e0:	f503 6c1a 	add.w	ip, r3, #2464	; 0x9a0
    conv2d_60_scratch0_array.data = AI_PTR(activations_map[0] + 17456);
 80061e4:	e9c6 5502 	strd	r5, r5, [r6, #8]
    conv2d_60_output_array.data = AI_PTR(activations_map[0] + 29892);
 80061e8:	4e43      	ldr	r6, [pc, #268]	; (80062f8 <network_configure_activations+0x86c>)
    conv2d_66_scratch0_array.data = AI_PTR(activations_map[0] + 4256);
 80061ea:	f503 5585 	add.w	r5, r3, #4256	; 0x10a0
    conv2d_60_output_array.data = AI_PTR(activations_map[0] + 29892);
 80061ee:	e9c6 0002 	strd	r0, r0, [r6, #8]
    conv2d_61_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 80061f2:	4842      	ldr	r0, [pc, #264]	; (80062fc <network_configure_activations+0x870>)
    dense_68_output_array.data = AI_PTR(activations_map[0] + 1280);
 80061f4:	f503 66a0 	add.w	r6, r3, #1280	; 0x500
    conv2d_61_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 80061f8:	e9c0 3302 	strd	r3, r3, [r0, #8]
    eltwise_62_output_array.data = AI_PTR(activations_map[0] + 0);
 80061fc:	4840      	ldr	r0, [pc, #256]	; (8006300 <network_configure_activations+0x874>)
 80061fe:	e9c0 3302 	strd	r3, r3, [r0, #8]
    conv2d_63_scratch1_array.data = AI_PTR(activations_map[0] + 4480);
 8006202:	4840      	ldr	r0, [pc, #256]	; (8006304 <network_configure_activations+0x878>)
 8006204:	e9c0 ee02 	strd	lr, lr, [r0, #8]
    conv2d_63_output_array.data = AI_PTR(activations_map[0] + 9856);
 8006208:	f8df e17c 	ldr.w	lr, [pc, #380]	; 8006388 <network_configure_activations+0x8fc>
    nl_69_output_array.data = AI_PTR(activations_map[0] + 8);
 800620c:	f103 0008 	add.w	r0, r3, #8
    conv2d_63_output_array.data = AI_PTR(activations_map[0] + 9856);
 8006210:	e9ce 2202 	strd	r2, r2, [lr, #8]
    conv2d_64_scratch0_array.data = AI_PTR(activations_map[0] + 15232);
 8006214:	4a3c      	ldr	r2, [pc, #240]	; (8006308 <network_configure_activations+0x87c>)
 8006216:	e9c2 7702 	strd	r7, r7, [r2, #8]
    conv2d_64_output_array.data = AI_PTR(activations_map[0] + 27668);
 800621a:	4a3c      	ldr	r2, [pc, #240]	; (800630c <network_configure_activations+0x880>)
    conv2d_64_scratch1_array.data = AI_PTR(activations_map[0] + 0);
 800621c:	4f3c      	ldr	r7, [pc, #240]	; (8006310 <network_configure_activations+0x884>)
    conv2d_64_output_array.data = AI_PTR(activations_map[0] + 27668);
 800621e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_65_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8006222:	493c      	ldr	r1, [pc, #240]	; (8006314 <network_configure_activations+0x888>)
    conv2d_65_output_array.data = AI_PTR(activations_map[0] + 2464);
 8006224:	4a3c      	ldr	r2, [pc, #240]	; (8006318 <network_configure_activations+0x88c>)
    conv2d_64_scratch1_array.data = AI_PTR(activations_map[0] + 0);
 8006226:	e9c7 3302 	strd	r3, r3, [r7, #8]
    conv2d_65_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 800622a:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_65_output_array.data = AI_PTR(activations_map[0] + 2464);
 800622e:	e9c2 cc02 	strd	ip, ip, [r2, #8]
    conv2d_66_scratch1_array.data = AI_PTR(activations_map[0] + 17504);
 8006232:	4a3a      	ldr	r2, [pc, #232]	; (800631c <network_configure_activations+0x890>)
    conv2d_66_scratch0_array.data = AI_PTR(activations_map[0] + 4256);
 8006234:	493a      	ldr	r1, [pc, #232]	; (8006320 <network_configure_activations+0x894>)
    conv2d_66_scratch2_array.data = AI_PTR(activations_map[0] + 37984);
 8006236:	f8df c154 	ldr.w	ip, [pc, #340]	; 800638c <network_configure_activations+0x900>
    conv2d_66_output_array.data = AI_PTR(activations_map[0] + 0);
 800623a:	4f3a      	ldr	r7, [pc, #232]	; (8006324 <network_configure_activations+0x898>)
    conv2d_66_scratch1_array.data = AI_PTR(activations_map[0] + 17504);
 800623c:	e9c2 bb02 	strd	fp, fp, [r2, #8]
    nl_69_output_array.data = AI_PTR(activations_map[0] + 8);
 8006240:	4a39      	ldr	r2, [pc, #228]	; (8006328 <network_configure_activations+0x89c>)
    conv2d_66_scratch0_array.data = AI_PTR(activations_map[0] + 4256);
 8006242:	e9c1 5502 	strd	r5, r5, [r1, #8]
    nl_69_output_array.data = AI_PTR(activations_map[0] + 8);
 8006246:	e9c2 0002 	strd	r0, r0, [r2, #8]
    dense_68_output_array.data = AI_PTR(activations_map[0] + 1280);
 800624a:	4d38      	ldr	r5, [pc, #224]	; (800632c <network_configure_activations+0x8a0>)
}
 800624c:	4620      	mov	r0, r4
    dense_68_0_conversion_output_array.data = AI_PTR(activations_map[0] + 0);
 800624e:	4938      	ldr	r1, [pc, #224]	; (8006330 <network_configure_activations+0x8a4>)
    conv2d_66_scratch2_array.data = AI_PTR(activations_map[0] + 37984);
 8006250:	e9cc aa02 	strd	sl, sl, [ip, #8]
    conv2d_66_output_array.data = AI_PTR(activations_map[0] + 0);
 8006254:	e9c7 3302 	strd	r3, r3, [r7, #8]
    dense_68_output_array.data = AI_PTR(activations_map[0] + 1280);
 8006258:	e9c5 6602 	strd	r6, r6, [r5, #8]
    dense_68_0_conversion_output_array.data = AI_PTR(activations_map[0] + 0);
 800625c:	e9c1 3302 	strd	r3, r3, [r1, #8]
}
 8006260:	b003      	add	sp, #12
 8006262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8006266:	4628      	mov	r0, r5
 8006268:	2213      	movs	r2, #19
 800626a:	2130      	movs	r1, #48	; 0x30
 800626c:	f015 faa0 	bl	801b7b0 <ai_platform_network_set_error>
}
 8006270:	4620      	mov	r0, r4
 8006272:	b003      	add	sp, #12
 8006274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006278:	20005618 	.word	0x20005618
 800627c:	20004f88 	.word	0x20004f88
 8006280:	20004f28 	.word	0x20004f28
 8006284:	20005088 	.word	0x20005088
 8006288:	20005288 	.word	0x20005288
 800628c:	200052b8 	.word	0x200052b8
 8006290:	20005258 	.word	0x20005258
 8006294:	200053b8 	.word	0x200053b8
 8006298:	20005748 	.word	0x20005748
 800629c:	200056e8 	.word	0x200056e8
 80062a0:	20005818 	.word	0x20005818
 80062a4:	20007408 	.word	0x20007408
 80062a8:	20005918 	.word	0x20005918
 80062ac:	20005aa8 	.word	0x20005aa8
 80062b0:	20005a48 	.word	0x20005a48
 80062b4:	20005ba8 	.word	0x20005ba8
 80062b8:	20005b78 	.word	0x20005b78
 80062bc:	20007458 	.word	0x20007458
 80062c0:	20005dd8 	.word	0x20005dd8
 80062c4:	20005e08 	.word	0x20005e08
 80062c8:	20005da8 	.word	0x20005da8
 80062cc:	20005f08 	.word	0x20005f08
 80062d0:	20005f38 	.word	0x20005f38
 80062d4:	20005ed8 	.word	0x20005ed8
 80062d8:	20006038 	.word	0x20006038
 80062dc:	20006008 	.word	0x20006008
 80062e0:	20006168 	.word	0x20006168
 80062e4:	20006108 	.word	0x20006108
 80062e8:	20006268 	.word	0x20006268
 80062ec:	20006238 	.word	0x20006238
 80062f0:	200067f8 	.word	0x200067f8
 80062f4:	200065c8 	.word	0x200065c8
 80062f8:	20006598 	.word	0x20006598
 80062fc:	200066f8 	.word	0x200066f8
 8006300:	200074f8 	.word	0x200074f8
 8006304:	20006828 	.word	0x20006828
 8006308:	20006928 	.word	0x20006928
 800630c:	200068f8 	.word	0x200068f8
 8006310:	20006958 	.word	0x20006958
 8006314:	20006a58 	.word	0x20006a58
 8006318:	20006a28 	.word	0x20006a28
 800631c:	20006ba0 	.word	0x20006ba0
 8006320:	20006b70 	.word	0x20006b70
 8006324:	20006b40 	.word	0x20006b40
 8006328:	200075d8 	.word	0x200075d8
 800632c:	200071a8 	.word	0x200071a8
 8006330:	20007130 	.word	0x20007130
 8006334:	200053e8 	.word	0x200053e8
 8006338:	20005388 	.word	0x20005388
 800633c:	200054e8 	.word	0x200054e8
 8006340:	200054b8 	.word	0x200054b8
 8006344:	200055e8 	.word	0x200055e8
 8006348:	200055b8 	.word	0x200055b8
 800634c:	20005718 	.word	0x20005718
 8006350:	20005848 	.word	0x20005848
 8006354:	20005948 	.word	0x20005948
 8006358:	20005978 	.word	0x20005978
 800635c:	20005a78 	.word	0x20005a78
 8006360:	20006138 	.word	0x20006138
 8006364:	20006298 	.word	0x20006298
 8006368:	20006398 	.word	0x20006398
 800636c:	200074a8 	.word	0x200074a8
 8006370:	20006368 	.word	0x20006368
 8006374:	20006498 	.word	0x20006498
 8006378:	200065f8 	.word	0x200065f8
 800637c:	200066c8 	.word	0x200066c8
 8006380:	200064c8 	.word	0x200064c8
 8006384:	20006468 	.word	0x20006468
 8006388:	200067c8 	.word	0x200067c8
 800638c:	20006bd0 	.word	0x20006bd0

08006390 <ai_network_get_info>:

AI_DEPRECATED
AI_API_ENTRY
ai_bool ai_network_get_info(
  ai_handle network, ai_network_report* report)
{
 8006390:	b570      	push	{r4, r5, r6, lr}
 8006392:	b0a0      	sub	sp, #128	; 0x80
 8006394:	460d      	mov	r5, r1
 8006396:	4606      	mov	r6, r0
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 8006398:	f015 f986 	bl	801b6a8 <ai_platform_context_acquire>

  if (report && net_ctx)
 800639c:	1e04      	subs	r4, r0, #0
 800639e:	bf18      	it	ne
 80063a0:	2401      	movne	r4, #1
 80063a2:	2d00      	cmp	r5, #0
 80063a4:	bf08      	it	eq
 80063a6:	2400      	moveq	r4, #0
 80063a8:	b914      	cbnz	r4, 80063b0 <ai_network_get_info+0x20>

    *report = r;
    return true;
  }
  return false;
}
 80063aa:	4620      	mov	r0, r4
 80063ac:	b020      	add	sp, #128	; 0x80
 80063ae:	bd70      	pop	{r4, r5, r6, pc}
    ai_network_report r = {
 80063b0:	226c      	movs	r2, #108	; 0x6c
 80063b2:	2100      	movs	r1, #0
 80063b4:	a805      	add	r0, sp, #20
 80063b6:	f01e fd41 	bl	8024e3c <memset>
 80063ba:	4b16      	ldr	r3, [pc, #88]	; (8006414 <ai_network_get_info+0x84>)
 80063bc:	4916      	ldr	r1, [pc, #88]	; (8006418 <ai_network_get_info+0x88>)
 80063be:	4a17      	ldr	r2, [pc, #92]	; (800641c <ai_network_get_info+0x8c>)
 80063c0:	9301      	str	r3, [sp, #4]
 80063c2:	4b17      	ldr	r3, [pc, #92]	; (8006420 <ai_network_get_info+0x90>)
 80063c4:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80063c8:	9304      	str	r3, [sp, #16]
      .runtime_revision  = ai_platform_runtime_get_revision(),
 80063ca:	f014 ff3f 	bl	801b24c <ai_platform_runtime_get_revision>
    ai_network_report r = {
 80063ce:	9005      	str	r0, [sp, #20]
      .runtime_version   = ai_platform_runtime_get_version(),
 80063d0:	f014 ffba 	bl	801b348 <ai_platform_runtime_get_version>
    ai_network_report r = {
 80063d4:	4a13      	ldr	r2, [pc, #76]	; (8006424 <ai_network_get_info+0x94>)
 80063d6:	f240 1307 	movw	r3, #263	; 0x107
 80063da:	e9cd 0206 	strd	r0, r2, [sp, #24]
 80063de:	f8ad 3020 	strh.w	r3, [sp, #32]
      .api_version            = ai_platform_api_get_version(),
 80063e2:	f015 f841 	bl	801b468 <ai_platform_api_get_version>
 80063e6:	900a      	str	r0, [sp, #40]	; 0x28
      .interface_api_version  = ai_platform_interface_api_get_version(),
 80063e8:	f015 f8ce 	bl	801b588 <ai_platform_interface_api_get_version>
    ai_network_report r = {
 80063ec:	4b0e      	ldr	r3, [pc, #56]	; (8006428 <ai_network_get_info+0x98>)
      .interface_api_version  = ai_platform_interface_api_get_version(),
 80063ee:	4602      	mov	r2, r0
    if (!ai_platform_api_get_network_report(network, &r)) return false;
 80063f0:	a901      	add	r1, sp, #4
 80063f2:	4630      	mov	r0, r6
    ai_network_report r = {
 80063f4:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
    if (!ai_platform_api_get_network_report(network, &r)) return false;
 80063f8:	f015 f9e0 	bl	801b7bc <ai_platform_api_get_network_report>
 80063fc:	4604      	mov	r4, r0
 80063fe:	2800      	cmp	r0, #0
 8006400:	d0d3      	beq.n	80063aa <ai_network_get_info+0x1a>
    *report = r;
 8006402:	a901      	add	r1, sp, #4
 8006404:	4628      	mov	r0, r5
 8006406:	227c      	movs	r2, #124	; 0x7c
 8006408:	f01e fcf0 	bl	8024dec <memcpy>
}
 800640c:	4620      	mov	r0, r4
 800640e:	b020      	add	sp, #128	; 0x80
 8006410:	bd70      	pop	{r4, r5, r6, pc}
 8006412:	bf00      	nop
 8006414:	08028b58 	.word	0x08028b58
 8006418:	08028b60 	.word	0x08028b60
 800641c:	08028b84 	.word	0x08028b84
 8006420:	08028ba0 	.word	0x08028ba0
 8006424:	08028934 	.word	0x08028934
 8006428:	012361a8 	.word	0x012361a8

0800642c <ai_network_create>:
}

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800642c:	b530      	push	{r4, r5, lr}
  return ai_platform_network_create(
 800642e:	2500      	movs	r5, #0
{
 8006430:	b083      	sub	sp, #12
  return ai_platform_network_create(
 8006432:	2405      	movs	r4, #5
 8006434:	2301      	movs	r3, #1
 8006436:	4a03      	ldr	r2, [pc, #12]	; (8006444 <ai_network_create+0x18>)
 8006438:	e9cd 4500 	strd	r4, r5, [sp]
 800643c:	f015 fdec 	bl	801c018 <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8006440:	b003      	add	sp, #12
 8006442:	bd30      	pop	{r4, r5, pc}
 8006444:	20007508 	.word	0x20007508

08006448 <ai_network_destroy>:
}

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
  return ai_platform_network_destroy(network);
 8006448:	f015 bf86 	b.w	801c358 <ai_platform_network_destroy>

0800644c <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 800644c:	b570      	push	{r4, r5, r6, lr}
 800644e:	4606      	mov	r6, r0
 8006450:	460d      	mov	r5, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8006452:	f016 f873 	bl	801c53c <ai_platform_network_init>
  if (!net_ctx) return false;
 8006456:	4604      	mov	r4, r0
 8006458:	b178      	cbz	r0, 800647a <ai_network_init+0x2e>

  ai_bool ok = true;
  ok &= network_configure_weights(net_ctx, params);
 800645a:	4629      	mov	r1, r5
 800645c:	f7fe fd14 	bl	8004e88 <network_configure_weights>
 8006460:	4603      	mov	r3, r0
  ok &= network_configure_activations(net_ctx, params);
 8006462:	4629      	mov	r1, r5
 8006464:	4620      	mov	r0, r4
  ok &= network_configure_weights(net_ctx, params);
 8006466:	461c      	mov	r4, r3
  ok &= network_configure_activations(net_ctx, params);
 8006468:	f7ff fb10 	bl	8005a8c <network_configure_activations>
 800646c:	4603      	mov	r3, r0

  ok &= ai_platform_network_post_init(network);
 800646e:	4630      	mov	r0, r6
 8006470:	401c      	ands	r4, r3
 8006472:	f016 f9f5 	bl	801c860 <ai_platform_network_post_init>
 8006476:	b2e4      	uxtb	r4, r4
 8006478:	4020      	ands	r0, r4

  return ok;
}
 800647a:	bd70      	pop	{r4, r5, r6, pc}

0800647c <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 800647c:	f016 bb06 	b.w	801ca8c <ai_platform_network_process>

08006480 <ai_network_data_activations_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_network_data_activations_buffer_get(const ai_handle ptr)
{
 8006480:	b470      	push	{r4, r5, r6}
 8006482:	b085      	sub	sp, #20
  ai_buffer buf = AI_BUFFER_INIT(
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_NETWORK_DATA_ACTIVATIONS_SIZE, 1, AI_NETWORK_DATA_ACTIVATIONS_COUNT),
    AI_NETWORK_DATA_ACTIVATIONS_SIZE,
    NULL, ptr);
  return buf;
 8006484:	4e07      	ldr	r6, [pc, #28]	; (80064a4 <ai_network_data_activations_buffer_get+0x24>)
 8006486:	f240 4401 	movw	r4, #1025	; 0x401
 800648a:	4d07      	ldr	r5, [pc, #28]	; (80064a8 <ai_network_data_activations_buffer_get+0x28>)
 800648c:	2200      	movs	r2, #0
 800648e:	f8c0 d018 	str.w	sp, [r0, #24]
 8006492:	e9c0 6100 	strd	r6, r1, [r0]
 8006496:	e9c0 5404 	strd	r5, r4, [r0, #16]
 800649a:	e9c0 2202 	strd	r2, r2, [r0, #8]
}
 800649e:	b005      	add	sp, #20
 80064a0:	bc70      	pop	{r4, r5, r6}
 80064a2:	4770      	bx	lr
 80064a4:	00040440 	.word	0x00040440
 80064a8:	00038200 	.word	0x00038200

080064ac <ai_network_data_weights_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_network_data_weights_buffer_get(const ai_handle ptr)
{
 80064ac:	b470      	push	{r4, r5, r6}
 80064ae:	b085      	sub	sp, #20
  ai_buffer buf = AI_BUFFER_INIT(
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8|AI_BUFFER_FMT_FLAG_CONST,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_NETWORK_DATA_WEIGHTS_SIZE, 1, AI_NETWORK_DATA_WEIGHTS_COUNT),
    AI_NETWORK_DATA_WEIGHTS_SIZE,
    NULL, ptr);
  return buf;
 80064b0:	4e07      	ldr	r6, [pc, #28]	; (80064d0 <ai_network_data_weights_buffer_get+0x24>)
 80064b2:	f240 4401 	movw	r4, #1025	; 0x401
 80064b6:	4d07      	ldr	r5, [pc, #28]	; (80064d4 <ai_network_data_weights_buffer_get+0x28>)
 80064b8:	2200      	movs	r2, #0
 80064ba:	f8c0 d018 	str.w	sp, [r0, #24]
 80064be:	e9c0 6100 	strd	r6, r1, [r0]
 80064c2:	e9c0 5404 	strd	r5, r4, [r0, #16]
 80064c6:	e9c0 2202 	strd	r2, r2, [r0, #8]
}
 80064ca:	b005      	add	sp, #20
 80064cc:	bc70      	pop	{r4, r5, r6}
 80064ce:	4770      	bx	lr
 80064d0:	40040440 	.word	0x40040440
 80064d4:	00064c68 	.word	0x00064c68

080064d8 <ai_network_data_weights_get>:
    AI_PTR(AI_MAGIC_MARKER)
  };

  return AI_HANDLE_PTR(s_network_weights_table);

}
 80064d8:	4800      	ldr	r0, [pc, #0]	; (80064dc <ai_network_data_weights_get+0x4>)
 80064da:	4770      	bx	lr
 80064dc:	080970a8 	.word	0x080970a8

080064e0 <SD_initialize>:
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
  Stat = STA_NOINIT;
 80064e0:	2301      	movs	r3, #1
  if(BSP_SD_GetCardState(0) == SD_TRANSFER_OK)
 80064e2:	2000      	movs	r0, #0
{
 80064e4:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 80064e6:	4c07      	ldr	r4, [pc, #28]	; (8006504 <SD_initialize+0x24>)
 80064e8:	7023      	strb	r3, [r4, #0]
  Stat = STA_NOINIT;
 80064ea:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState(0) == SD_TRANSFER_OK)
 80064ec:	f004 fdfe 	bl	800b0ec <BSP_SD_GetCardState>
 80064f0:	b918      	cbnz	r0, 80064fa <SD_initialize+0x1a>
    Stat &= ~STA_NOINIT;
 80064f2:	7823      	ldrb	r3, [r4, #0]
 80064f4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80064f8:	7023      	strb	r3, [r4, #0]
  return Stat;
 80064fa:	7823      	ldrb	r3, [r4, #0]
 80064fc:	b2db      	uxtb	r3, r3
  {
    Stat = SD_CheckStatus(lun);
  }

#else
  Stat = SD_CheckStatus(lun);
 80064fe:	7023      	strb	r3, [r4, #0]
#endif
  return Stat;
 8006500:	7820      	ldrb	r0, [r4, #0]
}
 8006502:	bd10      	pop	{r4, pc}
 8006504:	20007618 	.word	0x20007618

08006508 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006508:	b508      	push	{r3, lr}
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks(0, (uint32_t*)buff,
 800650a:	2000      	movs	r0, #0
 800650c:	f004 fdc2 	bl	800b094 <BSP_SD_ReadBlocks>
 8006510:	b108      	cbz	r0, 8006516 <SD_read+0xe>
  DRESULT res = RES_ERROR;
 8006512:	2001      	movs	r0, #1
    }
    res = RES_OK;
  }

  return res;
}
 8006514:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState(0) != SD_TRANSFER_OK)
 8006516:	2000      	movs	r0, #0
 8006518:	f004 fde8 	bl	800b0ec <BSP_SD_GetCardState>
 800651c:	2800      	cmp	r0, #0
 800651e:	d0f9      	beq.n	8006514 <SD_read+0xc>
 8006520:	2000      	movs	r0, #0
 8006522:	f004 fde3 	bl	800b0ec <BSP_SD_GetCardState>
 8006526:	2800      	cmp	r0, #0
 8006528:	d1f5      	bne.n	8006516 <SD_read+0xe>
 800652a:	e7f3      	b.n	8006514 <SD_read+0xc>

0800652c <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800652c:	4b16      	ldr	r3, [pc, #88]	; (8006588 <SD_ioctl+0x5c>)
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	07db      	lsls	r3, r3, #31
 8006532:	d412      	bmi.n	800655a <SD_ioctl+0x2e>
 8006534:	4608      	mov	r0, r1
{
 8006536:	b510      	push	{r4, lr}
 8006538:	4614      	mov	r4, r2
 800653a:	b08a      	sub	sp, #40	; 0x28
 800653c:	2903      	cmp	r1, #3
 800653e:	d821      	bhi.n	8006584 <SD_ioctl+0x58>
 8006540:	e8df f001 	tbb	[pc, r1]
 8006544:	0d170209 	.word	0x0d170209
    res = RES_OK;
    break;

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(0, &CardInfo);
 8006548:	a901      	add	r1, sp, #4
 800654a:	2000      	movs	r0, #0
 800654c:	f004 fdda 	bl	800b104 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006550:	9b07      	ldr	r3, [sp, #28]
    res = RES_OK;
 8006552:	2000      	movs	r0, #0
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006554:	6023      	str	r3, [r4, #0]
  default:
    res = RES_PARERR;
  }

  return res;
}
 8006556:	b00a      	add	sp, #40	; 0x28
 8006558:	bd10      	pop	{r4, pc}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800655a:	2003      	movs	r0, #3
}
 800655c:	4770      	bx	lr
    BSP_SD_GetCardInfo(0, &CardInfo);
 800655e:	a901      	add	r1, sp, #4
 8006560:	2000      	movs	r0, #0
 8006562:	f004 fdcf 	bl	800b104 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006566:	9b08      	ldr	r3, [sp, #32]
 8006568:	2000      	movs	r0, #0
 800656a:	0a5b      	lsrs	r3, r3, #9
 800656c:	6023      	str	r3, [r4, #0]
}
 800656e:	b00a      	add	sp, #40	; 0x28
 8006570:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(0, &CardInfo);
 8006572:	a901      	add	r1, sp, #4
 8006574:	2000      	movs	r0, #0
 8006576:	f004 fdc5 	bl	800b104 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800657a:	9b08      	ldr	r3, [sp, #32]
    res = RES_OK;
 800657c:	2000      	movs	r0, #0
    *(WORD*)buff = CardInfo.LogBlockSize;
 800657e:	8023      	strh	r3, [r4, #0]
}
 8006580:	b00a      	add	sp, #40	; 0x28
 8006582:	bd10      	pop	{r4, pc}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006584:	2004      	movs	r0, #4
 8006586:	e7e6      	b.n	8006556 <SD_ioctl+0x2a>
 8006588:	20007618 	.word	0x20007618

0800658c <SD_write>:
{
 800658c:	b508      	push	{r3, lr}
  if(BSP_SD_WriteBlocks(0, (uint32_t*)buff,
 800658e:	2000      	movs	r0, #0
 8006590:	f004 fd96 	bl	800b0c0 <BSP_SD_WriteBlocks>
 8006594:	b108      	cbz	r0, 800659a <SD_write+0xe>
  DRESULT res = RES_ERROR;
 8006596:	2001      	movs	r0, #1
}
 8006598:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState(0) != SD_TRANSFER_OK)
 800659a:	2000      	movs	r0, #0
 800659c:	f004 fda6 	bl	800b0ec <BSP_SD_GetCardState>
 80065a0:	2800      	cmp	r0, #0
 80065a2:	d0f9      	beq.n	8006598 <SD_write+0xc>
 80065a4:	2000      	movs	r0, #0
 80065a6:	f004 fda1 	bl	800b0ec <BSP_SD_GetCardState>
 80065aa:	2800      	cmp	r0, #0
 80065ac:	d1f5      	bne.n	800659a <SD_write+0xe>
 80065ae:	e7f3      	b.n	8006598 <SD_write+0xc>

080065b0 <SD_status>:
{
 80065b0:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 80065b2:	2301      	movs	r3, #1
 80065b4:	4c05      	ldr	r4, [pc, #20]	; (80065cc <SD_status+0x1c>)
  if(BSP_SD_GetCardState(0) == SD_TRANSFER_OK)
 80065b6:	2000      	movs	r0, #0
  Stat = STA_NOINIT;
 80065b8:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState(0) == SD_TRANSFER_OK)
 80065ba:	f004 fd97 	bl	800b0ec <BSP_SD_GetCardState>
 80065be:	b918      	cbnz	r0, 80065c8 <SD_status+0x18>
    Stat &= ~STA_NOINIT;
 80065c0:	7823      	ldrb	r3, [r4, #0]
 80065c2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80065c6:	7023      	strb	r3, [r4, #0]
  return Stat;
 80065c8:	7820      	ldrb	r0, [r4, #0]
}
 80065ca:	bd10      	pop	{r4, pc}
 80065cc:	20007618 	.word	0x20007618

080065d0 <HAL_MspInit>:
/**
 * @brief  Initializes the Global MSP.
 * @param  None
 * @retval None
 */
void HAL_MspInit(void) {}
 80065d0:	4770      	bx	lr
 80065d2:	bf00      	nop

080065d4 <HAL_RNG_MspInit>:
 *           - Peripheral's clock enable
 * @param hrng: RNG handle pointer
 * @retval None
 */
void HAL_RNG_MspInit(RNG_HandleTypeDef *hrng)
{
 80065d4:	b500      	push	{lr}
 80065d6:	b0b3      	sub	sp, #204	; 0xcc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

  /*Select PLL output as RNG clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80065d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_PLL;
 80065dc:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80065e0:	a802      	add	r0, sp, #8
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80065e2:	9202      	str	r2, [sp, #8]
  PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_PLL;
 80065e4:	9322      	str	r3, [sp, #136]	; 0x88
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80065e6:	f009 fbc9 	bl	800fd7c <HAL_RCCEx_PeriphCLKConfig>

  /* RNG Peripheral clock enable */
  __HAL_RCC_RNG_CLK_ENABLE();
 80065ea:	4b08      	ldr	r3, [pc, #32]	; (800660c <HAL_RNG_MspInit+0x38>)
 80065ec:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 80065f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065f4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 80065f8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80065fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006600:	9301      	str	r3, [sp, #4]
 8006602:	9b01      	ldr	r3, [sp, #4]
}
 8006604:	b033      	add	sp, #204	; 0xcc
 8006606:	f85d fb04 	ldr.w	pc, [sp], #4
 800660a:	bf00      	nop
 800660c:	58024400 	.word	0x58024400

08006610 <HAL_RNG_MspDeInit>:
 * @retval None
 */
void HAL_RNG_MspDeInit(RNG_HandleTypeDef *hrng)
{
  /* Enable RNG reset state */
  __HAL_RCC_RNG_FORCE_RESET();
 8006610:	4b06      	ldr	r3, [pc, #24]	; (800662c <HAL_RNG_MspDeInit+0x1c>)
 8006612:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006616:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800661a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Release RNG from reset state */
  __HAL_RCC_RNG_RELEASE_RESET();
 800661e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006622:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006626:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800662a:	4770      	bx	lr
 800662c:	58024400 	.word	0x58024400

08006630 <HAL_UART_MspInit>:
  *           - NVIC configuration for DMA interrupt request enable
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8006630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  RCC_PeriphCLKInitTypeDef RCC_PeriphClkInit;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8006634:	f8df a158 	ldr.w	sl, [pc, #344]	; 8006790 <HAL_UART_MspInit+0x160>
  USARTx_RX_GPIO_CLK_ENABLE();

  /* Select SysClk as source of USART1 clocks */
  RCC_PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART16;
 8006638:	2701      	movs	r7, #1
{
 800663a:	b0bb      	sub	sp, #236	; 0xec
  RCC_PeriphClkInit.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800663c:	2400      	movs	r4, #0
  USARTx_TX_GPIO_CLK_ENABLE();
 800663e:	f8da 30e0 	ldr.w	r3, [sl, #224]	; 0xe0
{
 8006642:	4606      	mov	r6, r0
  HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphClkInit);
 8006644:	a80a      	add	r0, sp, #40	; 0x28
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = USARTx_TX_AF;

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8006646:	f8df 914c 	ldr.w	r9, [pc, #332]	; 8006794 <HAL_UART_MspInit+0x164>
  USARTx_TX_GPIO_CLK_ENABLE();
 800664a:	433b      	orrs	r3, r7
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 800664c:	2507      	movs	r5, #7

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 800664e:	f44f 6880 	mov.w	r8, #1024	; 0x400
  hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
  hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
  hdma_tx.Init.Mode                = DMA_NORMAL;
  hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
  hdma_tx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
  hdma_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8006652:	f04f 0b03 	mov.w	fp, #3
  USARTx_TX_GPIO_CLK_ENABLE();
 8006656:	f8ca 30e0 	str.w	r3, [sl, #224]	; 0xe0
 800665a:	f8da 30e0 	ldr.w	r3, [sl, #224]	; 0xe0
 800665e:	403b      	ands	r3, r7
 8006660:	9300      	str	r3, [sp, #0]
 8006662:	9b00      	ldr	r3, [sp, #0]
  USARTx_RX_GPIO_CLK_ENABLE();
 8006664:	f8da 30e0 	ldr.w	r3, [sl, #224]	; 0xe0
 8006668:	433b      	orrs	r3, r7
 800666a:	f8ca 30e0 	str.w	r3, [sl, #224]	; 0xe0
 800666e:	f8da 30e0 	ldr.w	r3, [sl, #224]	; 0xe0
  RCC_PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART16;
 8006672:	970a      	str	r7, [sp, #40]	; 0x28
  USARTx_RX_GPIO_CLK_ENABLE();
 8006674:	403b      	ands	r3, r7
  RCC_PeriphClkInit.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8006676:	9429      	str	r4, [sp, #164]	; 0xa4
  USARTx_RX_GPIO_CLK_ENABLE();
 8006678:	9301      	str	r3, [sp, #4]
 800667a:	9b01      	ldr	r3, [sp, #4]
  HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphClkInit);
 800667c:	f009 fb7e 	bl	800fd7c <HAL_RCCEx_PeriphCLKConfig>
  USARTx_CLK_ENABLE();
 8006680:	f8da 10f0 	ldr.w	r1, [sl, #240]	; 0xf0
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8006684:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006688:	2302      	movs	r3, #2
  USARTx_CLK_ENABLE();
 800668a:	f041 0110 	orr.w	r1, r1, #16
 800668e:	f8ca 10f0 	str.w	r1, [sl, #240]	; 0xf0
 8006692:	f8da 10f0 	ldr.w	r1, [sl, #240]	; 0xf0
 8006696:	f001 0110 	and.w	r1, r1, #16
 800669a:	9102      	str	r1, [sp, #8]
 800669c:	9902      	ldr	r1, [sp, #8]
  DMAx_CLK_ENABLE();
 800669e:	f8da 10d8 	ldr.w	r1, [sl, #216]	; 0xd8
 80066a2:	4339      	orrs	r1, r7
 80066a4:	f8ca 10d8 	str.w	r1, [sl, #216]	; 0xd8
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80066a8:	a904      	add	r1, sp, #16
  DMAx_CLK_ENABLE();
 80066aa:	f8da 00d8 	ldr.w	r0, [sl, #216]	; 0xd8
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 80066ae:	9508      	str	r5, [sp, #32]
  DMAx_CLK_ENABLE();
 80066b0:	4038      	ands	r0, r7
  hdma_tx.Instance                 = USARTx_TX_DMA_STREAM;
 80066b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006798 <HAL_UART_MspInit+0x168>
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 80066b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80066ba:	2201      	movs	r2, #1
 80066bc:	2303      	movs	r3, #3
  DMAx_CLK_ENABLE();
 80066be:	9003      	str	r0, [sp, #12]
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80066c0:	4648      	mov	r0, r9
  DMAx_CLK_ENABLE();
 80066c2:	f8dd c00c 	ldr.w	ip, [sp, #12]
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 80066c6:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80066ca:	f007 fab3 	bl	800dc34 <HAL_GPIO_Init>
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 80066ce:	a904      	add	r1, sp, #16
 80066d0:	4648      	mov	r0, r9
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 80066d2:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 80066d4:	f8cd 8010 	str.w	r8, [sp, #16]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 80066d8:	f007 faac 	bl	800dc34 <HAL_GPIO_Init>
  hdma_tx.Instance                 = USARTx_TX_DMA_STREAM;
 80066dc:	482a      	ldr	r0, [pc, #168]	; (8006788 <HAL_UART_MspInit+0x158>)
  hdma_tx.Init.MemBurst            = DMA_MBURST_INC4;
 80066de:	f44f 0900 	mov.w	r9, #8388608	; 0x800000
  hdma_tx.Init.PeriphBurst         = DMA_PBURST_INC4;
 80066e2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  hdma_tx.Init.Request             = USARTx_TX_DMA_CHANNEL;
 80066e6:	212a      	movs	r1, #42	; 0x2a
  hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80066e8:	2240      	movs	r2, #64	; 0x40

  /* Associate the initialized DMA handle to the UART handle */
  __HAL_LINKDMA(huart, hdmatx, hdma_tx);

  /* Configure the DMA handler for reception process */
  hdma_rx.Instance                 = USARTx_RX_DMA_STREAM;
 80066ea:	4d28      	ldr	r5, [pc, #160]	; (800678c <HAL_UART_MspInit+0x15c>)
  hdma_tx.Instance                 = USARTx_TX_DMA_STREAM;
 80066ec:	f8ca 0000 	str.w	r0, [sl]
  HAL_DMA_Init(&hdma_tx);
 80066f0:	4650      	mov	r0, sl
  hdma_tx.Init.PeriphBurst         = DMA_PBURST_INC4;
 80066f2:	f8ca 3030 	str.w	r3, [sl, #48]	; 0x30
  hdma_tx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80066f6:	f8ca 4024 	str.w	r4, [sl, #36]	; 0x24
  hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80066fa:	e9ca 1201 	strd	r1, r2, [sl, #4]
  hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 80066fe:	e9ca 4803 	strd	r4, r8, [sl, #12]
  hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8006702:	e9ca 4405 	strd	r4, r4, [sl, #20]
  hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
 8006706:	e9ca 4407 	strd	r4, r4, [sl, #28]
  hdma_tx.Init.MemBurst            = DMA_MBURST_INC4;
 800670a:	e9ca b90a 	strd	fp, r9, [sl, #40]	; 0x28
  HAL_DMA_Init(&hdma_tx);
 800670e:	f005 f8fd 	bl	800b90c <HAL_DMA_Init>
  hdma_rx.Instance                 = USARTx_RX_DMA_STREAM;
 8006712:	f8df c088 	ldr.w	ip, [pc, #136]	; 800679c <HAL_UART_MspInit+0x16c>
  hdma_rx.Init.Mode                = DMA_NORMAL;
  hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
  hdma_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
  hdma_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  hdma_rx.Init.MemBurst            = DMA_MBURST_INC4;
  hdma_rx.Init.PeriphBurst         = DMA_PBURST_INC4;
 8006716:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  hdma_rx.Init.Request             = USARTx_RX_DMA_CHANNEL;
 800671a:	2129      	movs	r1, #41	; 0x29
  hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 800671c:	f44f 3200 	mov.w	r2, #131072	; 0x20000

  HAL_DMA_Init(&hdma_rx);
 8006720:	4628      	mov	r0, r5
  __HAL_LINKDMA(huart, hdmatx, hdma_tx);
 8006722:	f8c6 a074 	str.w	sl, [r6, #116]	; 0x74
  hdma_rx.Init.PeriphBurst         = DMA_PBURST_INC4;
 8006726:	632b      	str	r3, [r5, #48]	; 0x30
  hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8006728:	622a      	str	r2, [r5, #32]
  __HAL_LINKDMA(huart, hdmatx, hdma_tx);
 800672a:	f8ca 6038 	str.w	r6, [sl, #56]	; 0x38
  hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
 800672e:	f8c5 8010 	str.w	r8, [r5, #16]
  hdma_rx.Init.Mode                = DMA_NORMAL;
 8006732:	61ec      	str	r4, [r5, #28]
  hdma_rx.Init.MemBurst            = DMA_MBURST_INC4;
 8006734:	f8c5 902c 	str.w	r9, [r5, #44]	; 0x2c
  hdma_rx.Init.Request             = USARTx_RX_DMA_CHANNEL;
 8006738:	e9c5 c100 	strd	ip, r1, [r5]
  hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800673c:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8006740:	e9c5 4405 	strd	r4, r4, [r5, #20]
  hdma_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8006744:	e9c5 4b09 	strd	r4, fp, [r5, #36]	; 0x24
  HAL_DMA_Init(&hdma_rx);
 8006748:	f005 f8e0 	bl	800b90c <HAL_DMA_Init>
  /* Associate the initialized DMA handle to the the UART handle */
  __HAL_LINKDMA(huart, hdmarx, hdma_rx);

  /*##-4- Configure the NVIC for DMA #########################################*/
  /* NVIC configuration for DMA transfer complete interrupt (USARTx_TX) */
  HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, 0, 1);
 800674c:	463a      	mov	r2, r7
 800674e:	4621      	mov	r1, r4
 8006750:	202f      	movs	r0, #47	; 0x2f
  __HAL_LINKDMA(huart, hdmarx, hdma_rx);
 8006752:	67b5      	str	r5, [r6, #120]	; 0x78
 8006754:	63ae      	str	r6, [r5, #56]	; 0x38
  HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, 0, 1);
 8006756:	f004 fd83 	bl	800b260 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 800675a:	202f      	movs	r0, #47	; 0x2f
 800675c:	f004 fdba 	bl	800b2d4 <HAL_NVIC_EnableIRQ>

  /* NVIC configuration for DMA transfer complete interrupt (USARTx_RX) */
  HAL_NVIC_SetPriority(USARTx_DMA_RX_IRQn, 0, 0);
 8006760:	4622      	mov	r2, r4
 8006762:	4621      	mov	r1, r4
 8006764:	2010      	movs	r0, #16
 8006766:	f004 fd7b 	bl	800b260 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTx_DMA_RX_IRQn);
 800676a:	2010      	movs	r0, #16
 800676c:	f004 fdb2 	bl	800b2d4 <HAL_NVIC_EnableIRQ>

  /* NVIC configuration for USART, to catch the TX complete */
  HAL_NVIC_SetPriority(USARTx_IRQn, 0, 1);
 8006770:	463a      	mov	r2, r7
 8006772:	4621      	mov	r1, r4
 8006774:	2025      	movs	r0, #37	; 0x25
 8006776:	f004 fd73 	bl	800b260 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTx_IRQn);
 800677a:	2025      	movs	r0, #37	; 0x25
 800677c:	f004 fdaa 	bl	800b2d4 <HAL_NVIC_EnableIRQ>
}
 8006780:	b03b      	add	sp, #236	; 0xec
 8006782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006786:	bf00      	nop
 8006788:	400200b8 	.word	0x400200b8
 800678c:	200088cc 	.word	0x200088cc
 8006790:	58024400 	.word	0x58024400
 8006794:	58020000 	.word	0x58020000
 8006798:	20008944 	.word	0x20008944
 800679c:	40020088 	.word	0x40020088

080067a0 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 80067a0:	4770      	bx	lr
 80067a2:	bf00      	nop

080067a4 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80067a4:	e7fe      	b.n	80067a4 <HardFault_Handler>
 80067a6:	bf00      	nop

080067a8 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80067a8:	e7fe      	b.n	80067a8 <MemManage_Handler>
 80067aa:	bf00      	nop

080067ac <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80067ac:	e7fe      	b.n	80067ac <BusFault_Handler>
 80067ae:	bf00      	nop

080067b0 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80067b0:	e7fe      	b.n	80067b0 <UsageFault_Handler>
 80067b2:	bf00      	nop

080067b4 <SVC_Handler>:
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop

080067b8 <DebugMon_Handler>:
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop

080067bc <PendSV_Handler>:
 80067bc:	4770      	bx	lr
 80067be:	bf00      	nop

080067c0 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 80067c0:	f004 bd08 	b.w	800b1d4 <HAL_IncTick>

080067c4 <DMA2_Stream3_IRQHandler>:
  * @param  None
  * @retval None
  */
void DMA2_Stream3_IRQHandler(void)
{
  BSP_CAMERA_DMA_IRQHandler(0);
 80067c4:	2000      	movs	r0, #0
 80067c6:	f003 bded 	b.w	800a3a4 <BSP_CAMERA_DMA_IRQHandler>
 80067ca:	bf00      	nop

080067cc <DCMI_IRQHandler>:
  * @param  None
  * @retval None
  */
void DCMI_IRQHandler(void)
{
   BSP_CAMERA_IRQHandler(0);
 80067cc:	2000      	movs	r0, #0
 80067ce:	f003 bde3 	b.w	800a398 <BSP_CAMERA_IRQHandler>
 80067d2:	bf00      	nop

080067d4 <MDMA_IRQHandler>:
  * @param  None
  * @retval None
  */
void MDMA_IRQHandler(void)
{
  HAL_MDMA_IRQHandler(&hmdma);
 80067d4:	4801      	ldr	r0, [pc, #4]	; (80067dc <MDMA_IRQHandler+0x8>)
 80067d6:	f008 bac7 	b.w	800ed68 <HAL_MDMA_IRQHandler>
 80067da:	bf00      	nop
 80067dc:	20009858 	.word	0x20009858

080067e0 <DSI_IRQHandler>:
  * @param  None
  * @retval None
  */
void DSI_IRQHandler(void)
{
  HAL_DSI_IRQHandler(&hlcd_dsi);
 80067e0:	4801      	ldr	r0, [pc, #4]	; (80067e8 <DSI_IRQHandler+0x8>)
 80067e2:	f006 bf09 	b.w	800d5f8 <HAL_DSI_IRQHandler>
 80067e6:	bf00      	nop
 80067e8:	2000a1a8 	.word	0x2000a1a8

080067ec <DMA2D_IRQHandler>:
  * @param  None
  * @retval None
  */
void DMA2D_IRQHandler(void)
{
  HAL_DMA2D_IRQHandler(&hlcd_dma2d);
 80067ec:	4801      	ldr	r0, [pc, #4]	; (80067f4 <DMA2D_IRQHandler+0x8>)
 80067ee:	f006 bd3b 	b.w	800d268 <HAL_DMA2D_IRQHandler>
 80067f2:	bf00      	nop
 80067f4:	2000a1c4 	.word	0x2000a1c4

080067f8 <DMA1_Stream5_IRQHandler>:
  * @Note   This function is redefined in "main.h" and related to DMA stream
  *         used for USART data transmission
  */
void USARTx_DMA_RX_IRQHandler(void)
{
  HAL_DMA_IRQHandler(App_Context.Test_ContextPtr->UartContext.UartHandle.hdmarx);
 80067f8:	4b02      	ldr	r3, [pc, #8]	; (8006804 <DMA1_Stream5_IRQHandler+0xc>)
 80067fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067fc:	f8d3 0534 	ldr.w	r0, [r3, #1332]	; 0x534
 8006800:	f006 b812 	b.w	800c828 <HAL_DMA_IRQHandler>
 8006804:	20009824 	.word	0x20009824

08006808 <DMA1_Stream7_IRQHandler>:
  * @Note   This function is redefined in "main.h" and related to DMA stream
  *         used for USART data reception
  */
void USARTx_DMA_TX_IRQHandler(void)
{
  HAL_DMA_IRQHandler(App_Context.Test_ContextPtr->UartContext.UartHandle.hdmatx);
 8006808:	4b02      	ldr	r3, [pc, #8]	; (8006814 <DMA1_Stream7_IRQHandler+0xc>)
 800680a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800680c:	f8d3 0530 	ldr.w	r0, [r3, #1328]	; 0x530
 8006810:	f006 b80a 	b.w	800c828 <HAL_DMA_IRQHandler>
 8006814:	20009824 	.word	0x20009824

08006818 <USART1_IRQHandler>:
  * @note   This function is redefined in "main.h" and related to DMA
  *         used for USART data transmission
  */
void USARTx_IRQHandler(void)
{
  HAL_UART_IRQHandler(&App_Context.Test_ContextPtr->UartContext.UartHandle);
 8006818:	4b02      	ldr	r3, [pc, #8]	; (8006824 <USART1_IRQHandler+0xc>)
 800681a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800681c:	f200 40bc 	addw	r0, r0, #1212	; 0x4bc
 8006820:	f00b be8e 	b.w	8012540 <HAL_UART_IRQHandler>
 8006824:	20009824 	.word	0x20009824

08006828 <LTDC_IRQHandler>:
  * @param  None
  * @retval None
  */
void LTDC_IRQHandler(void)
{
  HAL_LTDC_IRQHandler(&hlcd_ltdc);
 8006828:	4801      	ldr	r0, [pc, #4]	; (8006830 <LTDC_IRQHandler+0x8>)
 800682a:	f008 b869 	b.w	800e900 <HAL_LTDC_IRQHandler>
 800682e:	bf00      	nop
 8006830:	2000a0e4 	.word	0x2000a0e4

08006834 <SystemInit>:
 */
void SystemInit(void)
{
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8006834:	4988      	ldr	r1, [pc, #544]	; (8006a58 <SystemInit+0x224>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006836:	2200      	movs	r2, #0
  RCC->CR |= RCC_CR_HSION;
 8006838:	4b88      	ldr	r3, [pc, #544]	; (8006a5c <SystemInit+0x228>)

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800683a:	4889      	ldr	r0, [pc, #548]	; (8006a60 <SystemInit+0x22c>)
{
 800683c:	b4f0      	push	{r4, r5, r6, r7}
  SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 800683e:	f8d1 4088 	ldr.w	r4, [r1, #136]	; 0x88
{
 8006842:	b082      	sub	sp, #8

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8006844:	4d87      	ldr	r5, [pc, #540]	; (8006a64 <SystemInit+0x230>)
  SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8006846:	f444 0470 	orr.w	r4, r4, #15728640	; 0xf00000

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800684a:	4e87      	ldr	r6, [pc, #540]	; (8006a68 <SystemInit+0x234>)
  SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 800684c:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
  SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 8006850:	690c      	ldr	r4, [r1, #16]
 8006852:	f044 0404 	orr.w	r4, r4, #4
 8006856:	610c      	str	r4, [r1, #16]
  RCC->CR |= RCC_CR_HSION;
 8006858:	681c      	ldr	r4, [r3, #0]
  if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800685a:	4984      	ldr	r1, [pc, #528]	; (8006a6c <SystemInit+0x238>)
  RCC->CR |= RCC_CR_HSION;
 800685c:	f044 0401 	orr.w	r4, r4, #1
 8006860:	601c      	str	r4, [r3, #0]
  RCC->CFGR = 0x00000000;
 8006862:	611a      	str	r2, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8006864:	681c      	ldr	r4, [r3, #0]
 8006866:	4020      	ands	r0, r4
 8006868:	6018      	str	r0, [r3, #0]
  RCC->D1CFGR = 0x00000000;
 800686a:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 800686c:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 800686e:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x00000000;
 8006870:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x00000000;
 8006872:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x00000000;
 8006874:	631a      	str	r2, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
 8006876:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x00000000;
 8006878:	639a      	str	r2, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
 800687a:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x00000000;
 800687c:	641a      	str	r2, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
 800687e:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= 0xFFFBFFFFU;
 8006880:	6818      	ldr	r0, [r3, #0]
 8006882:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8006886:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 8006888:	661a      	str	r2, [r3, #96]	; 0x60
  EXTI_D2->EMR3 |= 0x4000UL;
 800688a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800688c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006890:	626b      	str	r3, [r5, #36]	; 0x24
  if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8006892:	6833      	ldr	r3, [r6, #0]
 8006894:	4019      	ands	r1, r3
 8006896:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800689a:	d202      	bcs.n	80068a2 <SystemInit+0x6e>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x00000001U;
 800689c:	4b74      	ldr	r3, [pc, #464]	; (8006a70 <SystemInit+0x23c>)
 800689e:	2201      	movs	r2, #1
 80068a0:	601a      	str	r2, [r3, #0]
 * @param  None
 * @retval None
 */
void SystemInit_ExtMemCtl(void)
{
  __IO uint32_t tmp = 0;
 80068a2:	2300      	movs	r3, #0
  register uint32_t tmpreg = 0, timeout = 0xFFFF;
  register __IO uint32_t index;

  /* Enable GPIOD, GPIOE, GPIOF, GPIOG, GPIOH and GPIOI interface
      clock */
  RCC->AHB4ENR |= 0x000001F8;
 80068a4:	486d      	ldr	r0, [pc, #436]	; (8006a5c <SystemInit+0x228>)

  /* Delay after an RCC peripheral clock enabling */
  tmp = READ_BIT(RCC->AHB4ENR, RCC_AHB4ENR_GPIOEEN);

  /* Connect PDx pins to FMC Alternate function */
  GPIOD->AFR[0] = 0x000000CC;
 80068a6:	4973      	ldr	r1, [pc, #460]	; (8006a74 <SystemInit+0x240>)
 80068a8:	f04f 0ccc 	mov.w	ip, #204	; 0xcc
  __IO uint32_t tmp = 0;
 80068ac:	9300      	str	r3, [sp, #0]
  /* Configure PDx pins in Pull-up */
  GPIOD->PUPDR = 0x50150005;

  /* Connect PEx pins to FMC Alternate function */
  GPIOE->AFR[0] = 0xC00000CC;
  GPIOE->AFR[1] = 0xCCCCCCCC;
 80068ae:	f04f 34cc 	mov.w	r4, #3435973836	; 0xcccccccc
  RCC->AHB4ENR |= 0x000001F8;
 80068b2:	f8d0 20e0 	ldr.w	r2, [r0, #224]	; 0xe0
  /* Configure PHx pins in Pull-up */
  GPIOH->PUPDR = 0x55555400;

  /* Connect PIx pins to FMC Alternate function */
  GPIOI->AFR[0] = 0xCCCCCCCC;
  GPIOI->AFR[1] = 0x00000CC0;
 80068b6:	f44f 654c 	mov.w	r5, #3264	; 0xcc0
  GPIOD->AFR[1] = 0xCC000CCC;
 80068ba:	4f6f      	ldr	r7, [pc, #444]	; (8006a78 <SystemInit+0x244>)
  RCC->AHB4ENR |= 0x000001F8;
 80068bc:	f442 72fc 	orr.w	r2, r2, #504	; 0x1f8
  GPIOD->MODER = 0xAFEAFFFA;
 80068c0:	4e6e      	ldr	r6, [pc, #440]	; (8006a7c <SystemInit+0x248>)
  RCC->AHB4ENR |= 0x000001F8;
 80068c2:	f8c0 20e0 	str.w	r2, [r0, #224]	; 0xe0
  tmp = READ_BIT(RCC->AHB4ENR, RCC_AHB4ENR_GPIOEEN);
 80068c6:	f8d0 20e0 	ldr.w	r2, [r0, #224]	; 0xe0
 80068ca:	f002 0210 	and.w	r2, r2, #16
 80068ce:	9200      	str	r2, [sp, #0]
  GPIOD->OSPEEDR = 0xF03F000F;
 80068d0:	4a6b      	ldr	r2, [pc, #428]	; (8006a80 <SystemInit+0x24c>)
  GPIOD->AFR[0] = 0x000000CC;
 80068d2:	f8c1 c020 	str.w	ip, [r1, #32]
  GPIOD->AFR[1] = 0xCC000CCC;
 80068d6:	624f      	str	r7, [r1, #36]	; 0x24
  GPIOE->AFR[0] = 0xC00000CC;
 80068d8:	f1a7 270c 	sub.w	r7, r7, #201329664	; 0xc000c00
  GPIOD->MODER = 0xAFEAFFFA;
 80068dc:	600e      	str	r6, [r1, #0]
  GPIOD->OSPEEDR = 0xF03F000F;
 80068de:	608a      	str	r2, [r1, #8]
  GPIOD->PUPDR = 0x50150005;
 80068e0:	4e68      	ldr	r6, [pc, #416]	; (8006a84 <SystemInit+0x250>)
  GPIOE->AFR[0] = 0xC00000CC;
 80068e2:	4a69      	ldr	r2, [pc, #420]	; (8006a88 <SystemInit+0x254>)
  GPIOD->OTYPER = 0x00000000;
 80068e4:	604b      	str	r3, [r1, #4]
  GPIOD->PUPDR = 0x50150005;
 80068e6:	60ce      	str	r6, [r1, #12]
  GPIOE->AFR[0] = 0xC00000CC;
 80068e8:	6217      	str	r7, [r2, #32]
  GPIOE->MODER = 0xAAAABFFA;
 80068ea:	4e68      	ldr	r6, [pc, #416]	; (8006a8c <SystemInit+0x258>)
  GPIOE->OSPEEDR = 0xFFFFC00F;
 80068ec:	4968      	ldr	r1, [pc, #416]	; (8006a90 <SystemInit+0x25c>)
  GPIOE->PUPDR = 0x55554005;
 80068ee:	4f69      	ldr	r7, [pc, #420]	; (8006a94 <SystemInit+0x260>)
  GPIOE->AFR[1] = 0xCCCCCCCC;
 80068f0:	6254      	str	r4, [r2, #36]	; 0x24
  GPIOE->MODER = 0xAAAABFFA;
 80068f2:	6016      	str	r6, [r2, #0]
  GPIOE->OSPEEDR = 0xFFFFC00F;
 80068f4:	6091      	str	r1, [r2, #8]
  GPIOF->AFR[0] = 0x00CCCCCC;
 80068f6:	4e68      	ldr	r6, [pc, #416]	; (8006a98 <SystemInit+0x264>)
  GPIOE->OTYPER = 0x00000000;
 80068f8:	6053      	str	r3, [r2, #4]
  GPIOF->AFR[0] = 0x00CCCCCC;
 80068fa:	4968      	ldr	r1, [pc, #416]	; (8006a9c <SystemInit+0x268>)
  GPIOE->PUPDR = 0x55554005;
 80068fc:	60d7      	str	r7, [r2, #12]
  GPIOF->AFR[1] = 0xCCCCC000;
 80068fe:	4f68      	ldr	r7, [pc, #416]	; (8006aa0 <SystemInit+0x26c>)
  GPIOF->MODER = 0xAABFFAAA;
 8006900:	4a68      	ldr	r2, [pc, #416]	; (8006aa4 <SystemInit+0x270>)
  GPIOF->AFR[0] = 0x00CCCCCC;
 8006902:	620e      	str	r6, [r1, #32]
  GPIOF->AFR[1] = 0xCCCCC000;
 8006904:	624f      	str	r7, [r1, #36]	; 0x24
  GPIOF->MODER = 0xAABFFAAA;
 8006906:	600a      	str	r2, [r1, #0]
  GPIOF->OSPEEDR = 0xFFC00FFF;
 8006908:	4a67      	ldr	r2, [pc, #412]	; (8006aa8 <SystemInit+0x274>)
  GPIOF->PUPDR = 0x55400555;
 800690a:	4f68      	ldr	r7, [pc, #416]	; (8006aac <SystemInit+0x278>)
  GPIOF->OSPEEDR = 0xFFC00FFF;
 800690c:	608a      	str	r2, [r1, #8]
  GPIOG->AFR[0] = 0x00CCCCCC;
 800690e:	4a68      	ldr	r2, [pc, #416]	; (8006ab0 <SystemInit+0x27c>)
  GPIOF->OTYPER = 0x00000000;
 8006910:	604b      	str	r3, [r1, #4]
  GPIOF->PUPDR = 0x55400555;
 8006912:	60cf      	str	r7, [r1, #12]
    WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE
    SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2
    ReadBurst          = FMC_SDRAM_RBURST_ENABLE
    ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0*/

  FMC_Bank5_6_R->SDCR[0] = 0x00001800;
 8006914:	f44f 57c0 	mov.w	r7, #6144	; 0x1800
  GPIOG->AFR[0] = 0x00CCCCCC;
 8006918:	6216      	str	r6, [r2, #32]
  GPIOG->MODER = 0xBFFEFAAA;
 800691a:	4966      	ldr	r1, [pc, #408]	; (8006ab4 <SystemInit+0x280>)
  GPIOG->AFR[1] = 0xC000000C;
 800691c:	4e66      	ldr	r6, [pc, #408]	; (8006ab8 <SystemInit+0x284>)
 800691e:	6256      	str	r6, [r2, #36]	; 0x24
  GPIOG->MODER = 0xBFFEFAAA;
 8006920:	6011      	str	r1, [r2, #0]
  GPIOG->OSPEEDR = 0xC0030FFF;
 8006922:	f501 2182 	add.w	r1, r1, #266240	; 0x41000
  GPIOG->PUPDR = 0x40010555;
 8006926:	4e65      	ldr	r6, [pc, #404]	; (8006abc <SystemInit+0x288>)
  GPIOG->OSPEEDR = 0xC0030FFF;
 8006928:	f201 5155 	addw	r1, r1, #1365	; 0x555
 800692c:	6091      	str	r1, [r2, #8]
  GPIOH->AFR[0] = 0xCCC00000;
 800692e:	4964      	ldr	r1, [pc, #400]	; (8006ac0 <SystemInit+0x28c>)
  GPIOG->OTYPER = 0x00000000;
 8006930:	6053      	str	r3, [r2, #4]
  GPIOG->PUPDR = 0x40010555;
 8006932:	60d6      	str	r6, [r2, #12]
  GPIOH->AFR[0] = 0xCCC00000;
 8006934:	4a63      	ldr	r2, [pc, #396]	; (8006ac4 <SystemInit+0x290>)
  GPIOH->MODER = 0xAAAAABFF;
 8006936:	4e64      	ldr	r6, [pc, #400]	; (8006ac8 <SystemInit+0x294>)
  GPIOH->AFR[0] = 0xCCC00000;
 8006938:	620a      	str	r2, [r1, #32]
  GPIOH->OSPEEDR = 0xFFFFFC00;
 800693a:	4a64      	ldr	r2, [pc, #400]	; (8006acc <SystemInit+0x298>)
  GPIOH->AFR[1] = 0xCCCCCCCC;
 800693c:	624c      	str	r4, [r1, #36]	; 0x24
  GPIOH->MODER = 0xAAAAABFF;
 800693e:	600e      	str	r6, [r1, #0]
  GPIOH->OSPEEDR = 0xFFFFFC00;
 8006940:	608a      	str	r2, [r1, #8]
  GPIOH->PUPDR = 0x55555400;
 8006942:	4e63      	ldr	r6, [pc, #396]	; (8006ad0 <SystemInit+0x29c>)
  GPIOI->AFR[0] = 0xCCCCCCCC;
 8006944:	4a63      	ldr	r2, [pc, #396]	; (8006ad4 <SystemInit+0x2a0>)
  GPIOH->OTYPER = 0x00000000;
 8006946:	604b      	str	r3, [r1, #4]
  GPIOH->PUPDR = 0x55555400;
 8006948:	60ce      	str	r6, [r1, #12]
  FMC_Bank5_6_R->SDCR[1] = 0x00000165;
 800694a:	f240 1665 	movw	r6, #357	; 0x165
  GPIOI->AFR[0] = 0xCCCCCCCC;
 800694e:	6214      	str	r4, [r2, #32]
  FMC_Bank5_6_R->SDTR[0] = 0x00105000;
  FMC_Bank5_6_R->SDTR[1] = 0x01010351;

  /* SDRAM initialization sequence */
  /* Clock enable command */
  FMC_Bank5_6_R->SDCMR = 0x00000009;
 8006950:	2109      	movs	r1, #9
  GPIOI->AFR[1] = 0x00000CC0;
 8006952:	6255      	str	r5, [r2, #36]	; 0x24
  GPIOI->MODER = 0xFFEBAAAA;
 8006954:	f5a5 15a3 	sub.w	r5, r5, #1335296	; 0x146000
  GPIOI->OSPEEDR = 0x003CFFFF;
 8006958:	4c5f      	ldr	r4, [pc, #380]	; (8006ad8 <SystemInit+0x2a4>)
  GPIOI->MODER = 0xFFEBAAAA;
 800695a:	f2a5 2516 	subw	r5, r5, #534	; 0x216
 800695e:	6015      	str	r5, [r2, #0]
  GPIOI->OSPEEDR = 0x003CFFFF;
 8006960:	6094      	str	r4, [r2, #8]
  GPIOI->PUPDR = 0x00145555;
 8006962:	4c5e      	ldr	r4, [pc, #376]	; (8006adc <SystemInit+0x2a8>)
  GPIOI->OTYPER = 0x00000000;
 8006964:	6053      	str	r3, [r2, #4]
  GPIOI->PUPDR = 0x00145555;
 8006966:	60d4      	str	r4, [r2, #12]
  (RCC->AHB3ENR |= (RCC_AHB3ENR_FMCEN));
 8006968:	f8d0 20d4 	ldr.w	r2, [r0, #212]	; 0xd4
  FMC_Bank5_6_R->SDCR[0] = 0x00001800;
 800696c:	4b5c      	ldr	r3, [pc, #368]	; (8006ae0 <SystemInit+0x2ac>)
  (RCC->AHB3ENR |= (RCC_AHB3ENR_FMCEN));
 800696e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  FMC_Bank5_6_R->SDTR[0] = 0x00105000;
 8006972:	4d5c      	ldr	r5, [pc, #368]	; (8006ae4 <SystemInit+0x2b0>)
  FMC_Bank5_6_R->SDTR[1] = 0x01010351;
 8006974:	4c5c      	ldr	r4, [pc, #368]	; (8006ae8 <SystemInit+0x2b4>)
  (RCC->AHB3ENR |= (RCC_AHB3ENR_FMCEN));
 8006976:	f8c0 20d4 	str.w	r2, [r0, #212]	; 0xd4
  FMC_Bank5_6_R->SDCR[0] = 0x00001800;
 800697a:	601f      	str	r7, [r3, #0]
  FMC_Bank5_6_R->SDCR[1] = 0x00000165;
 800697c:	605e      	str	r6, [r3, #4]
  FMC_Bank5_6_R->SDTR[0] = 0x00105000;
 800697e:	609d      	str	r5, [r3, #8]
  FMC_Bank5_6_R->SDTR[1] = 0x01010351;
 8006980:	60dc      	str	r4, [r3, #12]
  FMC_Bank5_6_R->SDCMR = 0x00000009;
 8006982:	6119      	str	r1, [r3, #16]
  tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 8006984:	699a      	ldr	r2, [r3, #24]
  while ((tmpreg != 0) && (timeout-- > 0))
 8006986:	f012 0220 	ands.w	r2, r2, #32
 800698a:	d008      	beq.n	800699e <SystemInit+0x16a>
 800698c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006990:	e001      	b.n	8006996 <SystemInit+0x162>
 8006992:	3901      	subs	r1, #1
 8006994:	d054      	beq.n	8006a40 <SystemInit+0x20c>
  {
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 8006996:	699a      	ldr	r2, [r3, #24]
  while ((tmpreg != 0) && (timeout-- > 0))
 8006998:	f012 0220 	ands.w	r2, r2, #32
 800699c:	d1f9      	bne.n	8006992 <SystemInit+0x15e>
  }

  /* Delay */
  for (index = 0; index < 1000; index++)
 800699e:	9201      	str	r2, [sp, #4]
 80069a0:	9a01      	ldr	r2, [sp, #4]
 80069a2:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80069a6:	d253      	bcs.n	8006a50 <SystemInit+0x21c>
  while ((tmpreg != 0) && (timeout-- > 0))
 80069a8:	2200      	movs	r2, #0
  for (index = 0; index < 1000; index++)
 80069aa:	9b01      	ldr	r3, [sp, #4]
 80069ac:	3301      	adds	r3, #1
 80069ae:	9301      	str	r3, [sp, #4]
 80069b0:	9b01      	ldr	r3, [sp, #4]
 80069b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069b6:	d3f8      	bcc.n	80069aa <SystemInit+0x176>
    ;

  /* PALL command */
  FMC_Bank5_6_R->SDCMR = 0x0000000A;
 80069b8:	4b49      	ldr	r3, [pc, #292]	; (8006ae0 <SystemInit+0x2ac>)
 80069ba:	210a      	movs	r1, #10
 80069bc:	6119      	str	r1, [r3, #16]
  timeout = 0xFFFF;
  while ((tmpreg != 0) && (timeout-- > 0))
 80069be:	b142      	cbz	r2, 80069d2 <SystemInit+0x19e>
  while ((tmpreg != 0) && (timeout-- > 0))
 80069c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
  {
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 80069c4:	4a46      	ldr	r2, [pc, #280]	; (8006ae0 <SystemInit+0x2ac>)
 80069c6:	e001      	b.n	80069cc <SystemInit+0x198>
  while ((tmpreg != 0) && (timeout-- > 0))
 80069c8:	3b01      	subs	r3, #1
 80069ca:	d01f      	beq.n	8006a0c <SystemInit+0x1d8>
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 80069cc:	6991      	ldr	r1, [r2, #24]
  while ((tmpreg != 0) && (timeout-- > 0))
 80069ce:	068c      	lsls	r4, r1, #26
 80069d0:	d4fa      	bmi.n	80069c8 <SystemInit+0x194>
  }

  FMC_Bank5_6_R->SDCMR = 0x000000EB;
 80069d2:	4b43      	ldr	r3, [pc, #268]	; (8006ae0 <SystemInit+0x2ac>)
 80069d4:	22eb      	movs	r2, #235	; 0xeb
 80069d6:	611a      	str	r2, [r3, #16]
  while ((tmpreg != 0) && (timeout-- > 0))
  {
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
  }

  FMC_Bank5_6_R->SDCMR = 0x0004400C;
 80069d8:	4b41      	ldr	r3, [pc, #260]	; (8006ae0 <SystemInit+0x2ac>)
 80069da:	4a44      	ldr	r2, [pc, #272]	; (8006aec <SystemInit+0x2b8>)
 80069dc:	611a      	str	r2, [r3, #16]
  while ((tmpreg != 0) && (timeout-- > 0))
  {
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
  }
  /* Set refresh count */
  tmpreg = FMC_Bank5_6_R->SDRTR;
 80069de:	4b40      	ldr	r3, [pc, #256]	; (8006ae0 <SystemInit+0x2ac>)
  FMC_Bank5_6_R->SDRTR = (tmpreg | (0x00000603 << 1));
 80069e0:	f640 4206 	movw	r2, #3078	; 0xc06
  /* Disable write protection */
  tmpreg = FMC_Bank5_6_R->SDCR[1];
  FMC_Bank5_6_R->SDCR[1] = (tmpreg & 0xFFFFFDFF);

  /*FMC controller Enable*/
  FMC_Bank1_R->BTCR[0] |= 0x80000000;
 80069e4:	4942      	ldr	r1, [pc, #264]	; (8006af0 <SystemInit+0x2bc>)
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80069e6:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  tmpreg = FMC_Bank5_6_R->SDRTR;
 80069ea:	695d      	ldr	r5, [r3, #20]
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80069ec:	481a      	ldr	r0, [pc, #104]	; (8006a58 <SystemInit+0x224>)
  FMC_Bank5_6_R->SDRTR = (tmpreg | (0x00000603 << 1));
 80069ee:	432a      	orrs	r2, r5
 80069f0:	615a      	str	r2, [r3, #20]
  tmpreg = FMC_Bank5_6_R->SDCR[1];
 80069f2:	685a      	ldr	r2, [r3, #4]
  FMC_Bank5_6_R->SDCR[1] = (tmpreg & 0xFFFFFDFF);
 80069f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80069f8:	605a      	str	r2, [r3, #4]
  FMC_Bank1_R->BTCR[0] |= 0x80000000;
 80069fa:	680b      	ldr	r3, [r1, #0]
 80069fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a00:	600b      	str	r3, [r1, #0]

  (void)(tmp);
 8006a02:	9b00      	ldr	r3, [sp, #0]
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006a04:	6084      	str	r4, [r0, #8]
}
 8006a06:	b002      	add	sp, #8
 8006a08:	bcf0      	pop	{r4, r5, r6, r7}
 8006a0a:	4770      	bx	lr
  FMC_Bank5_6_R->SDCMR = 0x000000EB;
 8006a0c:	20eb      	movs	r0, #235	; 0xeb
 8006a0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 8006a12:	4933      	ldr	r1, [pc, #204]	; (8006ae0 <SystemInit+0x2ac>)
  FMC_Bank5_6_R->SDCMR = 0x000000EB;
 8006a14:	6110      	str	r0, [r2, #16]
  while ((tmpreg != 0) && (timeout-- > 0))
 8006a16:	e001      	b.n	8006a1c <SystemInit+0x1e8>
 8006a18:	3b01      	subs	r3, #1
 8006a1a:	d005      	beq.n	8006a28 <SystemInit+0x1f4>
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 8006a1c:	698a      	ldr	r2, [r1, #24]
  while ((tmpreg != 0) && (timeout-- > 0))
 8006a1e:	0690      	lsls	r0, r2, #26
 8006a20:	d4fa      	bmi.n	8006a18 <SystemInit+0x1e4>
  FMC_Bank5_6_R->SDCMR = 0x0004400C;
 8006a22:	4b32      	ldr	r3, [pc, #200]	; (8006aec <SystemInit+0x2b8>)
 8006a24:	610b      	str	r3, [r1, #16]
  while ((tmpreg != 0) && (timeout-- > 0))
 8006a26:	e7da      	b.n	80069de <SystemInit+0x1aa>
  FMC_Bank5_6_R->SDCMR = 0x0004400C;
 8006a28:	4a30      	ldr	r2, [pc, #192]	; (8006aec <SystemInit+0x2b8>)
 8006a2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 8006a2e:	482c      	ldr	r0, [pc, #176]	; (8006ae0 <SystemInit+0x2ac>)
  FMC_Bank5_6_R->SDCMR = 0x0004400C;
 8006a30:	610a      	str	r2, [r1, #16]
  while ((tmpreg != 0) && (timeout-- > 0))
 8006a32:	e001      	b.n	8006a38 <SystemInit+0x204>
 8006a34:	3b01      	subs	r3, #1
 8006a36:	d0d2      	beq.n	80069de <SystemInit+0x1aa>
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 8006a38:	6982      	ldr	r2, [r0, #24]
  while ((tmpreg != 0) && (timeout-- > 0))
 8006a3a:	0692      	lsls	r2, r2, #26
 8006a3c:	d5cf      	bpl.n	80069de <SystemInit+0x1aa>
 8006a3e:	e7f9      	b.n	8006a34 <SystemInit+0x200>
  for (index = 0; index < 1000; index++)
 8006a40:	9101      	str	r1, [sp, #4]
 8006a42:	9901      	ldr	r1, [sp, #4]
 8006a44:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8006a48:	d3af      	bcc.n	80069aa <SystemInit+0x176>
  FMC_Bank5_6_R->SDCMR = 0x0000000A;
 8006a4a:	220a      	movs	r2, #10
 8006a4c:	611a      	str	r2, [r3, #16]
  while ((tmpreg != 0) && (timeout-- > 0))
 8006a4e:	e7b7      	b.n	80069c0 <SystemInit+0x18c>
  FMC_Bank5_6_R->SDCMR = 0x0000000A;
 8006a50:	220a      	movs	r2, #10
 8006a52:	611a      	str	r2, [r3, #16]
  while ((tmpreg != 0) && (timeout-- > 0))
 8006a54:	e7bd      	b.n	80069d2 <SystemInit+0x19e>
 8006a56:	bf00      	nop
 8006a58:	e000ed00 	.word	0xe000ed00
 8006a5c:	58024400 	.word	0x58024400
 8006a60:	eaf6ed7f 	.word	0xeaf6ed7f
 8006a64:	580000c0 	.word	0x580000c0
 8006a68:	5c001000 	.word	0x5c001000
 8006a6c:	ffff0000 	.word	0xffff0000
 8006a70:	51008108 	.word	0x51008108
 8006a74:	58020c00 	.word	0x58020c00
 8006a78:	cc000ccc 	.word	0xcc000ccc
 8006a7c:	afeafffa 	.word	0xafeafffa
 8006a80:	f03f000f 	.word	0xf03f000f
 8006a84:	50150005 	.word	0x50150005
 8006a88:	58021000 	.word	0x58021000
 8006a8c:	aaaabffa 	.word	0xaaaabffa
 8006a90:	ffffc00f 	.word	0xffffc00f
 8006a94:	55554005 	.word	0x55554005
 8006a98:	00cccccc 	.word	0x00cccccc
 8006a9c:	58021400 	.word	0x58021400
 8006aa0:	ccccc000 	.word	0xccccc000
 8006aa4:	aabffaaa 	.word	0xaabffaaa
 8006aa8:	ffc00fff 	.word	0xffc00fff
 8006aac:	55400555 	.word	0x55400555
 8006ab0:	58021800 	.word	0x58021800
 8006ab4:	bffefaaa 	.word	0xbffefaaa
 8006ab8:	c000000c 	.word	0xc000000c
 8006abc:	40010555 	.word	0x40010555
 8006ac0:	58021c00 	.word	0x58021c00
 8006ac4:	ccc00000 	.word	0xccc00000
 8006ac8:	aaaaabff 	.word	0xaaaaabff
 8006acc:	fffffc00 	.word	0xfffffc00
 8006ad0:	55555400 	.word	0x55555400
 8006ad4:	58022000 	.word	0x58022000
 8006ad8:	003cffff 	.word	0x003cffff
 8006adc:	00145555 	.word	0x00145555
 8006ae0:	52004140 	.word	0x52004140
 8006ae4:	00105000 	.word	0x00105000
 8006ae8:	01010351 	.word	0x01010351
 8006aec:	0004400c 	.word	0x0004400c
 8006af0:	52004000 	.word	0x52004000

08006af4 <OTM8009A_DeInit>:
  * @retval Component status
  */
int32_t OTM8009A_DeInit(OTM8009A_Object_t *pObj)
{
  return OTM8009A_ERROR;
}
 8006af4:	f04f 30ff 	mov.w	r0, #4294967295
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop

08006afc <OTM8009A_GetBrightness>:
  * @param  Brightness   display brightness to be returned
  * @retval Component status
  */
int32_t OTM8009A_GetBrightness(OTM8009A_Object_t *pObj, uint32_t *Brightness)
{
  *Brightness = OTM8009ACtx.Brightness;
 8006afc:	4b02      	ldr	r3, [pc, #8]	; (8006b08 <OTM8009A_GetBrightness+0xc>)
  return OTM8009A_OK;  
}
 8006afe:	2000      	movs	r0, #0
  *Brightness = OTM8009ACtx.Brightness;
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	600b      	str	r3, [r1, #0]
}
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop
 8006b08:	200089bc 	.word	0x200089bc

08006b0c <OTM8009A_GetOrientation>:
int32_t OTM8009A_GetOrientation(OTM8009A_Object_t *pObj, uint32_t *Orientation)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  *Orientation = OTM8009ACtx.Orientation;
 8006b0c:	4b02      	ldr	r3, [pc, #8]	; (8006b18 <OTM8009A_GetOrientation+0xc>)
  
  return OTM8009A_OK;
}
 8006b0e:	2000      	movs	r0, #0
  *Orientation = OTM8009ACtx.Orientation;
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	600b      	str	r3, [r1, #0]
}
 8006b14:	4770      	bx	lr
 8006b16:	bf00      	nop
 8006b18:	200089bc 	.word	0x200089bc

08006b1c <OTM8009A_GetXSize>:
int32_t OTM8009A_GetXSize(OTM8009A_Object_t *pObj, uint32_t *Xsize)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 8006b1c:	4b06      	ldr	r3, [pc, #24]	; (8006b38 <OTM8009A_GetXSize+0x1c>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	b123      	cbz	r3, 8006b2c <OTM8009A_GetXSize+0x10>
  {
  case OTM8009A_ORIENTATION_PORTRAIT:
    *Xsize = OTM8009A_480X800_WIDTH;
    break;
  case OTM8009A_ORIENTATION_LANDSCAPE:
    *Xsize = OTM8009A_800X480_WIDTH;
 8006b22:	f44f 7348 	mov.w	r3, #800	; 0x320
    *Xsize = OTM8009A_800X480_WIDTH;
    break;
  }
  
  return OTM8009A_OK;
}
 8006b26:	2000      	movs	r0, #0
    *Xsize = OTM8009A_800X480_WIDTH;
 8006b28:	600b      	str	r3, [r1, #0]
}
 8006b2a:	4770      	bx	lr
    *Xsize = OTM8009A_480X800_WIDTH;
 8006b2c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
}
 8006b30:	2000      	movs	r0, #0
    *Xsize = OTM8009A_480X800_WIDTH;
 8006b32:	600b      	str	r3, [r1, #0]
}
 8006b34:	4770      	bx	lr
 8006b36:	bf00      	nop
 8006b38:	200089bc 	.word	0x200089bc

08006b3c <OTM8009A_GetYSize>:
int32_t OTM8009A_GetYSize(OTM8009A_Object_t *pObj, uint32_t *Ysize)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 8006b3c:	4b06      	ldr	r3, [pc, #24]	; (8006b58 <OTM8009A_GetYSize+0x1c>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	b123      	cbz	r3, 8006b4c <OTM8009A_GetYSize+0x10>
  {
  case OTM8009A_ORIENTATION_PORTRAIT:
    *Ysize = OTM8009A_480X800_HEIGHT;
    break;
  case OTM8009A_ORIENTATION_LANDSCAPE:
    *Ysize = OTM8009A_800X480_HEIGHT;
 8006b42:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
    *Ysize = OTM8009A_800X480_HEIGHT;
    break;
  }
  
  return OTM8009A_OK;
}
 8006b46:	2000      	movs	r0, #0
    *Ysize = OTM8009A_800X480_HEIGHT;
 8006b48:	600b      	str	r3, [r1, #0]
}
 8006b4a:	4770      	bx	lr
    *Ysize = OTM8009A_480X800_HEIGHT;
 8006b4c:	f44f 7348 	mov.w	r3, #800	; 0x320
}
 8006b50:	2000      	movs	r0, #0
    *Ysize = OTM8009A_480X800_HEIGHT;
 8006b52:	600b      	str	r3, [r1, #0]
}
 8006b54:	4770      	bx	lr
 8006b56:	bf00      	nop
 8006b58:	200089bc 	.word	0x200089bc

08006b5c <OTM8009A_SetCursor>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8006b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b60:	4770      	bx	lr
 8006b62:	bf00      	nop

08006b64 <OTM8009A_DrawBitmap>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8006b64:	f04f 30ff 	mov.w	r0, #4294967295
 8006b68:	4770      	bx	lr
 8006b6a:	bf00      	nop

08006b6c <OTM8009A_FillRGBRect>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8006b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b70:	4770      	bx	lr
 8006b72:	bf00      	nop

08006b74 <OTM8009A_DrawHLine>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8006b74:	f04f 30ff 	mov.w	r0, #4294967295
 8006b78:	4770      	bx	lr
 8006b7a:	bf00      	nop

08006b7c <OTM8009A_FillRect>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8006b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop

08006b84 <OTM8009A_SetPixel>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8006b84:	f04f 30ff 	mov.w	r0, #4294967295
 8006b88:	4770      	bx	lr
 8006b8a:	bf00      	nop

08006b8c <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8006b8c:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8006b8e:	6884      	ldr	r4, [r0, #8]
 8006b90:	8800      	ldrh	r0, [r0, #0]
 8006b92:	46a4      	mov	ip, r4
}
 8006b94:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8006b98:	4760      	bx	ip
 8006b9a:	bf00      	nop

08006b9c <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8006b9c:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8006b9e:	6844      	ldr	r4, [r0, #4]
 8006ba0:	8800      	ldrh	r0, [r0, #0]
 8006ba2:	46a4      	mov	ip, r4
}
 8006ba4:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8006ba8:	4760      	bx	ip
 8006baa:	bf00      	nop

08006bac <OTM8009A_Init>:
{
 8006bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	f100 0710 	add.w	r7, r0, #16
{
 8006bb6:	b082      	sub	sp, #8
 8006bb8:	4680      	mov	r8, r0
 8006bba:	4689      	mov	r9, r1
 8006bbc:	4692      	mov	sl, r2
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	4ae0      	ldr	r2, [pc, #896]	; (8006f44 <OTM8009A_Init+0x398>)
 8006bc2:	4638      	mov	r0, r7
 8006bc4:	f000 fcd6 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8006bc8:	2303      	movs	r3, #3
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006bca:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8006bcc:	4ade      	ldr	r2, [pc, #888]	; (8006f48 <OTM8009A_Init+0x39c>)
 8006bce:	21ff      	movs	r1, #255	; 0xff
 8006bd0:	4638      	mov	r0, r7
 8006bd2:	f000 fccf 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006bd6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8006bd8:	4605      	mov	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006bda:	4adc      	ldr	r2, [pc, #880]	; (8006f4c <OTM8009A_Init+0x3a0>)
 8006bdc:	4619      	mov	r1, r3
 8006bde:	4638      	mov	r0, r7
 8006be0:	f000 fcc8 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8006be4:	4425      	add	r5, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8006be6:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006be8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8006bea:	4ad9      	ldr	r2, [pc, #868]	; (8006f50 <OTM8009A_Init+0x3a4>)
 8006bec:	21ff      	movs	r1, #255	; 0xff
 8006bee:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006bf0:	442c      	add	r4, r5
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8006bf2:	f000 fcbf 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006bf6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8006bf8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006bfa:	4ad4      	ldr	r2, [pc, #848]	; (8006f4c <OTM8009A_Init+0x3a0>)
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	4638      	mov	r0, r7
 8006c00:	f000 fcb8 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8006c04:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006c06:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8006c08:	2300      	movs	r3, #0
 8006c0a:	4ad2      	ldr	r2, [pc, #840]	; (8006f54 <OTM8009A_Init+0x3a8>)
 8006c0c:	21c4      	movs	r1, #196	; 0xc4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006c0e:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8006c10:	4638      	mov	r0, r7
 8006c12:	f000 fcaf 	bl	8007574 <otm8009a_write_reg>
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8006c16:	f8d8 300c 	ldr.w	r3, [r8, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8006c1a:	4406      	add	r6, r0
  tickstart = pObj->IO.GetTick();
 8006c1c:	4798      	blx	r3
 8006c1e:	4604      	mov	r4, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8006c20:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006c24:	4798      	blx	r3
 8006c26:	1b00      	subs	r0, r0, r4
 8006c28:	2809      	cmp	r0, #9
 8006c2a:	d9f9      	bls.n	8006c20 <OTM8009A_Init+0x74>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	4aca      	ldr	r2, [pc, #808]	; (8006f58 <OTM8009A_Init+0x3ac>)
 8006c30:	4638      	mov	r0, r7
 8006c32:	4619      	mov	r1, r3
 8006c34:	f000 fc9e 	bl	8007574 <otm8009a_write_reg>
 8006c38:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	4ac7      	ldr	r2, [pc, #796]	; (8006f5c <OTM8009A_Init+0x3b0>)
 8006c3e:	21c4      	movs	r1, #196	; 0xc4
 8006c40:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 8006c42:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8006c44:	f000 fc96 	bl	8007574 <otm8009a_write_reg>
  tickstart = pObj->IO.GetTick();
 8006c48:	f8d8 300c 	ldr.w	r3, [r8, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8006c4c:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 8006c4e:	4798      	blx	r3
 8006c50:	4605      	mov	r5, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8006c52:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006c56:	4798      	blx	r3
 8006c58:	1b40      	subs	r0, r0, r5
 8006c5a:	2809      	cmp	r0, #9
 8006c5c:	d9f9      	bls.n	8006c52 <OTM8009A_Init+0xa6>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8006c5e:	2300      	movs	r3, #0
 8006c60:	4abf      	ldr	r2, [pc, #764]	; (8006f60 <OTM8009A_Init+0x3b4>)
 8006c62:	4638      	mov	r0, r7
 8006c64:	4619      	mov	r1, r3
 8006c66:	f000 fc85 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8006c6a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8006c6c:	4605      	mov	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8006c6e:	4abd      	ldr	r2, [pc, #756]	; (8006f64 <OTM8009A_Init+0x3b8>)
 8006c70:	21c5      	movs	r1, #197	; 0xc5
 8006c72:	4638      	mov	r0, r7
 8006c74:	f000 fc7e 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8006c78:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8006c7a:	4425      	add	r5, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8006c7c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8006c7e:	4619      	mov	r1, r3
 8006c80:	4ab9      	ldr	r2, [pc, #740]	; (8006f68 <OTM8009A_Init+0x3bc>)
 8006c82:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8006c84:	442c      	add	r4, r5
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8006c86:	f000 fc75 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8006c8a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8006c8c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8006c8e:	4ab7      	ldr	r2, [pc, #732]	; (8006f6c <OTM8009A_Init+0x3c0>)
 8006c90:	21c5      	movs	r1, #197	; 0xc5
 8006c92:	4638      	mov	r0, r7
 8006c94:	f000 fc6e 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8006c98:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8006c9a:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8006c9c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8006c9e:	4619      	mov	r1, r3
 8006ca0:	4ab3      	ldr	r2, [pc, #716]	; (8006f70 <OTM8009A_Init+0x3c4>)
 8006ca2:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8006ca4:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8006ca6:	f000 fc65 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8006caa:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8006cac:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8006cae:	4ab1      	ldr	r2, [pc, #708]	; (8006f74 <OTM8009A_Init+0x3c8>)
 8006cb0:	21c0      	movs	r1, #192	; 0xc0
 8006cb2:	4638      	mov	r0, r7
 8006cb4:	f000 fc5e 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006cb8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8006cba:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8006cbc:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	4aa0      	ldr	r2, [pc, #640]	; (8006f44 <OTM8009A_Init+0x398>)
 8006cc2:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8006cc4:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006cc6:	f000 fc55 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8006cca:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006ccc:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8006cce:	4aaa      	ldr	r2, [pc, #680]	; (8006f78 <OTM8009A_Init+0x3cc>)
 8006cd0:	21d9      	movs	r1, #217	; 0xd9
 8006cd2:	4638      	mov	r0, r7
 8006cd4:	f000 fc4e 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8006cd8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006cda:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8006cdc:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8006cde:	4619      	mov	r1, r3
 8006ce0:	4aa6      	ldr	r2, [pc, #664]	; (8006f7c <OTM8009A_Init+0x3d0>)
 8006ce2:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8006ce4:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8006ce6:	f000 fc45 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8006cea:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8006cec:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8006cee:	4aa4      	ldr	r2, [pc, #656]	; (8006f80 <OTM8009A_Init+0x3d4>)
 8006cf0:	21c1      	movs	r1, #193	; 0xc1
 8006cf2:	4638      	mov	r0, r7
 8006cf4:	f000 fc3e 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8006cf8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8006cfa:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8006cfc:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8006cfe:	4619      	mov	r1, r3
 8006d00:	4aa0      	ldr	r2, [pc, #640]	; (8006f84 <OTM8009A_Init+0x3d8>)
 8006d02:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8006d04:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8006d06:	f000 fc35 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8006d0a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8006d0c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8006d0e:	4a9e      	ldr	r2, [pc, #632]	; (8006f88 <OTM8009A_Init+0x3dc>)
 8006d10:	21c1      	movs	r1, #193	; 0xc1
 8006d12:	4638      	mov	r0, r7
 8006d14:	f000 fc2e 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8006d18:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8006d1a:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8006d1c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8006d1e:	4619      	mov	r1, r3
 8006d20:	4a9a      	ldr	r2, [pc, #616]	; (8006f8c <OTM8009A_Init+0x3e0>)
 8006d22:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8006d24:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8006d26:	f000 fc25 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8006d2a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8006d2c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8006d2e:	4a98      	ldr	r2, [pc, #608]	; (8006f90 <OTM8009A_Init+0x3e4>)
 8006d30:	21c5      	movs	r1, #197	; 0xc5
 8006d32:	4638      	mov	r0, r7
 8006d34:	f000 fc1e 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8006d38:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8006d3a:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8006d3c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8006d3e:	4619      	mov	r1, r3
 8006d40:	4a94      	ldr	r2, [pc, #592]	; (8006f94 <OTM8009A_Init+0x3e8>)
 8006d42:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8006d44:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8006d46:	f000 fc15 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8006d4a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8006d4c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8006d4e:	4a87      	ldr	r2, [pc, #540]	; (8006f6c <OTM8009A_Init+0x3c0>)
 8006d50:	21c5      	movs	r1, #197	; 0xc5
 8006d52:	4638      	mov	r0, r7
 8006d54:	f000 fc0e 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006d58:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8006d5a:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8006d5c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006d5e:	4619      	mov	r1, r3
 8006d60:	4a78      	ldr	r2, [pc, #480]	; (8006f44 <OTM8009A_Init+0x398>)
 8006d62:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8006d64:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006d66:	f000 fc05 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8006d6a:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006d6c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8006d6e:	4a8a      	ldr	r2, [pc, #552]	; (8006f98 <OTM8009A_Init+0x3ec>)
 8006d70:	21d8      	movs	r1, #216	; 0xd8
 8006d72:	4638      	mov	r0, r7
 8006d74:	f000 fbfe 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8006d78:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006d7a:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8006d7c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8006d7e:	4619      	mov	r1, r3
 8006d80:	4a86      	ldr	r2, [pc, #536]	; (8006f9c <OTM8009A_Init+0x3f0>)
 8006d82:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8006d84:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8006d86:	f000 fbf5 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8006d8a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8006d8c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8006d8e:	4a84      	ldr	r2, [pc, #528]	; (8006fa0 <OTM8009A_Init+0x3f4>)
 8006d90:	21c5      	movs	r1, #197	; 0xc5
 8006d92:	4638      	mov	r0, r7
 8006d94:	f000 fbee 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8006d98:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8006d9a:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8006d9c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8006d9e:	4619      	mov	r1, r3
 8006da0:	4a80      	ldr	r2, [pc, #512]	; (8006fa4 <OTM8009A_Init+0x3f8>)
 8006da2:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8006da4:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8006da6:	f000 fbe5 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8006daa:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8006dac:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8006dae:	4a7e      	ldr	r2, [pc, #504]	; (8006fa8 <OTM8009A_Init+0x3fc>)
 8006db0:	21c0      	movs	r1, #192	; 0xc0
 8006db2:	4638      	mov	r0, r7
 8006db4:	f000 fbde 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8006db8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8006dba:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8006dbc:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	4a7a      	ldr	r2, [pc, #488]	; (8006fac <OTM8009A_Init+0x400>)
 8006dc2:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8006dc4:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8006dc6:	f000 fbd5 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8006dca:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8006dcc:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8006dce:	4a78      	ldr	r2, [pc, #480]	; (8006fb0 <OTM8009A_Init+0x404>)
 8006dd0:	21c5      	movs	r1, #197	; 0xc5
 8006dd2:	4638      	mov	r0, r7
 8006dd4:	f000 fbce 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8006dd8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8006dda:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8006ddc:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8006dde:	4619      	mov	r1, r3
 8006de0:	4a66      	ldr	r2, [pc, #408]	; (8006f7c <OTM8009A_Init+0x3d0>)
 8006de2:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8006de4:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8006de6:	f000 fbc5 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8006dea:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8006dec:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8006dee:	4a71      	ldr	r2, [pc, #452]	; (8006fb4 <OTM8009A_Init+0x408>)
 8006df0:	21c4      	movs	r1, #196	; 0xc4
 8006df2:	4638      	mov	r0, r7
 8006df4:	f000 fbbe 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8006df8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8006dfa:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8006dfc:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8006dfe:	4619      	mov	r1, r3
 8006e00:	4a60      	ldr	r2, [pc, #384]	; (8006f84 <OTM8009A_Init+0x3d8>)
 8006e02:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8006e04:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8006e06:	f000 fbb5 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8006e0a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8006e0c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8006e0e:	4a6a      	ldr	r2, [pc, #424]	; (8006fb8 <OTM8009A_Init+0x40c>)
 8006e10:	21c1      	movs	r1, #193	; 0xc1
 8006e12:	4638      	mov	r0, r7
 8006e14:	f000 fbae 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8006e18:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8006e1a:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8006e1c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8006e1e:	4619      	mov	r1, r3
 8006e20:	4a66      	ldr	r2, [pc, #408]	; (8006fbc <OTM8009A_Init+0x410>)
 8006e22:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8006e24:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8006e26:	f000 fba5 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8006e2a:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8006e2c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8006e2e:	4a64      	ldr	r2, [pc, #400]	; (8006fc0 <OTM8009A_Init+0x414>)
 8006e30:	21b3      	movs	r1, #179	; 0xb3
 8006e32:	4638      	mov	r0, r7
 8006e34:	f000 fb9e 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006e38:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8006e3a:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8006e3c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006e3e:	4619      	mov	r1, r3
 8006e40:	4a42      	ldr	r2, [pc, #264]	; (8006f4c <OTM8009A_Init+0x3a0>)
 8006e42:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8006e44:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006e46:	f000 fb95 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8006e4a:	2306      	movs	r3, #6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006e4c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8006e4e:	4a5d      	ldr	r2, [pc, #372]	; (8006fc4 <OTM8009A_Init+0x418>)
 8006e50:	21ce      	movs	r1, #206	; 0xce
 8006e52:	4638      	mov	r0, r7
 8006e54:	f000 fb8e 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8006e58:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006e5a:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8006e5c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8006e5e:	4619      	mov	r1, r3
 8006e60:	4a59      	ldr	r2, [pc, #356]	; (8006fc8 <OTM8009A_Init+0x41c>)
 8006e62:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8006e64:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8006e66:	f000 fb85 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8006e6a:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8006e6c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8006e6e:	4a57      	ldr	r2, [pc, #348]	; (8006fcc <OTM8009A_Init+0x420>)
 8006e70:	21ce      	movs	r1, #206	; 0xce
 8006e72:	4638      	mov	r0, r7
 8006e74:	f000 fb7e 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8006e78:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8006e7a:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8006e7c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8006e7e:	4619      	mov	r1, r3
 8006e80:	4a53      	ldr	r2, [pc, #332]	; (8006fd0 <OTM8009A_Init+0x424>)
 8006e82:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8006e84:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8006e86:	f000 fb75 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8006e8a:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8006e8c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8006e8e:	4a51      	ldr	r2, [pc, #324]	; (8006fd4 <OTM8009A_Init+0x428>)
 8006e90:	21ce      	movs	r1, #206	; 0xce
 8006e92:	4638      	mov	r0, r7
 8006e94:	f000 fb6e 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8006e98:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8006e9a:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8006e9c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	4a4d      	ldr	r2, [pc, #308]	; (8006fd8 <OTM8009A_Init+0x42c>)
 8006ea2:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8006ea4:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8006ea6:	f000 fb65 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8006eaa:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8006eac:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8006eae:	4a4b      	ldr	r2, [pc, #300]	; (8006fdc <OTM8009A_Init+0x430>)
 8006eb0:	21cf      	movs	r1, #207	; 0xcf
 8006eb2:	4638      	mov	r0, r7
 8006eb4:	f000 fb5e 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8006eb8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8006eba:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8006ebc:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	4a47      	ldr	r2, [pc, #284]	; (8006fe0 <OTM8009A_Init+0x434>)
 8006ec2:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8006ec4:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8006ec6:	f000 fb55 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8006eca:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8006ecc:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8006ece:	4a45      	ldr	r2, [pc, #276]	; (8006fe4 <OTM8009A_Init+0x438>)
 8006ed0:	21cf      	movs	r1, #207	; 0xcf
 8006ed2:	4638      	mov	r0, r7
 8006ed4:	f000 fb4e 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006ed8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8006eda:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8006edc:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006ede:	4619      	mov	r1, r3
 8006ee0:	4a1a      	ldr	r2, [pc, #104]	; (8006f4c <OTM8009A_Init+0x3a0>)
 8006ee2:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8006ee4:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006ee6:	f000 fb45 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8006eea:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006eec:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8006eee:	4a3e      	ldr	r2, [pc, #248]	; (8006fe8 <OTM8009A_Init+0x43c>)
 8006ef0:	21cb      	movs	r1, #203	; 0xcb
 8006ef2:	4638      	mov	r0, r7
 8006ef4:	f000 fb3e 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8006ef8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006efa:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8006efc:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8006efe:	4619      	mov	r1, r3
 8006f00:	4a3a      	ldr	r2, [pc, #232]	; (8006fec <OTM8009A_Init+0x440>)
 8006f02:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8006f04:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8006f06:	f000 fb35 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8006f0a:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8006f0c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8006f0e:	4a38      	ldr	r2, [pc, #224]	; (8006ff0 <OTM8009A_Init+0x444>)
 8006f10:	21cb      	movs	r1, #203	; 0xcb
 8006f12:	4638      	mov	r0, r7
 8006f14:	f000 fb2e 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8006f18:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8006f1a:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8006f1c:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8006f1e:	4619      	mov	r1, r3
 8006f20:	4a29      	ldr	r2, [pc, #164]	; (8006fc8 <OTM8009A_Init+0x41c>)
 8006f22:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8006f24:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8006f26:	f000 fb25 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8006f2a:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8006f2c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8006f2e:	4a31      	ldr	r2, [pc, #196]	; (8006ff4 <OTM8009A_Init+0x448>)
 8006f30:	21cb      	movs	r1, #203	; 0xcb
 8006f32:	4638      	mov	r0, r7
 8006f34:	f000 fb1e 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8006f38:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8006f3a:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8006f3c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8006f3e:	4619      	mov	r1, r3
 8006f40:	e05a      	b.n	8006ff8 <OTM8009A_Init+0x44c>
 8006f42:	bf00      	nop
 8006f44:	08097211 	.word	0x08097211
 8006f48:	080970e0 	.word	0x080970e0
 8006f4c:	08097212 	.word	0x08097212
 8006f50:	0809716c 	.word	0x0809716c
 8006f54:	08097213 	.word	0x08097213
 8006f58:	08097214 	.word	0x08097214
 8006f5c:	08097215 	.word	0x08097215
 8006f60:	08097216 	.word	0x08097216
 8006f64:	08097217 	.word	0x08097217
 8006f68:	08097218 	.word	0x08097218
 8006f6c:	08097219 	.word	0x08097219
 8006f70:	0809721a 	.word	0x0809721a
 8006f74:	0809721b 	.word	0x0809721b
 8006f78:	0809721c 	.word	0x0809721c
 8006f7c:	0809721d 	.word	0x0809721d
 8006f80:	0809721e 	.word	0x0809721e
 8006f84:	0809721f 	.word	0x0809721f
 8006f88:	08097220 	.word	0x08097220
 8006f8c:	08097221 	.word	0x08097221
 8006f90:	08097222 	.word	0x08097222
 8006f94:	08097223 	.word	0x08097223
 8006f98:	080971e0 	.word	0x080971e0
 8006f9c:	08097224 	.word	0x08097224
 8006fa0:	08097225 	.word	0x08097225
 8006fa4:	08097226 	.word	0x08097226
 8006fa8:	08097227 	.word	0x08097227
 8006fac:	08097228 	.word	0x08097228
 8006fb0:	08097229 	.word	0x08097229
 8006fb4:	0809722a 	.word	0x0809722a
 8006fb8:	0809722b 	.word	0x0809722b
 8006fbc:	0809722c 	.word	0x0809722c
 8006fc0:	080971e4 	.word	0x080971e4
 8006fc4:	080971e8 	.word	0x080971e8
 8006fc8:	0809722d 	.word	0x0809722d
 8006fcc:	080971f0 	.word	0x080971f0
 8006fd0:	0809722e 	.word	0x0809722e
 8006fd4:	08097200 	.word	0x08097200
 8006fd8:	0809722f 	.word	0x0809722f
 8006fdc:	080970e4 	.word	0x080970e4
 8006fe0:	08097230 	.word	0x08097230
 8006fe4:	0809723d 	.word	0x0809723d
 8006fe8:	080970f0 	.word	0x080970f0
 8006fec:	08097231 	.word	0x08097231
 8006ff0:	080970fc 	.word	0x080970fc
 8006ff4:	0809710c 	.word	0x0809710c
 8006ff8:	4ad1      	ldr	r2, [pc, #836]	; (8007340 <OTM8009A_Init+0x794>)
 8006ffa:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8006ffc:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8006ffe:	f000 fab9 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8007002:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8007004:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8007006:	4acf      	ldr	r2, [pc, #828]	; (8007344 <OTM8009A_Init+0x798>)
 8007008:	21cb      	movs	r1, #203	; 0xcb
 800700a:	4638      	mov	r0, r7
 800700c:	f000 fab2 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8007010:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8007012:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8007014:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8007016:	4619      	mov	r1, r3
 8007018:	4acb      	ldr	r2, [pc, #812]	; (8007348 <OTM8009A_Init+0x79c>)
 800701a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 800701c:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800701e:	f000 faa9 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8007022:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8007024:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8007026:	4ac9      	ldr	r2, [pc, #804]	; (800734c <OTM8009A_Init+0x7a0>)
 8007028:	21cb      	movs	r1, #203	; 0xcb
 800702a:	4638      	mov	r0, r7
 800702c:	f000 faa2 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8007030:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8007032:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8007034:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8007036:	4619      	mov	r1, r3
 8007038:	4ac5      	ldr	r2, [pc, #788]	; (8007350 <OTM8009A_Init+0x7a4>)
 800703a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 800703c:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800703e:	f000 fa99 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8007042:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8007044:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8007046:	4ac3      	ldr	r2, [pc, #780]	; (8007354 <OTM8009A_Init+0x7a8>)
 8007048:	21cb      	movs	r1, #203	; 0xcb
 800704a:	4638      	mov	r0, r7
 800704c:	f000 fa92 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8007050:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8007052:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8007054:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8007056:	4619      	mov	r1, r3
 8007058:	4abf      	ldr	r2, [pc, #764]	; (8007358 <OTM8009A_Init+0x7ac>)
 800705a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 800705c:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 800705e:	f000 fa89 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8007062:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8007064:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8007066:	4abd      	ldr	r2, [pc, #756]	; (800735c <OTM8009A_Init+0x7b0>)
 8007068:	21cb      	movs	r1, #203	; 0xcb
 800706a:	4638      	mov	r0, r7
 800706c:	f000 fa82 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8007070:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8007072:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8007074:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8007076:	4619      	mov	r1, r3
 8007078:	4ab9      	ldr	r2, [pc, #740]	; (8007360 <OTM8009A_Init+0x7b4>)
 800707a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 800707c:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 800707e:	f000 fa79 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8007082:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8007084:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8007086:	4ab7      	ldr	r2, [pc, #732]	; (8007364 <OTM8009A_Init+0x7b8>)
 8007088:	21cb      	movs	r1, #203	; 0xcb
 800708a:	4638      	mov	r0, r7
 800708c:	f000 fa72 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8007090:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8007092:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8007094:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8007096:	4619      	mov	r1, r3
 8007098:	4ab3      	ldr	r2, [pc, #716]	; (8007368 <OTM8009A_Init+0x7bc>)
 800709a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 800709c:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800709e:	f000 fa69 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 80070a2:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80070a4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 80070a6:	4ab1      	ldr	r2, [pc, #708]	; (800736c <OTM8009A_Init+0x7c0>)
 80070a8:	21cc      	movs	r1, #204	; 0xcc
 80070aa:	4638      	mov	r0, r7
 80070ac:	f000 fa62 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80070b0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80070b2:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 80070b4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80070b6:	4619      	mov	r1, r3
 80070b8:	4aad      	ldr	r2, [pc, #692]	; (8007370 <OTM8009A_Init+0x7c4>)
 80070ba:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 80070bc:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80070be:	f000 fa59 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 80070c2:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80070c4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 80070c6:	4aab      	ldr	r2, [pc, #684]	; (8007374 <OTM8009A_Init+0x7c8>)
 80070c8:	21cc      	movs	r1, #204	; 0xcc
 80070ca:	4638      	mov	r0, r7
 80070cc:	f000 fa52 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80070d0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80070d2:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 80070d4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80070d6:	4619      	mov	r1, r3
 80070d8:	4aa7      	ldr	r2, [pc, #668]	; (8007378 <OTM8009A_Init+0x7cc>)
 80070da:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 80070dc:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80070de:	f000 fa49 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 80070e2:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80070e4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 80070e6:	4aa5      	ldr	r2, [pc, #660]	; (800737c <OTM8009A_Init+0x7d0>)
 80070e8:	21cc      	movs	r1, #204	; 0xcc
 80070ea:	4638      	mov	r0, r7
 80070ec:	f000 fa42 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80070f0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80070f2:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 80070f4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80070f6:	4619      	mov	r1, r3
 80070f8:	4a91      	ldr	r2, [pc, #580]	; (8007340 <OTM8009A_Init+0x794>)
 80070fa:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 80070fc:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80070fe:	f000 fa39 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8007102:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8007104:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8007106:	4a9e      	ldr	r2, [pc, #632]	; (8007380 <OTM8009A_Init+0x7d4>)
 8007108:	21cc      	movs	r1, #204	; 0xcc
 800710a:	4638      	mov	r0, r7
 800710c:	f000 fa32 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8007110:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8007112:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8007114:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8007116:	4619      	mov	r1, r3
 8007118:	4a8b      	ldr	r2, [pc, #556]	; (8007348 <OTM8009A_Init+0x79c>)
 800711a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 800711c:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800711e:	f000 fa29 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8007122:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8007124:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8007126:	4a97      	ldr	r2, [pc, #604]	; (8007384 <OTM8009A_Init+0x7d8>)
 8007128:	21cc      	movs	r1, #204	; 0xcc
 800712a:	4638      	mov	r0, r7
 800712c:	f000 fa22 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8007130:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8007132:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8007134:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8007136:	4619      	mov	r1, r3
 8007138:	4a85      	ldr	r2, [pc, #532]	; (8007350 <OTM8009A_Init+0x7a4>)
 800713a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 800713c:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800713e:	f000 fa19 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8007142:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8007144:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8007146:	4a90      	ldr	r2, [pc, #576]	; (8007388 <OTM8009A_Init+0x7dc>)
 8007148:	21cc      	movs	r1, #204	; 0xcc
 800714a:	4638      	mov	r0, r7
 800714c:	f000 fa12 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8007150:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8007152:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8007154:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8007156:	4619      	mov	r1, r3
 8007158:	4a8c      	ldr	r2, [pc, #560]	; (800738c <OTM8009A_Init+0x7e0>)
 800715a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 800715c:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800715e:	f000 fa09 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8007162:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8007164:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8007166:	4a8a      	ldr	r2, [pc, #552]	; (8007390 <OTM8009A_Init+0x7e4>)
 8007168:	21c5      	movs	r1, #197	; 0xc5
 800716a:	4638      	mov	r0, r7
 800716c:	f000 fa02 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8007170:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8007172:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8007174:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8007176:	4619      	mov	r1, r3
 8007178:	4a86      	ldr	r2, [pc, #536]	; (8007394 <OTM8009A_Init+0x7e8>)
 800717a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 800717c:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 800717e:	f000 f9f9 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8007182:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8007184:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8007186:	4a84      	ldr	r2, [pc, #528]	; (8007398 <OTM8009A_Init+0x7ec>)
 8007188:	21f5      	movs	r1, #245	; 0xf5
 800718a:	4638      	mov	r0, r7
 800718c:	f000 f9f2 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8007190:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8007192:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8007194:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8007196:	4619      	mov	r1, r3
 8007198:	4a80      	ldr	r2, [pc, #512]	; (800739c <OTM8009A_Init+0x7f0>)
 800719a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 800719c:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 800719e:	f000 f9e9 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 80071a2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 80071a4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 80071a6:	4a7e      	ldr	r2, [pc, #504]	; (80073a0 <OTM8009A_Init+0x7f4>)
 80071a8:	21c6      	movs	r1, #198	; 0xc6
 80071aa:	4638      	mov	r0, r7
 80071ac:	f000 f9e2 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80071b0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 80071b2:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 80071b4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80071b6:	4619      	mov	r1, r3
 80071b8:	4a7a      	ldr	r2, [pc, #488]	; (80073a4 <OTM8009A_Init+0x7f8>)
 80071ba:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 80071bc:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80071be:	f000 f9d9 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 80071c2:	2303      	movs	r3, #3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80071c4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 80071c6:	4a78      	ldr	r2, [pc, #480]	; (80073a8 <OTM8009A_Init+0x7fc>)
 80071c8:	21ff      	movs	r1, #255	; 0xff
 80071ca:	4638      	mov	r0, r7
 80071cc:	f000 f9d2 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80071d0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80071d2:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80071d4:	4a73      	ldr	r2, [pc, #460]	; (80073a4 <OTM8009A_Init+0x7f8>)
 80071d6:	4619      	mov	r1, r3
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 80071d8:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80071da:	4638      	mov	r0, r7
 80071dc:	f000 f9ca 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80071e0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 80071e2:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80071e4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80071e6:	4619      	mov	r1, r3
 80071e8:	4a6e      	ldr	r2, [pc, #440]	; (80073a4 <OTM8009A_Init+0x7f8>)
 80071ea:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80071ec:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80071ee:	f000 f9c1 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80071f2:	2310      	movs	r3, #16
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80071f4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80071f6:	4a6d      	ldr	r2, [pc, #436]	; (80073ac <OTM8009A_Init+0x800>)
 80071f8:	21e1      	movs	r1, #225	; 0xe1
 80071fa:	4638      	mov	r0, r7
 80071fc:	f000 f9ba 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007200:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007202:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8007204:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007206:	4619      	mov	r1, r3
 8007208:	4a66      	ldr	r2, [pc, #408]	; (80073a4 <OTM8009A_Init+0x7f8>)
 800720a:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 800720c:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800720e:	f000 f9b1 	bl	8007574 <otm8009a_write_reg>
 8007212:	4605      	mov	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8007214:	2310      	movs	r3, #16
 8007216:	4a66      	ldr	r2, [pc, #408]	; (80073b0 <OTM8009A_Init+0x804>)
 8007218:	21e2      	movs	r1, #226	; 0xe2
 800721a:	4638      	mov	r0, r7
 800721c:	f000 f9aa 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007220:	4425      	add	r5, r4
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8007222:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8007224:	2300      	movs	r3, #0
 8007226:	4a63      	ldr	r2, [pc, #396]	; (80073b4 <OTM8009A_Init+0x808>)
 8007228:	2111      	movs	r1, #17
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 800722a:	442c      	add	r4, r5
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 800722c:	4638      	mov	r0, r7
 800722e:	f000 f9a1 	bl	8007574 <otm8009a_write_reg>
  tickstart = pObj->IO.GetTick();
 8007232:	f8d8 300c 	ldr.w	r3, [r8, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8007236:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 8007238:	4798      	blx	r3
 800723a:	4605      	mov	r5, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 800723c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007240:	4798      	blx	r3
 8007242:	1b40      	subs	r0, r0, r5
 8007244:	2877      	cmp	r0, #119	; 0x77
 8007246:	d9f9      	bls.n	800723c <OTM8009A_Init+0x690>
  switch(ColorCoding)
 8007248:	f1b9 0f00 	cmp.w	r9, #0
 800724c:	d074      	beq.n	8007338 <OTM8009A_Init+0x78c>
 800724e:	f1b9 0f02 	cmp.w	r9, #2
 8007252:	d14f      	bne.n	80072f4 <OTM8009A_Init+0x748>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 8007254:	2300      	movs	r3, #0
 8007256:	4a58      	ldr	r2, [pc, #352]	; (80073b8 <OTM8009A_Init+0x80c>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8007258:	213a      	movs	r1, #58	; 0x3a
 800725a:	4638      	mov	r0, r7
 800725c:	f000 f98a 	bl	8007574 <otm8009a_write_reg>
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 8007260:	4d56      	ldr	r5, [pc, #344]	; (80073bc <OTM8009A_Init+0x810>)
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8007262:	f1ba 0f01 	cmp.w	sl, #1
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8007266:	4404      	add	r4, r0
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 8007268:	f8c5 9004 	str.w	r9, [r5, #4]
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 800726c:	d046      	beq.n	80072fc <OTM8009A_Init+0x750>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 800726e:	2300      	movs	r3, #0
 8007270:	602b      	str	r3, [r5, #0]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8007272:	2300      	movs	r3, #0
 8007274:	4a52      	ldr	r2, [pc, #328]	; (80073c0 <OTM8009A_Init+0x814>)
 8007276:	2151      	movs	r1, #81	; 0x51
 8007278:	4638      	mov	r0, r7
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 800727a:	469a      	mov	sl, r3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 800727c:	f000 f97a 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8007280:	4a50      	ldr	r2, [pc, #320]	; (80073c4 <OTM8009A_Init+0x818>)
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8007282:	eb04 0900 	add.w	r9, r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8007286:	4653      	mov	r3, sl
 8007288:	2153      	movs	r1, #83	; 0x53
 800728a:	4638      	mov	r0, r7
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 800728c:	f8c5 a008 	str.w	sl, [r5, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8007290:	f000 f970 	bl	8007574 <otm8009a_write_reg>
 8007294:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 8007296:	4653      	mov	r3, sl
 8007298:	4a4b      	ldr	r2, [pc, #300]	; (80073c8 <OTM8009A_Init+0x81c>)
 800729a:	2155      	movs	r1, #85	; 0x55
 800729c:	4638      	mov	r0, r7
 800729e:	f000 f969 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 80072a2:	444c      	add	r4, r9
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 80072a4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 80072a6:	4653      	mov	r3, sl
 80072a8:	4a48      	ldr	r2, [pc, #288]	; (80073cc <OTM8009A_Init+0x820>)
 80072aa:	215e      	movs	r1, #94	; 0x5e
 80072ac:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 80072ae:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 80072b0:	f000 f960 	bl	8007574 <otm8009a_write_reg>
 80072b4:	4606      	mov	r6, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 80072b6:	4653      	mov	r3, sl
 80072b8:	4a45      	ldr	r2, [pc, #276]	; (80073d0 <OTM8009A_Init+0x824>)
 80072ba:	2129      	movs	r1, #41	; 0x29
 80072bc:	4638      	mov	r0, r7
 80072be:	f000 f959 	bl	8007574 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 80072c2:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 80072c4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80072c6:	4653      	mov	r3, sl
 80072c8:	4651      	mov	r1, sl
 80072ca:	4a36      	ldr	r2, [pc, #216]	; (80073a4 <OTM8009A_Init+0x7f8>)
 80072cc:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 80072ce:	4426      	add	r6, r4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80072d0:	f000 f950 	bl	8007574 <otm8009a_write_reg>
 80072d4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 80072d6:	4653      	mov	r3, sl
 80072d8:	4638      	mov	r0, r7
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80072da:	4434      	add	r4, r6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 80072dc:	4a3d      	ldr	r2, [pc, #244]	; (80073d4 <OTM8009A_Init+0x828>)
 80072de:	212c      	movs	r1, #44	; 0x2c
 80072e0:	f000 f948 	bl	8007574 <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 80072e4:	42c4      	cmn	r4, r0
}
 80072e6:	bf14      	ite	ne
 80072e8:	f04f 30ff 	movne.w	r0, #4294967295
 80072ec:	4650      	moveq	r0, sl
 80072ee:	b002      	add	sp, #8
 80072f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 80072f4:	f1ba 0f01 	cmp.w	sl, #1
 80072f8:	4d30      	ldr	r5, [pc, #192]	; (80073bc <OTM8009A_Init+0x810>)
 80072fa:	d1b8      	bne.n	800726e <OTM8009A_Init+0x6c2>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 80072fc:	2660      	movs	r6, #96	; 0x60
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 80072fe:	2300      	movs	r3, #0
 8007300:	f10d 0207 	add.w	r2, sp, #7
 8007304:	2136      	movs	r1, #54	; 0x36
 8007306:	4638      	mov	r0, r7
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8007308:	f88d 6007 	strb.w	r6, [sp, #7]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 800730c:	f000 f932 	bl	8007574 <otm8009a_write_reg>
 8007310:	4606      	mov	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8007312:	2304      	movs	r3, #4
 8007314:	4a30      	ldr	r2, [pc, #192]	; (80073d8 <OTM8009A_Init+0x82c>)
 8007316:	212a      	movs	r1, #42	; 0x2a
 8007318:	4638      	mov	r0, r7
 800731a:	f000 f92b 	bl	8007574 <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 800731e:	4434      	add	r4, r6
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8007320:	4606      	mov	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8007322:	2304      	movs	r3, #4
 8007324:	4a2d      	ldr	r2, [pc, #180]	; (80073dc <OTM8009A_Init+0x830>)
 8007326:	212b      	movs	r1, #43	; 0x2b
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8007328:	4434      	add	r4, r6
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 800732a:	4638      	mov	r0, r7
 800732c:	f000 f922 	bl	8007574 <otm8009a_write_reg>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8007330:	f8c5 a000 	str.w	sl, [r5]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8007334:	4404      	add	r4, r0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8007336:	e79c      	b.n	8007272 <OTM8009A_Init+0x6c6>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8007338:	464b      	mov	r3, r9
 800733a:	4a29      	ldr	r2, [pc, #164]	; (80073e0 <OTM8009A_Init+0x834>)
 800733c:	e78c      	b.n	8007258 <OTM8009A_Init+0x6ac>
 800733e:	bf00      	nop
 8007340:	0809722e 	.word	0x0809722e
 8007344:	0809711c 	.word	0x0809711c
 8007348:	0809722f 	.word	0x0809722f
 800734c:	08097128 	.word	0x08097128
 8007350:	08097230 	.word	0x08097230
 8007354:	08097138 	.word	0x08097138
 8007358:	08097232 	.word	0x08097232
 800735c:	08097148 	.word	0x08097148
 8007360:	08097233 	.word	0x08097233
 8007364:	08097154 	.word	0x08097154
 8007368:	08097212 	.word	0x08097212
 800736c:	08097160 	.word	0x08097160
 8007370:	08097231 	.word	0x08097231
 8007374:	08097170 	.word	0x08097170
 8007378:	0809722d 	.word	0x0809722d
 800737c:	08097180 	.word	0x08097180
 8007380:	08097190 	.word	0x08097190
 8007384:	0809719c 	.word	0x0809719c
 8007388:	080971ac 	.word	0x080971ac
 800738c:	0809721d 	.word	0x0809721d
 8007390:	0809723e 	.word	0x0809723e
 8007394:	0809723f 	.word	0x0809723f
 8007398:	08097240 	.word	0x08097240
 800739c:	08097241 	.word	0x08097241
 80073a0:	08097242 	.word	0x08097242
 80073a4:	08097211 	.word	0x08097211
 80073a8:	080971bc 	.word	0x080971bc
 80073ac:	080971c0 	.word	0x080971c0
 80073b0:	080971d0 	.word	0x080971d0
 80073b4:	08097234 	.word	0x08097234
 80073b8:	08097235 	.word	0x08097235
 80073bc:	200089bc 	.word	0x200089bc
 80073c0:	08097237 	.word	0x08097237
 80073c4:	08097238 	.word	0x08097238
 80073c8:	08097239 	.word	0x08097239
 80073cc:	0809723a 	.word	0x0809723a
 80073d0:	0809723b 	.word	0x0809723b
 80073d4:	0809723c 	.word	0x0809723c
 80073d8:	080970d8 	.word	0x080970d8
 80073dc:	080970dc 	.word	0x080970dc
 80073e0:	08097236 	.word	0x08097236

080073e4 <OTM8009A_SetBrightness>:
{
 80073e4:	b570      	push	{r4, r5, r6, lr}
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 80073e6:	ebc1 2401 	rsb	r4, r1, r1, lsl #8
 80073ea:	4e0b      	ldr	r6, [pc, #44]	; (8007418 <OTM8009A_SetBrightness+0x34>)
{
 80073ec:	b082      	sub	sp, #8
 80073ee:	460d      	mov	r5, r1
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 80073f0:	fba6 6404 	umull	r6, r4, r6, r4
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 80073f4:	2300      	movs	r3, #0
 80073f6:	f10d 0207 	add.w	r2, sp, #7
 80073fa:	3010      	adds	r0, #16
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 80073fc:	0964      	lsrs	r4, r4, #5
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 80073fe:	2151      	movs	r1, #81	; 0x51
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8007400:	f88d 4007 	strb.w	r4, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 8007404:	f000 f8b6 	bl	8007574 <otm8009a_write_reg>
 8007408:	b918      	cbnz	r0, 8007412 <OTM8009A_SetBrightness+0x2e>
    OTM8009ACtx.Brightness = Brightness;
 800740a:	4b04      	ldr	r3, [pc, #16]	; (800741c <OTM8009A_SetBrightness+0x38>)
 800740c:	609d      	str	r5, [r3, #8]
}
 800740e:	b002      	add	sp, #8
 8007410:	bd70      	pop	{r4, r5, r6, pc}
    ret = OTM8009A_ERROR;
 8007412:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 8007416:	e7fa      	b.n	800740e <OTM8009A_SetBrightness+0x2a>
 8007418:	51eb851f 	.word	0x51eb851f
 800741c:	200089bc 	.word	0x200089bc

08007420 <OTM8009A_DisplayOn>:
{
 8007420:	b500      	push	{lr}
 8007422:	b083      	sub	sp, #12
  uint8_t display = 0;
 8007424:	2300      	movs	r3, #0
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &display, 0) != OTM8009A_OK)
 8007426:	2129      	movs	r1, #41	; 0x29
 8007428:	3010      	adds	r0, #16
 800742a:	f10d 0207 	add.w	r2, sp, #7
  uint8_t display = 0;
 800742e:	f88d 3007 	strb.w	r3, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &display, 0) != OTM8009A_OK)
 8007432:	f000 f89f 	bl	8007574 <otm8009a_write_reg>
 8007436:	3800      	subs	r0, #0
 8007438:	bf18      	it	ne
 800743a:	2001      	movne	r0, #1
}
 800743c:	4240      	negs	r0, r0
 800743e:	b003      	add	sp, #12
 8007440:	f85d fb04 	ldr.w	pc, [sp], #4

08007444 <OTM8009A_DisplayOff>:
{
 8007444:	b500      	push	{lr}
 8007446:	b083      	sub	sp, #12
  uint8_t display = 0;
 8007448:	2300      	movs	r3, #0
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPOFF, &display, 0) != OTM8009A_OK)
 800744a:	2128      	movs	r1, #40	; 0x28
 800744c:	3010      	adds	r0, #16
 800744e:	f10d 0207 	add.w	r2, sp, #7
  uint8_t display = 0;
 8007452:	f88d 3007 	strb.w	r3, [sp, #7]
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPOFF, &display, 0) != OTM8009A_OK)
 8007456:	f000 f88d 	bl	8007574 <otm8009a_write_reg>
 800745a:	3800      	subs	r0, #0
 800745c:	bf18      	it	ne
 800745e:	2001      	movne	r0, #1
}
 8007460:	4240      	negs	r0, r0
 8007462:	b003      	add	sp, #12
 8007464:	f85d fb04 	ldr.w	pc, [sp], #4

08007468 <OTM8009A_SetOrientation>:
{
 8007468:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 800746a:	2360      	movs	r3, #96	; 0x60
{
 800746c:	b083      	sub	sp, #12
  uint8_t tmp1 = OTM8009A_MADCTR_MODE_PORTRAIT;
 800746e:	2600      	movs	r6, #0
  if((Orientation != OTM8009A_ORIENTATION_LANDSCAPE) && (Orientation != OTM8009A_ORIENTATION_PORTRAIT))
 8007470:	2901      	cmp	r1, #1
  uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8007472:	f88d 3006 	strb.w	r3, [sp, #6]
  uint8_t tmp1 = OTM8009A_MADCTR_MODE_PORTRAIT;
 8007476:	f88d 6007 	strb.w	r6, [sp, #7]
  if((Orientation != OTM8009A_ORIENTATION_LANDSCAPE) && (Orientation != OTM8009A_ORIENTATION_PORTRAIT))
 800747a:	d83e      	bhi.n	80074fa <OTM8009A_SetOrientation+0x92>
  else if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 800747c:	d020      	beq.n	80074c0 <OTM8009A_SetOrientation+0x58>
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp1, 0);
 800747e:	f100 0510 	add.w	r5, r0, #16
 8007482:	4633      	mov	r3, r6
 8007484:	f10d 0207 	add.w	r2, sp, #7
 8007488:	2136      	movs	r1, #54	; 0x36
 800748a:	4628      	mov	r0, r5
 800748c:	f000 f872 	bl	8007574 <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8007490:	2304      	movs	r3, #4
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp1, 0);
 8007492:	4604      	mov	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8007494:	4a1a      	ldr	r2, [pc, #104]	; (8007500 <OTM8009A_SetOrientation+0x98>)
 8007496:	212a      	movs	r1, #42	; 0x2a
 8007498:	4628      	mov	r0, r5
 800749a:	f000 f86b 	bl	8007574 <otm8009a_write_reg>
 800749e:	4607      	mov	r7, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 80074a0:	2304      	movs	r3, #4
 80074a2:	4628      	mov	r0, r5
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 80074a4:	443c      	add	r4, r7
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 80074a6:	4a17      	ldr	r2, [pc, #92]	; (8007504 <OTM8009A_SetOrientation+0x9c>)
 80074a8:	212b      	movs	r1, #43	; 0x2b
 80074aa:	f000 f863 	bl	8007574 <otm8009a_write_reg>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 80074ae:	4b16      	ldr	r3, [pc, #88]	; (8007508 <OTM8009A_SetOrientation+0xa0>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 80074b0:	4420      	add	r0, r4
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 80074b2:	601e      	str	r6, [r3, #0]
  if(ret != OTM8009A_OK)
 80074b4:	3800      	subs	r0, #0
 80074b6:	bf18      	it	ne
 80074b8:	2001      	movne	r0, #1
 80074ba:	4240      	negs	r0, r0
}
 80074bc:	b003      	add	sp, #12
 80074be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 80074c0:	f100 0510 	add.w	r5, r0, #16
 80074c4:	4633      	mov	r3, r6
 80074c6:	460f      	mov	r7, r1
 80074c8:	f10d 0206 	add.w	r2, sp, #6
 80074cc:	2136      	movs	r1, #54	; 0x36
 80074ce:	4628      	mov	r0, r5
 80074d0:	f000 f850 	bl	8007574 <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 80074d4:	2304      	movs	r3, #4
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 80074d6:	4604      	mov	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 80074d8:	4a09      	ldr	r2, [pc, #36]	; (8007500 <OTM8009A_SetOrientation+0x98>)
 80074da:	212a      	movs	r1, #42	; 0x2a
 80074dc:	4628      	mov	r0, r5
 80074de:	f000 f849 	bl	8007574 <otm8009a_write_reg>
 80074e2:	4606      	mov	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 80074e4:	2304      	movs	r3, #4
 80074e6:	4628      	mov	r0, r5
 80074e8:	4a06      	ldr	r2, [pc, #24]	; (8007504 <OTM8009A_SetOrientation+0x9c>)
 80074ea:	212b      	movs	r1, #43	; 0x2b
 80074ec:	f000 f842 	bl	8007574 <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 80074f0:	4434      	add	r4, r6
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 80074f2:	4b05      	ldr	r3, [pc, #20]	; (8007508 <OTM8009A_SetOrientation+0xa0>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 80074f4:	4420      	add	r0, r4
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 80074f6:	601f      	str	r7, [r3, #0]
 80074f8:	e7dc      	b.n	80074b4 <OTM8009A_SetOrientation+0x4c>
    ret = OTM8009A_ERROR;
 80074fa:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80074fe:	e7dd      	b.n	80074bc <OTM8009A_SetOrientation+0x54>
 8007500:	080970d8 	.word	0x080970d8
 8007504:	080970dc 	.word	0x080970dc
 8007508:	200089bc 	.word	0x200089bc

0800750c <OTM8009A_ReadID>:
{ 
 800750c:	460a      	mov	r2, r1
  if(otm8009a_read_reg(&pObj->Ctx, OTM8009A_CMD_ID1, (uint8_t *)Id, 0)!= OTM8009A_OK)
 800750e:	3010      	adds	r0, #16
 8007510:	21da      	movs	r1, #218	; 0xda
{ 
 8007512:	b508      	push	{r3, lr}
  if(otm8009a_read_reg(&pObj->Ctx, OTM8009A_CMD_ID1, (uint8_t *)Id, 0)!= OTM8009A_OK)
 8007514:	2300      	movs	r3, #0
 8007516:	f000 f825 	bl	8007564 <otm8009a_read_reg>
 800751a:	3800      	subs	r0, #0
 800751c:	bf18      	it	ne
 800751e:	2001      	movne	r0, #1
}  
 8007520:	4240      	negs	r0, r0
 8007522:	bd08      	pop	{r3, pc}

08007524 <OTM8009A_DrawVLine>:
 8007524:	f04f 30ff 	mov.w	r0, #4294967295
 8007528:	4770      	bx	lr
 800752a:	bf00      	nop

0800752c <OTM8009A_GetPixel>:
 800752c:	f04f 30ff 	mov.w	r0, #4294967295
 8007530:	4770      	bx	lr
 8007532:	bf00      	nop

08007534 <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 8007534:	b178      	cbz	r0, 8007556 <OTM8009A_RegisterBusIO+0x22>
    pObj->IO.WriteReg  = pIO->WriteReg;
 8007536:	684a      	ldr	r2, [r1, #4]
 8007538:	4603      	mov	r3, r0
  int32_t ret = OTM8009A_OK;
 800753a:	2000      	movs	r0, #0
{
 800753c:	b430      	push	{r4, r5}
    pObj->IO.GetTick   = pIO->GetTick;
 800753e:	e9d1 5402 	ldrd	r5, r4, [r1, #8]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 8007542:	4906      	ldr	r1, [pc, #24]	; (800755c <OTM8009A_RegisterBusIO+0x28>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 8007544:	605a      	str	r2, [r3, #4]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 8007546:	4a06      	ldr	r2, [pc, #24]	; (8007560 <OTM8009A_RegisterBusIO+0x2c>)
    pObj->IO.GetTick   = pIO->GetTick;
 8007548:	e9c3 5402 	strd	r5, r4, [r3, #8]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 800754c:	e9c3 1305 	strd	r1, r3, [r3, #20]
}
 8007550:	bc30      	pop	{r4, r5}
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 8007552:	611a      	str	r2, [r3, #16]
}
 8007554:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 8007556:	f04f 30ff 	mov.w	r0, #4294967295
}
 800755a:	4770      	bx	lr
 800755c:	08006b8d 	.word	0x08006b8d
 8007560:	08006b9d 	.word	0x08006b9d

08007564 <otm8009a_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : Data Read
*******************************************************************************/
int32_t otm8009a_read_reg(otm8009a_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8007564:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8007566:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 800756a:	46a4      	mov	ip, r4
}
 800756c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8007570:	4760      	bx	ip
 8007572:	bf00      	nop

08007574 <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 8007574:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8007576:	6804      	ldr	r4, [r0, #0]
 8007578:	6880      	ldr	r0, [r0, #8]
 800757a:	46a4      	mov	ip, r4
}
 800757c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8007580:	4760      	bx	ip
 8007582:	bf00      	nop

08007584 <OV5640_DeInit>:
  * @param  pObj  pointer to component object
  * @retval Component status
  */
int32_t OV5640_DeInit(OV5640_Object_t *pObj)
{
  if (pObj->IsInitialized == 1U)
 8007584:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8007588:	2b01      	cmp	r3, #1
 800758a:	d102      	bne.n	8007592 <OV5640_DeInit+0xe>
  {
    /* De-initialize camera sensor interface */
    pObj->IsInitialized = 0U;
 800758c:	2300      	movs	r3, #0
 800758e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  }

  return OV5640_OK;
}
 8007592:	2000      	movs	r0, #0
 8007594:	4770      	bx	lr
 8007596:	bf00      	nop

08007598 <OV5640_GetPixelFormat>:
{
  (void)(pObj);
  (void)(PixelFormat);

  return OV5640_ERROR;
}
 8007598:	f04f 30ff 	mov.w	r0, #4294967295
 800759c:	4770      	bx	lr
 800759e:	bf00      	nop

080075a0 <OV5640_GetCapabilities>:
  */
int32_t OV5640_GetCapabilities(OV5640_Object_t *pObj, OV5640_Capabilities_t *Capabilities)
{
  int32_t ret;

  if (pObj == NULL)
 80075a0:	b160      	cbz	r0, 80075bc <OV5640_GetCapabilities+0x1c>
  {
    ret = OV5640_ERROR;
  }
  else
  {
    Capabilities->Config_Brightness    = 1;
 80075a2:	2301      	movs	r3, #1
    Capabilities->Config_Resolution    = 1;
    Capabilities->Config_Saturation    = 1;
    Capabilities->Config_SpecialEffect = 1;
    Capabilities->Config_Zoom          = 1;

    ret = OV5640_OK;
 80075a4:	2000      	movs	r0, #0
    Capabilities->Config_Brightness    = 1;
 80075a6:	60cb      	str	r3, [r1, #12]
    Capabilities->Config_LightMode     = 1;
 80075a8:	604b      	str	r3, [r1, #4]
    Capabilities->Config_MirrorFlip    = 1;
 80075aa:	61cb      	str	r3, [r1, #28]
    Capabilities->Config_NightMode     = 1;
 80075ac:	624b      	str	r3, [r1, #36]	; 0x24
    Capabilities->Config_Resolution    = 1;
 80075ae:	600b      	str	r3, [r1, #0]
    Capabilities->Config_Saturation    = 1;
 80075b0:	610b      	str	r3, [r1, #16]
    Capabilities->Config_SpecialEffect = 1;
 80075b2:	608b      	str	r3, [r1, #8]
    Capabilities->Config_Zoom          = 1;
 80075b4:	620b      	str	r3, [r1, #32]
    Capabilities->Config_HueDegree     = 1;
 80075b6:	e9c1 3305 	strd	r3, r3, [r1, #20]
    ret = OV5640_OK;
 80075ba:	4770      	bx	lr
    ret = OV5640_ERROR;
 80075bc:	f04f 30ff 	mov.w	r0, #4294967295
  }

  return ret;
}
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop

080075c4 <OV5640_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_ReadRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80075c4:	b410      	push	{r4}
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80075c6:	6904      	ldr	r4, [r0, #16]
 80075c8:	8900      	ldrh	r0, [r0, #8]
 80075ca:	46a4      	mov	ip, r4
}
 80075cc:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80075d0:	4760      	bx	ip
 80075d2:	bf00      	nop

080075d4 <OV5640_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_WriteRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80075d4:	b410      	push	{r4}
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80075d6:	68c4      	ldr	r4, [r0, #12]
 80075d8:	8900      	ldrh	r0, [r0, #8]
 80075da:	46a4      	mov	ip, r4
}
 80075dc:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80075e0:	4760      	bx	ip
 80075e2:	bf00      	nop

080075e4 <OV5640_SetResolution>:
  if (Resolution > OV5640_R800x480)
 80075e4:	2904      	cmp	r1, #4
 80075e6:	d869      	bhi.n	80076bc <OV5640_SetResolution+0xd8>
    switch (Resolution)
 80075e8:	3901      	subs	r1, #1
{
 80075ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075ec:	f100 0418 	add.w	r4, r0, #24
 80075f0:	b083      	sub	sp, #12
  if (Resolution > OV5640_R800x480)
 80075f2:	2600      	movs	r6, #0
 80075f4:	2903      	cmp	r1, #3
 80075f6:	d864      	bhi.n	80076c2 <OV5640_SetResolution+0xde>
 80075f8:	e8df f001 	tbb	[pc, r1]
 80075fc:	02192f45 	.word	0x02192f45
          if (ret != OV5640_ERROR)
 8007600:	f10d 0507 	add.w	r5, sp, #7
 8007604:	4f3a      	ldr	r7, [pc, #232]	; (80076f0 <OV5640_SetResolution+0x10c>)
            tmp = (uint8_t)OV5640_WVGA[index][1];
 8007606:	eb07 0086 	add.w	r0, r7, r6, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 800760a:	2301      	movs	r3, #1
 800760c:	f837 1026 	ldrh.w	r1, [r7, r6, lsl #2]
 8007610:	462a      	mov	r2, r5
            tmp = (uint8_t)OV5640_WVGA[index][1];
 8007612:	f8b0 c002 	ldrh.w	ip, [r0, #2]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8007616:	4620      	mov	r0, r4
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8007618:	441e      	add	r6, r3
            tmp = (uint8_t)OV5640_WVGA[index][1];
 800761a:	f88d c007 	strb.w	ip, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 800761e:	f001 f879 	bl	8008714 <ov5640_write_reg>
 8007622:	2800      	cmp	r0, #0
 8007624:	d047      	beq.n	80076b6 <OV5640_SetResolution+0xd2>
    ret = OV5640_ERROR;
 8007626:	f04f 30ff 	mov.w	r0, #4294967295
}
 800762a:	b003      	add	sp, #12
 800762c:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (ret != OV5640_ERROR)
 800762e:	f10d 0507 	add.w	r5, sp, #7
 8007632:	4f30      	ldr	r7, [pc, #192]	; (80076f4 <OV5640_SetResolution+0x110>)
            tmp = (uint8_t)OV5640_VGA[index][1];
 8007634:	eb07 0086 	add.w	r0, r7, r6, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 8007638:	2301      	movs	r3, #1
 800763a:	f837 1026 	ldrh.w	r1, [r7, r6, lsl #2]
 800763e:	462a      	mov	r2, r5
            tmp = (uint8_t)OV5640_VGA[index][1];
 8007640:	f8b0 c002 	ldrh.w	ip, [r0, #2]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 8007644:	4620      	mov	r0, r4
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8007646:	441e      	add	r6, r3
            tmp = (uint8_t)OV5640_VGA[index][1];
 8007648:	f88d c007 	strb.w	ip, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 800764c:	f001 f862 	bl	8008714 <ov5640_write_reg>
 8007650:	2800      	cmp	r0, #0
 8007652:	d1e8      	bne.n	8007626 <OV5640_SetResolution+0x42>
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8007654:	2e04      	cmp	r6, #4
 8007656:	d1ed      	bne.n	8007634 <OV5640_SetResolution+0x50>
 8007658:	e02a      	b.n	80076b0 <OV5640_SetResolution+0xcc>
          if (ret != OV5640_ERROR)
 800765a:	f10d 0507 	add.w	r5, sp, #7
 800765e:	4f26      	ldr	r7, [pc, #152]	; (80076f8 <OV5640_SetResolution+0x114>)
            tmp = (uint8_t)OV5640_480x272[index][1];
 8007660:	eb07 0086 	add.w	r0, r7, r6, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 8007664:	2301      	movs	r3, #1
 8007666:	f837 1026 	ldrh.w	r1, [r7, r6, lsl #2]
 800766a:	462a      	mov	r2, r5
            tmp = (uint8_t)OV5640_480x272[index][1];
 800766c:	f8b0 c002 	ldrh.w	ip, [r0, #2]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 8007670:	4620      	mov	r0, r4
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8007672:	441e      	add	r6, r3
            tmp = (uint8_t)OV5640_480x272[index][1];
 8007674:	f88d c007 	strb.w	ip, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 8007678:	f001 f84c 	bl	8008714 <ov5640_write_reg>
 800767c:	2800      	cmp	r0, #0
 800767e:	d1d2      	bne.n	8007626 <OV5640_SetResolution+0x42>
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8007680:	2e04      	cmp	r6, #4
 8007682:	d1ed      	bne.n	8007660 <OV5640_SetResolution+0x7c>
 8007684:	e014      	b.n	80076b0 <OV5640_SetResolution+0xcc>
          if (ret != OV5640_ERROR)
 8007686:	f10d 0507 	add.w	r5, sp, #7
 800768a:	4f1c      	ldr	r7, [pc, #112]	; (80076fc <OV5640_SetResolution+0x118>)
            tmp = (uint8_t)OV5640_QVGA[index][1];
 800768c:	eb07 0086 	add.w	r0, r7, r6, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 8007690:	2301      	movs	r3, #1
 8007692:	f837 1026 	ldrh.w	r1, [r7, r6, lsl #2]
 8007696:	462a      	mov	r2, r5
            tmp = (uint8_t)OV5640_QVGA[index][1];
 8007698:	f8b0 c002 	ldrh.w	ip, [r0, #2]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 800769c:	4620      	mov	r0, r4
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 800769e:	441e      	add	r6, r3
            tmp = (uint8_t)OV5640_QVGA[index][1];
 80076a0:	f88d c007 	strb.w	ip, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 80076a4:	f001 f836 	bl	8008714 <ov5640_write_reg>
 80076a8:	2800      	cmp	r0, #0
 80076aa:	d1bc      	bne.n	8007626 <OV5640_SetResolution+0x42>
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 80076ac:	2e04      	cmp	r6, #4
 80076ae:	d1ed      	bne.n	800768c <OV5640_SetResolution+0xa8>
  if (Resolution > OV5640_R800x480)
 80076b0:	2000      	movs	r0, #0
}
 80076b2:	b003      	add	sp, #12
 80076b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 80076b6:	2e04      	cmp	r6, #4
 80076b8:	d1a5      	bne.n	8007606 <OV5640_SetResolution+0x22>
 80076ba:	e7f9      	b.n	80076b0 <OV5640_SetResolution+0xcc>
    ret = OV5640_ERROR;
 80076bc:	f04f 30ff 	mov.w	r0, #4294967295
}
 80076c0:	4770      	bx	lr
          if (ret != OV5640_ERROR)
 80076c2:	4f0f      	ldr	r7, [pc, #60]	; (8007700 <OV5640_SetResolution+0x11c>)
 80076c4:	f10d 0507 	add.w	r5, sp, #7
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 80076c8:	eb07 0086 	add.w	r0, r7, r6, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 80076cc:	2301      	movs	r3, #1
 80076ce:	f837 1026 	ldrh.w	r1, [r7, r6, lsl #2]
 80076d2:	462a      	mov	r2, r5
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 80076d4:	f8b0 c002 	ldrh.w	ip, [r0, #2]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 80076d8:	4620      	mov	r0, r4
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 80076da:	441e      	add	r6, r3
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 80076dc:	f88d c007 	strb.w	ip, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 80076e0:	f001 f818 	bl	8008714 <ov5640_write_reg>
 80076e4:	2800      	cmp	r0, #0
 80076e6:	d19e      	bne.n	8007626 <OV5640_SetResolution+0x42>
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 80076e8:	2e04      	cmp	r6, #4
 80076ea:	d1ed      	bne.n	80076c8 <OV5640_SetResolution+0xe4>
 80076ec:	e7e0      	b.n	80076b0 <OV5640_SetResolution+0xcc>
 80076ee:	bf00      	nop
 80076f0:	08097724 	.word	0x08097724
 80076f4:	08097714 	.word	0x08097714
 80076f8:	08097260 	.word	0x08097260
 80076fc:	08097704 	.word	0x08097704
 8007700:	080976f4 	.word	0x080976f4

08007704 <OV5640_SetLightMode>:
{
 8007704:	b5f0      	push	{r4, r5, r6, r7, lr}
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_MANUAL_CONTROL, &tmp, 1);
 8007706:	f100 0618 	add.w	r6, r0, #24
{
 800770a:	b083      	sub	sp, #12
  tmp = 0x00;
 800770c:	2400      	movs	r4, #0
{
 800770e:	460d      	mov	r5, r1
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_MANUAL_CONTROL, &tmp, 1);
 8007710:	f10d 0207 	add.w	r2, sp, #7
 8007714:	2301      	movs	r3, #1
 8007716:	f243 4106 	movw	r1, #13318	; 0x3406
 800771a:	4630      	mov	r0, r6
  tmp = 0x00;
 800771c:	f88d 4007 	strb.w	r4, [sp, #7]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_MANUAL_CONTROL, &tmp, 1);
 8007720:	f000 fff8 	bl	8008714 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8007724:	4604      	mov	r4, r0
 8007726:	b110      	cbz	r0, 800772e <OV5640_SetLightMode+0x2a>
}
 8007728:	4620      	mov	r0, r4
 800772a:	b003      	add	sp, #12
 800772c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmp = 0x46;
 800772e:	2446      	movs	r4, #70	; 0x46
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL16, &tmp, 1);
 8007730:	2301      	movs	r3, #1
 8007732:	f10d 0207 	add.w	r2, sp, #7
 8007736:	f245 1190 	movw	r1, #20880	; 0x5190
 800773a:	4630      	mov	r0, r6
    tmp = 0x46;
 800773c:	f88d 4007 	strb.w	r4, [sp, #7]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL16, &tmp, 1);
 8007740:	f000 ffe8 	bl	8008714 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8007744:	4604      	mov	r4, r0
 8007746:	2800      	cmp	r0, #0
 8007748:	d1ee      	bne.n	8007728 <OV5640_SetLightMode+0x24>
    tmp = 0xF8;
 800774a:	24f8      	movs	r4, #248	; 0xf8
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL17, &tmp, 1);
 800774c:	2301      	movs	r3, #1
 800774e:	f10d 0207 	add.w	r2, sp, #7
 8007752:	f245 1191 	movw	r1, #20881	; 0x5191
 8007756:	4630      	mov	r0, r6
    tmp = 0xF8;
 8007758:	f88d 4007 	strb.w	r4, [sp, #7]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL17, &tmp, 1);
 800775c:	f000 ffda 	bl	8008714 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8007760:	4604      	mov	r4, r0
 8007762:	2800      	cmp	r0, #0
 8007764:	d1e0      	bne.n	8007728 <OV5640_SetLightMode+0x24>
    tmp = 0x04;
 8007766:	2404      	movs	r4, #4
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL18, &tmp, 1);
 8007768:	2301      	movs	r3, #1
 800776a:	f10d 0207 	add.w	r2, sp, #7
 800776e:	f245 1192 	movw	r1, #20882	; 0x5192
 8007772:	4630      	mov	r0, r6
    tmp = 0x04;
 8007774:	f88d 4007 	strb.w	r4, [sp, #7]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL18, &tmp, 1);
 8007778:	f000 ffcc 	bl	8008714 <ov5640_write_reg>
  if (ret == OV5640_OK)
 800777c:	4604      	mov	r4, r0
 800777e:	2800      	cmp	r0, #0
 8007780:	d1d2      	bne.n	8007728 <OV5640_SetLightMode+0x24>
    switch (LightMode)
 8007782:	1e69      	subs	r1, r5, #1
  if (ret == OV5640_OK)
 8007784:	2500      	movs	r5, #0
 8007786:	2907      	cmp	r1, #7
 8007788:	f200 8082 	bhi.w	8007890 <OV5640_SetLightMode+0x18c>
 800778c:	e8df f001 	tbb	[pc, r1]
 8007790:	27804563 	.word	0x27804563
 8007794:	04808080 	.word	0x04808080
 8007798:	4f57      	ldr	r7, [pc, #348]	; (80078f8 <OV5640_SetLightMode+0x1f4>)
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 800779a:	eb07 0085 	add.w	r0, r7, r5, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 800779e:	2301      	movs	r3, #1
 80077a0:	f10d 0207 	add.w	r2, sp, #7
 80077a4:	f837 1025 	ldrh.w	r1, [r7, r5, lsl #2]
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 80077a8:	f8b0 c002 	ldrh.w	ip, [r0, #2]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 80077ac:	4630      	mov	r0, r6
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 80077ae:	f88d c007 	strb.w	ip, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 80077b2:	f000 ffaf 	bl	8008714 <ov5640_write_reg>
 80077b6:	2800      	cmp	r0, #0
 80077b8:	f000 8094 	beq.w	80078e4 <OV5640_SetLightMode+0x1e0>
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 80077bc:	2d06      	cmp	r5, #6
 80077be:	d009      	beq.n	80077d4 <OV5640_SetLightMode+0xd0>
 80077c0:	2d05      	cmp	r5, #5
 80077c2:	f105 0302 	add.w	r3, r5, #2
 80077c6:	d005      	beq.n	80077d4 <OV5640_SetLightMode+0xd0>
 80077c8:	2b06      	cmp	r3, #6
 80077ca:	f103 0302 	add.w	r3, r3, #2
 80077ce:	d001      	beq.n	80077d4 <OV5640_SetLightMode+0xd0>
 80077d0:	2b07      	cmp	r3, #7
 80077d2:	d1f9      	bne.n	80077c8 <OV5640_SetLightMode+0xc4>
  if (ret == OV5640_OK)
 80077d4:	f04f 34ff 	mov.w	r4, #4294967295
}
 80077d8:	4620      	mov	r0, r4
 80077da:	b003      	add	sp, #12
 80077dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077de:	4f47      	ldr	r7, [pc, #284]	; (80078fc <OV5640_SetLightMode+0x1f8>)
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 80077e0:	eb07 0085 	add.w	r0, r7, r5, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 80077e4:	2301      	movs	r3, #1
 80077e6:	f10d 0207 	add.w	r2, sp, #7
 80077ea:	f837 1025 	ldrh.w	r1, [r7, r5, lsl #2]
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 80077ee:	f8b0 c002 	ldrh.w	ip, [r0, #2]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 80077f2:	4630      	mov	r0, r6
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 80077f4:	f88d c007 	strb.w	ip, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 80077f8:	f000 ff8c 	bl	8008714 <ov5640_write_reg>
 80077fc:	2800      	cmp	r0, #0
 80077fe:	d06c      	beq.n	80078da <OV5640_SetLightMode+0x1d6>
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 8007800:	2d06      	cmp	r5, #6
 8007802:	d0e7      	beq.n	80077d4 <OV5640_SetLightMode+0xd0>
 8007804:	2d05      	cmp	r5, #5
 8007806:	f105 0302 	add.w	r3, r5, #2
 800780a:	d0e3      	beq.n	80077d4 <OV5640_SetLightMode+0xd0>
 800780c:	2b06      	cmp	r3, #6
 800780e:	f103 0302 	add.w	r3, r3, #2
 8007812:	d0df      	beq.n	80077d4 <OV5640_SetLightMode+0xd0>
 8007814:	2b07      	cmp	r3, #7
 8007816:	d1f9      	bne.n	800780c <OV5640_SetLightMode+0x108>
 8007818:	e7dc      	b.n	80077d4 <OV5640_SetLightMode+0xd0>
 800781a:	4f39      	ldr	r7, [pc, #228]	; (8007900 <OV5640_SetLightMode+0x1fc>)
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 800781c:	eb07 0085 	add.w	r0, r7, r5, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 8007820:	2301      	movs	r3, #1
 8007822:	f10d 0207 	add.w	r2, sp, #7
 8007826:	f837 1025 	ldrh.w	r1, [r7, r5, lsl #2]
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 800782a:	f8b0 c002 	ldrh.w	ip, [r0, #2]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 800782e:	4630      	mov	r0, r6
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 8007830:	f88d c007 	strb.w	ip, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 8007834:	f000 ff6e 	bl	8008714 <ov5640_write_reg>
 8007838:	2800      	cmp	r0, #0
 800783a:	d058      	beq.n	80078ee <OV5640_SetLightMode+0x1ea>
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 800783c:	2d06      	cmp	r5, #6
 800783e:	d0c9      	beq.n	80077d4 <OV5640_SetLightMode+0xd0>
 8007840:	2d05      	cmp	r5, #5
 8007842:	f105 0302 	add.w	r3, r5, #2
 8007846:	d0c5      	beq.n	80077d4 <OV5640_SetLightMode+0xd0>
 8007848:	2b06      	cmp	r3, #6
 800784a:	f103 0302 	add.w	r3, r3, #2
 800784e:	d0c1      	beq.n	80077d4 <OV5640_SetLightMode+0xd0>
 8007850:	2b07      	cmp	r3, #7
 8007852:	d1f9      	bne.n	8007848 <OV5640_SetLightMode+0x144>
 8007854:	e7be      	b.n	80077d4 <OV5640_SetLightMode+0xd0>
 8007856:	4f2b      	ldr	r7, [pc, #172]	; (8007904 <OV5640_SetLightMode+0x200>)
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 8007858:	eb07 0085 	add.w	r0, r7, r5, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 800785c:	2301      	movs	r3, #1
 800785e:	f10d 0207 	add.w	r2, sp, #7
 8007862:	f837 1025 	ldrh.w	r1, [r7, r5, lsl #2]
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 8007866:	f8b0 c002 	ldrh.w	ip, [r0, #2]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 800786a:	4630      	mov	r0, r6
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 800786c:	f88d c007 	strb.w	ip, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 8007870:	f000 ff50 	bl	8008714 <ov5640_write_reg>
 8007874:	b368      	cbz	r0, 80078d2 <OV5640_SetLightMode+0x1ce>
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 8007876:	2d06      	cmp	r5, #6
 8007878:	d0ac      	beq.n	80077d4 <OV5640_SetLightMode+0xd0>
 800787a:	2d05      	cmp	r5, #5
 800787c:	f105 0302 	add.w	r3, r5, #2
 8007880:	d0a8      	beq.n	80077d4 <OV5640_SetLightMode+0xd0>
 8007882:	2b06      	cmp	r3, #6
 8007884:	f103 0302 	add.w	r3, r3, #2
 8007888:	d0a4      	beq.n	80077d4 <OV5640_SetLightMode+0xd0>
 800788a:	2b07      	cmp	r3, #7
 800788c:	d1f9      	bne.n	8007882 <OV5640_SetLightMode+0x17e>
 800788e:	e7a1      	b.n	80077d4 <OV5640_SetLightMode+0xd0>
 8007890:	4f1d      	ldr	r7, [pc, #116]	; (8007908 <OV5640_SetLightMode+0x204>)
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 8007892:	eb07 0085 	add.w	r0, r7, r5, lsl #2
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 8007896:	2301      	movs	r3, #1
 8007898:	f10d 0207 	add.w	r2, sp, #7
 800789c:	f837 1025 	ldrh.w	r1, [r7, r5, lsl #2]
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 80078a0:	f8b0 c002 	ldrh.w	ip, [r0, #2]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 80078a4:	4630      	mov	r0, r6
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 80078a6:	f88d c007 	strb.w	ip, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 80078aa:	f000 ff33 	bl	8008714 <ov5640_write_reg>
 80078ae:	b160      	cbz	r0, 80078ca <OV5640_SetLightMode+0x1c6>
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 80078b0:	2d06      	cmp	r5, #6
 80078b2:	d08f      	beq.n	80077d4 <OV5640_SetLightMode+0xd0>
 80078b4:	2d05      	cmp	r5, #5
 80078b6:	f105 0302 	add.w	r3, r5, #2
 80078ba:	d08b      	beq.n	80077d4 <OV5640_SetLightMode+0xd0>
 80078bc:	2b06      	cmp	r3, #6
 80078be:	f103 0302 	add.w	r3, r3, #2
 80078c2:	d087      	beq.n	80077d4 <OV5640_SetLightMode+0xd0>
 80078c4:	2b07      	cmp	r3, #7
 80078c6:	d1f9      	bne.n	80078bc <OV5640_SetLightMode+0x1b8>
 80078c8:	e784      	b.n	80077d4 <OV5640_SetLightMode+0xd0>
 80078ca:	3501      	adds	r5, #1
 80078cc:	2d07      	cmp	r5, #7
 80078ce:	d1e0      	bne.n	8007892 <OV5640_SetLightMode+0x18e>
 80078d0:	e72a      	b.n	8007728 <OV5640_SetLightMode+0x24>
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 80078d2:	3501      	adds	r5, #1
 80078d4:	2d07      	cmp	r5, #7
 80078d6:	d1bf      	bne.n	8007858 <OV5640_SetLightMode+0x154>
 80078d8:	e726      	b.n	8007728 <OV5640_SetLightMode+0x24>
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 80078da:	3501      	adds	r5, #1
 80078dc:	2d07      	cmp	r5, #7
 80078de:	f47f af7f 	bne.w	80077e0 <OV5640_SetLightMode+0xdc>
 80078e2:	e721      	b.n	8007728 <OV5640_SetLightMode+0x24>
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 80078e4:	3501      	adds	r5, #1
 80078e6:	2d07      	cmp	r5, #7
 80078e8:	f47f af57 	bne.w	800779a <OV5640_SetLightMode+0x96>
 80078ec:	e71c      	b.n	8007728 <OV5640_SetLightMode+0x24>
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 80078ee:	3501      	adds	r5, #1
 80078f0:	2d07      	cmp	r5, #7
 80078f2:	d193      	bne.n	800781c <OV5640_SetLightMode+0x118>
 80078f4:	e718      	b.n	8007728 <OV5640_SetLightMode+0x24>
 80078f6:	bf00      	nop
 80078f8:	08097684 	.word	0x08097684
 80078fc:	080976a0 	.word	0x080976a0
 8007900:	080976bc 	.word	0x080976bc
 8007904:	080976d8 	.word	0x080976d8
 8007908:	08097668 	.word	0x08097668

0800790c <OV5640_SetColorEffect>:
  switch (Effect)
 800790c:	3901      	subs	r1, #1
{
 800790e:	b530      	push	{r4, r5, lr}
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8007910:	f100 0418 	add.w	r4, r0, #24
{
 8007914:	b083      	sub	sp, #12
 8007916:	291f      	cmp	r1, #31
 8007918:	d821      	bhi.n	800795e <OV5640_SetColorEffect+0x52>
 800791a:	e8df f011 	tbh	[pc, r1, lsl #1]
 800791e:	0033      	.short	0x0033
 8007920:	00200062 	.word	0x00200062
 8007924:	00200091 	.word	0x00200091
 8007928:	00200020 	.word	0x00200020
 800792c:	002000ad 	.word	0x002000ad
 8007930:	00200020 	.word	0x00200020
 8007934:	00200020 	.word	0x00200020
 8007938:	00200020 	.word	0x00200020
 800793c:	002000d6 	.word	0x002000d6
 8007940:	00200020 	.word	0x00200020
 8007944:	00200020 	.word	0x00200020
 8007948:	00200020 	.word	0x00200020
 800794c:	00200020 	.word	0x00200020
 8007950:	00200020 	.word	0x00200020
 8007954:	00200020 	.word	0x00200020
 8007958:	00200020 	.word	0x00200020
 800795c:	0108      	.short	0x0108
      tmp = 0x7F;
 800795e:	257f      	movs	r5, #127	; 0x7f
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8007960:	2301      	movs	r3, #1
 8007962:	4620      	mov	r0, r4
 8007964:	f10d 0207 	add.w	r2, sp, #7
 8007968:	f245 0101 	movw	r1, #20481	; 0x5001
      tmp = 0x7F;
 800796c:	f88d 5007 	strb.w	r5, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8007970:	f000 fed0 	bl	8008714 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8007974:	4605      	mov	r5, r0
 8007976:	2800      	cmp	r0, #0
 8007978:	f000 80f8 	beq.w	8007b6c <OV5640_SetColorEffect+0x260>
        ret = OV5640_ERROR;
 800797c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007980:	b003      	add	sp, #12
 8007982:	bd30      	pop	{r4, r5, pc}
      tmp = 0xFF;
 8007984:	25ff      	movs	r5, #255	; 0xff
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8007986:	2301      	movs	r3, #1
 8007988:	4620      	mov	r0, r4
 800798a:	f10d 0207 	add.w	r2, sp, #7
 800798e:	f245 0101 	movw	r1, #20481	; 0x5001
      tmp = 0xFF;
 8007992:	f88d 5007 	strb.w	r5, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8007996:	f000 febd 	bl	8008714 <ov5640_write_reg>
      if (ret == OV5640_OK)
 800799a:	2800      	cmp	r0, #0
 800799c:	d1ee      	bne.n	800797c <OV5640_SetColorEffect+0x70>
        tmp = 0x18;
 800799e:	2518      	movs	r5, #24
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80079a0:	2301      	movs	r3, #1
 80079a2:	f10d 0207 	add.w	r2, sp, #7
 80079a6:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80079aa:	4620      	mov	r0, r4
        tmp = 0x18;
 80079ac:	f88d 5007 	strb.w	r5, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80079b0:	f000 feb0 	bl	8008714 <ov5640_write_reg>
      if (ret == OV5640_OK)
 80079b4:	2800      	cmp	r0, #0
 80079b6:	d1e1      	bne.n	800797c <OV5640_SetColorEffect+0x70>
        tmp = 0xA0;
 80079b8:	25a0      	movs	r5, #160	; 0xa0
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80079ba:	2301      	movs	r3, #1
 80079bc:	f10d 0207 	add.w	r2, sp, #7
 80079c0:	f245 5183 	movw	r1, #21891	; 0x5583
 80079c4:	4620      	mov	r0, r4
        tmp = 0xA0;
 80079c6:	f88d 5007 	strb.w	r5, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80079ca:	f000 fea3 	bl	8008714 <ov5640_write_reg>
      if (ret == OV5640_OK)
 80079ce:	2800      	cmp	r0, #0
 80079d0:	d1d4      	bne.n	800797c <OV5640_SetColorEffect+0x70>
        tmp = 0x40;
 80079d2:	2540      	movs	r5, #64	; 0x40
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 80079d4:	f10d 0207 	add.w	r2, sp, #7
 80079d8:	4620      	mov	r0, r4
 80079da:	2301      	movs	r3, #1
 80079dc:	f245 5184 	movw	r1, #21892	; 0x5584
 80079e0:	e0ba      	b.n	8007b58 <OV5640_SetColorEffect+0x24c>
      tmp = 0xFF;
 80079e2:	25ff      	movs	r5, #255	; 0xff
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80079e4:	2301      	movs	r3, #1
 80079e6:	4620      	mov	r0, r4
 80079e8:	f10d 0207 	add.w	r2, sp, #7
 80079ec:	f245 0101 	movw	r1, #20481	; 0x5001
      tmp = 0xFF;
 80079f0:	f88d 5007 	strb.w	r5, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80079f4:	f000 fe8e 	bl	8008714 <ov5640_write_reg>
      if (ret == OV5640_OK)
 80079f8:	2800      	cmp	r0, #0
 80079fa:	d1bf      	bne.n	800797c <OV5640_SetColorEffect+0x70>
        tmp = 0x18;
 80079fc:	2518      	movs	r5, #24
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80079fe:	2301      	movs	r3, #1
 8007a00:	f10d 0207 	add.w	r2, sp, #7
 8007a04:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8007a08:	4620      	mov	r0, r4
        tmp = 0x18;
 8007a0a:	f88d 5007 	strb.w	r5, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8007a0e:	f000 fe81 	bl	8008714 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8007a12:	2800      	cmp	r0, #0
 8007a14:	d1b2      	bne.n	800797c <OV5640_SetColorEffect+0x70>
        tmp = 0x80;
 8007a16:	2580      	movs	r5, #128	; 0x80
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8007a18:	2301      	movs	r3, #1
 8007a1a:	f10d 0207 	add.w	r2, sp, #7
 8007a1e:	f245 5183 	movw	r1, #21891	; 0x5583
 8007a22:	4620      	mov	r0, r4
        tmp = 0x80;
 8007a24:	f88d 5007 	strb.w	r5, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8007a28:	f000 fe74 	bl	8008714 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8007a2c:	2800      	cmp	r0, #0
 8007a2e:	d1a5      	bne.n	800797c <OV5640_SetColorEffect+0x70>
        tmp = 0xC0;
 8007a30:	25c0      	movs	r5, #192	; 0xc0
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8007a32:	f10d 0207 	add.w	r2, sp, #7
 8007a36:	4620      	mov	r0, r4
 8007a38:	2301      	movs	r3, #1
 8007a3a:	f245 5184 	movw	r1, #21892	; 0x5584
 8007a3e:	e08b      	b.n	8007b58 <OV5640_SetColorEffect+0x24c>
      tmp = 0xFF;
 8007a40:	25ff      	movs	r5, #255	; 0xff
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8007a42:	2301      	movs	r3, #1
 8007a44:	4620      	mov	r0, r4
 8007a46:	f10d 0207 	add.w	r2, sp, #7
 8007a4a:	f245 0101 	movw	r1, #20481	; 0x5001
      tmp = 0xFF;
 8007a4e:	f88d 5007 	strb.w	r5, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8007a52:	f000 fe5f 	bl	8008714 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8007a56:	2800      	cmp	r0, #0
 8007a58:	d190      	bne.n	800797c <OV5640_SetColorEffect+0x70>
        tmp = 0x18;
 8007a5a:	2518      	movs	r5, #24
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	f10d 0207 	add.w	r2, sp, #7
 8007a62:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8007a66:	4620      	mov	r0, r4
        tmp = 0x18;
 8007a68:	f88d 5007 	strb.w	r5, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8007a6c:	f000 fe52 	bl	8008714 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8007a70:	2800      	cmp	r0, #0
 8007a72:	d183      	bne.n	800797c <OV5640_SetColorEffect+0x70>
        tmp = 0x60;
 8007a74:	2560      	movs	r5, #96	; 0x60
 8007a76:	e01c      	b.n	8007ab2 <OV5640_SetColorEffect+0x1a6>
      tmp = 0xFF;
 8007a78:	25ff      	movs	r5, #255	; 0xff
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	4620      	mov	r0, r4
 8007a7e:	f10d 0207 	add.w	r2, sp, #7
 8007a82:	f245 0101 	movw	r1, #20481	; 0x5001
      tmp = 0xFF;
 8007a86:	f88d 5007 	strb.w	r5, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8007a8a:	f000 fe43 	bl	8008714 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8007a8e:	2800      	cmp	r0, #0
 8007a90:	f47f af74 	bne.w	800797c <OV5640_SetColorEffect+0x70>
        tmp = 0x18;
 8007a94:	2518      	movs	r5, #24
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8007a96:	2301      	movs	r3, #1
 8007a98:	f10d 0207 	add.w	r2, sp, #7
 8007a9c:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8007aa0:	4620      	mov	r0, r4
        tmp = 0x18;
 8007aa2:	f88d 5007 	strb.w	r5, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8007aa6:	f000 fe35 	bl	8008714 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8007aaa:	2800      	cmp	r0, #0
 8007aac:	f47f af66 	bne.w	800797c <OV5640_SetColorEffect+0x70>
        tmp = 0x80;
 8007ab0:	2580      	movs	r5, #128	; 0x80
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	f10d 0207 	add.w	r2, sp, #7
 8007ab8:	f245 5183 	movw	r1, #21891	; 0x5583
 8007abc:	4620      	mov	r0, r4
        tmp = 0x80;
 8007abe:	f88d 5007 	strb.w	r5, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8007ac2:	f000 fe27 	bl	8008714 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8007ac6:	b358      	cbz	r0, 8007b20 <OV5640_SetColorEffect+0x214>
 8007ac8:	e758      	b.n	800797c <OV5640_SetColorEffect+0x70>
      tmp = 0xFF;
 8007aca:	25ff      	movs	r5, #255	; 0xff
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8007acc:	2301      	movs	r3, #1
 8007ace:	4620      	mov	r0, r4
 8007ad0:	f10d 0207 	add.w	r2, sp, #7
 8007ad4:	f245 0101 	movw	r1, #20481	; 0x5001
      tmp = 0xFF;
 8007ad8:	f88d 5007 	strb.w	r5, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8007adc:	f000 fe1a 	bl	8008714 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8007ae0:	2800      	cmp	r0, #0
 8007ae2:	f47f af4b 	bne.w	800797c <OV5640_SetColorEffect+0x70>
        tmp = 0x18;
 8007ae6:	2518      	movs	r5, #24
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8007ae8:	2301      	movs	r3, #1
 8007aea:	f10d 0207 	add.w	r2, sp, #7
 8007aee:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8007af2:	4620      	mov	r0, r4
        tmp = 0x18;
 8007af4:	f88d 5007 	strb.w	r5, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8007af8:	f000 fe0c 	bl	8008714 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8007afc:	2800      	cmp	r0, #0
 8007afe:	f47f af3d 	bne.w	800797c <OV5640_SetColorEffect+0x70>
        tmp = 0x40;
 8007b02:	2540      	movs	r5, #64	; 0x40
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8007b04:	2301      	movs	r3, #1
 8007b06:	f10d 0207 	add.w	r2, sp, #7
 8007b0a:	f245 5183 	movw	r1, #21891	; 0x5583
 8007b0e:	4620      	mov	r0, r4
        tmp = 0x40;
 8007b10:	f88d 5007 	strb.w	r5, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8007b14:	f000 fdfe 	bl	8008714 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8007b18:	2800      	cmp	r0, #0
 8007b1a:	f47f af2f 	bne.w	800797c <OV5640_SetColorEffect+0x70>
        tmp = 0xA0;
 8007b1e:	25a0      	movs	r5, #160	; 0xa0
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8007b20:	f10d 0207 	add.w	r2, sp, #7
 8007b24:	4620      	mov	r0, r4
 8007b26:	2301      	movs	r3, #1
 8007b28:	f245 5184 	movw	r1, #21892	; 0x5584
 8007b2c:	e014      	b.n	8007b58 <OV5640_SetColorEffect+0x24c>
      tmp = 0xFF;
 8007b2e:	25ff      	movs	r5, #255	; 0xff
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8007b30:	2301      	movs	r3, #1
 8007b32:	f10d 0207 	add.w	r2, sp, #7
 8007b36:	4620      	mov	r0, r4
 8007b38:	f245 0101 	movw	r1, #20481	; 0x5001
      tmp = 0xFF;
 8007b3c:	f88d 5007 	strb.w	r5, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8007b40:	f000 fde8 	bl	8008714 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8007b44:	2800      	cmp	r0, #0
 8007b46:	f47f af19 	bne.w	800797c <OV5640_SetColorEffect+0x70>
        tmp = 0x40;
 8007b4a:	2540      	movs	r5, #64	; 0x40
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8007b4c:	4620      	mov	r0, r4
 8007b4e:	2301      	movs	r3, #1
 8007b50:	f10d 0207 	add.w	r2, sp, #7
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8007b54:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
        tmp = 0x00;
 8007b58:	f88d 5007 	strb.w	r5, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8007b5c:	f000 fdda 	bl	8008714 <ov5640_write_reg>
      if (ret != OV5640_OK)
 8007b60:	3800      	subs	r0, #0
 8007b62:	bf18      	it	ne
 8007b64:	2001      	movne	r0, #1
 8007b66:	4240      	negs	r0, r0
}
 8007b68:	b003      	add	sp, #12
 8007b6a:	bd30      	pop	{r4, r5, pc}
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8007b6c:	f10d 0207 	add.w	r2, sp, #7
 8007b70:	4620      	mov	r0, r4
 8007b72:	2301      	movs	r3, #1
 8007b74:	e7ee      	b.n	8007b54 <OV5640_SetColorEffect+0x248>
 8007b76:	bf00      	nop

08007b78 <OV5640_SetBrightness>:
{
 8007b78:	b5f0      	push	{r4, r5, r6, r7, lr}
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 8007b7a:	4b2c      	ldr	r3, [pc, #176]	; (8007c2c <OV5640_SetBrightness+0xb4>)
{
 8007b7c:	b085      	sub	sp, #20
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8007b7e:	f100 0518 	add.w	r5, r0, #24
{
 8007b82:	460e      	mov	r6, r1
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 8007b84:	ac01      	add	r4, sp, #4
  tmp = 0xFF;
 8007b86:	27ff      	movs	r7, #255	; 0xff
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 8007b88:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8007b8c:	2301      	movs	r3, #1
  tmp = 0xFF;
 8007b8e:	f88d 7003 	strb.w	r7, [sp, #3]
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 8007b92:	c403      	stmia	r4!, {r0, r1}
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8007b94:	4628      	mov	r0, r5
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 8007b96:	7022      	strb	r2, [r4, #0]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8007b98:	f245 0101 	movw	r1, #20481	; 0x5001
 8007b9c:	f10d 0203 	add.w	r2, sp, #3
 8007ba0:	f000 fdb8 	bl	8008714 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8007ba4:	b108      	cbz	r0, 8007baa <OV5640_SetBrightness+0x32>
}
 8007ba6:	b005      	add	sp, #20
 8007ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmp = brightness_level[Level + 4];
 8007baa:	a804      	add	r0, sp, #16
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL7, &tmp, 1);
 8007bac:	2301      	movs	r3, #1
 8007bae:	f10d 0203 	add.w	r2, sp, #3
 8007bb2:	f245 5187 	movw	r1, #21895	; 0x5587
    tmp = brightness_level[Level + 4];
 8007bb6:	4430      	add	r0, r6
 8007bb8:	f810 4c08 	ldrb.w	r4, [r0, #-8]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL7, &tmp, 1);
 8007bbc:	4628      	mov	r0, r5
    tmp = brightness_level[Level + 4];
 8007bbe:	f88d 4003 	strb.w	r4, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL7, &tmp, 1);
 8007bc2:	f000 fda7 	bl	8008714 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8007bc6:	2800      	cmp	r0, #0
 8007bc8:	d1ed      	bne.n	8007ba6 <OV5640_SetBrightness+0x2e>
    tmp = 0x04;
 8007bca:	2404      	movs	r4, #4
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8007bcc:	2301      	movs	r3, #1
 8007bce:	f10d 0203 	add.w	r2, sp, #3
 8007bd2:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8007bd6:	4628      	mov	r0, r5
    tmp = 0x04;
 8007bd8:	f88d 4003 	strb.w	r4, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8007bdc:	f000 fd9a 	bl	8008714 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8007be0:	2800      	cmp	r0, #0
 8007be2:	d1e0      	bne.n	8007ba6 <OV5640_SetBrightness+0x2e>
    if (Level < 0)
 8007be4:	2e00      	cmp	r6, #0
 8007be6:	db10      	blt.n	8007c0a <OV5640_SetBrightness+0x92>
      tmp = 0x09;
 8007be8:	2409      	movs	r4, #9
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 8007bea:	f10d 0203 	add.w	r2, sp, #3
 8007bee:	4628      	mov	r0, r5
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	f245 5188 	movw	r1, #21896	; 0x5588
      tmp = 0x09;
 8007bf6:	f88d 4003 	strb.w	r4, [sp, #3]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 8007bfa:	f000 fd8b 	bl	8008714 <ov5640_write_reg>
 8007bfe:	3800      	subs	r0, #0
 8007c00:	bf18      	it	ne
 8007c02:	2001      	movne	r0, #1
 8007c04:	4240      	negs	r0, r0
}
 8007c06:	b005      	add	sp, #20
 8007c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
      tmp = 0x01;
 8007c0a:	2301      	movs	r3, #1
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 8007c0c:	f10d 0203 	add.w	r2, sp, #3
 8007c10:	4628      	mov	r0, r5
 8007c12:	f245 5188 	movw	r1, #21896	; 0x5588
      tmp = 0x01;
 8007c16:	f88d 3003 	strb.w	r3, [sp, #3]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 8007c1a:	f000 fd7b 	bl	8008714 <ov5640_write_reg>
 8007c1e:	3800      	subs	r0, #0
 8007c20:	bf18      	it	ne
 8007c22:	2001      	movne	r0, #1
 8007c24:	4240      	negs	r0, r0
}
 8007c26:	b005      	add	sp, #20
 8007c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c2a:	bf00      	nop
 8007c2c:	080282e0 	.word	0x080282e0

08007c30 <OV5640_SetSaturation>:
{
 8007c30:	b5f0      	push	{r4, r5, r6, r7, lr}
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 8007c32:	4b29      	ldr	r3, [pc, #164]	; (8007cd8 <OV5640_SetSaturation+0xa8>)
{
 8007c34:	b085      	sub	sp, #20
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8007c36:	f100 0518 	add.w	r5, r0, #24
{
 8007c3a:	460e      	mov	r6, r1
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 8007c3c:	ac01      	add	r4, sp, #4
  tmp = 0xFF;
 8007c3e:	27ff      	movs	r7, #255	; 0xff
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 8007c40:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8007c44:	2301      	movs	r3, #1
  tmp = 0xFF;
 8007c46:	f88d 7003 	strb.w	r7, [sp, #3]
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 8007c4a:	c403      	stmia	r4!, {r0, r1}
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8007c4c:	4628      	mov	r0, r5
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 8007c4e:	7022      	strb	r2, [r4, #0]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8007c50:	f245 0101 	movw	r1, #20481	; 0x5001
 8007c54:	f10d 0203 	add.w	r2, sp, #3
 8007c58:	f000 fd5c 	bl	8008714 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8007c5c:	b118      	cbz	r0, 8007c66 <OV5640_SetSaturation+0x36>
    ret = OV5640_ERROR;
 8007c5e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007c62:	b005      	add	sp, #20
 8007c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmp = saturation_level[Level + 4];
 8007c66:	ab04      	add	r3, sp, #16
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8007c68:	f10d 0203 	add.w	r2, sp, #3
 8007c6c:	f245 5183 	movw	r1, #21891	; 0x5583
 8007c70:	4628      	mov	r0, r5
    tmp = saturation_level[Level + 4];
 8007c72:	441e      	add	r6, r3
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8007c74:	2301      	movs	r3, #1
    tmp = saturation_level[Level + 4];
 8007c76:	f816 4c08 	ldrb.w	r4, [r6, #-8]
 8007c7a:	f88d 4003 	strb.w	r4, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8007c7e:	f000 fd49 	bl	8008714 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8007c82:	2800      	cmp	r0, #0
 8007c84:	d1eb      	bne.n	8007c5e <OV5640_SetSaturation+0x2e>
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8007c86:	2301      	movs	r3, #1
 8007c88:	f10d 0203 	add.w	r2, sp, #3
 8007c8c:	f245 5184 	movw	r1, #21892	; 0x5584
 8007c90:	4628      	mov	r0, r5
 8007c92:	f000 fd3f 	bl	8008714 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8007c96:	2800      	cmp	r0, #0
 8007c98:	d1e1      	bne.n	8007c5e <OV5640_SetSaturation+0x2e>
    tmp = 0x02;
 8007c9a:	2402      	movs	r4, #2
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	f10d 0203 	add.w	r2, sp, #3
 8007ca2:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8007ca6:	4628      	mov	r0, r5
    tmp = 0x02;
 8007ca8:	f88d 4003 	strb.w	r4, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8007cac:	f000 fd32 	bl	8008714 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8007cb0:	2800      	cmp	r0, #0
 8007cb2:	d1d4      	bne.n	8007c5e <OV5640_SetSaturation+0x2e>
    tmp = 0x41;
 8007cb4:	2441      	movs	r4, #65	; 0x41
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8007cb6:	f10d 0203 	add.w	r2, sp, #3
 8007cba:	4628      	mov	r0, r5
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	f245 5188 	movw	r1, #21896	; 0x5588
    tmp = 0x41;
 8007cc2:	f88d 4003 	strb.w	r4, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8007cc6:	f000 fd25 	bl	8008714 <ov5640_write_reg>
  if (ret != OV5640_OK)
 8007cca:	3800      	subs	r0, #0
 8007ccc:	bf18      	it	ne
 8007cce:	2001      	movne	r0, #1
 8007cd0:	4240      	negs	r0, r0
}
 8007cd2:	b005      	add	sp, #20
 8007cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	080282ec 	.word	0x080282ec

08007cdc <OV5640_SetContrast>:
{
 8007cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 8007cde:	4b29      	ldr	r3, [pc, #164]	; (8007d84 <OV5640_SetContrast+0xa8>)
{
 8007ce0:	b085      	sub	sp, #20
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8007ce2:	f100 0518 	add.w	r5, r0, #24
{
 8007ce6:	460e      	mov	r6, r1
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 8007ce8:	ac01      	add	r4, sp, #4
  tmp = 0xFF;
 8007cea:	27ff      	movs	r7, #255	; 0xff
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 8007cec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8007cf0:	2301      	movs	r3, #1
  tmp = 0xFF;
 8007cf2:	f88d 7003 	strb.w	r7, [sp, #3]
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 8007cf6:	c403      	stmia	r4!, {r0, r1}
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8007cf8:	4628      	mov	r0, r5
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 8007cfa:	7022      	strb	r2, [r4, #0]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8007cfc:	f245 0101 	movw	r1, #20481	; 0x5001
 8007d00:	f10d 0203 	add.w	r2, sp, #3
 8007d04:	f000 fd06 	bl	8008714 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8007d08:	b118      	cbz	r0, 8007d12 <OV5640_SetContrast+0x36>
    ret = OV5640_ERROR;
 8007d0a:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007d0e:	b005      	add	sp, #20
 8007d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmp = 0x04;
 8007d12:	2404      	movs	r4, #4
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8007d14:	2301      	movs	r3, #1
 8007d16:	f10d 0203 	add.w	r2, sp, #3
 8007d1a:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8007d1e:	4628      	mov	r0, r5
    tmp = 0x04;
 8007d20:	f88d 4003 	strb.w	r4, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8007d24:	f000 fcf6 	bl	8008714 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8007d28:	2800      	cmp	r0, #0
 8007d2a:	d1ee      	bne.n	8007d0a <OV5640_SetContrast+0x2e>
    tmp = contrast_level[Level + 4];
 8007d2c:	ab04      	add	r3, sp, #16
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL6, &tmp, 1);
 8007d2e:	f10d 0203 	add.w	r2, sp, #3
 8007d32:	f245 5186 	movw	r1, #21894	; 0x5586
 8007d36:	4628      	mov	r0, r5
    tmp = contrast_level[Level + 4];
 8007d38:	441e      	add	r6, r3
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL6, &tmp, 1);
 8007d3a:	2301      	movs	r3, #1
    tmp = contrast_level[Level + 4];
 8007d3c:	f816 4c08 	ldrb.w	r4, [r6, #-8]
 8007d40:	f88d 4003 	strb.w	r4, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL6, &tmp, 1);
 8007d44:	f000 fce6 	bl	8008714 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8007d48:	2800      	cmp	r0, #0
 8007d4a:	d1de      	bne.n	8007d0a <OV5640_SetContrast+0x2e>
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL5, &tmp, 1);
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	f10d 0203 	add.w	r2, sp, #3
 8007d52:	f245 5185 	movw	r1, #21893	; 0x5585
 8007d56:	4628      	mov	r0, r5
 8007d58:	f000 fcdc 	bl	8008714 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8007d5c:	2800      	cmp	r0, #0
 8007d5e:	d1d4      	bne.n	8007d0a <OV5640_SetContrast+0x2e>
    tmp = 0x41;
 8007d60:	2441      	movs	r4, #65	; 0x41
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8007d62:	f10d 0203 	add.w	r2, sp, #3
 8007d66:	4628      	mov	r0, r5
 8007d68:	2301      	movs	r3, #1
 8007d6a:	f245 5188 	movw	r1, #21896	; 0x5588
    tmp = 0x41;
 8007d6e:	f88d 4003 	strb.w	r4, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8007d72:	f000 fccf 	bl	8008714 <ov5640_write_reg>
  if (ret != OV5640_OK)
 8007d76:	3800      	subs	r0, #0
 8007d78:	bf18      	it	ne
 8007d7a:	2001      	movne	r0, #1
 8007d7c:	4240      	negs	r0, r0
}
 8007d7e:	b005      	add	sp, #20
 8007d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d82:	bf00      	nop
 8007d84:	08097244 	.word	0x08097244

08007d88 <OV5640_SetHueDegree>:
{
 8007d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 8007d8c:	4b33      	ldr	r3, [pc, #204]	; (8007e5c <OV5640_SetHueDegree+0xd4>)
{
 8007d8e:	b08a      	sub	sp, #40	; 0x28
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8007d90:	f100 0418 	add.w	r4, r0, #24
{
 8007d94:	4688      	mov	r8, r1
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 8007d96:	f103 060c 	add.w	r6, r3, #12
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 8007d9a:	af01      	add	r7, sp, #4
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 8007d9c:	ad04      	add	r5, sp, #16
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 8007d9e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  const uint8_t hue_degree_ctrl8[] = {0x32U, 0x32U, 0x32U, 0x02U, 0x02U, 0x02U, 0x01U, 0x01U, 0x01U, 0x31U, 0x31U,
 8007da2:	4b2f      	ldr	r3, [pc, #188]	; (8007e60 <OV5640_SetHueDegree+0xd8>)
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 8007da4:	e887 0007 	stmia.w	r7, {r0, r1, r2}
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 8007da8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
  const uint8_t hue_degree_ctrl8[] = {0x32U, 0x32U, 0x32U, 0x02U, 0x02U, 0x02U, 0x01U, 0x01U, 0x01U, 0x31U, 0x31U,
 8007dac:	ae0a      	add	r6, sp, #40	; 0x28
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 8007dae:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  const uint8_t hue_degree_ctrl8[] = {0x32U, 0x32U, 0x32U, 0x02U, 0x02U, 0x02U, 0x01U, 0x01U, 0x01U, 0x31U, 0x31U,
 8007db2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  tmp = 0xFF;
 8007db6:	25ff      	movs	r5, #255	; 0xff
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8007db8:	2301      	movs	r3, #1
  const uint8_t hue_degree_ctrl8[] = {0x32U, 0x32U, 0x32U, 0x02U, 0x02U, 0x02U, 0x01U, 0x01U, 0x01U, 0x31U, 0x31U,
 8007dba:	e906 0007 	stmdb	r6, {r0, r1, r2}
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8007dbe:	4620      	mov	r0, r4
 8007dc0:	f10d 0203 	add.w	r2, sp, #3
 8007dc4:	f245 0101 	movw	r1, #20481	; 0x5001
  tmp = 0xFF;
 8007dc8:	f88d 5003 	strb.w	r5, [sp, #3]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8007dcc:	f000 fca2 	bl	8008714 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8007dd0:	b120      	cbz	r0, 8007ddc <OV5640_SetHueDegree+0x54>
    ret = OV5640_ERROR;
 8007dd2:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007dd6:	b00a      	add	sp, #40	; 0x28
 8007dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmp = 0x01;
 8007ddc:	2601      	movs	r6, #1
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8007dde:	f10d 0203 	add.w	r2, sp, #3
 8007de2:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8007de6:	4620      	mov	r0, r4
 8007de8:	4633      	mov	r3, r6
    tmp = 0x01;
 8007dea:	f88d 6003 	strb.w	r6, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8007dee:	f000 fc91 	bl	8008714 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8007df2:	2800      	cmp	r0, #0
 8007df4:	d1ed      	bne.n	8007dd2 <OV5640_SetHueDegree+0x4a>
    tmp = hue_degree_ctrl1[Degree + 6];
 8007df6:	a80a      	add	r0, sp, #40	; 0x28
 8007df8:	f108 0506 	add.w	r5, r8, #6
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL1, &tmp, 1);
 8007dfc:	4633      	mov	r3, r6
 8007dfe:	f10d 0203 	add.w	r2, sp, #3
    tmp = hue_degree_ctrl1[Degree + 6];
 8007e02:	4405      	add	r5, r0
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL1, &tmp, 1);
 8007e04:	f245 5181 	movw	r1, #21889	; 0x5581
 8007e08:	4620      	mov	r0, r4
    tmp = hue_degree_ctrl1[Degree + 6];
 8007e0a:	f815 7c24 	ldrb.w	r7, [r5, #-36]
 8007e0e:	f88d 7003 	strb.w	r7, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL1, &tmp, 1);
 8007e12:	f000 fc7f 	bl	8008714 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8007e16:	2800      	cmp	r0, #0
 8007e18:	d1db      	bne.n	8007dd2 <OV5640_SetHueDegree+0x4a>
    tmp = hue_degree_ctrl2[Degree + 6];
 8007e1a:	f815 7c18 	ldrb.w	r7, [r5, #-24]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL2, &tmp, 1);
 8007e1e:	4633      	mov	r3, r6
 8007e20:	f10d 0203 	add.w	r2, sp, #3
 8007e24:	f245 5182 	movw	r1, #21890	; 0x5582
 8007e28:	4620      	mov	r0, r4
    tmp = hue_degree_ctrl2[Degree + 6];
 8007e2a:	f88d 7003 	strb.w	r7, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL2, &tmp, 1);
 8007e2e:	f000 fc71 	bl	8008714 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8007e32:	2800      	cmp	r0, #0
 8007e34:	d1cd      	bne.n	8007dd2 <OV5640_SetHueDegree+0x4a>
    tmp = hue_degree_ctrl8[Degree + 6];
 8007e36:	f815 5c0c 	ldrb.w	r5, [r5, #-12]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8007e3a:	4633      	mov	r3, r6
 8007e3c:	f10d 0203 	add.w	r2, sp, #3
 8007e40:	4620      	mov	r0, r4
 8007e42:	f245 5188 	movw	r1, #21896	; 0x5588
    tmp = hue_degree_ctrl8[Degree + 6];
 8007e46:	f88d 5003 	strb.w	r5, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8007e4a:	f000 fc63 	bl	8008714 <ov5640_write_reg>
  if (ret != OV5640_OK)
 8007e4e:	3800      	subs	r0, #0
 8007e50:	bf18      	it	ne
 8007e52:	2001      	movne	r0, #1
 8007e54:	4240      	negs	r0, r0
}
 8007e56:	b00a      	add	sp, #40	; 0x28
 8007e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e5c:	080282f8 	.word	0x080282f8
 8007e60:	08097250 	.word	0x08097250

08007e64 <OV5640_SetPixelFormat>:
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 8007e64:	2902      	cmp	r1, #2
{
 8007e66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e6a:	4604      	mov	r4, r0
 8007e6c:	b082      	sub	sp, #8
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 8007e6e:	d902      	bls.n	8007e76 <OV5640_SetPixelFormat+0x12>
      (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8007e70:	1fcb      	subs	r3, r1, #7
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d82f      	bhi.n	8007ed6 <OV5640_SetPixelFormat+0x72>
    switch (PixelFormat)
 8007e76:	3901      	subs	r1, #1
 8007e78:	f104 0718 	add.w	r7, r4, #24
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 8007e7c:	f10d 0507 	add.w	r5, sp, #7
 8007e80:	2907      	cmp	r1, #7
 8007e82:	f200 8089 	bhi.w	8007f98 <OV5640_SetPixelFormat+0x134>
 8007e86:	e8df f011 	tbh	[pc, r1, lsl #1]
 8007e8a:	0008      	.short	0x0008
 8007e8c:	008700b1 	.word	0x008700b1
 8007e90:	00870087 	.word	0x00870087
 8007e94:	00da0087 	.word	0x00da0087
 8007e98:	002c      	.short	0x002c
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 8007e9a:	2623      	movs	r6, #35	; 0x23
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	4638      	mov	r0, r7
 8007ea0:	462a      	mov	r2, r5
 8007ea2:	f44f 4186 	mov.w	r1, #17152	; 0x4300
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 8007ea6:	f88d 6007 	strb.w	r6, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 8007eaa:	f000 fc33 	bl	8008714 <ov5640_write_reg>
 8007eae:	b990      	cbnz	r0, 8007ed6 <OV5640_SetPixelFormat+0x72>
  tickstart = pObj->IO.GetTick();
 8007eb0:	6963      	ldr	r3, [r4, #20]
 8007eb2:	4798      	blx	r3
 8007eb4:	4606      	mov	r6, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8007eb6:	6963      	ldr	r3, [r4, #20]
 8007eb8:	4798      	blx	r3
 8007eba:	4286      	cmp	r6, r0
 8007ebc:	d0fb      	beq.n	8007eb6 <OV5640_SetPixelFormat+0x52>
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 8007ebe:	2301      	movs	r3, #1
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 8007ec0:	462a      	mov	r2, r5
 8007ec2:	4638      	mov	r0, r7
 8007ec4:	f245 011f 	movw	r1, #20511	; 0x501f
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 8007ec8:	f88d 3007 	strb.w	r3, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 8007ecc:	f000 fc22 	bl	8008714 <ov5640_write_reg>
 8007ed0:	2800      	cmp	r0, #0
 8007ed2:	f000 80fa 	beq.w	80080ca <OV5640_SetPixelFormat+0x266>
    ret = OV5640_ERROR;
 8007ed6:	f04f 36ff 	mov.w	r6, #4294967295
}
 8007eda:	4630      	mov	r0, r6
 8007edc:	b002      	add	sp, #8
 8007ede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 8007ee2:	2630      	movs	r6, #48	; 0x30
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	4638      	mov	r0, r7
 8007ee8:	462a      	mov	r2, r5
 8007eea:	f44f 4186 	mov.w	r1, #17152	; 0x4300
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 8007eee:	f88d 6007 	strb.w	r6, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 8007ef2:	f000 fc0f 	bl	8008714 <ov5640_write_reg>
 8007ef6:	2800      	cmp	r0, #0
 8007ef8:	f000 80ca 	beq.w	8008090 <OV5640_SetPixelFormat+0x22c>
              ret = OV5640_ERROR;
 8007efc:	f04f 36ff 	mov.w	r6, #4294967295
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8007f00:	2301      	movs	r3, #1
 8007f02:	462a      	mov	r2, r5
 8007f04:	f643 0121 	movw	r1, #14369	; 0x3821
 8007f08:	4638      	mov	r0, r7
 8007f0a:	f000 fbfb 	bl	8008704 <ov5640_read_reg>
 8007f0e:	2800      	cmp	r0, #0
 8007f10:	d1e1      	bne.n	8007ed6 <OV5640_SetPixelFormat+0x72>
        tmp |= (1 << 5);
 8007f12:	f89d 4007 	ldrb.w	r4, [sp, #7]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8007f16:	2301      	movs	r3, #1
 8007f18:	462a      	mov	r2, r5
 8007f1a:	f643 0121 	movw	r1, #14369	; 0x3821
        tmp |= (1 << 5);
 8007f1e:	f044 0420 	orr.w	r4, r4, #32
        if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8007f22:	4638      	mov	r0, r7
        tmp |= (1 << 5);
 8007f24:	f88d 4007 	strb.w	r4, [sp, #7]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8007f28:	f000 fbf4 	bl	8008714 <ov5640_write_reg>
 8007f2c:	2800      	cmp	r0, #0
 8007f2e:	d1d2      	bne.n	8007ed6 <OV5640_SetPixelFormat+0x72>
          if (ov5640_read_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8007f30:	2301      	movs	r3, #1
 8007f32:	462a      	mov	r2, r5
 8007f34:	f243 0102 	movw	r1, #12290	; 0x3002
 8007f38:	4638      	mov	r0, r7
 8007f3a:	f000 fbe3 	bl	8008704 <ov5640_read_reg>
 8007f3e:	2800      	cmp	r0, #0
 8007f40:	d1c9      	bne.n	8007ed6 <OV5640_SetPixelFormat+0x72>
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 8007f42:	f89d 4007 	ldrb.w	r4, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8007f46:	2301      	movs	r3, #1
 8007f48:	462a      	mov	r2, r5
 8007f4a:	f243 0102 	movw	r1, #12290	; 0x3002
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 8007f4e:	f024 041c 	bic.w	r4, r4, #28
            if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8007f52:	4638      	mov	r0, r7
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 8007f54:	f88d 4007 	strb.w	r4, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8007f58:	f000 fbdc 	bl	8008714 <ov5640_write_reg>
 8007f5c:	2800      	cmp	r0, #0
 8007f5e:	d1ba      	bne.n	8007ed6 <OV5640_SetPixelFormat+0x72>
              if (ov5640_read_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8007f60:	2301      	movs	r3, #1
 8007f62:	462a      	mov	r2, r5
 8007f64:	f243 0106 	movw	r1, #12294	; 0x3006
 8007f68:	4638      	mov	r0, r7
 8007f6a:	f000 fbcb 	bl	8008704 <ov5640_read_reg>
 8007f6e:	2800      	cmp	r0, #0
 8007f70:	d1b1      	bne.n	8007ed6 <OV5640_SetPixelFormat+0x72>
                tmp |= ((1 << 5) | (1 << 3));
 8007f72:	f89d 4007 	ldrb.w	r4, [sp, #7]
                if (ov5640_write_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8007f76:	462a      	mov	r2, r5
 8007f78:	4638      	mov	r0, r7
 8007f7a:	2301      	movs	r3, #1
                tmp |= ((1 << 5) | (1 << 3));
 8007f7c:	f044 0428 	orr.w	r4, r4, #40	; 0x28
                if (ov5640_write_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8007f80:	f243 0106 	movw	r1, #12294	; 0x3006
                tmp |= ((1 << 5) | (1 << 3));
 8007f84:	f88d 4007 	strb.w	r4, [sp, #7]
                if (ov5640_write_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8007f88:	f000 fbc4 	bl	8008714 <ov5640_write_reg>
 8007f8c:	2800      	cmp	r0, #0
 8007f8e:	d1a2      	bne.n	8007ed6 <OV5640_SetPixelFormat+0x72>
}
 8007f90:	4630      	mov	r0, r6
 8007f92:	b002      	add	sp, #8
 8007f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 8007f98:	266f      	movs	r6, #111	; 0x6f
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	4638      	mov	r0, r7
 8007f9e:	462a      	mov	r2, r5
 8007fa0:	f44f 4186 	mov.w	r1, #17152	; 0x4300
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 8007fa4:	f88d 6007 	strb.w	r6, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 8007fa8:	f000 fbb4 	bl	8008714 <ov5640_write_reg>
 8007fac:	2800      	cmp	r0, #0
 8007fae:	d192      	bne.n	8007ed6 <OV5640_SetPixelFormat+0x72>
  tickstart = pObj->IO.GetTick();
 8007fb0:	6963      	ldr	r3, [r4, #20]
 8007fb2:	4798      	blx	r3
 8007fb4:	4606      	mov	r6, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8007fb6:	6963      	ldr	r3, [r4, #20]
 8007fb8:	4798      	blx	r3
 8007fba:	42b0      	cmp	r0, r6
 8007fbc:	d0fb      	beq.n	8007fb6 <OV5640_SetPixelFormat+0x152>
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 8007fbe:	2301      	movs	r3, #1
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 8007fc0:	462a      	mov	r2, r5
 8007fc2:	4638      	mov	r0, r7
 8007fc4:	f245 011f 	movw	r1, #20511	; 0x501f
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 8007fc8:	f88d 3007 	strb.w	r3, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 8007fcc:	f000 fba2 	bl	8008714 <ov5640_write_reg>
 8007fd0:	2800      	cmp	r0, #0
 8007fd2:	d180      	bne.n	8007ed6 <OV5640_SetPixelFormat+0x72>
  tickstart = pObj->IO.GetTick();
 8007fd4:	6963      	ldr	r3, [r4, #20]
 8007fd6:	4798      	blx	r3
 8007fd8:	4605      	mov	r5, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8007fda:	6963      	ldr	r3, [r4, #20]
 8007fdc:	4798      	blx	r3
 8007fde:	4285      	cmp	r5, r0
 8007fe0:	d0fb      	beq.n	8007fda <OV5640_SetPixelFormat+0x176>
{
 8007fe2:	2600      	movs	r6, #0
}
 8007fe4:	4630      	mov	r0, r6
 8007fe6:	b002      	add	sp, #8
 8007fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 8007fec:	2630      	movs	r6, #48	; 0x30
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 8007fee:	2301      	movs	r3, #1
 8007ff0:	4638      	mov	r0, r7
 8007ff2:	462a      	mov	r2, r5
 8007ff4:	f44f 4186 	mov.w	r1, #17152	; 0x4300
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 8007ff8:	f88d 6007 	strb.w	r6, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 8007ffc:	f000 fb8a 	bl	8008714 <ov5640_write_reg>
 8008000:	2800      	cmp	r0, #0
 8008002:	f47f af68 	bne.w	8007ed6 <OV5640_SetPixelFormat+0x72>
  tickstart = pObj->IO.GetTick();
 8008006:	6963      	ldr	r3, [r4, #20]
 8008008:	4798      	blx	r3
 800800a:	4606      	mov	r6, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 800800c:	6963      	ldr	r3, [r4, #20]
 800800e:	4798      	blx	r3
 8008010:	42b0      	cmp	r0, r6
 8008012:	d0fb      	beq.n	800800c <OV5640_SetPixelFormat+0x1a8>
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 8008014:	2600      	movs	r6, #0
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 8008016:	462a      	mov	r2, r5
 8008018:	4638      	mov	r0, r7
 800801a:	2301      	movs	r3, #1
 800801c:	f245 011f 	movw	r1, #20511	; 0x501f
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 8008020:	f88d 6007 	strb.w	r6, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 8008024:	f000 fb76 	bl	8008714 <ov5640_write_reg>
 8008028:	2800      	cmp	r0, #0
 800802a:	f47f af54 	bne.w	8007ed6 <OV5640_SetPixelFormat+0x72>
  tickstart = pObj->IO.GetTick();
 800802e:	6963      	ldr	r3, [r4, #20]
 8008030:	4798      	blx	r3
 8008032:	4605      	mov	r5, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8008034:	6963      	ldr	r3, [r4, #20]
 8008036:	4798      	blx	r3
 8008038:	4285      	cmp	r5, r0
 800803a:	d0fb      	beq.n	8008034 <OV5640_SetPixelFormat+0x1d0>
 800803c:	e7d1      	b.n	8007fe2 <OV5640_SetPixelFormat+0x17e>
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 800803e:	2610      	movs	r6, #16
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 8008040:	2301      	movs	r3, #1
 8008042:	4638      	mov	r0, r7
 8008044:	462a      	mov	r2, r5
 8008046:	f44f 4186 	mov.w	r1, #17152	; 0x4300
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 800804a:	f88d 6007 	strb.w	r6, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 800804e:	f000 fb61 	bl	8008714 <ov5640_write_reg>
 8008052:	2800      	cmp	r0, #0
 8008054:	f47f af3f 	bne.w	8007ed6 <OV5640_SetPixelFormat+0x72>
  tickstart = pObj->IO.GetTick();
 8008058:	6963      	ldr	r3, [r4, #20]
 800805a:	4798      	blx	r3
 800805c:	4606      	mov	r6, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 800805e:	6963      	ldr	r3, [r4, #20]
 8008060:	4798      	blx	r3
 8008062:	42b0      	cmp	r0, r6
 8008064:	d0fb      	beq.n	800805e <OV5640_SetPixelFormat+0x1fa>
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 8008066:	2600      	movs	r6, #0
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 8008068:	462a      	mov	r2, r5
 800806a:	4638      	mov	r0, r7
 800806c:	2301      	movs	r3, #1
 800806e:	f245 011f 	movw	r1, #20511	; 0x501f
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 8008072:	f88d 6007 	strb.w	r6, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 8008076:	f000 fb4d 	bl	8008714 <ov5640_write_reg>
 800807a:	2800      	cmp	r0, #0
 800807c:	f47f af2b 	bne.w	8007ed6 <OV5640_SetPixelFormat+0x72>
  tickstart = pObj->IO.GetTick();
 8008080:	6963      	ldr	r3, [r4, #20]
 8008082:	4798      	blx	r3
 8008084:	4605      	mov	r5, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8008086:	6963      	ldr	r3, [r4, #20]
 8008088:	4798      	blx	r3
 800808a:	4285      	cmp	r5, r0
 800808c:	d0fb      	beq.n	8008086 <OV5640_SetPixelFormat+0x222>
 800808e:	e7a8      	b.n	8007fe2 <OV5640_SetPixelFormat+0x17e>
  tickstart = pObj->IO.GetTick();
 8008090:	6963      	ldr	r3, [r4, #20]
 8008092:	4798      	blx	r3
 8008094:	4606      	mov	r6, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8008096:	6963      	ldr	r3, [r4, #20]
 8008098:	4798      	blx	r3
 800809a:	42b0      	cmp	r0, r6
 800809c:	d0fb      	beq.n	8008096 <OV5640_SetPixelFormat+0x232>
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 800809e:	2600      	movs	r6, #0
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 80080a0:	2301      	movs	r3, #1
 80080a2:	462a      	mov	r2, r5
 80080a4:	f245 011f 	movw	r1, #20511	; 0x501f
 80080a8:	4638      	mov	r0, r7
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 80080aa:	f88d 6007 	strb.w	r6, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 80080ae:	f000 fb31 	bl	8008714 <ov5640_write_reg>
 80080b2:	4606      	mov	r6, r0
 80080b4:	2800      	cmp	r0, #0
 80080b6:	f47f af21 	bne.w	8007efc <OV5640_SetPixelFormat+0x98>
  tickstart = pObj->IO.GetTick();
 80080ba:	6963      	ldr	r3, [r4, #20]
 80080bc:	4798      	blx	r3
 80080be:	4680      	mov	r8, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 80080c0:	6963      	ldr	r3, [r4, #20]
 80080c2:	4798      	blx	r3
 80080c4:	4580      	cmp	r8, r0
 80080c6:	d0fb      	beq.n	80080c0 <OV5640_SetPixelFormat+0x25c>
 80080c8:	e71a      	b.n	8007f00 <OV5640_SetPixelFormat+0x9c>
  tickstart = pObj->IO.GetTick();
 80080ca:	6963      	ldr	r3, [r4, #20]
 80080cc:	4798      	blx	r3
 80080ce:	4605      	mov	r5, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 80080d0:	6963      	ldr	r3, [r4, #20]
 80080d2:	4798      	blx	r3
 80080d4:	4285      	cmp	r5, r0
 80080d6:	d0fb      	beq.n	80080d0 <OV5640_SetPixelFormat+0x26c>
 80080d8:	e783      	b.n	8007fe2 <OV5640_SetPixelFormat+0x17e>
 80080da:	bf00      	nop

080080dc <OV5640_GetResolution>:
{
 80080dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_HIGH, &tmp, 1) != OV5640_OK)
 80080de:	f100 0418 	add.w	r4, r0, #24
{
 80080e2:	b083      	sub	sp, #12
 80080e4:	460f      	mov	r7, r1
  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_HIGH, &tmp, 1) != OV5640_OK)
 80080e6:	2301      	movs	r3, #1
 80080e8:	f10d 0207 	add.w	r2, sp, #7
 80080ec:	f643 0108 	movw	r1, #14344	; 0x3808
 80080f0:	4620      	mov	r0, r4
 80080f2:	f000 fb07 	bl	8008704 <ov5640_read_reg>
 80080f6:	2800      	cmp	r0, #0
 80080f8:	d150      	bne.n	800819c <OV5640_GetResolution+0xc0>
    x_size = (uint16_t)tmp << 8U;
 80080fa:	f89d 5007 	ldrb.w	r5, [sp, #7]
    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_LOW, &tmp, 1) != OV5640_OK)
 80080fe:	2301      	movs	r3, #1
 8008100:	f10d 0207 	add.w	r2, sp, #7
 8008104:	f643 0109 	movw	r1, #14345	; 0x3809
 8008108:	4620      	mov	r0, r4
    x_size = (uint16_t)tmp << 8U;
 800810a:	022d      	lsls	r5, r5, #8
    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_LOW, &tmp, 1) != OV5640_OK)
 800810c:	f000 fafa 	bl	8008704 <ov5640_read_reg>
 8008110:	2800      	cmp	r0, #0
 8008112:	d143      	bne.n	800819c <OV5640_GetResolution+0xc0>
      x_size |= tmp;
 8008114:	f89d 6007 	ldrb.w	r6, [sp, #7]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_HIGH, &tmp, 1) != OV5640_OK)
 8008118:	2301      	movs	r3, #1
 800811a:	f10d 0207 	add.w	r2, sp, #7
 800811e:	f643 010a 	movw	r1, #14346	; 0x380a
 8008122:	4620      	mov	r0, r4
      x_size |= tmp;
 8008124:	4335      	orrs	r5, r6
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_HIGH, &tmp, 1) != OV5640_OK)
 8008126:	f000 faed 	bl	8008704 <ov5640_read_reg>
 800812a:	bbb8      	cbnz	r0, 800819c <OV5640_GetResolution+0xc0>
        y_size = (uint16_t)tmp << 8U;
 800812c:	f89d 6007 	ldrb.w	r6, [sp, #7]
        if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_LOW, &tmp, 1) != OV5640_OK)
 8008130:	f10d 0207 	add.w	r2, sp, #7
 8008134:	4620      	mov	r0, r4
 8008136:	2301      	movs	r3, #1
 8008138:	f643 010b 	movw	r1, #14347	; 0x380b
        y_size = (uint16_t)tmp << 8U;
 800813c:	0236      	lsls	r6, r6, #8
        if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_LOW, &tmp, 1) != OV5640_OK)
 800813e:	f000 fae1 	bl	8008704 <ov5640_read_reg>
 8008142:	bb58      	cbnz	r0, 800819c <OV5640_GetResolution+0xc0>
          y_size |= tmp;
 8008144:	f89d 3007 	ldrb.w	r3, [sp, #7]
          if ((x_size == 800U) && (y_size == 480U))
 8008148:	f5b5 7f48 	cmp.w	r5, #800	; 0x320
          y_size |= tmp;
 800814c:	ea43 0306 	orr.w	r3, r3, r6
          if ((x_size == 800U) && (y_size == 480U))
 8008150:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
 8008154:	fab2 f282 	clz	r2, r2
 8008158:	ea4f 1252 	mov.w	r2, r2, lsr #5
 800815c:	d104      	bne.n	8008168 <OV5640_GetResolution+0x8c>
 800815e:	b11a      	cbz	r2, 8008168 <OV5640_GetResolution+0x8c>
            *Resolution = OV5640_R800x480;
 8008160:	2304      	movs	r3, #4
 8008162:	603b      	str	r3, [r7, #0]
}
 8008164:	b003      	add	sp, #12
 8008166:	bdf0      	pop	{r4, r5, r6, r7, pc}
          else if ((x_size == 640U) && (y_size == 480U))
 8008168:	f5b5 7f20 	cmp.w	r5, #640	; 0x280
 800816c:	d104      	bne.n	8008178 <OV5640_GetResolution+0x9c>
 800816e:	b11a      	cbz	r2, 8008178 <OV5640_GetResolution+0x9c>
            *Resolution = OV5640_R640x480;
 8008170:	2303      	movs	r3, #3
 8008172:	603b      	str	r3, [r7, #0]
}
 8008174:	b003      	add	sp, #12
 8008176:	bdf0      	pop	{r4, r5, r6, r7, pc}
          else if ((x_size == 480U) && (y_size == 272U))
 8008178:	f5b5 7ff0 	cmp.w	r5, #480	; 0x1e0
 800817c:	d106      	bne.n	800818c <OV5640_GetResolution+0xb0>
 800817e:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8008182:	d103      	bne.n	800818c <OV5640_GetResolution+0xb0>
            *Resolution = OV5640_R480x272;
 8008184:	2302      	movs	r3, #2
 8008186:	603b      	str	r3, [r7, #0]
}
 8008188:	b003      	add	sp, #12
 800818a:	bdf0      	pop	{r4, r5, r6, r7, pc}
          else if ((x_size == 320U) && (y_size == 240U))
 800818c:	f5b5 7fa0 	cmp.w	r5, #320	; 0x140
 8008190:	d108      	bne.n	80081a4 <OV5640_GetResolution+0xc8>
 8008192:	2bf0      	cmp	r3, #240	; 0xf0
 8008194:	d106      	bne.n	80081a4 <OV5640_GetResolution+0xc8>
            *Resolution = OV5640_R320x240;
 8008196:	2301      	movs	r3, #1
 8008198:	603b      	str	r3, [r7, #0]
            ret = OV5640_OK;
 800819a:	e7e3      	b.n	8008164 <OV5640_GetResolution+0x88>
    ret = OV5640_ERROR;
 800819c:	f04f 30ff 	mov.w	r0, #4294967295
}
 80081a0:	b003      	add	sp, #12
 80081a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
          else if ((x_size == 160U) && (y_size == 120U))
 80081a4:	2da0      	cmp	r5, #160	; 0xa0
 80081a6:	d1f9      	bne.n	800819c <OV5640_GetResolution+0xc0>
 80081a8:	2b78      	cmp	r3, #120	; 0x78
 80081aa:	d1f7      	bne.n	800819c <OV5640_GetResolution+0xc0>
            *Resolution = OV5640_R160x120;
 80081ac:	2300      	movs	r3, #0
 80081ae:	603b      	str	r3, [r7, #0]
  return ret;
 80081b0:	e7d8      	b.n	8008164 <OV5640_GetResolution+0x88>
 80081b2:	bf00      	nop

080081b4 <OV5640_ReadID>:
{
 80081b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  pObj->IO.Init();
 80081b6:	4606      	mov	r6, r0
{
 80081b8:	b083      	sub	sp, #12
  tmp = 0x80;
 80081ba:	2580      	movs	r5, #128	; 0x80
{
 80081bc:	460f      	mov	r7, r1
  pObj->IO.Init();
 80081be:	f856 3b18 	ldr.w	r3, [r6], #24
{
 80081c2:	4604      	mov	r4, r0
  pObj->IO.Init();
 80081c4:	4798      	blx	r3
  if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSTEM_CTROL0, &tmp, 1) != OV5640_OK)
 80081c6:	f10d 0207 	add.w	r2, sp, #7
 80081ca:	4630      	mov	r0, r6
 80081cc:	2301      	movs	r3, #1
 80081ce:	f243 0108 	movw	r1, #12296	; 0x3008
  tmp = 0x80;
 80081d2:	f88d 5007 	strb.w	r5, [sp, #7]
  if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSTEM_CTROL0, &tmp, 1) != OV5640_OK)
 80081d6:	f000 fa9d 	bl	8008714 <ov5640_write_reg>
 80081da:	bb28      	cbnz	r0, 8008228 <OV5640_ReadID+0x74>
  tickstart = pObj->IO.GetTick();
 80081dc:	6963      	ldr	r3, [r4, #20]
 80081de:	4798      	blx	r3
 80081e0:	4605      	mov	r5, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 80081e2:	6963      	ldr	r3, [r4, #20]
 80081e4:	4798      	blx	r3
 80081e6:	1b43      	subs	r3, r0, r5
 80081e8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80081ec:	d3f9      	bcc.n	80081e2 <OV5640_ReadID+0x2e>
    if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_HIGH_BYTE, &tmp, 1) != OV5640_OK)
 80081ee:	2301      	movs	r3, #1
 80081f0:	f10d 0207 	add.w	r2, sp, #7
 80081f4:	f243 010a 	movw	r1, #12298	; 0x300a
 80081f8:	4630      	mov	r0, r6
 80081fa:	f000 fa83 	bl	8008704 <ov5640_read_reg>
 80081fe:	b998      	cbnz	r0, 8008228 <OV5640_ReadID+0x74>
      *Id = (uint32_t)tmp << 8U;
 8008200:	f89d 4007 	ldrb.w	r4, [sp, #7]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_LOW_BYTE, &tmp, 1) != OV5640_OK)
 8008204:	f10d 0207 	add.w	r2, sp, #7
 8008208:	4630      	mov	r0, r6
 800820a:	2301      	movs	r3, #1
      *Id = (uint32_t)tmp << 8U;
 800820c:	0224      	lsls	r4, r4, #8
      if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_LOW_BYTE, &tmp, 1) != OV5640_OK)
 800820e:	f243 010b 	movw	r1, #12299	; 0x300b
      *Id = (uint32_t)tmp << 8U;
 8008212:	603c      	str	r4, [r7, #0]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_LOW_BYTE, &tmp, 1) != OV5640_OK)
 8008214:	f000 fa76 	bl	8008704 <ov5640_read_reg>
 8008218:	b930      	cbnz	r0, 8008228 <OV5640_ReadID+0x74>
        *Id |= tmp;
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008220:	4313      	orrs	r3, r2
 8008222:	603b      	str	r3, [r7, #0]
}
 8008224:	b003      	add	sp, #12
 8008226:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = OV5640_ERROR;
 8008228:	f04f 30ff 	mov.w	r0, #4294967295
 800822c:	e7fa      	b.n	8008224 <OV5640_ReadID+0x70>
 800822e:	bf00      	nop

08008230 <OV5640_MirrorFlipConfig>:
{
 8008230:	b570      	push	{r4, r5, r6, lr}
  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8008232:	f100 0418 	add.w	r4, r0, #24
{
 8008236:	b082      	sub	sp, #8
  uint8_t tmp3820 = 0;
 8008238:	2600      	movs	r6, #0
{
 800823a:	460d      	mov	r5, r1
  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 800823c:	f10d 0206 	add.w	r2, sp, #6
 8008240:	2301      	movs	r3, #1
 8008242:	f643 0120 	movw	r1, #14368	; 0x3820
 8008246:	4620      	mov	r0, r4
  uint8_t tmp3820 = 0;
 8008248:	f88d 6006 	strb.w	r6, [sp, #6]
  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 800824c:	f000 fa5a 	bl	8008704 <ov5640_read_reg>
 8008250:	2800      	cmp	r0, #0
 8008252:	d174      	bne.n	800833e <OV5640_MirrorFlipConfig+0x10e>
    tmp3820 &= 0xF9U;
 8008254:	f89d 6006 	ldrb.w	r6, [sp, #6]
    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8008258:	2301      	movs	r3, #1
 800825a:	f643 0121 	movw	r1, #14369	; 0x3821
 800825e:	f10d 0207 	add.w	r2, sp, #7
    tmp3820 &= 0xF9U;
 8008262:	f026 0606 	bic.w	r6, r6, #6
    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8008266:	4620      	mov	r0, r4
    tmp3820 &= 0xF9U;
 8008268:	f88d 6006 	strb.w	r6, [sp, #6]
    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 800826c:	f000 fa4a 	bl	8008704 <ov5640_read_reg>
 8008270:	2800      	cmp	r0, #0
 8008272:	d164      	bne.n	800833e <OV5640_MirrorFlipConfig+0x10e>
      tmp3821 &= 0xF9U;
 8008274:	f89d 3007 	ldrb.w	r3, [sp, #7]
      switch (Config)
 8008278:	2d02      	cmp	r5, #2
      tmp3821 &= 0xF9U;
 800827a:	f023 0306 	bic.w	r3, r3, #6
 800827e:	f88d 3007 	strb.w	r3, [sp, #7]
      switch (Config)
 8008282:	d01b      	beq.n	80082bc <OV5640_MirrorFlipConfig+0x8c>
 8008284:	2d03      	cmp	r5, #3
 8008286:	d04a      	beq.n	800831e <OV5640_MirrorFlipConfig+0xee>
 8008288:	2d01      	cmp	r5, #1
 800828a:	d034      	beq.n	80082f6 <OV5640_MirrorFlipConfig+0xc6>
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 800828c:	f10d 0206 	add.w	r2, sp, #6
 8008290:	2301      	movs	r3, #1
 8008292:	f643 0120 	movw	r1, #14368	; 0x3820
 8008296:	4620      	mov	r0, r4
 8008298:	f000 fa3c 	bl	8008714 <ov5640_write_reg>
 800829c:	2800      	cmp	r0, #0
 800829e:	d14e      	bne.n	800833e <OV5640_MirrorFlipConfig+0x10e>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 80082a0:	f10d 0207 	add.w	r2, sp, #7
 80082a4:	4620      	mov	r0, r4
 80082a6:	2301      	movs	r3, #1
 80082a8:	f643 0121 	movw	r1, #14369	; 0x3821
 80082ac:	f000 fa32 	bl	8008714 <ov5640_write_reg>
 80082b0:	3800      	subs	r0, #0
 80082b2:	bf18      	it	ne
 80082b4:	2001      	movne	r0, #1
 80082b6:	4240      	negs	r0, r0
}
 80082b8:	b002      	add	sp, #8
 80082ba:	bd70      	pop	{r4, r5, r6, pc}
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 80082bc:	f10d 0206 	add.w	r2, sp, #6
 80082c0:	2301      	movs	r3, #1
 80082c2:	f643 0120 	movw	r1, #14368	; 0x3820
 80082c6:	4620      	mov	r0, r4
 80082c8:	f000 fa24 	bl	8008714 <ov5640_write_reg>
 80082cc:	bbb8      	cbnz	r0, 800833e <OV5640_MirrorFlipConfig+0x10e>
            tmp3821 |= 0x06U;
 80082ce:	f89d 1007 	ldrb.w	r1, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 80082d2:	4620      	mov	r0, r4
 80082d4:	f10d 0207 	add.w	r2, sp, #7
 80082d8:	2301      	movs	r3, #1
            tmp3821 |= 0x06U;
 80082da:	f041 0406 	orr.w	r4, r1, #6
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 80082de:	f643 0121 	movw	r1, #14369	; 0x3821
            tmp3821 |= 0x06U;
 80082e2:	f88d 4007 	strb.w	r4, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 80082e6:	f000 fa15 	bl	8008714 <ov5640_write_reg>
 80082ea:	3800      	subs	r0, #0
 80082ec:	bf18      	it	ne
 80082ee:	2001      	movne	r0, #1
 80082f0:	4240      	negs	r0, r0
}
 80082f2:	b002      	add	sp, #8
 80082f4:	bd70      	pop	{r4, r5, r6, pc}
          tmp3820 |= 0x06U;
 80082f6:	f89d 6006 	ldrb.w	r6, [sp, #6]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 80082fa:	f10d 0206 	add.w	r2, sp, #6
 80082fe:	462b      	mov	r3, r5
 8008300:	f643 0120 	movw	r1, #14368	; 0x3820
          tmp3820 |= 0x06U;
 8008304:	f046 0606 	orr.w	r6, r6, #6
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8008308:	4620      	mov	r0, r4
          tmp3820 |= 0x06U;
 800830a:	f88d 6006 	strb.w	r6, [sp, #6]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 800830e:	f000 fa01 	bl	8008714 <ov5640_write_reg>
 8008312:	b9a0      	cbnz	r0, 800833e <OV5640_MirrorFlipConfig+0x10e>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8008314:	462b      	mov	r3, r5
 8008316:	f10d 0207 	add.w	r2, sp, #7
 800831a:	4620      	mov	r0, r4
 800831c:	e7c4      	b.n	80082a8 <OV5640_MirrorFlipConfig+0x78>
          tmp3820 |= 0x06U;
 800831e:	f89d 5006 	ldrb.w	r5, [sp, #6]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8008322:	f10d 0206 	add.w	r2, sp, #6
 8008326:	2301      	movs	r3, #1
 8008328:	f643 0120 	movw	r1, #14368	; 0x3820
          tmp3820 |= 0x06U;
 800832c:	f045 0506 	orr.w	r5, r5, #6
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8008330:	4620      	mov	r0, r4
          tmp3820 |= 0x06U;
 8008332:	f88d 5006 	strb.w	r5, [sp, #6]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8008336:	f000 f9ed 	bl	8008714 <ov5640_write_reg>
 800833a:	2800      	cmp	r0, #0
 800833c:	d0c7      	beq.n	80082ce <OV5640_MirrorFlipConfig+0x9e>
    ret = OV5640_ERROR;
 800833e:	f04f 30ff 	mov.w	r0, #4294967295
 8008342:	e7b9      	b.n	80082b8 <OV5640_MirrorFlipConfig+0x88>

08008344 <OV5640_NightModeConfig>:
{
 8008344:	b570      	push	{r4, r5, r6, lr}
  uint8_t tmp = 0;
 8008346:	2200      	movs	r2, #0
{
 8008348:	b082      	sub	sp, #8
  if (Cmd == NIGHT_MODE_ENABLE)
 800834a:	2901      	cmp	r1, #1
  uint8_t tmp = 0;
 800834c:	f88d 2007 	strb.w	r2, [sp, #7]
  if (Cmd == NIGHT_MODE_ENABLE)
 8008350:	d01e      	beq.n	8008390 <OV5640_NightModeConfig+0x4c>
    if (ov5640_read_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8008352:	f100 0418 	add.w	r4, r0, #24
 8008356:	2301      	movs	r3, #1
 8008358:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 800835c:	f10d 0207 	add.w	r2, sp, #7
 8008360:	4620      	mov	r0, r4
 8008362:	f000 f9cf 	bl	8008704 <ov5640_read_reg>
 8008366:	b9f8      	cbnz	r0, 80083a8 <OV5640_NightModeConfig+0x64>
      tmp &= 0xFBU;
 8008368:	f89d 1007 	ldrb.w	r1, [sp, #7]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 800836c:	4620      	mov	r0, r4
 800836e:	f10d 0207 	add.w	r2, sp, #7
 8008372:	2301      	movs	r3, #1
      tmp &= 0xFBU;
 8008374:	f021 0404 	bic.w	r4, r1, #4
      if (ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8008378:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
      tmp &= 0xFBU;
 800837c:	f88d 4007 	strb.w	r4, [sp, #7]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8008380:	f000 f9c8 	bl	8008714 <ov5640_write_reg>
 8008384:	3800      	subs	r0, #0
 8008386:	bf18      	it	ne
 8008388:	2001      	movne	r0, #1
 800838a:	4240      	negs	r0, r0
}
 800838c:	b002      	add	sp, #8
 800838e:	bd70      	pop	{r4, r5, r6, pc}
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL4, &tmp, 1);
 8008390:	f100 0418 	add.w	r4, r0, #24
 8008394:	460d      	mov	r5, r1
 8008396:	460b      	mov	r3, r1
 8008398:	f10d 0207 	add.w	r2, sp, #7
 800839c:	f243 0138 	movw	r1, #12344	; 0x3038
 80083a0:	4620      	mov	r0, r4
 80083a2:	f000 f9b7 	bl	8008714 <ov5640_write_reg>
    if (ret == OV5640_OK)
 80083a6:	b118      	cbz	r0, 80083b0 <OV5640_NightModeConfig+0x6c>
      ret = OV5640_ERROR;
 80083a8:	f04f 30ff 	mov.w	r0, #4294967295
}
 80083ac:	b002      	add	sp, #8
 80083ae:	bd70      	pop	{r4, r5, r6, pc}
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL5, &tmp, 1);
 80083b0:	462b      	mov	r3, r5
 80083b2:	f10d 0207 	add.w	r2, sp, #7
 80083b6:	f243 0139 	movw	r1, #12345	; 0x3039
 80083ba:	4620      	mov	r0, r4
 80083bc:	f000 f9aa 	bl	8008714 <ov5640_write_reg>
    if (ret == OV5640_OK)
 80083c0:	2800      	cmp	r0, #0
 80083c2:	d1f1      	bne.n	80083a8 <OV5640_NightModeConfig+0x64>
      tmp = 0x7C;
 80083c4:	267c      	movs	r6, #124	; 0x7c
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1);
 80083c6:	462b      	mov	r3, r5
 80083c8:	f10d 0207 	add.w	r2, sp, #7
 80083cc:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 80083d0:	4620      	mov	r0, r4
      tmp = 0x7C;
 80083d2:	f88d 6007 	strb.w	r6, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1);
 80083d6:	f000 f99d 	bl	8008714 <ov5640_write_reg>
    if (ret == OV5640_OK)
 80083da:	2800      	cmp	r0, #0
 80083dc:	d1e4      	bne.n	80083a8 <OV5640_NightModeConfig+0x64>
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_HIGH, &tmp, 1);
 80083de:	462b      	mov	r3, r5
 80083e0:	f10d 0207 	add.w	r2, sp, #7
 80083e4:	f643 2108 	movw	r1, #14856	; 0x3a08
 80083e8:	4620      	mov	r0, r4
      tmp = 0x01;
 80083ea:	f88d 5007 	strb.w	r5, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_HIGH, &tmp, 1);
 80083ee:	f000 f991 	bl	8008714 <ov5640_write_reg>
    if (ret == OV5640_OK)
 80083f2:	2800      	cmp	r0, #0
 80083f4:	d1d8      	bne.n	80083a8 <OV5640_NightModeConfig+0x64>
      tmp = 0x27;
 80083f6:	2627      	movs	r6, #39	; 0x27
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_LOW, &tmp, 1);
 80083f8:	462b      	mov	r3, r5
 80083fa:	f10d 0207 	add.w	r2, sp, #7
 80083fe:	f643 2109 	movw	r1, #14857	; 0x3a09
 8008402:	4620      	mov	r0, r4
      tmp = 0x27;
 8008404:	f88d 6007 	strb.w	r6, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_LOW, &tmp, 1);
 8008408:	f000 f984 	bl	8008714 <ov5640_write_reg>
    if (ret == OV5640_OK)
 800840c:	4606      	mov	r6, r0
 800840e:	2800      	cmp	r0, #0
 8008410:	d1ca      	bne.n	80083a8 <OV5640_NightModeConfig+0x64>
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_HIGH, &tmp, 1);
 8008412:	462b      	mov	r3, r5
 8008414:	f10d 0207 	add.w	r2, sp, #7
 8008418:	f643 210a 	movw	r1, #14858	; 0x3a0a
 800841c:	4620      	mov	r0, r4
      tmp = 0x00;
 800841e:	f88d 6007 	strb.w	r6, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_HIGH, &tmp, 1);
 8008422:	f000 f977 	bl	8008714 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8008426:	2800      	cmp	r0, #0
 8008428:	d1be      	bne.n	80083a8 <OV5640_NightModeConfig+0x64>
      tmp = 0xF6;
 800842a:	26f6      	movs	r6, #246	; 0xf6
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_LOW, &tmp, 1);
 800842c:	462b      	mov	r3, r5
 800842e:	f10d 0207 	add.w	r2, sp, #7
 8008432:	f643 210b 	movw	r1, #14859	; 0x3a0b
 8008436:	4620      	mov	r0, r4
      tmp = 0xF6;
 8008438:	f88d 6007 	strb.w	r6, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_LOW, &tmp, 1);
 800843c:	f000 f96a 	bl	8008714 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8008440:	2800      	cmp	r0, #0
 8008442:	d1b1      	bne.n	80083a8 <OV5640_NightModeConfig+0x64>
      tmp = 0x04;
 8008444:	2604      	movs	r6, #4
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0D, &tmp, 1);
 8008446:	462b      	mov	r3, r5
 8008448:	f10d 0207 	add.w	r2, sp, #7
 800844c:	f643 210d 	movw	r1, #14861	; 0x3a0d
 8008450:	4620      	mov	r0, r4
      tmp = 0x04;
 8008452:	f88d 6007 	strb.w	r6, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0D, &tmp, 1);
 8008456:	f000 f95d 	bl	8008714 <ov5640_write_reg>
    if (ret == OV5640_OK)
 800845a:	2800      	cmp	r0, #0
 800845c:	d1a4      	bne.n	80083a8 <OV5640_NightModeConfig+0x64>
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0E, &tmp, 1);
 800845e:	462b      	mov	r3, r5
 8008460:	f10d 0207 	add.w	r2, sp, #7
 8008464:	f643 210e 	movw	r1, #14862	; 0x3a0e
 8008468:	4620      	mov	r0, r4
 800846a:	f000 f953 	bl	8008714 <ov5640_write_reg>
    if (ret == OV5640_OK)
 800846e:	2800      	cmp	r0, #0
 8008470:	d19a      	bne.n	80083a8 <OV5640_NightModeConfig+0x64>
      tmp = 0x0B;
 8008472:	260b      	movs	r6, #11
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL02, &tmp, 1);
 8008474:	2301      	movs	r3, #1
 8008476:	f10d 0207 	add.w	r2, sp, #7
 800847a:	f643 2102 	movw	r1, #14850	; 0x3a02
 800847e:	4620      	mov	r0, r4
      tmp = 0x0B;
 8008480:	f88d 6007 	strb.w	r6, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL02, &tmp, 1);
 8008484:	f000 f946 	bl	8008714 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8008488:	2800      	cmp	r0, #0
 800848a:	d18d      	bne.n	80083a8 <OV5640_NightModeConfig+0x64>
      tmp = 0x88;
 800848c:	2588      	movs	r5, #136	; 0x88
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL03, &tmp, 1);
 800848e:	2301      	movs	r3, #1
 8008490:	f10d 0207 	add.w	r2, sp, #7
 8008494:	f643 2103 	movw	r1, #14851	; 0x3a03
 8008498:	4620      	mov	r0, r4
      tmp = 0x88;
 800849a:	f88d 5007 	strb.w	r5, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL03, &tmp, 1);
 800849e:	f000 f939 	bl	8008714 <ov5640_write_reg>
    if (ret == OV5640_OK)
 80084a2:	2800      	cmp	r0, #0
 80084a4:	d180      	bne.n	80083a8 <OV5640_NightModeConfig+0x64>
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_HIGH, &tmp, 1);
 80084a6:	2301      	movs	r3, #1
 80084a8:	f10d 0207 	add.w	r2, sp, #7
 80084ac:	f643 2114 	movw	r1, #14868	; 0x3a14
 80084b0:	4620      	mov	r0, r4
      tmp = 0x0B;
 80084b2:	f88d 6007 	strb.w	r6, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_HIGH, &tmp, 1);
 80084b6:	f000 f92d 	bl	8008714 <ov5640_write_reg>
    if (ret == OV5640_OK)
 80084ba:	2800      	cmp	r0, #0
 80084bc:	f47f af74 	bne.w	80083a8 <OV5640_NightModeConfig+0x64>
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_LOW, &tmp, 1);
 80084c0:	f10d 0207 	add.w	r2, sp, #7
 80084c4:	4620      	mov	r0, r4
 80084c6:	2301      	movs	r3, #1
 80084c8:	f643 2115 	movw	r1, #14869	; 0x3a15
      tmp = 0x88;
 80084cc:	f88d 5007 	strb.w	r5, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_LOW, &tmp, 1);
 80084d0:	f000 f920 	bl	8008714 <ov5640_write_reg>
    if (ret != OV5640_OK)
 80084d4:	3800      	subs	r0, #0
 80084d6:	bf18      	it	ne
 80084d8:	2001      	movne	r0, #1
 80084da:	4240      	negs	r0, r0
}
 80084dc:	b002      	add	sp, #8
 80084de:	bd70      	pop	{r4, r5, r6, pc}

080084e0 <OV5640_ZoomConfig>:
{
 80084e0:	b570      	push	{r4, r5, r6, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	460d      	mov	r5, r1
 80084e6:	4604      	mov	r4, r0
  if (OV5640_GetResolution(pObj, &res) != OV5640_OK)
 80084e8:	a901      	add	r1, sp, #4
 80084ea:	f7ff fdf7 	bl	80080dc <OV5640_GetResolution>
 80084ee:	2800      	cmp	r0, #0
 80084f0:	d13a      	bne.n	8008568 <OV5640_ZoomConfig+0x88>
    if (zoom == OV5640_ZOOM_x1)
 80084f2:	2d44      	cmp	r5, #68	; 0x44
 80084f4:	d026      	beq.n	8008544 <OV5640_ZoomConfig+0x64>
      switch (res)
 80084f6:	9b01      	ldr	r3, [sp, #4]
 80084f8:	2b02      	cmp	r3, #2
 80084fa:	d91f      	bls.n	800853c <OV5640_ZoomConfig+0x5c>
 80084fc:	2b03      	cmp	r3, #3
 80084fe:	d100      	bne.n	8008502 <OV5640_ZoomConfig+0x22>
          zoom = zoom >> 2U;
 8008500:	08ad      	lsrs	r5, r5, #2
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8008502:	3418      	adds	r4, #24
      tmp = 0x00;
 8008504:	2600      	movs	r6, #0
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8008506:	2301      	movs	r3, #1
 8008508:	f10d 0203 	add.w	r2, sp, #3
 800850c:	4620      	mov	r0, r4
 800850e:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
      tmp = 0x00;
 8008512:	f88d 6003 	strb.w	r6, [sp, #3]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8008516:	f000 f8fd 	bl	8008714 <ov5640_write_reg>
 800851a:	bb28      	cbnz	r0, 8008568 <OV5640_ZoomConfig+0x88>
        if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL1, &tmp, 1) != OV5640_OK)
 800851c:	f10d 0203 	add.w	r2, sp, #3
 8008520:	4620      	mov	r0, r4
 8008522:	2301      	movs	r3, #1
 8008524:	f245 6101 	movw	r1, #22017	; 0x5601
        tmp = (uint8_t)zoom;
 8008528:	f88d 5003 	strb.w	r5, [sp, #3]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL1, &tmp, 1) != OV5640_OK)
 800852c:	f000 f8f2 	bl	8008714 <ov5640_write_reg>
 8008530:	1b80      	subs	r0, r0, r6
 8008532:	bf18      	it	ne
 8008534:	2001      	movne	r0, #1
 8008536:	4240      	negs	r0, r0
}
 8008538:	b002      	add	sp, #8
 800853a:	bd70      	pop	{r4, r5, r6, pc}
      switch (res)
 800853c:	2b00      	cmp	r3, #0
 800853e:	d0e0      	beq.n	8008502 <OV5640_ZoomConfig+0x22>
          zoom = zoom >> 1U;
 8008540:	086d      	lsrs	r5, r5, #1
          break;
 8008542:	e7de      	b.n	8008502 <OV5640_ZoomConfig+0x22>
      tmp = 0x10;
 8008544:	2510      	movs	r5, #16
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8008546:	f104 0018 	add.w	r0, r4, #24
 800854a:	2301      	movs	r3, #1
 800854c:	f10d 0203 	add.w	r2, sp, #3
 8008550:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
      tmp = 0x10;
 8008554:	f88d 5003 	strb.w	r5, [sp, #3]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8008558:	f000 f8dc 	bl	8008714 <ov5640_write_reg>
 800855c:	3800      	subs	r0, #0
 800855e:	bf18      	it	ne
 8008560:	2001      	movne	r0, #1
 8008562:	4240      	negs	r0, r0
}
 8008564:	b002      	add	sp, #8
 8008566:	bd70      	pop	{r4, r5, r6, pc}
    ret = OV5640_ERROR;
 8008568:	f04f 30ff 	mov.w	r0, #4294967295
 800856c:	e7e4      	b.n	8008538 <OV5640_ZoomConfig+0x58>
 800856e:	bf00      	nop

08008570 <OV5640_Init>:
  if (pObj->IsInitialized == 0U)
 8008570:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8008574:	bb83      	cbnz	r3, 80085d8 <OV5640_Init+0x68>
    if ((Resolution > OV5640_R800x480) ||
 8008576:	2904      	cmp	r1, #4
{
 8008578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800857c:	468a      	mov	sl, r1
 800857e:	b082      	sub	sp, #8
    if ((Resolution > OV5640_R800x480) ||
 8008580:	d825      	bhi.n	80085ce <OV5640_Init+0x5e>
 8008582:	2a02      	cmp	r2, #2
 8008584:	4680      	mov	r8, r0
 8008586:	4691      	mov	r9, r2
 8008588:	d902      	bls.n	8008590 <OV5640_Init+0x20>
         (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 800858a:	1fd3      	subs	r3, r2, #7
 800858c:	2b01      	cmp	r3, #1
 800858e:	d81e      	bhi.n	80085ce <OV5640_Init+0x5e>
        if (ret != OV5640_ERROR)
 8008590:	f108 0718 	add.w	r7, r8, #24
{
 8008594:	2400      	movs	r4, #0
 8008596:	4e22      	ldr	r6, [pc, #136]	; (8008620 <OV5640_Init+0xb0>)
          tmp = (uint8_t)OV5640_Common[index][1];
 8008598:	eb06 0584 	add.w	r5, r6, r4, lsl #2
          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 800859c:	2301      	movs	r3, #1
 800859e:	f10d 0206 	add.w	r2, sp, #6
 80085a2:	f836 1024 	ldrh.w	r1, [r6, r4, lsl #2]
          tmp = (uint8_t)OV5640_Common[index][1];
 80085a6:	886d      	ldrh	r5, [r5, #2]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 80085a8:	4638      	mov	r0, r7
          tmp = (uint8_t)OV5640_Common[index][1];
 80085aa:	f88d 5006 	strb.w	r5, [sp, #6]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 80085ae:	f000 f8b1 	bl	8008714 <ov5640_write_reg>
 80085b2:	b198      	cbz	r0, 80085dc <OV5640_Init+0x6c>
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 80085b4:	2cfd      	cmp	r4, #253	; 0xfd
 80085b6:	d00a      	beq.n	80085ce <OV5640_Init+0x5e>
 80085b8:	2cfc      	cmp	r4, #252	; 0xfc
 80085ba:	f104 0302 	add.w	r3, r4, #2
 80085be:	d102      	bne.n	80085c6 <OV5640_Init+0x56>
 80085c0:	e005      	b.n	80085ce <OV5640_Init+0x5e>
 80085c2:	2bfe      	cmp	r3, #254	; 0xfe
 80085c4:	d003      	beq.n	80085ce <OV5640_Init+0x5e>
 80085c6:	2bfd      	cmp	r3, #253	; 0xfd
 80085c8:	f103 0302 	add.w	r3, r3, #2
 80085cc:	d1f9      	bne.n	80085c2 <OV5640_Init+0x52>
          ret = OV5640_ERROR;
 80085ce:	f04f 30ff 	mov.w	r0, #4294967295
}
 80085d2:	b002      	add	sp, #8
 80085d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  int32_t ret = OV5640_OK;
 80085d8:	2000      	movs	r0, #0
}
 80085da:	4770      	bx	lr
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 80085dc:	3401      	adds	r4, #1
 80085de:	2cfe      	cmp	r4, #254	; 0xfe
 80085e0:	d1da      	bne.n	8008598 <OV5640_Init+0x28>
        if (OV5640_SetResolution(pObj, Resolution) != OV5640_OK)
 80085e2:	4651      	mov	r1, sl
 80085e4:	4640      	mov	r0, r8
 80085e6:	f7fe fffd 	bl	80075e4 <OV5640_SetResolution>
 80085ea:	2800      	cmp	r0, #0
 80085ec:	d1ef      	bne.n	80085ce <OV5640_Init+0x5e>
        else if (OV5640_SetPixelFormat(pObj, PixelFormat) != OV5640_OK)
 80085ee:	4649      	mov	r1, r9
 80085f0:	4640      	mov	r0, r8
 80085f2:	f7ff fc37 	bl	8007e64 <OV5640_SetPixelFormat>
 80085f6:	2800      	cmp	r0, #0
 80085f8:	d1e9      	bne.n	80085ce <OV5640_Init+0x5e>
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 80085fa:	2422      	movs	r4, #34	; 0x22
    if (ov5640_write_reg(&pObj->Ctx, OV5640_POLARITY_CTRL, &tmp, 1) != OV5640_OK)
 80085fc:	4638      	mov	r0, r7
 80085fe:	2301      	movs	r3, #1
 8008600:	f10d 0207 	add.w	r2, sp, #7
 8008604:	f244 7140 	movw	r1, #18240	; 0x4740
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 8008608:	f88d 4007 	strb.w	r4, [sp, #7]
    if (ov5640_write_reg(&pObj->Ctx, OV5640_POLARITY_CTRL, &tmp, 1) != OV5640_OK)
 800860c:	f000 f882 	bl	8008714 <ov5640_write_reg>
 8008610:	2800      	cmp	r0, #0
 8008612:	d1dc      	bne.n	80085ce <OV5640_Init+0x5e>
          pObj->IsInitialized = 1U;
 8008614:	2301      	movs	r3, #1
 8008616:	f888 3024 	strb.w	r3, [r8, #36]	; 0x24
}
 800861a:	b002      	add	sp, #8
 800861c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008620:	08097270 	.word	0x08097270

08008624 <OV5640_RegisterBusIO>:
  if (pObj == NULL)
 8008624:	b1c0      	cbz	r0, 8008658 <OV5640_RegisterBusIO+0x34>
    pObj->IO.WriteReg  = pIO->WriteReg;
 8008626:	68ca      	ldr	r2, [r1, #12]
{
 8008628:	b470      	push	{r4, r5, r6}
    pObj->IO.DeInit    = pIO->DeInit;
 800862a:	e9d1 3400 	ldrd	r3, r4, [r1]
    pObj->IO.Address   = pIO->Address;
 800862e:	890e      	ldrh	r6, [r1, #8]
    pObj->IO.DeInit    = pIO->DeInit;
 8008630:	e9c0 3400 	strd	r3, r4, [r0]
    pObj->IO.GetTick   = pIO->GetTick;
 8008634:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
    pObj->Ctx.ReadReg  = OV5640_ReadRegWrap;
 8008638:	4909      	ldr	r1, [pc, #36]	; (8008660 <OV5640_RegisterBusIO+0x3c>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 800863a:	60c2      	str	r2, [r0, #12]
    pObj->Ctx.WriteReg = OV5640_WriteRegWrap;
 800863c:	4a09      	ldr	r2, [pc, #36]	; (8008664 <OV5640_RegisterBusIO+0x40>)
    pObj->IO.Address   = pIO->Address;
 800863e:	8106      	strh	r6, [r0, #8]
    pObj->Ctx.WriteReg = OV5640_WriteRegWrap;
 8008640:	6182      	str	r2, [r0, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 8008642:	e9c0 5404 	strd	r5, r4, [r0, #16]
    pObj->Ctx.ReadReg  = OV5640_ReadRegWrap;
 8008646:	e9c0 1007 	strd	r1, r0, [r0, #28]
    if (pObj->IO.Init != NULL)
 800864a:	b10b      	cbz	r3, 8008650 <OV5640_RegisterBusIO+0x2c>
}
 800864c:	bc70      	pop	{r4, r5, r6}
      ret = pObj->IO.Init();
 800864e:	4718      	bx	r3
}
 8008650:	f04f 30ff 	mov.w	r0, #4294967295
 8008654:	bc70      	pop	{r4, r5, r6}
 8008656:	4770      	bx	lr
 8008658:	f04f 30ff 	mov.w	r0, #4294967295
 800865c:	4770      	bx	lr
 800865e:	bf00      	nop
 8008660:	080075c5 	.word	0x080075c5
 8008664:	080075d5 	.word	0x080075d5

08008668 <OV5640_ColorbarModeConfig>:
  uint8_t tmp = 0x40;
 8008668:	2340      	movs	r3, #64	; 0x40
{
 800866a:	b530      	push	{r4, r5, lr}
 800866c:	b083      	sub	sp, #12
  uint8_t tmp = 0x40;
 800866e:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((Cmd == COLORBAR_MODE_ENABLE) || (Cmd == COLORBAR_MODE_GRADUALV))
 8008672:	1e4b      	subs	r3, r1, #1
 8008674:	2b01      	cmp	r3, #1
 8008676:	d922      	bls.n	80086be <OV5640_ColorbarModeConfig+0x56>
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8008678:	f100 0418 	add.w	r4, r0, #24
    tmp = 0x10;
 800867c:	2510      	movs	r5, #16
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 800867e:	2301      	movs	r3, #1
 8008680:	f10d 0207 	add.w	r2, sp, #7
 8008684:	4620      	mov	r0, r4
 8008686:	f245 5184 	movw	r1, #21892	; 0x5584
    tmp = 0x10;
 800868a:	f88d 5007 	strb.w	r5, [sp, #7]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 800868e:	f000 f841 	bl	8008714 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8008692:	4605      	mov	r5, r0
 8008694:	b118      	cbz	r0, 800869e <OV5640_ColorbarModeConfig+0x36>
      ret = OV5640_ERROR;
 8008696:	f04f 30ff 	mov.w	r0, #4294967295
}
 800869a:	b003      	add	sp, #12
 800869c:	bd30      	pop	{r4, r5, pc}
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_PRE_ISP_TEST_SETTING1, &tmp, 1);
 800869e:	f10d 0207 	add.w	r2, sp, #7
 80086a2:	4620      	mov	r0, r4
 80086a4:	2301      	movs	r3, #1
 80086a6:	f245 013d 	movw	r1, #20541	; 0x503d
      tmp = 0x00;
 80086aa:	f88d 5007 	strb.w	r5, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_PRE_ISP_TEST_SETTING1, &tmp, 1);
 80086ae:	f000 f831 	bl	8008714 <ov5640_write_reg>
    if (ret != OV5640_OK)
 80086b2:	3800      	subs	r0, #0
 80086b4:	bf18      	it	ne
 80086b6:	2001      	movne	r0, #1
 80086b8:	4240      	negs	r0, r0
}
 80086ba:	b003      	add	sp, #12
 80086bc:	bd30      	pop	{r4, r5, pc}
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 80086be:	f100 0418 	add.w	r4, r0, #24
 80086c2:	460d      	mov	r5, r1
 80086c4:	2301      	movs	r3, #1
 80086c6:	f245 5184 	movw	r1, #21892	; 0x5584
 80086ca:	4620      	mov	r0, r4
 80086cc:	f10d 0207 	add.w	r2, sp, #7
 80086d0:	f000 f820 	bl	8008714 <ov5640_write_reg>
    if (ret == OV5640_OK)
 80086d4:	2800      	cmp	r0, #0
 80086d6:	d1de      	bne.n	8008696 <OV5640_ColorbarModeConfig+0x2e>
      tmp = (Cmd == COLORBAR_MODE_GRADUALV ? 0x8c : 0x80);
 80086d8:	2d02      	cmp	r5, #2
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_PRE_ISP_TEST_SETTING1, &tmp, 1);
 80086da:	4620      	mov	r0, r4
 80086dc:	f10d 0207 	add.w	r2, sp, #7
 80086e0:	f04f 0301 	mov.w	r3, #1
      tmp = (Cmd == COLORBAR_MODE_GRADUALV ? 0x8c : 0x80);
 80086e4:	bf0c      	ite	eq
 80086e6:	248c      	moveq	r4, #140	; 0x8c
 80086e8:	2480      	movne	r4, #128	; 0x80
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_PRE_ISP_TEST_SETTING1, &tmp, 1);
 80086ea:	f245 013d 	movw	r1, #20541	; 0x503d
      tmp = (Cmd == COLORBAR_MODE_GRADUALV ? 0x8c : 0x80);
 80086ee:	f88d 4007 	strb.w	r4, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_PRE_ISP_TEST_SETTING1, &tmp, 1);
 80086f2:	f000 f80f 	bl	8008714 <ov5640_write_reg>
    if (ret != OV5640_OK)
 80086f6:	3800      	subs	r0, #0
 80086f8:	bf18      	it	ne
 80086fa:	2001      	movne	r0, #1
 80086fc:	4240      	negs	r0, r0
}
 80086fe:	b003      	add	sp, #12
 8008700:	bd30      	pop	{r4, r5, pc}
 8008702:	bf00      	nop

08008704 <ov5640_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read
  * @retval Component status
  */
int32_t ov5640_read_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8008704:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8008706:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 800870a:	46a4      	mov	ip, r4
}
 800870c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8008710:	4760      	bx	ip
 8008712:	bf00      	nop

08008714 <ov5640_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write
  * @retval Component status
  */
int32_t ov5640_write_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 8008714:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8008716:	6804      	ldr	r4, [r0, #0]
 8008718:	6880      	ldr	r0, [r0, #8]
 800871a:	46a4      	mov	ip, r4
}
 800871c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8008720:	4760      	bx	ip
 8008722:	bf00      	nop

08008724 <OV9655_DeInit>:
  * @param  pObj  pointer to component object
  * @retval Component status
  */
int32_t OV9655_DeInit(OV9655_Object_t *pObj)
{
  if(pObj->IsInitialized == 1U)
 8008724:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8008728:	2b01      	cmp	r3, #1
 800872a:	d102      	bne.n	8008732 <OV9655_DeInit+0xe>
  {
    pObj->IsInitialized = 0U;
 800872c:	2300      	movs	r3, #0
 800872e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  }

  return OV9655_OK;
}
 8008732:	2000      	movs	r0, #0
 8008734:	4770      	bx	lr
 8008736:	bf00      	nop

08008738 <OV9655_GetPixelFormat>:
{
  (void)(pObj);
  (void)(PixelFormat);

  return OV9655_ERROR;
}
 8008738:	f04f 30ff 	mov.w	r0, #4294967295
 800873c:	4770      	bx	lr
 800873e:	bf00      	nop

08008740 <OV9655_GetCapabilities>:
  */
int32_t OV9655_GetCapabilities(OV9655_Object_t *pObj, OV9655_Capabilities_t *Capabilities)
{
  int32_t ret;

  if(pObj == NULL)
 8008740:	b168      	cbz	r0, 800875e <OV9655_GetCapabilities+0x1e>
  {
    ret = OV9655_ERROR;
  }
  else
  {
    Capabilities->Config_Brightness    = 1;
 8008742:	2301      	movs	r3, #1
    Capabilities->Config_Contrast      = 1;
    Capabilities->Config_HueDegree     = 0;
 8008744:	2200      	movs	r2, #0
    Capabilities->Config_Brightness    = 1;
 8008746:	60cb      	str	r3, [r1, #12]
    Capabilities->Config_Resolution    = 1;
    Capabilities->Config_Saturation    = 0;
    Capabilities->Config_SpecialEffect = 1;
    Capabilities->Config_Zoom          = 0;

    ret = OV9655_OK;
 8008748:	4610      	mov	r0, r2
    Capabilities->Config_Contrast      = 1;
 800874a:	614b      	str	r3, [r1, #20]
    Capabilities->Config_MirrorFlip    = 1;
 800874c:	61cb      	str	r3, [r1, #28]
    Capabilities->Config_NightMode     = 1;
 800874e:	624b      	str	r3, [r1, #36]	; 0x24
    Capabilities->Config_Resolution    = 1;
 8008750:	600b      	str	r3, [r1, #0]
    Capabilities->Config_SpecialEffect = 1;
 8008752:	608b      	str	r3, [r1, #8]
    Capabilities->Config_HueDegree     = 0;
 8008754:	618a      	str	r2, [r1, #24]
    Capabilities->Config_LightMode     = 0;
 8008756:	604a      	str	r2, [r1, #4]
    Capabilities->Config_Saturation    = 0;
 8008758:	610a      	str	r2, [r1, #16]
    Capabilities->Config_Zoom          = 0;
 800875a:	620a      	str	r2, [r1, #32]
    ret = OV9655_OK;
 800875c:	4770      	bx	lr
    ret = OV9655_ERROR;
 800875e:	f04f 30ff 	mov.w	r0, #4294967295
  }

  return ret;
}
 8008762:	4770      	bx	lr

08008764 <OV9655_SetLightMode>:
{
  (void)(pObj);
  (void)(LightMode);

  return OV9655_ERROR;
}
 8008764:	f04f 30ff 	mov.w	r0, #4294967295
 8008768:	4770      	bx	lr
 800876a:	bf00      	nop

0800876c <OV9655_SetSaturation>:
{
  (void)(pObj);
  (void)(Level);

  return OV9655_ERROR;
}
 800876c:	f04f 30ff 	mov.w	r0, #4294967295
 8008770:	4770      	bx	lr
 8008772:	bf00      	nop

08008774 <OV9655_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV9655_ReadRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8008774:	b410      	push	{r4}
  OV9655_Object_t *pObj = (OV9655_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8008776:	6904      	ldr	r4, [r0, #16]
 8008778:	8900      	ldrh	r0, [r0, #8]
 800877a:	46a4      	mov	ip, r4
}
 800877c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8008780:	4760      	bx	ip
 8008782:	bf00      	nop

08008784 <OV9655_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV9655_WriteRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8008784:	b410      	push	{r4}
  OV9655_Object_t *pObj = (OV9655_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8008786:	68c4      	ldr	r4, [r0, #12]
 8008788:	8900      	ldrh	r0, [r0, #8]
 800878a:	46a4      	mov	ip, r4
}
 800878c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8008790:	4760      	bx	ip
 8008792:	bf00      	nop

08008794 <OV9655_SetResolution>:
  if (Resolution > OV9655_R640x480)
 8008794:	2903      	cmp	r1, #3
{
 8008796:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800879a:	b083      	sub	sp, #12
  if (Resolution > OV9655_R640x480)
 800879c:	d831      	bhi.n	8008802 <OV9655_SetResolution+0x6e>
    switch (Resolution)
 800879e:	2901      	cmp	r1, #1
 80087a0:	4604      	mov	r4, r0
 80087a2:	d034      	beq.n	800880e <OV9655_SetResolution+0x7a>
 80087a4:	3902      	subs	r1, #2
 80087a6:	2600      	movs	r6, #0
 80087a8:	2901      	cmp	r1, #1
 80087aa:	d864      	bhi.n	8008876 <OV9655_SetResolution+0xe2>
 80087ac:	f10d 0907 	add.w	r9, sp, #7
 80087b0:	f100 0a18 	add.w	sl, r0, #24
 80087b4:	f8df b1a8 	ldr.w	fp, [pc, #424]	; 8008960 <OV9655_SetResolution+0x1cc>
          tmp = OV9655_VGA[index][1];
 80087b8:	eb0b 0046 	add.w	r0, fp, r6, lsl #1
          if(ov9655_write_reg(&pObj->Ctx, OV9655_VGA[index][0], &tmp, 1) != OV9655_OK)
 80087bc:	2301      	movs	r3, #1
 80087be:	464a      	mov	r2, r9
 80087c0:	f81b 1016 	ldrb.w	r1, [fp, r6, lsl #1]
          tmp = OV9655_VGA[index][1];
 80087c4:	7845      	ldrb	r5, [r0, #1]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_VGA[index][0], &tmp, 1) != OV9655_OK)
 80087c6:	4650      	mov	r0, sl
          tmp = OV9655_VGA[index][1];
 80087c8:	f88d 5007 	strb.w	r5, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_VGA[index][0], &tmp, 1) != OV9655_OK)
 80087cc:	f000 fc3e 	bl	800904c <ov9655_write_reg>
 80087d0:	1e07      	subs	r7, r0, #0
  tickstart = pObj->IO.GetTick();
 80087d2:	6963      	ldr	r3, [r4, #20]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_VGA[index][0], &tmp, 1) != OV9655_OK)
 80087d4:	4680      	mov	r8, r0
 80087d6:	bf18      	it	ne
 80087d8:	2701      	movne	r7, #1
  tickstart = pObj->IO.GetTick();
 80087da:	4798      	blx	r3
 80087dc:	4605      	mov	r5, r0
          if(ov9655_write_reg(&pObj->Ctx, OV9655_VGA[index][0], &tmp, 1) != OV9655_OK)
 80087de:	427f      	negs	r7, r7
  while((pObj->IO.GetTick() - tickstart) < Delay)
 80087e0:	6963      	ldr	r3, [r4, #20]
 80087e2:	4798      	blx	r3
 80087e4:	1b40      	subs	r0, r0, r5
 80087e6:	2801      	cmp	r0, #1
 80087e8:	d9fa      	bls.n	80087e0 <OV9655_SetResolution+0x4c>
      for(index=0; index<(sizeof(OV9655_VGA)/2U); index++)
 80087ea:	3601      	adds	r6, #1
 80087ec:	2e93      	cmp	r6, #147	; 0x93
 80087ee:	d00a      	beq.n	8008806 <OV9655_SetResolution+0x72>
        if(ret != OV9655_ERROR)
 80087f0:	f1b8 0f00 	cmp.w	r8, #0
 80087f4:	d0e0      	beq.n	80087b8 <OV9655_SetResolution+0x24>
      for(index=0; index<(sizeof(OV9655_VGA)/2U); index++)
 80087f6:	2e92      	cmp	r6, #146	; 0x92
 80087f8:	f106 0602 	add.w	r6, r6, #2
 80087fc:	d001      	beq.n	8008802 <OV9655_SetResolution+0x6e>
 80087fe:	2e93      	cmp	r6, #147	; 0x93
 8008800:	d1f9      	bne.n	80087f6 <OV9655_SetResolution+0x62>
    ret = OV9655_ERROR;
 8008802:	f04f 37ff 	mov.w	r7, #4294967295
}
 8008806:	4638      	mov	r0, r7
 8008808:	b003      	add	sp, #12
 800880a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch (Resolution)
 800880e:	2600      	movs	r6, #0
 8008810:	f8df 8150 	ldr.w	r8, [pc, #336]	; 8008964 <OV9655_SetResolution+0x1d0>
 8008814:	f10d 0907 	add.w	r9, sp, #7
 8008818:	f100 0a18 	add.w	sl, r0, #24
          tmp = OV9655_QVGA_QQVGA[index][1];
 800881c:	eb08 0046 	add.w	r0, r8, r6, lsl #1
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8008820:	2301      	movs	r3, #1
 8008822:	464a      	mov	r2, r9
 8008824:	f818 1016 	ldrb.w	r1, [r8, r6, lsl #1]
          tmp = OV9655_QVGA_QQVGA[index][1];
 8008828:	7845      	ldrb	r5, [r0, #1]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 800882a:	4650      	mov	r0, sl
          tmp = OV9655_QVGA_QQVGA[index][1];
 800882c:	f88d 5007 	strb.w	r5, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8008830:	f000 fc0c 	bl	800904c <ov9655_write_reg>
 8008834:	1e07      	subs	r7, r0, #0
  tickstart = pObj->IO.GetTick();
 8008836:	6963      	ldr	r3, [r4, #20]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8008838:	4683      	mov	fp, r0
 800883a:	bf18      	it	ne
 800883c:	2701      	movne	r7, #1
  tickstart = pObj->IO.GetTick();
 800883e:	4798      	blx	r3
 8008840:	4605      	mov	r5, r0
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8008842:	427f      	negs	r7, r7
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8008844:	6963      	ldr	r3, [r4, #20]
 8008846:	4798      	blx	r3
 8008848:	1b40      	subs	r0, r0, r5
 800884a:	2801      	cmp	r0, #1
 800884c:	d9fa      	bls.n	8008844 <OV9655_SetResolution+0xb0>
      for(index=0; index<(sizeof(OV9655_QVGA_QQVGA)/2U); index++)
 800884e:	3601      	adds	r6, #1
 8008850:	2e91      	cmp	r6, #145	; 0x91
 8008852:	d043      	beq.n	80088dc <OV9655_SetResolution+0x148>
        if(ret != OV9655_ERROR)
 8008854:	f1bb 0f00 	cmp.w	fp, #0
 8008858:	d0e0      	beq.n	800881c <OV9655_SetResolution+0x88>
      for(index=0; index<(sizeof(OV9655_QVGA_QQVGA)/2U); index++)
 800885a:	2e90      	cmp	r6, #144	; 0x90
 800885c:	f106 0602 	add.w	r6, r6, #2
 8008860:	d001      	beq.n	8008866 <OV9655_SetResolution+0xd2>
 8008862:	2e91      	cmp	r6, #145	; 0x91
 8008864:	d1f9      	bne.n	800885a <OV9655_SetResolution+0xc6>
      for(index=0; index< (sizeof(OV9655_QVGA)/2U); index++)
 8008866:	2500      	movs	r5, #0
 8008868:	2d04      	cmp	r5, #4
 800886a:	f105 0502 	add.w	r5, r5, #2
 800886e:	d0c8      	beq.n	8008802 <OV9655_SetResolution+0x6e>
 8008870:	2d05      	cmp	r5, #5
 8008872:	d1f9      	bne.n	8008868 <OV9655_SetResolution+0xd4>
 8008874:	e7c5      	b.n	8008802 <OV9655_SetResolution+0x6e>
 8008876:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8008964 <OV9655_SetResolution+0x1d0>
 800887a:	f10d 0907 	add.w	r9, sp, #7
 800887e:	f100 0a18 	add.w	sl, r0, #24
          tmp = OV9655_QVGA_QQVGA[index][1];
 8008882:	eb08 0046 	add.w	r0, r8, r6, lsl #1
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8008886:	2301      	movs	r3, #1
 8008888:	464a      	mov	r2, r9
 800888a:	f818 1016 	ldrb.w	r1, [r8, r6, lsl #1]
          tmp = OV9655_QVGA_QQVGA[index][1];
 800888e:	7845      	ldrb	r5, [r0, #1]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8008890:	4650      	mov	r0, sl
          tmp = OV9655_QVGA_QQVGA[index][1];
 8008892:	f88d 5007 	strb.w	r5, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8008896:	f000 fbd9 	bl	800904c <ov9655_write_reg>
 800889a:	1e07      	subs	r7, r0, #0
  tickstart = pObj->IO.GetTick();
 800889c:	6963      	ldr	r3, [r4, #20]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 800889e:	4683      	mov	fp, r0
 80088a0:	bf18      	it	ne
 80088a2:	2701      	movne	r7, #1
  tickstart = pObj->IO.GetTick();
 80088a4:	4798      	blx	r3
 80088a6:	4605      	mov	r5, r0
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 80088a8:	427f      	negs	r7, r7
  while((pObj->IO.GetTick() - tickstart) < Delay)
 80088aa:	6963      	ldr	r3, [r4, #20]
 80088ac:	4798      	blx	r3
 80088ae:	1b40      	subs	r0, r0, r5
 80088b0:	2801      	cmp	r0, #1
 80088b2:	d9fa      	bls.n	80088aa <OV9655_SetResolution+0x116>
      for(index=0; index<(sizeof(OV9655_QVGA_QQVGA)/2U); index++)
 80088b4:	3601      	adds	r6, #1
 80088b6:	2e91      	cmp	r6, #145	; 0x91
 80088b8:	d031      	beq.n	800891e <OV9655_SetResolution+0x18a>
        if(ret != OV9655_ERROR)
 80088ba:	f1bb 0f00 	cmp.w	fp, #0
 80088be:	d0e0      	beq.n	8008882 <OV9655_SetResolution+0xee>
      for(index=0; index<(sizeof(OV9655_QVGA_QQVGA)/2U); index++)
 80088c0:	2e90      	cmp	r6, #144	; 0x90
 80088c2:	f106 0602 	add.w	r6, r6, #2
 80088c6:	d001      	beq.n	80088cc <OV9655_SetResolution+0x138>
 80088c8:	2e91      	cmp	r6, #145	; 0x91
 80088ca:	d1f9      	bne.n	80088c0 <OV9655_SetResolution+0x12c>
      for(index=0; index<(sizeof(OV9655_QQVGA)/2U); index++)
 80088cc:	2500      	movs	r5, #0
 80088ce:	2d04      	cmp	r5, #4
 80088d0:	f105 0502 	add.w	r5, r5, #2
 80088d4:	d095      	beq.n	8008802 <OV9655_SetResolution+0x6e>
 80088d6:	2d05      	cmp	r5, #5
 80088d8:	d1f9      	bne.n	80088ce <OV9655_SetResolution+0x13a>
 80088da:	e792      	b.n	8008802 <OV9655_SetResolution+0x6e>
      for(index=0; index< (sizeof(OV9655_QVGA)/2U); index++)
 80088dc:	2500      	movs	r5, #0
          tmp = OV9655_QVGA[index][1];
 80088de:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8008968 <OV9655_SetResolution+0x1d4>
        if(ret != OV9655_ERROR)
 80088e2:	2f00      	cmp	r7, #0
 80088e4:	d1c0      	bne.n	8008868 <OV9655_SetResolution+0xd4>
          tmp = OV9655_QVGA[index][1];
 80088e6:	eb08 0045 	add.w	r0, r8, r5, lsl #1
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA[index][0], &tmp, 1) != OV9655_OK)
 80088ea:	2301      	movs	r3, #1
 80088ec:	464a      	mov	r2, r9
 80088ee:	f818 1015 	ldrb.w	r1, [r8, r5, lsl #1]
          tmp = OV9655_QVGA[index][1];
 80088f2:	7846      	ldrb	r6, [r0, #1]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA[index][0], &tmp, 1) != OV9655_OK)
 80088f4:	4650      	mov	r0, sl
          tmp = OV9655_QVGA[index][1];
 80088f6:	f88d 6007 	strb.w	r6, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA[index][0], &tmp, 1) != OV9655_OK)
 80088fa:	f000 fba7 	bl	800904c <ov9655_write_reg>
 80088fe:	3800      	subs	r0, #0
  tickstart = pObj->IO.GetTick();
 8008900:	6963      	ldr	r3, [r4, #20]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA[index][0], &tmp, 1) != OV9655_OK)
 8008902:	bf18      	it	ne
 8008904:	2001      	movne	r0, #1
 8008906:	4247      	negs	r7, r0
  tickstart = pObj->IO.GetTick();
 8008908:	4798      	blx	r3
 800890a:	4606      	mov	r6, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 800890c:	6963      	ldr	r3, [r4, #20]
 800890e:	4798      	blx	r3
 8008910:	1b80      	subs	r0, r0, r6
 8008912:	2801      	cmp	r0, #1
 8008914:	d9fa      	bls.n	800890c <OV9655_SetResolution+0x178>
      for(index=0; index< (sizeof(OV9655_QVGA)/2U); index++)
 8008916:	3501      	adds	r5, #1
 8008918:	2d05      	cmp	r5, #5
 800891a:	d1e2      	bne.n	80088e2 <OV9655_SetResolution+0x14e>
 800891c:	e773      	b.n	8008806 <OV9655_SetResolution+0x72>
      for(index=0; index<(sizeof(OV9655_QQVGA)/2U); index++)
 800891e:	2500      	movs	r5, #0
          tmp = OV9655_QQVGA[index][1];
 8008920:	f8df 8048 	ldr.w	r8, [pc, #72]	; 800896c <OV9655_SetResolution+0x1d8>
        if(ret != OV9655_ERROR)
 8008924:	2f00      	cmp	r7, #0
 8008926:	d1d2      	bne.n	80088ce <OV9655_SetResolution+0x13a>
          tmp = OV9655_QQVGA[index][1];
 8008928:	eb08 0045 	add.w	r0, r8, r5, lsl #1
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 800892c:	2301      	movs	r3, #1
 800892e:	464a      	mov	r2, r9
 8008930:	f818 1015 	ldrb.w	r1, [r8, r5, lsl #1]
          tmp = OV9655_QQVGA[index][1];
 8008934:	7846      	ldrb	r6, [r0, #1]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8008936:	4650      	mov	r0, sl
          tmp = OV9655_QQVGA[index][1];
 8008938:	f88d 6007 	strb.w	r6, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 800893c:	f000 fb86 	bl	800904c <ov9655_write_reg>
 8008940:	3800      	subs	r0, #0
  tickstart = pObj->IO.GetTick();
 8008942:	6963      	ldr	r3, [r4, #20]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8008944:	bf18      	it	ne
 8008946:	2001      	movne	r0, #1
 8008948:	4247      	negs	r7, r0
  tickstart = pObj->IO.GetTick();
 800894a:	4798      	blx	r3
 800894c:	4606      	mov	r6, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 800894e:	6963      	ldr	r3, [r4, #20]
 8008950:	4798      	blx	r3
 8008952:	1b80      	subs	r0, r0, r6
 8008954:	2801      	cmp	r0, #1
 8008956:	d9fa      	bls.n	800894e <OV9655_SetResolution+0x1ba>
      for(index=0; index<(sizeof(OV9655_QQVGA)/2U); index++)
 8008958:	3501      	adds	r5, #1
 800895a:	2d05      	cmp	r5, #5
 800895c:	d1e2      	bne.n	8008924 <OV9655_SetResolution+0x190>
 800895e:	e752      	b.n	8008806 <OV9655_SetResolution+0x72>
 8008960:	0809787c 	.word	0x0809787c
 8008964:	08097758 	.word	0x08097758
 8008968:	0809774c 	.word	0x0809774c
 800896c:	08097740 	.word	0x08097740

08008970 <OV9655_SetColorEffect>:
{
 8008970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008974:	3901      	subs	r1, #1
 8008976:	b084      	sub	sp, #16
 8008978:	9001      	str	r0, [sp, #4]
 800897a:	291f      	cmp	r1, #31
 800897c:	d821      	bhi.n	80089c2 <OV9655_SetColorEffect+0x52>
 800897e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8008982:	0073      	.short	0x0073
 8008984:	002000bd 	.word	0x002000bd
 8008988:	002000fa 	.word	0x002000fa
 800898c:	00200020 	.word	0x00200020
 8008990:	00200146 	.word	0x00200146
 8008994:	00200020 	.word	0x00200020
 8008998:	00200020 	.word	0x00200020
 800899c:	00200020 	.word	0x00200020
 80089a0:	00200165 	.word	0x00200165
 80089a4:	00200020 	.word	0x00200020
 80089a8:	00200020 	.word	0x00200020
 80089ac:	00200020 	.word	0x00200020
 80089b0:	00200020 	.word	0x00200020
 80089b4:	00200020 	.word	0x00200020
 80089b8:	00200020 	.word	0x00200020
 80089bc:	00200020 	.word	0x00200020
 80089c0:	019f      	.short	0x019f
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80089c2:	f100 0918 	add.w	r9, r0, #24
    tmp = 0xCC;
 80089c6:	24cc      	movs	r4, #204	; 0xcc
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80089c8:	2301      	movs	r3, #1
 80089ca:	f10d 020f 	add.w	r2, sp, #15
 80089ce:	213a      	movs	r1, #58	; 0x3a
 80089d0:	4648      	mov	r0, r9
    tmp = 0x80;
 80089d2:	f04f 0a80 	mov.w	sl, #128	; 0x80
    tmp = 0xCC;
 80089d6:	f88d 400f 	strb.w	r4, [sp, #15]
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80089da:	f000 fb37 	bl	800904c <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 80089de:	f10d 020f 	add.w	r2, sp, #15
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80089e2:	4607      	mov	r7, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 80089e4:	2301      	movs	r3, #1
 80089e6:	214f      	movs	r1, #79	; 0x4f
 80089e8:	4648      	mov	r0, r9
    tmp = 0x80;
 80089ea:	f88d a00f 	strb.w	sl, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 80089ee:	f000 fb2d 	bl	800904c <ov9655_write_reg>
 80089f2:	4680      	mov	r8, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 80089f4:	f10d 020f 	add.w	r2, sp, #15
 80089f8:	2301      	movs	r3, #1
 80089fa:	2150      	movs	r1, #80	; 0x50
 80089fc:	4648      	mov	r0, r9
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 80089fe:	44b8      	add	r8, r7
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8008a00:	f000 fb24 	bl	800904c <ov9655_write_reg>
    tmp = 0x00;
 8008a04:	f04f 0c00 	mov.w	ip, #0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8008a08:	4606      	mov	r6, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8008a0a:	f10d 020f 	add.w	r2, sp, #15
 8008a0e:	2301      	movs	r3, #1
 8008a10:	2151      	movs	r1, #81	; 0x51
 8008a12:	4648      	mov	r0, r9
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8008a14:	44b0      	add	r8, r6
    tmp = 0x00;
 8008a16:	f88d c00f 	strb.w	ip, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8008a1a:	f000 fb17 	bl	800904c <ov9655_write_reg>
 8008a1e:	4606      	mov	r6, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8008a20:	f10d 020f 	add.w	r2, sp, #15
 8008a24:	4648      	mov	r0, r9
 8008a26:	2301      	movs	r3, #1
 8008a28:	2152      	movs	r1, #82	; 0x52
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8008a2a:	4446      	add	r6, r8
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8008a2c:	f000 fb0e 	bl	800904c <ov9655_write_reg>
 8008a30:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8008a32:	f10d 020f 	add.w	r2, sp, #15
 8008a36:	4648      	mov	r0, r9
 8008a38:	2301      	movs	r3, #1
 8008a3a:	2153      	movs	r1, #83	; 0x53
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8008a3c:	4426      	add	r6, r4
    tmp = 0x80;
 8008a3e:	f88d a00f 	strb.w	sl, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8008a42:	f000 fb03 	bl	800904c <ov9655_write_reg>
 8008a46:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 8008a48:	f10d 020f 	add.w	r2, sp, #15
 8008a4c:	4648      	mov	r0, r9
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8008a4e:	4434      	add	r4, r6
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 8008a50:	2301      	movs	r3, #1
 8008a52:	2154      	movs	r1, #84	; 0x54
 8008a54:	f000 fafa 	bl	800904c <ov9655_write_reg>
 8008a58:	4420      	add	r0, r4
  if(ret != OV9655_OK)
 8008a5a:	3800      	subs	r0, #0
 8008a5c:	bf18      	it	ne
 8008a5e:	2001      	movne	r0, #1
}
 8008a60:	4240      	negs	r0, r0
 8008a62:	b004      	add	sp, #16
 8008a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8008a68:	f100 0918 	add.w	r9, r0, #24
    tmp = 0xCC;
 8008a6c:	24cc      	movs	r4, #204	; 0xcc
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8008a6e:	2301      	movs	r3, #1
 8008a70:	f10d 020f 	add.w	r2, sp, #15
 8008a74:	213a      	movs	r1, #58	; 0x3a
    tmp = 0xCC;
 8008a76:	f88d 400f 	strb.w	r4, [sp, #15]
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8008a7a:	4648      	mov	r0, r9
    tmp = 0x00;
 8008a7c:	2400      	movs	r4, #0
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8008a7e:	f000 fae5 	bl	800904c <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8008a82:	f10d 020f 	add.w	r2, sp, #15
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8008a86:	9001      	str	r0, [sp, #4]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8008a88:	2301      	movs	r3, #1
 8008a8a:	214f      	movs	r1, #79	; 0x4f
 8008a8c:	4648      	mov	r0, r9
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8008a8e:	9f01      	ldr	r7, [sp, #4]
    tmp = 0x60;
 8008a90:	2660      	movs	r6, #96	; 0x60
    tmp = 0x00;
 8008a92:	f88d 400f 	strb.w	r4, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8008a96:	f000 fad9 	bl	800904c <ov9655_write_reg>
 8008a9a:	4680      	mov	r8, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8008a9c:	f10d 020f 	add.w	r2, sp, #15
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	2150      	movs	r1, #80	; 0x50
 8008aa4:	4648      	mov	r0, r9
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8008aa6:	44b8      	add	r8, r7
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8008aa8:	f000 fad0 	bl	800904c <ov9655_write_reg>
 8008aac:	4607      	mov	r7, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8008aae:	f10d 020f 	add.w	r2, sp, #15
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	2151      	movs	r1, #81	; 0x51
 8008ab6:	4648      	mov	r0, r9
 8008ab8:	f000 fac8 	bl	800904c <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8008abc:	4447      	add	r7, r8
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8008abe:	4605      	mov	r5, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8008ac0:	f10d 020f 	add.w	r2, sp, #15
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	2152      	movs	r1, #82	; 0x52
 8008ac8:	4648      	mov	r0, r9
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8008aca:	442f      	add	r7, r5
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8008acc:	f000 fabe 	bl	800904c <ov9655_write_reg>
 8008ad0:	4605      	mov	r5, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8008ad2:	f10d 020f 	add.w	r2, sp, #15
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	2153      	movs	r1, #83	; 0x53
 8008ada:	4648      	mov	r0, r9
 8008adc:	f000 fab6 	bl	800904c <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8008ae0:	443d      	add	r5, r7
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8008ae2:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 8008ae4:	f10d 020f 	add.w	r2, sp, #15
 8008ae8:	4648      	mov	r0, r9
 8008aea:	2301      	movs	r3, #1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8008aec:	442c      	add	r4, r5
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 8008aee:	2154      	movs	r1, #84	; 0x54
    tmp = 0x60;
 8008af0:	f88d 600f 	strb.w	r6, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 8008af4:	f000 faaa 	bl	800904c <ov9655_write_reg>
 8008af8:	4420      	add	r0, r4
    break;
 8008afa:	e7ae      	b.n	8008a5a <OV9655_SetColorEffect+0xea>
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8008afc:	f100 0918 	add.w	r9, r0, #24
    tmp = 0xCC;
 8008b00:	24cc      	movs	r4, #204	; 0xcc
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8008b02:	2301      	movs	r3, #1
 8008b04:	f10d 020f 	add.w	r2, sp, #15
 8008b08:	213a      	movs	r1, #58	; 0x3a
    tmp = 0xCC;
 8008b0a:	f88d 400f 	strb.w	r4, [sp, #15]
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8008b0e:	4648      	mov	r0, r9
    tmp = 0x60;
 8008b10:	2460      	movs	r4, #96	; 0x60
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8008b12:	f000 fa9b 	bl	800904c <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8008b16:	f10d 020f 	add.w	r2, sp, #15
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8008b1a:	4607      	mov	r7, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	214f      	movs	r1, #79	; 0x4f
 8008b20:	4648      	mov	r0, r9
    tmp = 0x60;
 8008b22:	f88d 400f 	strb.w	r4, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8008b26:	f000 fa91 	bl	800904c <ov9655_write_reg>
 8008b2a:	4680      	mov	r8, r0
    tmp = 0x00;
 8008b2c:	2400      	movs	r4, #0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8008b2e:	f10d 020f 	add.w	r2, sp, #15
 8008b32:	4648      	mov	r0, r9
 8008b34:	2301      	movs	r3, #1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8008b36:	44b8      	add	r8, r7
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8008b38:	2150      	movs	r1, #80	; 0x50
    tmp = 0x00;
 8008b3a:	f88d 400f 	strb.w	r4, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8008b3e:	f000 fa85 	bl	800904c <ov9655_write_reg>
 8008b42:	4606      	mov	r6, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8008b44:	f10d 020f 	add.w	r2, sp, #15
 8008b48:	2301      	movs	r3, #1
 8008b4a:	2151      	movs	r1, #81	; 0x51
 8008b4c:	4648      	mov	r0, r9
 8008b4e:	f000 fa7d 	bl	800904c <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8008b52:	44b0      	add	r8, r6
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8008b54:	4606      	mov	r6, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8008b56:	f10d 020f 	add.w	r2, sp, #15
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	2152      	movs	r1, #82	; 0x52
 8008b5e:	4648      	mov	r0, r9
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8008b60:	4446      	add	r6, r8
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8008b62:	f000 fa73 	bl	800904c <ov9655_write_reg>
 8008b66:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8008b68:	f10d 020f 	add.w	r2, sp, #15
 8008b6c:	4648      	mov	r0, r9
 8008b6e:	2301      	movs	r3, #1
 8008b70:	2153      	movs	r1, #83	; 0x53
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8008b72:	4426      	add	r6, r4
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8008b74:	e765      	b.n	8008a42 <OV9655_SetColorEffect+0xd2>
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8008b76:	f100 0a18 	add.w	sl, r0, #24
    tmp = 0xCC;
 8008b7a:	24cc      	movs	r4, #204	; 0xcc
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	f10d 020f 	add.w	r2, sp, #15
 8008b82:	213a      	movs	r1, #58	; 0x3a
    tmp = 0x00;
 8008b84:	f04f 0900 	mov.w	r9, #0
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8008b88:	4650      	mov	r0, sl
    tmp = 0xCC;
 8008b8a:	f88d 400f 	strb.w	r4, [sp, #15]
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8008b8e:	f000 fa5d 	bl	800904c <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8008b92:	f10d 020f 	add.w	r2, sp, #15
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8008b96:	4607      	mov	r7, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8008b98:	2301      	movs	r3, #1
 8008b9a:	214f      	movs	r1, #79	; 0x4f
 8008b9c:	4650      	mov	r0, sl
    tmp = 0x00;
 8008b9e:	f88d 900f 	strb.w	r9, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8008ba2:	f000 fa53 	bl	800904c <ov9655_write_reg>
 8008ba6:	4680      	mov	r8, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8008ba8:	f10d 020f 	add.w	r2, sp, #15
 8008bac:	2301      	movs	r3, #1
 8008bae:	2150      	movs	r1, #80	; 0x50
 8008bb0:	4650      	mov	r0, sl
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8008bb2:	44b8      	add	r8, r7
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8008bb4:	f000 fa4a 	bl	800904c <ov9655_write_reg>
 8008bb8:	4606      	mov	r6, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8008bba:	f10d 020f 	add.w	r2, sp, #15
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	2151      	movs	r1, #81	; 0x51
 8008bc2:	4650      	mov	r0, sl
 8008bc4:	f000 fa42 	bl	800904c <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8008bc8:	44b0      	add	r8, r6
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8008bca:	4606      	mov	r6, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8008bcc:	f10d 020f 	add.w	r2, sp, #15
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	2152      	movs	r1, #82	; 0x52
 8008bd4:	4650      	mov	r0, sl
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8008bd6:	4446      	add	r6, r8
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8008bd8:	f000 fa38 	bl	800904c <ov9655_write_reg>
    tmp = 0x80;
 8008bdc:	2780      	movs	r7, #128	; 0x80
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8008bde:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8008be0:	f10d 020f 	add.w	r2, sp, #15
 8008be4:	2301      	movs	r3, #1
 8008be6:	2153      	movs	r1, #83	; 0x53
 8008be8:	4650      	mov	r0, sl
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8008bea:	4426      	add	r6, r4
    tmp = 0x80;
 8008bec:	f88d 700f 	strb.w	r7, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8008bf0:	f000 fa2c 	bl	800904c <ov9655_write_reg>
 8008bf4:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 8008bf6:	f10d 020f 	add.w	r2, sp, #15
 8008bfa:	4650      	mov	r0, sl
 8008bfc:	2301      	movs	r3, #1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8008bfe:	4434      	add	r4, r6
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 8008c00:	2154      	movs	r1, #84	; 0x54
    tmp = 0x00;
 8008c02:	f88d 900f 	strb.w	r9, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 8008c06:	f000 fa21 	bl	800904c <ov9655_write_reg>
 8008c0a:	4420      	add	r0, r4
    break;
 8008c0c:	e725      	b.n	8008a5a <OV9655_SetColorEffect+0xea>
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8008c0e:	f100 0918 	add.w	r9, r0, #24
    tmp = 0xCC;
 8008c12:	24cc      	movs	r4, #204	; 0xcc
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8008c14:	2301      	movs	r3, #1
 8008c16:	f10d 020f 	add.w	r2, sp, #15
 8008c1a:	213a      	movs	r1, #58	; 0x3a
    tmp = 0xCC;
 8008c1c:	f88d 400f 	strb.w	r4, [sp, #15]
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8008c20:	4648      	mov	r0, r9
    tmp = 0x00;
 8008c22:	2400      	movs	r4, #0
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8008c24:	f000 fa12 	bl	800904c <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8008c28:	f10d 020f 	add.w	r2, sp, #15
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8008c2c:	4607      	mov	r7, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8008c2e:	2301      	movs	r3, #1
 8008c30:	214f      	movs	r1, #79	; 0x4f
 8008c32:	4648      	mov	r0, r9
    tmp = 0x00;
 8008c34:	f88d 400f 	strb.w	r4, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8008c38:	f000 fa08 	bl	800904c <ov9655_write_reg>
 8008c3c:	4680      	mov	r8, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8008c3e:	f10d 020f 	add.w	r2, sp, #15
 8008c42:	4648      	mov	r0, r9
 8008c44:	2301      	movs	r3, #1
 8008c46:	2150      	movs	r1, #80	; 0x50
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8008c48:	44b8      	add	r8, r7
 8008c4a:	e778      	b.n	8008b3e <OV9655_SetColorEffect+0x1ce>
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8008c4c:	f100 0918 	add.w	r9, r0, #24
    tmp = 0xCC;
 8008c50:	24cc      	movs	r4, #204	; 0xcc
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8008c52:	2301      	movs	r3, #1
 8008c54:	f10d 020f 	add.w	r2, sp, #15
 8008c58:	213a      	movs	r1, #58	; 0x3a
 8008c5a:	4648      	mov	r0, r9
    tmp = 0x00;
 8008c5c:	f04f 0a00 	mov.w	sl, #0
    tmp = 0xCC;
 8008c60:	f88d 400f 	strb.w	r4, [sp, #15]
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8008c64:	f000 f9f2 	bl	800904c <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8008c68:	f10d 020f 	add.w	r2, sp, #15
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8008c6c:	4607      	mov	r7, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8008c6e:	2301      	movs	r3, #1
 8008c70:	214f      	movs	r1, #79	; 0x4f
 8008c72:	4648      	mov	r0, r9
    tmp = 0x00;
 8008c74:	f88d a00f 	strb.w	sl, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8008c78:	f000 f9e8 	bl	800904c <ov9655_write_reg>
 8008c7c:	4680      	mov	r8, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8008c7e:	f10d 020f 	add.w	r2, sp, #15
 8008c82:	2301      	movs	r3, #1
 8008c84:	2150      	movs	r1, #80	; 0x50
 8008c86:	4648      	mov	r0, r9
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8008c88:	44b8      	add	r8, r7
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8008c8a:	f000 f9df 	bl	800904c <ov9655_write_reg>
    tmp = 0x20;
 8008c8e:	f04f 0c20 	mov.w	ip, #32
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8008c92:	4606      	mov	r6, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8008c94:	f10d 020f 	add.w	r2, sp, #15
 8008c98:	2301      	movs	r3, #1
 8008c9a:	2151      	movs	r1, #81	; 0x51
 8008c9c:	4648      	mov	r0, r9
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8008c9e:	44b0      	add	r8, r6
    tmp = 0x20;
 8008ca0:	f88d c00f 	strb.w	ip, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8008ca4:	f000 f9d2 	bl	800904c <ov9655_write_reg>
    tmp = 0xF0;
 8008ca8:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8008cac:	4606      	mov	r6, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8008cae:	f10d 020f 	add.w	r2, sp, #15
 8008cb2:	4648      	mov	r0, r9
 8008cb4:	2301      	movs	r3, #1
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8008cb6:	4446      	add	r6, r8
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8008cb8:	2152      	movs	r1, #82	; 0x52
    tmp = 0xF0;
 8008cba:	f88d c00f 	strb.w	ip, [sp, #15]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8008cbe:	e6b5      	b.n	8008a2c <OV9655_SetColorEffect+0xbc>
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8008cc0:	f100 0918 	add.w	r9, r0, #24
    tmp = 0xEC;
 8008cc4:	24ec      	movs	r4, #236	; 0xec
 8008cc6:	e67f      	b.n	80089c8 <OV9655_SetColorEffect+0x58>

08008cc8 <OV9655_SetBrightness>:
{
 8008cc8:	b570      	push	{r4, r5, r6, lr}
 8008cca:	b084      	sub	sp, #16
  const uint8_t brightness_level[] = {0xB0U, 0xB0U, 0xB0U, 0x98U, 0x00U, 0x18U, 0x30U, 0x30U, 0x30U};
 8008ccc:	4a0c      	ldr	r2, [pc, #48]	; (8008d00 <OV9655_SetBrightness+0x38>)
{
 8008cce:	4606      	mov	r6, r0
  tmp = brightness_level[Level + 4];
 8008cd0:	ab04      	add	r3, sp, #16
  const uint8_t brightness_level[] = {0xB0U, 0xB0U, 0xB0U, 0x98U, 0x00U, 0x18U, 0x30U, 0x30U, 0x30U};
 8008cd2:	ac01      	add	r4, sp, #4
  tmp = brightness_level[Level + 4];
 8008cd4:	185d      	adds	r5, r3, r1
  if(ov9655_write_reg(&pObj->Ctx, OV9655_BRIGHTNESS_ADJUSTMENT, &tmp, 1) != OV9655_OK)
 8008cd6:	2301      	movs	r3, #1
  const uint8_t brightness_level[] = {0xB0U, 0xB0U, 0xB0U, 0x98U, 0x00U, 0x18U, 0x30U, 0x30U, 0x30U};
 8008cd8:	ca07      	ldmia	r2, {r0, r1, r2}
 8008cda:	c403      	stmia	r4!, {r0, r1}
 8008cdc:	7022      	strb	r2, [r4, #0]
  if(ov9655_write_reg(&pObj->Ctx, OV9655_BRIGHTNESS_ADJUSTMENT, &tmp, 1) != OV9655_OK)
 8008cde:	f106 0018 	add.w	r0, r6, #24
  tmp = brightness_level[Level + 4];
 8008ce2:	f815 4c08 	ldrb.w	r4, [r5, #-8]
  if(ov9655_write_reg(&pObj->Ctx, OV9655_BRIGHTNESS_ADJUSTMENT, &tmp, 1) != OV9655_OK)
 8008ce6:	f10d 0203 	add.w	r2, sp, #3
 8008cea:	2155      	movs	r1, #85	; 0x55
  tmp = brightness_level[Level + 4];
 8008cec:	f88d 4003 	strb.w	r4, [sp, #3]
  if(ov9655_write_reg(&pObj->Ctx, OV9655_BRIGHTNESS_ADJUSTMENT, &tmp, 1) != OV9655_OK)
 8008cf0:	f000 f9ac 	bl	800904c <ov9655_write_reg>
 8008cf4:	3800      	subs	r0, #0
 8008cf6:	bf18      	it	ne
 8008cf8:	2001      	movne	r0, #1
}
 8008cfa:	4240      	negs	r0, r0
 8008cfc:	b004      	add	sp, #16
 8008cfe:	bd70      	pop	{r4, r5, r6, pc}
 8008d00:	08028310 	.word	0x08028310

08008d04 <OV9655_SetContrast>:
{
 8008d04:	b570      	push	{r4, r5, r6, lr}
 8008d06:	b084      	sub	sp, #16
  const uint8_t contrast_level[] = {0x30U, 0x30U, 0x30U, 0x38U, 0x40U, 0x50U, 0x60U, 0x60U, 0x60U};
 8008d08:	4a0c      	ldr	r2, [pc, #48]	; (8008d3c <OV9655_SetContrast+0x38>)
{
 8008d0a:	4606      	mov	r6, r0
  tmp = contrast_level[Level + 4];
 8008d0c:	ab04      	add	r3, sp, #16
  const uint8_t contrast_level[] = {0x30U, 0x30U, 0x30U, 0x38U, 0x40U, 0x50U, 0x60U, 0x60U, 0x60U};
 8008d0e:	ac01      	add	r4, sp, #4
  tmp = contrast_level[Level + 4];
 8008d10:	185d      	adds	r5, r3, r1
  if(ov9655_write_reg(&pObj->Ctx, OV9655_CONTRAST_COEFFICIENT_1, &tmp, 1) != OV9655_OK)
 8008d12:	2301      	movs	r3, #1
  const uint8_t contrast_level[] = {0x30U, 0x30U, 0x30U, 0x38U, 0x40U, 0x50U, 0x60U, 0x60U, 0x60U};
 8008d14:	ca07      	ldmia	r2, {r0, r1, r2}
 8008d16:	c403      	stmia	r4!, {r0, r1}
 8008d18:	7022      	strb	r2, [r4, #0]
  if(ov9655_write_reg(&pObj->Ctx, OV9655_CONTRAST_COEFFICIENT_1, &tmp, 1) != OV9655_OK)
 8008d1a:	f106 0018 	add.w	r0, r6, #24
  tmp = contrast_level[Level + 4];
 8008d1e:	f815 4c08 	ldrb.w	r4, [r5, #-8]
  if(ov9655_write_reg(&pObj->Ctx, OV9655_CONTRAST_COEFFICIENT_1, &tmp, 1) != OV9655_OK)
 8008d22:	f10d 0203 	add.w	r2, sp, #3
 8008d26:	2156      	movs	r1, #86	; 0x56
  tmp = contrast_level[Level + 4];
 8008d28:	f88d 4003 	strb.w	r4, [sp, #3]
  if(ov9655_write_reg(&pObj->Ctx, OV9655_CONTRAST_COEFFICIENT_1, &tmp, 1) != OV9655_OK)
 8008d2c:	f000 f98e 	bl	800904c <ov9655_write_reg>
 8008d30:	3800      	subs	r0, #0
 8008d32:	bf18      	it	ne
 8008d34:	2001      	movne	r0, #1
}
 8008d36:	4240      	negs	r0, r0
 8008d38:	b004      	add	sp, #16
 8008d3a:	bd70      	pop	{r4, r5, r6, pc}
 8008d3c:	08097734 	.word	0x08097734

08008d40 <OV9655_SetPixelFormat>:
  if((PixelFormat != OV9655_RGB565) && (PixelFormat != OV9655_YUV422))
 8008d40:	f031 0302 	bics.w	r3, r1, #2
{
 8008d44:	b530      	push	{r4, r5, lr}
 8008d46:	b083      	sub	sp, #12
  if((PixelFormat != OV9655_RGB565) && (PixelFormat != OV9655_YUV422))
 8008d48:	d177      	bne.n	8008e3a <OV9655_SetPixelFormat+0xfa>
  else if(ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 8008d4a:	f100 0418 	add.w	r4, r0, #24
 8008d4e:	460d      	mov	r5, r1
 8008d50:	2301      	movs	r3, #1
 8008d52:	2112      	movs	r1, #18
 8008d54:	4620      	mov	r0, r4
 8008d56:	f10d 0207 	add.w	r2, sp, #7
 8008d5a:	f000 f96f 	bl	800903c <ov9655_read_reg>
 8008d5e:	2800      	cmp	r0, #0
 8008d60:	d16b      	bne.n	8008e3a <OV9655_SetPixelFormat+0xfa>
    tmp &= ~0x03U; /* Reset Bit[0:1] corresponding to pixel format selection */
 8008d62:	f89d 3007 	ldrb.w	r3, [sp, #7]
    switch (PixelFormat)
 8008d66:	2d02      	cmp	r5, #2
    tmp &= ~0x03U; /* Reset Bit[0:1] corresponding to pixel format selection */
 8008d68:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    switch (PixelFormat)
 8008d6c:	d029      	beq.n	8008dc2 <OV9655_SetPixelFormat+0x82>
      tmp |= 0x03U;
 8008d6e:	f043 0503 	orr.w	r5, r3, #3
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 8008d72:	f10d 0207 	add.w	r2, sp, #7
 8008d76:	2301      	movs	r3, #1
 8008d78:	2112      	movs	r1, #18
 8008d7a:	4620      	mov	r0, r4
      tmp |= 0x03U;
 8008d7c:	f88d 5007 	strb.w	r5, [sp, #7]
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 8008d80:	f000 f964 	bl	800904c <ov9655_write_reg>
 8008d84:	2800      	cmp	r0, #0
 8008d86:	d158      	bne.n	8008e3a <OV9655_SetPixelFormat+0xfa>
      else if(ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 8008d88:	2301      	movs	r3, #1
 8008d8a:	f10d 0207 	add.w	r2, sp, #7
 8008d8e:	2140      	movs	r1, #64	; 0x40
 8008d90:	4620      	mov	r0, r4
 8008d92:	f000 f953 	bl	800903c <ov9655_read_reg>
 8008d96:	2800      	cmp	r0, #0
 8008d98:	d14f      	bne.n	8008e3a <OV9655_SetPixelFormat+0xfa>
        tmp |= 0x10U;
 8008d9a:	f89d 1007 	ldrb.w	r1, [sp, #7]
        if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 8008d9e:	4620      	mov	r0, r4
 8008da0:	f10d 0207 	add.w	r2, sp, #7
 8008da4:	2301      	movs	r3, #1
        tmp |= 0x10U;
 8008da6:	f041 0410 	orr.w	r4, r1, #16
        if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 8008daa:	2140      	movs	r1, #64	; 0x40
        tmp |= 0x10U;
 8008dac:	f88d 4007 	strb.w	r4, [sp, #7]
        if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 8008db0:	f000 f94c 	bl	800904c <ov9655_write_reg>
 8008db4:	3800      	subs	r0, #0
 8008db6:	bf18      	it	ne
 8008db8:	2001      	movne	r0, #1
 8008dba:	4245      	negs	r5, r0
}
 8008dbc:	4628      	mov	r0, r5
 8008dbe:	b003      	add	sp, #12
 8008dc0:	bd30      	pop	{r4, r5, pc}
      tmp |= 0x02U;
 8008dc2:	f043 0502 	orr.w	r5, r3, #2
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 8008dc6:	f10d 0207 	add.w	r2, sp, #7
 8008dca:	2301      	movs	r3, #1
 8008dcc:	2112      	movs	r1, #18
 8008dce:	4620      	mov	r0, r4
      tmp |= 0x02U;
 8008dd0:	f88d 5007 	strb.w	r5, [sp, #7]
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 8008dd4:	f000 f93a 	bl	800904c <ov9655_write_reg>
 8008dd8:	bb78      	cbnz	r0, 8008e3a <OV9655_SetPixelFormat+0xfa>
        if(ov9655_read_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1) != OV9655_OK)
 8008dda:	2301      	movs	r3, #1
 8008ddc:	f10d 0207 	add.w	r2, sp, #7
 8008de0:	213a      	movs	r1, #58	; 0x3a
 8008de2:	4620      	mov	r0, r4
 8008de4:	f000 f92a 	bl	800903c <ov9655_read_reg>
 8008de8:	bb38      	cbnz	r0, 8008e3a <OV9655_SetPixelFormat+0xfa>
          tmp &= ~(3 << 2); /* Clear bits 3:2: YUV output sequence is 0:yuyv */
 8008dea:	f89d 5007 	ldrb.w	r5, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1) != OV9655_OK)
 8008dee:	2301      	movs	r3, #1
 8008df0:	f10d 0207 	add.w	r2, sp, #7
 8008df4:	213a      	movs	r1, #58	; 0x3a
          tmp &= ~(3 << 2); /* Clear bits 3:2: YUV output sequence is 0:yuyv */
 8008df6:	f025 052c 	bic.w	r5, r5, #44	; 0x2c
          if(ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1) != OV9655_OK)
 8008dfa:	4620      	mov	r0, r4
          tmp &= ~(3 << 2); /* Clear bits 3:2: YUV output sequence is 0:yuyv */
 8008dfc:	f88d 5007 	strb.w	r5, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1) != OV9655_OK)
 8008e00:	f000 f924 	bl	800904c <ov9655_write_reg>
 8008e04:	b9c8      	cbnz	r0, 8008e3a <OV9655_SetPixelFormat+0xfa>
            if(ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 8008e06:	2301      	movs	r3, #1
 8008e08:	f10d 0207 	add.w	r2, sp, #7
 8008e0c:	2140      	movs	r1, #64	; 0x40
 8008e0e:	4620      	mov	r0, r4
 8008e10:	f000 f914 	bl	800903c <ov9655_read_reg>
 8008e14:	4605      	mov	r5, r0
 8008e16:	b9a8      	cbnz	r0, 8008e44 <OV9655_SetPixelFormat+0x104>
                tmp &= ~(3 << 4); /* Clear bits 5:4: RGB 555/565 option */
 8008e18:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008e1c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8008e20:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8008e24:	f88d 3007 	strb.w	r3, [sp, #7]
            if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 8008e28:	f10d 0207 	add.w	r2, sp, #7
 8008e2c:	4620      	mov	r0, r4
 8008e2e:	2301      	movs	r3, #1
 8008e30:	2140      	movs	r1, #64	; 0x40
 8008e32:	f000 f90b 	bl	800904c <ov9655_write_reg>
 8008e36:	2800      	cmp	r0, #0
 8008e38:	d0c0      	beq.n	8008dbc <OV9655_SetPixelFormat+0x7c>
              ret = OV9655_ERROR;
 8008e3a:	f04f 35ff 	mov.w	r5, #4294967295
}
 8008e3e:	4628      	mov	r0, r5
 8008e40:	b003      	add	sp, #12
 8008e42:	bd30      	pop	{r4, r5, pc}
              ret = OV9655_ERROR;
 8008e44:	f04f 35ff 	mov.w	r5, #4294967295
 8008e48:	e7ee      	b.n	8008e28 <OV9655_SetPixelFormat+0xe8>
 8008e4a:	bf00      	nop

08008e4c <OV9655_GetResolution>:
{
 8008e4c:	b510      	push	{r4, lr}
 8008e4e:	b082      	sub	sp, #8
 8008e50:	460c      	mov	r4, r1
  if(ov9655_read_reg(&pObj->Ctx, OV9655_HORIZONTAL_FRAME_CTRL, &tmp, 1) != OV9655_OK)
 8008e52:	2301      	movs	r3, #1
 8008e54:	3018      	adds	r0, #24
 8008e56:	f10d 0207 	add.w	r2, sp, #7
 8008e5a:	2132      	movs	r1, #50	; 0x32
 8008e5c:	f000 f8ee 	bl	800903c <ov9655_read_reg>
 8008e60:	b938      	cbnz	r0, 8008e72 <OV9655_GetResolution+0x26>
    switch (tmp)
 8008e62:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008e66:	2ba4      	cmp	r3, #164	; 0xa4
 8008e68:	d007      	beq.n	8008e7a <OV9655_GetResolution+0x2e>
 8008e6a:	2bff      	cmp	r3, #255	; 0xff
 8008e6c:	d00c      	beq.n	8008e88 <OV9655_GetResolution+0x3c>
 8008e6e:	2b12      	cmp	r3, #18
 8008e70:	d006      	beq.n	8008e80 <OV9655_GetResolution+0x34>
    ret = OV9655_ERROR;
 8008e72:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008e76:	b002      	add	sp, #8
 8008e78:	bd10      	pop	{r4, pc}
      *Resolution = OV9655_R160x120;
 8008e7a:	6020      	str	r0, [r4, #0]
}
 8008e7c:	b002      	add	sp, #8
 8008e7e:	bd10      	pop	{r4, pc}
      *Resolution = OV9655_R320x240;
 8008e80:	2301      	movs	r3, #1
 8008e82:	6023      	str	r3, [r4, #0]
}
 8008e84:	b002      	add	sp, #8
 8008e86:	bd10      	pop	{r4, pc}
      *Resolution = OV9655_R640x480;
 8008e88:	2303      	movs	r3, #3
 8008e8a:	6023      	str	r3, [r4, #0]
}
 8008e8c:	b002      	add	sp, #8
 8008e8e:	bd10      	pop	{r4, pc}

08008e90 <OV9655_ReadID>:
{
 8008e90:	b530      	push	{r4, r5, lr}
  pObj->IO.Init();
 8008e92:	4604      	mov	r4, r0
{
 8008e94:	b083      	sub	sp, #12
 8008e96:	460d      	mov	r5, r1
  pObj->IO.Init();
 8008e98:	f854 3b18 	ldr.w	r3, [r4], #24
 8008e9c:	4798      	blx	r3
    if(ov9655_read_reg(&pObj->Ctx, OV9655_PID_NUMBER_HIGH, &tmp, 1)!= OV9655_OK)
 8008e9e:	f10d 0207 	add.w	r2, sp, #7
 8008ea2:	4620      	mov	r0, r4
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	210a      	movs	r1, #10
 8008ea8:	f000 f8c8 	bl	800903c <ov9655_read_reg>
 8008eac:	b990      	cbnz	r0, 8008ed4 <OV9655_ReadID+0x44>
      *Id = (uint32_t)tmp << 8U;
 8008eae:	f89d 1007 	ldrb.w	r1, [sp, #7]
      if(ov9655_read_reg(&pObj->Ctx, OV9655_PID_NUMBER_LOW, &tmp, 1)!= OV9655_OK)
 8008eb2:	4620      	mov	r0, r4
 8008eb4:	f10d 0207 	add.w	r2, sp, #7
 8008eb8:	2301      	movs	r3, #1
      *Id = (uint32_t)tmp << 8U;
 8008eba:	020c      	lsls	r4, r1, #8
      if(ov9655_read_reg(&pObj->Ctx, OV9655_PID_NUMBER_LOW, &tmp, 1)!= OV9655_OK)
 8008ebc:	210b      	movs	r1, #11
      *Id = (uint32_t)tmp << 8U;
 8008ebe:	602c      	str	r4, [r5, #0]
      if(ov9655_read_reg(&pObj->Ctx, OV9655_PID_NUMBER_LOW, &tmp, 1)!= OV9655_OK)
 8008ec0:	f000 f8bc 	bl	800903c <ov9655_read_reg>
 8008ec4:	b930      	cbnz	r0, 8008ed4 <OV9655_ReadID+0x44>
        *Id |= tmp;
 8008ec6:	682b      	ldr	r3, [r5, #0]
 8008ec8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	602b      	str	r3, [r5, #0]
}
 8008ed0:	b003      	add	sp, #12
 8008ed2:	bd30      	pop	{r4, r5, pc}
      ret = OV9655_ERROR;
 8008ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ed8:	e7fa      	b.n	8008ed0 <OV9655_ReadID+0x40>
 8008eda:	bf00      	nop

08008edc <OV9655_MirrorFlipConfig>:
  if(Config > OV9655_MIRROR_FLIP)
 8008edc:	2903      	cmp	r1, #3
 8008ede:	d824      	bhi.n	8008f2a <OV9655_MirrorFlipConfig+0x4e>
    if(ov9655_read_reg(&pObj->Ctx, OV9655_MIRROR_VFLIP, &tmp, 1) != OV9655_OK)
 8008ee0:	2301      	movs	r3, #1
{
 8008ee2:	b570      	push	{r4, r5, r6, lr}
    if(ov9655_read_reg(&pObj->Ctx, OV9655_MIRROR_VFLIP, &tmp, 1) != OV9655_OK)
 8008ee4:	f100 0418 	add.w	r4, r0, #24
{
 8008ee8:	b082      	sub	sp, #8
 8008eea:	460e      	mov	r6, r1
    if(ov9655_read_reg(&pObj->Ctx, OV9655_MIRROR_VFLIP, &tmp, 1) != OV9655_OK)
 8008eec:	211e      	movs	r1, #30
 8008eee:	4620      	mov	r0, r4
 8008ef0:	f10d 0207 	add.w	r2, sp, #7
 8008ef4:	f000 f8a2 	bl	800903c <ov9655_read_reg>
 8008ef8:	b9a0      	cbnz	r0, 8008f24 <OV9655_MirrorFlipConfig+0x48>
      tmp &= ~(3U << 4U);    /* Clear Bit[5:4] Mirror/VFlip */
 8008efa:	f89d 5007 	ldrb.w	r5, [sp, #7]
      if(ov9655_write_reg(&pObj->Ctx, OV9655_MIRROR_VFLIP, &tmp, 1) != OV9655_OK)
 8008efe:	4620      	mov	r0, r4
 8008f00:	f10d 0207 	add.w	r2, sp, #7
 8008f04:	2301      	movs	r3, #1
      tmp &= ~(3U << 4U);    /* Clear Bit[5:4] Mirror/VFlip */
 8008f06:	f025 0530 	bic.w	r5, r5, #48	; 0x30
      if(ov9655_write_reg(&pObj->Ctx, OV9655_MIRROR_VFLIP, &tmp, 1) != OV9655_OK)
 8008f0a:	211e      	movs	r1, #30
      tmp |= (Config << 4U); /* Configure Bit[5:4] Mirror/VFlip */
 8008f0c:	ea45 1406 	orr.w	r4, r5, r6, lsl #4
 8008f10:	f88d 4007 	strb.w	r4, [sp, #7]
      if(ov9655_write_reg(&pObj->Ctx, OV9655_MIRROR_VFLIP, &tmp, 1) != OV9655_OK)
 8008f14:	f000 f89a 	bl	800904c <ov9655_write_reg>
 8008f18:	3800      	subs	r0, #0
 8008f1a:	bf18      	it	ne
 8008f1c:	2001      	movne	r0, #1
 8008f1e:	4240      	negs	r0, r0
}
 8008f20:	b002      	add	sp, #8
 8008f22:	bd70      	pop	{r4, r5, r6, pc}
    ret = OV9655_ERROR;
 8008f24:	f04f 30ff 	mov.w	r0, #4294967295
 8008f28:	e7fa      	b.n	8008f20 <OV9655_MirrorFlipConfig+0x44>
 8008f2a:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008f2e:	4770      	bx	lr

08008f30 <OV9655_NightModeConfig>:
{
 8008f30:	b530      	push	{r4, r5, lr}
  if(ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL11, &tmp, 1) != OV9655_OK)
 8008f32:	f100 0418 	add.w	r4, r0, #24
{
 8008f36:	b083      	sub	sp, #12
 8008f38:	460d      	mov	r5, r1
  if(ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL11, &tmp, 1) != OV9655_OK)
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	f10d 0207 	add.w	r2, sp, #7
 8008f40:	213b      	movs	r1, #59	; 0x3b
 8008f42:	4620      	mov	r0, r4
 8008f44:	f000 f87a 	bl	800903c <ov9655_read_reg>
 8008f48:	b9b0      	cbnz	r0, 8008f78 <OV9655_NightModeConfig+0x48>
    if(Cmd == NIGHT_MODE_ENABLE)
 8008f4a:	2d01      	cmp	r5, #1
      tmp |= 0x80U;
 8008f4c:	f89d 5007 	ldrb.w	r5, [sp, #7]
    if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL11 ,&tmp, 1) != OV9655_OK)
 8008f50:	f10d 0207 	add.w	r2, sp, #7
 8008f54:	4620      	mov	r0, r4
      tmp |= 0x80U;
 8008f56:	bf0c      	ite	eq
 8008f58:	f045 0580 	orreq.w	r5, r5, #128	; 0x80
      tmp &= 0x7FU;
 8008f5c:	f005 057f 	andne.w	r5, r5, #127	; 0x7f
    if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL11 ,&tmp, 1) != OV9655_OK)
 8008f60:	2301      	movs	r3, #1
 8008f62:	213b      	movs	r1, #59	; 0x3b
 8008f64:	f88d 5007 	strb.w	r5, [sp, #7]
 8008f68:	f000 f870 	bl	800904c <ov9655_write_reg>
 8008f6c:	3800      	subs	r0, #0
 8008f6e:	bf18      	it	ne
 8008f70:	2001      	movne	r0, #1
 8008f72:	4240      	negs	r0, r0
}
 8008f74:	b003      	add	sp, #12
 8008f76:	bd30      	pop	{r4, r5, pc}
    ret = OV9655_ERROR;
 8008f78:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8008f7c:	e7fa      	b.n	8008f74 <OV9655_NightModeConfig+0x44>
 8008f7e:	bf00      	nop

08008f80 <OV9655_Init>:
  if(pObj->IsInitialized == 0U)
 8008f80:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8008f84:	bb5b      	cbnz	r3, 8008fde <OV9655_Init+0x5e>
    if((Resolution > OV9655_R640x480) || ((PixelFormat != OV9655_RGB565) && (PixelFormat != OV9655_YUV422)))
 8008f86:	2903      	cmp	r1, #3
{
 8008f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f8a:	460e      	mov	r6, r1
 8008f8c:	b083      	sub	sp, #12
    if((Resolution > OV9655_R640x480) || ((PixelFormat != OV9655_RGB565) && (PixelFormat != OV9655_YUV422)))
 8008f8e:	d828      	bhi.n	8008fe2 <OV9655_Init+0x62>
 8008f90:	f032 0302 	bics.w	r3, r2, #2
 8008f94:	4617      	mov	r7, r2
 8008f96:	d124      	bne.n	8008fe2 <OV9655_Init+0x62>
      tmp = 0x80U;
 8008f98:	2580      	movs	r5, #128	; 0x80
 8008f9a:	4604      	mov	r4, r0
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	f10d 0207 	add.w	r2, sp, #7
 8008fa2:	2112      	movs	r1, #18
 8008fa4:	3018      	adds	r0, #24
      tmp = 0x80U;
 8008fa6:	f88d 5007 	strb.w	r5, [sp, #7]
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 8008faa:	f000 f84f 	bl	800904c <ov9655_write_reg>
 8008fae:	b9c0      	cbnz	r0, 8008fe2 <OV9655_Init+0x62>
  tickstart = pObj->IO.GetTick();
 8008fb0:	6963      	ldr	r3, [r4, #20]
 8008fb2:	4798      	blx	r3
 8008fb4:	4605      	mov	r5, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8008fb6:	6963      	ldr	r3, [r4, #20]
 8008fb8:	4798      	blx	r3
 8008fba:	1b43      	subs	r3, r0, r5
 8008fbc:	2bc7      	cmp	r3, #199	; 0xc7
 8008fbe:	d9fa      	bls.n	8008fb6 <OV9655_Init+0x36>
        if(OV9655_SetResolution(pObj, Resolution)!= OV9655_OK)
 8008fc0:	4631      	mov	r1, r6
 8008fc2:	4620      	mov	r0, r4
 8008fc4:	f7ff fbe6 	bl	8008794 <OV9655_SetResolution>
 8008fc8:	b958      	cbnz	r0, 8008fe2 <OV9655_Init+0x62>
        else if(OV9655_SetPixelFormat(pObj, PixelFormat)!= OV9655_OK)
 8008fca:	4639      	mov	r1, r7
 8008fcc:	4620      	mov	r0, r4
 8008fce:	f7ff feb7 	bl	8008d40 <OV9655_SetPixelFormat>
 8008fd2:	b930      	cbnz	r0, 8008fe2 <OV9655_Init+0x62>
          pObj->IsInitialized = 1U;
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8008fda:	b003      	add	sp, #12
 8008fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  int32_t ret = OV9655_OK;
 8008fde:	2000      	movs	r0, #0
}
 8008fe0:	4770      	bx	lr
      ret = OV9655_ERROR;
 8008fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8008fe6:	e7f8      	b.n	8008fda <OV9655_Init+0x5a>

08008fe8 <OV9655_SetHueDegree>:
 8008fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fec:	4770      	bx	lr
 8008fee:	bf00      	nop

08008ff0 <OV9655_ZoomConfig>:
 8008ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ff4:	4770      	bx	lr
 8008ff6:	bf00      	nop

08008ff8 <OV9655_RegisterBusIO>:
  if (pObj == NULL)
 8008ff8:	b1c0      	cbz	r0, 800902c <OV9655_RegisterBusIO+0x34>
    pObj->IO.WriteReg  = pIO->WriteReg;
 8008ffa:	68ca      	ldr	r2, [r1, #12]
{
 8008ffc:	b470      	push	{r4, r5, r6}
    pObj->IO.DeInit    = pIO->DeInit;
 8008ffe:	e9d1 3400 	ldrd	r3, r4, [r1]
    pObj->IO.Address   = pIO->Address;
 8009002:	890e      	ldrh	r6, [r1, #8]
    pObj->IO.DeInit    = pIO->DeInit;
 8009004:	e9c0 3400 	strd	r3, r4, [r0]
    pObj->IO.GetTick   = pIO->GetTick;
 8009008:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
    pObj->Ctx.ReadReg  = OV9655_ReadRegWrap;
 800900c:	4909      	ldr	r1, [pc, #36]	; (8009034 <OV9655_RegisterBusIO+0x3c>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 800900e:	60c2      	str	r2, [r0, #12]
    pObj->Ctx.WriteReg = OV9655_WriteRegWrap;
 8009010:	4a09      	ldr	r2, [pc, #36]	; (8009038 <OV9655_RegisterBusIO+0x40>)
    pObj->IO.Address   = pIO->Address;
 8009012:	8106      	strh	r6, [r0, #8]
    pObj->Ctx.WriteReg = OV9655_WriteRegWrap;
 8009014:	6182      	str	r2, [r0, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 8009016:	e9c0 5404 	strd	r5, r4, [r0, #16]
    pObj->Ctx.ReadReg  = OV9655_ReadRegWrap;
 800901a:	e9c0 1007 	strd	r1, r0, [r0, #28]
    if(pObj->IO.Init != NULL)
 800901e:	b10b      	cbz	r3, 8009024 <OV9655_RegisterBusIO+0x2c>
}
 8009020:	bc70      	pop	{r4, r5, r6}
      ret = pObj->IO.Init();
 8009022:	4718      	bx	r3
}
 8009024:	f04f 30ff 	mov.w	r0, #4294967295
 8009028:	bc70      	pop	{r4, r5, r6}
 800902a:	4770      	bx	lr
 800902c:	f04f 30ff 	mov.w	r0, #4294967295
 8009030:	4770      	bx	lr
 8009032:	bf00      	nop
 8009034:	08008775 	.word	0x08008775
 8009038:	08008785 	.word	0x08008785

0800903c <ov9655_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : Data Read
*******************************************************************************/
int32_t ov9655_read_reg(ov9655_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 800903c:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800903e:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8009042:	46a4      	mov	ip, r4
}
 8009044:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8009048:	4760      	bx	ip
 800904a:	bf00      	nop

0800904c <ov9655_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t ov9655_write_reg(ov9655_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 800904c:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, data, length);
 800904e:	6804      	ldr	r4, [r0, #0]
 8009050:	6880      	ldr	r0, [r0, #8]
 8009052:	46a4      	mov	ip, r4
}
 8009054:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8009058:	4760      	bx	ip
 800905a:	bf00      	nop

0800905c <BSP_LED_Init>:
{
  int32_t ret = BSP_ERROR_NONE;
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE();
 800905c:	4a13      	ldr	r2, [pc, #76]	; (80090ac <BSP_LED_Init+0x50>)
{
 800905e:	4603      	mov	r3, r0
  LEDx_GPIO_CLK_ENABLE();
 8009060:	f8d2 10e0 	ldr.w	r1, [r2, #224]	; 0xe0
{
 8009064:	b570      	push	{r4, r5, r6, lr}
  LEDx_GPIO_CLK_ENABLE();
 8009066:	f441 7180 	orr.w	r1, r1, #256	; 0x100

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 800906a:	4d11      	ldr	r5, [pc, #68]	; (80090b0 <BSP_LED_Init+0x54>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;

  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800906c:	4e11      	ldr	r6, [pc, #68]	; (80090b4 <BSP_LED_Init+0x58>)
{
 800906e:	b088      	sub	sp, #32
  LEDx_GPIO_CLK_ENABLE();
 8009070:	f8c2 10e0 	str.w	r1, [r2, #224]	; 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009074:	2401      	movs	r4, #1
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8009076:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800907a:	a903      	add	r1, sp, #12
  LEDx_GPIO_CLK_ENABLE();
 800907c:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8009080:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009084:	2603      	movs	r6, #3
  LEDx_GPIO_CLK_ENABLE();
 8009086:	f403 7380 	and.w	r3, r3, #256	; 0x100
  GPIO_InitStruct.Pin = LED_PIN[Led];
 800908a:	9503      	str	r5, [sp, #12]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800908c:	9001      	str	r0, [sp, #4]
  LEDx_GPIO_CLK_ENABLE();
 800908e:	9302      	str	r3, [sp, #8]
 8009090:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009092:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009094:	e9cd 4404 	strd	r4, r4, [sp, #16]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8009098:	f004 fdcc 	bl	800dc34 <HAL_GPIO_Init>

  /* By default, turn off LED */
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 800909c:	9801      	ldr	r0, [sp, #4]
 800909e:	4622      	mov	r2, r4
 80090a0:	b2a9      	uxth	r1, r5
 80090a2:	f004 ffb9 	bl	800e018 <HAL_GPIO_WritePin>
 return ret;
}
 80090a6:	2000      	movs	r0, #0
 80090a8:	b008      	add	sp, #32
 80090aa:	bd70      	pop	{r4, r5, r6, pc}
 80090ac:	58024400 	.word	0x58024400
 80090b0:	08097a0c 	.word	0x08097a0c
 80090b4:	08097a1c 	.word	0x08097a1c

080090b8 <BSP_LED_On>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t  BSP_LED_On(Led_TypeDef Led)
{
 80090b8:	b508      	push	{r3, lr}
  int32_t ret = BSP_ERROR_NONE;

  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 80090ba:	4905      	ldr	r1, [pc, #20]	; (80090d0 <BSP_LED_On+0x18>)
 80090bc:	2200      	movs	r2, #0
 80090be:	4b05      	ldr	r3, [pc, #20]	; (80090d4 <BSP_LED_On+0x1c>)
 80090c0:	f831 1020 	ldrh.w	r1, [r1, r0, lsl #2]
 80090c4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80090c8:	f004 ffa6 	bl	800e018 <HAL_GPIO_WritePin>
  return ret;
}
 80090cc:	2000      	movs	r0, #0
 80090ce:	bd08      	pop	{r3, pc}
 80090d0:	08097a0c 	.word	0x08097a0c
 80090d4:	08097a1c 	.word	0x08097a1c

080090d8 <BSP_LED_Off>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t  BSP_LED_Off(Led_TypeDef Led)
{
 80090d8:	b508      	push	{r3, lr}
  int32_t ret = BSP_ERROR_NONE;
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 80090da:	4905      	ldr	r1, [pc, #20]	; (80090f0 <BSP_LED_Off+0x18>)
 80090dc:	2201      	movs	r2, #1
 80090de:	4b05      	ldr	r3, [pc, #20]	; (80090f4 <BSP_LED_Off+0x1c>)
 80090e0:	f831 1020 	ldrh.w	r1, [r1, r0, lsl #2]
 80090e4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80090e8:	f004 ff96 	bl	800e018 <HAL_GPIO_WritePin>
  return ret;
}
 80090ec:	2000      	movs	r0, #0
 80090ee:	bd08      	pop	{r3, pc}
 80090f0:	08097a0c 	.word	0x08097a0c
 80090f4:	08097a1c 	.word	0x08097a1c

080090f8 <BSP_LED_Toggle>:
  * @retval BSP status
  */
int32_t  BSP_LED_Toggle(Led_TypeDef Led)
{
  int32_t ret = BSP_ERROR_NONE;
  HAL_GPIO_TogglePin(LED_PORT[Led], (uint16_t)LED_PIN[Led]);
 80090f8:	4a05      	ldr	r2, [pc, #20]	; (8009110 <BSP_LED_Toggle+0x18>)
{
 80090fa:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(LED_PORT[Led], (uint16_t)LED_PIN[Led]);
 80090fc:	4b05      	ldr	r3, [pc, #20]	; (8009114 <BSP_LED_Toggle+0x1c>)
 80090fe:	f832 1020 	ldrh.w	r1, [r2, r0, lsl #2]
 8009102:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8009106:	f004 ff8b 	bl	800e020 <HAL_GPIO_TogglePin>
  return ret;
}
 800910a:	2000      	movs	r0, #0
 800910c:	bd08      	pop	{r3, pc}
 800910e:	bf00      	nop
 8009110:	08097a0c 	.word	0x08097a0c
 8009114:	08097a1c 	.word	0x08097a1c

08009118 <BSP_PB_Init>:
  GPIO_InitTypeDef gpio_init_structure;
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_WAKEUP_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_WAKEUP_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={BUTTON_WAKEUP_EXTI_LINE};
  /* Enable the BUTTON clock*/
  BUTTON_WAKEUP_GPIO_CLK_ENABLE();
 8009118:	4a1e      	ldr	r2, [pc, #120]	; (8009194 <BSP_PB_Init+0x7c>)
  gpio_init_structure.Pin = BUTTON_PIN [Button];
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;

  if(ButtonMode == BUTTON_MODE_GPIO)
 800911a:	460b      	mov	r3, r1
  gpio_init_structure.Pull = GPIO_NOPULL;
 800911c:	2102      	movs	r1, #2
{
 800911e:	b570      	push	{r4, r5, r6, lr}
  BUTTON_WAKEUP_GPIO_CLK_ENABLE();
 8009120:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
{
 8009124:	b088      	sub	sp, #32
  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8009126:	f44f 5600 	mov.w	r6, #8192	; 0x2000
{
 800912a:	4605      	mov	r5, r0
  BUTTON_WAKEUP_GPIO_CLK_ENABLE();
 800912c:	f044 0404 	orr.w	r4, r4, #4
  gpio_init_structure.Pull = GPIO_NOPULL;
 8009130:	2000      	movs	r0, #0
  BUTTON_WAKEUP_GPIO_CLK_ENABLE();
 8009132:	f8c2 40e0 	str.w	r4, [r2, #224]	; 0xe0
 8009136:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800913a:	9602      	str	r6, [sp, #8]
  BUTTON_WAKEUP_GPIO_CLK_ENABLE();
 800913c:	f002 0204 	and.w	r2, r2, #4
 8009140:	9201      	str	r2, [sp, #4]
 8009142:	9a01      	ldr	r2, [sp, #4]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8009144:	e9cd 0104 	strd	r0, r1, [sp, #16]
  if(ButtonMode == BUTTON_MODE_GPIO)
 8009148:	b93b      	cbnz	r3, 800915a <BSP_PB_Init+0x42>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800914a:	a902      	add	r1, sp, #8
 800914c:	4812      	ldr	r0, [pc, #72]	; (8009198 <BSP_PB_Init+0x80>)
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800914e:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8009150:	f004 fd70 	bl	800dc34 <HAL_GPIO_Init>
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
  }
  return BSP_ERROR_NONE;
}
 8009154:	2000      	movs	r0, #0
 8009156:	b008      	add	sp, #32
 8009158:	bd70      	pop	{r4, r5, r6, pc}
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800915a:	4b10      	ldr	r3, [pc, #64]	; (800919c <BSP_PB_Init+0x84>)
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800915c:	a902      	add	r1, sp, #8
 800915e:	480e      	ldr	r0, [pc, #56]	; (8009198 <BSP_PB_Init+0x80>)
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8009160:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8009162:	f004 fd67 	bl	800dc34 <HAL_GPIO_Init>
    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8009166:	480e      	ldr	r0, [pc, #56]	; (80091a0 <BSP_PB_Init+0x88>)
 8009168:	490e      	ldr	r1, [pc, #56]	; (80091a4 <BSP_PB_Init+0x8c>)
 800916a:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 800916e:	4628      	mov	r0, r5
 8009170:	f004 fd5a 	bl	800dc28 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8009174:	4628      	mov	r0, r5
 8009176:	4a0c      	ldr	r2, [pc, #48]	; (80091a8 <BSP_PB_Init+0x90>)
 8009178:	2100      	movs	r1, #0
 800917a:	f004 fd4d 	bl	800dc18 <HAL_EXTI_RegisterCallback>
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800917e:	2200      	movs	r2, #0
 8009180:	210f      	movs	r1, #15
 8009182:	2028      	movs	r0, #40	; 0x28
 8009184:	f002 f86c 	bl	800b260 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8009188:	2028      	movs	r0, #40	; 0x28
 800918a:	f002 f8a3 	bl	800b2d4 <HAL_NVIC_EnableIRQ>
}
 800918e:	2000      	movs	r0, #0
 8009190:	b008      	add	sp, #32
 8009192:	bd70      	pop	{r4, r5, r6, pc}
 8009194:	58024400 	.word	0x58024400
 8009198:	58020800 	.word	0x58020800
 800919c:	11110000 	.word	0x11110000
 80091a0:	2000a00c 	.word	0x2000a00c
 80091a4:	1670000d 	.word	0x1670000d
 80091a8:	080091c5 	.word	0x080091c5

080091ac <BSP_PB_GetState>:
  *            @arg  BUTTON_WAKEUP: Wakeup Push Button
  * @retval The Button GPIO pin value
  */
int32_t  BSP_PB_GetState(Button_TypeDef Button)
{
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80091ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80091b0:	4802      	ldr	r0, [pc, #8]	; (80091bc <BSP_PB_GetState+0x10>)
{
 80091b2:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80091b4:	f004 ff2a 	bl	800e00c <HAL_GPIO_ReadPin>
}
 80091b8:	bd08      	pop	{r3, pc}
 80091ba:	bf00      	nop
 80091bc:	58020800 	.word	0x58020800

080091c0 <BSP_PB_Callback>:
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);
  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 80091c0:	4770      	bx	lr
 80091c2:	bf00      	nop

080091c4 <BUTTON_WAKEUP_EXTI_Callback>:
  BSP_PB_Callback(BUTTON_WAKEUP);
 80091c4:	2000      	movs	r0, #0
{
 80091c6:	b508      	push	{r3, lr}
  BSP_PB_Callback(BUTTON_WAKEUP);
 80091c8:	f7ff fffa 	bl	80091c0 <BSP_PB_Callback>
}
 80091cc:	bd08      	pop	{r3, pc}
 80091ce:	bf00      	nop

080091d0 <BSP_JOY_Init>:
                                                   BSP_JOY1_RIGHT_IT_PRIORITY,
                                                   BSP_JOY1_UP_IT_PRIORITY
                                                  };

  /* Store Joystick pins initialized */
  JoyPinsMask |= (uint32_t)JoyPins;
 80091d0:	f8df c114 	ldr.w	ip, [pc, #276]	; 80092e8 <BSP_JOY_Init+0x118>
{
 80091d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  JoyPinsMask |= (uint32_t)JoyPins;
 80091d8:	f8dc 3000 	ldr.w	r3, [ip]
 80091dc:	fab0 f880 	clz	r8, r0
{
 80091e0:	b08f      	sub	sp, #60	; 0x3c
 80091e2:	4615      	mov	r5, r2
  JoyPinsMask |= (uint32_t)JoyPins;
 80091e4:	4313      	orrs	r3, r2
{
 80091e6:	4689      	mov	r9, r1
 80091e8:	ea4f 1858 	mov.w	r8, r8, lsr #5

  /* Initialized the Joystick. */
  for(joykey = 0U; joykey < JOY_KEY_NUMBER ; joykey++)
 80091ec:	2400      	movs	r4, #0
          {
            JOY1_UP_GPIO_CLK_ENABLE();
          }
        }

        gpio_init_structure.Pin = JOY1_PIN[joykey];
 80091ee:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 80092ec <BSP_JOY_Init+0x11c>
        gpio_init_structure.Pull = GPIO_PULLUP;
 80091f2:	2601      	movs	r6, #1
          HAL_GPIO_Init(JOY1_PORT[joykey], &gpio_init_structure);
        }
        else /*(JoyMode == JOY_MODE_EXTI)*/
        {
          /* Configure Joy pin as input with External interrupt */
          gpio_init_structure.Mode = GPIO_MODE_IT_RISING_FALLING;
 80091f4:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 80092f0 <BSP_JOY_Init+0x120>
        gpio_init_structure.Pull = GPIO_PULLUP;
 80091f8:	2703      	movs	r7, #3
  JoyPinsMask |= (uint32_t)JoyPins;
 80091fa:	f8cc 3000 	str.w	r3, [ip]
    key_pressed = 1UL << joykey;
 80091fe:	2301      	movs	r3, #1
 8009200:	40a3      	lsls	r3, r4
      if(JOY == JOY1)
 8009202:	43ab      	bics	r3, r5
 8009204:	d102      	bne.n	800920c <BSP_JOY_Init+0x3c>
 8009206:	f1b8 0f00 	cmp.w	r8, #0
 800920a:	d106      	bne.n	800921a <BSP_JOY_Init+0x4a>
  for(joykey = 0U; joykey < JOY_KEY_NUMBER ; joykey++)
 800920c:	3401      	adds	r4, #1
 800920e:	2c05      	cmp	r4, #5
 8009210:	d1f5      	bne.n	80091fe <BSP_JOY_Init+0x2e>
      }
    }
  }

  return ret;
}
 8009212:	2000      	movs	r0, #0
 8009214:	b00f      	add	sp, #60	; 0x3c
 8009216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          JOY1_SEL_GPIO_CLK_ENABLE();
 800921a:	4b2c      	ldr	r3, [pc, #176]	; (80092cc <BSP_JOY_Init+0xfc>)
 800921c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009220:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009224:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8009228:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800922c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        if(key_pressed == (uint32_t)JOY_SEL)
 8009230:	2c00      	cmp	r4, #0
 8009232:	d03e      	beq.n	80092b2 <BSP_JOY_Init+0xe2>
        else if(key_pressed == (uint32_t)JOY_DOWN)
 8009234:	2c01      	cmp	r4, #1
 8009236:	d03f      	beq.n	80092b8 <BSP_JOY_Init+0xe8>
        else if(key_pressed == (uint32_t) JOY_LEFT)
 8009238:	2c02      	cmp	r4, #2
 800923a:	d040      	beq.n	80092be <BSP_JOY_Init+0xee>
        else if(key_pressed == (uint32_t) JOY_RIGHT)
 800923c:	2c03      	cmp	r4, #3
 800923e:	d041      	beq.n	80092c4 <BSP_JOY_Init+0xf4>
            JOY1_UP_GPIO_CLK_ENABLE();
 8009240:	9307      	str	r3, [sp, #28]
 8009242:	9b07      	ldr	r3, [sp, #28]
        gpio_init_structure.Pin = JOY1_PIN[joykey];
 8009244:	f83b 3014 	ldrh.w	r3, [fp, r4, lsl #1]
          HAL_GPIO_Init(JOY1_PORT[joykey], &gpio_init_structure);
 8009248:	a908      	add	r1, sp, #32
        gpio_init_structure.Pin = JOY1_PIN[joykey];
 800924a:	9308      	str	r3, [sp, #32]
          HAL_GPIO_Init(JOY1_PORT[joykey], &gpio_init_structure);
 800924c:	4b20      	ldr	r3, [pc, #128]	; (80092d0 <BSP_JOY_Init+0x100>)
        gpio_init_structure.Pull = GPIO_PULLUP;
 800924e:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
        if (JoyMode == JOY_MODE_GPIO)
 8009252:	f1b9 0f00 	cmp.w	r9, #0
 8009256:	d106      	bne.n	8009266 <BSP_JOY_Init+0x96>
          HAL_GPIO_Init(JOY1_PORT[joykey], &gpio_init_structure);
 8009258:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
          gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800925c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
          HAL_GPIO_Init(JOY1_PORT[joykey], &gpio_init_structure);
 8009260:	f004 fce8 	bl	800dc34 <HAL_GPIO_Init>
 8009264:	e7d2      	b.n	800920c <BSP_JOY_Init+0x3c>
          HAL_GPIO_Init(JOY1_PORT[joykey], &gpio_init_structure);
 8009266:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
          gpio_init_structure.Mode = GPIO_MODE_IT_RISING_FALLING;
 800926a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
          HAL_GPIO_Init(JOY1_PORT[joykey], &gpio_init_structure);
 800926e:	f004 fce1 	bl	800dc34 <HAL_GPIO_Init>
         (void)HAL_EXTI_GetHandle(&hjoy_exti[joykey], JOY_EXTI_LINE[joykey]);
 8009272:	4b18      	ldr	r3, [pc, #96]	; (80092d4 <BSP_JOY_Init+0x104>)
 8009274:	4a18      	ldr	r2, [pc, #96]	; (80092d8 <BSP_JOY_Init+0x108>)
 8009276:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800927a:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
 800927e:	4618      	mov	r0, r3
 8009280:	9301      	str	r3, [sp, #4]
 8009282:	f004 fcd1 	bl	800dc28 <HAL_EXTI_GetHandle>
         (void)HAL_EXTI_RegisterCallback(&hjoy_exti[joykey],  HAL_EXTI_COMMON_CB_ID, JoyCallback[joykey]);
 8009286:	9b01      	ldr	r3, [sp, #4]
 8009288:	4a14      	ldr	r2, [pc, #80]	; (80092dc <BSP_JOY_Init+0x10c>)
 800928a:	2100      	movs	r1, #0
 800928c:	4618      	mov	r0, r3
 800928e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8009292:	f004 fcc1 	bl	800dc18 <HAL_EXTI_RegisterCallback>
          HAL_NVIC_SetPriority((IRQn_Type)(JOY1_IRQn[joykey]), BSP_JOY_PRIO[joykey], 0x00);
 8009296:	4912      	ldr	r1, [pc, #72]	; (80092e0 <BSP_JOY_Init+0x110>)
 8009298:	4b12      	ldr	r3, [pc, #72]	; (80092e4 <BSP_JOY_Init+0x114>)
 800929a:	2200      	movs	r2, #0
 800929c:	f931 0014 	ldrsh.w	r0, [r1, r4, lsl #1]
 80092a0:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 80092a4:	9001      	str	r0, [sp, #4]
 80092a6:	f001 ffdb 	bl	800b260 <HAL_NVIC_SetPriority>
          HAL_NVIC_EnableIRQ((IRQn_Type)(JOY1_IRQn[joykey]));
 80092aa:	9801      	ldr	r0, [sp, #4]
 80092ac:	f002 f812 	bl	800b2d4 <HAL_NVIC_EnableIRQ>
 80092b0:	e7ac      	b.n	800920c <BSP_JOY_Init+0x3c>
          JOY1_SEL_GPIO_CLK_ENABLE();
 80092b2:	9303      	str	r3, [sp, #12]
 80092b4:	9b03      	ldr	r3, [sp, #12]
 80092b6:	e7c5      	b.n	8009244 <BSP_JOY_Init+0x74>
          JOY1_DOWN_GPIO_CLK_ENABLE();
 80092b8:	9304      	str	r3, [sp, #16]
 80092ba:	9b04      	ldr	r3, [sp, #16]
 80092bc:	e7c2      	b.n	8009244 <BSP_JOY_Init+0x74>
          JOY1_LEFT_GPIO_CLK_ENABLE();
 80092be:	9305      	str	r3, [sp, #20]
 80092c0:	9b05      	ldr	r3, [sp, #20]
 80092c2:	e7bf      	b.n	8009244 <BSP_JOY_Init+0x74>
          JOY1_RIGHT_GPIO_CLK_ENABLE();
 80092c4:	9306      	str	r3, [sp, #24]
 80092c6:	9b06      	ldr	r3, [sp, #24]
 80092c8:	e7bc      	b.n	8009244 <BSP_JOY_Init+0x74>
 80092ca:	bf00      	nop
 80092cc:	58024400 	.word	0x58024400
 80092d0:	080979d0 	.word	0x080979d0
 80092d4:	200089cc 	.word	0x200089cc
 80092d8:	080979e4 	.word	0x080979e4
 80092dc:	080979f8 	.word	0x080979f8
 80092e0:	080979b8 	.word	0x080979b8
 80092e4:	080979a4 	.word	0x080979a4
 80092e8:	200089c8 	.word	0x200089c8
 80092ec:	080979c4 	.word	0x080979c4
 80092f0:	11310000 	.word	0x11310000

080092f4 <BSP_JOY_GetState>:
*            @arg  JOY_LEFT
*            @arg  JOY_RIGHT
*            @arg  JOY_UP
*/
int32_t BSP_JOY_GetState(JOY_TypeDef JOY,uint32_t JoyPin)
{
 80092f4:	b538      	push	{r3, r4, r5, lr}

  uint32_t joykey, key_pressed;
  for (joykey = 0U; joykey < JOY_KEY_NUMBER ; joykey++)
  {
    key_pressed = 1UL << joykey;
    if((key_pressed & JoyPinsMask) == key_pressed)
 80092f6:	4d21      	ldr	r5, [pc, #132]	; (800937c <BSP_JOY_GetState+0x88>)
 80092f8:	fab0 f480 	clz	r4, r0
 80092fc:	682b      	ldr	r3, [r5, #0]
 80092fe:	0964      	lsrs	r4, r4, #5
    {
      if(JOY == JOY1)
 8009300:	07db      	lsls	r3, r3, #31
 8009302:	d500      	bpl.n	8009306 <BSP_JOY_GetState+0x12>
 8009304:	b98c      	cbnz	r4, 800932a <BSP_JOY_GetState+0x36>
    if((key_pressed & JoyPinsMask) == key_pressed)
 8009306:	682b      	ldr	r3, [r5, #0]
      if(JOY == JOY1)
 8009308:	0798      	lsls	r0, r3, #30
 800930a:	d500      	bpl.n	800930e <BSP_JOY_GetState+0x1a>
 800930c:	b9ac      	cbnz	r4, 800933a <BSP_JOY_GetState+0x46>
    if((key_pressed & JoyPinsMask) == key_pressed)
 800930e:	682b      	ldr	r3, [r5, #0]
      if(JOY == JOY1)
 8009310:	0759      	lsls	r1, r3, #29
 8009312:	d500      	bpl.n	8009316 <BSP_JOY_GetState+0x22>
 8009314:	b9cc      	cbnz	r4, 800934a <BSP_JOY_GetState+0x56>
    if((key_pressed & JoyPinsMask) == key_pressed)
 8009316:	682b      	ldr	r3, [r5, #0]
      if(JOY == JOY1)
 8009318:	071a      	lsls	r2, r3, #28
 800931a:	d500      	bpl.n	800931e <BSP_JOY_GetState+0x2a>
 800931c:	b9ec      	cbnz	r4, 800935a <BSP_JOY_GetState+0x66>
    if((key_pressed & JoyPinsMask) == key_pressed)
 800931e:	682b      	ldr	r3, [r5, #0]
      if(JOY == JOY1)
 8009320:	06db      	lsls	r3, r3, #27
 8009322:	d500      	bpl.n	8009326 <BSP_JOY_GetState+0x32>
 8009324:	bb0c      	cbnz	r4, 800936a <BSP_JOY_GetState+0x76>
        }
      }
    }
  }
  /* No Joystick key pressed */
  return (int32_t)JOY_NONE;
 8009326:	2000      	movs	r0, #0

}
 8009328:	bd38      	pop	{r3, r4, r5, pc}
        if (HAL_GPIO_ReadPin(JOY1_PORT[joykey], JOY1_PIN[joykey]) != GPIO_PIN_SET)
 800932a:	2104      	movs	r1, #4
 800932c:	4814      	ldr	r0, [pc, #80]	; (8009380 <BSP_JOY_GetState+0x8c>)
 800932e:	f004 fe6d 	bl	800e00c <HAL_GPIO_ReadPin>
 8009332:	2801      	cmp	r0, #1
 8009334:	d0e7      	beq.n	8009306 <BSP_JOY_GetState+0x12>
    key_pressed = 1UL << joykey;
 8009336:	2001      	movs	r0, #1
}
 8009338:	bd38      	pop	{r3, r4, r5, pc}
        if (HAL_GPIO_ReadPin(JOY1_PORT[joykey], JOY1_PIN[joykey]) != GPIO_PIN_SET)
 800933a:	2108      	movs	r1, #8
 800933c:	4810      	ldr	r0, [pc, #64]	; (8009380 <BSP_JOY_GetState+0x8c>)
 800933e:	f004 fe65 	bl	800e00c <HAL_GPIO_ReadPin>
 8009342:	2801      	cmp	r0, #1
 8009344:	d0e3      	beq.n	800930e <BSP_JOY_GetState+0x1a>
    key_pressed = 1UL << joykey;
 8009346:	2002      	movs	r0, #2
}
 8009348:	bd38      	pop	{r3, r4, r5, pc}
        if (HAL_GPIO_ReadPin(JOY1_PORT[joykey], JOY1_PIN[joykey]) != GPIO_PIN_SET)
 800934a:	2110      	movs	r1, #16
 800934c:	480c      	ldr	r0, [pc, #48]	; (8009380 <BSP_JOY_GetState+0x8c>)
 800934e:	f004 fe5d 	bl	800e00c <HAL_GPIO_ReadPin>
 8009352:	2801      	cmp	r0, #1
 8009354:	d0df      	beq.n	8009316 <BSP_JOY_GetState+0x22>
    key_pressed = 1UL << joykey;
 8009356:	2004      	movs	r0, #4
}
 8009358:	bd38      	pop	{r3, r4, r5, pc}
        if (HAL_GPIO_ReadPin(JOY1_PORT[joykey], JOY1_PIN[joykey]) != GPIO_PIN_SET)
 800935a:	2120      	movs	r1, #32
 800935c:	4808      	ldr	r0, [pc, #32]	; (8009380 <BSP_JOY_GetState+0x8c>)
 800935e:	f004 fe55 	bl	800e00c <HAL_GPIO_ReadPin>
 8009362:	2801      	cmp	r0, #1
 8009364:	d0db      	beq.n	800931e <BSP_JOY_GetState+0x2a>
    key_pressed = 1UL << joykey;
 8009366:	2008      	movs	r0, #8
}
 8009368:	bd38      	pop	{r3, r4, r5, pc}
        if (HAL_GPIO_ReadPin(JOY1_PORT[joykey], JOY1_PIN[joykey]) != GPIO_PIN_SET)
 800936a:	2140      	movs	r1, #64	; 0x40
 800936c:	4804      	ldr	r0, [pc, #16]	; (8009380 <BSP_JOY_GetState+0x8c>)
 800936e:	f004 fe4d 	bl	800e00c <HAL_GPIO_ReadPin>
 8009372:	2801      	cmp	r0, #1
 8009374:	d0d7      	beq.n	8009326 <BSP_JOY_GetState+0x32>
    key_pressed = 1UL << joykey;
 8009376:	2010      	movs	r0, #16
}
 8009378:	bd38      	pop	{r3, r4, r5, pc}
 800937a:	bf00      	nop
 800937c:	200089c8 	.word	0x200089c8
 8009380:	58022800 	.word	0x58022800

08009384 <BSP_JOY_Callback>:
  UNUSED(JOY);
  UNUSED(JoyPin);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on JoyPin is triggered. */
}
 8009384:	4770      	bx	lr
 8009386:	bf00      	nop

08009388 <JOY1_UP_EXTI_Callback>:
  * @brief  JOY1 UP EXTI line detection callbacks.
  * @retval None
  */
static void JOY1_UP_EXTI_Callback(void)
{
  BSP_JOY_Callback(JOY1, JOY_UP);
 8009388:	2110      	movs	r1, #16
 800938a:	2000      	movs	r0, #0
{
 800938c:	b508      	push	{r3, lr}
  BSP_JOY_Callback(JOY1, JOY_UP);
 800938e:	f7ff fff9 	bl	8009384 <BSP_JOY_Callback>
}
 8009392:	bd08      	pop	{r3, pc}

08009394 <JOY1_RIGHT_EXTI_Callback>:
  * @brief  JOY1 RIGHT EXTI line detection callbacks.
  * @retval None
  */
static void JOY1_RIGHT_EXTI_Callback(void)
{
  BSP_JOY_Callback(JOY1, JOY_RIGHT);
 8009394:	2108      	movs	r1, #8
 8009396:	2000      	movs	r0, #0
{
 8009398:	b508      	push	{r3, lr}
  BSP_JOY_Callback(JOY1, JOY_RIGHT);
 800939a:	f7ff fff3 	bl	8009384 <BSP_JOY_Callback>
}
 800939e:	bd08      	pop	{r3, pc}

080093a0 <JOY1_LEFT_EXTI_Callback>:
  BSP_JOY_Callback(JOY1, JOY_LEFT);
 80093a0:	2104      	movs	r1, #4
 80093a2:	2000      	movs	r0, #0
{
 80093a4:	b508      	push	{r3, lr}
  BSP_JOY_Callback(JOY1, JOY_LEFT);
 80093a6:	f7ff ffed 	bl	8009384 <BSP_JOY_Callback>
}
 80093aa:	bd08      	pop	{r3, pc}

080093ac <JOY1_DOWN_EXTI_Callback>:
  BSP_JOY_Callback(JOY1, JOY_DOWN);
 80093ac:	2102      	movs	r1, #2
 80093ae:	2000      	movs	r0, #0
{
 80093b0:	b508      	push	{r3, lr}
  BSP_JOY_Callback(JOY1, JOY_DOWN);
 80093b2:	f7ff ffe7 	bl	8009384 <BSP_JOY_Callback>
}
 80093b6:	bd08      	pop	{r3, pc}

080093b8 <JOY1_SEL_EXTI_Callback>:
  BSP_JOY_Callback(JOY1, JOY_SEL);
 80093b8:	2101      	movs	r1, #1
 80093ba:	2000      	movs	r0, #0
{
 80093bc:	b508      	push	{r3, lr}
  BSP_JOY_Callback(JOY1, JOY_SEL);
 80093be:	f7ff ffe1 	bl	8009384 <BSP_JOY_Callback>
}
 80093c2:	bd08      	pop	{r3, pc}

080093c4 <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
 80093c4:	4a10      	ldr	r2, [pc, #64]	; (8009408 <BSP_I2C4_DeInit+0x44>)
{
 80093c6:	b508      	push	{r3, lr}
  I2c4InitCounter--;
 80093c8:	6813      	ldr	r3, [r2, #0]
 80093ca:	3b01      	subs	r3, #1
 80093cc:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 80093ce:	b10b      	cbz	r3, 80093d4 <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
 80093d0:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
 80093d2:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 80093d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80093d8:	480c      	ldr	r0, [pc, #48]	; (800940c <BSP_I2C4_DeInit+0x48>)
 80093da:	f004 fd49 	bl	800de70 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 80093de:	480b      	ldr	r0, [pc, #44]	; (800940c <BSP_I2C4_DeInit+0x48>)
 80093e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80093e4:	f004 fd44 	bl	800de70 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 80093e8:	4a09      	ldr	r2, [pc, #36]	; (8009410 <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 80093ea:	480a      	ldr	r0, [pc, #40]	; (8009414 <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
 80093ec:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
 80093f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80093f4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 80093f8:	f004 ff24 	bl	800e244 <HAL_I2C_DeInit>
 80093fc:	2800      	cmp	r0, #0
 80093fe:	d0e7      	beq.n	80093d0 <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
 8009400:	f06f 0007 	mvn.w	r0, #7
}
 8009404:	bd08      	pop	{r3, pc}
 8009406:	bf00      	nop
 8009408:	200089f4 	.word	0x200089f4
 800940c:	58020c00 	.word	0x58020c00
 8009410:	58024400 	.word	0x58024400
 8009414:	2000a014 	.word	0x2000a014

08009418 <MX_I2C4_Init>:
  hI2c->Init.OwnAddress1      = 0;
 8009418:	2300      	movs	r3, #0
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800941a:	2201      	movs	r2, #1
{
 800941c:	b510      	push	{r4, lr}
  hI2c->Init.Timing           = timing;
 800941e:	6041      	str	r1, [r0, #4]
{
 8009420:	4604      	mov	r4, r0
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8009422:	6203      	str	r3, [r0, #32]
  hI2c->Init.OwnAddress1      = 0;
 8009424:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hI2c->Init.OwnAddress2      = 0;
 8009428:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800942c:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8009430:	f004 feb2 	bl	800e198 <HAL_I2C_Init>
 8009434:	b108      	cbz	r0, 800943a <MX_I2C4_Init+0x22>
    status = HAL_ERROR;
 8009436:	2001      	movs	r0, #1
}
 8009438:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 800943a:	4601      	mov	r1, r0
 800943c:	4620      	mov	r0, r4
 800943e:	f005 f98f 	bl	800e760 <HAL_I2CEx_ConfigAnalogFilter>
 8009442:	2800      	cmp	r0, #0
 8009444:	d1f7      	bne.n	8009436 <MX_I2C4_Init+0x1e>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8009446:	4601      	mov	r1, r0
 8009448:	4620      	mov	r0, r4
 800944a:	f005 f9b5 	bl	800e7b8 <HAL_I2CEx_ConfigDigitalFilter>
    status = HAL_ERROR;
 800944e:	3800      	subs	r0, #0
 8009450:	bf18      	it	ne
 8009452:	2001      	movne	r0, #1
}
 8009454:	bd10      	pop	{r4, pc}
 8009456:	bf00      	nop

08009458 <BSP_I2C4_Init>:
  if (I2c4InitCounter == 0U)
 8009458:	4b95      	ldr	r3, [pc, #596]	; (80096b0 <BSP_I2C4_Init+0x258>)
  hbus_i2c4.Instance = BUS_I2C4;
 800945a:	4896      	ldr	r0, [pc, #600]	; (80096b4 <BSP_I2C4_Init+0x25c>)
  if (I2c4InitCounter == 0U)
 800945c:	681a      	ldr	r2, [r3, #0]
{
 800945e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009462:	b09d      	sub	sp, #116	; 0x74
  if (I2c4InitCounter == 0U)
 8009464:	4611      	mov	r1, r2
 8009466:	9200      	str	r2, [sp, #0]
  hbus_i2c4.Instance = BUS_I2C4;
 8009468:	4a93      	ldr	r2, [pc, #588]	; (80096b8 <BSP_I2C4_Init+0x260>)
 800946a:	6002      	str	r2, [r0, #0]
  if (I2c4InitCounter == 0U)
 800946c:	b119      	cbz	r1, 8009476 <BSP_I2C4_Init+0x1e>
  int32_t ret = BSP_ERROR_NONE;
 800946e:	2000      	movs	r0, #0
}
 8009470:	b01d      	add	sp, #116	; 0x74
 8009472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2c4InitCounter++;
 8009476:	2201      	movs	r2, #1
 8009478:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800947a:	f005 f96b 	bl	800e754 <HAL_I2C_GetState>
 800947e:	2800      	cmp	r0, #0
 8009480:	d1f5      	bne.n	800946e <BSP_I2C4_Init+0x16>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8009482:	4c8e      	ldr	r4, [pc, #568]	; (80096bc <BSP_I2C4_Init+0x264>)
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8009484:	2600      	movs	r6, #0
 8009486:	2702      	movs	r7, #2
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8009488:	2504      	movs	r5, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800948a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 800948e:	f44f 5880 	mov.w	r8, #4096	; 0x1000
 8009492:	f04f 0912 	mov.w	r9, #18
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8009496:	a916      	add	r1, sp, #88	; 0x58
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8009498:	f043 0308 	orr.w	r3, r3, #8
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800949c:	4888      	ldr	r0, [pc, #544]	; (80096c0 <BSP_I2C4_Init+0x268>)
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800949e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80094a2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80094a6:	f003 0308 	and.w	r3, r3, #8
 80094aa:	9313      	str	r3, [sp, #76]	; 0x4c
 80094ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 80094ae:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80094b2:	f043 0308 	orr.w	r3, r3, #8
 80094b6:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80094ba:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 80094be:	951a      	str	r5, [sp, #104]	; 0x68
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 80094c0:	f003 0308 	and.w	r3, r3, #8
 80094c4:	9314      	str	r3, [sp, #80]	; 0x50
 80094c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 80094c8:	e9cd 8916 	strd	r8, r9, [sp, #88]	; 0x58
 80094cc:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 80094d0:	f004 fbb0 	bl	800dc34 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 80094d4:	2312      	movs	r3, #18
 80094d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 80094da:	a916      	add	r1, sp, #88	; 0x58
 80094dc:	4878      	ldr	r0, [pc, #480]	; (80096c0 <BSP_I2C4_Init+0x268>)
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 80094de:	951a      	str	r5, [sp, #104]	; 0x68
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 80094e0:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80094e4:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 80094e8:	f004 fba4 	bl	800dc34 <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 80094ec:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 80094f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094f4:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 80094f8:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 80094fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009500:	9315      	str	r3, [sp, #84]	; 0x54
 8009502:	9b15      	ldr	r3, [sp, #84]	; 0x54
  BUS_I2C4_FORCE_RESET();
 8009504:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8009508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800950c:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  BUS_I2C4_RELEASE_RESET();
 8009510:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8009514:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009518:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800951c:	f006 faee 	bl	800fafc <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8009520:	2800      	cmp	r0, #0
 8009522:	f000 81bf 	beq.w	80098a4 <BSP_I2C4_Init+0x44c>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8009526:	4b67      	ldr	r3, [pc, #412]	; (80096c4 <BSP_I2C4_Init+0x26c>)
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8009528:	f06f 011d 	mvn.w	r1, #29
 800952c:	4c66      	ldr	r4, [pc, #408]	; (80096c8 <BSP_I2C4_Init+0x270>)
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800952e:	f640 12f6 	movw	r2, #2550	; 0x9f6
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8009532:	eb03 0350 	add.w	r3, r3, r0, lsr #1
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8009536:	f8dd e000 	ldr.w	lr, [sp]
 800953a:	6825      	ldr	r5, [r4, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 800953c:	2610      	movs	r6, #16
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800953e:	f8df c18c 	ldr.w	ip, [pc, #396]	; 80096cc <BSP_I2C4_Init+0x274>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8009542:	fbb3 f0f0 	udiv	r0, r3, r0
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8009546:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 800954a:	4604      	mov	r4, r0
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800954c:	eba2 0280 	sub.w	r2, r2, r0, lsl #2
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8009550:	4681      	mov	r9, r0
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8009552:	1acb      	subs	r3, r1, r3
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8009554:	9002      	str	r0, [sp, #8]
  if (tsdadel_min <= 0)
 8009556:	ea22 7be2 	bic.w	fp, r2, r2, asr #31
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800955a:	0062      	lsls	r2, r4, #1
 800955c:	ea23 7ae3 	bic.w	sl, r3, r3, asr #31
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8009560:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8009564:	9211      	str	r2, [sp, #68]	; 0x44
 8009566:	462b      	mov	r3, r5
 8009568:	4654      	mov	r4, sl
 800956a:	4672      	mov	r2, lr
 800956c:	9010      	str	r0, [sp, #64]	; 0x40
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800956e:	9001      	str	r0, [sp, #4]
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8009570:	2100      	movs	r1, #0
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8009572:	ebb4 0f49 	cmp.w	r4, r9, lsl #1
 8009576:	eb09 0549 	add.w	r5, r9, r9, lsl #1
 800957a:	4648      	mov	r0, r9
 800957c:	bf94      	ite	ls
 800957e:	f04f 0801 	movls.w	r8, #1
 8009582:	4688      	movhi	r8, r1
 8009584:	ebbb 0f49 	cmp.w	fp, r9, lsl #1
 8009588:	46ae      	mov	lr, r5
 800958a:	f008 0701 	and.w	r7, r8, #1
 800958e:	ebc9 0ac9 	rsb	sl, r9, r9, lsl #3
 8009592:	bf38      	it	cc
 8009594:	2700      	movcc	r7, #0
 8009596:	42ac      	cmp	r4, r5
 8009598:	bf8c      	ite	hi
 800959a:	2500      	movhi	r5, #0
 800959c:	2501      	movls	r5, #1
 800959e:	45f3      	cmp	fp, lr
 80095a0:	9703      	str	r7, [sp, #12]
 80095a2:	bf38      	it	cc
 80095a4:	2500      	movcc	r5, #0
 80095a6:	ebb4 0f89 	cmp.w	r4, r9, lsl #2
 80095aa:	bf94      	ite	ls
 80095ac:	f04f 0801 	movls.w	r8, #1
 80095b0:	4688      	movhi	r8, r1
 80095b2:	ebbb 0f89 	cmp.w	fp, r9, lsl #2
 80095b6:	9504      	str	r5, [sp, #16]
 80095b8:	f008 0701 	and.w	r7, r8, #1
 80095bc:	eb09 0889 	add.w	r8, r9, r9, lsl #2
 80095c0:	bf38      	it	cc
 80095c2:	2700      	movcc	r7, #0
 80095c4:	eb09 05c9 	add.w	r5, r9, r9, lsl #3
 80095c8:	4544      	cmp	r4, r8
 80095ca:	9705      	str	r7, [sp, #20]
 80095cc:	bf8c      	ite	hi
 80095ce:	2700      	movhi	r7, #0
 80095d0:	2701      	movls	r7, #1
 80095d2:	45c3      	cmp	fp, r8
 80095d4:	bf38      	it	cc
 80095d6:	2700      	movcc	r7, #0
 80095d8:	ebb4 0f4e 	cmp.w	r4, lr, lsl #1
 80095dc:	9706      	str	r7, [sp, #24]
 80095de:	eb09 0748 	add.w	r7, r9, r8, lsl #1
 80095e2:	970b      	str	r7, [sp, #44]	; 0x2c
 80095e4:	bf94      	ite	ls
 80095e6:	2701      	movls	r7, #1
 80095e8:	460f      	movhi	r7, r1
 80095ea:	ebbb 0f4e 	cmp.w	fp, lr, lsl #1
 80095ee:	9707      	str	r7, [sp, #28]
 80095f0:	eb09 078e 	add.w	r7, r9, lr, lsl #2
 80095f4:	970c      	str	r7, [sp, #48]	; 0x30
 80095f6:	9f07      	ldr	r7, [sp, #28]
 80095f8:	f007 0701 	and.w	r7, r7, #1
 80095fc:	bf38      	it	cc
 80095fe:	2700      	movcc	r7, #0
 8009600:	4554      	cmp	r4, sl
 8009602:	9707      	str	r7, [sp, #28]
 8009604:	bf8c      	ite	hi
 8009606:	2700      	movhi	r7, #0
 8009608:	2701      	movls	r7, #1
 800960a:	45d3      	cmp	fp, sl
 800960c:	bf38      	it	cc
 800960e:	2700      	movcc	r7, #0
 8009610:	ebb4 0fc9 	cmp.w	r4, r9, lsl #3
 8009614:	9708      	str	r7, [sp, #32]
 8009616:	bf94      	ite	ls
 8009618:	2701      	movls	r7, #1
 800961a:	460f      	movhi	r7, r1
 800961c:	ebbb 0fc9 	cmp.w	fp, r9, lsl #3
 8009620:	f007 0701 	and.w	r7, r7, #1
 8009624:	bf38      	it	cc
 8009626:	2700      	movcc	r7, #0
 8009628:	42ac      	cmp	r4, r5
 800962a:	9709      	str	r7, [sp, #36]	; 0x24
 800962c:	bf8c      	ite	hi
 800962e:	2700      	movhi	r7, #0
 8009630:	2701      	movls	r7, #1
 8009632:	45ab      	cmp	fp, r5
 8009634:	bf38      	it	cc
 8009636:	2700      	movcc	r7, #0
 8009638:	ebb4 0f48 	cmp.w	r4, r8, lsl #1
 800963c:	463d      	mov	r5, r7
 800963e:	970a      	str	r7, [sp, #40]	; 0x28
 8009640:	bf98      	it	ls
 8009642:	2501      	movls	r5, #1
 8009644:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8009646:	bf88      	it	hi
 8009648:	460d      	movhi	r5, r1
 800964a:	ebbb 0f48 	cmp.w	fp, r8, lsl #1
 800964e:	f005 0501 	and.w	r5, r5, #1
 8009652:	bf38      	it	cc
 8009654:	2500      	movcc	r5, #0
 8009656:	42bc      	cmp	r4, r7
 8009658:	950d      	str	r5, [sp, #52]	; 0x34
 800965a:	463d      	mov	r5, r7
 800965c:	bf8c      	ite	hi
 800965e:	2500      	movhi	r5, #0
 8009660:	2501      	movls	r5, #1
 8009662:	45bb      	cmp	fp, r7
 8009664:	bf38      	it	cc
 8009666:	2500      	movcc	r5, #0
 8009668:	ebb4 0f8e 	cmp.w	r4, lr, lsl #2
 800966c:	950b      	str	r5, [sp, #44]	; 0x2c
 800966e:	bf94      	ite	ls
 8009670:	2501      	movls	r5, #1
 8009672:	460d      	movhi	r5, r1
 8009674:	ebbb 0f8e 	cmp.w	fp, lr, lsl #2
 8009678:	f005 0501 	and.w	r5, r5, #1
 800967c:	bf38      	it	cc
 800967e:	2500      	movcc	r5, #0
 8009680:	950e      	str	r5, [sp, #56]	; 0x38
 8009682:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009684:	42ac      	cmp	r4, r5
 8009686:	462f      	mov	r7, r5
 8009688:	bf8c      	ite	hi
 800968a:	2700      	movhi	r7, #0
 800968c:	2701      	movls	r7, #1
 800968e:	45ab      	cmp	fp, r5
 8009690:	bf38      	it	cc
 8009692:	2700      	movcc	r7, #0
 8009694:	ebb4 0f4a 	cmp.w	r4, sl, lsl #1
 8009698:	bf94      	ite	ls
 800969a:	2501      	movls	r5, #1
 800969c:	460d      	movhi	r5, r1
 800969e:	ebbb 0f4a 	cmp.w	fp, sl, lsl #1
 80096a2:	970c      	str	r7, [sp, #48]	; 0x30
 80096a4:	f005 0501 	and.w	r5, r5, #1
 80096a8:	bf38      	it	cc
 80096aa:	2500      	movcc	r5, #0
 80096ac:	950f      	str	r5, [sp, #60]	; 0x3c
 80096ae:	e013      	b.n	80096d8 <BSP_I2C4_Init+0x280>
 80096b0:	200089f4 	.word	0x200089f4
 80096b4:	2000a014 	.word	0x2000a014
 80096b8:	58001c00 	.word	0x58001c00
 80096bc:	58024400 	.word	0x58024400
 80096c0:	58020c00 	.word	0x58020c00
 80096c4:	3b9aca00 	.word	0x3b9aca00
 80096c8:	200093f8 	.word	0x200093f8
 80096cc:	200089f8 	.word	0x200089f8
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80096d0:	2910      	cmp	r1, #16
 80096d2:	4448      	add	r0, r9
 80096d4:	f000 822b 	beq.w	8009b2e <BSP_I2C4_Init+0x6d6>
      if (tscldel >= (uint32_t)tscldel_min)
 80096d8:	f240 3779 	movw	r7, #889	; 0x379
 80096dc:	460d      	mov	r5, r1
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 80096de:	3101      	adds	r1, #1
      if (tscldel >= (uint32_t)tscldel_min)
 80096e0:	42b8      	cmp	r0, r7
 80096e2:	d9f5      	bls.n	80096d0 <BSP_I2C4_Init+0x278>
            if(presc != prev_presc)
 80096e4:	2c00      	cmp	r4, #0
 80096e6:	f040 80e7 	bne.w	80098b8 <BSP_I2C4_Init+0x460>
 80096ea:	4296      	cmp	r6, r2
 80096ec:	f000 80e4 	beq.w	80098b8 <BSP_I2C4_Init+0x460>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80096f0:	eb03 0883 	add.w	r8, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 80096f4:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80096f6:	f04f 0a00 	mov.w	sl, #0
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80096fa:	4666      	mov	r6, ip
 80096fc:	eb0c 0e88 	add.w	lr, ip, r8, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009700:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009702:	f84c 2028 	str.w	r2, [ip, r8, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8009706:	e9ce 5a01 	strd	r5, sl, [lr, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800970a:	f200 819c 	bhi.w	8009a46 <BSP_I2C4_Init+0x5ee>
 800970e:	4616      	mov	r6, r2
            if(presc != prev_presc)
 8009710:	4296      	cmp	r6, r2
 8009712:	d013      	beq.n	800973c <BSP_I2C4_Init+0x2e4>
 8009714:	9f03      	ldr	r7, [sp, #12]
 8009716:	2f00      	cmp	r7, #0
 8009718:	f000 80ef 	beq.w	80098fa <BSP_I2C4_Init+0x4a2>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800971c:	eb03 0883 	add.w	r8, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 8009720:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8009722:	f04f 0a02 	mov.w	sl, #2
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009726:	4666      	mov	r6, ip
 8009728:	eb0c 0e88 	add.w	lr, ip, r8, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800972c:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800972e:	f84c 2028 	str.w	r2, [ip, r8, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8009732:	e9ce 5a01 	strd	r5, sl, [lr, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009736:	f200 8186 	bhi.w	8009a46 <BSP_I2C4_Init+0x5ee>
 800973a:	4616      	mov	r6, r2
            if(presc != prev_presc)
 800973c:	42b2      	cmp	r2, r6
 800973e:	f000 815e 	beq.w	80099fe <BSP_I2C4_Init+0x5a6>
 8009742:	9f05      	ldr	r7, [sp, #20]
 8009744:	2f00      	cmp	r7, #0
 8009746:	f000 80ef 	beq.w	8009928 <BSP_I2C4_Init+0x4d0>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800974a:	eb03 0883 	add.w	r8, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800974e:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8009750:	f04f 0a04 	mov.w	sl, #4
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009754:	4666      	mov	r6, ip
 8009756:	eb0c 0e88 	add.w	lr, ip, r8, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800975a:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800975c:	f84c 2028 	str.w	r2, [ip, r8, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8009760:	e9ce 5a01 	strd	r5, sl, [lr, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009764:	f200 816f 	bhi.w	8009a46 <BSP_I2C4_Init+0x5ee>
 8009768:	4616      	mov	r6, r2
            if(presc != prev_presc)
 800976a:	42b2      	cmp	r2, r6
 800976c:	f000 8147 	beq.w	80099fe <BSP_I2C4_Init+0x5a6>
 8009770:	9f07      	ldr	r7, [sp, #28]
 8009772:	2f00      	cmp	r7, #0
 8009774:	f000 80ed 	beq.w	8009952 <BSP_I2C4_Init+0x4fa>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009778:	eb03 0883 	add.w	r8, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800977c:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800977e:	f04f 0a06 	mov.w	sl, #6
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009782:	4666      	mov	r6, ip
 8009784:	eb0c 0e88 	add.w	lr, ip, r8, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009788:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800978a:	f84c 2028 	str.w	r2, [ip, r8, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800978e:	e9ce 5a01 	strd	r5, sl, [lr, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009792:	f200 8158 	bhi.w	8009a46 <BSP_I2C4_Init+0x5ee>
 8009796:	4616      	mov	r6, r2
            if(presc != prev_presc)
 8009798:	42b2      	cmp	r2, r6
 800979a:	f000 8130 	beq.w	80099fe <BSP_I2C4_Init+0x5a6>
 800979e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80097a0:	2f00      	cmp	r7, #0
 80097a2:	f000 80eb 	beq.w	800997c <BSP_I2C4_Init+0x524>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80097a6:	eb03 0883 	add.w	r8, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 80097aa:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80097ac:	f04f 0a08 	mov.w	sl, #8
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80097b0:	4666      	mov	r6, ip
 80097b2:	eb0c 0e88 	add.w	lr, ip, r8, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80097b6:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80097b8:	f84c 2028 	str.w	r2, [ip, r8, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80097bc:	e9ce 5a01 	strd	r5, sl, [lr, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80097c0:	f200 8141 	bhi.w	8009a46 <BSP_I2C4_Init+0x5ee>
 80097c4:	4616      	mov	r6, r2
            if(presc != prev_presc)
 80097c6:	42b2      	cmp	r2, r6
 80097c8:	f000 8119 	beq.w	80099fe <BSP_I2C4_Init+0x5a6>
 80097cc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80097ce:	2f00      	cmp	r7, #0
 80097d0:	f000 80e9 	beq.w	80099a6 <BSP_I2C4_Init+0x54e>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80097d4:	eb03 0883 	add.w	r8, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 80097d8:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80097da:	270a      	movs	r7, #10
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80097dc:	4666      	mov	r6, ip
 80097de:	eb0c 0e88 	add.w	lr, ip, r8, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80097e2:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80097e4:	f84c 2028 	str.w	r2, [ip, r8, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80097e8:	f8ce 5004 	str.w	r5, [lr, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80097ec:	f8ce 7008 	str.w	r7, [lr, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80097f0:	f200 8129 	bhi.w	8009a46 <BSP_I2C4_Init+0x5ee>
 80097f4:	4616      	mov	r6, r2
            if(presc != prev_presc)
 80097f6:	42b2      	cmp	r2, r6
 80097f8:	f000 8101 	beq.w	80099fe <BSP_I2C4_Init+0x5a6>
 80097fc:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80097fe:	2f00      	cmp	r7, #0
 8009800:	f000 80e7 	beq.w	80099d2 <BSP_I2C4_Init+0x57a>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009804:	eb03 0883 	add.w	r8, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 8009808:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800980a:	270c      	movs	r7, #12
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800980c:	4666      	mov	r6, ip
 800980e:	eb0c 0e88 	add.w	lr, ip, r8, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009812:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009814:	f84c 2028 	str.w	r2, [ip, r8, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8009818:	f8ce 5004 	str.w	r5, [lr, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800981c:	f8ce 7008 	str.w	r7, [lr, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009820:	f200 8111 	bhi.w	8009a46 <BSP_I2C4_Init+0x5ee>
 8009824:	4616      	mov	r6, r2
            if(presc != prev_presc)
 8009826:	42b2      	cmp	r2, r6
 8009828:	f000 80e9 	beq.w	80099fe <BSP_I2C4_Init+0x5a6>
 800982c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800982e:	2f00      	cmp	r7, #0
 8009830:	f000 80e5 	beq.w	80099fe <BSP_I2C4_Init+0x5a6>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009834:	eb03 0883 	add.w	r8, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 8009838:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800983a:	4666      	mov	r6, ip
 800983c:	eb0c 0e88 	add.w	lr, ip, r8, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009840:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009842:	f84c 2028 	str.w	r2, [ip, r8, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8009846:	f8ce 5004 	str.w	r5, [lr, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800984a:	f04f 050e 	mov.w	r5, #14
 800984e:	f8ce 5008 	str.w	r5, [lr, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009852:	f200 80f8 	bhi.w	8009a46 <BSP_I2C4_Init+0x5ee>
 8009856:	4616      	mov	r6, r2
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8009858:	e73a      	b.n	80096d0 <BSP_I2C4_Init+0x278>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800985a:	9b01      	ldr	r3, [sp, #4]
 800985c:	f10e 0e14 	add.w	lr, lr, #20
 8009860:	9a07      	ldr	r2, [sp, #28]
 8009862:	3301      	adds	r3, #1
 8009864:	4293      	cmp	r3, r2
 8009866:	9301      	str	r3, [sp, #4]
 8009868:	f040 810c 	bne.w	8009a84 <BSP_I2C4_Init+0x62c>
        if (idx < I2C_VALID_TIMING_NBR)
 800986c:	9b03      	ldr	r3, [sp, #12]
 800986e:	2b7f      	cmp	r3, #127	; 0x7f
 8009870:	d818      	bhi.n	80098a4 <BSP_I2C4_Init+0x44c>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8009872:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009876:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009878:	eb02 0483 	add.w	r4, r2, r3, lsl #2
 800987c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8009880:	6862      	ldr	r2, [r4, #4]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8009882:	7c23      	ldrb	r3, [r4, #16]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8009884:	0510      	lsls	r0, r2, #20
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8009886:	68a1      	ldr	r1, [r4, #8]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8009888:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800988c:	68e2      	ldr	r2, [r4, #12]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800988e:	f400 0070 	and.w	r0, r0, #15728640	; 0xf00000
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8009892:	0409      	lsls	r1, r1, #16
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8009894:	0212      	lsls	r2, r2, #8
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8009896:	4303      	orrs	r3, r0
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8009898:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800989c:	b292      	uxth	r2, r2
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800989e:	430b      	orrs	r3, r1
 80098a0:	4313      	orrs	r3, r2
 80098a2:	9300      	str	r3, [sp, #0]
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 80098a4:	9900      	ldr	r1, [sp, #0]
 80098a6:	48ab      	ldr	r0, [pc, #684]	; (8009b54 <BSP_I2C4_Init+0x6fc>)
 80098a8:	f7ff fdb6 	bl	8009418 <MX_I2C4_Init>
 80098ac:	2800      	cmp	r0, #0
 80098ae:	f43f adde 	beq.w	800946e <BSP_I2C4_Init+0x16>
          ret = BSP_ERROR_BUS_FAILURE;
 80098b2:	f06f 0007 	mvn.w	r0, #7
  return ret;
 80098b6:	e5db      	b.n	8009470 <BSP_I2C4_Init+0x18>
            if(presc != prev_presc)
 80098b8:	454c      	cmp	r4, r9
 80098ba:	bf8c      	ite	hi
 80098bc:	f04f 0e00 	movhi.w	lr, #0
 80098c0:	f04f 0e01 	movls.w	lr, #1
 80098c4:	45cb      	cmp	fp, r9
 80098c6:	bf38      	it	cc
 80098c8:	f04f 0e00 	movcc.w	lr, #0
 80098cc:	f1be 0f00 	cmp.w	lr, #0
 80098d0:	f43f af1e 	beq.w	8009710 <BSP_I2C4_Init+0x2b8>
 80098d4:	4296      	cmp	r6, r2
 80098d6:	f43f af31 	beq.w	800973c <BSP_I2C4_Init+0x2e4>
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80098da:	f04f 0a01 	mov.w	sl, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80098de:	eb03 0883 	add.w	r8, r3, r3, lsl #2
 80098e2:	4666      	mov	r6, ip
              I2c_valid_timing_nbr ++;
 80098e4:	4453      	add	r3, sl
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80098e6:	eb0c 0e88 	add.w	lr, ip, r8, lsl #2
 80098ea:	f84c 2028 	str.w	r2, [ip, r8, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80098ee:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80098f0:	e9ce 5a01 	strd	r5, sl, [lr, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80098f4:	f200 80a7 	bhi.w	8009a46 <BSP_I2C4_Init+0x5ee>
 80098f8:	4616      	mov	r6, r2
            if(presc != prev_presc)
 80098fa:	4296      	cmp	r6, r2
 80098fc:	f43f af1e 	beq.w	800973c <BSP_I2C4_Init+0x2e4>
 8009900:	9f04      	ldr	r7, [sp, #16]
 8009902:	2f00      	cmp	r7, #0
 8009904:	f43f af1a 	beq.w	800973c <BSP_I2C4_Init+0x2e4>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009908:	eb03 0883 	add.w	r8, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800990c:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800990e:	f04f 0a03 	mov.w	sl, #3
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009912:	4666      	mov	r6, ip
 8009914:	eb0c 0e88 	add.w	lr, ip, r8, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009918:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800991a:	f84c 2028 	str.w	r2, [ip, r8, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800991e:	e9ce 5a01 	strd	r5, sl, [lr, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009922:	f200 8090 	bhi.w	8009a46 <BSP_I2C4_Init+0x5ee>
 8009926:	4616      	mov	r6, r2
            if(presc != prev_presc)
 8009928:	42b2      	cmp	r2, r6
 800992a:	d068      	beq.n	80099fe <BSP_I2C4_Init+0x5a6>
 800992c:	9f06      	ldr	r7, [sp, #24]
 800992e:	2f00      	cmp	r7, #0
 8009930:	f43f af1b 	beq.w	800976a <BSP_I2C4_Init+0x312>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009934:	eb03 0883 	add.w	r8, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 8009938:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800993a:	f04f 0a05 	mov.w	sl, #5
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800993e:	4666      	mov	r6, ip
 8009940:	eb0c 0e88 	add.w	lr, ip, r8, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009944:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009946:	f84c 2028 	str.w	r2, [ip, r8, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800994a:	e9ce 5a01 	strd	r5, sl, [lr, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800994e:	d87a      	bhi.n	8009a46 <BSP_I2C4_Init+0x5ee>
 8009950:	4616      	mov	r6, r2
            if(presc != prev_presc)
 8009952:	42b2      	cmp	r2, r6
 8009954:	d053      	beq.n	80099fe <BSP_I2C4_Init+0x5a6>
 8009956:	9f08      	ldr	r7, [sp, #32]
 8009958:	2f00      	cmp	r7, #0
 800995a:	f43f af1d 	beq.w	8009798 <BSP_I2C4_Init+0x340>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800995e:	eb03 0883 	add.w	r8, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 8009962:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8009964:	f04f 0a07 	mov.w	sl, #7
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009968:	4666      	mov	r6, ip
 800996a:	eb0c 0e88 	add.w	lr, ip, r8, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800996e:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009970:	f84c 2028 	str.w	r2, [ip, r8, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8009974:	e9ce 5a01 	strd	r5, sl, [lr, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009978:	d865      	bhi.n	8009a46 <BSP_I2C4_Init+0x5ee>
 800997a:	4616      	mov	r6, r2
            if(presc != prev_presc)
 800997c:	42b2      	cmp	r2, r6
 800997e:	d03e      	beq.n	80099fe <BSP_I2C4_Init+0x5a6>
 8009980:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8009982:	2f00      	cmp	r7, #0
 8009984:	f43f af1f 	beq.w	80097c6 <BSP_I2C4_Init+0x36e>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009988:	eb03 0883 	add.w	r8, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 800998c:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800998e:	f04f 0a09 	mov.w	sl, #9
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009992:	4666      	mov	r6, ip
 8009994:	eb0c 0e88 	add.w	lr, ip, r8, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009998:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800999a:	f84c 2028 	str.w	r2, [ip, r8, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800999e:	e9ce 5a01 	strd	r5, sl, [lr, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80099a2:	d850      	bhi.n	8009a46 <BSP_I2C4_Init+0x5ee>
 80099a4:	4616      	mov	r6, r2
            if(presc != prev_presc)
 80099a6:	42b2      	cmp	r2, r6
 80099a8:	d029      	beq.n	80099fe <BSP_I2C4_Init+0x5a6>
 80099aa:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80099ac:	2f00      	cmp	r7, #0
 80099ae:	f43f af22 	beq.w	80097f6 <BSP_I2C4_Init+0x39e>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80099b2:	eb03 0883 	add.w	r8, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 80099b6:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80099b8:	270b      	movs	r7, #11
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80099ba:	4666      	mov	r6, ip
 80099bc:	eb0c 0e88 	add.w	lr, ip, r8, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80099c0:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80099c2:	f84c 2028 	str.w	r2, [ip, r8, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80099c6:	f8ce 5004 	str.w	r5, [lr, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80099ca:	f8ce 7008 	str.w	r7, [lr, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80099ce:	d83a      	bhi.n	8009a46 <BSP_I2C4_Init+0x5ee>
 80099d0:	4616      	mov	r6, r2
            if(presc != prev_presc)
 80099d2:	42b2      	cmp	r2, r6
 80099d4:	d013      	beq.n	80099fe <BSP_I2C4_Init+0x5a6>
 80099d6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80099d8:	2f00      	cmp	r7, #0
 80099da:	f43f af24 	beq.w	8009826 <BSP_I2C4_Init+0x3ce>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80099de:	eb03 0883 	add.w	r8, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 80099e2:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80099e4:	270d      	movs	r7, #13
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80099e6:	4666      	mov	r6, ip
 80099e8:	eb0c 0e88 	add.w	lr, ip, r8, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80099ec:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80099ee:	f84c 2028 	str.w	r2, [ip, r8, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80099f2:	f8ce 5004 	str.w	r5, [lr, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80099f6:	f8ce 7008 	str.w	r7, [lr, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80099fa:	d824      	bhi.n	8009a46 <BSP_I2C4_Init+0x5ee>
 80099fc:	4616      	mov	r6, r2
            if(presc != prev_presc)
 80099fe:	9f01      	ldr	r7, [sp, #4]
 8009a00:	42bc      	cmp	r4, r7
 8009a02:	46be      	mov	lr, r7
 8009a04:	bf8c      	ite	hi
 8009a06:	f04f 0e00 	movhi.w	lr, #0
 8009a0a:	f04f 0e01 	movls.w	lr, #1
 8009a0e:	45bb      	cmp	fp, r7
 8009a10:	bf38      	it	cc
 8009a12:	f04f 0e00 	movcc.w	lr, #0
 8009a16:	f1be 0f00 	cmp.w	lr, #0
 8009a1a:	f43f ae59 	beq.w	80096d0 <BSP_I2C4_Init+0x278>
 8009a1e:	42b2      	cmp	r2, r6
 8009a20:	f43f ae56 	beq.w	80096d0 <BSP_I2C4_Init+0x278>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009a24:	eb03 0883 	add.w	r8, r3, r3, lsl #2
              I2c_valid_timing_nbr ++;
 8009a28:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009a2a:	4666      	mov	r6, ip
 8009a2c:	eb0c 0e88 	add.w	lr, ip, r8, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009a30:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009a32:	f84c 2028 	str.w	r2, [ip, r8, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8009a36:	f8ce 5004 	str.w	r5, [lr, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8009a3a:	f04f 050f 	mov.w	r5, #15
 8009a3e:	f8ce 5008 	str.w	r5, [lr, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009a42:	f67f af08 	bls.w	8009856 <BSP_I2C4_Init+0x3fe>
 8009a46:	4a44      	ldr	r2, [pc, #272]	; (8009b58 <BSP_I2C4_Init+0x700>)
 8009a48:	9307      	str	r3, [sp, #28]
 8009a4a:	960b      	str	r6, [sp, #44]	; 0x2c
 8009a4c:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8009a4e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009a50:	f241 200c 	movw	r0, #4620	; 0x120c
 8009a54:	f640 739f 	movw	r3, #3999	; 0xf9f
 8009a58:	4c40      	ldr	r4, [pc, #256]	; (8009b5c <BSP_I2C4_Init+0x704>)
 8009a5a:	4611      	mov	r1, r2
 8009a5c:	f8df e100 	ldr.w	lr, [pc, #256]	; 8009b60 <BSP_I2C4_Init+0x708>
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8009a60:	f242 7b10 	movw	fp, #10000	; 0x2710
 8009a64:	3132      	adds	r1, #50	; 0x32
 8009a66:	9108      	str	r1, [sp, #32]
 8009a68:	1a81      	subs	r1, r0, r2
 8009a6a:	9109      	str	r1, [sp, #36]	; 0x24
 8009a6c:	9902      	ldr	r1, [sp, #8]
 8009a6e:	428b      	cmp	r3, r1
 8009a70:	bf38      	it	cc
 8009a72:	460b      	movcc	r3, r1
 8009a74:	9304      	str	r3, [sp, #16]
 8009a76:	1913      	adds	r3, r2, r4
 8009a78:	930a      	str	r3, [sp, #40]	; 0x28
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	9301      	str	r3, [sp, #4]
 8009a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8009a82:	9303      	str	r3, [sp, #12]
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8009a84:	9b02      	ldr	r3, [sp, #8]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8009a86:	2400      	movs	r4, #0
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8009a88:	f8de 0000 	ldr.w	r0, [lr]
 8009a8c:	fb00 3003 	mla	r0, r0, r3, r3
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8009a90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a92:	1a1f      	subs	r7, r3, r0
 8009a94:	9b08      	ldr	r3, [sp, #32]
 8009a96:	181a      	adds	r2, r3, r0
 8009a98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a9a:	007f      	lsls	r7, r7, #1
 8009a9c:	4403      	add	r3, r0
 8009a9e:	9306      	str	r3, [sp, #24]
 8009aa0:	e006      	b.n	8009ab0 <BSP_I2C4_Init+0x658>
 8009aa2:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8009aa6:	4402      	add	r2, r0
 8009aa8:	eba7 0700 	sub.w	r7, r7, r0
 8009aac:	f43f aed5 	beq.w	800985a <BSP_I2C4_Init+0x402>
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8009ab0:	f241 235c 	movw	r3, #4700	; 0x125c
 8009ab4:	46a0      	mov	r8, r4
 8009ab6:	f1a2 0532 	sub.w	r5, r2, #50	; 0x32
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8009aba:	3401      	adds	r4, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8009abc:	429a      	cmp	r2, r3
 8009abe:	d9f0      	bls.n	8009aa2 <BSP_I2C4_Init+0x64a>
 8009ac0:	9b02      	ldr	r3, [sp, #8]
 8009ac2:	ebb3 0f95 	cmp.w	r3, r5, lsr #2
 8009ac6:	d2ec      	bcs.n	8009aa2 <BSP_I2C4_Init+0x64a>
 8009ac8:	f242 4c4a 	movw	ip, #9290	; 0x244a
 8009acc:	9b06      	ldr	r3, [sp, #24]
 8009ace:	463e      	mov	r6, r7
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8009ad0:	2100      	movs	r1, #0
 8009ad2:	4413      	add	r3, r2
 8009ad4:	ebac 0c05 	sub.w	ip, ip, r5
 8009ad8:	4692      	mov	sl, r2
 8009ada:	9405      	str	r4, [sp, #20]
 8009adc:	e005      	b.n	8009aea <BSP_I2C4_Init+0x692>
 8009ade:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8009ae2:	eba6 0600 	sub.w	r6, r6, r0
 8009ae6:	4403      	add	r3, r0
 8009ae8:	d01e      	beq.n	8009b28 <BSP_I2C4_Init+0x6d0>
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8009aea:	eb0c 0503 	add.w	r5, ip, r3
 8009aee:	9c04      	ldr	r4, [sp, #16]
 8009af0:	460a      	mov	r2, r1
 8009af2:	f203 6983 	addw	r9, r3, #1667	; 0x683
 8009af6:	42a5      	cmp	r5, r4
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8009af8:	f101 0101 	add.w	r1, r1, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8009afc:	d9ef      	bls.n	8009ade <BSP_I2C4_Init+0x686>
 8009afe:	f241 0447 	movw	r4, #4167	; 0x1047
 8009b02:	45a1      	cmp	r9, r4
 8009b04:	d8eb      	bhi.n	8009ade <BSP_I2C4_Init+0x686>
            if (error < 0)
 8009b06:	ea33 0523 	bics.w	r5, r3, r3, asr #32
 8009b0a:	bf28      	it	cs
 8009b0c:	4635      	movcs	r5, r6
            if ((uint32_t)error < prev_error)
 8009b0e:	45ab      	cmp	fp, r5
 8009b10:	d9e5      	bls.n	8009ade <BSP_I2C4_Init+0x686>
              I2c_valid_timing[count].sclh = sclh;
 8009b12:	9c01      	ldr	r4, [sp, #4]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8009b14:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
              I2c_valid_timing[count].sclh = sclh;
 8009b18:	46ab      	mov	fp, r5
 8009b1a:	eba6 0600 	sub.w	r6, r6, r0
 8009b1e:	4403      	add	r3, r0
 8009b20:	9403      	str	r4, [sp, #12]
 8009b22:	e9ce 2803 	strd	r2, r8, [lr, #12]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8009b26:	d1e0      	bne.n	8009aea <BSP_I2C4_Init+0x692>
 8009b28:	9c05      	ldr	r4, [sp, #20]
 8009b2a:	4652      	mov	r2, sl
 8009b2c:	e7b9      	b.n	8009aa2 <BSP_I2C4_Init+0x64a>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8009b2e:	9902      	ldr	r1, [sp, #8]
 8009b30:	3201      	adds	r2, #1
 8009b32:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009b34:	4489      	add	r9, r1
 8009b36:	9901      	ldr	r1, [sp, #4]
 8009b38:	2a10      	cmp	r2, #16
 8009b3a:	4401      	add	r1, r0
 8009b3c:	9101      	str	r1, [sp, #4]
 8009b3e:	f47f ad17 	bne.w	8009570 <BSP_I2C4_Init+0x118>
 8009b42:	4a05      	ldr	r2, [pc, #20]	; (8009b58 <BSP_I2C4_Init+0x700>)
 8009b44:	9307      	str	r3, [sp, #28]
 8009b46:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	f43f aeab 	beq.w	80098a4 <BSP_I2C4_Init+0x44c>
 8009b4e:	4b04      	ldr	r3, [pc, #16]	; (8009b60 <BSP_I2C4_Init+0x708>)
 8009b50:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b52:	e77c      	b.n	8009a4e <BSP_I2C4_Init+0x5f6>
 8009b54:	2000a014 	.word	0x2000a014
 8009b58:	200093f8 	.word	0x200093f8
 8009b5c:	ffffdbb6 	.word	0xffffdbb6
 8009b60:	200089f8 	.word	0x200089f8

08009b64 <BSP_I2C4_WriteReg>:
{
 8009b64:	b530      	push	{r4, r5, lr}
 8009b66:	460d      	mov	r5, r1
 8009b68:	b085      	sub	sp, #20
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8009b6a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8009b6e:	4601      	mov	r1, r0
 8009b70:	9200      	str	r2, [sp, #0]
 8009b72:	462a      	mov	r2, r5
 8009b74:	9301      	str	r3, [sp, #4]
 8009b76:	2301      	movs	r3, #1
 8009b78:	4808      	ldr	r0, [pc, #32]	; (8009b9c <BSP_I2C4_WriteReg+0x38>)
 8009b7a:	9402      	str	r4, [sp, #8]
 8009b7c:	f004 fb7c 	bl	800e278 <HAL_I2C_Mem_Write>
 8009b80:	b908      	cbnz	r0, 8009b86 <BSP_I2C4_WriteReg+0x22>
}
 8009b82:	b005      	add	sp, #20
 8009b84:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8009b86:	4805      	ldr	r0, [pc, #20]	; (8009b9c <BSP_I2C4_WriteReg+0x38>)
 8009b88:	f004 fde8 	bl	800e75c <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8009b8c:	2804      	cmp	r0, #4
 8009b8e:	bf0c      	ite	eq
 8009b90:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 8009b94:	f06f 0003 	mvnne.w	r0, #3
 8009b98:	e7f3      	b.n	8009b82 <BSP_I2C4_WriteReg+0x1e>
 8009b9a:	bf00      	nop
 8009b9c:	2000a014 	.word	0x2000a014

08009ba0 <BSP_I2C4_ReadReg>:
{
 8009ba0:	b530      	push	{r4, r5, lr}
 8009ba2:	460d      	mov	r5, r1
 8009ba4:	b085      	sub	sp, #20
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8009ba6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8009baa:	4601      	mov	r1, r0
 8009bac:	9200      	str	r2, [sp, #0]
 8009bae:	462a      	mov	r2, r5
 8009bb0:	9301      	str	r3, [sp, #4]
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	4808      	ldr	r0, [pc, #32]	; (8009bd8 <BSP_I2C4_ReadReg+0x38>)
 8009bb6:	9402      	str	r4, [sp, #8]
 8009bb8:	f004 fc8e 	bl	800e4d8 <HAL_I2C_Mem_Read>
 8009bbc:	b908      	cbnz	r0, 8009bc2 <BSP_I2C4_ReadReg+0x22>
}
 8009bbe:	b005      	add	sp, #20
 8009bc0:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8009bc2:	4805      	ldr	r0, [pc, #20]	; (8009bd8 <BSP_I2C4_ReadReg+0x38>)
 8009bc4:	f004 fdca 	bl	800e75c <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8009bc8:	2804      	cmp	r0, #4
 8009bca:	bf0c      	ite	eq
 8009bcc:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 8009bd0:	f06f 0003 	mvnne.w	r0, #3
 8009bd4:	e7f3      	b.n	8009bbe <BSP_I2C4_ReadReg+0x1e>
 8009bd6:	bf00      	nop
 8009bd8:	2000a014 	.word	0x2000a014

08009bdc <BSP_I2C4_WriteReg16>:
{
 8009bdc:	b530      	push	{r4, r5, lr}
 8009bde:	460d      	mov	r5, r1
 8009be0:	b085      	sub	sp, #20
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8009be2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8009be6:	4601      	mov	r1, r0
 8009be8:	9200      	str	r2, [sp, #0]
 8009bea:	462a      	mov	r2, r5
 8009bec:	9301      	str	r3, [sp, #4]
 8009bee:	2302      	movs	r3, #2
 8009bf0:	4808      	ldr	r0, [pc, #32]	; (8009c14 <BSP_I2C4_WriteReg16+0x38>)
 8009bf2:	9402      	str	r4, [sp, #8]
 8009bf4:	f004 fb40 	bl	800e278 <HAL_I2C_Mem_Write>
 8009bf8:	b908      	cbnz	r0, 8009bfe <BSP_I2C4_WriteReg16+0x22>
}
 8009bfa:	b005      	add	sp, #20
 8009bfc:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8009bfe:	4805      	ldr	r0, [pc, #20]	; (8009c14 <BSP_I2C4_WriteReg16+0x38>)
 8009c00:	f004 fdac 	bl	800e75c <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8009c04:	2804      	cmp	r0, #4
 8009c06:	bf0c      	ite	eq
 8009c08:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 8009c0c:	f06f 0003 	mvnne.w	r0, #3
 8009c10:	e7f3      	b.n	8009bfa <BSP_I2C4_WriteReg16+0x1e>
 8009c12:	bf00      	nop
 8009c14:	2000a014 	.word	0x2000a014

08009c18 <BSP_I2C4_ReadReg16>:
{
 8009c18:	b530      	push	{r4, r5, lr}
 8009c1a:	460d      	mov	r5, r1
 8009c1c:	b085      	sub	sp, #20
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8009c1e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8009c22:	4601      	mov	r1, r0
 8009c24:	9200      	str	r2, [sp, #0]
 8009c26:	462a      	mov	r2, r5
 8009c28:	9301      	str	r3, [sp, #4]
 8009c2a:	2302      	movs	r3, #2
 8009c2c:	4808      	ldr	r0, [pc, #32]	; (8009c50 <BSP_I2C4_ReadReg16+0x38>)
 8009c2e:	9402      	str	r4, [sp, #8]
 8009c30:	f004 fc52 	bl	800e4d8 <HAL_I2C_Mem_Read>
 8009c34:	b908      	cbnz	r0, 8009c3a <BSP_I2C4_ReadReg16+0x22>
}
 8009c36:	b005      	add	sp, #20
 8009c38:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8009c3a:	4805      	ldr	r0, [pc, #20]	; (8009c50 <BSP_I2C4_ReadReg16+0x38>)
 8009c3c:	f004 fd8e 	bl	800e75c <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8009c40:	2804      	cmp	r0, #4
 8009c42:	bf0c      	ite	eq
 8009c44:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 8009c48:	f06f 0003 	mvnne.w	r0, #3
 8009c4c:	e7f3      	b.n	8009c36 <BSP_I2C4_ReadReg16+0x1e>
 8009c4e:	bf00      	nop
 8009c50:	2000a014 	.word	0x2000a014

08009c54 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 8009c54:	f001 baca 	b.w	800b1ec <HAL_GetTick>

08009c58 <BSP_CAMERA_DeInit>:
  * @brief  DeInitializes the camera.
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_DeInit(uint32_t Instance)
{
 8009c58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009c5c:	b089      	sub	sp, #36	; 0x24
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 8009c5e:	2800      	cmp	r0, #0
 8009c60:	d174      	bne.n	8009d4c <BSP_CAMERA_DeInit+0xf4>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    if((Camera_CompObj == NULL)||(Camera_Drv == NULL))
 8009c62:	4e3c      	ldr	r6, [pc, #240]	; (8009d54 <BSP_CAMERA_DeInit+0xfc>)
 8009c64:	6833      	ldr	r3, [r6, #0]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d06d      	beq.n	8009d46 <BSP_CAMERA_DeInit+0xee>
 8009c6a:	4f3b      	ldr	r7, [pc, #236]	; (8009d58 <BSP_CAMERA_DeInit+0x100>)
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d069      	beq.n	8009d46 <BSP_CAMERA_DeInit+0xee>
    {
      ret = BSP_ERROR_NO_INIT;
    }
    else
    {
      hcamera_dcmi.Instance = DCMI;
 8009c72:	4c3a      	ldr	r4, [pc, #232]	; (8009d5c <BSP_CAMERA_DeInit+0x104>)
 8009c74:	4b3a      	ldr	r3, [pc, #232]	; (8009d60 <BSP_CAMERA_DeInit+0x108>)

  if(Instance >= CAMERA_INSTANCES_NBR)
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else if(HAL_DCMI_Stop(&hcamera_dcmi) != HAL_OK)
 8009c76:	4620      	mov	r0, r4
      hcamera_dcmi.Instance = DCMI;
 8009c78:	6023      	str	r3, [r4, #0]
  else if(HAL_DCMI_Stop(&hcamera_dcmi) != HAL_OK)
 8009c7a:	f001 fc0f 	bl	800b49c <HAL_DCMI_Stop>
 8009c7e:	2800      	cmp	r0, #0
 8009c80:	d15b      	bne.n	8009d3a <BSP_CAMERA_DeInit+0xe2>
      else if(HAL_DCMI_DisableCROP(&hcamera_dcmi)!= HAL_OK)
 8009c82:	4620      	mov	r0, r4
 8009c84:	f001 fd26 	bl	800b6d4 <HAL_DCMI_DisableCrop>
 8009c88:	2800      	cmp	r0, #0
 8009c8a:	d156      	bne.n	8009d3a <BSP_CAMERA_DeInit+0xe2>
      else if(HAL_DCMI_DeInit(&hcamera_dcmi) != HAL_OK)
 8009c8c:	4620      	mov	r0, r4
 8009c8e:	f001 fbf9 	bl	800b484 <HAL_DCMI_DeInit>
 8009c92:	2800      	cmp	r0, #0
 8009c94:	d151      	bne.n	8009d3a <BSP_CAMERA_DeInit+0xe2>
static void DCMI_MspDeInit(DCMI_HandleTypeDef *hdcmi)
{
  GPIO_InitTypeDef gpio_init_structure;

  /* Disable NVIC  for DCMI transfer complete interrupt */
  HAL_NVIC_DisableIRQ(DCMI_IRQn);
 8009c96:	204e      	movs	r0, #78	; 0x4e
  HAL_GPIO_DeInit(GPIOG, gpio_init_structure.Pin);



  /* Disable DCMI clock */
  __HAL_RCC_DCMI_CLK_DISABLE();
 8009c98:	4d32      	ldr	r5, [pc, #200]	; (8009d64 <BSP_CAMERA_DeInit+0x10c>)
  HAL_NVIC_DisableIRQ(DCMI_IRQn);
 8009c9a:	f001 fb29 	bl	800b2f0 <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(DMA2_Stream3_IRQn);
 8009c9e:	203b      	movs	r0, #59	; 0x3b
 8009ca0:	f001 fb26 	bl	800b2f0 <HAL_NVIC_DisableIRQ>
  (void)HAL_DMA_DeInit(hdcmi->DMA_Handle);
 8009ca4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8009ca6:	f002 f8ab 	bl	800be00 <HAL_DMA_DeInit>
  HAL_GPIO_DeInit(GPIOA, gpio_init_structure.Pin);
 8009caa:	2150      	movs	r1, #80	; 0x50
 8009cac:	482e      	ldr	r0, [pc, #184]	; (8009d68 <BSP_CAMERA_DeInit+0x110>)
 8009cae:	f004 f8df 	bl	800de70 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOB, gpio_init_structure.Pin);
 8009cb2:	f44f 7160 	mov.w	r1, #896	; 0x380
 8009cb6:	482d      	ldr	r0, [pc, #180]	; (8009d6c <BSP_CAMERA_DeInit+0x114>)
 8009cb8:	f004 f8da 	bl	800de70 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOC, gpio_init_structure.Pin);
 8009cbc:	f44f 612c 	mov.w	r1, #2752	; 0xac0
 8009cc0:	482b      	ldr	r0, [pc, #172]	; (8009d70 <BSP_CAMERA_DeInit+0x118>)
 8009cc2:	f004 f8d5 	bl	800de70 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, gpio_init_structure.Pin);
 8009cc6:	2108      	movs	r1, #8
 8009cc8:	482a      	ldr	r0, [pc, #168]	; (8009d74 <BSP_CAMERA_DeInit+0x11c>)
 8009cca:	f004 f8d1 	bl	800de70 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, gpio_init_structure.Pin);
 8009cce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009cd2:	4829      	ldr	r0, [pc, #164]	; (8009d78 <BSP_CAMERA_DeInit+0x120>)
 8009cd4:	f004 f8cc 	bl	800de70 <HAL_GPIO_DeInit>
  __HAL_RCC_DCMI_CLK_DISABLE();
 8009cd8:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
        if(Camera_Drv->DeInit(Camera_CompObj) != BSP_ERROR_NONE)
 8009cdc:	6830      	ldr	r0, [r6, #0]
  __HAL_RCC_DCMI_CLK_DISABLE();
 8009cde:	f023 0301 	bic.w	r3, r3, #1
 8009ce2:	f8c5 30dc 	str.w	r3, [r5, #220]	; 0xdc
        if(Camera_Drv->DeInit(Camera_CompObj) != BSP_ERROR_NONE)
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	685b      	ldr	r3, [r3, #4]
 8009cea:	4798      	blx	r3
 8009cec:	4604      	mov	r4, r0
 8009cee:	bb38      	cbnz	r0, 8009d40 <BSP_CAMERA_DeInit+0xe8>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8009cf0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
    gpio_init_structure.Pin       = GPIO_PIN_14;
 8009cf4:	f44f 4680 	mov.w	r6, #16384	; 0x4000
 8009cf8:	2701      	movs	r7, #1
 8009cfa:	f04f 0800 	mov.w	r8, #0
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8009cfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    gpio_init_structure.Pin       = GPIO_PIN_14;
 8009d02:	f04f 0902 	mov.w	r9, #2
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8009d06:	a902      	add	r1, sp, #8
 8009d08:	481c      	ldr	r0, [pc, #112]	; (8009d7c <BSP_CAMERA_DeInit+0x124>)
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8009d0a:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8009d0e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8009d12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009d16:	9301      	str	r3, [sp, #4]
 8009d18:	9b01      	ldr	r3, [sp, #4]
    gpio_init_structure.Pin       = GPIO_PIN_14;
 8009d1a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009d1e:	e9cd 8904 	strd	r8, r9, [sp, #16]
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8009d22:	f003 ff87 	bl	800dc34 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_14, GPIO_PIN_SET);
 8009d26:	2201      	movs	r2, #1
 8009d28:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009d2c:	4813      	ldr	r0, [pc, #76]	; (8009d7c <BSP_CAMERA_DeInit+0x124>)
 8009d2e:	f004 f973 	bl	800e018 <HAL_GPIO_WritePin>
}
 8009d32:	4620      	mov	r0, r4
 8009d34:	b009      	add	sp, #36	; 0x24
 8009d36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ret = BSP_ERROR_PERIPH_FAILURE;
 8009d3a:	f06f 0403 	mvn.w	r4, #3
 8009d3e:	e7f8      	b.n	8009d32 <BSP_CAMERA_DeInit+0xda>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8009d40:	f06f 0404 	mvn.w	r4, #4
  return ret;
 8009d44:	e7f5      	b.n	8009d32 <BSP_CAMERA_DeInit+0xda>
      ret = BSP_ERROR_NO_INIT;
 8009d46:	f04f 34ff 	mov.w	r4, #4294967295
 8009d4a:	e7f2      	b.n	8009d32 <BSP_CAMERA_DeInit+0xda>
    ret = BSP_ERROR_WRONG_PARAM;
 8009d4c:	f06f 0401 	mvn.w	r4, #1
 8009d50:	e7ef      	b.n	8009d32 <BSP_CAMERA_DeInit+0xda>
 8009d52:	bf00      	nop
 8009d54:	20009428 	.word	0x20009428
 8009d58:	2000942c 	.word	0x2000942c
 8009d5c:	2000a060 	.word	0x2000a060
 8009d60:	48020000 	.word	0x48020000
 8009d64:	58024400 	.word	0x58024400
 8009d68:	58020000 	.word	0x58020000
 8009d6c:	58020400 	.word	0x58020400
 8009d70:	58020800 	.word	0x58020800
 8009d74:	58020c00 	.word	0x58020c00
 8009d78:	58021800 	.word	0x58021800
 8009d7c:	58022400 	.word	0x58022400

08009d80 <MX_DCMI_Init>:
  hdcmi->Init.HSPolarity       = HSPolarity;
 8009d80:	4a09      	ldr	r2, [pc, #36]	; (8009da8 <MX_DCMI_Init+0x28>)
  hdcmi->Init.PCKPolarity      = DCMI_PCKPOLARITY_RISING;
 8009d82:	2120      	movs	r1, #32
{
 8009d84:	b570      	push	{r4, r5, r6, lr}
  hdcmi->Init.HSPolarity       = HSPolarity;
 8009d86:	6815      	ldr	r5, [r2, #0]
  hdcmi->Init.VSPolarity       = DCMI_VSPOLARITY_HIGH;
 8009d88:	2480      	movs	r4, #128	; 0x80
  hdcmi->Init.CaptureRate      = DCMI_CR_ALL_FRAME;
 8009d8a:	2200      	movs	r2, #0
  hdcmi->Instance              = DCMI;
 8009d8c:	4e07      	ldr	r6, [pc, #28]	; (8009dac <MX_DCMI_Init+0x2c>)
  hdcmi->Init.PCKPolarity      = DCMI_PCKPOLARITY_RISING;
 8009d8e:	6081      	str	r1, [r0, #8]
  hdcmi->Instance              = DCMI;
 8009d90:	6006      	str	r6, [r0, #0]
  hdcmi->Init.CaptureRate      = DCMI_CR_ALL_FRAME;
 8009d92:	6142      	str	r2, [r0, #20]
  hdcmi->Init.SynchroMode      = DCMI_SYNCHRO_HARDWARE;
 8009d94:	6042      	str	r2, [r0, #4]
  hdcmi->Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8009d96:	6182      	str	r2, [r0, #24]
  hdcmi->Init.VSPolarity       = DCMI_VSPOLARITY_HIGH;
 8009d98:	e9c0 4503 	strd	r4, r5, [r0, #12]
  if(HAL_DCMI_Init(hdcmi) != HAL_OK)
 8009d9c:	f001 fb20 	bl	800b3e0 <HAL_DCMI_Init>
}
 8009da0:	3800      	subs	r0, #0
 8009da2:	bf18      	it	ne
 8009da4:	2001      	movne	r0, #1
 8009da6:	bd70      	pop	{r4, r5, r6, pc}
 8009da8:	20009430 	.word	0x20009430
 8009dac:	48020000 	.word	0x48020000

08009db0 <BSP_CAMERA_Init>:
{
 8009db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009db4:	b095      	sub	sp, #84	; 0x54
 8009db6:	9203      	str	r2, [sp, #12]
  if(Instance >= CAMERA_INSTANCES_NBR)
 8009db8:	2800      	cmp	r0, #0
 8009dba:	f040 8217 	bne.w	800a1ec <BSP_CAMERA_Init+0x43c>
  __HAL_RCC_DCMI_CLK_ENABLE();
 8009dbe:	4dcc      	ldr	r5, [pc, #816]	; (800a0f0 <BSP_CAMERA_Init+0x340>)
  gpio_init_structure.Pin       = GPIO_PIN_4 | GPIO_PIN_6;
 8009dc0:	f04f 0a50 	mov.w	sl, #80	; 0x50
 8009dc4:	f04f 0b02 	mov.w	fp, #2
 8009dc8:	f04f 0801 	mov.w	r8, #1
  __HAL_RCC_DCMI_CLK_ENABLE();
 8009dcc:	f8d5 20dc 	ldr.w	r2, [r5, #220]	; 0xdc
  gpio_init_structure.Pin       = GPIO_PIN_4 | GPIO_PIN_6;
 8009dd0:	f04f 0903 	mov.w	r9, #3
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 8009dd4:	270d      	movs	r7, #13
 8009dd6:	4606      	mov	r6, r0
  __HAL_RCC_DCMI_CLK_ENABLE();
 8009dd8:	f042 0201 	orr.w	r2, r2, #1
  HAL_GPIO_Init(GPIOA, &gpio_init_structure);
 8009ddc:	48c5      	ldr	r0, [pc, #788]	; (800a0f4 <BSP_CAMERA_Init+0x344>)
 8009dde:	460c      	mov	r4, r1
 8009de0:	a90e      	add	r1, sp, #56	; 0x38
  __HAL_RCC_DCMI_CLK_ENABLE();
 8009de2:	f8c5 20dc 	str.w	r2, [r5, #220]	; 0xdc
 8009de6:	f8d5 20dc 	ldr.w	r2, [r5, #220]	; 0xdc
 8009dea:	f002 0201 	and.w	r2, r2, #1
 8009dee:	9205      	str	r2, [sp, #20]
 8009df0:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8009df2:	f8d5 20d8 	ldr.w	r2, [r5, #216]	; 0xd8
 8009df6:	f042 0202 	orr.w	r2, r2, #2
 8009dfa:	f8c5 20d8 	str.w	r2, [r5, #216]	; 0xd8
 8009dfe:	f8d5 20d8 	ldr.w	r2, [r5, #216]	; 0xd8
 8009e02:	f002 0202 	and.w	r2, r2, #2
 8009e06:	9206      	str	r2, [sp, #24]
 8009e08:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009e0a:	f8d5 20e0 	ldr.w	r2, [r5, #224]	; 0xe0
 8009e0e:	f042 0201 	orr.w	r2, r2, #1
 8009e12:	f8c5 20e0 	str.w	r2, [r5, #224]	; 0xe0
 8009e16:	f8d5 20e0 	ldr.w	r2, [r5, #224]	; 0xe0
 8009e1a:	f002 0201 	and.w	r2, r2, #1
 8009e1e:	9207      	str	r2, [sp, #28]
 8009e20:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009e22:	f8d5 20e0 	ldr.w	r2, [r5, #224]	; 0xe0
 8009e26:	f042 0202 	orr.w	r2, r2, #2
 8009e2a:	f8c5 20e0 	str.w	r2, [r5, #224]	; 0xe0
 8009e2e:	f8d5 20e0 	ldr.w	r2, [r5, #224]	; 0xe0
 8009e32:	f002 0202 	and.w	r2, r2, #2
 8009e36:	9208      	str	r2, [sp, #32]
 8009e38:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009e3a:	f8d5 20e0 	ldr.w	r2, [r5, #224]	; 0xe0
 8009e3e:	f042 0204 	orr.w	r2, r2, #4
 8009e42:	f8c5 20e0 	str.w	r2, [r5, #224]	; 0xe0
 8009e46:	f8d5 20e0 	ldr.w	r2, [r5, #224]	; 0xe0
 8009e4a:	f002 0204 	and.w	r2, r2, #4
 8009e4e:	9209      	str	r2, [sp, #36]	; 0x24
 8009e50:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009e52:	f8d5 20e0 	ldr.w	r2, [r5, #224]	; 0xe0
 8009e56:	f042 0208 	orr.w	r2, r2, #8
 8009e5a:	f8c5 20e0 	str.w	r2, [r5, #224]	; 0xe0
 8009e5e:	f8d5 20e0 	ldr.w	r2, [r5, #224]	; 0xe0
 8009e62:	f002 0208 	and.w	r2, r2, #8
 8009e66:	920a      	str	r2, [sp, #40]	; 0x28
 8009e68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8009e6a:	f8d5 20e0 	ldr.w	r2, [r5, #224]	; 0xe0
 8009e6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e72:	f8c5 20e0 	str.w	r2, [r5, #224]	; 0xe0
 8009e76:	f8d5 20e0 	ldr.w	r2, [r5, #224]	; 0xe0
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 8009e7a:	9712      	str	r7, [sp, #72]	; 0x48
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8009e7c:	f002 0240 	and.w	r2, r2, #64	; 0x40
  gpio_init_structure.Pin       = GPIO_PIN_4 | GPIO_PIN_6;
 8009e80:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
  gpio_init_structure.Pin       = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 8009e84:	f44f 7a60 	mov.w	sl, #896	; 0x380
 8009e88:	f04f 0b02 	mov.w	fp, #2
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8009e8c:	920b      	str	r2, [sp, #44]	; 0x2c
 8009e8e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  gpio_init_structure.Pin       = GPIO_PIN_4 | GPIO_PIN_6;
 8009e90:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOA, &gpio_init_structure);
 8009e94:	f003 fece 	bl	800dc34 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &gpio_init_structure);
 8009e98:	a90e      	add	r1, sp, #56	; 0x38
 8009e9a:	4897      	ldr	r0, [pc, #604]	; (800a0f8 <BSP_CAMERA_Init+0x348>)
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 8009e9c:	9712      	str	r7, [sp, #72]	; 0x48
  gpio_init_structure.Pin       = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 8009e9e:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
  gpio_init_structure.Pin       = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_11;
 8009ea2:	f44f 6a2c 	mov.w	sl, #2752	; 0xac0
 8009ea6:	f04f 0b02 	mov.w	fp, #2
  gpio_init_structure.Pin       = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 8009eaa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOB, &gpio_init_structure);
 8009eae:	f003 fec1 	bl	800dc34 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8009eb2:	a90e      	add	r1, sp, #56	; 0x38
 8009eb4:	4891      	ldr	r0, [pc, #580]	; (800a0fc <BSP_CAMERA_Init+0x34c>)
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 8009eb6:	9712      	str	r7, [sp, #72]	; 0x48
  gpio_init_structure.Pin       = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_11;
 8009eb8:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
  gpio_init_structure.Pin       = GPIO_PIN_3;
 8009ebc:	f04f 0a08 	mov.w	sl, #8
 8009ec0:	f04f 0b02 	mov.w	fp, #2
  gpio_init_structure.Pin       = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_11;
 8009ec4:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8009ec8:	f003 feb4 	bl	800dc34 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8009ecc:	a90e      	add	r1, sp, #56	; 0x38
 8009ece:	488c      	ldr	r0, [pc, #560]	; (800a100 <BSP_CAMERA_Init+0x350>)
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 8009ed0:	9712      	str	r7, [sp, #72]	; 0x48
  gpio_init_structure.Pin       = GPIO_PIN_3;
 8009ed2:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
  gpio_init_structure.Pin       = GPIO_PIN_10;
 8009ed6:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 8009eda:	f04f 0b02 	mov.w	fp, #2
  gpio_init_structure.Pin       = GPIO_PIN_3;
 8009ede:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8009ee2:	f003 fea7 	bl	800dc34 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8009ee6:	a90e      	add	r1, sp, #56	; 0x38
 8009ee8:	4886      	ldr	r0, [pc, #536]	; (800a104 <BSP_CAMERA_Init+0x354>)
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 8009eea:	9712      	str	r7, [sp, #72]	; 0x48
  hdma_handler.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8009eec:	f44f 4780 	mov.w	r7, #16384	; 0x4000
  gpio_init_structure.Pin       = GPIO_PIN_10;
 8009ef0:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8009ef4:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8009ef8:	f003 fe9c 	bl	800dc34 <HAL_GPIO_Init>
  hdma_handler.Init.Request             = DMA_REQUEST_DCMI;
 8009efc:	4b82      	ldr	r3, [pc, #520]	; (800a108 <BSP_CAMERA_Init+0x358>)
 8009efe:	f04f 0e4b 	mov.w	lr, #75	; 0x4b
  hdma_handler.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 8009f02:	f04f 0904 	mov.w	r9, #4
  hdma_handler.Init.MemInc              = DMA_MINC_ENABLE;
 8009f06:	f44f 6a80 	mov.w	sl, #1024	; 0x400
  hdma_handler.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8009f0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  hdma_handler.Init.Request             = DMA_REQUEST_DCMI;
 8009f0e:	f8c3 e004 	str.w	lr, [r3, #4]
  hdma_handler.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8009f12:	f04f 0e03 	mov.w	lr, #3
  hdma_handler.Init.Mode                = DMA_CIRCULAR;
 8009f16:	f44f 7180 	mov.w	r1, #256	; 0x100
  hdma_handler.Init.Priority            = DMA_PRIORITY_HIGH;
 8009f1a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
  __HAL_LINKDMA(hdcmi, DMA_Handle, hdma_handler);
 8009f1e:	f8df 8214 	ldr.w	r8, [pc, #532]	; 800a134 <BSP_CAMERA_Init+0x384>
  hdma_handler.Init.Mode                = DMA_CIRCULAR;
 8009f22:	61d9      	str	r1, [r3, #28]
  HAL_NVIC_SetPriority(DCMI_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 8009f24:	210f      	movs	r1, #15
  hdma_handler.Init.Priority            = DMA_PRIORITY_HIGH;
 8009f26:	6218      	str	r0, [r3, #32]
  HAL_NVIC_SetPriority(DCMI_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 8009f28:	204e      	movs	r0, #78	; 0x4e
  hdma_handler.Init.MemBurst            = DMA_MBURST_SINGLE;
 8009f2a:	62de      	str	r6, [r3, #44]	; 0x2c
  hdma_handler.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 8009f2c:	631e      	str	r6, [r3, #48]	; 0x30
  hdma_handler.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8009f2e:	619f      	str	r7, [r3, #24]
  __HAL_LINKDMA(hdcmi, DMA_Handle, hdma_handler);
 8009f30:	f8c8 3048 	str.w	r3, [r8, #72]	; 0x48
 8009f34:	f8c3 8038 	str.w	r8, [r3, #56]	; 0x38
  hdma_handler.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8009f38:	e9c3 9e09 	strd	r9, lr, [r3, #36]	; 0x24
  hdma_handler.Instance                 = DMA2_Stream3;
 8009f3c:	f8df e1f8 	ldr.w	lr, [pc, #504]	; 800a138 <BSP_CAMERA_Init+0x388>
  hdma_handler.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8009f40:	e9c3 a204 	strd	sl, r2, [r3, #16]
  HAL_NVIC_SetPriority(DCMI_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 8009f44:	4632      	mov	r2, r6
  hdma_handler.Instance                 = DMA2_Stream3;
 8009f46:	f8c3 e000 	str.w	lr, [r3]
  hdma_handler.Init.PeriphInc           = DMA_PINC_DISABLE;
 8009f4a:	e9c3 6602 	strd	r6, r6, [r3, #8]
  HAL_NVIC_SetPriority(DCMI_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 8009f4e:	f001 f987 	bl	800b260 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8009f52:	204e      	movs	r0, #78	; 0x4e
 8009f54:	f001 f9be 	bl	800b2d4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 8009f58:	4632      	mov	r2, r6
 8009f5a:	210f      	movs	r1, #15
 8009f5c:	203b      	movs	r0, #59	; 0x3b
 8009f5e:	f001 f97f 	bl	800b260 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8009f62:	203b      	movs	r0, #59	; 0x3b
 8009f64:	f001 f9b6 	bl	800b2d4 <HAL_NVIC_EnableIRQ>
  (void)HAL_DMA_Init(hdcmi->DMA_Handle);
 8009f68:	f8d8 0048 	ldr.w	r0, [r8, #72]	; 0x48
 8009f6c:	f001 fcce 	bl	800b90c <HAL_DMA_Init>
    if(MX_DCMI_Init(&hcamera_dcmi) != HAL_OK)
 8009f70:	4640      	mov	r0, r8
 8009f72:	f7ff ff05 	bl	8009d80 <MX_DCMI_Init>
 8009f76:	4682      	mov	sl, r0
 8009f78:	2800      	cmp	r0, #0
 8009f7a:	f040 80b4 	bne.w	800a0e6 <BSP_CAMERA_Init+0x336>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8009f7e:	f8d5 00e0 	ldr.w	r0, [r5, #224]	; 0xe0
    gpio_init_structure.Pin       = GPIO_PIN_14;
 8009f82:	2301      	movs	r3, #1
 8009f84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009f88:	f04f 0800 	mov.w	r8, #0
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8009f8c:	f440 7c00 	orr.w	ip, r0, #512	; 0x200
    gpio_init_structure.Pin       = GPIO_PIN_14;
 8009f90:	f04f 0902 	mov.w	r9, #2
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8009f94:	a90e      	add	r1, sp, #56	; 0x38
 8009f96:	485d      	ldr	r0, [pc, #372]	; (800a10c <BSP_CAMERA_Init+0x35c>)
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8009f98:	f8c5 c0e0 	str.w	ip, [r5, #224]	; 0xe0
 8009f9c:	f8d5 50e0 	ldr.w	r5, [r5, #224]	; 0xe0
  static OV9655_Object_t   OV9655Obj;

  /* Configure the audio driver */
  IOCtx.Address     = CAMERA_OV9655_ADDRESS;
  IOCtx.Init        = BSP_I2C4_Init;
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8009fa0:	f8df b198 	ldr.w	fp, [pc, #408]	; 800a13c <BSP_CAMERA_Init+0x38c>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8009fa4:	f405 7500 	and.w	r5, r5, #512	; 0x200
 8009fa8:	950c      	str	r5, [sp, #48]	; 0x30
 8009faa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  IOCtx.Init        = BSP_I2C4_Init;
 8009fac:	4d58      	ldr	r5, [pc, #352]	; (800a110 <BSP_CAMERA_Init+0x360>)
    gpio_init_structure.Pin       = GPIO_PIN_14;
 8009fae:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009fb2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8009fb6:	f003 fe3d 	bl	800dc34 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOJ,GPIO_PIN_14, GPIO_PIN_SET);
 8009fba:	4639      	mov	r1, r7
 8009fbc:	2201      	movs	r2, #1
 8009fbe:	4853      	ldr	r0, [pc, #332]	; (800a10c <BSP_CAMERA_Init+0x35c>)
 8009fc0:	f004 f82a 	bl	800e018 <HAL_GPIO_WritePin>
    HAL_Delay(100);     /* POWER_DOWN de-asserted during 100 ms */
 8009fc4:	2064      	movs	r0, #100	; 0x64
 8009fc6:	f001 f917 	bl	800b1f8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOJ,GPIO_PIN_14, GPIO_PIN_RESET);
 8009fca:	4652      	mov	r2, sl
 8009fcc:	4639      	mov	r1, r7
 8009fce:	484f      	ldr	r0, [pc, #316]	; (800a10c <BSP_CAMERA_Init+0x35c>)
 8009fd0:	f004 f822 	bl	800e018 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8009fd4:	2014      	movs	r0, #20
 8009fd6:	f001 f90f 	bl	800b1f8 <HAL_Delay>
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
  IOCtx.GetTick     = BSP_GetTick;

  if(OV9655_RegisterBusIO (&OV9655Obj, &IOCtx) != OV9655_OK)
 8009fda:	4f4e      	ldr	r7, [pc, #312]	; (800a114 <BSP_CAMERA_Init+0x364>)
  IOCtx.Address     = CAMERA_OV9655_ADDRESS;
 8009fdc:	2160      	movs	r1, #96	; 0x60
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8009fde:	4a4e      	ldr	r2, [pc, #312]	; (800a118 <BSP_CAMERA_Init+0x368>)
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8009fe0:	4b4e      	ldr	r3, [pc, #312]	; (800a11c <BSP_CAMERA_Init+0x36c>)
  if(OV9655_RegisterBusIO (&OV9655Obj, &IOCtx) != OV9655_OK)
 8009fe2:	4638      	mov	r0, r7
  IOCtx.GetTick     = BSP_GetTick;
 8009fe4:	f8df a158 	ldr.w	sl, [pc, #344]	; 800a140 <BSP_CAMERA_Init+0x390>
  IOCtx.Address     = CAMERA_OV9655_ADDRESS;
 8009fe8:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
  if(OV9655_RegisterBusIO (&OV9655Obj, &IOCtx) != OV9655_OK)
 8009fec:	a90e      	add	r1, sp, #56	; 0x38
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8009fee:	9212      	str	r2, [sp, #72]	; 0x48
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8009ff0:	9311      	str	r3, [sp, #68]	; 0x44
  IOCtx.GetTick     = BSP_GetTick;
 8009ff2:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8009ff6:	e9cd 5b0e 	strd	r5, fp, [sp, #56]	; 0x38
  if(OV9655_RegisterBusIO (&OV9655Obj, &IOCtx) != OV9655_OK)
 8009ffa:	f7fe fffd 	bl	8008ff8 <OV9655_RegisterBusIO>
 8009ffe:	2800      	cmp	r0, #0
 800a000:	f040 80a6 	bne.w	800a150 <BSP_CAMERA_Init+0x3a0>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(OV9655_ReadID(&OV9655Obj, &CameraId) != OV9655_OK)
 800a004:	4d46      	ldr	r5, [pc, #280]	; (800a120 <BSP_CAMERA_Init+0x370>)
 800a006:	4638      	mov	r0, r7
 800a008:	4629      	mov	r1, r5
 800a00a:	f7fe ff41 	bl	8008e90 <OV9655_ReadID>
 800a00e:	2800      	cmp	r0, #0
 800a010:	f040 809e 	bne.w	800a150 <BSP_CAMERA_Init+0x3a0>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    if((CameraId != OV9655_ID) && (CameraId != OV9655_ID_2))
 800a014:	682a      	ldr	r2, [r5, #0]
 800a016:	4b43      	ldr	r3, [pc, #268]	; (800a124 <BSP_CAMERA_Init+0x374>)
 800a018:	4413      	add	r3, r2
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	f200 8098 	bhi.w	800a150 <BSP_CAMERA_Init+0x3a0>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
    }
    else
    {
      Camera_Drv = (CAMERA_Drv_t *) &OV9655_CAMERA_Driver;
 800a020:	f8df c120 	ldr.w	ip, [pc, #288]	; 800a144 <BSP_CAMERA_Init+0x394>
      Camera_CompObj = &OV9655Obj;
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV9655_OK)
 800a024:	4638      	mov	r0, r7
      Camera_CompObj = &OV9655Obj;
 800a026:	f8df 8120 	ldr.w	r8, [pc, #288]	; 800a148 <BSP_CAMERA_Init+0x398>
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV9655_OK)
 800a02a:	4621      	mov	r1, r4
      Camera_Drv = (CAMERA_Drv_t *) &OV9655_CAMERA_Driver;
 800a02c:	f8df 911c 	ldr.w	r9, [pc, #284]	; 800a14c <BSP_CAMERA_Init+0x39c>
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV9655_OK)
 800a030:	9a03      	ldr	r2, [sp, #12]
 800a032:	f8dc 3000 	ldr.w	r3, [ip]
      Camera_CompObj = &OV9655Obj;
 800a036:	f8c8 7000 	str.w	r7, [r8]
      Camera_Drv = (CAMERA_Drv_t *) &OV9655_CAMERA_Driver;
 800a03a:	f8c9 c000 	str.w	ip, [r9]
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV9655_OK)
 800a03e:	4798      	blx	r3
 800a040:	2800      	cmp	r0, #0
 800a042:	f040 8085 	bne.w	800a150 <BSP_CAMERA_Init+0x3a0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      else if(Camera_Drv->GetCapabilities(Camera_CompObj, &Camera_Cap) != OV9655_OK)
 800a046:	f8d9 3000 	ldr.w	r3, [r9]
 800a04a:	f8d8 0000 	ldr.w	r0, [r8]
 800a04e:	68db      	ldr	r3, [r3, #12]
 800a050:	4935      	ldr	r1, [pc, #212]	; (800a128 <BSP_CAMERA_Init+0x378>)
 800a052:	4798      	blx	r3
 800a054:	2800      	cmp	r0, #0
 800a056:	d17b      	bne.n	800a150 <BSP_CAMERA_Init+0x3a0>
        if((CameraId == OV9655_ID) || (CameraId == OV9655_ID_2))
 800a058:	682a      	ldr	r2, [r5, #0]
 800a05a:	4b32      	ldr	r3, [pc, #200]	; (800a124 <BSP_CAMERA_Init+0x374>)
 800a05c:	4413      	add	r3, r2
 800a05e:	2b01      	cmp	r3, #1
 800a060:	d839      	bhi.n	800a0d6 <BSP_CAMERA_Init+0x326>
          if(Resolution == CAMERA_R480x272)
 800a062:	2c02      	cmp	r4, #2
 800a064:	f000 80af 	beq.w	800a1c6 <BSP_CAMERA_Init+0x416>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800a068:	4b21      	ldr	r3, [pc, #132]	; (800a0f0 <BSP_CAMERA_Init+0x340>)
    gpio_init_structure.Pin       = GPIO_PIN_14;
 800a06a:	f44f 4880 	mov.w	r8, #16384	; 0x4000
 800a06e:	f04f 0901 	mov.w	r9, #1
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 800a072:	a90e      	add	r1, sp, #56	; 0x38
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800a074:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 800a078:	4824      	ldr	r0, [pc, #144]	; (800a10c <BSP_CAMERA_Init+0x35c>)
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800a07a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a07e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    gpio_init_structure.Pin       = GPIO_PIN_14;
 800a082:	2200      	movs	r2, #0
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800a084:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a088:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a08c:	930d      	str	r3, [sp, #52]	; 0x34
    gpio_init_structure.Pin       = GPIO_PIN_14;
 800a08e:	2302      	movs	r3, #2
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800a090:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    gpio_init_structure.Pin       = GPIO_PIN_14;
 800a092:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a096:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 800a09a:	f003 fdcb 	bl	800dc34 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOJ,GPIO_PIN_14, GPIO_PIN_SET);
 800a09e:	2201      	movs	r2, #1
 800a0a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a0a4:	4819      	ldr	r0, [pc, #100]	; (800a10c <BSP_CAMERA_Init+0x35c>)
 800a0a6:	f003 ffb7 	bl	800e018 <HAL_GPIO_WritePin>
    HAL_Delay(100);     /* POWER_DOWN de-asserted during 100 ms */
 800a0aa:	2064      	movs	r0, #100	; 0x64
 800a0ac:	f001 f8a4 	bl	800b1f8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOJ,GPIO_PIN_14, GPIO_PIN_RESET);
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a0b6:	4815      	ldr	r0, [pc, #84]	; (800a10c <BSP_CAMERA_Init+0x35c>)
 800a0b8:	f003 ffae 	bl	800e018 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 800a0bc:	2014      	movs	r0, #20
 800a0be:	f001 f89b 	bl	800b1f8 <HAL_Delay>
          Camera_Ctx[Instance].CameraId  = CameraId;
 800a0c2:	682a      	ldr	r2, [r5, #0]
 800a0c4:	4b19      	ldr	r3, [pc, #100]	; (800a12c <BSP_CAMERA_Init+0x37c>)
          Camera_Ctx[Instance].PixelFormat = PixelFormat;
 800a0c6:	2000      	movs	r0, #0
          Camera_Ctx[Instance].Resolution  = Resolution;
 800a0c8:	e9c3 2400 	strd	r2, r4, [r3]
          Camera_Ctx[Instance].PixelFormat = PixelFormat;
 800a0cc:	9a03      	ldr	r2, [sp, #12]
 800a0ce:	609a      	str	r2, [r3, #8]
}
 800a0d0:	b015      	add	sp, #84	; 0x54
 800a0d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          HSPolarity = DCMI_HSPOLARITY_HIGH;
 800a0d6:	4b16      	ldr	r3, [pc, #88]	; (800a130 <BSP_CAMERA_Init+0x380>)
 800a0d8:	2240      	movs	r2, #64	; 0x40
          if(MX_DCMI_Init(&hcamera_dcmi) != HAL_OK)
 800a0da:	4816      	ldr	r0, [pc, #88]	; (800a134 <BSP_CAMERA_Init+0x384>)
          HSPolarity = DCMI_HSPOLARITY_HIGH;
 800a0dc:	601a      	str	r2, [r3, #0]
          if(MX_DCMI_Init(&hcamera_dcmi) != HAL_OK)
 800a0de:	f7ff fe4f 	bl	8009d80 <MX_DCMI_Init>
 800a0e2:	2800      	cmp	r0, #0
 800a0e4:	d0c0      	beq.n	800a068 <BSP_CAMERA_Init+0x2b8>
      ret = BSP_ERROR_PERIPH_FAILURE;
 800a0e6:	f06f 0003 	mvn.w	r0, #3
}
 800a0ea:	b015      	add	sp, #84	; 0x54
 800a0ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0f0:	58024400 	.word	0x58024400
 800a0f4:	58020000 	.word	0x58020000
 800a0f8:	58020400 	.word	0x58020400
 800a0fc:	58020800 	.word	0x58020800
 800a100:	58020c00 	.word	0x58020c00
 800a104:	58021800 	.word	0x58021800
 800a108:	20009484 	.word	0x20009484
 800a10c:	58022400 	.word	0x58022400
 800a110:	08009459 	.word	0x08009459
 800a114:	2000945c 	.word	0x2000945c
 800a118:	08009ba1 	.word	0x08009ba1
 800a11c:	08009b65 	.word	0x08009b65
 800a120:	200093fc 	.word	0x200093fc
 800a124:	ffff69aa 	.word	0xffff69aa
 800a128:	20009400 	.word	0x20009400
 800a12c:	2000a0b0 	.word	0x2000a0b0
 800a130:	20009430 	.word	0x20009430
 800a134:	2000a060 	.word	0x2000a060
 800a138:	40020458 	.word	0x40020458
 800a13c:	080093c5 	.word	0x080093c5
 800a140:	08009c55 	.word	0x08009c55
 800a144:	200076b4 	.word	0x200076b4
 800a148:	20009428 	.word	0x20009428
 800a14c:	2000942c 	.word	0x2000942c
   int32_t ret;
  OV5640_IO_t              IOCtx;
  static OV5640_Object_t   OV5640Obj;

  /* Configure the audio driver */
  IOCtx.Address     = CAMERA_OV5640_ADDRESS;
 800a150:	2378      	movs	r3, #120	; 0x78
  IOCtx.Init        = BSP_I2C4_Init;
 800a152:	4a28      	ldr	r2, [pc, #160]	; (800a1f4 <BSP_CAMERA_Init+0x444>)
  IOCtx.DeInit      = BSP_I2C4_DeInit;
  IOCtx.ReadReg     = BSP_I2C4_ReadReg16;
  IOCtx.WriteReg    = BSP_I2C4_WriteReg16;
  IOCtx.GetTick     = BSP_GetTick;

  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 800a154:	4f28      	ldr	r7, [pc, #160]	; (800a1f8 <BSP_CAMERA_Init+0x448>)
 800a156:	a90e      	add	r1, sp, #56	; 0x38
  IOCtx.Init        = BSP_I2C4_Init;
 800a158:	920e      	str	r2, [sp, #56]	; 0x38
  IOCtx.Address     = CAMERA_OV5640_ADDRESS;
 800a15a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 800a15e:	4638      	mov	r0, r7
  IOCtx.ReadReg     = BSP_I2C4_ReadReg16;
 800a160:	4a26      	ldr	r2, [pc, #152]	; (800a1fc <BSP_CAMERA_Init+0x44c>)
  IOCtx.WriteReg    = BSP_I2C4_WriteReg16;
 800a162:	4b27      	ldr	r3, [pc, #156]	; (800a200 <BSP_CAMERA_Init+0x450>)
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800a164:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  IOCtx.GetTick     = BSP_GetTick;
 800a168:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
  IOCtx.WriteReg    = BSP_I2C4_WriteReg16;
 800a16c:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 800a170:	f7fe fa58 	bl	8008624 <OV5640_RegisterBusIO>
 800a174:	bb20      	cbnz	r0, 800a1c0 <BSP_CAMERA_Init+0x410>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(OV5640_ReadID(&OV5640Obj, &CameraId) != OV5640_OK)
 800a176:	4d23      	ldr	r5, [pc, #140]	; (800a204 <BSP_CAMERA_Init+0x454>)
 800a178:	4638      	mov	r0, r7
 800a17a:	4629      	mov	r1, r5
 800a17c:	f7fe f81a 	bl	80081b4 <OV5640_ReadID>
 800a180:	b9f0      	cbnz	r0, 800a1c0 <BSP_CAMERA_Init+0x410>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    if(CameraId != OV5640_ID)
 800a182:	682a      	ldr	r2, [r5, #0]
 800a184:	f245 6340 	movw	r3, #22080	; 0x5640
 800a188:	429a      	cmp	r2, r3
 800a18a:	d119      	bne.n	800a1c0 <BSP_CAMERA_Init+0x410>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
    }
    else
    {
      Camera_Drv = (CAMERA_Drv_t *) &OV5640_CAMERA_Driver;
 800a18c:	4b1e      	ldr	r3, [pc, #120]	; (800a208 <BSP_CAMERA_Init+0x458>)
      Camera_CompObj = &OV5640Obj;
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 800a18e:	4638      	mov	r0, r7
      Camera_CompObj = &OV5640Obj;
 800a190:	f8df 8080 	ldr.w	r8, [pc, #128]	; 800a214 <BSP_CAMERA_Init+0x464>
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 800a194:	4621      	mov	r1, r4
      Camera_Drv = (CAMERA_Drv_t *) &OV5640_CAMERA_Driver;
 800a196:	f8df 9080 	ldr.w	r9, [pc, #128]	; 800a218 <BSP_CAMERA_Init+0x468>
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 800a19a:	9a03      	ldr	r2, [sp, #12]
 800a19c:	f8d3 a000 	ldr.w	sl, [r3]
      Camera_CompObj = &OV5640Obj;
 800a1a0:	f8c8 7000 	str.w	r7, [r8]
      Camera_Drv = (CAMERA_Drv_t *) &OV5640_CAMERA_Driver;
 800a1a4:	f8c9 3000 	str.w	r3, [r9]
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 800a1a8:	47d0      	blx	sl
 800a1aa:	b948      	cbnz	r0, 800a1c0 <BSP_CAMERA_Init+0x410>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      else if(Camera_Drv->GetCapabilities(Camera_CompObj, &Camera_Cap) != OV5640_OK)
 800a1ac:	f8d9 3000 	ldr.w	r3, [r9]
 800a1b0:	f8d8 0000 	ldr.w	r0, [r8]
 800a1b4:	68db      	ldr	r3, [r3, #12]
 800a1b6:	4915      	ldr	r1, [pc, #84]	; (800a20c <BSP_CAMERA_Init+0x45c>)
 800a1b8:	4798      	blx	r3
 800a1ba:	2800      	cmp	r0, #0
 800a1bc:	f43f af4c 	beq.w	800a058 <BSP_CAMERA_Init+0x2a8>
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a1c0:	f06f 0006 	mvn.w	r0, #6
 800a1c4:	e784      	b.n	800a0d0 <BSP_CAMERA_Init+0x320>
            if(HAL_DCMI_ConfigCROP(&hcamera_dcmi,           /* Crop in the middle of the VGA picture */
 800a1c6:	f240 100f 	movw	r0, #271	; 0x10f
 800a1ca:	f240 33bf 	movw	r3, #959	; 0x3bf
 800a1ce:	2268      	movs	r2, #104	; 0x68
 800a1d0:	2150      	movs	r1, #80	; 0x50
 800a1d2:	9000      	str	r0, [sp, #0]
 800a1d4:	480e      	ldr	r0, [pc, #56]	; (800a210 <BSP_CAMERA_Init+0x460>)
 800a1d6:	f001 fa5f 	bl	800b698 <HAL_DCMI_ConfigCrop>
 800a1da:	2800      	cmp	r0, #0
 800a1dc:	d183      	bne.n	800a0e6 <BSP_CAMERA_Init+0x336>
              if(HAL_DCMI_EnableCROP(&hcamera_dcmi) != HAL_OK)
 800a1de:	480c      	ldr	r0, [pc, #48]	; (800a210 <BSP_CAMERA_Init+0x460>)
 800a1e0:	f001 fa92 	bl	800b708 <HAL_DCMI_EnableCrop>
 800a1e4:	2800      	cmp	r0, #0
 800a1e6:	f47f af7e 	bne.w	800a0e6 <BSP_CAMERA_Init+0x336>
 800a1ea:	e73d      	b.n	800a068 <BSP_CAMERA_Init+0x2b8>
    ret = BSP_ERROR_WRONG_PARAM;
 800a1ec:	f06f 0001 	mvn.w	r0, #1
  return ret;
 800a1f0:	e76e      	b.n	800a0d0 <BSP_CAMERA_Init+0x320>
 800a1f2:	bf00      	nop
 800a1f4:	08009459 	.word	0x08009459
 800a1f8:	20009434 	.word	0x20009434
 800a1fc:	08009c19 	.word	0x08009c19
 800a200:	08009bdd 	.word	0x08009bdd
 800a204:	200093fc 	.word	0x200093fc
 800a208:	20007670 	.word	0x20007670
 800a20c:	20009400 	.word	0x20009400
 800a210:	2000a060 	.word	0x2000a060
 800a214:	20009428 	.word	0x20009428
 800a218:	2000942c 	.word	0x2000942c

0800a21c <BSP_CAMERA_Suspend>:
  if(Instance >= CAMERA_INSTANCES_NBR)
 800a21c:	b948      	cbnz	r0, 800a232 <BSP_CAMERA_Suspend+0x16>
  else if(HAL_DCMI_Suspend(&hcamera_dcmi) != HAL_OK)
 800a21e:	4806      	ldr	r0, [pc, #24]	; (800a238 <BSP_CAMERA_Suspend+0x1c>)
{
 800a220:	b508      	push	{r3, lr}
  else if(HAL_DCMI_Suspend(&hcamera_dcmi) != HAL_OK)
 800a222:	f001 f97d 	bl	800b520 <HAL_DCMI_Suspend>
 800a226:	2800      	cmp	r0, #0
    return BSP_ERROR_PERIPH_FAILURE;
 800a228:	bf0c      	ite	eq
 800a22a:	2000      	moveq	r0, #0
 800a22c:	f06f 0003 	mvnne.w	r0, #3
}
 800a230:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800a232:	f06f 0001 	mvn.w	r0, #1
}
 800a236:	4770      	bx	lr
 800a238:	2000a060 	.word	0x2000a060

0800a23c <BSP_CAMERA_Resume>:
  if(Instance >= CAMERA_INSTANCES_NBR)
 800a23c:	b948      	cbnz	r0, 800a252 <BSP_CAMERA_Resume+0x16>
  else if(HAL_DCMI_Resume(&hcamera_dcmi) != HAL_OK)
 800a23e:	4806      	ldr	r0, [pc, #24]	; (800a258 <BSP_CAMERA_Resume+0x1c>)
{
 800a240:	b508      	push	{r3, lr}
  else if(HAL_DCMI_Resume(&hcamera_dcmi) != HAL_OK)
 800a242:	f001 f9b1 	bl	800b5a8 <HAL_DCMI_Resume>
 800a246:	2800      	cmp	r0, #0
    ret = BSP_ERROR_NONE;
 800a248:	bf14      	ite	ne
 800a24a:	f06f 0003 	mvnne.w	r0, #3
 800a24e:	2000      	moveq	r0, #0
}
 800a250:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800a252:	f06f 0001 	mvn.w	r0, #1
}
 800a256:	4770      	bx	lr
 800a258:	2000a060 	.word	0x2000a060

0800a25c <BSP_CAMERA_SetBrightness>:
  if((Instance >= CAMERA_INSTANCES_NBR) || ((Brightness < CAMERA_BRIGHTNESS_MIN) && (Brightness > CAMERA_BRIGHTNESS_MAX)))
 800a25c:	b988      	cbnz	r0, 800a282 <BSP_CAMERA_SetBrightness+0x26>
{
 800a25e:	b538      	push	{r3, r4, r5, lr}
  else if(Camera_Cap.Brightness == 0U)
 800a260:	4b0c      	ldr	r3, [pc, #48]	; (800a294 <BSP_CAMERA_SetBrightness+0x38>)
 800a262:	68db      	ldr	r3, [r3, #12]
 800a264:	b183      	cbz	r3, 800a288 <BSP_CAMERA_SetBrightness+0x2c>
  else if(Camera_Drv->SetBrightness(Camera_CompObj, Brightness) < 0)
 800a266:	4b0c      	ldr	r3, [pc, #48]	; (800a298 <BSP_CAMERA_SetBrightness+0x3c>)
 800a268:	4604      	mov	r4, r0
 800a26a:	4a0c      	ldr	r2, [pc, #48]	; (800a29c <BSP_CAMERA_SetBrightness+0x40>)
 800a26c:	460d      	mov	r5, r1
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	6810      	ldr	r0, [r2, #0]
 800a272:	699b      	ldr	r3, [r3, #24]
 800a274:	4798      	blx	r3
 800a276:	2800      	cmp	r0, #0
 800a278:	db09      	blt.n	800a28e <BSP_CAMERA_SetBrightness+0x32>
    Camera_Ctx[Instance].Brightness = Brightness;
 800a27a:	4b09      	ldr	r3, [pc, #36]	; (800a2a0 <BSP_CAMERA_SetBrightness+0x44>)
    ret = BSP_ERROR_NONE;
 800a27c:	4620      	mov	r0, r4
    Camera_Ctx[Instance].Brightness = Brightness;
 800a27e:	615d      	str	r5, [r3, #20]
}
 800a280:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800a282:	f06f 0001 	mvn.w	r0, #1
}
 800a286:	4770      	bx	lr
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800a288:	f06f 000a 	mvn.w	r0, #10
}
 800a28c:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800a28e:	f06f 0004 	mvn.w	r0, #4
}
 800a292:	bd38      	pop	{r3, r4, r5, pc}
 800a294:	20009400 	.word	0x20009400
 800a298:	2000942c 	.word	0x2000942c
 800a29c:	20009428 	.word	0x20009428
 800a2a0:	2000a0b0 	.word	0x2000a0b0

0800a2a4 <BSP_CAMERA_SetContrast>:
  if((Instance >= CAMERA_INSTANCES_NBR) || ((Contrast < CAMERA_CONTRAST_MIN) && (Contrast > CAMERA_CONTRAST_MAX)))
 800a2a4:	b988      	cbnz	r0, 800a2ca <BSP_CAMERA_SetContrast+0x26>
{
 800a2a6:	b538      	push	{r3, r4, r5, lr}
  else if(Camera_Cap.Contrast == 0U)
 800a2a8:	4b0c      	ldr	r3, [pc, #48]	; (800a2dc <BSP_CAMERA_SetContrast+0x38>)
 800a2aa:	695b      	ldr	r3, [r3, #20]
 800a2ac:	b183      	cbz	r3, 800a2d0 <BSP_CAMERA_SetContrast+0x2c>
  else if(Camera_Drv->SetContrast(Camera_CompObj, Contrast)  < 0)
 800a2ae:	4b0c      	ldr	r3, [pc, #48]	; (800a2e0 <BSP_CAMERA_SetContrast+0x3c>)
 800a2b0:	4604      	mov	r4, r0
 800a2b2:	4a0c      	ldr	r2, [pc, #48]	; (800a2e4 <BSP_CAMERA_SetContrast+0x40>)
 800a2b4:	460d      	mov	r5, r1
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	6810      	ldr	r0, [r2, #0]
 800a2ba:	6a1b      	ldr	r3, [r3, #32]
 800a2bc:	4798      	blx	r3
 800a2be:	2800      	cmp	r0, #0
 800a2c0:	db09      	blt.n	800a2d6 <BSP_CAMERA_SetContrast+0x32>
    Camera_Ctx[Instance].Contrast = Contrast;
 800a2c2:	4b09      	ldr	r3, [pc, #36]	; (800a2e8 <BSP_CAMERA_SetContrast+0x44>)
    ret = BSP_ERROR_NONE;
 800a2c4:	4620      	mov	r0, r4
    Camera_Ctx[Instance].Contrast = Contrast;
 800a2c6:	61dd      	str	r5, [r3, #28]
}
 800a2c8:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800a2ca:	f06f 0001 	mvn.w	r0, #1
}
 800a2ce:	4770      	bx	lr
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800a2d0:	f06f 000a 	mvn.w	r0, #10
}
 800a2d4:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800a2d6:	f06f 0004 	mvn.w	r0, #4
}
 800a2da:	bd38      	pop	{r3, r4, r5, pc}
 800a2dc:	20009400 	.word	0x20009400
 800a2e0:	2000942c 	.word	0x2000942c
 800a2e4:	20009428 	.word	0x20009428
 800a2e8:	2000a0b0 	.word	0x2000a0b0

0800a2ec <BSP_CAMERA_SetMirrorFlip>:
  if(Instance >= CAMERA_INSTANCES_NBR)
 800a2ec:	b988      	cbnz	r0, 800a312 <BSP_CAMERA_SetMirrorFlip+0x26>
{
 800a2ee:	b538      	push	{r3, r4, r5, lr}
  else if(Camera_Cap.MirrorFlip == 0U)
 800a2f0:	4b0c      	ldr	r3, [pc, #48]	; (800a324 <BSP_CAMERA_SetMirrorFlip+0x38>)
 800a2f2:	69db      	ldr	r3, [r3, #28]
 800a2f4:	b183      	cbz	r3, 800a318 <BSP_CAMERA_SetMirrorFlip+0x2c>
  else if(Camera_Drv->MirrorFlipConfig(Camera_CompObj, MirrorFlip)  < 0)
 800a2f6:	4b0c      	ldr	r3, [pc, #48]	; (800a328 <BSP_CAMERA_SetMirrorFlip+0x3c>)
 800a2f8:	4604      	mov	r4, r0
 800a2fa:	4a0c      	ldr	r2, [pc, #48]	; (800a32c <BSP_CAMERA_SetMirrorFlip+0x40>)
 800a2fc:	460d      	mov	r5, r1
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	6810      	ldr	r0, [r2, #0]
 800a302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a304:	4798      	blx	r3
 800a306:	2800      	cmp	r0, #0
 800a308:	db09      	blt.n	800a31e <BSP_CAMERA_SetMirrorFlip+0x32>
    Camera_Ctx[Instance].MirrorFlip = MirrorFlip;
 800a30a:	4b09      	ldr	r3, [pc, #36]	; (800a330 <BSP_CAMERA_SetMirrorFlip+0x44>)
    ret = BSP_ERROR_NONE;
 800a30c:	4620      	mov	r0, r4
    Camera_Ctx[Instance].MirrorFlip = MirrorFlip;
 800a30e:	625d      	str	r5, [r3, #36]	; 0x24
}
 800a310:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800a312:	f06f 0001 	mvn.w	r0, #1
}
 800a316:	4770      	bx	lr
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800a318:	f06f 000a 	mvn.w	r0, #10
}
 800a31c:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800a31e:	f06f 0004 	mvn.w	r0, #4
}
 800a322:	bd38      	pop	{r3, r4, r5, pc}
 800a324:	20009400 	.word	0x20009400
 800a328:	2000942c 	.word	0x2000942c
 800a32c:	20009428 	.word	0x20009428
 800a330:	2000a0b0 	.word	0x2000a0b0

0800a334 <BSP_CAMERA_PwrDown>:
  if(Instance >= CAMERA_INSTANCES_NBR)
 800a334:	bb48      	cbnz	r0, 800a38a <BSP_CAMERA_PwrDown+0x56>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800a336:	4b16      	ldr	r3, [pc, #88]	; (800a390 <BSP_CAMERA_PwrDown+0x5c>)
 800a338:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a33c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
{
 800a340:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800a344:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
{
 800a348:	b088      	sub	sp, #32
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800a34a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    gpio_init_structure.Pin       = GPIO_PIN_14;
 800a34e:	f44f 4680 	mov.w	r6, #16384	; 0x4000
 800a352:	2701      	movs	r7, #1
 800a354:	f04f 0800 	mov.w	r8, #0
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800a358:	f403 7300 	and.w	r3, r3, #512	; 0x200
    gpio_init_structure.Pin       = GPIO_PIN_14;
 800a35c:	f04f 0902 	mov.w	r9, #2
 800a360:	4604      	mov	r4, r0
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 800a362:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800a364:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 800a366:	480b      	ldr	r0, [pc, #44]	; (800a394 <BSP_CAMERA_PwrDown+0x60>)
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800a368:	9b01      	ldr	r3, [sp, #4]
    gpio_init_structure.Pin       = GPIO_PIN_14;
 800a36a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a36e:	e9cd 8904 	strd	r8, r9, [sp, #16]
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 800a372:	f003 fc5f 	bl	800dc34 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_14, GPIO_PIN_SET);
 800a376:	2201      	movs	r2, #1
 800a378:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a37c:	4805      	ldr	r0, [pc, #20]	; (800a394 <BSP_CAMERA_PwrDown+0x60>)
 800a37e:	f003 fe4b 	bl	800e018 <HAL_GPIO_WritePin>
  int32_t ret = BSP_ERROR_NONE;
 800a382:	4620      	mov	r0, r4
}
 800a384:	b008      	add	sp, #32
 800a386:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800a38a:	f06f 0001 	mvn.w	r0, #1
}
 800a38e:	4770      	bx	lr
 800a390:	58024400 	.word	0x58024400
 800a394:	58022400 	.word	0x58022400

0800a398 <BSP_CAMERA_IRQHandler>:
  HAL_DCMI_IRQHandler(&hcamera_dcmi);
 800a398:	4801      	ldr	r0, [pc, #4]	; (800a3a0 <BSP_CAMERA_IRQHandler+0x8>)
 800a39a:	f001 b92f 	b.w	800b5fc <HAL_DCMI_IRQHandler>
 800a39e:	bf00      	nop
 800a3a0:	2000a060 	.word	0x2000a060

0800a3a4 <BSP_CAMERA_DMA_IRQHandler>:
  HAL_DMA_IRQHandler(hcamera_dcmi.DMA_Handle);
 800a3a4:	4b01      	ldr	r3, [pc, #4]	; (800a3ac <BSP_CAMERA_DMA_IRQHandler+0x8>)
 800a3a6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800a3a8:	f002 ba3e 	b.w	800c828 <HAL_DMA_IRQHandler>
 800a3ac:	2000a060 	.word	0x2000a060

0800a3b0 <BSP_CAMERA_LineEventCallback>:
}
 800a3b0:	4770      	bx	lr
 800a3b2:	bf00      	nop

0800a3b4 <HAL_DCMI_LineEventCallback>:
  BSP_CAMERA_LineEventCallback(0);
 800a3b4:	2000      	movs	r0, #0
{
 800a3b6:	b508      	push	{r3, lr}
  BSP_CAMERA_LineEventCallback(0);
 800a3b8:	f7ff fffa 	bl	800a3b0 <BSP_CAMERA_LineEventCallback>
}
 800a3bc:	bd08      	pop	{r3, pc}
 800a3be:	bf00      	nop

0800a3c0 <HAL_DCMI_FrameEventCallback>:
  BSP_CAMERA_FrameEventCallback(0);
 800a3c0:	2000      	movs	r0, #0
{
 800a3c2:	b508      	push	{r3, lr}
  BSP_CAMERA_FrameEventCallback(0);
 800a3c4:	f7f7 f8fa 	bl	80015bc <BSP_CAMERA_FrameEventCallback>
}
 800a3c8:	bd08      	pop	{r3, pc}
 800a3ca:	bf00      	nop

0800a3cc <HAL_DCMI_VsyncEventCallback>:
  BSP_CAMERA_VsyncEventCallback(0);
 800a3cc:	2000      	movs	r0, #0
{
 800a3ce:	b508      	push	{r3, lr}
  BSP_CAMERA_VsyncEventCallback(0);
 800a3d0:	f7f7 f910 	bl	80015f4 <BSP_CAMERA_VsyncEventCallback>
}
 800a3d4:	bd08      	pop	{r3, pc}
 800a3d6:	bf00      	nop

0800a3d8 <HAL_DCMI_ErrorCallback>:
  BSP_CAMERA_ErrorCallback(0);
 800a3d8:	2000      	movs	r0, #0
{
 800a3da:	b508      	push	{r3, lr}
  BSP_CAMERA_ErrorCallback(0);
 800a3dc:	f7f7 f940 	bl	8001660 <BSP_CAMERA_ErrorCallback>
}
 800a3e0:	bd08      	pop	{r3, pc}
 800a3e2:	bf00      	nop

0800a3e4 <BSP_LCD_SetActiveLayer>:
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 800a3e4:	b910      	cbnz	r0, 800a3ec <BSP_LCD_SetActiveLayer+0x8>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 800a3e6:	4b03      	ldr	r3, [pc, #12]	; (800a3f4 <BSP_LCD_SetActiveLayer+0x10>)
 800a3e8:	6099      	str	r1, [r3, #8]
 800a3ea:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 800a3ec:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 800a3f0:	4770      	bx	lr
 800a3f2:	bf00      	nop
 800a3f4:	2000a18c 	.word	0x2000a18c

0800a3f8 <BSP_LCD_GetPixelFormat>:
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 800a3f8:	b918      	cbnz	r0, 800a402 <BSP_LCD_GetPixelFormat+0xa>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 800a3fa:	4b03      	ldr	r3, [pc, #12]	; (800a408 <BSP_LCD_GetPixelFormat+0x10>)
 800a3fc:	68db      	ldr	r3, [r3, #12]
 800a3fe:	600b      	str	r3, [r1, #0]
 800a400:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 800a402:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 800a406:	4770      	bx	lr
 800a408:	2000a18c 	.word	0x2000a18c

0800a40c <BSP_LCD_GetXSize>:
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 800a40c:	b948      	cbnz	r0, 800a422 <BSP_LCD_GetXSize+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else if(Lcd_Drv->GetXSize != NULL)
 800a40e:	4b06      	ldr	r3, [pc, #24]	; (800a428 <BSP_LCD_GetXSize+0x1c>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a414:	b11b      	cbz	r3, 800a41e <BSP_LCD_GetXSize+0x12>
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 800a416:	4b05      	ldr	r3, [pc, #20]	; (800a42c <BSP_LCD_GetXSize+0x20>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	600b      	str	r3, [r1, #0]
 800a41c:	4770      	bx	lr
  int32_t ret = BSP_ERROR_NONE;
 800a41e:	4618      	mov	r0, r3
  }

  return ret;
}
 800a420:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 800a422:	f06f 0001 	mvn.w	r0, #1
 800a426:	4770      	bx	lr
 800a428:	20009500 	.word	0x20009500
 800a42c:	2000a18c 	.word	0x2000a18c

0800a430 <BSP_LCD_GetYSize>:
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 800a430:	b948      	cbnz	r0, 800a446 <BSP_LCD_GetYSize+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else if(Lcd_Drv->GetYSize != NULL)
 800a432:	4b06      	ldr	r3, [pc, #24]	; (800a44c <BSP_LCD_GetYSize+0x1c>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a438:	b11b      	cbz	r3, 800a442 <BSP_LCD_GetYSize+0x12>
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 800a43a:	4b05      	ldr	r3, [pc, #20]	; (800a450 <BSP_LCD_GetYSize+0x20>)
 800a43c:	685b      	ldr	r3, [r3, #4]
 800a43e:	600b      	str	r3, [r1, #0]
 800a440:	4770      	bx	lr
  int32_t ret = BSP_ERROR_NONE;
 800a442:	4618      	mov	r0, r3
  }

  return ret;
}
 800a444:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 800a446:	f06f 0001 	mvn.w	r0, #1
 800a44a:	4770      	bx	lr
 800a44c:	20009500 	.word	0x20009500
 800a450:	2000a18c 	.word	0x2000a18c

0800a454 <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 800a454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a458:	e9dd 7408 	ldrd	r7, r4, [sp, #32]
    }
    pData += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
 800a45c:	b324      	cbz	r4, 800a4a8 <BSP_LCD_FillRGBRect+0x54>
 800a45e:	b31f      	cbz	r7, 800a4a8 <BSP_LCD_FillRGBRect+0x54>
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a460:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800a464:	4d1a      	ldr	r5, [pc, #104]	; (800a4d0 <BSP_LCD_FillRGBRect+0x7c>)
 800a466:	eb04 0802 	add.w	r8, r4, r2
 800a46a:	440f      	add	r7, r1
 800a46c:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 800a470:	f8df e060 	ldr.w	lr, [pc, #96]	; 800a4d4 <BSP_LCD_FillRGBRect+0x80>
 800a474:	f04f 0c34 	mov.w	ip, #52	; 0x34
{
 800a478:	460c      	mov	r4, r1
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a47a:	68a8      	ldr	r0, [r5, #8]
 800a47c:	f8d3 9000 	ldr.w	r9, [r3]
 800a480:	fb0c e000 	mla	r0, ip, r0, lr
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800a484:	fa1f fa89 	uxth.w	sl, r9
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a488:	6c86      	ldr	r6, [r0, #72]	; 0x48
 800a48a:	b986      	cbnz	r6, 800a4ae <BSP_LCD_FillRGBRect+0x5a>
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800a48c:	682e      	ldr	r6, [r5, #0]
 800a48e:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 800a490:	fb06 4602 	mla	r6, r6, r2, r4
 800a494:	3401      	adds	r4, #1
 800a496:	f840 9026 	str.w	r9, [r0, r6, lsl #2]
    for(j = 0; j < Width; j++)
 800a49a:	42bc      	cmp	r4, r7
      pData += Lcd_Ctx[Instance].BppFactor;
 800a49c:	6928      	ldr	r0, [r5, #16]
 800a49e:	4403      	add	r3, r0
    for(j = 0; j < Width; j++)
 800a4a0:	d1eb      	bne.n	800a47a <BSP_LCD_FillRGBRect+0x26>
  for(i = 0; i < Height; i++)
 800a4a2:	3201      	adds	r2, #1
 800a4a4:	4542      	cmp	r2, r8
 800a4a6:	d1e7      	bne.n	800a478 <BSP_LCD_FillRGBRect+0x24>
}
 800a4a8:	2000      	movs	r0, #0
 800a4aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800a4ae:	682e      	ldr	r6, [r5, #0]
 800a4b0:	f8d0 905c 	ldr.w	r9, [r0, #92]	; 0x5c
 800a4b4:	fb06 4602 	mla	r6, r6, r2, r4
 800a4b8:	3401      	adds	r4, #1
      pData += Lcd_Ctx[Instance].BppFactor;
 800a4ba:	6928      	ldr	r0, [r5, #16]
    for(j = 0; j < Width; j++)
 800a4bc:	42a7      	cmp	r7, r4
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800a4be:	f829 a016 	strh.w	sl, [r9, r6, lsl #1]
      pData += Lcd_Ctx[Instance].BppFactor;
 800a4c2:	4403      	add	r3, r0
    for(j = 0; j < Width; j++)
 800a4c4:	d1d9      	bne.n	800a47a <BSP_LCD_FillRGBRect+0x26>
  for(i = 0; i < Height; i++)
 800a4c6:	3201      	adds	r2, #1
 800a4c8:	4542      	cmp	r2, r8
 800a4ca:	d1d5      	bne.n	800a478 <BSP_LCD_FillRGBRect+0x24>
 800a4cc:	e7ec      	b.n	800a4a8 <BSP_LCD_FillRGBRect+0x54>
 800a4ce:	bf00      	nop
 800a4d0:	2000a18c 	.word	0x2000a18c
 800a4d4:	2000a0e4 	.word	0x2000a0e4

0800a4d8 <BSP_LCD_ReadPixel>:
{
 800a4d8:	b4f0      	push	{r4, r5, r6, r7}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a4da:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800a4de:	4e10      	ldr	r6, [pc, #64]	; (800a520 <BSP_LCD_ReadPixel+0x48>)
 800a4e0:	4f10      	ldr	r7, [pc, #64]	; (800a524 <BSP_LCD_ReadPixel+0x4c>)
 800a4e2:	f04f 0c34 	mov.w	ip, #52	; 0x34
 800a4e6:	eb06 0580 	add.w	r5, r6, r0, lsl #2
 800a4ea:	0080      	lsls	r0, r0, #2
 800a4ec:	68ac      	ldr	r4, [r5, #8]
 800a4ee:	fb0c 7404 	mla	r4, ip, r4, r7
 800a4f2:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 800a4f4:	b94d      	cbnz	r5, 800a50a <BSP_LCD_ReadPixel+0x32>
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 800a4f6:	5830      	ldr	r0, [r6, r0]
 800a4f8:	6de4      	ldr	r4, [r4, #92]	; 0x5c
 800a4fa:	fb00 1202 	mla	r2, r0, r2, r1
}
 800a4fe:	2000      	movs	r0, #0
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 800a500:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
}
 800a504:	bcf0      	pop	{r4, r5, r6, r7}
 800a506:	601a      	str	r2, [r3, #0]
 800a508:	4770      	bx	lr
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 800a50a:	5835      	ldr	r5, [r6, r0]
 800a50c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800a50e:	fb05 1202 	mla	r2, r5, r2, r1
 800a512:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
}
 800a516:	2000      	movs	r0, #0
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 800a518:	b292      	uxth	r2, r2
}
 800a51a:	bcf0      	pop	{r4, r5, r6, r7}
 800a51c:	601a      	str	r2, [r3, #0]
 800a51e:	4770      	bx	lr
 800a520:	2000a18c 	.word	0x2000a18c
 800a524:	2000a0e4 	.word	0x2000a0e4

0800a528 <BSP_LCD_WritePixel>:
{
 800a528:	b4f0      	push	{r4, r5, r6, r7}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a52a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800a52e:	4e0f      	ldr	r6, [pc, #60]	; (800a56c <BSP_LCD_WritePixel+0x44>)
 800a530:	4f0f      	ldr	r7, [pc, #60]	; (800a570 <BSP_LCD_WritePixel+0x48>)
 800a532:	f04f 0c34 	mov.w	ip, #52	; 0x34
 800a536:	eb06 0580 	add.w	r5, r6, r0, lsl #2
 800a53a:	0080      	lsls	r0, r0, #2
 800a53c:	68ac      	ldr	r4, [r5, #8]
 800a53e:	fb0c 7404 	mla	r4, ip, r4, r7
 800a542:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 800a544:	b945      	cbnz	r5, 800a558 <BSP_LCD_WritePixel+0x30>
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800a546:	5830      	ldr	r0, [r6, r0]
 800a548:	6de4      	ldr	r4, [r4, #92]	; 0x5c
 800a54a:	fb00 1202 	mla	r2, r0, r2, r1
  }

  return BSP_ERROR_NONE;
}
 800a54e:	2000      	movs	r0, #0
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800a550:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
}
 800a554:	bcf0      	pop	{r4, r5, r6, r7}
 800a556:	4770      	bx	lr
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800a558:	5835      	ldr	r5, [r6, r0]
 800a55a:	b29b      	uxth	r3, r3
 800a55c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800a55e:	fb05 1202 	mla	r2, r5, r2, r1
}
 800a562:	bcf0      	pop	{r4, r5, r6, r7}
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800a564:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
}
 800a568:	2000      	movs	r0, #0
 800a56a:	4770      	bx	lr
 800a56c:	2000a18c 	.word	0x2000a18c
 800a570:	2000a0e4 	.word	0x2000a0e4

0800a574 <DSI_IO_Read>:
  * @param  pData pointer to a buffer to store the payload of a read back operation.
  * @param  Size  Data size to be read (in byte).
  * @retval BSP status
  */
static int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t *pData, uint16_t Size)
{
 800a574:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  if(HAL_DSI_Read(&hlcd_dsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 800a576:	2406      	movs	r4, #6
{
 800a578:	b084      	sub	sp, #16
  if(HAL_DSI_Read(&hlcd_dsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 800a57a:	9101      	str	r1, [sp, #4]
 800a57c:	4601      	mov	r1, r0
 800a57e:	9202      	str	r2, [sp, #8]
 800a580:	9400      	str	r4, [sp, #0]
 800a582:	4805      	ldr	r0, [pc, #20]	; (800a598 <DSI_IO_Read+0x24>)
 800a584:	f003 faaa 	bl	800dadc <HAL_DSI_Read>
 800a588:	2800      	cmp	r0, #0
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }

  return ret;
}
 800a58a:	bf14      	ite	ne
 800a58c:	f06f 0007 	mvnne.w	r0, #7
 800a590:	2000      	moveq	r0, #0
 800a592:	b004      	add	sp, #16
 800a594:	bd10      	pop	{r4, pc}
 800a596:	bf00      	nop
 800a598:	2000a1a8 	.word	0x2000a1a8

0800a59c <BSP_LCD_DrawBitmap>:
{
 800a59c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800a5a0:	ebc0 0cc0 	rsb	ip, r0, r0, lsl #3
 800a5a4:	4e4f      	ldr	r6, [pc, #316]	; (800a6e4 <BSP_LCD_DrawBitmap+0x148>)
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800a5a6:	7d1c      	ldrb	r4, [r3, #20]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800a5a8:	f04f 0934 	mov.w	r9, #52	; 0x34
 800a5ac:	eb06 078c 	add.w	r7, r6, ip, lsl #2
 800a5b0:	f856 802c 	ldr.w	r8, [r6, ip, lsl #2]
 800a5b4:	f8df e138 	ldr.w	lr, [pc, #312]	; 800a6f0 <BSP_LCD_DrawBitmap+0x154>
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800a5b8:	0424      	lsls	r4, r4, #16
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800a5ba:	fb08 1202 	mla	r2, r8, r2, r1
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800a5be:	f893 c013 	ldrb.w	ip, [r3, #19]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800a5c2:	68b9      	ldr	r1, [r7, #8]
{
 800a5c4:	b085      	sub	sp, #20
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800a5c6:	7b1d      	ldrb	r5, [r3, #12]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800a5c8:	eb04 240c 	add.w	r4, r4, ip, lsl #8
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800a5cc:	fb09 e101 	mla	r1, r9, r1, lr
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800a5d0:	f893 800b 	ldrb.w	r8, [r3, #11]
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 800a5d4:	f893 c01d 	ldrb.w	ip, [r3, #29]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800a5d8:	042d      	lsls	r5, r5, #16
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800a5da:	f893 a018 	ldrb.w	sl, [r3, #24]
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 800a5de:	f893 901c 	ldrb.w	r9, [r3, #28]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800a5e2:	eb05 2508 	add.w	r5, r5, r8, lsl #8
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800a5e6:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800a5e8:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800a5ec:	f8d7 8010 	ldr.w	r8, [r7, #16]
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 800a5f0:	eb09 290c 	add.w	r9, r9, ip, lsl #8
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800a5f4:	7c9f      	ldrb	r7, [r3, #18]
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800a5f6:	f893 e017 	ldrb.w	lr, [r3, #23]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800a5fa:	fb08 1802 	mla	r8, r8, r2, r1
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800a5fe:	f893 c00a 	ldrb.w	ip, [r3, #10]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800a602:	443c      	add	r4, r7
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800a604:	eb0a 2a0e 	add.w	sl, sl, lr, lsl #8
 800a608:	7d9f      	ldrb	r7, [r3, #22]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800a60a:	4465      	add	r5, ip
 800a60c:	7b59      	ldrb	r1, [r3, #13]
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800a60e:	44ba      	add	sl, r7
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800a610:	7d5f      	ldrb	r7, [r3, #21]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800a612:	eb05 6101 	add.w	r1, r5, r1, lsl #24
  if ((bit_pixel/8U) == 4U)
 800a616:	f1a9 0520 	sub.w	r5, r9, #32
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800a61a:	7e5a      	ldrb	r2, [r3, #25]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800a61c:	eb04 6407 	add.w	r4, r4, r7, lsl #24
  if ((bit_pixel/8U) == 4U)
 800a620:	2d07      	cmp	r5, #7
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800a622:	eb0a 6a02 	add.w	sl, sl, r2, lsl #24
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800a626:	9403      	str	r4, [sp, #12]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800a628:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  if ((bit_pixel/8U) == 4U)
 800a62c:	d957      	bls.n	800a6de <BSP_LCD_DrawBitmap+0x142>
  else if ((bit_pixel/8U) == 2U)
 800a62e:	f1a9 0410 	sub.w	r4, r9, #16
    input_color_mode = DMA2D_INPUT_RGB888;
 800a632:	2c08      	cmp	r4, #8
 800a634:	bf34      	ite	cc
 800a636:	f04f 0b02 	movcc.w	fp, #2
 800a63a:	f04f 0b01 	movcs.w	fp, #1
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 800a63e:	ea4f 09d9 	mov.w	r9, r9, lsr #3
 800a642:	9c03      	ldr	r4, [sp, #12]
 800a644:	f10a 35ff 	add.w	r5, sl, #4294967295
 800a648:	fb04 f909 	mul.w	r9, r4, r9
 800a64c:	fb09 1505 	mla	r5, r9, r5, r1
 800a650:	441d      	add	r5, r3
  for(index=0; index < height; index++)
 800a652:	f1ba 0f00 	cmp.w	sl, #0
 800a656:	d03e      	beq.n	800a6d6 <BSP_LCD_DrawBitmap+0x13a>
  switch(Lcd_Ctx[Instance].PixelFormat)
 800a658:	1a10      	subs	r0, r2, r0
    pbmp -= width*(bit_pixel/8U);
 800a65a:	f1c9 0900 	rsb	r9, r9, #0
  for(index=0; index < height; index++)
 800a65e:	2700      	movs	r7, #0
 800a660:	4c21      	ldr	r4, [pc, #132]	; (800a6e8 <BSP_LCD_DrawBitmap+0x14c>)
  switch(Lcd_Ctx[Instance].PixelFormat)
 800a662:	eb06 0680 	add.w	r6, r6, r0, lsl #2
 800a666:	e006      	b.n	800a676 <BSP_LCD_DrawBitmap+0xda>
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 800a668:	6833      	ldr	r3, [r6, #0]
  for(index=0; index < height; index++)
 800a66a:	45ba      	cmp	sl, r7
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 800a66c:	6932      	ldr	r2, [r6, #16]
    pbmp -= width*(bit_pixel/8U);
 800a66e:	444d      	add	r5, r9
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 800a670:	fb02 8803 	mla	r8, r2, r3, r8
  for(index=0; index < height; index++)
 800a674:	d02f      	beq.n	800a6d6 <BSP_LCD_DrawBitmap+0x13a>
  switch(Lcd_Ctx[Instance].PixelFormat)
 800a676:	68f3      	ldr	r3, [r6, #12]
  hlcd_dma2d.Init.OutputOffset = 0;
 800a678:	2200      	movs	r2, #0
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 800a67a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 800a67e:	f04f 0cff 	mov.w	ip, #255	; 0xff
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 800a682:	2b02      	cmp	r3, #2
  hlcd_dma2d.Instance = DMA2D;
 800a684:	4919      	ldr	r1, [pc, #100]	; (800a6ec <BSP_LCD_DrawBitmap+0x150>)
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
 800a686:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
  for(index=0; index < height; index++)
 800a68a:	f107 0701 	add.w	r7, r7, #1
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 800a68e:	bf18      	it	ne
 800a690:	4613      	movne	r3, r2
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800a692:	64e2      	str	r2, [r4, #76]	; 0x4c
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 800a694:	6462      	str	r2, [r4, #68]	; 0x44
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 800a696:	f8c4 c050 	str.w	ip, [r4, #80]	; 0x50
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 800a69a:	e9c4 1000 	strd	r1, r0, [r4]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800a69e:	4812      	ldr	r0, [pc, #72]	; (800a6e8 <BSP_LCD_DrawBitmap+0x14c>)
  hlcd_dma2d.Init.OutputOffset = 0;
 800a6a0:	e9c4 3202 	strd	r3, r2, [r4, #8]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800a6a4:	f002 fc20 	bl	800cee8 <HAL_DMA2D_Init>
 800a6a8:	2800      	cmp	r0, #0
 800a6aa:	d1dd      	bne.n	800a668 <BSP_LCD_DrawBitmap+0xcc>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 800a6ac:	2101      	movs	r1, #1
 800a6ae:	480e      	ldr	r0, [pc, #56]	; (800a6e8 <BSP_LCD_DrawBitmap+0x14c>)
 800a6b0:	f002 fe70 	bl	800d394 <HAL_DMA2D_ConfigLayer>
 800a6b4:	2800      	cmp	r0, #0
 800a6b6:	d1d7      	bne.n	800a668 <BSP_LCD_DrawBitmap+0xcc>
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 800a6b8:	2001      	movs	r0, #1
 800a6ba:	9b03      	ldr	r3, [sp, #12]
 800a6bc:	4642      	mov	r2, r8
 800a6be:	4629      	mov	r1, r5
 800a6c0:	9000      	str	r0, [sp, #0]
 800a6c2:	4809      	ldr	r0, [pc, #36]	; (800a6e8 <BSP_LCD_DrawBitmap+0x14c>)
 800a6c4:	f002 fcda 	bl	800d07c <HAL_DMA2D_Start>
 800a6c8:	2800      	cmp	r0, #0
 800a6ca:	d1cd      	bne.n	800a668 <BSP_LCD_DrawBitmap+0xcc>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 800a6cc:	2132      	movs	r1, #50	; 0x32
 800a6ce:	4806      	ldr	r0, [pc, #24]	; (800a6e8 <BSP_LCD_DrawBitmap+0x14c>)
 800a6d0:	f002 fd30 	bl	800d134 <HAL_DMA2D_PollForTransfer>
 800a6d4:	e7c8      	b.n	800a668 <BSP_LCD_DrawBitmap+0xcc>
}
 800a6d6:	2000      	movs	r0, #0
 800a6d8:	b005      	add	sp, #20
 800a6da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color_mode = DMA2D_INPUT_ARGB8888;
 800a6de:	f04f 0b00 	mov.w	fp, #0
 800a6e2:	e7ac      	b.n	800a63e <BSP_LCD_DrawBitmap+0xa2>
 800a6e4:	2000a18c 	.word	0x2000a18c
 800a6e8:	2000a1c4 	.word	0x2000a1c4
 800a6ec:	52001000 	.word	0x52001000
 800a6f0:	2000a0e4 	.word	0x2000a0e4

0800a6f4 <BSP_LCD_DrawVLine>:
{
 800a6f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800a6f8:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a7e0 <BSP_LCD_DrawVLine+0xec>
{
 800a6fc:	461d      	mov	r5, r3
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800a6fe:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
{
 800a702:	4616      	mov	r6, r2
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 800a704:	eb02 0e05 	add.w	lr, r2, r5
{
 800a708:	460f      	mov	r7, r1
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800a70a:	eb0c 0483 	add.w	r4, ip, r3, lsl #2
 800a70e:	f85c 8023 	ldr.w	r8, [ip, r3, lsl #2]
 800a712:	00c3      	lsls	r3, r0, #3
 800a714:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 800a7e4 <BSP_LCD_DrawVLine+0xf0>
 800a718:	f04f 0a34 	mov.w	sl, #52	; 0x34
{
 800a71c:	b083      	sub	sp, #12
  switch(Lcd_Ctx[Instance].PixelFormat)
 800a71e:	1a18      	subs	r0, r3, r0
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 800a720:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
  switch(Lcd_Ctx[Instance].PixelFormat)
 800a724:	eb0c 0c80 	add.w	ip, ip, r0, lsl #2
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 800a728:	458e      	cmp	lr, r1
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800a72a:	fb0a 9202 	mla	r2, sl, r2, r9
 800a72e:	f8d4 a010 	ldr.w	sl, [r4, #16]
    Length = Lcd_Ctx[Instance].YSize - Ypos;
 800a732:	bf88      	it	hi
 800a734:	1b8d      	subhi	r5, r1, r6
  switch(Lcd_Ctx[Instance].PixelFormat)
 800a736:	f8dc 100c 	ldr.w	r1, [ip, #12]
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800a73a:	f8d2 905c 	ldr.w	r9, [r2, #92]	; 0x5c
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 800a73e:	f108 32ff 	add.w	r2, r8, #4294967295
  switch(Lcd_Ctx[Instance].PixelFormat)
 800a742:	2902      	cmp	r1, #2
{
 800a744:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  switch(Lcd_Ctx[Instance].PixelFormat)
 800a746:	d013      	beq.n	800a770 <BSP_LCD_DrawVLine+0x7c>
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 800a748:	2100      	movs	r1, #0
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 800a74a:	f8df b09c 	ldr.w	fp, [pc, #156]	; 800a7e8 <BSP_LCD_DrawVLine+0xf4>
 800a74e:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
  hlcd_dma2d.Instance = DMA2D;
 800a752:	4b22      	ldr	r3, [pc, #136]	; (800a7dc <BSP_LCD_DrawVLine+0xe8>)
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800a754:	4658      	mov	r0, fp
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 800a756:	f8cb 1008 	str.w	r1, [fp, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 800a75a:	f8cb 200c 	str.w	r2, [fp, #12]
  hlcd_dma2d.Instance = DMA2D;
 800a75e:	e9cb 3c00 	strd	r3, ip, [fp]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800a762:	f002 fbc1 	bl	800cee8 <HAL_DMA2D_Init>
 800a766:	b310      	cbz	r0, 800a7ae <BSP_LCD_DrawVLine+0xba>
}
 800a768:	2000      	movs	r0, #0
 800a76a:	b003      	add	sp, #12
 800a76c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color = CONVERTRGB5652ARGB8888(Color);
 800a770:	f3c4 1345 	ubfx	r3, r4, #5, #6
 800a774:	f3c4 20c4 	ubfx	r0, r4, #11, #5
 800a778:	f004 0c1f 	and.w	ip, r4, #31
 800a77c:	eb03 14c3 	add.w	r4, r3, r3, lsl #7
 800a780:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 800a784:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 800a788:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
 800a78c:	3421      	adds	r4, #33	; 0x21
 800a78e:	eb0c 130c 	add.w	r3, ip, ip, lsl #4
 800a792:	3017      	adds	r0, #23
 800a794:	09a4      	lsrs	r4, r4, #6
 800a796:	0980      	lsrs	r0, r0, #6
 800a798:	0224      	lsls	r4, r4, #8
 800a79a:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
 800a79e:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
 800a7a2:	3317      	adds	r3, #23
 800a7a4:	ea44 1493 	orr.w	r4, r4, r3, lsr #6
 800a7a8:	f044 447f 	orr.w	r4, r4, #4278190080	; 0xff000000
    break;
 800a7ac:	e7cd      	b.n	800a74a <BSP_LCD_DrawVLine+0x56>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 800a7ae:	2101      	movs	r1, #1
 800a7b0:	4658      	mov	r0, fp
 800a7b2:	f002 fdef 	bl	800d394 <HAL_DMA2D_ConfigLayer>
 800a7b6:	2800      	cmp	r0, #0
 800a7b8:	d1d6      	bne.n	800a768 <BSP_LCD_DrawVLine+0x74>
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800a7ba:	fb06 7208 	mla	r2, r6, r8, r7
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800a7be:	4621      	mov	r1, r4
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	4658      	mov	r0, fp
 800a7c4:	fb0a 9202 	mla	r2, sl, r2, r9
 800a7c8:	9500      	str	r5, [sp, #0]
 800a7ca:	f002 fc57 	bl	800d07c <HAL_DMA2D_Start>
 800a7ce:	2800      	cmp	r0, #0
 800a7d0:	d1ca      	bne.n	800a768 <BSP_LCD_DrawVLine+0x74>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 800a7d2:	4658      	mov	r0, fp
 800a7d4:	2119      	movs	r1, #25
 800a7d6:	f002 fcad 	bl	800d134 <HAL_DMA2D_PollForTransfer>
 800a7da:	e7c5      	b.n	800a768 <BSP_LCD_DrawVLine+0x74>
 800a7dc:	52001000 	.word	0x52001000
 800a7e0:	2000a18c 	.word	0x2000a18c
 800a7e4:	2000a0e4 	.word	0x2000a0e4
 800a7e8:	2000a1c4 	.word	0x2000a1c4

0800a7ec <DSI_IO_Write>:
  if(Size <= 1U)
 800a7ec:	2b01      	cmp	r3, #1
{
 800a7ee:	b530      	push	{r4, r5, lr}
 800a7f0:	460d      	mov	r5, r1
 800a7f2:	b083      	sub	sp, #12
 800a7f4:	4601      	mov	r1, r0
  if(Size <= 1U)
 800a7f6:	d909      	bls.n	800a80c <DSI_IO_Write+0x20>
    if(HAL_DSI_LongWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 800a7f8:	480a      	ldr	r0, [pc, #40]	; (800a824 <DSI_IO_Write+0x38>)
 800a7fa:	e9cd 5200 	strd	r5, r2, [sp]
 800a7fe:	2239      	movs	r2, #57	; 0x39
 800a800:	f003 f8fc 	bl	800d9fc <HAL_DSI_LongWrite>
 800a804:	b958      	cbnz	r0, 800a81e <DSI_IO_Write+0x32>
  int32_t ret = BSP_ERROR_NONE;
 800a806:	2000      	movs	r0, #0
}
 800a808:	b003      	add	sp, #12
 800a80a:	bd30      	pop	{r4, r5, pc}
    if(HAL_DSI_ShortWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 800a80c:	5cd0      	ldrb	r0, [r2, r3]
 800a80e:	462b      	mov	r3, r5
 800a810:	2215      	movs	r2, #21
 800a812:	9000      	str	r0, [sp, #0]
 800a814:	4803      	ldr	r0, [pc, #12]	; (800a824 <DSI_IO_Write+0x38>)
 800a816:	f003 f8c5 	bl	800d9a4 <HAL_DSI_ShortWrite>
 800a81a:	2800      	cmp	r0, #0
 800a81c:	d0f3      	beq.n	800a806 <DSI_IO_Write+0x1a>
      ret = BSP_ERROR_BUS_FAILURE;
 800a81e:	f06f 0007 	mvn.w	r0, #7
 800a822:	e7f1      	b.n	800a808 <DSI_IO_Write+0x1c>
 800a824:	2000a1a8 	.word	0x2000a1a8

0800a828 <BSP_LCD_FillRect>:
{
 800a828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800a82c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800a830:	4d30      	ldr	r5, [pc, #192]	; (800a8f4 <BSP_LCD_FillRect+0xcc>)
{
 800a832:	461e      	mov	r6, r3
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800a834:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 800a900 <BSP_LCD_FillRect+0xd8>
 800a838:	eb05 0480 	add.w	r4, r5, r0, lsl #2
 800a83c:	f04f 0e34 	mov.w	lr, #52	; 0x34
{
 800a840:	460f      	mov	r7, r1
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800a842:	f855 9020 	ldr.w	r9, [r5, r0, lsl #2]
 800a846:	68a3      	ldr	r3, [r4, #8]
{
 800a848:	b083      	sub	sp, #12
  switch(Lcd_Ctx[Instance].PixelFormat)
 800a84a:	68e1      	ldr	r1, [r4, #12]
{
 800a84c:	4690      	mov	r8, r2
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800a84e:	fb0e c303 	mla	r3, lr, r3, ip
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 800a852:	eba9 0206 	sub.w	r2, r9, r6
  switch(Lcd_Ctx[Instance].PixelFormat)
 800a856:	2902      	cmp	r1, #2
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800a858:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a85c:	f8d3 a05c 	ldr.w	sl, [r3, #92]	; 0x5c
{
 800a860:	9d0d      	ldr	r5, [sp, #52]	; 0x34
  switch(Lcd_Ctx[Instance].PixelFormat)
 800a862:	d010      	beq.n	800a886 <BSP_LCD_FillRect+0x5e>
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 800a864:	2100      	movs	r1, #0
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 800a866:	4c24      	ldr	r4, [pc, #144]	; (800a8f8 <BSP_LCD_FillRect+0xd0>)
 800a868:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
  hlcd_dma2d.Instance = DMA2D;
 800a86c:	4b23      	ldr	r3, [pc, #140]	; (800a8fc <BSP_LCD_FillRect+0xd4>)
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800a86e:	4620      	mov	r0, r4
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 800a870:	60a1      	str	r1, [r4, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 800a872:	60e2      	str	r2, [r4, #12]
  hlcd_dma2d.Instance = DMA2D;
 800a874:	e9c4 3c00 	strd	r3, ip, [r4]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800a878:	f002 fb36 	bl	800cee8 <HAL_DMA2D_Init>
 800a87c:	b310      	cbz	r0, 800a8c4 <BSP_LCD_FillRect+0x9c>
}
 800a87e:	2000      	movs	r0, #0
 800a880:	b003      	add	sp, #12
 800a882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color = CONVERTRGB5652ARGB8888(Color);
 800a886:	f3c5 1345 	ubfx	r3, r5, #5, #6
 800a88a:	f3c5 20c4 	ubfx	r0, r5, #11, #5
 800a88e:	f005 041f 	and.w	r4, r5, #31
 800a892:	eb03 15c3 	add.w	r5, r3, r3, lsl #7
 800a896:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 800a89a:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 800a89e:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
 800a8a2:	3521      	adds	r5, #33	; 0x21
 800a8a4:	eb04 1304 	add.w	r3, r4, r4, lsl #4
 800a8a8:	3017      	adds	r0, #23
 800a8aa:	09ad      	lsrs	r5, r5, #6
 800a8ac:	0980      	lsrs	r0, r0, #6
 800a8ae:	022d      	lsls	r5, r5, #8
 800a8b0:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
 800a8b4:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800a8b8:	3317      	adds	r3, #23
 800a8ba:	ea45 1593 	orr.w	r5, r5, r3, lsr #6
 800a8be:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
    break;
 800a8c2:	e7d0      	b.n	800a866 <BSP_LCD_FillRect+0x3e>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 800a8c4:	2101      	movs	r1, #1
 800a8c6:	4620      	mov	r0, r4
 800a8c8:	f002 fd64 	bl	800d394 <HAL_DMA2D_ConfigLayer>
 800a8cc:	2800      	cmp	r0, #0
 800a8ce:	d1d6      	bne.n	800a87e <BSP_LCD_FillRect+0x56>
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800a8d0:	990c      	ldr	r1, [sp, #48]	; 0x30
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800a8d2:	fb08 7209 	mla	r2, r8, r9, r7
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800a8d6:	4633      	mov	r3, r6
 800a8d8:	4620      	mov	r0, r4
 800a8da:	9100      	str	r1, [sp, #0]
 800a8dc:	4629      	mov	r1, r5
 800a8de:	fb0b a202 	mla	r2, fp, r2, sl
 800a8e2:	f002 fbcb 	bl	800d07c <HAL_DMA2D_Start>
 800a8e6:	2800      	cmp	r0, #0
 800a8e8:	d1c9      	bne.n	800a87e <BSP_LCD_FillRect+0x56>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 800a8ea:	4620      	mov	r0, r4
 800a8ec:	2119      	movs	r1, #25
 800a8ee:	f002 fc21 	bl	800d134 <HAL_DMA2D_PollForTransfer>
 800a8f2:	e7c4      	b.n	800a87e <BSP_LCD_FillRect+0x56>
 800a8f4:	2000a18c 	.word	0x2000a18c
 800a8f8:	2000a1c4 	.word	0x2000a1c4
 800a8fc:	52001000 	.word	0x52001000
 800a900:	2000a0e4 	.word	0x2000a0e4

0800a904 <BSP_LCD_DrawHLine>:
{
 800a904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800a908:	4c36      	ldr	r4, [pc, #216]	; (800a9e4 <BSP_LCD_DrawHLine+0xe0>)
{
 800a90a:	469b      	mov	fp, r3
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800a90c:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 800a910:	f04f 0934 	mov.w	r9, #52	; 0x34
 800a914:	f8df e0d8 	ldr.w	lr, [pc, #216]	; 800a9f0 <BSP_LCD_DrawHLine+0xec>
{
 800a918:	4617      	mov	r7, r2
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800a91a:	eb04 0583 	add.w	r5, r4, r3, lsl #2
 800a91e:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
 800a922:	00c3      	lsls	r3, r0, #3
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 800a924:	eb01 0c0b 	add.w	ip, r1, fp
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800a928:	68aa      	ldr	r2, [r5, #8]
{
 800a92a:	b083      	sub	sp, #12
  switch(Lcd_Ctx[Instance].PixelFormat)
 800a92c:	1a18      	subs	r0, r3, r0
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 800a92e:	45e0      	cmp	r8, ip
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800a930:	fb09 e202 	mla	r2, r9, r2, lr
 800a934:	f8d5 a010 	ldr.w	sl, [r5, #16]
  switch(Lcd_Ctx[Instance].PixelFormat)
 800a938:	eb04 0480 	add.w	r4, r4, r0, lsl #2
    Length = Lcd_Ctx[Instance].XSize - Xpos;
 800a93c:	bf38      	it	cc
 800a93e:	eba8 0b01 	subcc.w	fp, r8, r1
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800a942:	f8d2 905c 	ldr.w	r9, [r2, #92]	; 0x5c
{
 800a946:	460e      	mov	r6, r1
  switch(Lcd_Ctx[Instance].PixelFormat)
 800a948:	68e2      	ldr	r2, [r4, #12]
{
 800a94a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  switch(Lcd_Ctx[Instance].PixelFormat)
 800a94c:	2a02      	cmp	r2, #2
 800a94e:	d011      	beq.n	800a974 <BSP_LCD_DrawHLine+0x70>
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 800a950:	2200      	movs	r2, #0
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 800a952:	4c25      	ldr	r4, [pc, #148]	; (800a9e8 <BSP_LCD_DrawHLine+0xe4>)
 800a954:	f44f 3040 	mov.w	r0, #196608	; 0x30000
  hlcd_dma2d.Init.OutputOffset = OffLine;
 800a958:	2100      	movs	r1, #0
  hlcd_dma2d.Instance = DMA2D;
 800a95a:	4b24      	ldr	r3, [pc, #144]	; (800a9ec <BSP_LCD_DrawHLine+0xe8>)
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 800a95c:	e9c4 0201 	strd	r0, r2, [r4, #4]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800a960:	4620      	mov	r0, r4
  hlcd_dma2d.Init.OutputOffset = OffLine;
 800a962:	60e1      	str	r1, [r4, #12]
  hlcd_dma2d.Instance = DMA2D;
 800a964:	6023      	str	r3, [r4, #0]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800a966:	f002 fabf 	bl	800cee8 <HAL_DMA2D_Init>
 800a96a:	b310      	cbz	r0, 800a9b2 <BSP_LCD_DrawHLine+0xae>
}
 800a96c:	2000      	movs	r0, #0
 800a96e:	b003      	add	sp, #12
 800a970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color = CONVERTRGB5652ARGB8888(Color);
 800a974:	f3c5 1345 	ubfx	r3, r5, #5, #6
 800a978:	f3c5 21c4 	ubfx	r1, r5, #11, #5
 800a97c:	f005 001f 	and.w	r0, r5, #31
 800a980:	eb03 15c3 	add.w	r5, r3, r3, lsl #7
 800a984:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 800a988:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 800a98c:	ebc1 1141 	rsb	r1, r1, r1, lsl #5
 800a990:	3521      	adds	r5, #33	; 0x21
 800a992:	eb00 1300 	add.w	r3, r0, r0, lsl #4
 800a996:	3117      	adds	r1, #23
 800a998:	09ad      	lsrs	r5, r5, #6
 800a99a:	0989      	lsrs	r1, r1, #6
 800a99c:	022d      	lsls	r5, r5, #8
 800a99e:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
 800a9a2:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800a9a6:	3317      	adds	r3, #23
 800a9a8:	ea45 1593 	orr.w	r5, r5, r3, lsr #6
 800a9ac:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
    break;
 800a9b0:	e7cf      	b.n	800a952 <BSP_LCD_DrawHLine+0x4e>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 800a9b2:	2101      	movs	r1, #1
 800a9b4:	4620      	mov	r0, r4
 800a9b6:	f002 fced 	bl	800d394 <HAL_DMA2D_ConfigLayer>
 800a9ba:	2800      	cmp	r0, #0
 800a9bc:	d1d6      	bne.n	800a96c <BSP_LCD_DrawHLine+0x68>
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800a9be:	fb07 6208 	mla	r2, r7, r8, r6
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800a9c2:	2601      	movs	r6, #1
 800a9c4:	465b      	mov	r3, fp
 800a9c6:	4629      	mov	r1, r5
 800a9c8:	fb0a 9202 	mla	r2, sl, r2, r9
 800a9cc:	4620      	mov	r0, r4
 800a9ce:	9600      	str	r6, [sp, #0]
 800a9d0:	f002 fb54 	bl	800d07c <HAL_DMA2D_Start>
 800a9d4:	2800      	cmp	r0, #0
 800a9d6:	d1c9      	bne.n	800a96c <BSP_LCD_DrawHLine+0x68>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 800a9d8:	4620      	mov	r0, r4
 800a9da:	2119      	movs	r1, #25
 800a9dc:	f002 fbaa 	bl	800d134 <HAL_DMA2D_PollForTransfer>
 800a9e0:	e7c4      	b.n	800a96c <BSP_LCD_DrawHLine+0x68>
 800a9e2:	bf00      	nop
 800a9e4:	2000a18c 	.word	0x2000a18c
 800a9e8:	2000a1c4 	.word	0x2000a1c4
 800a9ec:	52001000 	.word	0x52001000
 800a9f0:	2000a0e4 	.word	0x2000a0e4

0800a9f4 <MX_DSIHOST_DSI_Init>:
{
 800a9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hdsi->Instance = DSI;
 800a9f8:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
{
 800a9fc:	b09f      	sub	sp, #124	; 0x7c
  hdsi->Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 800a9fe:	2500      	movs	r5, #0
  hdsi->Init.TXEscapeCkdiv = 4;
 800aa00:	f04f 0904 	mov.w	r9, #4
  hdsi->Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 800aa04:	2601      	movs	r6, #1
  PLLInit.PLLNDIV = 100;
 800aa06:	f04f 0b64 	mov.w	fp, #100	; 0x64
 800aa0a:	f04f 0c05 	mov.w	ip, #5
  hdsi->Instance = DSI;
 800aa0e:	6007      	str	r7, [r0, #0]
  hdsi->Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 800aa10:	60c6      	str	r6, [r0, #12]
{
 800aa12:	460f      	mov	r7, r1
  if (HAL_DSI_Init(hdsi, &PLLInit) != HAL_OK)
 800aa14:	4669      	mov	r1, sp
{
 800aa16:	4604      	mov	r4, r0
 800aa18:	4690      	mov	r8, r2
 800aa1a:	469a      	mov	sl, r3
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 800aa1c:	9502      	str	r5, [sp, #8]
  hdsi->Init.TXEscapeCkdiv = 4;
 800aa1e:	e9c0 5901 	strd	r5, r9, [r0, #4]
  PLLInit.PLLNDIV = 100;
 800aa22:	e9cd bc00 	strd	fp, ip, [sp]
  if (HAL_DSI_Init(hdsi, &PLLInit) != HAL_OK)
 800aa26:	f002 fd25 	bl	800d474 <HAL_DSI_Init>
 800aa2a:	b118      	cbz	r0, 800aa34 <MX_DSIHOST_DSI_Init+0x40>
    return HAL_ERROR;
 800aa2c:	4630      	mov	r0, r6
}
 800aa2e:	b01f      	add	sp, #124	; 0x7c
 800aa30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 800aa34:	f24f 4324 	movw	r3, #62500	; 0xf424
 800aa38:	4a22      	ldr	r2, [pc, #136]	; (800aac4 <MX_DSIHOST_DSI_Init+0xd0>)
 800aa3a:	4605      	mov	r5, r0
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 800aa3c:	4620      	mov	r0, r4
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 800aa3e:	fb03 2207 	mla	r2, r3, r7, r2
 800aa42:	4b21      	ldr	r3, [pc, #132]	; (800aac8 <MX_DSIHOST_DSI_Init+0xd4>)
  VidCfg.Mode = DSI_VID_MODE_BURST;
 800aa44:	2402      	movs	r4, #2
  VidCfg.VerticalFrontPorch = OTM8009A_480X800_VFP;
 800aa46:	2110      	movs	r1, #16
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 800aa48:	fba3 2302 	umull	r2, r3, r3, r2
  VidCfg.NullPacketSize = 0xFFFU;
 800aa4c:	f640 72ff 	movw	r2, #4095	; 0xfff
  VidCfg.HorizontalBackPorch = (OTM8009A_480X800_HBP * 62500U)/27429U;
 800aa50:	f04f 0c4d 	mov.w	ip, #77	; 0x4d
  VidCfg.LPHorizontalFrontPorchEnable  = DSI_LP_HFP_ENABLE;
 800aa54:	f44f 5e00 	mov.w	lr, #8192	; 0x2000
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 800aa58:	0b5b      	lsrs	r3, r3, #13
  VidCfg.VirtualChannelID = 0;
 800aa5a:	9503      	str	r5, [sp, #12]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 800aa5c:	9505      	str	r5, [sp, #20]
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 800aa5e:	950a      	str	r5, [sp, #40]	; 0x28
  VidCfg.VerticalSyncActive = OTM8009A_480X800_VSYNC;
 800aa60:	9610      	str	r6, [sp, #64]	; 0x40
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 800aa62:	f44f 4600 	mov.w	r6, #32768	; 0x8000
  VidCfg.VerticalActive = Height;
 800aa66:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
  VidCfg.LPVerticalActiveEnable        = DSI_LP_VACT_ENABLE;
 800aa6a:	f44f 6800 	mov.w	r8, #2048	; 0x800
  VidCfg.FrameBTAAcknowledgeEnable     = DSI_FBTAA_DISABLE;
 800aa6e:	951d      	str	r5, [sp, #116]	; 0x74
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 800aa70:	930f      	str	r3, [sp, #60]	; 0x3c
  VidCfg.LPVerticalSyncActiveEnable    = DSI_LP_VSYNC_ENABLE;
 800aa72:	f44f 7380 	mov.w	r3, #256	; 0x100
  VidCfg.Mode = DSI_VID_MODE_BURST;
 800aa76:	9406      	str	r4, [sp, #24]
  VidCfg.LPVerticalFrontPorchEnable    = DSI_LP_VFP_ENABLE;
 800aa78:	f44f 6480 	mov.w	r4, #1024	; 0x400
  VidCfg.NullPacketSize = 0xFFFU;
 800aa7c:	9209      	str	r2, [sp, #36]	; 0x24
  VidCfg.LPVerticalBackPorchEnable     = DSI_LP_VBP_ENABLE;
 800aa7e:	f44f 7200 	mov.w	r2, #512	; 0x200
  VidCfg.ColorCoding = PixelFormat;
 800aa82:	f8cd a010 	str.w	sl, [sp, #16]
  VidCfg.HorizontalSyncActive = (OTM8009A_480X800_HSYNC * 62500U)/27429U;
 800aa86:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
  VidCfg.HorizontalBackPorch = (OTM8009A_480X800_HBP * 62500U)/27429U;
 800aa8a:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 800aa8e:	9614      	str	r6, [sp, #80]	; 0x50
  VidCfg.NumberOfChunks = 0;
 800aa90:	e9cd 7507 	strd	r7, r5, [sp, #28]
  VidCfg.VerticalBackPorch = OTM8009A_480X800_VBP;
 800aa94:	270f      	movs	r7, #15
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 800aa96:	e9cd 550b 	strd	r5, r5, [sp, #44]	; 0x2c
  VidCfg.LPHorizontalBackPorchEnable   = DSI_LP_HBP_ENABLE;
 800aa9a:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  VidCfg.VerticalFrontPorch = OTM8009A_480X800_VFP;
 800aa9e:	e9cd 7111 	strd	r7, r1, [sp, #68]	; 0x44
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 800aaa2:	a903      	add	r1, sp, #12
  VidCfg.LPVACTLargestPacketSize = 4;
 800aaa4:	e9cd 9915 	strd	r9, r9, [sp, #84]	; 0x54
  VidCfg.LPHorizontalBackPorchEnable   = DSI_LP_HBP_ENABLE;
 800aaa8:	e9cd e517 	strd	lr, r5, [sp, #92]	; 0x5c
  VidCfg.LPVerticalFrontPorchEnable    = DSI_LP_VFP_ENABLE;
 800aaac:	e9cd 8419 	strd	r8, r4, [sp, #100]	; 0x64
  VidCfg.LPVerticalSyncActiveEnable    = DSI_LP_VSYNC_ENABLE;
 800aab0:	e9cd 231b 	strd	r2, r3, [sp, #108]	; 0x6c
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 800aab4:	f002 fe16 	bl	800d6e4 <HAL_DSI_ConfigVideoMode>
  return HAL_OK;
 800aab8:	3800      	subs	r0, #0
 800aaba:	bf18      	it	ne
 800aabc:	2001      	movne	r0, #1
}
 800aabe:	b01f      	add	sp, #124	; 0x7c
 800aac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aac4:	0042c1d8 	.word	0x0042c1d8
 800aac8:	4c751ce3 	.word	0x4c751ce3

0800aacc <MX_LTDC_Init>:
{
 800aacc:	b4f0      	push	{r4, r5, r6, r7}
  hltdc->Instance = LTDC;
 800aace:	4d0e      	ldr	r5, [pc, #56]	; (800ab08 <MX_LTDC_Init+0x3c>)
  hltdc->Init.AccumulatedActiveW = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP - 1;
 800aad0:	f101 0423 	add.w	r4, r1, #35	; 0x23
  hltdc->Init.TotalWidth         = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP - 1;
 800aad4:	3145      	adds	r1, #69	; 0x45
  hltdc->Init.HorizontalSync     = OTM8009A_480X800_HSYNC - 1;
 800aad6:	2701      	movs	r7, #1
  hltdc->Instance = LTDC;
 800aad8:	6005      	str	r5, [r0, #0]
  hltdc->Init.AccumulatedVBP     = OTM8009A_480X800_VSYNC + OTM8009A_480X800_VBP - 1;
 800aada:	250f      	movs	r5, #15
  hltdc->Init.AccumulatedHBP     = OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP - 1;
 800aadc:	2623      	movs	r6, #35	; 0x23
  hltdc->Init.AccumulatedActiveW = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP - 1;
 800aade:	6244      	str	r4, [r0, #36]	; 0x24
  hltdc->Init.TotalWidth         = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP - 1;
 800aae0:	62c1      	str	r1, [r0, #44]	; 0x2c
  hltdc->Init.AccumulatedActiveH = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP - 1;
 800aae2:	1954      	adds	r4, r2, r5
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800aae4:	2100      	movs	r1, #0
  hltdc->Init.TotalHeigh         = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP + OTM8009A_480X800_VFP - 1;
 800aae6:	321f      	adds	r2, #31
  hltdc->Init.HorizontalSync     = OTM8009A_480X800_HSYNC - 1;
 800aae8:	6147      	str	r7, [r0, #20]
  hltdc->Init.AccumulatedHBP     = OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP - 1;
 800aaea:	61c6      	str	r6, [r0, #28]
  hltdc->Init.AccumulatedVBP     = OTM8009A_480X800_VSYNC + OTM8009A_480X800_VBP - 1;
 800aaec:	6205      	str	r5, [r0, #32]
  hltdc->Init.AccumulatedActiveH = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP - 1;
 800aaee:	6284      	str	r4, [r0, #40]	; 0x28
  hltdc->Init.Backcolor.Blue  = 0x00;
 800aaf0:	8681      	strh	r1, [r0, #52]	; 0x34
  hltdc->Init.Backcolor.Red   = 0x00;
 800aaf2:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
  hltdc->Init.TotalHeigh         = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP + OTM8009A_480X800_VFP - 1;
 800aaf6:	6302      	str	r2, [r0, #48]	; 0x30
  hltdc->Init.VerticalSync       = OTM8009A_480X800_VSYNC - 1;
 800aaf8:	6181      	str	r1, [r0, #24]
}
 800aafa:	bcf0      	pop	{r4, r5, r6, r7}
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800aafc:	e9c0 1101 	strd	r1, r1, [r0, #4]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800ab00:	e9c0 1103 	strd	r1, r1, [r0, #12]
  return HAL_LTDC_Init(hltdc);
 800ab04:	f003 be84 	b.w	800e810 <HAL_LTDC_Init>
 800ab08:	50001000 	.word	0x50001000

0800ab0c <MX_LTDC_ConfigLayer>:
{
 800ab0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab0e:	4613      	mov	r3, r2
 800ab10:	b08f      	sub	sp, #60	; 0x3c
  pLayerCfg.Alpha = 255;
 800ab12:	24ff      	movs	r4, #255	; 0xff
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 800ab14:	460a      	mov	r2, r1
  pLayerCfg.WindowY0 = Config->Y0;
 800ab16:	6899      	ldr	r1, [r3, #8]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800ab18:	f04f 0c07 	mov.w	ip, #7
  pLayerCfg.Alpha = 255;
 800ab1c:	9405      	str	r4, [sp, #20]
  pLayerCfg.Backcolor.Blue = 0;
 800ab1e:	2500      	movs	r5, #0
  pLayerCfg.WindowY0 = Config->Y0;
 800ab20:	9102      	str	r1, [sp, #8]
  pLayerCfg.Alpha0 = 0;
 800ab22:	f44f 67c0 	mov.w	r7, #1536	; 0x600
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800ab26:	f8cd c020 	str.w	ip, [sp, #32]
  pLayerCfg.Backcolor.Blue = 0;
 800ab2a:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
  pLayerCfg.Backcolor.Red = 0;
 800ab2e:	f88d 5032 	strb.w	r5, [sp, #50]	; 0x32
  pLayerCfg.WindowX1 = Config->X1;
 800ab32:	e9d3 4600 	ldrd	r4, r6, [r3]
  pLayerCfg.WindowX0 = Config->X0;
 800ab36:	9400      	str	r4, [sp, #0]
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 800ab38:	1b34      	subs	r4, r6, r4
  pLayerCfg.WindowX1 = Config->X1;
 800ab3a:	9601      	str	r6, [sp, #4]
  pLayerCfg.WindowY1 = Config->Y1;
 800ab3c:	68de      	ldr	r6, [r3, #12]
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 800ab3e:	940a      	str	r4, [sp, #40]	; 0x28
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 800ab40:	1a71      	subs	r1, r6, r1
  pLayerCfg.WindowY1 = Config->Y1;
 800ab42:	9603      	str	r6, [sp, #12]
  pLayerCfg.Alpha0 = 0;
 800ab44:	2600      	movs	r6, #0
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 800ab46:	910b      	str	r1, [sp, #44]	; 0x2c
  pLayerCfg.FBStartAdress = Config->Address;
 800ab48:	e9d3 1304 	ldrd	r1, r3, [r3, #16]
  pLayerCfg.Alpha0 = 0;
 800ab4c:	e9cd 6706 	strd	r6, r7, [sp, #24]
  pLayerCfg.PixelFormat = Config->PixelFormat;
 800ab50:	9104      	str	r1, [sp, #16]
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 800ab52:	4669      	mov	r1, sp
  pLayerCfg.FBStartAdress = Config->Address;
 800ab54:	9309      	str	r3, [sp, #36]	; 0x24
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 800ab56:	f003 ff35 	bl	800e9c4 <HAL_LTDC_ConfigLayer>
}
 800ab5a:	b00f      	add	sp, #60	; 0x3c
 800ab5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab5e:	bf00      	nop

0800ab60 <MX_LTDC_ClockConfig>:
{
 800ab60:	b530      	push	{r4, r5, lr}
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 800ab62:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
{
 800ab66:	b0b1      	sub	sp, #196	; 0xc4
  PeriphClkInitStruct.PLL3.PLL3M      = 5U;
 800ab68:	2005      	movs	r0, #5
  PeriphClkInitStruct.PLL3.PLL3P      = 2U;
 800ab6a:	2202      	movs	r2, #2
  PeriphClkInitStruct.PLL3.PLL3RGE    = RCC_PLLCFGR_PLL3RGE_2;
 800ab6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 800ab70:	9300      	str	r3, [sp, #0]
  PeriphClkInitStruct.PLL3.PLL3N      = 132U;
 800ab72:	2584      	movs	r5, #132	; 0x84
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800ab74:	2300      	movs	r3, #0
  PeriphClkInitStruct.PLL3.PLL3R      = 24U;
 800ab76:	2418      	movs	r4, #24
  PeriphClkInitStruct.PLL3.PLL3M      = 5U;
 800ab78:	9009      	str	r0, [sp, #36]	; 0x24
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800ab7a:	4668      	mov	r0, sp
  PeriphClkInitStruct.PLL3.PLL3FRACN  = 0U;
 800ab7c:	9310      	str	r3, [sp, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3P      = 2U;
 800ab7e:	e9cd 520a 	strd	r5, r2, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3R      = 24U;
 800ab82:	e9cd 240c 	strd	r2, r4, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800ab86:	e9cd 130e 	strd	r1, r3, [sp, #56]	; 0x38
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800ab8a:	f005 f8f7 	bl	800fd7c <HAL_RCCEx_PeriphCLKConfig>
}
 800ab8e:	b031      	add	sp, #196	; 0xc4
 800ab90:	bd30      	pop	{r4, r5, pc}
 800ab92:	bf00      	nop

0800ab94 <BSP_LCD_InitEx>:
{
 800ab94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 800ab98:	2901      	cmp	r1, #1
{
 800ab9a:	b095      	sub	sp, #84	; 0x54
 800ab9c:	9f1e      	ldr	r7, [sp, #120]	; 0x78
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 800ab9e:	f200 814d 	bhi.w	800ae3c <BSP_LCD_InitEx+0x2a8>
 800aba2:	f1b0 0b00 	subs.w	fp, r0, #0
 800aba6:	bf18      	it	ne
 800aba8:	f04f 0b01 	movne.w	fp, #1
 800abac:	2800      	cmp	r0, #0
 800abae:	f040 8145 	bne.w	800ae3c <BSP_LCD_InitEx+0x2a8>
 800abb2:	4689      	mov	r9, r1
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_RGB888)))
 800abb4:	1e51      	subs	r1, r2, #1
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 800abb6:	2901      	cmp	r1, #1
 800abb8:	f200 8140 	bhi.w	800ae3c <BSP_LCD_InitEx+0x2a8>
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800abbc:	2a02      	cmp	r2, #2
 800abbe:	461d      	mov	r5, r3
 800abc0:	f000 810a 	beq.w	800add8 <BSP_LCD_InitEx+0x244>
      Lcd_Ctx[Instance].BppFactor = 4U;
 800abc4:	2004      	movs	r0, #4
      dsi_pixel_format = DSI_RGB888;
 800abc6:	2305      	movs	r3, #5
  LCD_RESET_GPIO_CLK_ENABLE();
 800abc8:	4c9e      	ldr	r4, [pc, #632]	; (800ae44 <BSP_LCD_InitEx+0x2b0>)
 800abca:	4e9f      	ldr	r6, [pc, #636]	; (800ae48 <BSP_LCD_InitEx+0x2b4>)
 800abcc:	9301      	str	r3, [sp, #4]
  gpio_init_structure.Pin   = LCD_RESET_PIN;
 800abce:	2301      	movs	r3, #1
    Lcd_Ctx[Instance].XSize  = Width;
 800abd0:	6035      	str	r5, [r6, #0]
  LCD_RESET_GPIO_CLK_ENABLE();
 800abd2:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
 800abd6:	6130      	str	r0, [r6, #16]
 800abd8:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 800abdc:	60f2      	str	r2, [r6, #12]
    Lcd_Ctx[Instance].YSize  = Height;
 800abde:	6077      	str	r7, [r6, #4]
  LCD_RESET_GPIO_CLK_ENABLE();
 800abe0:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 800abe4:	a90e      	add	r1, sp, #56	; 0x38
  LCD_RESET_GPIO_CLK_ENABLE();
 800abe6:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 800abea:	4898      	ldr	r0, [pc, #608]	; (800ae4c <BSP_LCD_InitEx+0x2b8>)
  LCD_RESET_GPIO_CLK_ENABLE();
 800abec:	f002 0240 	and.w	r2, r2, #64	; 0x40
    hlcd_ltdc.Instance = LTDC;
 800abf0:	f8df 8284 	ldr.w	r8, [pc, #644]	; 800ae78 <BSP_LCD_InitEx+0x2e4>
    hlcd_dsi.Instance = DSI;
 800abf4:	f8df a284 	ldr.w	sl, [pc, #644]	; 800ae7c <BSP_LCD_InitEx+0x2e8>
  LCD_RESET_GPIO_CLK_ENABLE();
 800abf8:	9208      	str	r2, [sp, #32]
 800abfa:	9a08      	ldr	r2, [sp, #32]
  gpio_init_structure.Pin   = LCD_RESET_PIN;
 800abfc:	2208      	movs	r2, #8
 800abfe:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800ac02:	2303      	movs	r3, #3
 800ac04:	2201      	movs	r2, #1
 800ac06:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 800ac0a:	f003 f813 	bl	800dc34 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_RESET);
 800ac0e:	2200      	movs	r2, #0
 800ac10:	2108      	movs	r1, #8
 800ac12:	488e      	ldr	r0, [pc, #568]	; (800ae4c <BSP_LCD_InitEx+0x2b8>)
 800ac14:	f003 fa00 	bl	800e018 <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 800ac18:	2014      	movs	r0, #20
 800ac1a:	f000 faed 	bl	800b1f8 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_SET);/* Deactivate XRES */
 800ac1e:	2201      	movs	r2, #1
 800ac20:	2108      	movs	r1, #8
 800ac22:	488a      	ldr	r0, [pc, #552]	; (800ae4c <BSP_LCD_InitEx+0x2b8>)
 800ac24:	f003 f9f8 	bl	800e018 <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 800ac28:	200a      	movs	r0, #10
 800ac2a:	f000 fae5 	bl	800b1f8 <HAL_Delay>
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800ac2e:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 800ac32:	2301      	movs	r3, #1
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800ac34:	a90e      	add	r1, sp, #56	; 0x38
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800ac36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800ac3a:	4885      	ldr	r0, [pc, #532]	; (800ae50 <BSP_LCD_InitEx+0x2bc>)
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800ac3c:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
 800ac40:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 800ac44:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800ac48:	9206      	str	r2, [sp, #24]
 800ac4a:	9a06      	ldr	r2, [sp, #24]
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 800ac4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ac50:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800ac54:	2302      	movs	r3, #2
 800ac56:	2200      	movs	r2, #0
 800ac58:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800ac5c:	f002 ffea 	bl	800dc34 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 800ac60:	2201      	movs	r2, #1
 800ac62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ac66:	487a      	ldr	r0, [pc, #488]	; (800ae50 <BSP_LCD_InitEx+0x2bc>)
 800ac68:	f003 f9d6 	bl	800e018 <HAL_GPIO_WritePin>
  LCD_TE_GPIO_CLK_ENABLE();
 800ac6c:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800ac70:	2002      	movs	r0, #2
  gpio_init_structure.Pin       = LCD_TE_PIN;
 800ac72:	2300      	movs	r3, #0
  LCD_TE_GPIO_CLK_ENABLE();
 800ac74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 800ac78:	a90e      	add	r1, sp, #56	; 0x38
  LCD_TE_GPIO_CLK_ENABLE();
 800ac7a:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
 800ac7e:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800ac82:	9011      	str	r0, [sp, #68]	; 0x44
  LCD_TE_GPIO_CLK_ENABLE();
 800ac84:	f402 7200 	and.w	r2, r2, #512	; 0x200
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 800ac88:	4871      	ldr	r0, [pc, #452]	; (800ae50 <BSP_LCD_InitEx+0x2bc>)
  LCD_TE_GPIO_CLK_ENABLE();
 800ac8a:	9207      	str	r2, [sp, #28]
 800ac8c:	9a07      	ldr	r2, [sp, #28]
  gpio_init_structure.Pin       = LCD_TE_PIN;
 800ac8e:	2204      	movs	r2, #4
 800ac90:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 800ac94:	f002 ffce 	bl	800dc34 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_TE_GPIO_PORT, LCD_TE_PIN, GPIO_PIN_SET);
 800ac98:	2201      	movs	r2, #1
 800ac9a:	2104      	movs	r1, #4
 800ac9c:	486c      	ldr	r0, [pc, #432]	; (800ae50 <BSP_LCD_InitEx+0x2bc>)
 800ac9e:	f003 f9bb 	bl	800e018 <HAL_GPIO_WritePin>
  HAL_NVIC_SetPriority(LTDC_IRQn, 0x0F, 0);
 800aca2:	2200      	movs	r2, #0
 800aca4:	210f      	movs	r1, #15
 800aca6:	2058      	movs	r0, #88	; 0x58
 800aca8:	f000 fada 	bl	800b260 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800acac:	2058      	movs	r0, #88	; 0x58
 800acae:	f000 fb11 	bl	800b2d4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2D_IRQn, 0x0F, 0);
 800acb2:	2200      	movs	r2, #0
 800acb4:	210f      	movs	r1, #15
 800acb6:	205a      	movs	r0, #90	; 0x5a
 800acb8:	f000 fad2 	bl	800b260 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800acbc:	205a      	movs	r0, #90	; 0x5a
 800acbe:	f000 fb09 	bl	800b2d4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DSI_IRQn, 0x0F, 0);
 800acc2:	2200      	movs	r2, #0
 800acc4:	210f      	movs	r1, #15
 800acc6:	207b      	movs	r0, #123	; 0x7b
 800acc8:	f000 faca 	bl	800b260 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 800accc:	207b      	movs	r0, #123	; 0x7b
 800acce:	f000 fb01 	bl	800b2d4 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_LTDC_CLK_ENABLE();
 800acd2:	f8d4 c0e4 	ldr.w	ip, [r4, #228]	; 0xe4
    hlcd_ltdc.Instance = LTDC;
 800acd6:	495f      	ldr	r1, [pc, #380]	; (800ae54 <BSP_LCD_InitEx+0x2c0>)
    hlcd_dsi.Instance = DSI;
 800acd8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    hlcd_dma2d.Instance = DMA2D;
 800acdc:	4a5e      	ldr	r2, [pc, #376]	; (800ae58 <BSP_LCD_InitEx+0x2c4>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 800acde:	f04c 0c08 	orr.w	ip, ip, #8
    hlcd_ltdc.Instance = LTDC;
 800ace2:	f8c8 1000 	str.w	r1, [r8]
    hlcd_dma2d.Instance = DMA2D;
 800ace6:	f101 7100 	add.w	r1, r1, #33554432	; 0x2000000
    hlcd_dsi.Instance = DSI;
 800acea:	f8ca 0000 	str.w	r0, [sl]
    if(MX_DSIHOST_DSI_Init(&hlcd_dsi, Width, Height, dsi_pixel_format) != HAL_OK)
 800acee:	4650      	mov	r0, sl
    hlcd_dma2d.Instance = DMA2D;
 800acf0:	6011      	str	r1, [r2, #0]
    if(MX_DSIHOST_DSI_Init(&hlcd_dsi, Width, Height, dsi_pixel_format) != HAL_OK)
 800acf2:	463a      	mov	r2, r7
 800acf4:	9b01      	ldr	r3, [sp, #4]
 800acf6:	4629      	mov	r1, r5
    __HAL_RCC_LTDC_CLK_ENABLE();
 800acf8:	f8c4 c0e4 	str.w	ip, [r4, #228]	; 0xe4
 800acfc:	f8d4 c0e4 	ldr.w	ip, [r4, #228]	; 0xe4
 800ad00:	f00c 0c08 	and.w	ip, ip, #8
 800ad04:	f8cd c014 	str.w	ip, [sp, #20]
 800ad08:	f8dd c014 	ldr.w	ip, [sp, #20]
    __HAL_RCC_LTDC_FORCE_RESET();
 800ad0c:	f8d4 c08c 	ldr.w	ip, [r4, #140]	; 0x8c
 800ad10:	f04c 0c08 	orr.w	ip, ip, #8
 800ad14:	f8c4 c08c 	str.w	ip, [r4, #140]	; 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 800ad18:	f8d4 c08c 	ldr.w	ip, [r4, #140]	; 0x8c
 800ad1c:	f02c 0c08 	bic.w	ip, ip, #8
 800ad20:	f8c4 c08c 	str.w	ip, [r4, #140]	; 0x8c
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800ad24:	f8d4 c0d4 	ldr.w	ip, [r4, #212]	; 0xd4
 800ad28:	f04c 0c10 	orr.w	ip, ip, #16
 800ad2c:	f8c4 c0d4 	str.w	ip, [r4, #212]	; 0xd4
 800ad30:	f8d4 c0d4 	ldr.w	ip, [r4, #212]	; 0xd4
 800ad34:	f00c 0c10 	and.w	ip, ip, #16
 800ad38:	f8cd c010 	str.w	ip, [sp, #16]
 800ad3c:	f8dd c010 	ldr.w	ip, [sp, #16]
    __HAL_RCC_DMA2D_FORCE_RESET();
 800ad40:	f8d4 c07c 	ldr.w	ip, [r4, #124]	; 0x7c
 800ad44:	f04c 0c10 	orr.w	ip, ip, #16
 800ad48:	f8c4 c07c 	str.w	ip, [r4, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 800ad4c:	f8d4 c07c 	ldr.w	ip, [r4, #124]	; 0x7c
 800ad50:	f02c 0c10 	bic.w	ip, ip, #16
 800ad54:	f8c4 c07c 	str.w	ip, [r4, #124]	; 0x7c
    __HAL_RCC_DSI_CLK_ENABLE();
 800ad58:	f8d4 c0e4 	ldr.w	ip, [r4, #228]	; 0xe4
 800ad5c:	f04c 0c10 	orr.w	ip, ip, #16
 800ad60:	f8c4 c0e4 	str.w	ip, [r4, #228]	; 0xe4
 800ad64:	f8d4 c0e4 	ldr.w	ip, [r4, #228]	; 0xe4
 800ad68:	f00c 0c10 	and.w	ip, ip, #16
 800ad6c:	f8cd c00c 	str.w	ip, [sp, #12]
 800ad70:	f8dd c00c 	ldr.w	ip, [sp, #12]
    __HAL_RCC_DSI_FORCE_RESET();
 800ad74:	f8d4 c08c 	ldr.w	ip, [r4, #140]	; 0x8c
 800ad78:	f04c 0c10 	orr.w	ip, ip, #16
 800ad7c:	f8c4 c08c 	str.w	ip, [r4, #140]	; 0x8c
    __HAL_RCC_DSI_RELEASE_RESET();
 800ad80:	f8d4 c08c 	ldr.w	ip, [r4, #140]	; 0x8c
 800ad84:	f02c 0c10 	bic.w	ip, ip, #16
 800ad88:	f8c4 c08c 	str.w	ip, [r4, #140]	; 0x8c
    if(MX_DSIHOST_DSI_Init(&hlcd_dsi, Width, Height, dsi_pixel_format) != HAL_OK)
 800ad8c:	f7ff fe32 	bl	800a9f4 <MX_DSIHOST_DSI_Init>
 800ad90:	2800      	cmp	r0, #0
 800ad92:	d14e      	bne.n	800ae32 <BSP_LCD_InitEx+0x29e>
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 800ad94:	4640      	mov	r0, r8
 800ad96:	f7ff fee3 	bl	800ab60 <MX_LTDC_ClockConfig>
 800ad9a:	2800      	cmp	r0, #0
 800ad9c:	d149      	bne.n	800ae32 <BSP_LCD_InitEx+0x29e>
     if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 800ad9e:	4629      	mov	r1, r5
 800ada0:	463a      	mov	r2, r7
 800ada2:	4640      	mov	r0, r8
 800ada4:	f7ff fe92 	bl	800aacc <MX_LTDC_Init>
 800ada8:	4601      	mov	r1, r0
 800adaa:	2800      	cmp	r0, #0
 800adac:	d141      	bne.n	800ae32 <BSP_LCD_InitEx+0x29e>
      config.Address     = LCD_LAYER_0_ADDRESS;
 800adae:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 800adb2:	aa0e      	add	r2, sp, #56	; 0x38
 800adb4:	4640      	mov	r0, r8
      config.X1          = Width;
 800adb6:	e9cd 150e 	strd	r1, r5, [sp, #56]	; 0x38
      config.Y1          = Height;
 800adba:	e9cd 1710 	strd	r1, r7, [sp, #64]	; 0x40
      config.Address     = LCD_LAYER_0_ADDRESS;
 800adbe:	e9cd b312 	strd	fp, r3, [sp, #72]	; 0x48
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 800adc2:	f7ff fea3 	bl	800ab0c <MX_LTDC_ConfigLayer>
 800adc6:	4604      	mov	r4, r0
 800adc8:	b150      	cbz	r0, 800ade0 <BSP_LCD_InitEx+0x24c>
        ret = BSP_ERROR_PERIPH_FAILURE;
 800adca:	f06f 0003 	mvn.w	r0, #3
    Lcd_Ctx[Instance].ReloadEnable = 1U;
 800adce:	2301      	movs	r3, #1
 800add0:	61b3      	str	r3, [r6, #24]
}
 800add2:	b015      	add	sp, #84	; 0x54
 800add4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      dsi_pixel_format = DSI_RGB565;
 800add8:	465b      	mov	r3, fp
      Lcd_Ctx[Instance].BppFactor = 2U;
 800adda:	4610      	mov	r0, r2
      ctrl_pixel_format = OTM8009A_FORMAT_RBG565;
 800addc:	4693      	mov	fp, r2
 800adde:	e6f3      	b.n	800abc8 <BSP_LCD_InitEx+0x34>
        (void)HAL_DSI_Start(&hlcd_dsi);
 800ade0:	4650      	mov	r0, sl
  IOCtx.Address     = 0;
  IOCtx.GetTick     = BSP_GetTick;
  IOCtx.WriteReg    = DSI_IO_Write;
  IOCtx.ReadReg     = DSI_IO_Read;

  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 800ade2:	4d1e      	ldr	r5, [pc, #120]	; (800ae5c <BSP_LCD_InitEx+0x2c8>)
        (void)HAL_DSI_Start(&hlcd_dsi);
 800ade4:	f002 fdb6 	bl	800d954 <HAL_DSI_Start>
        (void)HAL_DSI_ConfigFlowControl(&hlcd_dsi, DSI_FLOW_CONTROL_BTA);
 800ade8:	2104      	movs	r1, #4
 800adea:	4650      	mov	r0, sl
 800adec:	f002 fd9e 	bl	800d92c <HAL_DSI_ConfigFlowControl>
  IOCtx.WriteReg    = DSI_IO_Write;
 800adf0:	4b1b      	ldr	r3, [pc, #108]	; (800ae60 <BSP_LCD_InitEx+0x2cc>)
  IOCtx.GetTick     = BSP_GetTick;
 800adf2:	4a1c      	ldr	r2, [pc, #112]	; (800ae64 <BSP_LCD_InitEx+0x2d0>)
  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 800adf4:	4628      	mov	r0, r5
  IOCtx.WriteReg    = DSI_IO_Write;
 800adf6:	930b      	str	r3, [sp, #44]	; 0x2c
  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 800adf8:	a90a      	add	r1, sp, #40	; 0x28
  IOCtx.ReadReg     = DSI_IO_Read;
 800adfa:	4b1b      	ldr	r3, [pc, #108]	; (800ae68 <BSP_LCD_InitEx+0x2d4>)
  IOCtx.Address     = 0;
 800adfc:	f8ad 4028 	strh.w	r4, [sp, #40]	; 0x28
  IOCtx.GetTick     = BSP_GetTick;
 800ae00:	920d      	str	r2, [sp, #52]	; 0x34
  IOCtx.ReadReg     = DSI_IO_Read;
 800ae02:	930c      	str	r3, [sp, #48]	; 0x30
  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 800ae04:	f7fc fb96 	bl	8007534 <OTM8009A_RegisterBusIO>
 800ae08:	b980      	cbnz	r0, 800ae2c <BSP_LCD_InitEx+0x298>
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else
  {
    Lcd_CompObj = &OTM8009AObj;
 800ae0a:	4c18      	ldr	r4, [pc, #96]	; (800ae6c <BSP_LCD_InitEx+0x2d8>)

    if(OTM8009A_ReadID(Lcd_CompObj, &id) != OTM8009A_OK)
 800ae0c:	4628      	mov	r0, r5
 800ae0e:	a909      	add	r1, sp, #36	; 0x24
    Lcd_CompObj = &OTM8009AObj;
 800ae10:	6025      	str	r5, [r4, #0]
    if(OTM8009A_ReadID(Lcd_CompObj, &id) != OTM8009A_OK)
 800ae12:	f7fc fb7b 	bl	800750c <OTM8009A_ReadID>
 800ae16:	b948      	cbnz	r0, 800ae2c <BSP_LCD_InitEx+0x298>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }

    else
    {
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 800ae18:	4b15      	ldr	r3, [pc, #84]	; (800ae70 <BSP_LCD_InitEx+0x2dc>)
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 800ae1a:	464a      	mov	r2, r9
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 800ae1c:	4d15      	ldr	r5, [pc, #84]	; (800ae74 <BSP_LCD_InitEx+0x2e0>)
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 800ae1e:	4659      	mov	r1, fp
 800ae20:	6820      	ldr	r0, [r4, #0]
 800ae22:	681c      	ldr	r4, [r3, #0]
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 800ae24:	602b      	str	r3, [r5, #0]
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 800ae26:	47a0      	blx	r4
 800ae28:	2800      	cmp	r0, #0
 800ae2a:	d0d0      	beq.n	800adce <BSP_LCD_InitEx+0x23a>
          ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ae2c:	f06f 0006 	mvn.w	r0, #6
 800ae30:	e7cd      	b.n	800adce <BSP_LCD_InitEx+0x23a>
      ret = BSP_ERROR_PERIPH_FAILURE;
 800ae32:	f06f 0003 	mvn.w	r0, #3
}
 800ae36:	b015      	add	sp, #84	; 0x54
 800ae38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800ae3c:	f06f 0001 	mvn.w	r0, #1
  return ret;
 800ae40:	e7c7      	b.n	800add2 <BSP_LCD_InitEx+0x23e>
 800ae42:	bf00      	nop
 800ae44:	58024400 	.word	0x58024400
 800ae48:	2000a18c 	.word	0x2000a18c
 800ae4c:	58021800 	.word	0x58021800
 800ae50:	58022400 	.word	0x58022400
 800ae54:	50001000 	.word	0x50001000
 800ae58:	2000a1c4 	.word	0x2000a1c4
 800ae5c:	20009504 	.word	0x20009504
 800ae60:	0800a7ed 	.word	0x0800a7ed
 800ae64:	08009c55 	.word	0x08009c55
 800ae68:	0800a575 	.word	0x0800a575
 800ae6c:	200094fc 	.word	0x200094fc
 800ae70:	20007624 	.word	0x20007624
 800ae74:	20009500 	.word	0x20009500
 800ae78:	2000a0e4 	.word	0x2000a0e4
 800ae7c:	2000a1a8 	.word	0x2000a1a8

0800ae80 <BSP_LCD_Init>:
{
 800ae80:	b510      	push	{r4, lr}
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 800ae82:	f44f 74f0 	mov.w	r4, #480	; 0x1e0
{
 800ae86:	b082      	sub	sp, #8
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 800ae88:	f44f 7348 	mov.w	r3, #800	; 0x320
 800ae8c:	2201      	movs	r2, #1
 800ae8e:	9400      	str	r4, [sp, #0]
 800ae90:	f7ff fe80 	bl	800ab94 <BSP_LCD_InitEx>
}
 800ae94:	b002      	add	sp, #8
 800ae96:	bd10      	pop	{r4, pc}

0800ae98 <BSP_LCD_ConfigLayer>:
  if(Instance >= LCD_INSTANCES_NBR)
 800ae98:	b948      	cbnz	r0, 800aeae <BSP_LCD_ConfigLayer+0x16>
    if (MX_LTDC_ConfigLayer(&hlcd_ltdc, LayerIndex, Config) != HAL_OK)
 800ae9a:	4806      	ldr	r0, [pc, #24]	; (800aeb4 <BSP_LCD_ConfigLayer+0x1c>)
{
 800ae9c:	b508      	push	{r3, lr}
    if (MX_LTDC_ConfigLayer(&hlcd_ltdc, LayerIndex, Config) != HAL_OK)
 800ae9e:	f7ff fe35 	bl	800ab0c <MX_LTDC_ConfigLayer>
 800aea2:	2800      	cmp	r0, #0
      ret = BSP_ERROR_PERIPH_FAILURE;
 800aea4:	bf0c      	ite	eq
 800aea6:	2000      	moveq	r0, #0
 800aea8:	f06f 0003 	mvnne.w	r0, #3
}
 800aeac:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800aeae:	f06f 0001 	mvn.w	r0, #1
}
 800aeb2:	4770      	bx	lr
 800aeb4:	2000a0e4 	.word	0x2000a0e4

0800aeb8 <BSP_LCD_SetBrightness>:
  if(Instance >= LCD_INSTANCES_NBR)
 800aeb8:	b958      	cbnz	r0, 800aed2 <BSP_LCD_SetBrightness+0x1a>
    if(Lcd_Drv->SetBrightness(Lcd_CompObj, Brightness) != BSP_ERROR_NONE)
 800aeba:	4a07      	ldr	r2, [pc, #28]	; (800aed8 <BSP_LCD_SetBrightness+0x20>)
{
 800aebc:	b508      	push	{r3, lr}
    if(Lcd_Drv->SetBrightness(Lcd_CompObj, Brightness) != BSP_ERROR_NONE)
 800aebe:	4b07      	ldr	r3, [pc, #28]	; (800aedc <BSP_LCD_SetBrightness+0x24>)
 800aec0:	6810      	ldr	r0, [r2, #0]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	695b      	ldr	r3, [r3, #20]
 800aec6:	4798      	blx	r3
 800aec8:	2800      	cmp	r0, #0
      ret = BSP_ERROR_PERIPH_FAILURE;
 800aeca:	bf18      	it	ne
 800aecc:	f06f 0003 	mvnne.w	r0, #3
}
 800aed0:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800aed2:	f06f 0001 	mvn.w	r0, #1
}
 800aed6:	4770      	bx	lr
 800aed8:	200094fc 	.word	0x200094fc
 800aedc:	20009500 	.word	0x20009500

0800aee0 <BSP_SD_DeInit>:
  * @retval SD status
  */
int32_t BSP_SD_DeInit(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;
  if(Instance >= SD_INSTANCES_NBR)
 800aee0:	b9d0      	cbnz	r0, 800af18 <BSP_SD_DeInit+0x38>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    if(HAL_SD_DeInit(&hsd_sdmmc[Instance]) != HAL_OK)/* HAL SD de-initialization */
 800aee2:	4810      	ldr	r0, [pc, #64]	; (800af24 <BSP_SD_DeInit+0x44>)
{
 800aee4:	b510      	push	{r4, lr}
    if(HAL_SD_DeInit(&hsd_sdmmc[Instance]) != HAL_OK)/* HAL SD de-initialization */
 800aee6:	f006 fbab 	bl	8011640 <HAL_SD_DeInit>
 800aeea:	4604      	mov	r4, r0
 800aeec:	b9b8      	cbnz	r0, 800af1e <BSP_SD_DeInit+0x3e>
{
  GPIO_InitTypeDef gpio_init_structure;

  if(hsd == &hsd_sdmmc[0])
  {
    HAL_NVIC_DisableIRQ(SDMMC1_IRQn);
 800aeee:	2031      	movs	r0, #49	; 0x31
 800aef0:	f000 f9fe 	bl	800b2f0 <HAL_NVIC_DisableIRQ>

    /* DeInit GPIO pins can be done in the application
    (by surcharging this __weak function) */

    /* Disable SDMMC1 clock */
    __HAL_RCC_SDMMC1_CLK_DISABLE();
 800aef4:	4a0c      	ldr	r2, [pc, #48]	; (800af28 <BSP_SD_DeInit+0x48>)
    /* GPIOC configuration */
    gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
#else
    gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_12;
#endif
    HAL_GPIO_DeInit(GPIOC, gpio_init_structure.Pin);
 800aef6:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 800aefa:	480c      	ldr	r0, [pc, #48]	; (800af2c <BSP_SD_DeInit+0x4c>)
    __HAL_RCC_SDMMC1_CLK_DISABLE();
 800aefc:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
 800af00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af04:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    HAL_GPIO_DeInit(GPIOC, gpio_init_structure.Pin);
 800af08:	f002 ffb2 	bl	800de70 <HAL_GPIO_DeInit>

    /* GPIOD configuration */
    gpio_init_structure.Pin = GPIO_PIN_2;
    HAL_GPIO_DeInit(GPIOD, gpio_init_structure.Pin);
 800af0c:	2104      	movs	r1, #4
 800af0e:	4808      	ldr	r0, [pc, #32]	; (800af30 <BSP_SD_DeInit+0x50>)
 800af10:	f002 ffae 	bl	800de70 <HAL_GPIO_DeInit>
  int32_t ret = BSP_ERROR_NONE;
 800af14:	4620      	mov	r0, r4
}
 800af16:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800af18:	f06f 0001 	mvn.w	r0, #1
}
 800af1c:	4770      	bx	lr
      ret = BSP_ERROR_PERIPH_FAILURE;
 800af1e:	f06f 0003 	mvn.w	r0, #3
}
 800af22:	bd10      	pop	{r4, pc}
 800af24:	2000a22c 	.word	0x2000a22c
 800af28:	58024400 	.word	0x58024400
 800af2c:	58020800 	.word	0x58020800
 800af30:	58020c00 	.word	0x58020c00

0800af34 <MX_SDMMC1_SD_Init>:
{
 800af34:	b538      	push	{r3, r4, r5, lr}
  hsd->Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800af36:	2200      	movs	r2, #0
  hsd->Init.ClockDiv            = SDMMC_NSpeed_CLK_DIV;
 800af38:	2104      	movs	r1, #4
  hsd->Instance                 = SDMMC1;
 800af3a:	4d07      	ldr	r5, [pc, #28]	; (800af58 <MX_SDMMC1_SD_Init+0x24>)
  hsd->Init.TranceiverPresent   = SDMMC_TRANSCEIVER_PRESENT;
 800af3c:	2402      	movs	r4, #2
  hsd->Instance                 = SDMMC1;
 800af3e:	6005      	str	r5, [r0, #0]
  hsd->Init.ClockDiv            = SDMMC_NSpeed_CLK_DIV;
 800af40:	e9c0 1405 	strd	r1, r4, [r0, #20]
  hsd->Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800af44:	e9c0 2201 	strd	r2, r2, [r0, #4]
  hsd->Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800af48:	e9c0 2203 	strd	r2, r2, [r0, #12]
  if(HAL_SD_Init(hsd) != HAL_OK)
 800af4c:	f006 fff4 	bl	8011f38 <HAL_SD_Init>
}
 800af50:	3800      	subs	r0, #0
 800af52:	bf18      	it	ne
 800af54:	2001      	movne	r0, #1
 800af56:	bd38      	pop	{r3, r4, r5, pc}
 800af58:	52007000 	.word	0x52007000

0800af5c <BSP_SD_Init>:
  if(Instance >= SD_INSTANCES_NBR)
 800af5c:	2800      	cmp	r0, #0
 800af5e:	f040 8088 	bne.w	800b072 <BSP_SD_Init+0x116>
    ret = (uint32_t)HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT,GPIO_PIN_8 );/*PinDetect[Instance]*/
 800af62:	f44f 7180 	mov.w	r1, #256	; 0x100
 800af66:	4846      	ldr	r0, [pc, #280]	; (800b080 <BSP_SD_Init+0x124>)
{
 800af68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800af6c:	b08d      	sub	sp, #52	; 0x34
    ret = (uint32_t)HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT,GPIO_PIN_8 );/*PinDetect[Instance]*/
 800af6e:	f003 f84d 	bl	800e00c <HAL_GPIO_ReadPin>
    if(ret != GPIO_PIN_RESET)
 800af72:	4605      	mov	r5, r0
 800af74:	2800      	cmp	r0, #0
 800af76:	d177      	bne.n	800b068 <BSP_SD_Init+0x10c>
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 800af78:	4c42      	ldr	r4, [pc, #264]	; (800b084 <BSP_SD_Init+0x128>)
  gpio_init_structure.Alternate = GPIO_AF12_SDIO1;
 800af7a:	220c      	movs	r2, #12
  gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_12;
 800af7c:	f44f 5688 	mov.w	r6, #4352	; 0x1100
 800af80:	2702      	movs	r7, #2
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 800af82:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
  gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_12;
 800af86:	f04f 0801 	mov.w	r8, #1
 800af8a:	f04f 0903 	mov.w	r9, #3
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800af8e:	a906      	add	r1, sp, #24
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 800af90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800af94:	483c      	ldr	r0, [pc, #240]	; (800b088 <BSP_SD_Init+0x12c>)
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 800af96:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
 800af9a:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 800af9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800afa2:	9301      	str	r3, [sp, #4]
 800afa4:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800afa6:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800afaa:	f043 0302 	orr.w	r3, r3, #2
 800afae:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800afb2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800afb6:	f003 0302 	and.w	r3, r3, #2
 800afba:	9302      	str	r3, [sp, #8]
 800afbc:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800afbe:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800afc2:	f043 0304 	orr.w	r3, r3, #4
 800afc6:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800afca:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800afce:	f003 0304 	and.w	r3, r3, #4
 800afd2:	9303      	str	r3, [sp, #12]
 800afd4:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800afd6:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800afda:	f043 0308 	orr.w	r3, r3, #8
 800afde:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800afe2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Alternate = GPIO_AF12_SDIO1;
 800afe6:	920a      	str	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800afe8:	f003 0308 	and.w	r3, r3, #8
 800afec:	9304      	str	r3, [sp, #16]
 800afee:	9b04      	ldr	r3, [sp, #16]
  gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_12;
 800aff0:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800aff4:	e9cd 8908 	strd	r8, r9, [sp, #32]
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800aff8:	f002 fe1c 	bl	800dc34 <HAL_GPIO_Init>
  gpio_init_structure.Pin = GPIO_PIN_2;
 800affc:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800affe:	a906      	add	r1, sp, #24
 800b000:	4822      	ldr	r0, [pc, #136]	; (800b08c <BSP_SD_Init+0x130>)
  gpio_init_structure.Pin = GPIO_PIN_2;
 800b002:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800b004:	f002 fe16 	bl	800dc34 <HAL_GPIO_Init>
  SD_DETECT_GPIO_CLK_ENABLE();
 800b008:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Pin = SD_DETECT_PIN;
 800b00c:	f44f 7680 	mov.w	r6, #256	; 0x100
 800b010:	2700      	movs	r7, #0
 800b012:	f04f 0801 	mov.w	r8, #1
  SD_DETECT_GPIO_CLK_ENABLE();
 800b016:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  gpio_init_structure.Pin = SD_DETECT_PIN;
 800b01a:	f04f 0902 	mov.w	r9, #2
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 800b01e:	a906      	add	r1, sp, #24
 800b020:	4817      	ldr	r0, [pc, #92]	; (800b080 <BSP_SD_Init+0x124>)
  SD_DETECT_GPIO_CLK_ENABLE();
 800b022:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800b026:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800b02a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b02e:	9305      	str	r3, [sp, #20]
 800b030:	9b05      	ldr	r3, [sp, #20]
  gpio_init_structure.Pin = SD_DETECT_PIN;
 800b032:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b036:	e9cd 8908 	strd	r8, r9, [sp, #32]
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 800b03a:	f002 fdfb 	bl	800dc34 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDMMC1_IRQn, BSP_SD_IT_PRIORITY, 0);
 800b03e:	462a      	mov	r2, r5
 800b040:	210e      	movs	r1, #14
 800b042:	2031      	movs	r0, #49	; 0x31
 800b044:	f000 f90c 	bl	800b260 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800b048:	2031      	movs	r0, #49	; 0x31
 800b04a:	f000 f943 	bl	800b2d4 <HAL_NVIC_EnableIRQ>
        if(MX_SDMMC1_SD_Init(&hsd_sdmmc[Instance]) != HAL_OK)
 800b04e:	4810      	ldr	r0, [pc, #64]	; (800b090 <BSP_SD_Init+0x134>)
 800b050:	f7ff ff70 	bl	800af34 <MX_SDMMC1_SD_Init>
 800b054:	4604      	mov	r4, r0
 800b056:	b978      	cbnz	r0, 800b078 <BSP_SD_Init+0x11c>
          (void)HAL_SD_ConfigSpeedBusOperation(&hsd_sdmmc[Instance], SDMMC_SPEED_MODE_HIGH);
 800b058:	2102      	movs	r1, #2
 800b05a:	480d      	ldr	r0, [pc, #52]	; (800b090 <BSP_SD_Init+0x134>)
 800b05c:	f006 ffd2 	bl	8012004 <HAL_SD_ConfigSpeedBusOperation>
  int32_t ret = BSP_ERROR_NONE;
 800b060:	4620      	mov	r0, r4
}
 800b062:	b00d      	add	sp, #52	; 0x34
 800b064:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b068:	f06f 0006 	mvn.w	r0, #6
}
 800b06c:	b00d      	add	sp, #52	; 0x34
 800b06e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800b072:	f06f 0001 	mvn.w	r0, #1
}
 800b076:	4770      	bx	lr
          ret = BSP_ERROR_PERIPH_FAILURE;
 800b078:	f06f 0003 	mvn.w	r0, #3
  return ret;
 800b07c:	e7f1      	b.n	800b062 <BSP_SD_Init+0x106>
 800b07e:	bf00      	nop
 800b080:	58022000 	.word	0x58022000
 800b084:	58024400 	.word	0x58024400
 800b088:	58020800 	.word	0x58020800
 800b08c:	58020c00 	.word	0x58020c00
 800b090:	2000a22c 	.word	0x2000a22c

0800b094 <BSP_SD_ReadBlocks>:
{
 800b094:	b510      	push	{r4, lr}
  uint32_t timeout = SD_READ_TIMEOUT*BlocksNbr;
 800b096:	2464      	movs	r4, #100	; 0x64
{
 800b098:	b082      	sub	sp, #8
  uint32_t timeout = SD_READ_TIMEOUT*BlocksNbr;
 800b09a:	fb04 f403 	mul.w	r4, r4, r3
  if(Instance >= SD_INSTANCES_NBR)
 800b09e:	b950      	cbnz	r0, 800b0b6 <BSP_SD_ReadBlocks+0x22>
    if(HAL_SD_ReadBlocks(&hsd_sdmmc[Instance], (uint8_t *)pData, BlockIdx, BlocksNbr, timeout) != HAL_OK)
 800b0a0:	4806      	ldr	r0, [pc, #24]	; (800b0bc <BSP_SD_ReadBlocks+0x28>)
 800b0a2:	9400      	str	r4, [sp, #0]
 800b0a4:	f006 f8c2 	bl	801122c <HAL_SD_ReadBlocks>
 800b0a8:	2800      	cmp	r0, #0
      ret = BSP_ERROR_PERIPH_FAILURE;
 800b0aa:	bf0c      	ite	eq
 800b0ac:	2000      	moveq	r0, #0
 800b0ae:	f06f 0003 	mvnne.w	r0, #3
}
 800b0b2:	b002      	add	sp, #8
 800b0b4:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800b0b6:	f06f 0001 	mvn.w	r0, #1
 800b0ba:	e7fa      	b.n	800b0b2 <BSP_SD_ReadBlocks+0x1e>
 800b0bc:	2000a22c 	.word	0x2000a22c

0800b0c0 <BSP_SD_WriteBlocks>:
{
 800b0c0:	b510      	push	{r4, lr}
  uint32_t timeout = SD_READ_TIMEOUT*BlocksNbr;
 800b0c2:	2464      	movs	r4, #100	; 0x64
{
 800b0c4:	b082      	sub	sp, #8
  uint32_t timeout = SD_READ_TIMEOUT*BlocksNbr;
 800b0c6:	fb04 f403 	mul.w	r4, r4, r3
  if(Instance >= SD_INSTANCES_NBR)
 800b0ca:	b950      	cbnz	r0, 800b0e2 <BSP_SD_WriteBlocks+0x22>
    if(HAL_SD_WriteBlocks(&hsd_sdmmc[Instance], (uint8_t *)pData, BlockIdx, BlocksNbr, timeout) != HAL_OK)
 800b0cc:	4806      	ldr	r0, [pc, #24]	; (800b0e8 <BSP_SD_WriteBlocks+0x28>)
 800b0ce:	9400      	str	r4, [sp, #0]
 800b0d0:	f006 f9ca 	bl	8011468 <HAL_SD_WriteBlocks>
 800b0d4:	2800      	cmp	r0, #0
      ret = BSP_ERROR_PERIPH_FAILURE;
 800b0d6:	bf0c      	ite	eq
 800b0d8:	2000      	moveq	r0, #0
 800b0da:	f06f 0003 	mvnne.w	r0, #3
}
 800b0de:	b002      	add	sp, #8
 800b0e0:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800b0e2:	f06f 0001 	mvn.w	r0, #1
 800b0e6:	e7fa      	b.n	800b0de <BSP_SD_WriteBlocks+0x1e>
 800b0e8:	2000a22c 	.word	0x2000a22c

0800b0ec <BSP_SD_GetCardState>:
{
 800b0ec:	b508      	push	{r3, lr}
  return (int32_t)((HAL_SD_GetCardState(&hsd_sdmmc[Instance]) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b0ee:	4b04      	ldr	r3, [pc, #16]	; (800b100 <BSP_SD_GetCardState+0x14>)
 800b0f0:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
 800b0f4:	f007 f8ea 	bl	80122cc <HAL_SD_GetCardState>
}
 800b0f8:	3804      	subs	r0, #4
 800b0fa:	bf18      	it	ne
 800b0fc:	2001      	movne	r0, #1
 800b0fe:	bd08      	pop	{r3, pc}
 800b100:	2000a22c 	.word	0x2000a22c

0800b104 <BSP_SD_GetCardInfo>:
  if(Instance >= SD_INSTANCES_NBR)
 800b104:	b948      	cbnz	r0, 800b11a <BSP_SD_GetCardInfo+0x16>
    if(HAL_SD_GetCardInfo(&hsd_sdmmc[Instance], CardInfo) != HAL_OK)
 800b106:	4806      	ldr	r0, [pc, #24]	; (800b120 <BSP_SD_GetCardInfo+0x1c>)
{
 800b108:	b508      	push	{r3, lr}
    if(HAL_SD_GetCardInfo(&hsd_sdmmc[Instance], CardInfo) != HAL_OK)
 800b10a:	f006 fe5b 	bl	8011dc4 <HAL_SD_GetCardInfo>
 800b10e:	2800      	cmp	r0, #0
      ret = BSP_ERROR_PERIPH_FAILURE;
 800b110:	bf0c      	ite	eq
 800b112:	2000      	moveq	r0, #0
 800b114:	f06f 0003 	mvnne.w	r0, #3
}
 800b118:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800b11a:	f06f 0001 	mvn.w	r0, #1
}
 800b11e:	4770      	bx	lr
 800b120:	2000a22c 	.word	0x2000a22c

0800b124 <HAL_SD_DriveTransceiver_1_8V_Callback>:
}
 800b124:	4770      	bx	lr
 800b126:	bf00      	nop

0800b128 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800b128:	4b0f      	ldr	r3, [pc, #60]	; (800b168 <HAL_InitTick+0x40>)
 800b12a:	781b      	ldrb	r3, [r3, #0]
 800b12c:	b90b      	cbnz	r3, 800b132 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 800b12e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800b130:	4770      	bx	lr
{
 800b132:	b510      	push	{r4, lr}
 800b134:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800b136:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b13a:	4a0c      	ldr	r2, [pc, #48]	; (800b16c <HAL_InitTick+0x44>)
 800b13c:	fbb0 f3f3 	udiv	r3, r0, r3
 800b140:	6810      	ldr	r0, [r2, #0]
 800b142:	fbb0 f0f3 	udiv	r0, r0, r3
 800b146:	f000 f8e7 	bl	800b318 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b14a:	2c0f      	cmp	r4, #15
 800b14c:	d800      	bhi.n	800b150 <HAL_InitTick+0x28>
 800b14e:	b108      	cbz	r0, 800b154 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 800b150:	2001      	movs	r0, #1
}
 800b152:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800b154:	2200      	movs	r2, #0
 800b156:	4621      	mov	r1, r4
 800b158:	f04f 30ff 	mov.w	r0, #4294967295
 800b15c:	f000 f880 	bl	800b260 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800b160:	4b03      	ldr	r3, [pc, #12]	; (800b170 <HAL_InitTick+0x48>)
 800b162:	2000      	movs	r0, #0
 800b164:	601c      	str	r4, [r3, #0]
}
 800b166:	bd10      	pop	{r4, pc}
 800b168:	200076f8 	.word	0x200076f8
 800b16c:	2000761c 	.word	0x2000761c
 800b170:	200076fc 	.word	0x200076fc

0800b174 <HAL_Init>:
{
 800b174:	b538      	push	{r3, r4, r5, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b176:	2003      	movs	r0, #3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b178:	4c12      	ldr	r4, [pc, #72]	; (800b1c4 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b17a:	f000 f85d 	bl	800b238 <HAL_NVIC_SetPriorityGrouping>
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b17e:	4d12      	ldr	r5, [pc, #72]	; (800b1c8 <HAL_Init+0x54>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b180:	f004 fa6a 	bl	800f658 <HAL_RCC_GetSysClockFreq>
 800b184:	4b11      	ldr	r3, [pc, #68]	; (800b1cc <HAL_Init+0x58>)
 800b186:	4602      	mov	r2, r0
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800b188:	200f      	movs	r0, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b18a:	6999      	ldr	r1, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b18c:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b18e:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b192:	4003      	ands	r3, r0
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b194:	5c61      	ldrb	r1, [r4, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b196:	5ce3      	ldrb	r3, [r4, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b198:	f001 011f 	and.w	r1, r1, #31
  SystemCoreClock = common_system_clock;
 800b19c:	4c0c      	ldr	r4, [pc, #48]	; (800b1d0 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b19e:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b1a2:	40ca      	lsrs	r2, r1
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b1a4:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 800b1a8:	6022      	str	r2, [r4, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b1aa:	602b      	str	r3, [r5, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800b1ac:	f7ff ffbc 	bl	800b128 <HAL_InitTick>
 800b1b0:	b110      	cbz	r0, 800b1b8 <HAL_Init+0x44>
    return HAL_ERROR;
 800b1b2:	2401      	movs	r4, #1
}
 800b1b4:	4620      	mov	r0, r4
 800b1b6:	bd38      	pop	{r3, r4, r5, pc}
 800b1b8:	4604      	mov	r4, r0
  HAL_MspInit();
 800b1ba:	f7fb fa09 	bl	80065d0 <HAL_MspInit>
}
 800b1be:	4620      	mov	r0, r4
 800b1c0:	bd38      	pop	{r3, r4, r5, pc}
 800b1c2:	bf00      	nop
 800b1c4:	080970c8 	.word	0x080970c8
 800b1c8:	20007620 	.word	0x20007620
 800b1cc:	58024400 	.word	0x58024400
 800b1d0:	2000761c 	.word	0x2000761c

0800b1d4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800b1d4:	4a03      	ldr	r2, [pc, #12]	; (800b1e4 <HAL_IncTick+0x10>)
 800b1d6:	4b04      	ldr	r3, [pc, #16]	; (800b1e8 <HAL_IncTick+0x14>)
 800b1d8:	6811      	ldr	r1, [r2, #0]
 800b1da:	781b      	ldrb	r3, [r3, #0]
 800b1dc:	440b      	add	r3, r1
 800b1de:	6013      	str	r3, [r2, #0]
}
 800b1e0:	4770      	bx	lr
 800b1e2:	bf00      	nop
 800b1e4:	2000a2b4 	.word	0x2000a2b4
 800b1e8:	200076f8 	.word	0x200076f8

0800b1ec <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800b1ec:	4b01      	ldr	r3, [pc, #4]	; (800b1f4 <HAL_GetTick+0x8>)
 800b1ee:	6818      	ldr	r0, [r3, #0]
}
 800b1f0:	4770      	bx	lr
 800b1f2:	bf00      	nop
 800b1f4:	2000a2b4 	.word	0x2000a2b4

0800b1f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b1f8:	b538      	push	{r3, r4, r5, lr}
 800b1fa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800b1fc:	f7ff fff6 	bl	800b1ec <HAL_GetTick>
 800b200:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b202:	1c63      	adds	r3, r4, #1
 800b204:	d002      	beq.n	800b20c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800b206:	4b04      	ldr	r3, [pc, #16]	; (800b218 <HAL_Delay+0x20>)
 800b208:	781b      	ldrb	r3, [r3, #0]
 800b20a:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800b20c:	f7ff ffee 	bl	800b1ec <HAL_GetTick>
 800b210:	1b43      	subs	r3, r0, r5
 800b212:	42a3      	cmp	r3, r4
 800b214:	d3fa      	bcc.n	800b20c <HAL_Delay+0x14>
  {
  }
}
 800b216:	bd38      	pop	{r3, r4, r5, pc}
 800b218:	200076f8 	.word	0x200076f8

0800b21c <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800b21c:	4b01      	ldr	r3, [pc, #4]	; (800b224 <HAL_GetREVID+0x8>)
 800b21e:	6818      	ldr	r0, [r3, #0]
}
 800b220:	0c00      	lsrs	r0, r0, #16
 800b222:	4770      	bx	lr
 800b224:	5c001000 	.word	0x5c001000

0800b228 <HAL_EnableCompensationCell>:
  *         voltage ranges from 2.4 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 800b228:	4a02      	ldr	r2, [pc, #8]	; (800b234 <HAL_EnableCompensationCell+0xc>)
 800b22a:	6a13      	ldr	r3, [r2, #32]
 800b22c:	f043 0301 	orr.w	r3, r3, #1
 800b230:	6213      	str	r3, [r2, #32]
}
 800b232:	4770      	bx	lr
 800b234:	58000400 	.word	0x58000400

0800b238 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b238:	4907      	ldr	r1, [pc, #28]	; (800b258 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b23a:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 800b23c:	4b07      	ldr	r3, [pc, #28]	; (800b25c <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b23e:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b240:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b244:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b246:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 800b24a:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800b24c:	f85d 4b04 	ldr.w	r4, [sp], #4
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b250:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 800b252:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800b254:	60cb      	str	r3, [r1, #12]
 800b256:	4770      	bx	lr
 800b258:	e000ed00 	.word	0xe000ed00
 800b25c:	05fa0000 	.word	0x05fa0000

0800b260 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b260:	4b19      	ldr	r3, [pc, #100]	; (800b2c8 <HAL_NVIC_SetPriority+0x68>)
 800b262:	68db      	ldr	r3, [r3, #12]
 800b264:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b268:	b430      	push	{r4, r5}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b26a:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b26e:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b270:	2d04      	cmp	r5, #4
 800b272:	bf28      	it	cs
 800b274:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b276:	2c06      	cmp	r4, #6
 800b278:	d919      	bls.n	800b2ae <HAL_NVIC_SetPriority+0x4e>
 800b27a:	3b03      	subs	r3, #3
 800b27c:	f04f 34ff 	mov.w	r4, #4294967295
 800b280:	409c      	lsls	r4, r3
 800b282:	ea22 0204 	bic.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b286:	f04f 34ff 	mov.w	r4, #4294967295
  if ((int32_t)(IRQn) >= 0)
 800b28a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b28c:	fa04 f405 	lsl.w	r4, r4, r5
 800b290:	ea21 0104 	bic.w	r1, r1, r4
 800b294:	fa01 f103 	lsl.w	r1, r1, r3
 800b298:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800b29c:	db0a      	blt.n	800b2b4 <HAL_NVIC_SetPriority+0x54>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b29e:	0109      	lsls	r1, r1, #4
 800b2a0:	4b0a      	ldr	r3, [pc, #40]	; (800b2cc <HAL_NVIC_SetPriority+0x6c>)
 800b2a2:	b2c9      	uxtb	r1, r1
 800b2a4:	4403      	add	r3, r0
 800b2a6:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800b2aa:	bc30      	pop	{r4, r5}
 800b2ac:	4770      	bx	lr
 800b2ae:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b2b0:	4613      	mov	r3, r2
 800b2b2:	e7e8      	b.n	800b286 <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b2b4:	f000 000f 	and.w	r0, r0, #15
 800b2b8:	0109      	lsls	r1, r1, #4
 800b2ba:	4b05      	ldr	r3, [pc, #20]	; (800b2d0 <HAL_NVIC_SetPriority+0x70>)
 800b2bc:	b2c9      	uxtb	r1, r1
 800b2be:	4403      	add	r3, r0
 800b2c0:	7619      	strb	r1, [r3, #24]
 800b2c2:	bc30      	pop	{r4, r5}
 800b2c4:	4770      	bx	lr
 800b2c6:	bf00      	nop
 800b2c8:	e000ed00 	.word	0xe000ed00
 800b2cc:	e000e100 	.word	0xe000e100
 800b2d0:	e000ecfc 	.word	0xe000ecfc

0800b2d4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800b2d4:	2800      	cmp	r0, #0
 800b2d6:	db07      	blt.n	800b2e8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b2d8:	f000 011f 	and.w	r1, r0, #31
 800b2dc:	2301      	movs	r3, #1
 800b2de:	0940      	lsrs	r0, r0, #5
 800b2e0:	4a02      	ldr	r2, [pc, #8]	; (800b2ec <HAL_NVIC_EnableIRQ+0x18>)
 800b2e2:	408b      	lsls	r3, r1
 800b2e4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800b2e8:	4770      	bx	lr
 800b2ea:	bf00      	nop
 800b2ec:	e000e100 	.word	0xe000e100

0800b2f0 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800b2f0:	2800      	cmp	r0, #0
 800b2f2:	db0d      	blt.n	800b310 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b2f4:	0943      	lsrs	r3, r0, #5
 800b2f6:	2201      	movs	r2, #1
 800b2f8:	f000 001f 	and.w	r0, r0, #31
 800b2fc:	4905      	ldr	r1, [pc, #20]	; (800b314 <HAL_NVIC_DisableIRQ+0x24>)
 800b2fe:	3320      	adds	r3, #32
 800b300:	fa02 f000 	lsl.w	r0, r2, r0
 800b304:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800b308:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800b30c:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800b310:	4770      	bx	lr
 800b312:	bf00      	nop
 800b314:	e000e100 	.word	0xe000e100

0800b318 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b318:	3801      	subs	r0, #1
 800b31a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800b31e:	d20d      	bcs.n	800b33c <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b320:	4b07      	ldr	r3, [pc, #28]	; (800b340 <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b322:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b324:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b326:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b328:	25f0      	movs	r5, #240	; 0xf0
 800b32a:	4c06      	ldr	r4, [pc, #24]	; (800b344 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b32c:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800b32e:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b330:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b336:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 800b338:	bc30      	pop	{r4, r5}
 800b33a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800b33c:	2001      	movs	r0, #1
 800b33e:	4770      	bx	lr
 800b340:	e000e010 	.word	0xe000e010
 800b344:	e000ed00 	.word	0xe000ed00

0800b348 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800b348:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800b34c:	4a04      	ldr	r2, [pc, #16]	; (800b360 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800b34e:	2000      	movs	r0, #0
 800b350:	4904      	ldr	r1, [pc, #16]	; (800b364 <HAL_MPU_Disable+0x1c>)
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800b352:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800b354:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b358:	6253      	str	r3, [r2, #36]	; 0x24
  MPU->CTRL = 0;
 800b35a:	6048      	str	r0, [r1, #4]
}
 800b35c:	4770      	bx	lr
 800b35e:	bf00      	nop
 800b360:	e000ed00 	.word	0xe000ed00
 800b364:	e000ed90 	.word	0xe000ed90

0800b368 <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800b368:	4a06      	ldr	r2, [pc, #24]	; (800b384 <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800b36a:	f040 0001 	orr.w	r0, r0, #1
 800b36e:	4b06      	ldr	r3, [pc, #24]	; (800b388 <HAL_MPU_Enable+0x20>)
 800b370:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800b372:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800b374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b378:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800b37a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800b37e:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800b382:	4770      	bx	lr
 800b384:	e000ed00 	.word	0xe000ed00
 800b388:	e000ed90 	.word	0xe000ed90

0800b38c <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800b38c:	4a12      	ldr	r2, [pc, #72]	; (800b3d8 <HAL_MPU_ConfigRegion+0x4c>)
 800b38e:	7843      	ldrb	r3, [r0, #1]
 800b390:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != 0UL)
 800b392:	7801      	ldrb	r1, [r0, #0]
 800b394:	b1e9      	cbz	r1, 800b3d2 <HAL_MPU_ConfigRegion+0x46>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800b396:	6843      	ldr	r3, [r0, #4]
{
 800b398:	b470      	push	{r4, r5, r6}
    MPU->RBAR = MPU_Init->BaseAddress;
 800b39a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800b39c:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b39e:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800b3a0:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800b3a2:	7a85      	ldrb	r5, [r0, #10]
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800b3a4:	7b86      	ldrb	r6, [r0, #14]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b3a6:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800b3aa:	7b44      	ldrb	r4, [r0, #13]
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800b3ac:	430b      	orrs	r3, r1
 800b3ae:	7a01      	ldrb	r1, [r0, #8]
 800b3b0:	ea43 43c5 	orr.w	r3, r3, r5, lsl #19
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800b3b4:	7bc5      	ldrb	r5, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800b3b6:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800b3ba:	7a44      	ldrb	r4, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800b3bc:	ea43 4346 	orr.w	r3, r3, r6, lsl #17
 800b3c0:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 800b3c4:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800b3c8:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800b3cc:	bc70      	pop	{r4, r5, r6}
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b3ce:	6113      	str	r3, [r2, #16]
}
 800b3d0:	4770      	bx	lr
    MPU->RBAR = 0x00;
 800b3d2:	60d1      	str	r1, [r2, #12]
    MPU->RASR = 0x00;
 800b3d4:	6111      	str	r1, [r2, #16]
 800b3d6:	4770      	bx	lr
 800b3d8:	e000ed90 	.word	0xe000ed90

0800b3dc <HAL_DCMI_MspInit>:
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_MspInit could be implemented in the user file
   */
}
 800b3dc:	4770      	bx	lr
 800b3de:	bf00      	nop

0800b3e0 <HAL_DCMI_Init>:
  if (hdcmi == NULL)
 800b3e0:	2800      	cmp	r0, #0
 800b3e2:	d048      	beq.n	800b476 <HAL_DCMI_Init+0x96>
{
 800b3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 800b3e6:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800b3ea:	4604      	mov	r4, r0
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d03f      	beq.n	800b470 <HAL_DCMI_Init+0x90>
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800b3f0:	2202      	movs	r2, #2
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800b3f2:	69a3      	ldr	r3, [r4, #24]
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800b3f4:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d135      	bne.n	800b468 <HAL_DCMI_Init+0x88>
 800b3fc:	6a67      	ldr	r7, [r4, #36]	; 0x24
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800b3fe:	6861      	ldr	r1, [r4, #4]
 800b400:	6960      	ldr	r0, [r4, #20]
 800b402:	430b      	orrs	r3, r1
 800b404:	6a26      	ldr	r6, [r4, #32]
  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800b406:	2910      	cmp	r1, #16
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800b408:	ea43 0300 	orr.w	r3, r3, r0
 800b40c:	68a0      	ldr	r0, [r4, #8]
 800b40e:	e9d4 5203 	ldrd	r5, r2, [r4, #12]
 800b412:	ea43 0305 	orr.w	r3, r3, r5
 800b416:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800b418:	ea43 0302 	orr.w	r3, r3, r2
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800b41c:	6822      	ldr	r2, [r4, #0]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800b41e:	ea43 0300 	orr.w	r3, r3, r0
 800b422:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800b424:	ea43 0306 	orr.w	r3, r3, r6
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800b428:	6816      	ldr	r6, [r2, #0]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800b42a:	ea43 0305 	orr.w	r3, r3, r5
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800b42e:	4d13      	ldr	r5, [pc, #76]	; (800b47c <HAL_DCMI_Init+0x9c>)
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800b430:	ea43 0300 	orr.w	r3, r3, r0
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800b434:	ea05 0506 	and.w	r5, r5, r6
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800b438:	6b20      	ldr	r0, [r4, #48]	; 0x30
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800b43a:	6015      	str	r5, [r2, #0]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800b43c:	ea43 0300 	orr.w	r3, r3, r0
 800b440:	6810      	ldr	r0, [r2, #0]
 800b442:	ea43 0300 	orr.w	r3, r3, r0
 800b446:	ea43 0307 	orr.w	r3, r3, r7
 800b44a:	6013      	str	r3, [r2, #0]
  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800b44c:	d101      	bne.n	800b452 <HAL_DCMI_Init+0x72>
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800b44e:	69e3      	ldr	r3, [r4, #28]
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800b450:	6193      	str	r3, [r2, #24]
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800b452:	68d3      	ldr	r3, [r2, #12]
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800b454:	2100      	movs	r1, #0
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800b456:	2501      	movs	r5, #1
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800b458:	f043 031e 	orr.w	r3, r3, #30
  return HAL_OK;
 800b45c:	4608      	mov	r0, r1
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800b45e:	60d3      	str	r3, [r2, #12]
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800b460:	64e1      	str	r1, [r4, #76]	; 0x4c
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800b462:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 800b466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 800b468:	2200      	movs	r2, #0
 800b46a:	4617      	mov	r7, r2
 800b46c:	6262      	str	r2, [r4, #36]	; 0x24
 800b46e:	e7c6      	b.n	800b3fe <HAL_DCMI_Init+0x1e>
    HAL_DCMI_MspInit(hdcmi);
 800b470:	f7ff ffb4 	bl	800b3dc <HAL_DCMI_MspInit>
 800b474:	e7bc      	b.n	800b3f0 <HAL_DCMI_Init+0x10>
    return HAL_ERROR;
 800b476:	2001      	movs	r0, #1
}
 800b478:	4770      	bx	lr
 800b47a:	bf00      	nop
 800b47c:	ffe0f007 	.word	0xffe0f007

0800b480 <HAL_DCMI_MspDeInit>:
 800b480:	4770      	bx	lr
 800b482:	bf00      	nop

0800b484 <HAL_DCMI_DeInit>:
{
 800b484:	b510      	push	{r4, lr}
 800b486:	4604      	mov	r4, r0
  HAL_DCMI_MspDeInit(hdcmi);
 800b488:	f7ff fffa 	bl	800b480 <HAL_DCMI_MspDeInit>
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800b48c:	2000      	movs	r0, #0
 800b48e:	64e0      	str	r0, [r4, #76]	; 0x4c
  __HAL_UNLOCK(hdcmi);
 800b490:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  hdcmi->State = HAL_DCMI_STATE_RESET;
 800b494:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800b498:	bd10      	pop	{r4, pc}
 800b49a:	bf00      	nop

0800b49c <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 800b49c:	b538      	push	{r3, r4, r5, lr}
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800b49e:	4b1e      	ldr	r3, [pc, #120]	; (800b518 <HAL_DCMI_Stop+0x7c>)
 800b4a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b4a4:	491d      	ldr	r1, [pc, #116]	; (800b51c <HAL_DCMI_Stop+0x80>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	fba1 1303 	umull	r1, r3, r1, r3
  HAL_StatusTypeDef status = HAL_OK;

  /* Process locked */
  __HAL_LOCK(hdcmi);
 800b4ac:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800b4b0:	0a5b      	lsrs	r3, r3, #9
  __HAL_LOCK(hdcmi);
 800b4b2:	2901      	cmp	r1, #1
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800b4b4:	fb02 f203 	mul.w	r2, r2, r3
  __HAL_LOCK(hdcmi);
 800b4b8:	d02a      	beq.n	800b510 <HAL_DCMI_Stop+0x74>
 800b4ba:	4605      	mov	r5, r0

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800b4bc:	2302      	movs	r3, #2
  __HAL_LOCK(hdcmi);
 800b4be:	2001      	movs	r0, #1

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800b4c0:	6829      	ldr	r1, [r5, #0]
  __HAL_LOCK(hdcmi);
 800b4c2:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800b4c6:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800b4ca:	680b      	ldr	r3, [r1, #0]
 800b4cc:	f023 0301 	bic.w	r3, r3, #1
 800b4d0:	600b      	str	r3, [r1, #0]
 800b4d2:	e003      	b.n	800b4dc <HAL_DCMI_Stop+0x40>

      status = HAL_TIMEOUT;
      break;
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 800b4d4:	680b      	ldr	r3, [r1, #0]
 800b4d6:	f013 0301 	ands.w	r3, r3, #1
 800b4da:	d017      	beq.n	800b50c <HAL_DCMI_Stop+0x70>
    if (count == 0U)
 800b4dc:	3a01      	subs	r2, #1
 800b4de:	d1f9      	bne.n	800b4d4 <HAL_DCMI_Stop+0x38>
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 800b4e0:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
      status = HAL_TIMEOUT;
 800b4e2:	2403      	movs	r4, #3
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 800b4e4:	f043 0320 	orr.w	r3, r3, #32
 800b4e8:	64eb      	str	r3, [r5, #76]	; 0x4c

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 800b4ea:	680b      	ldr	r3, [r1, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 800b4ec:	6ca8      	ldr	r0, [r5, #72]	; 0x48
  __HAL_DCMI_DISABLE(hdcmi);
 800b4ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b4f2:	600b      	str	r3, [r1, #0]
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 800b4f4:	f000 ff4a 	bl	800c38c <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 800b4f8:	6ce9      	ldr	r1, [r5, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 800b4fa:	2301      	movs	r3, #1

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 800b4fc:	2200      	movs	r2, #0
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 800b4fe:	64e9      	str	r1, [r5, #76]	; 0x4c

  /* Return function status */
  return status;
}
 800b500:	4620      	mov	r0, r4
  __HAL_UNLOCK(hdcmi);
 800b502:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
  hdcmi->State = HAL_DCMI_STATE_READY;
 800b506:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 800b50a:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef status = HAL_OK;
 800b50c:	461c      	mov	r4, r3
 800b50e:	e7ec      	b.n	800b4ea <HAL_DCMI_Stop+0x4e>
  __HAL_LOCK(hdcmi);
 800b510:	2402      	movs	r4, #2
}
 800b512:	4620      	mov	r0, r4
 800b514:	bd38      	pop	{r3, r4, r5, pc}
 800b516:	bf00      	nop
 800b518:	2000761c 	.word	0x2000761c
 800b51c:	10624dd3 	.word	0x10624dd3

0800b520 <HAL_DCMI_Suspend>:
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Suspend(DCMI_HandleTypeDef *hdcmi)
{
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800b520:	4b1f      	ldr	r3, [pc, #124]	; (800b5a0 <HAL_DCMI_Suspend+0x80>)
 800b522:	6819      	ldr	r1, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;

  /* Process locked */
  __HAL_LOCK(hdcmi);
 800b524:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800b528:	2b01      	cmp	r3, #1
 800b52a:	d036      	beq.n	800b59a <HAL_DCMI_Suspend+0x7a>
 800b52c:	4602      	mov	r2, r0
 800b52e:	2001      	movs	r0, #1

  if (hdcmi->State == HAL_DCMI_STATE_BUSY)
 800b530:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
  __HAL_LOCK(hdcmi);
 800b534:	f882 0034 	strb.w	r0, [r2, #52]	; 0x34
  if (hdcmi->State == HAL_DCMI_STATE_BUSY)
 800b538:	2b02      	cmp	r3, #2
 800b53a:	d004      	beq.n	800b546 <HAL_DCMI_Suspend+0x26>
      }
    }
    while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 800b53c:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 800b53e:	2000      	movs	r0, #0
  __HAL_UNLOCK(hdcmi);
 800b540:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34

  /* Return function status */
  return status;
}
 800b544:	4770      	bx	lr
{
 800b546:	b430      	push	{r4, r5}
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800b548:	6810      	ldr	r0, [r2, #0]
    hdcmi->State = HAL_DCMI_STATE_SUSPENDED;
 800b54a:	2405      	movs	r4, #5
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800b54c:	4d15      	ldr	r5, [pc, #84]	; (800b5a4 <HAL_DCMI_Suspend+0x84>)
 800b54e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    hdcmi->State = HAL_DCMI_STATE_SUSPENDED;
 800b552:	f882 4035 	strb.w	r4, [r2, #53]	; 0x35
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800b556:	fba5 5101 	umull	r5, r1, r5, r1
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800b55a:	6804      	ldr	r4, [r0, #0]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800b55c:	0a49      	lsrs	r1, r1, #9
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800b55e:	f024 0401 	bic.w	r4, r4, #1
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800b562:	fb03 f301 	mul.w	r3, r3, r1
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800b566:	6004      	str	r4, [r0, #0]
 800b568:	e002      	b.n	800b570 <HAL_DCMI_Suspend+0x50>
    while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 800b56a:	6801      	ldr	r1, [r0, #0]
 800b56c:	07c9      	lsls	r1, r1, #31
 800b56e:	d50e      	bpl.n	800b58e <HAL_DCMI_Suspend+0x6e>
      if (count == 0U)
 800b570:	3b01      	subs	r3, #1
 800b572:	d1fa      	bne.n	800b56a <HAL_DCMI_Suspend+0x4a>
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 800b574:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        hdcmi->State = HAL_DCMI_STATE_READY;
 800b576:	2101      	movs	r1, #1
        status = HAL_TIMEOUT;
 800b578:	2003      	movs	r0, #3
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 800b57a:	f043 0320 	orr.w	r3, r3, #32
 800b57e:	64d3      	str	r3, [r2, #76]	; 0x4c
  __HAL_UNLOCK(hdcmi);
 800b580:	2300      	movs	r3, #0
        hdcmi->State = HAL_DCMI_STATE_READY;
 800b582:	f882 1035 	strb.w	r1, [r2, #53]	; 0x35
  __HAL_UNLOCK(hdcmi);
 800b586:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
}
 800b58a:	bc30      	pop	{r4, r5}
 800b58c:	4770      	bx	lr
  __HAL_UNLOCK(hdcmi);
 800b58e:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 800b590:	2000      	movs	r0, #0
  __HAL_UNLOCK(hdcmi);
 800b592:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
}
 800b596:	bc30      	pop	{r4, r5}
 800b598:	4770      	bx	lr
  __HAL_LOCK(hdcmi);
 800b59a:	2002      	movs	r0, #2
 800b59c:	4770      	bx	lr
 800b59e:	bf00      	nop
 800b5a0:	2000761c 	.word	0x2000761c
 800b5a4:	10624dd3 	.word	0x10624dd3

0800b5a8 <HAL_DCMI_Resume>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Resume(DCMI_HandleTypeDef *hdcmi)
{
  /* Process locked */
  __HAL_LOCK(hdcmi);
 800b5a8:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800b5ac:	2b01      	cmp	r3, #1
 800b5ae:	d013      	beq.n	800b5d8 <HAL_DCMI_Resume+0x30>

  if (hdcmi->State == HAL_DCMI_STATE_SUSPENDED)
 800b5b0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
  __HAL_LOCK(hdcmi);
 800b5b4:	2201      	movs	r2, #1
  if (hdcmi->State == HAL_DCMI_STATE_SUSPENDED)
 800b5b6:	2b05      	cmp	r3, #5
  __HAL_LOCK(hdcmi);
 800b5b8:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
  if (hdcmi->State == HAL_DCMI_STATE_SUSPENDED)
 800b5bc:	d107      	bne.n	800b5ce <HAL_DCMI_Resume+0x26>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_BUSY;
 800b5be:	2302      	movs	r3, #2

    /* Disable Capture */
    hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 800b5c0:	6802      	ldr	r2, [r0, #0]
    hdcmi->State = HAL_DCMI_STATE_BUSY;
 800b5c2:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 800b5c6:	6813      	ldr	r3, [r2, #0]
 800b5c8:	f043 0301 	orr.w	r3, r3, #1
 800b5cc:	6013      	str	r3, [r2, #0]
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	4770      	bx	lr
  __HAL_LOCK(hdcmi);
 800b5d8:	2002      	movs	r0, #2
}
 800b5da:	4770      	bx	lr

0800b5dc <DCMI_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b5dc:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800b5de:	b508      	push	{r3, lr}

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 800b5e0:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800b5e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5e4:	2b02      	cmp	r3, #2
 800b5e6:	d006      	beq.n	800b5f6 <DCMI_DMAError+0x1a>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 800b5e8:	2301      	movs	r3, #1
 800b5ea:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 800b5ee:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800b5f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5f4:	64c3      	str	r3, [r0, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 800b5f6:	f7fe feef 	bl	800a3d8 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 800b5fa:	bd08      	pop	{r3, pc}

0800b5fc <HAL_DCMI_IRQHandler>:
{
 800b5fc:	b538      	push	{r3, r4, r5, lr}
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 800b5fe:	6803      	ldr	r3, [r0, #0]
{
 800b600:	4604      	mov	r4, r0
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 800b602:	691d      	ldr	r5, [r3, #16]
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 800b604:	0769      	lsls	r1, r5, #29
 800b606:	d437      	bmi.n	800b678 <HAL_DCMI_IRQHandler+0x7c>
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 800b608:	07aa      	lsls	r2, r5, #30
 800b60a:	d425      	bmi.n	800b658 <HAL_DCMI_IRQHandler+0x5c>
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 800b60c:	06eb      	lsls	r3, r5, #27
 800b60e:	d41c      	bmi.n	800b64a <HAL_DCMI_IRQHandler+0x4e>
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 800b610:	0728      	lsls	r0, r5, #28
 800b612:	d413      	bmi.n	800b63c <HAL_DCMI_IRQHandler+0x40>
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 800b614:	07e9      	lsls	r1, r5, #31
 800b616:	d510      	bpl.n	800b63a <HAL_DCMI_IRQHandler+0x3e>
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800b618:	6823      	ldr	r3, [r4, #0]
 800b61a:	681a      	ldr	r2, [r3, #0]
 800b61c:	0792      	lsls	r2, r2, #30
 800b61e:	d503      	bpl.n	800b628 <HAL_DCMI_IRQHandler+0x2c>
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800b620:	68da      	ldr	r2, [r3, #12]
 800b622:	f022 021e 	bic.w	r2, r2, #30
 800b626:	60da      	str	r2, [r3, #12]
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 800b628:	68da      	ldr	r2, [r3, #12]
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 800b62a:	2101      	movs	r1, #1
    HAL_DCMI_FrameEventCallback(hdcmi);
 800b62c:	4620      	mov	r0, r4
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 800b62e:	f022 0201 	bic.w	r2, r2, #1
 800b632:	60da      	str	r2, [r3, #12]
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 800b634:	6159      	str	r1, [r3, #20]
    HAL_DCMI_FrameEventCallback(hdcmi);
 800b636:	f7fe fec3 	bl	800a3c0 <HAL_DCMI_FrameEventCallback>
}
 800b63a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 800b63c:	6823      	ldr	r3, [r4, #0]
 800b63e:	2208      	movs	r2, #8
    HAL_DCMI_VsyncEventCallback(hdcmi);
 800b640:	4620      	mov	r0, r4
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 800b642:	615a      	str	r2, [r3, #20]
    HAL_DCMI_VsyncEventCallback(hdcmi);
 800b644:	f7fe fec2 	bl	800a3cc <HAL_DCMI_VsyncEventCallback>
 800b648:	e7e4      	b.n	800b614 <HAL_DCMI_IRQHandler+0x18>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 800b64a:	6823      	ldr	r3, [r4, #0]
 800b64c:	2210      	movs	r2, #16
    HAL_DCMI_LineEventCallback(hdcmi);
 800b64e:	4620      	mov	r0, r4
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 800b650:	615a      	str	r2, [r3, #20]
    HAL_DCMI_LineEventCallback(hdcmi);
 800b652:	f7fe feaf 	bl	800a3b4 <HAL_DCMI_LineEventCallback>
 800b656:	e7db      	b.n	800b610 <HAL_DCMI_IRQHandler+0x14>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 800b658:	6823      	ldr	r3, [r4, #0]
 800b65a:	2202      	movs	r2, #2
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800b65c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800b65e:	2104      	movs	r1, #4
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 800b660:	615a      	str	r2, [r3, #20]
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 800b662:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800b664:	4a0b      	ldr	r2, [pc, #44]	; (800b694 <HAL_DCMI_IRQHandler+0x98>)
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 800b666:	f043 0301 	orr.w	r3, r3, #1
 800b66a:	64e3      	str	r3, [r4, #76]	; 0x4c
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800b66c:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800b670:	6502      	str	r2, [r0, #80]	; 0x50
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800b672:	f001 f80b 	bl	800c68c <HAL_DMA_Abort_IT>
 800b676:	e7c9      	b.n	800b60c <HAL_DCMI_IRQHandler+0x10>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 800b678:	2204      	movs	r2, #4
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800b67a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800b67c:	4905      	ldr	r1, [pc, #20]	; (800b694 <HAL_DCMI_IRQHandler+0x98>)
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 800b67e:	615a      	str	r2, [r3, #20]
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 800b680:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800b682:	f043 0302 	orr.w	r3, r3, #2
 800b686:	64e3      	str	r3, [r4, #76]	; 0x4c
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800b688:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800b68c:	6501      	str	r1, [r0, #80]	; 0x50
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800b68e:	f000 fffd 	bl	800c68c <HAL_DMA_Abort_IT>
 800b692:	e7b9      	b.n	800b608 <HAL_DCMI_IRQHandler+0xc>
 800b694:	0800b5dd 	.word	0x0800b5dd

0800b698 <HAL_DCMI_ConfigCrop>:
{
 800b698:	b470      	push	{r4, r5, r6}
 800b69a:	4604      	mov	r4, r0
  __HAL_LOCK(hdcmi);
 800b69c:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 800b6a0:	2801      	cmp	r0, #1
 800b6a2:	d013      	beq.n	800b6cc <HAL_DCMI_ConfigCrop+0x34>
  hdcmi->Instance->CWSIZER = (XSize | (YSize << DCMI_CWSIZE_VLINE_Pos));
 800b6a4:	9803      	ldr	r0, [sp, #12]
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800b6a6:	2602      	movs	r6, #2
  hdcmi->Instance->CWSTRTR = (X0 | (Y0 << DCMI_CWSTRT_VST_Pos));
 800b6a8:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800b6ac:	2501      	movs	r5, #1
  hdcmi->Instance->CWSIZER = (XSize | (YSize << DCMI_CWSIZE_VLINE_Pos));
 800b6ae:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  __HAL_UNLOCK(hdcmi);
 800b6b2:	2100      	movs	r1, #0
  hdcmi->Instance->CWSIZER = (XSize | (YSize << DCMI_CWSIZE_VLINE_Pos));
 800b6b4:	6820      	ldr	r0, [r4, #0]
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800b6b6:	f884 6035 	strb.w	r6, [r4, #53]	; 0x35
  hdcmi->Instance->CWSIZER = (XSize | (YSize << DCMI_CWSIZE_VLINE_Pos));
 800b6ba:	6243      	str	r3, [r0, #36]	; 0x24
  hdcmi->Instance->CWSTRTR = (X0 | (Y0 << DCMI_CWSTRT_VST_Pos));
 800b6bc:	6202      	str	r2, [r0, #32]
  return HAL_OK;
 800b6be:	4608      	mov	r0, r1
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800b6c0:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdcmi);
 800b6c4:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
}
 800b6c8:	bc70      	pop	{r4, r5, r6}
 800b6ca:	4770      	bx	lr
  __HAL_LOCK(hdcmi);
 800b6cc:	2002      	movs	r0, #2
}
 800b6ce:	bc70      	pop	{r4, r5, r6}
 800b6d0:	4770      	bx	lr
 800b6d2:	bf00      	nop

0800b6d4 <HAL_DCMI_DisableCrop>:
  __HAL_LOCK(hdcmi);
 800b6d4:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 800b6d8:	2a01      	cmp	r2, #1
 800b6da:	d012      	beq.n	800b702 <HAL_DCMI_DisableCrop+0x2e>
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800b6dc:	2202      	movs	r2, #2
 800b6de:	4603      	mov	r3, r0
  __HAL_UNLOCK(hdcmi);
 800b6e0:	2100      	movs	r1, #0
{
 800b6e2:	b430      	push	{r4, r5}
  hdcmi->Instance->CR &= ~(uint32_t)DCMI_CR_CROP;
 800b6e4:	6804      	ldr	r4, [r0, #0]
  hdcmi->State = HAL_DCMI_STATE_READY;
 800b6e6:	2501      	movs	r5, #1
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800b6e8:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
  return HAL_OK;
 800b6ec:	4608      	mov	r0, r1
  hdcmi->Instance->CR &= ~(uint32_t)DCMI_CR_CROP;
 800b6ee:	6822      	ldr	r2, [r4, #0]
 800b6f0:	f022 0204 	bic.w	r2, r2, #4
 800b6f4:	6022      	str	r2, [r4, #0]
  hdcmi->State = HAL_DCMI_STATE_READY;
 800b6f6:	f883 5035 	strb.w	r5, [r3, #53]	; 0x35
  __HAL_UNLOCK(hdcmi);
 800b6fa:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
}
 800b6fe:	bc30      	pop	{r4, r5}
 800b700:	4770      	bx	lr
  __HAL_LOCK(hdcmi);
 800b702:	2002      	movs	r0, #2
}
 800b704:	4770      	bx	lr
 800b706:	bf00      	nop

0800b708 <HAL_DCMI_EnableCrop>:
  __HAL_LOCK(hdcmi);
 800b708:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 800b70c:	2a01      	cmp	r2, #1
 800b70e:	d012      	beq.n	800b736 <HAL_DCMI_EnableCrop+0x2e>
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800b710:	2202      	movs	r2, #2
 800b712:	4603      	mov	r3, r0
  __HAL_UNLOCK(hdcmi);
 800b714:	2100      	movs	r1, #0
{
 800b716:	b430      	push	{r4, r5}
  hdcmi->Instance->CR |= (uint32_t)DCMI_CR_CROP;
 800b718:	6804      	ldr	r4, [r0, #0]
  hdcmi->State = HAL_DCMI_STATE_READY;
 800b71a:	2501      	movs	r5, #1
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800b71c:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
  return HAL_OK;
 800b720:	4608      	mov	r0, r1
  hdcmi->Instance->CR |= (uint32_t)DCMI_CR_CROP;
 800b722:	6822      	ldr	r2, [r4, #0]
 800b724:	f042 0204 	orr.w	r2, r2, #4
 800b728:	6022      	str	r2, [r4, #0]
  hdcmi->State = HAL_DCMI_STATE_READY;
 800b72a:	f883 5035 	strb.w	r5, [r3, #53]	; 0x35
  __HAL_UNLOCK(hdcmi);
 800b72e:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
}
 800b732:	bc30      	pop	{r4, r5}
 800b734:	4770      	bx	lr
  __HAL_LOCK(hdcmi);
 800b736:	2002      	movs	r0, #2
}
 800b738:	4770      	bx	lr
 800b73a:	bf00      	nop

0800b73c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b73c:	6802      	ldr	r2, [r0, #0]
 800b73e:	4b35      	ldr	r3, [pc, #212]	; (800b814 <DMA_CalcBaseAndBitshift+0xd8>)
 800b740:	4935      	ldr	r1, [pc, #212]	; (800b818 <DMA_CalcBaseAndBitshift+0xdc>)
{
 800b742:	b430      	push	{r4, r5}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b744:	4c35      	ldr	r4, [pc, #212]	; (800b81c <DMA_CalcBaseAndBitshift+0xe0>)
 800b746:	4d36      	ldr	r5, [pc, #216]	; (800b820 <DMA_CalcBaseAndBitshift+0xe4>)
 800b748:	42a2      	cmp	r2, r4
 800b74a:	bf18      	it	ne
 800b74c:	429a      	cmpne	r2, r3
 800b74e:	f104 0448 	add.w	r4, r4, #72	; 0x48
 800b752:	bf0c      	ite	eq
 800b754:	2301      	moveq	r3, #1
 800b756:	2300      	movne	r3, #0
 800b758:	428a      	cmp	r2, r1
 800b75a:	bf08      	it	eq
 800b75c:	f043 0301 	orreq.w	r3, r3, #1
 800b760:	3148      	adds	r1, #72	; 0x48
 800b762:	42aa      	cmp	r2, r5
 800b764:	bf08      	it	eq
 800b766:	f043 0301 	orreq.w	r3, r3, #1
 800b76a:	3548      	adds	r5, #72	; 0x48
 800b76c:	42a2      	cmp	r2, r4
 800b76e:	bf08      	it	eq
 800b770:	f043 0301 	orreq.w	r3, r3, #1
 800b774:	3448      	adds	r4, #72	; 0x48
 800b776:	428a      	cmp	r2, r1
 800b778:	bf08      	it	eq
 800b77a:	f043 0301 	orreq.w	r3, r3, #1
 800b77e:	f501 7162 	add.w	r1, r1, #904	; 0x388
 800b782:	42aa      	cmp	r2, r5
 800b784:	bf08      	it	eq
 800b786:	f043 0301 	orreq.w	r3, r3, #1
 800b78a:	f505 7562 	add.w	r5, r5, #904	; 0x388
 800b78e:	42a2      	cmp	r2, r4
 800b790:	bf08      	it	eq
 800b792:	f043 0301 	orreq.w	r3, r3, #1
 800b796:	f504 7462 	add.w	r4, r4, #904	; 0x388
 800b79a:	428a      	cmp	r2, r1
 800b79c:	bf08      	it	eq
 800b79e:	f043 0301 	orreq.w	r3, r3, #1
 800b7a2:	3148      	adds	r1, #72	; 0x48
 800b7a4:	42aa      	cmp	r2, r5
 800b7a6:	bf08      	it	eq
 800b7a8:	f043 0301 	orreq.w	r3, r3, #1
 800b7ac:	3548      	adds	r5, #72	; 0x48
 800b7ae:	42a2      	cmp	r2, r4
 800b7b0:	bf08      	it	eq
 800b7b2:	f043 0301 	orreq.w	r3, r3, #1
 800b7b6:	3448      	adds	r4, #72	; 0x48
 800b7b8:	428a      	cmp	r2, r1
 800b7ba:	bf08      	it	eq
 800b7bc:	f043 0301 	orreq.w	r3, r3, #1
 800b7c0:	3148      	adds	r1, #72	; 0x48
 800b7c2:	42aa      	cmp	r2, r5
 800b7c4:	bf08      	it	eq
 800b7c6:	f043 0301 	orreq.w	r3, r3, #1
 800b7ca:	42a2      	cmp	r2, r4
 800b7cc:	bf08      	it	eq
 800b7ce:	f043 0301 	orreq.w	r3, r3, #1
 800b7d2:	428a      	cmp	r2, r1
 800b7d4:	bf08      	it	eq
 800b7d6:	f043 0301 	orreq.w	r3, r3, #1
 800b7da:	b913      	cbnz	r3, 800b7e2 <DMA_CalcBaseAndBitshift+0xa6>
 800b7dc:	4b11      	ldr	r3, [pc, #68]	; (800b824 <DMA_CalcBaseAndBitshift+0xe8>)
 800b7de:	429a      	cmp	r2, r3
 800b7e0:	d113      	bne.n	800b80a <DMA_CalcBaseAndBitshift+0xce>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b7e2:	b2d3      	uxtb	r3, r2
 800b7e4:	4910      	ldr	r1, [pc, #64]	; (800b828 <DMA_CalcBaseAndBitshift+0xec>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800b7e6:	4c11      	ldr	r4, [pc, #68]	; (800b82c <DMA_CalcBaseAndBitshift+0xf0>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b7e8:	3b10      	subs	r3, #16
 800b7ea:	fba1 5103 	umull	r5, r1, r1, r3

    if (stream_number > 3U)
 800b7ee:	2b5f      	cmp	r3, #95	; 0x5f
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800b7f0:	4b0f      	ldr	r3, [pc, #60]	; (800b830 <DMA_CalcBaseAndBitshift+0xf4>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800b7f2:	f3c1 1102 	ubfx	r1, r1, #4, #3
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800b7f6:	ea03 0302 	and.w	r3, r3, r2
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800b7fa:	5c61      	ldrb	r1, [r4, r1]
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800b7fc:	bf88      	it	hi
 800b7fe:	3304      	addhi	r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800b800:	65c1      	str	r1, [r0, #92]	; 0x5c
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800b802:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 800b804:	4618      	mov	r0, r3
 800b806:	bc30      	pop	{r4, r5}
 800b808:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800b80a:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
 800b80e:	6583      	str	r3, [r0, #88]	; 0x58
 800b810:	e7f8      	b.n	800b804 <DMA_CalcBaseAndBitshift+0xc8>
 800b812:	bf00      	nop
 800b814:	40020010 	.word	0x40020010
 800b818:	40020040 	.word	0x40020040
 800b81c:	40020028 	.word	0x40020028
 800b820:	40020058 	.word	0x40020058
 800b824:	400204b8 	.word	0x400204b8
 800b828:	aaaaaaab 	.word	0xaaaaaaab
 800b82c:	08097a58 	.word	0x08097a58
 800b830:	fffffc00 	.word	0xfffffc00

0800b834 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800b834:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800b836:	4a29      	ldr	r2, [pc, #164]	; (800b8dc <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 800b838:	4929      	ldr	r1, [pc, #164]	; (800b8e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
{
 800b83a:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800b83c:	4d29      	ldr	r5, [pc, #164]	; (800b8e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 800b83e:	4c2a      	ldr	r4, [pc, #168]	; (800b8e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
 800b840:	42ab      	cmp	r3, r5
 800b842:	bf18      	it	ne
 800b844:	4293      	cmpne	r3, r2
 800b846:	f105 053c 	add.w	r5, r5, #60	; 0x3c
 800b84a:	bf0c      	ite	eq
 800b84c:	2201      	moveq	r2, #1
 800b84e:	2200      	movne	r2, #0
 800b850:	42a3      	cmp	r3, r4
 800b852:	bf08      	it	eq
 800b854:	f042 0201 	orreq.w	r2, r2, #1
 800b858:	343c      	adds	r4, #60	; 0x3c
 800b85a:	428b      	cmp	r3, r1
 800b85c:	bf08      	it	eq
 800b85e:	f042 0201 	orreq.w	r2, r2, #1
 800b862:	313c      	adds	r1, #60	; 0x3c
 800b864:	42ab      	cmp	r3, r5
 800b866:	bf08      	it	eq
 800b868:	f042 0201 	orreq.w	r2, r2, #1
 800b86c:	42a3      	cmp	r3, r4
 800b86e:	bf08      	it	eq
 800b870:	f042 0201 	orreq.w	r2, r2, #1
 800b874:	428b      	cmp	r3, r1
 800b876:	bf08      	it	eq
 800b878:	f042 0201 	orreq.w	r2, r2, #1
 800b87c:	b912      	cbnz	r2, 800b884 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>
 800b87e:	4a1b      	ldr	r2, [pc, #108]	; (800b8ec <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
 800b880:	4293      	cmp	r3, r2
 800b882:	d113      	bne.n	800b8ac <DMA_CalcDMAMUXChannelBaseAndMask+0x78>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800b884:	b2db      	uxtb	r3, r3
 800b886:	4d1a      	ldr	r5, [pc, #104]	; (800b8f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800b888:	4a1a      	ldr	r2, [pc, #104]	; (800b8f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b88a:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800b88c:	3b08      	subs	r3, #8
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800b88e:	4c1a      	ldr	r4, [pc, #104]	; (800b8f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800b890:	fba5 5303 	umull	r5, r3, r5, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800b894:	6644      	str	r4, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800b896:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b89a:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800b89e:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b8a0:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800b8a4:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b8a6:	6683      	str	r3, [r0, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800b8a8:	bc30      	pop	{r4, r5}
 800b8aa:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b8ac:	b2da      	uxtb	r2, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800b8ae:	4913      	ldr	r1, [pc, #76]	; (800b8fc <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b8b0:	4c13      	ldr	r4, [pc, #76]	; (800b900 <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800b8b2:	4419      	add	r1, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b8b4:	3a10      	subs	r2, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800b8b6:	29a8      	cmp	r1, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b8b8:	fba4 2302 	umull	r2, r3, r4, r2
 800b8bc:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800b8c0:	d800      	bhi.n	800b8c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>
      stream_number += 8U;
 800b8c2:	3308      	adds	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800b8c4:	4a0f      	ldr	r2, [pc, #60]	; (800b904 <DMA_CalcDMAMUXChannelBaseAndMask+0xd0>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b8c6:	f003 051f 	and.w	r5, r3, #31
 800b8ca:	2101      	movs	r1, #1
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800b8cc:	4c0e      	ldr	r4, [pc, #56]	; (800b908 <DMA_CalcDMAMUXChannelBaseAndMask+0xd4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800b8ce:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b8d0:	40a9      	lsls	r1, r5
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800b8d2:	6644      	str	r4, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800b8d4:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b8d6:	6681      	str	r1, [r0, #104]	; 0x68
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800b8d8:	6602      	str	r2, [r0, #96]	; 0x60
}
 800b8da:	e7e5      	b.n	800b8a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>
 800b8dc:	58025408 	.word	0x58025408
 800b8e0:	58025444 	.word	0x58025444
 800b8e4:	5802541c 	.word	0x5802541c
 800b8e8:	58025430 	.word	0x58025430
 800b8ec:	58025494 	.word	0x58025494
 800b8f0:	cccccccd 	.word	0xcccccccd
 800b8f4:	16009600 	.word	0x16009600
 800b8f8:	58025880 	.word	0x58025880
 800b8fc:	bffdfbf0 	.word	0xbffdfbf0
 800b900:	aaaaaaab 	.word	0xaaaaaaab
 800b904:	10008200 	.word	0x10008200
 800b908:	40020880 	.word	0x40020880

0800b90c <HAL_DMA_Init>:
{
 800b90c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b90e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800b910:	f7ff fc6c 	bl	800b1ec <HAL_GetTick>
  if(hdma == NULL)
 800b914:	2c00      	cmp	r4, #0
 800b916:	f000 818a 	beq.w	800bc2e <HAL_DMA_Init+0x322>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b91a:	6823      	ldr	r3, [r4, #0]
 800b91c:	4605      	mov	r5, r0
 800b91e:	4a95      	ldr	r2, [pc, #596]	; (800bb74 <HAL_DMA_Init+0x268>)
 800b920:	4293      	cmp	r3, r2
 800b922:	d049      	beq.n	800b9b8 <HAL_DMA_Init+0xac>
 800b924:	3218      	adds	r2, #24
 800b926:	4293      	cmp	r3, r2
 800b928:	d046      	beq.n	800b9b8 <HAL_DMA_Init+0xac>
 800b92a:	3230      	adds	r2, #48	; 0x30
 800b92c:	4892      	ldr	r0, [pc, #584]	; (800bb78 <HAL_DMA_Init+0x26c>)
 800b92e:	4993      	ldr	r1, [pc, #588]	; (800bb7c <HAL_DMA_Init+0x270>)
 800b930:	4283      	cmp	r3, r0
 800b932:	bf18      	it	ne
 800b934:	4293      	cmpne	r3, r2
 800b936:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800b93a:	bf0c      	ite	eq
 800b93c:	2201      	moveq	r2, #1
 800b93e:	2200      	movne	r2, #0
 800b940:	428b      	cmp	r3, r1
 800b942:	bf08      	it	eq
 800b944:	f042 0201 	orreq.w	r2, r2, #1
 800b948:	3130      	adds	r1, #48	; 0x30
 800b94a:	4283      	cmp	r3, r0
 800b94c:	bf08      	it	eq
 800b94e:	f042 0201 	orreq.w	r2, r2, #1
 800b952:	3030      	adds	r0, #48	; 0x30
 800b954:	428b      	cmp	r3, r1
 800b956:	bf08      	it	eq
 800b958:	f042 0201 	orreq.w	r2, r2, #1
 800b95c:	f501 715c 	add.w	r1, r1, #880	; 0x370
 800b960:	4283      	cmp	r3, r0
 800b962:	bf08      	it	eq
 800b964:	f042 0201 	orreq.w	r2, r2, #1
 800b968:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800b96c:	428b      	cmp	r3, r1
 800b96e:	bf08      	it	eq
 800b970:	f042 0201 	orreq.w	r2, r2, #1
 800b974:	3130      	adds	r1, #48	; 0x30
 800b976:	4283      	cmp	r3, r0
 800b978:	bf08      	it	eq
 800b97a:	f042 0201 	orreq.w	r2, r2, #1
 800b97e:	3030      	adds	r0, #48	; 0x30
 800b980:	428b      	cmp	r3, r1
 800b982:	bf08      	it	eq
 800b984:	f042 0201 	orreq.w	r2, r2, #1
 800b988:	3130      	adds	r1, #48	; 0x30
 800b98a:	4283      	cmp	r3, r0
 800b98c:	bf08      	it	eq
 800b98e:	f042 0201 	orreq.w	r2, r2, #1
 800b992:	3030      	adds	r0, #48	; 0x30
 800b994:	428b      	cmp	r3, r1
 800b996:	bf08      	it	eq
 800b998:	f042 0201 	orreq.w	r2, r2, #1
 800b99c:	3130      	adds	r1, #48	; 0x30
 800b99e:	4283      	cmp	r3, r0
 800b9a0:	bf08      	it	eq
 800b9a2:	f042 0201 	orreq.w	r2, r2, #1
 800b9a6:	428b      	cmp	r3, r1
 800b9a8:	bf08      	it	eq
 800b9aa:	f042 0201 	orreq.w	r2, r2, #1
 800b9ae:	b91a      	cbnz	r2, 800b9b8 <HAL_DMA_Init+0xac>
 800b9b0:	4a73      	ldr	r2, [pc, #460]	; (800bb80 <HAL_DMA_Init+0x274>)
 800b9b2:	4293      	cmp	r3, r2
 800b9b4:	f040 81a1 	bne.w	800bcfa <HAL_DMA_Init+0x3ee>
    hdma->State = HAL_DMA_STATE_BUSY;
 800b9b8:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 800b9ba:	2100      	movs	r1, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 800b9bc:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 800b9c0:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 800b9c4:	681a      	ldr	r2, [r3, #0]
 800b9c6:	f022 0201 	bic.w	r2, r2, #1
 800b9ca:	601a      	str	r2, [r3, #0]
 800b9cc:	e006      	b.n	800b9dc <HAL_DMA_Init+0xd0>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b9ce:	f7ff fc0d 	bl	800b1ec <HAL_GetTick>
 800b9d2:	1b43      	subs	r3, r0, r5
 800b9d4:	2b05      	cmp	r3, #5
 800b9d6:	f200 8111 	bhi.w	800bbfc <HAL_DMA_Init+0x2f0>
 800b9da:	6823      	ldr	r3, [r4, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800b9dc:	681a      	ldr	r2, [r3, #0]
 800b9de:	07d0      	lsls	r0, r2, #31
 800b9e0:	d4f5      	bmi.n	800b9ce <HAL_DMA_Init+0xc2>
    registerValue |=  hdma->Init.Direction           |
 800b9e2:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b9e6:	6921      	ldr	r1, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
 800b9e8:	4302      	orrs	r2, r0
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800b9ea:	681f      	ldr	r7, [r3, #0]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b9ec:	e9d4 6005 	ldrd	r6, r0, [r4, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b9f0:	430a      	orrs	r2, r1
 800b9f2:	4332      	orrs	r2, r6
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b9f4:	4e63      	ldr	r6, [pc, #396]	; (800bb84 <HAL_DMA_Init+0x278>)
            hdma->Init.Mode                | hdma->Init.Priority;
 800b9f6:	e9d4 5107 	ldrd	r5, r1, [r4, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b9fa:	4302      	orrs	r2, r0
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b9fc:	403e      	ands	r6, r7
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b9fe:	432a      	orrs	r2, r5
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ba00:	6a65      	ldr	r5, [r4, #36]	; 0x24
            hdma->Init.Mode                | hdma->Init.Priority;
 800ba02:	430a      	orrs	r2, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ba04:	2d04      	cmp	r5, #4
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800ba06:	4960      	ldr	r1, [pc, #384]	; (800bb88 <HAL_DMA_Init+0x27c>)
    registerValue |=  hdma->Init.Direction           |
 800ba08:	ea42 0206 	orr.w	r2, r2, r6
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800ba0c:	4e5f      	ldr	r6, [pc, #380]	; (800bb8c <HAL_DMA_Init+0x280>)
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ba0e:	f000 8110 	beq.w	800bc32 <HAL_DMA_Init+0x326>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800ba12:	6836      	ldr	r6, [r6, #0]
 800ba14:	4031      	ands	r1, r6
 800ba16:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800ba1a:	f080 80c3 	bcs.w	800bba4 <HAL_DMA_Init+0x298>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800ba1e:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800ba20:	6959      	ldr	r1, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800ba22:	f021 0107 	bic.w	r1, r1, #7
    registerValue |= hdma->Init.FIFOMode;
 800ba26:	4329      	orrs	r1, r5
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800ba28:	6159      	str	r1, [r3, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800ba2a:	4620      	mov	r0, r4
 800ba2c:	f7ff fe86 	bl	800b73c <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800ba30:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800ba32:	233f      	movs	r3, #63	; 0x3f
 800ba34:	f002 021f 	and.w	r2, r2, #31
 800ba38:	4093      	lsls	r3, r2
 800ba3a:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ba3c:	6822      	ldr	r2, [r4, #0]
 800ba3e:	4b4d      	ldr	r3, [pc, #308]	; (800bb74 <HAL_DMA_Init+0x268>)
 800ba40:	4953      	ldr	r1, [pc, #332]	; (800bb90 <HAL_DMA_Init+0x284>)
 800ba42:	4d4d      	ldr	r5, [pc, #308]	; (800bb78 <HAL_DMA_Init+0x26c>)
 800ba44:	428a      	cmp	r2, r1
 800ba46:	bf18      	it	ne
 800ba48:	429a      	cmpne	r2, r3
 800ba4a:	4852      	ldr	r0, [pc, #328]	; (800bb94 <HAL_DMA_Init+0x288>)
 800ba4c:	f101 0148 	add.w	r1, r1, #72	; 0x48
 800ba50:	bf0c      	ite	eq
 800ba52:	2301      	moveq	r3, #1
 800ba54:	2300      	movne	r3, #0
 800ba56:	42aa      	cmp	r2, r5
 800ba58:	bf08      	it	eq
 800ba5a:	f043 0301 	orreq.w	r3, r3, #1
 800ba5e:	3548      	adds	r5, #72	; 0x48
 800ba60:	4282      	cmp	r2, r0
 800ba62:	bf08      	it	eq
 800ba64:	f043 0301 	orreq.w	r3, r3, #1
 800ba68:	3048      	adds	r0, #72	; 0x48
 800ba6a:	428a      	cmp	r2, r1
 800ba6c:	bf08      	it	eq
 800ba6e:	f043 0301 	orreq.w	r3, r3, #1
 800ba72:	3148      	adds	r1, #72	; 0x48
 800ba74:	42aa      	cmp	r2, r5
 800ba76:	bf08      	it	eq
 800ba78:	f043 0301 	orreq.w	r3, r3, #1
 800ba7c:	f505 7562 	add.w	r5, r5, #904	; 0x388
 800ba80:	4282      	cmp	r2, r0
 800ba82:	bf08      	it	eq
 800ba84:	f043 0301 	orreq.w	r3, r3, #1
 800ba88:	f500 7062 	add.w	r0, r0, #904	; 0x388
 800ba8c:	428a      	cmp	r2, r1
 800ba8e:	bf08      	it	eq
 800ba90:	f043 0301 	orreq.w	r3, r3, #1
 800ba94:	f501 7162 	add.w	r1, r1, #904	; 0x388
 800ba98:	42aa      	cmp	r2, r5
 800ba9a:	bf08      	it	eq
 800ba9c:	f043 0301 	orreq.w	r3, r3, #1
 800baa0:	3548      	adds	r5, #72	; 0x48
 800baa2:	4282      	cmp	r2, r0
 800baa4:	bf08      	it	eq
 800baa6:	f043 0301 	orreq.w	r3, r3, #1
 800baaa:	3048      	adds	r0, #72	; 0x48
 800baac:	428a      	cmp	r2, r1
 800baae:	bf08      	it	eq
 800bab0:	f043 0301 	orreq.w	r3, r3, #1
 800bab4:	3148      	adds	r1, #72	; 0x48
 800bab6:	42aa      	cmp	r2, r5
 800bab8:	bf08      	it	eq
 800baba:	f043 0301 	orreq.w	r3, r3, #1
 800babe:	3548      	adds	r5, #72	; 0x48
 800bac0:	4282      	cmp	r2, r0
 800bac2:	bf08      	it	eq
 800bac4:	f043 0301 	orreq.w	r3, r3, #1
 800bac8:	3048      	adds	r0, #72	; 0x48
 800baca:	428a      	cmp	r2, r1
 800bacc:	bf08      	it	eq
 800bace:	f043 0301 	orreq.w	r3, r3, #1
 800bad2:	f101 51c0 	add.w	r1, r1, #402653184	; 0x18000000
 800bad6:	42aa      	cmp	r2, r5
 800bad8:	bf08      	it	eq
 800bada:	f043 0301 	orreq.w	r3, r3, #1
 800bade:	f501 419f 	add.w	r1, r1, #20352	; 0x4f80
 800bae2:	4d2d      	ldr	r5, [pc, #180]	; (800bb98 <HAL_DMA_Init+0x28c>)
 800bae4:	4282      	cmp	r2, r0
 800bae6:	bf08      	it	eq
 800bae8:	f043 0301 	orreq.w	r3, r3, #1
 800baec:	482b      	ldr	r0, [pc, #172]	; (800bb9c <HAL_DMA_Init+0x290>)
 800baee:	428a      	cmp	r2, r1
 800baf0:	bf08      	it	eq
 800baf2:	f043 0301 	orreq.w	r3, r3, #1
 800baf6:	313c      	adds	r1, #60	; 0x3c
 800baf8:	42aa      	cmp	r2, r5
 800bafa:	bf08      	it	eq
 800bafc:	f043 0301 	orreq.w	r3, r3, #1
 800bb00:	353c      	adds	r5, #60	; 0x3c
 800bb02:	4282      	cmp	r2, r0
 800bb04:	bf08      	it	eq
 800bb06:	f043 0301 	orreq.w	r3, r3, #1
 800bb0a:	303c      	adds	r0, #60	; 0x3c
 800bb0c:	428a      	cmp	r2, r1
 800bb0e:	bf08      	it	eq
 800bb10:	f043 0301 	orreq.w	r3, r3, #1
 800bb14:	313c      	adds	r1, #60	; 0x3c
 800bb16:	42aa      	cmp	r2, r5
 800bb18:	bf08      	it	eq
 800bb1a:	f043 0301 	orreq.w	r3, r3, #1
 800bb1e:	4282      	cmp	r2, r0
 800bb20:	bf08      	it	eq
 800bb22:	f043 0301 	orreq.w	r3, r3, #1
 800bb26:	428a      	cmp	r2, r1
 800bb28:	bf08      	it	eq
 800bb2a:	f043 0301 	orreq.w	r3, r3, #1
 800bb2e:	b913      	cbnz	r3, 800bb36 <HAL_DMA_Init+0x22a>
 800bb30:	4b1b      	ldr	r3, [pc, #108]	; (800bba0 <HAL_DMA_Init+0x294>)
 800bb32:	429a      	cmp	r2, r3
 800bb34:	d118      	bne.n	800bb68 <HAL_DMA_Init+0x25c>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800bb36:	4620      	mov	r0, r4
 800bb38:	f7ff fe7c 	bl	800b834 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800bb3c:	68a3      	ldr	r3, [r4, #8]
 800bb3e:	2b80      	cmp	r3, #128	; 0x80
 800bb40:	d069      	beq.n	800bc16 <HAL_DMA_Init+0x30a>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800bb42:	6863      	ldr	r3, [r4, #4]
 800bb44:	6e25      	ldr	r5, [r4, #96]	; 0x60
 800bb46:	b2da      	uxtb	r2, r3
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800bb48:	3b01      	subs	r3, #1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bb4a:	e9d4 1019 	ldrd	r1, r0, [r4, #100]	; 0x64
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800bb4e:	2b07      	cmp	r3, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800bb50:	602a      	str	r2, [r5, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bb52:	6048      	str	r0, [r1, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800bb54:	d866      	bhi.n	800bc24 <HAL_DMA_Init+0x318>
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800bb56:	1e50      	subs	r0, r2, #1
 800bb58:	2807      	cmp	r0, #7
 800bb5a:	d97c      	bls.n	800bc56 <HAL_DMA_Init+0x34a>
 800bb5c:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800bb5e:	e9d4 311b 	ldrd	r3, r1, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800bb62:	2000      	movs	r0, #0
 800bb64:	6018      	str	r0, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bb66:	604a      	str	r2, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bb68:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800bb6a:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bb6c:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800bb6e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800bb72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb74:	40020010 	.word	0x40020010
 800bb78:	40020040 	.word	0x40020040
 800bb7c:	40020070 	.word	0x40020070
 800bb80:	400204b8 	.word	0x400204b8
 800bb84:	fe10803f 	.word	0xfe10803f
 800bb88:	ffff0000 	.word	0xffff0000
 800bb8c:	5c001000 	.word	0x5c001000
 800bb90:	40020028 	.word	0x40020028
 800bb94:	40020058 	.word	0x40020058
 800bb98:	5802541c 	.word	0x5802541c
 800bb9c:	58025430 	.word	0x58025430
 800bba0:	58025494 	.word	0x58025494
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800bba4:	6861      	ldr	r1, [r4, #4]
 800bba6:	f1a1 0629 	sub.w	r6, r1, #41	; 0x29
 800bbaa:	2e1f      	cmp	r6, #31
 800bbac:	d92d      	bls.n	800bc0a <HAL_DMA_Init+0x2fe>
 800bbae:	394f      	subs	r1, #79	; 0x4f
 800bbb0:	2903      	cmp	r1, #3
 800bbb2:	d801      	bhi.n	800bbb8 <HAL_DMA_Init+0x2ac>
        registerValue |= DMA_SxCR_TRBUFF;
 800bbb4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800bbb8:	601a      	str	r2, [r3, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800bbba:	2d04      	cmp	r5, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800bbbc:	6959      	ldr	r1, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800bbbe:	f021 0107 	bic.w	r1, r1, #7
    registerValue |= hdma->Init.FIFOMode;
 800bbc2:	ea41 0105 	orr.w	r1, r1, r5
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800bbc6:	f47f af2f 	bne.w	800ba28 <HAL_DMA_Init+0x11c>
 800bbca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 800bbcc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800bbce:	4311      	orrs	r1, r2
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800bbd0:	2e00      	cmp	r6, #0
 800bbd2:	f43f af29 	beq.w	800ba28 <HAL_DMA_Init+0x11c>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800bbd6:	2800      	cmp	r0, #0
 800bbd8:	d173      	bne.n	800bcc2 <HAL_DMA_Init+0x3b6>
    switch (hdma->Init.FIFOThreshold)
 800bbda:	2a01      	cmp	r2, #1
 800bbdc:	f000 8088 	beq.w	800bcf0 <HAL_DMA_Init+0x3e4>
 800bbe0:	f032 0202 	bics.w	r2, r2, #2
 800bbe4:	f47f af20 	bne.w	800ba28 <HAL_DMA_Init+0x11c>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bbe8:	01f2      	lsls	r2, r6, #7
 800bbea:	f57f af1d 	bpl.w	800ba28 <HAL_DMA_Init+0x11c>
          hdma->State = HAL_DMA_STATE_READY;
 800bbee:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800bbf0:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 800bbf2:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800bbf4:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 800bbf6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800bbfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800bbfc:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 800bbfe:	2303      	movs	r3, #3
        return HAL_ERROR;
 800bc00:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800bc02:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 800bc04:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800bc08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800bc0a:	4970      	ldr	r1, [pc, #448]	; (800bdcc <HAL_DMA_Init+0x4c0>)
 800bc0c:	fa21 f606 	lsr.w	r6, r1, r6
 800bc10:	07f1      	lsls	r1, r6, #31
 800bc12:	d5d1      	bpl.n	800bbb8 <HAL_DMA_Init+0x2ac>
 800bc14:	e7ce      	b.n	800bbb4 <HAL_DMA_Init+0x2a8>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800bc16:	2300      	movs	r3, #0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bc18:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800bc1a:	e9d4 0218 	ldrd	r0, r2, [r4, #96]	; 0x60
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800bc1e:	6063      	str	r3, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800bc20:	6003      	str	r3, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bc22:	6051      	str	r1, [r2, #4]
      hdma->DMAmuxRequestGen = 0U;
 800bc24:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 800bc26:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800bc2a:	6763      	str	r3, [r4, #116]	; 0x74
 800bc2c:	e79c      	b.n	800bb68 <HAL_DMA_Init+0x25c>
    return HAL_ERROR;
 800bc2e:	2001      	movs	r0, #1
}
 800bc30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800bc32:	6837      	ldr	r7, [r6, #0]
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800bc34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800bc36:	4039      	ands	r1, r7
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800bc38:	6b27      	ldr	r7, [r4, #48]	; 0x30
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800bc3a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800bc3e:	ea46 0707 	orr.w	r7, r6, r7
 800bc42:	ea42 0207 	orr.w	r2, r2, r7
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800bc46:	d2ad      	bcs.n	800bba4 <HAL_DMA_Init+0x298>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800bc48:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800bc4a:	6959      	ldr	r1, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800bc4c:	f021 0107 	bic.w	r1, r1, #7
    registerValue |= hdma->Init.FIFOMode;
 800bc50:	f041 0104 	orr.w	r1, r1, #4
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800bc54:	e7ba      	b.n	800bbcc <HAL_DMA_Init+0x2c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800bc56:	6821      	ldr	r1, [r4, #0]
 800bc58:	4b5d      	ldr	r3, [pc, #372]	; (800bdd0 <HAL_DMA_Init+0x4c4>)
 800bc5a:	4e5e      	ldr	r6, [pc, #376]	; (800bdd4 <HAL_DMA_Init+0x4c8>)
 800bc5c:	4d5e      	ldr	r5, [pc, #376]	; (800bdd8 <HAL_DMA_Init+0x4cc>)
 800bc5e:	42b1      	cmp	r1, r6
 800bc60:	bf18      	it	ne
 800bc62:	4299      	cmpne	r1, r3
 800bc64:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800bc68:	bf0c      	ite	eq
 800bc6a:	2301      	moveq	r3, #1
 800bc6c:	2300      	movne	r3, #0
 800bc6e:	42a9      	cmp	r1, r5
 800bc70:	bf08      	it	eq
 800bc72:	f043 0301 	orreq.w	r3, r3, #1
 800bc76:	3528      	adds	r5, #40	; 0x28
 800bc78:	42b1      	cmp	r1, r6
 800bc7a:	bf08      	it	eq
 800bc7c:	f043 0301 	orreq.w	r3, r3, #1
 800bc80:	3628      	adds	r6, #40	; 0x28
 800bc82:	42a9      	cmp	r1, r5
 800bc84:	bf08      	it	eq
 800bc86:	f043 0301 	orreq.w	r3, r3, #1
 800bc8a:	3528      	adds	r5, #40	; 0x28
 800bc8c:	42b1      	cmp	r1, r6
 800bc8e:	bf08      	it	eq
 800bc90:	f043 0301 	orreq.w	r3, r3, #1
 800bc94:	42a9      	cmp	r1, r5
 800bc96:	bf08      	it	eq
 800bc98:	f043 0301 	orreq.w	r3, r3, #1
 800bc9c:	b93b      	cbnz	r3, 800bcae <HAL_DMA_Init+0x3a2>
 800bc9e:	4b4f      	ldr	r3, [pc, #316]	; (800bddc <HAL_DMA_Init+0x4d0>)
 800bca0:	4299      	cmp	r1, r3
 800bca2:	d004      	beq.n	800bcae <HAL_DMA_Init+0x3a2>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800bca4:	4b4e      	ldr	r3, [pc, #312]	; (800bde0 <HAL_DMA_Init+0x4d4>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800bca6:	494f      	ldr	r1, [pc, #316]	; (800bde4 <HAL_DMA_Init+0x4d8>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800bca8:	4413      	add	r3, r2
 800bcaa:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800bcac:	e003      	b.n	800bcb6 <HAL_DMA_Init+0x3aa>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800bcae:	4b4e      	ldr	r3, [pc, #312]	; (800bde8 <HAL_DMA_Init+0x4dc>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800bcb0:	494e      	ldr	r1, [pc, #312]	; (800bdec <HAL_DMA_Init+0x4e0>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800bcb2:	4413      	add	r3, r2
 800bcb4:	009b      	lsls	r3, r3, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800bcb6:	2201      	movs	r2, #1
 800bcb8:	4082      	lsls	r2, r0
 800bcba:	e9c4 311b 	strd	r3, r1, [r4, #108]	; 0x6c
 800bcbe:	6762      	str	r2, [r4, #116]	; 0x74
 800bcc0:	e74f      	b.n	800bb62 <HAL_DMA_Init+0x256>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800bcc2:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800bcc6:	d004      	beq.n	800bcd2 <HAL_DMA_Init+0x3c6>
    switch (hdma->Init.FIFOThreshold)
 800bcc8:	2a02      	cmp	r2, #2
 800bcca:	d990      	bls.n	800bbee <HAL_DMA_Init+0x2e2>
 800bccc:	2a03      	cmp	r2, #3
 800bcce:	d08b      	beq.n	800bbe8 <HAL_DMA_Init+0x2dc>
 800bcd0:	e6aa      	b.n	800ba28 <HAL_DMA_Init+0x11c>
    switch (hdma->Init.FIFOThreshold)
 800bcd2:	2a03      	cmp	r2, #3
 800bcd4:	f63f aea8 	bhi.w	800ba28 <HAL_DMA_Init+0x11c>
 800bcd8:	a001      	add	r0, pc, #4	; (adr r0, 800bce0 <HAL_DMA_Init+0x3d4>)
 800bcda:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800bcde:	bf00      	nop
 800bce0:	0800bbef 	.word	0x0800bbef
 800bce4:	0800bbe9 	.word	0x0800bbe9
 800bce8:	0800bbef 	.word	0x0800bbef
 800bcec:	0800bcf1 	.word	0x0800bcf1
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bcf0:	f1b6 7fc0 	cmp.w	r6, #25165824	; 0x1800000
 800bcf4:	f47f ae98 	bne.w	800ba28 <HAL_DMA_Init+0x11c>
 800bcf8:	e779      	b.n	800bbee <HAL_DMA_Init+0x2e2>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800bcfa:	4a35      	ldr	r2, [pc, #212]	; (800bdd0 <HAL_DMA_Init+0x4c4>)
 800bcfc:	4935      	ldr	r1, [pc, #212]	; (800bdd4 <HAL_DMA_Init+0x4c8>)
 800bcfe:	4836      	ldr	r0, [pc, #216]	; (800bdd8 <HAL_DMA_Init+0x4cc>)
 800bd00:	428b      	cmp	r3, r1
 800bd02:	bf18      	it	ne
 800bd04:	4293      	cmpne	r3, r2
 800bd06:	f101 0128 	add.w	r1, r1, #40	; 0x28
 800bd0a:	4d39      	ldr	r5, [pc, #228]	; (800bdf0 <HAL_DMA_Init+0x4e4>)
 800bd0c:	bf0c      	ite	eq
 800bd0e:	2201      	moveq	r2, #1
 800bd10:	2200      	movne	r2, #0
 800bd12:	4283      	cmp	r3, r0
 800bd14:	bf08      	it	eq
 800bd16:	f042 0201 	orreq.w	r2, r2, #1
 800bd1a:	303c      	adds	r0, #60	; 0x3c
 800bd1c:	428b      	cmp	r3, r1
 800bd1e:	bf08      	it	eq
 800bd20:	f042 0201 	orreq.w	r2, r2, #1
 800bd24:	313c      	adds	r1, #60	; 0x3c
 800bd26:	42ab      	cmp	r3, r5
 800bd28:	bf08      	it	eq
 800bd2a:	f042 0201 	orreq.w	r2, r2, #1
 800bd2e:	4283      	cmp	r3, r0
 800bd30:	bf08      	it	eq
 800bd32:	f042 0201 	orreq.w	r2, r2, #1
 800bd36:	428b      	cmp	r3, r1
 800bd38:	bf08      	it	eq
 800bd3a:	f042 0201 	orreq.w	r2, r2, #1
 800bd3e:	b912      	cbnz	r2, 800bd46 <HAL_DMA_Init+0x43a>
 800bd40:	4a26      	ldr	r2, [pc, #152]	; (800bddc <HAL_DMA_Init+0x4d0>)
 800bd42:	4293      	cmp	r3, r2
 800bd44:	d13a      	bne.n	800bdbc <HAL_DMA_Init+0x4b0>
    hdma->State = HAL_DMA_STATE_BUSY;
 800bd46:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 800bd48:	2100      	movs	r1, #0
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800bd4a:	4f2a      	ldr	r7, [pc, #168]	; (800bdf4 <HAL_DMA_Init+0x4e8>)
    hdma->State = HAL_DMA_STATE_BUSY;
 800bd4c:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800bd50:	68a2      	ldr	r2, [r4, #8]
    __HAL_UNLOCK(hdma);
 800bd52:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800bd56:	2a40      	cmp	r2, #64	; 0x40
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800bd58:	6819      	ldr	r1, [r3, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800bd5a:	ea07 0701 	and.w	r7, r7, r1
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800bd5e:	d02b      	beq.n	800bdb8 <HAL_DMA_Init+0x4ac>
 800bd60:	2a80      	cmp	r2, #128	; 0x80
 800bd62:	bf0c      	ite	eq
 800bd64:	f44f 4180 	moveq.w	r1, #16384	; 0x4000
 800bd68:	2100      	movne	r1, #0
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800bd6a:	6922      	ldr	r2, [r4, #16]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800bd6c:	4620      	mov	r0, r4
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800bd6e:	68e6      	ldr	r6, [r4, #12]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800bd70:	08d2      	lsrs	r2, r2, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800bd72:	6965      	ldr	r5, [r4, #20]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800bd74:	f8df c084 	ldr.w	ip, [pc, #132]	; 800bdfc <HAL_DMA_Init+0x4f0>
 800bd78:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800bd7c:	69a6      	ldr	r6, [r4, #24]
 800bd7e:	ea42 02d5 	orr.w	r2, r2, r5, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800bd82:	69e5      	ldr	r5, [r4, #28]
 800bd84:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800bd88:	4e1b      	ldr	r6, [pc, #108]	; (800bdf8 <HAL_DMA_Init+0x4ec>)
 800bd8a:	ea42 02d5 	orr.w	r2, r2, r5, lsr #3
 800bd8e:	441e      	add	r6, r3
 800bd90:	6a25      	ldr	r5, [r4, #32]
 800bd92:	ea42 1215 	orr.w	r2, r2, r5, lsr #4
 800bd96:	fbac 6506 	umull	r6, r5, ip, r6
 800bd9a:	433a      	orrs	r2, r7
 800bd9c:	092d      	lsrs	r5, r5, #4
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800bd9e:	4311      	orrs	r1, r2
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800bda0:	00ad      	lsls	r5, r5, #2
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800bda2:	6019      	str	r1, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800bda4:	65e5      	str	r5, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800bda6:	f7ff fcc9 	bl	800b73c <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800bdaa:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800bdac:	2301      	movs	r3, #1
 800bdae:	f002 021f 	and.w	r2, r2, #31
 800bdb2:	4093      	lsls	r3, r2
 800bdb4:	6043      	str	r3, [r0, #4]
 800bdb6:	e641      	b.n	800ba3c <HAL_DMA_Init+0x130>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800bdb8:	2110      	movs	r1, #16
 800bdba:	e7d6      	b.n	800bd6a <HAL_DMA_Init+0x45e>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800bdbc:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 800bdbe:	2303      	movs	r3, #3
    return HAL_ERROR;
 800bdc0:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800bdc2:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800bdc4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800bdc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bdca:	bf00      	nop
 800bdcc:	c3c0003f 	.word	0xc3c0003f
 800bdd0:	58025408 	.word	0x58025408
 800bdd4:	5802541c 	.word	0x5802541c
 800bdd8:	58025430 	.word	0x58025430
 800bddc:	58025494 	.word	0x58025494
 800bde0:	1000823f 	.word	0x1000823f
 800bde4:	40020940 	.word	0x40020940
 800bde8:	1600963f 	.word	0x1600963f
 800bdec:	58025940 	.word	0x58025940
 800bdf0:	58025458 	.word	0x58025458
 800bdf4:	fffe000f 	.word	0xfffe000f
 800bdf8:	a7fdabf8 	.word	0xa7fdabf8
 800bdfc:	cccccccd 	.word	0xcccccccd

0800be00 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 800be00:	2800      	cmp	r0, #0
 800be02:	f000 80f5 	beq.w	800bff0 <HAL_DMA_DeInit+0x1f0>
  __HAL_DMA_DISABLE(hdma);
 800be06:	6802      	ldr	r2, [r0, #0]
 800be08:	4b7d      	ldr	r3, [pc, #500]	; (800c000 <HAL_DMA_DeInit+0x200>)
 800be0a:	497e      	ldr	r1, [pc, #504]	; (800c004 <HAL_DMA_DeInit+0x204>)
 800be0c:	428a      	cmp	r2, r1
 800be0e:	bf18      	it	ne
 800be10:	429a      	cmpne	r2, r3
 800be12:	f101 0160 	add.w	r1, r1, #96	; 0x60
 800be16:	bf0c      	ite	eq
 800be18:	2301      	moveq	r3, #1
 800be1a:	2300      	movne	r3, #0
{
 800be1c:	b570      	push	{r4, r5, r6, lr}
  __HAL_DMA_DISABLE(hdma);
 800be1e:	4d7a      	ldr	r5, [pc, #488]	; (800c008 <HAL_DMA_DeInit+0x208>)
 800be20:	4604      	mov	r4, r0
 800be22:	487a      	ldr	r0, [pc, #488]	; (800c00c <HAL_DMA_DeInit+0x20c>)
 800be24:	42aa      	cmp	r2, r5
 800be26:	bf08      	it	eq
 800be28:	f043 0301 	orreq.w	r3, r3, #1
 800be2c:	3548      	adds	r5, #72	; 0x48
 800be2e:	4282      	cmp	r2, r0
 800be30:	bf08      	it	eq
 800be32:	f043 0301 	orreq.w	r3, r3, #1
 800be36:	f500 7062 	add.w	r0, r0, #904	; 0x388
 800be3a:	428a      	cmp	r2, r1
 800be3c:	bf08      	it	eq
 800be3e:	f043 0301 	orreq.w	r3, r3, #1
 800be42:	f501 7162 	add.w	r1, r1, #904	; 0x388
 800be46:	42aa      	cmp	r2, r5
 800be48:	bf08      	it	eq
 800be4a:	f043 0301 	orreq.w	r3, r3, #1
 800be4e:	f505 7562 	add.w	r5, r5, #904	; 0x388
 800be52:	4282      	cmp	r2, r0
 800be54:	bf08      	it	eq
 800be56:	f043 0301 	orreq.w	r3, r3, #1
 800be5a:	3048      	adds	r0, #72	; 0x48
 800be5c:	428a      	cmp	r2, r1
 800be5e:	bf08      	it	eq
 800be60:	f043 0301 	orreq.w	r3, r3, #1
 800be64:	3148      	adds	r1, #72	; 0x48
 800be66:	42aa      	cmp	r2, r5
 800be68:	bf08      	it	eq
 800be6a:	f043 0301 	orreq.w	r3, r3, #1
 800be6e:	3548      	adds	r5, #72	; 0x48
 800be70:	4282      	cmp	r2, r0
 800be72:	bf08      	it	eq
 800be74:	f043 0301 	orreq.w	r3, r3, #1
 800be78:	3048      	adds	r0, #72	; 0x48
 800be7a:	428a      	cmp	r2, r1
 800be7c:	bf08      	it	eq
 800be7e:	f043 0301 	orreq.w	r3, r3, #1
 800be82:	3148      	adds	r1, #72	; 0x48
 800be84:	42aa      	cmp	r2, r5
 800be86:	bf08      	it	eq
 800be88:	f043 0301 	orreq.w	r3, r3, #1
 800be8c:	4282      	cmp	r2, r0
 800be8e:	bf08      	it	eq
 800be90:	f043 0301 	orreq.w	r3, r3, #1
 800be94:	428a      	cmp	r2, r1
 800be96:	bf08      	it	eq
 800be98:	f043 0301 	orreq.w	r3, r3, #1
 800be9c:	b933      	cbnz	r3, 800beac <HAL_DMA_DeInit+0xac>
 800be9e:	f5a1 6195 	sub.w	r1, r1, #1192	; 0x4a8
 800bea2:	4b5b      	ldr	r3, [pc, #364]	; (800c010 <HAL_DMA_DeInit+0x210>)
 800bea4:	429a      	cmp	r2, r3
 800bea6:	bf18      	it	ne
 800bea8:	428a      	cmpne	r2, r1
 800beaa:	d165      	bne.n	800bf78 <HAL_DMA_DeInit+0x178>
 800beac:	6811      	ldr	r1, [r2, #0]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 800beae:	2300      	movs	r3, #0
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 800beb0:	2521      	movs	r5, #33	; 0x21
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800beb2:	4620      	mov	r0, r4
  __HAL_DMA_DISABLE(hdma);
 800beb4:	f021 0101 	bic.w	r1, r1, #1
 800beb8:	6011      	str	r1, [r2, #0]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 800beba:	6013      	str	r3, [r2, #0]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 800bebc:	6053      	str	r3, [r2, #4]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 800bebe:	6093      	str	r3, [r2, #8]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 800bec0:	60d3      	str	r3, [r2, #12]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 800bec2:	6113      	str	r3, [r2, #16]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 800bec4:	6155      	str	r5, [r2, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800bec6:	f7ff fc39 	bl	800b73c <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800beca:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800becc:	233f      	movs	r3, #63	; 0x3f
 800bece:	f002 021f 	and.w	r2, r2, #31
 800bed2:	4093      	lsls	r3, r2
 800bed4:	6083      	str	r3, [r0, #8]
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800bed6:	4620      	mov	r0, r4
 800bed8:	f7ff fcac 	bl	800b834 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->DMAmuxChannel != 0U)
 800bedc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800bede:	b123      	cbz	r3, 800beea <HAL_DMA_DeInit+0xea>
      hdma->DMAmuxChannel->CCR = 0U;
 800bee0:	2000      	movs	r0, #0
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bee2:	e9d4 2119 	ldrd	r2, r1, [r4, #100]	; 0x64
      hdma->DMAmuxChannel->CCR = 0U;
 800bee6:	6018      	str	r0, [r3, #0]
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bee8:	6051      	str	r1, [r2, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800beea:	6861      	ldr	r1, [r4, #4]
 800beec:	1e4b      	subs	r3, r1, #1
 800beee:	2b07      	cmp	r3, #7
 800bef0:	d910      	bls.n	800bf14 <HAL_DMA_DeInit+0x114>
    hdma->DMAmuxRequestGen = 0U;
 800bef2:	2300      	movs	r3, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bef4:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 800bef6:	4618      	mov	r0, r3
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800bef8:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->State = HAL_DMA_STATE_RESET;
 800befa:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 800befe:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->DMAmuxRequestGenStatus = 0U;
 800bf02:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
  hdma->XferHalfCpltCallback   = NULL;
 800bf06:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 800bf0a:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
  hdma->XferAbortCallback      = NULL;
 800bf0e:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
}
 800bf12:	bd70      	pop	{r4, r5, r6, pc}
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800bf14:	6820      	ldr	r0, [r4, #0]
 800bf16:	4a3f      	ldr	r2, [pc, #252]	; (800c014 <HAL_DMA_DeInit+0x214>)
 800bf18:	4e3f      	ldr	r6, [pc, #252]	; (800c018 <HAL_DMA_DeInit+0x218>)
 800bf1a:	4d40      	ldr	r5, [pc, #256]	; (800c01c <HAL_DMA_DeInit+0x21c>)
 800bf1c:	42b0      	cmp	r0, r6
 800bf1e:	bf18      	it	ne
 800bf20:	4290      	cmpne	r0, r2
 800bf22:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800bf26:	bf0c      	ite	eq
 800bf28:	2201      	moveq	r2, #1
 800bf2a:	2200      	movne	r2, #0
 800bf2c:	42a8      	cmp	r0, r5
 800bf2e:	bf08      	it	eq
 800bf30:	f042 0201 	orreq.w	r2, r2, #1
 800bf34:	3528      	adds	r5, #40	; 0x28
 800bf36:	42b0      	cmp	r0, r6
 800bf38:	bf08      	it	eq
 800bf3a:	f042 0201 	orreq.w	r2, r2, #1
 800bf3e:	3628      	adds	r6, #40	; 0x28
 800bf40:	42a8      	cmp	r0, r5
 800bf42:	bf08      	it	eq
 800bf44:	f042 0201 	orreq.w	r2, r2, #1
 800bf48:	3528      	adds	r5, #40	; 0x28
 800bf4a:	42b0      	cmp	r0, r6
 800bf4c:	bf08      	it	eq
 800bf4e:	f042 0201 	orreq.w	r2, r2, #1
 800bf52:	42a8      	cmp	r0, r5
 800bf54:	bf08      	it	eq
 800bf56:	f042 0201 	orreq.w	r2, r2, #1
 800bf5a:	b912      	cbnz	r2, 800bf62 <HAL_DMA_DeInit+0x162>
 800bf5c:	4a30      	ldr	r2, [pc, #192]	; (800c020 <HAL_DMA_DeInit+0x220>)
 800bf5e:	4290      	cmp	r0, r2
 800bf60:	d148      	bne.n	800bff4 <HAL_DMA_DeInit+0x1f4>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800bf62:	4a30      	ldr	r2, [pc, #192]	; (800c024 <HAL_DMA_DeInit+0x224>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800bf64:	4d30      	ldr	r5, [pc, #192]	; (800c028 <HAL_DMA_DeInit+0x228>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800bf66:	440a      	add	r2, r1
 800bf68:	0091      	lsls	r1, r2, #2
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800bf6a:	2201      	movs	r2, #1
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800bf6c:	2000      	movs	r0, #0
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800bf6e:	fa02 f303 	lsl.w	r3, r2, r3
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800bf72:	6008      	str	r0, [r1, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bf74:	606b      	str	r3, [r5, #4]
 800bf76:	e7bc      	b.n	800bef2 <HAL_DMA_DeInit+0xf2>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800bf78:	4b26      	ldr	r3, [pc, #152]	; (800c014 <HAL_DMA_DeInit+0x214>)
 800bf7a:	4927      	ldr	r1, [pc, #156]	; (800c018 <HAL_DMA_DeInit+0x218>)
 800bf7c:	4d27      	ldr	r5, [pc, #156]	; (800c01c <HAL_DMA_DeInit+0x21c>)
 800bf7e:	428a      	cmp	r2, r1
 800bf80:	bf18      	it	ne
 800bf82:	429a      	cmpne	r2, r3
 800bf84:	4829      	ldr	r0, [pc, #164]	; (800c02c <HAL_DMA_DeInit+0x22c>)
 800bf86:	f101 013c 	add.w	r1, r1, #60	; 0x3c
 800bf8a:	bf0c      	ite	eq
 800bf8c:	2301      	moveq	r3, #1
 800bf8e:	2300      	movne	r3, #0
 800bf90:	42aa      	cmp	r2, r5
 800bf92:	bf08      	it	eq
 800bf94:	f043 0301 	orreq.w	r3, r3, #1
 800bf98:	353c      	adds	r5, #60	; 0x3c
 800bf9a:	4282      	cmp	r2, r0
 800bf9c:	bf08      	it	eq
 800bf9e:	f043 0301 	orreq.w	r3, r3, #1
 800bfa2:	303c      	adds	r0, #60	; 0x3c
 800bfa4:	428a      	cmp	r2, r1
 800bfa6:	bf08      	it	eq
 800bfa8:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_DMA_DISABLE(hdma);
 800bfac:	6811      	ldr	r1, [r2, #0]
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800bfae:	42aa      	cmp	r2, r5
 800bfb0:	bf08      	it	eq
 800bfb2:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_DMA_DISABLE(hdma);
 800bfb6:	f021 0101 	bic.w	r1, r1, #1
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800bfba:	4282      	cmp	r2, r0
 800bfbc:	bf08      	it	eq
 800bfbe:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_DMA_DISABLE(hdma);
 800bfc2:	6011      	str	r1, [r2, #0]
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800bfc4:	b913      	cbnz	r3, 800bfcc <HAL_DMA_DeInit+0x1cc>
 800bfc6:	4b16      	ldr	r3, [pc, #88]	; (800c020 <HAL_DMA_DeInit+0x220>)
 800bfc8:	429a      	cmp	r2, r3
 800bfca:	d10f      	bne.n	800bfec <HAL_DMA_DeInit+0x1ec>
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 800bfcc:	2300      	movs	r3, #0
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800bfce:	4620      	mov	r0, r4
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 800bfd0:	6013      	str	r3, [r2, #0]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 800bfd2:	6053      	str	r3, [r2, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 800bfd4:	6093      	str	r3, [r2, #8]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 800bfd6:	60d3      	str	r3, [r2, #12]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 800bfd8:	6113      	str	r3, [r2, #16]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800bfda:	f7ff fbaf 	bl	800b73c <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800bfde:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800bfe0:	2301      	movs	r3, #1
 800bfe2:	f002 021f 	and.w	r2, r2, #31
 800bfe6:	4093      	lsls	r3, r2
 800bfe8:	6043      	str	r3, [r0, #4]
 800bfea:	e774      	b.n	800bed6 <HAL_DMA_DeInit+0xd6>
    return HAL_ERROR;
 800bfec:	2001      	movs	r0, #1
}
 800bfee:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800bff0:	2001      	movs	r0, #1
}
 800bff2:	4770      	bx	lr
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800bff4:	4a0e      	ldr	r2, [pc, #56]	; (800c030 <HAL_DMA_DeInit+0x230>)
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800bff6:	4d0f      	ldr	r5, [pc, #60]	; (800c034 <HAL_DMA_DeInit+0x234>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800bff8:	440a      	add	r2, r1
 800bffa:	0091      	lsls	r1, r2, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800bffc:	e7b5      	b.n	800bf6a <HAL_DMA_DeInit+0x16a>
 800bffe:	bf00      	nop
 800c000:	40020058 	.word	0x40020058
 800c004:	40020040 	.word	0x40020040
 800c008:	40020070 	.word	0x40020070
 800c00c:	40020088 	.word	0x40020088
 800c010:	40020028 	.word	0x40020028
 800c014:	58025408 	.word	0x58025408
 800c018:	5802541c 	.word	0x5802541c
 800c01c:	58025430 	.word	0x58025430
 800c020:	58025494 	.word	0x58025494
 800c024:	1600963f 	.word	0x1600963f
 800c028:	58025940 	.word	0x58025940
 800c02c:	58025444 	.word	0x58025444
 800c030:	1000823f 	.word	0x1000823f
 800c034:	40020940 	.word	0x40020940

0800c038 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 800c038:	2800      	cmp	r0, #0
 800c03a:	f000 818a 	beq.w	800c352 <HAL_DMA_Start_IT+0x31a>
{
 800c03e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c042:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 800c044:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 800c048:	2801      	cmp	r0, #1
 800c04a:	f000 8184 	beq.w	800c356 <HAL_DMA_Start_IT+0x31e>
 800c04e:	2001      	movs	r0, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 800c050:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
 800c054:	4285      	cmp	r5, r0
  __HAL_LOCK(hdma);
 800c056:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800c05a:	d007      	beq.n	800c06c <HAL_DMA_Start_IT+0x34>
    __HAL_UNLOCK(hdma);
 800c05c:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800c05e:	f44f 6300 	mov.w	r3, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 800c062:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800c066:	6563      	str	r3, [r4, #84]	; 0x54
}
 800c068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_DMA_DISABLE(hdma);
 800c06c:	6825      	ldr	r5, [r4, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 800c06e:	f04f 0c02 	mov.w	ip, #2
    __HAL_DMA_DISABLE(hdma);
 800c072:	4858      	ldr	r0, [pc, #352]	; (800c1d4 <HAL_DMA_Start_IT+0x19c>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c074:	2700      	movs	r7, #0
    __HAL_DMA_DISABLE(hdma);
 800c076:	4e58      	ldr	r6, [pc, #352]	; (800c1d8 <HAL_DMA_Start_IT+0x1a0>)
    hdma->State = HAL_DMA_STATE_BUSY;
 800c078:	f884 c035 	strb.w	ip, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c07c:	42b5      	cmp	r5, r6
 800c07e:	bf18      	it	ne
 800c080:	4285      	cmpne	r5, r0
    __HAL_DMA_DISABLE(hdma);
 800c082:	f8df c15c 	ldr.w	ip, [pc, #348]	; 800c1e0 <HAL_DMA_Start_IT+0x1a8>
 800c086:	f106 0630 	add.w	r6, r6, #48	; 0x30
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c08a:	6567      	str	r7, [r4, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 800c08c:	bf0c      	ite	eq
 800c08e:	2001      	moveq	r0, #1
 800c090:	2000      	movne	r0, #0
 800c092:	4f52      	ldr	r7, [pc, #328]	; (800c1dc <HAL_DMA_Start_IT+0x1a4>)
 800c094:	4565      	cmp	r5, ip
 800c096:	bf08      	it	eq
 800c098:	f040 0001 	orreq.w	r0, r0, #1
 800c09c:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800c0a0:	42b5      	cmp	r5, r6
 800c0a2:	bf08      	it	eq
 800c0a4:	f040 0001 	orreq.w	r0, r0, #1
 800c0a8:	f506 7662 	add.w	r6, r6, #904	; 0x388
 800c0ac:	4565      	cmp	r5, ip
 800c0ae:	bf08      	it	eq
 800c0b0:	f040 0001 	orreq.w	r0, r0, #1
 800c0b4:	f50c 7c62 	add.w	ip, ip, #904	; 0x388
 800c0b8:	42bd      	cmp	r5, r7
 800c0ba:	bf08      	it	eq
 800c0bc:	f040 0001 	orreq.w	r0, r0, #1
 800c0c0:	f507 7762 	add.w	r7, r7, #904	; 0x388
 800c0c4:	42b5      	cmp	r5, r6
 800c0c6:	bf08      	it	eq
 800c0c8:	f040 0001 	orreq.w	r0, r0, #1
 800c0cc:	3648      	adds	r6, #72	; 0x48
 800c0ce:	4565      	cmp	r5, ip
 800c0d0:	bf08      	it	eq
 800c0d2:	f040 0001 	orreq.w	r0, r0, #1
 800c0d6:	f10c 0c48 	add.w	ip, ip, #72	; 0x48
 800c0da:	42bd      	cmp	r5, r7
 800c0dc:	bf08      	it	eq
 800c0de:	f040 0001 	orreq.w	r0, r0, #1
 800c0e2:	3748      	adds	r7, #72	; 0x48
 800c0e4:	42b5      	cmp	r5, r6
 800c0e6:	bf08      	it	eq
 800c0e8:	f040 0001 	orreq.w	r0, r0, #1
 800c0ec:	3648      	adds	r6, #72	; 0x48
 800c0ee:	4565      	cmp	r5, ip
 800c0f0:	bf08      	it	eq
 800c0f2:	f040 0001 	orreq.w	r0, r0, #1
 800c0f6:	f10c 0c48 	add.w	ip, ip, #72	; 0x48
 800c0fa:	42bd      	cmp	r5, r7
 800c0fc:	bf08      	it	eq
 800c0fe:	f040 0001 	orreq.w	r0, r0, #1
 800c102:	f5a7 678f 	sub.w	r7, r7, #1144	; 0x478
 800c106:	42b5      	cmp	r5, r6
 800c108:	bf08      	it	eq
 800c10a:	f040 0001 	orreq.w	r0, r0, #1
 800c10e:	f5a6 668f 	sub.w	r6, r6, #1144	; 0x478
 800c112:	4565      	cmp	r5, ip
 800c114:	bf14      	ite	ne
 800c116:	4682      	movne	sl, r0
 800c118:	f040 0a01 	orreq.w	sl, r0, #1
 800c11c:	42b5      	cmp	r5, r6
 800c11e:	bf18      	it	ne
 800c120:	42bd      	cmpne	r5, r7
 800c122:	bf0c      	ite	eq
 800c124:	2601      	moveq	r6, #1
 800c126:	2600      	movne	r6, #0
 800c128:	d002      	beq.n	800c130 <HAL_DMA_Start_IT+0xf8>
 800c12a:	f1ba 0f00 	cmp.w	sl, #0
 800c12e:	d059      	beq.n	800c1e4 <HAL_DMA_Start_IT+0x1ac>
 800c130:	682f      	ldr	r7, [r5, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c132:	f8d4 c058 	ldr.w	ip, [r4, #88]	; 0x58
    __HAL_DMA_DISABLE(hdma);
 800c136:	f027 0701 	bic.w	r7, r7, #1
 800c13a:	602f      	str	r7, [r5, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c13c:	2e00      	cmp	r6, #0
 800c13e:	f000 8084 	beq.w	800c24a <HAL_DMA_Start_IT+0x212>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c142:	6e67      	ldr	r7, [r4, #100]	; 0x64
 800c144:	e9d4 0e1a 	ldrd	r0, lr, [r4, #104]	; 0x68
 800c148:	6078      	str	r0, [r7, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 800c14a:	f1be 0f00 	cmp.w	lr, #0
 800c14e:	d002      	beq.n	800c156 <HAL_DMA_Start_IT+0x11e>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c150:	e9d4 701c 	ldrd	r7, r0, [r4, #112]	; 0x70
 800c154:	6078      	str	r0, [r7, #4]
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800c156:	6de7      	ldr	r7, [r4, #92]	; 0x5c
 800c158:	f04f 093f 	mov.w	r9, #63	; 0x3f
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c15c:	f8d4 8008 	ldr.w	r8, [r4, #8]
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800c160:	f007 071f 	and.w	r7, r7, #31
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c164:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800c168:	fa09 f707 	lsl.w	r7, r9, r7
 800c16c:	f8cc 7008 	str.w	r7, [ip, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800c170:	682f      	ldr	r7, [r5, #0]
 800c172:	f427 2780 	bic.w	r7, r7, #262144	; 0x40000
 800c176:	602f      	str	r7, [r5, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800c178:	606b      	str	r3, [r5, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c17a:	f000 80ef 	beq.w	800c35c <HAL_DMA_Start_IT+0x324>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800c17e:	60a9      	str	r1, [r5, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800c180:	60ea      	str	r2, [r5, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c182:	b91e      	cbnz	r6, 800c18c <HAL_DMA_Start_IT+0x154>
 800c184:	f1ba 0f00 	cmp.w	sl, #0
 800c188:	f000 80ee 	beq.w	800c368 <HAL_DMA_Start_IT+0x330>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800c18c:	682b      	ldr	r3, [r5, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800c18e:	6c22      	ldr	r2, [r4, #64]	; 0x40
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800c190:	f023 031e 	bic.w	r3, r3, #30
 800c194:	f043 0316 	orr.w	r3, r3, #22
 800c198:	602b      	str	r3, [r5, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800c19a:	b11a      	cbz	r2, 800c1a4 <HAL_DMA_Start_IT+0x16c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800c19c:	682b      	ldr	r3, [r5, #0]
 800c19e:	f043 0308 	orr.w	r3, r3, #8
 800c1a2:	602b      	str	r3, [r5, #0]
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800c1a4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800c1a6:	681a      	ldr	r2, [r3, #0]
 800c1a8:	03d2      	lsls	r2, r2, #15
 800c1aa:	d503      	bpl.n	800c1b4 <HAL_DMA_Start_IT+0x17c>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800c1ac:	681a      	ldr	r2, [r3, #0]
 800c1ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c1b2:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 800c1b4:	f1be 0f00 	cmp.w	lr, #0
 800c1b8:	d005      	beq.n	800c1c6 <HAL_DMA_Start_IT+0x18e>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800c1ba:	f8de 3000 	ldr.w	r3, [lr]
 800c1be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c1c2:	f8ce 3000 	str.w	r3, [lr]
    __HAL_DMA_ENABLE(hdma);
 800c1c6:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c1c8:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800c1ca:	f043 0301 	orr.w	r3, r3, #1
 800c1ce:	602b      	str	r3, [r5, #0]
}
 800c1d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1d4:	40020040 	.word	0x40020040
 800c1d8:	40020058 	.word	0x40020058
 800c1dc:	400200b8 	.word	0x400200b8
 800c1e0:	40020070 	.word	0x40020070
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c1e4:	4f65      	ldr	r7, [pc, #404]	; (800c37c <HAL_DMA_Start_IT+0x344>)
 800c1e6:	f8df e19c 	ldr.w	lr, [pc, #412]	; 800c384 <HAL_DMA_Start_IT+0x34c>
 800c1ea:	f8df c19c 	ldr.w	ip, [pc, #412]	; 800c388 <HAL_DMA_Start_IT+0x350>
 800c1ee:	4575      	cmp	r5, lr
 800c1f0:	bf18      	it	ne
 800c1f2:	42bd      	cmpne	r5, r7
 800c1f4:	f10e 0e3c 	add.w	lr, lr, #60	; 0x3c
 800c1f8:	bf0c      	ite	eq
 800c1fa:	2701      	moveq	r7, #1
 800c1fc:	2700      	movne	r7, #0
 800c1fe:	4565      	cmp	r5, ip
 800c200:	bf08      	it	eq
 800c202:	f047 0701 	orreq.w	r7, r7, #1
 800c206:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
 800c20a:	4575      	cmp	r5, lr
 800c20c:	bf08      	it	eq
 800c20e:	f047 0701 	orreq.w	r7, r7, #1
 800c212:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 800c216:	4565      	cmp	r5, ip
 800c218:	bf08      	it	eq
 800c21a:	f047 0701 	orreq.w	r7, r7, #1
 800c21e:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
 800c222:	4575      	cmp	r5, lr
 800c224:	bf08      	it	eq
 800c226:	f047 0701 	orreq.w	r7, r7, #1
    __HAL_DMA_DISABLE(hdma);
 800c22a:	f8d5 e000 	ldr.w	lr, [r5]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c22e:	4565      	cmp	r5, ip
 800c230:	bf08      	it	eq
 800c232:	f047 0701 	orreq.w	r7, r7, #1
    __HAL_DMA_DISABLE(hdma);
 800c236:	f02e 0e01 	bic.w	lr, lr, #1
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c23a:	f8d4 c058 	ldr.w	ip, [r4, #88]	; 0x58
    __HAL_DMA_DISABLE(hdma);
 800c23e:	f8c5 e000 	str.w	lr, [r5]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c242:	b917      	cbnz	r7, 800c24a <HAL_DMA_Start_IT+0x212>
 800c244:	4f4e      	ldr	r7, [pc, #312]	; (800c380 <HAL_DMA_Start_IT+0x348>)
 800c246:	42bd      	cmp	r5, r7
 800c248:	d10d      	bne.n	800c266 <HAL_DMA_Start_IT+0x22e>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c24a:	6e67      	ldr	r7, [r4, #100]	; 0x64
 800c24c:	e9d4 0e1a 	ldrd	r0, lr, [r4, #104]	; 0x68
 800c250:	6078      	str	r0, [r7, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 800c252:	f1be 0f00 	cmp.w	lr, #0
 800c256:	d002      	beq.n	800c25e <HAL_DMA_Start_IT+0x226>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c258:	e9d4 701c 	ldrd	r7, r0, [r4, #112]	; 0x70
 800c25c:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c25e:	f1ba 0f00 	cmp.w	sl, #0
 800c262:	f47f af78 	bne.w	800c156 <HAL_DMA_Start_IT+0x11e>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800c266:	4f47      	ldr	r7, [pc, #284]	; (800c384 <HAL_DMA_Start_IT+0x34c>)
 800c268:	f8df 8110 	ldr.w	r8, [pc, #272]	; 800c37c <HAL_DMA_Start_IT+0x344>
 800c26c:	f8df e118 	ldr.w	lr, [pc, #280]	; 800c388 <HAL_DMA_Start_IT+0x350>
 800c270:	4545      	cmp	r5, r8
 800c272:	bf18      	it	ne
 800c274:	42bd      	cmpne	r5, r7
 800c276:	f108 0828 	add.w	r8, r8, #40	; 0x28
 800c27a:	bf0c      	ite	eq
 800c27c:	2701      	moveq	r7, #1
 800c27e:	2700      	movne	r7, #0
 800c280:	4575      	cmp	r5, lr
 800c282:	bf08      	it	eq
 800c284:	f047 0701 	orreq.w	r7, r7, #1
 800c288:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 800c28c:	4545      	cmp	r5, r8
 800c28e:	bf08      	it	eq
 800c290:	f047 0701 	orreq.w	r7, r7, #1
 800c294:	f108 0828 	add.w	r8, r8, #40	; 0x28
 800c298:	4575      	cmp	r5, lr
 800c29a:	bf08      	it	eq
 800c29c:	f047 0701 	orreq.w	r7, r7, #1
 800c2a0:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 800c2a4:	4545      	cmp	r5, r8
 800c2a6:	bf08      	it	eq
 800c2a8:	f047 0701 	orreq.w	r7, r7, #1
 800c2ac:	4575      	cmp	r5, lr
 800c2ae:	bf08      	it	eq
 800c2b0:	f047 0701 	orreq.w	r7, r7, #1
 800c2b4:	b917      	cbnz	r7, 800c2bc <HAL_DMA_Start_IT+0x284>
 800c2b6:	4f32      	ldr	r7, [pc, #200]	; (800c380 <HAL_DMA_Start_IT+0x348>)
 800c2b8:	42bd      	cmp	r5, r7
 800c2ba:	d155      	bne.n	800c368 <HAL_DMA_Start_IT+0x330>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800c2bc:	6de7      	ldr	r7, [r4, #92]	; 0x5c
 800c2be:	f04f 0e01 	mov.w	lr, #1
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c2c2:	f8d4 8008 	ldr.w	r8, [r4, #8]
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800c2c6:	f007 071f 	and.w	r7, r7, #31
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c2ca:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800c2ce:	fa0e f707 	lsl.w	r7, lr, r7
 800c2d2:	f8cc 7004 	str.w	r7, [ip, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800c2d6:	606b      	str	r3, [r5, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c2d8:	d043      	beq.n	800c362 <HAL_DMA_Start_IT+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800c2da:	60a9      	str	r1, [r5, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800c2dc:	60ea      	str	r2, [r5, #12]
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800c2de:	682b      	ldr	r3, [r5, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800c2e0:	6c22      	ldr	r2, [r4, #64]	; 0x40
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800c2e2:	f023 030e 	bic.w	r3, r3, #14
 800c2e6:	f043 030a 	orr.w	r3, r3, #10
 800c2ea:	602b      	str	r3, [r5, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800c2ec:	2a00      	cmp	r2, #0
 800c2ee:	d02d      	beq.n	800c34c <HAL_DMA_Start_IT+0x314>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800c2f0:	682b      	ldr	r3, [r5, #0]
 800c2f2:	f043 0304 	orr.w	r3, r3, #4
 800c2f6:	602b      	str	r3, [r5, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c2f8:	4b20      	ldr	r3, [pc, #128]	; (800c37c <HAL_DMA_Start_IT+0x344>)
 800c2fa:	4a22      	ldr	r2, [pc, #136]	; (800c384 <HAL_DMA_Start_IT+0x34c>)
 800c2fc:	4922      	ldr	r1, [pc, #136]	; (800c388 <HAL_DMA_Start_IT+0x350>)
 800c2fe:	4295      	cmp	r5, r2
 800c300:	bf18      	it	ne
 800c302:	429d      	cmpne	r5, r3
 800c304:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 800c308:	bf0c      	ite	eq
 800c30a:	2301      	moveq	r3, #1
 800c30c:	2300      	movne	r3, #0
 800c30e:	428d      	cmp	r5, r1
 800c310:	bf08      	it	eq
 800c312:	f043 0301 	orreq.w	r3, r3, #1
 800c316:	3128      	adds	r1, #40	; 0x28
 800c318:	4295      	cmp	r5, r2
 800c31a:	bf08      	it	eq
 800c31c:	f043 0301 	orreq.w	r3, r3, #1
 800c320:	3228      	adds	r2, #40	; 0x28
 800c322:	428d      	cmp	r5, r1
 800c324:	bf08      	it	eq
 800c326:	f043 0301 	orreq.w	r3, r3, #1
 800c32a:	3128      	adds	r1, #40	; 0x28
 800c32c:	4295      	cmp	r5, r2
 800c32e:	bf08      	it	eq
 800c330:	f043 0301 	orreq.w	r3, r3, #1
 800c334:	3228      	adds	r2, #40	; 0x28
 800c336:	428d      	cmp	r5, r1
 800c338:	bf08      	it	eq
 800c33a:	f043 0301 	orreq.w	r3, r3, #1
 800c33e:	4295      	cmp	r5, r2
 800c340:	bf08      	it	eq
 800c342:	f043 0301 	orreq.w	r3, r3, #1
 800c346:	2b00      	cmp	r3, #0
 800c348:	f43f af3d 	beq.w	800c1c6 <HAL_DMA_Start_IT+0x18e>
 800c34c:	f8d4 e06c 	ldr.w	lr, [r4, #108]	; 0x6c
 800c350:	e728      	b.n	800c1a4 <HAL_DMA_Start_IT+0x16c>
    return HAL_ERROR;
 800c352:	2001      	movs	r0, #1
}
 800c354:	4770      	bx	lr
  __HAL_LOCK(hdma);
 800c356:	2002      	movs	r0, #2
}
 800c358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800c35c:	60aa      	str	r2, [r5, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800c35e:	60e9      	str	r1, [r5, #12]
 800c360:	e70f      	b.n	800c182 <HAL_DMA_Start_IT+0x14a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800c362:	60aa      	str	r2, [r5, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800c364:	60e9      	str	r1, [r5, #12]
 800c366:	e7ba      	b.n	800c2de <HAL_DMA_Start_IT+0x2a6>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800c368:	682b      	ldr	r3, [r5, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800c36a:	6c22      	ldr	r2, [r4, #64]	; 0x40
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800c36c:	f023 030e 	bic.w	r3, r3, #14
 800c370:	f043 030a 	orr.w	r3, r3, #10
 800c374:	602b      	str	r3, [r5, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800c376:	2a00      	cmp	r2, #0
 800c378:	d1ba      	bne.n	800c2f0 <HAL_DMA_Start_IT+0x2b8>
 800c37a:	e7bd      	b.n	800c2f8 <HAL_DMA_Start_IT+0x2c0>
 800c37c:	5802541c 	.word	0x5802541c
 800c380:	58025494 	.word	0x58025494
 800c384:	58025408 	.word	0x58025408
 800c388:	58025430 	.word	0x58025430

0800c38c <HAL_DMA_Abort>:
{
 800c38c:	b570      	push	{r4, r5, r6, lr}
 800c38e:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 800c390:	f7fe ff2c 	bl	800b1ec <HAL_GetTick>
  if(hdma == NULL)
 800c394:	2d00      	cmp	r5, #0
 800c396:	f000 8128 	beq.w	800c5ea <HAL_DMA_Abort+0x25e>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c39a:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 800c39e:	2b02      	cmp	r3, #2
 800c3a0:	f040 80e1 	bne.w	800c566 <HAL_DMA_Abort+0x1da>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c3a4:	682c      	ldr	r4, [r5, #0]
 800c3a6:	4606      	mov	r6, r0
 800c3a8:	4b91      	ldr	r3, [pc, #580]	; (800c5f0 <HAL_DMA_Abort+0x264>)
 800c3aa:	4992      	ldr	r1, [pc, #584]	; (800c5f4 <HAL_DMA_Abort+0x268>)
 800c3ac:	4a92      	ldr	r2, [pc, #584]	; (800c5f8 <HAL_DMA_Abort+0x26c>)
 800c3ae:	428c      	cmp	r4, r1
 800c3b0:	bf18      	it	ne
 800c3b2:	429c      	cmpne	r4, r3
 800c3b4:	f101 0148 	add.w	r1, r1, #72	; 0x48
 800c3b8:	4890      	ldr	r0, [pc, #576]	; (800c5fc <HAL_DMA_Abort+0x270>)
 800c3ba:	bf0c      	ite	eq
 800c3bc:	2301      	moveq	r3, #1
 800c3be:	2300      	movne	r3, #0
 800c3c0:	4294      	cmp	r4, r2
 800c3c2:	bf08      	it	eq
 800c3c4:	f043 0301 	orreq.w	r3, r3, #1
 800c3c8:	3248      	adds	r2, #72	; 0x48
 800c3ca:	428c      	cmp	r4, r1
 800c3cc:	bf08      	it	eq
 800c3ce:	f043 0301 	orreq.w	r3, r3, #1
 800c3d2:	f501 7162 	add.w	r1, r1, #904	; 0x388
 800c3d6:	4284      	cmp	r4, r0
 800c3d8:	bf08      	it	eq
 800c3da:	f043 0301 	orreq.w	r3, r3, #1
 800c3de:	f500 7062 	add.w	r0, r0, #904	; 0x388
 800c3e2:	4294      	cmp	r4, r2
 800c3e4:	bf08      	it	eq
 800c3e6:	f043 0301 	orreq.w	r3, r3, #1
 800c3ea:	f502 7262 	add.w	r2, r2, #904	; 0x388
 800c3ee:	428c      	cmp	r4, r1
 800c3f0:	bf08      	it	eq
 800c3f2:	f043 0301 	orreq.w	r3, r3, #1
 800c3f6:	3148      	adds	r1, #72	; 0x48
 800c3f8:	4284      	cmp	r4, r0
 800c3fa:	bf08      	it	eq
 800c3fc:	f043 0301 	orreq.w	r3, r3, #1
 800c400:	3048      	adds	r0, #72	; 0x48
 800c402:	4294      	cmp	r4, r2
 800c404:	bf08      	it	eq
 800c406:	f043 0301 	orreq.w	r3, r3, #1
 800c40a:	3248      	adds	r2, #72	; 0x48
 800c40c:	428c      	cmp	r4, r1
 800c40e:	bf08      	it	eq
 800c410:	f043 0301 	orreq.w	r3, r3, #1
 800c414:	3148      	adds	r1, #72	; 0x48
 800c416:	4284      	cmp	r4, r0
 800c418:	bf08      	it	eq
 800c41a:	f043 0301 	orreq.w	r3, r3, #1
 800c41e:	3048      	adds	r0, #72	; 0x48
 800c420:	4294      	cmp	r4, r2
 800c422:	bf08      	it	eq
 800c424:	f043 0301 	orreq.w	r3, r3, #1
 800c428:	f5a2 628f 	sub.w	r2, r2, #1144	; 0x478
 800c42c:	428c      	cmp	r4, r1
 800c42e:	bf08      	it	eq
 800c430:	f043 0301 	orreq.w	r3, r3, #1
 800c434:	f5a1 618f 	sub.w	r1, r1, #1144	; 0x478
 800c438:	4284      	cmp	r4, r0
 800c43a:	bf08      	it	eq
 800c43c:	f043 0301 	orreq.w	r3, r3, #1
 800c440:	428c      	cmp	r4, r1
 800c442:	bf18      	it	ne
 800c444:	4294      	cmpne	r4, r2
 800c446:	bf0c      	ite	eq
 800c448:	2201      	moveq	r2, #1
 800c44a:	2200      	movne	r2, #0
 800c44c:	d002      	beq.n	800c454 <HAL_DMA_Abort+0xc8>
 800c44e:	2b00      	cmp	r3, #0
 800c450:	f000 8090 	beq.w	800c574 <HAL_DMA_Abort+0x1e8>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800c454:	6821      	ldr	r1, [r4, #0]
 800c456:	f021 011e 	bic.w	r1, r1, #30
 800c45a:	6021      	str	r1, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800c45c:	6961      	ldr	r1, [r4, #20]
 800c45e:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c462:	6161      	str	r1, [r4, #20]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c464:	2a00      	cmp	r2, #0
 800c466:	f000 80b0 	beq.w	800c5ca <HAL_DMA_Abort+0x23e>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800c46a:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 800c46c:	6813      	ldr	r3, [r2, #0]
 800c46e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c472:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800c474:	6823      	ldr	r3, [r4, #0]
 800c476:	f023 0301 	bic.w	r3, r3, #1
 800c47a:	6023      	str	r3, [r4, #0]
 800c47c:	e005      	b.n	800c48a <HAL_DMA_Abort+0xfe>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c47e:	f7fe feb5 	bl	800b1ec <HAL_GetTick>
 800c482:	1b83      	subs	r3, r0, r6
 800c484:	2b05      	cmp	r3, #5
 800c486:	f200 80a6 	bhi.w	800c5d6 <HAL_DMA_Abort+0x24a>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800c48a:	6823      	ldr	r3, [r4, #0]
 800c48c:	07db      	lsls	r3, r3, #31
 800c48e:	d4f6      	bmi.n	800c47e <HAL_DMA_Abort+0xf2>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c490:	682a      	ldr	r2, [r5, #0]
 800c492:	4b57      	ldr	r3, [pc, #348]	; (800c5f0 <HAL_DMA_Abort+0x264>)
 800c494:	4957      	ldr	r1, [pc, #348]	; (800c5f4 <HAL_DMA_Abort+0x268>)
 800c496:	4c58      	ldr	r4, [pc, #352]	; (800c5f8 <HAL_DMA_Abort+0x26c>)
 800c498:	428a      	cmp	r2, r1
 800c49a:	bf18      	it	ne
 800c49c:	429a      	cmpne	r2, r3
 800c49e:	4858      	ldr	r0, [pc, #352]	; (800c600 <HAL_DMA_Abort+0x274>)
 800c4a0:	f101 0160 	add.w	r1, r1, #96	; 0x60
 800c4a4:	bf0c      	ite	eq
 800c4a6:	2301      	moveq	r3, #1
 800c4a8:	2300      	movne	r3, #0
 800c4aa:	42a2      	cmp	r2, r4
 800c4ac:	bf08      	it	eq
 800c4ae:	f043 0301 	orreq.w	r3, r3, #1
 800c4b2:	3448      	adds	r4, #72	; 0x48
 800c4b4:	4282      	cmp	r2, r0
 800c4b6:	bf08      	it	eq
 800c4b8:	f043 0301 	orreq.w	r3, r3, #1
 800c4bc:	f500 7062 	add.w	r0, r0, #904	; 0x388
 800c4c0:	428a      	cmp	r2, r1
 800c4c2:	bf08      	it	eq
 800c4c4:	f043 0301 	orreq.w	r3, r3, #1
 800c4c8:	f501 7162 	add.w	r1, r1, #904	; 0x388
 800c4cc:	42a2      	cmp	r2, r4
 800c4ce:	bf08      	it	eq
 800c4d0:	f043 0301 	orreq.w	r3, r3, #1
 800c4d4:	f504 7462 	add.w	r4, r4, #904	; 0x388
 800c4d8:	4282      	cmp	r2, r0
 800c4da:	bf08      	it	eq
 800c4dc:	f043 0301 	orreq.w	r3, r3, #1
 800c4e0:	3048      	adds	r0, #72	; 0x48
 800c4e2:	428a      	cmp	r2, r1
 800c4e4:	bf08      	it	eq
 800c4e6:	f043 0301 	orreq.w	r3, r3, #1
 800c4ea:	3148      	adds	r1, #72	; 0x48
 800c4ec:	42a2      	cmp	r2, r4
 800c4ee:	bf08      	it	eq
 800c4f0:	f043 0301 	orreq.w	r3, r3, #1
 800c4f4:	3448      	adds	r4, #72	; 0x48
 800c4f6:	4282      	cmp	r2, r0
 800c4f8:	bf08      	it	eq
 800c4fa:	f043 0301 	orreq.w	r3, r3, #1
 800c4fe:	3048      	adds	r0, #72	; 0x48
 800c500:	428a      	cmp	r2, r1
 800c502:	bf08      	it	eq
 800c504:	f043 0301 	orreq.w	r3, r3, #1
 800c508:	3148      	adds	r1, #72	; 0x48
 800c50a:	42a2      	cmp	r2, r4
 800c50c:	bf08      	it	eq
 800c50e:	f043 0301 	orreq.w	r3, r3, #1
 800c512:	4282      	cmp	r2, r0
 800c514:	bf08      	it	eq
 800c516:	f043 0301 	orreq.w	r3, r3, #1
 800c51a:	428a      	cmp	r2, r1
 800c51c:	bf08      	it	eq
 800c51e:	f043 0301 	orreq.w	r3, r3, #1
 800c522:	b933      	cbnz	r3, 800c532 <HAL_DMA_Abort+0x1a6>
 800c524:	f5a1 6195 	sub.w	r1, r1, #1192	; 0x4a8
 800c528:	4b36      	ldr	r3, [pc, #216]	; (800c604 <HAL_DMA_Abort+0x278>)
 800c52a:	429a      	cmp	r2, r3
 800c52c:	bf18      	it	ne
 800c52e:	428a      	cmpne	r2, r1
 800c530:	d172      	bne.n	800c618 <HAL_DMA_Abort+0x28c>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800c532:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 800c534:	233f      	movs	r3, #63	; 0x3f
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c536:	6da9      	ldr	r1, [r5, #88]	; 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800c538:	f002 021f 	and.w	r2, r2, #31
 800c53c:	4093      	lsls	r3, r2
 800c53e:	608b      	str	r3, [r1, #8]
      if(hdma->DMAmuxRequestGen != 0U)
 800c540:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c542:	e9d5 2119 	ldrd	r2, r1, [r5, #100]	; 0x64
 800c546:	6051      	str	r1, [r2, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 800c548:	b133      	cbz	r3, 800c558 <HAL_DMA_Abort+0x1cc>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800c54a:	681a      	ldr	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c54c:	6f29      	ldr	r1, [r5, #112]	; 0x70
 800c54e:	6f68      	ldr	r0, [r5, #116]	; 0x74
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800c550:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c554:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c556:	6048      	str	r0, [r1, #4]
    __HAL_UNLOCK(hdma);
 800c558:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 800c55a:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 800c55c:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 800c560:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 800c564:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c566:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 800c568:	2300      	movs	r3, #0
    return HAL_ERROR;
 800c56a:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c56c:	656a      	str	r2, [r5, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 800c56e:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
 800c572:	bd70      	pop	{r4, r5, r6, pc}
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c574:	4a24      	ldr	r2, [pc, #144]	; (800c608 <HAL_DMA_Abort+0x27c>)
 800c576:	4925      	ldr	r1, [pc, #148]	; (800c60c <HAL_DMA_Abort+0x280>)
 800c578:	4825      	ldr	r0, [pc, #148]	; (800c610 <HAL_DMA_Abort+0x284>)
 800c57a:	428c      	cmp	r4, r1
 800c57c:	bf18      	it	ne
 800c57e:	4294      	cmpne	r4, r2
 800c580:	f101 013c 	add.w	r1, r1, #60	; 0x3c
 800c584:	bf0c      	ite	eq
 800c586:	2201      	moveq	r2, #1
 800c588:	2200      	movne	r2, #0
 800c58a:	4284      	cmp	r4, r0
 800c58c:	bf08      	it	eq
 800c58e:	f042 0201 	orreq.w	r2, r2, #1
 800c592:	3028      	adds	r0, #40	; 0x28
 800c594:	428c      	cmp	r4, r1
 800c596:	bf08      	it	eq
 800c598:	f042 0201 	orreq.w	r2, r2, #1
 800c59c:	3128      	adds	r1, #40	; 0x28
 800c59e:	4284      	cmp	r4, r0
 800c5a0:	bf08      	it	eq
 800c5a2:	f042 0201 	orreq.w	r2, r2, #1
 800c5a6:	3028      	adds	r0, #40	; 0x28
 800c5a8:	428c      	cmp	r4, r1
 800c5aa:	bf08      	it	eq
 800c5ac:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800c5b0:	6821      	ldr	r1, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c5b2:	4284      	cmp	r4, r0
 800c5b4:	bf08      	it	eq
 800c5b6:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800c5ba:	f021 010e 	bic.w	r1, r1, #14
 800c5be:	6021      	str	r1, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c5c0:	b91a      	cbnz	r2, 800c5ca <HAL_DMA_Abort+0x23e>
 800c5c2:	4a14      	ldr	r2, [pc, #80]	; (800c614 <HAL_DMA_Abort+0x288>)
 800c5c4:	4294      	cmp	r4, r2
 800c5c6:	f47f af55 	bne.w	800c474 <HAL_DMA_Abort+0xe8>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800c5ca:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800c5cc:	680a      	ldr	r2, [r1, #0]
 800c5ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c5d2:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 800c5d4:	e74e      	b.n	800c474 <HAL_DMA_Abort+0xe8>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c5d6:	2120      	movs	r1, #32
        __HAL_UNLOCK(hdma);
 800c5d8:	2200      	movs	r2, #0
        hdma->State = HAL_DMA_STATE_ERROR;
 800c5da:	2303      	movs	r3, #3
        return HAL_ERROR;
 800c5dc:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c5de:	6569      	str	r1, [r5, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 800c5e0:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
 800c5e4:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 800c5e8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800c5ea:	2001      	movs	r0, #1
}
 800c5ec:	bd70      	pop	{r4, r5, r6, pc}
 800c5ee:	bf00      	nop
 800c5f0:	40020058 	.word	0x40020058
 800c5f4:	40020040 	.word	0x40020040
 800c5f8:	40020070 	.word	0x40020070
 800c5fc:	400200a0 	.word	0x400200a0
 800c600:	40020088 	.word	0x40020088
 800c604:	40020028 	.word	0x40020028
 800c608:	5802541c 	.word	0x5802541c
 800c60c:	58025408 	.word	0x58025408
 800c610:	58025430 	.word	0x58025430
 800c614:	58025494 	.word	0x58025494
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c618:	f104 54c0 	add.w	r4, r4, #402653184	; 0x18000000
 800c61c:	4b18      	ldr	r3, [pc, #96]	; (800c680 <HAL_DMA_Abort+0x2f4>)
 800c61e:	4819      	ldr	r0, [pc, #100]	; (800c684 <HAL_DMA_Abort+0x2f8>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800c620:	2101      	movs	r1, #1
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c622:	f504 449f 	add.w	r4, r4, #20352	; 0x4f80
 800c626:	42a2      	cmp	r2, r4
 800c628:	bf18      	it	ne
 800c62a:	429a      	cmpne	r2, r3
 800c62c:	f104 043c 	add.w	r4, r4, #60	; 0x3c
 800c630:	bf0c      	ite	eq
 800c632:	2301      	moveq	r3, #1
 800c634:	2300      	movne	r3, #0
 800c636:	4282      	cmp	r2, r0
 800c638:	bf08      	it	eq
 800c63a:	f043 0301 	orreq.w	r3, r3, #1
 800c63e:	3028      	adds	r0, #40	; 0x28
 800c640:	42a2      	cmp	r2, r4
 800c642:	bf08      	it	eq
 800c644:	f043 0301 	orreq.w	r3, r3, #1
 800c648:	3428      	adds	r4, #40	; 0x28
 800c64a:	4282      	cmp	r2, r0
 800c64c:	bf08      	it	eq
 800c64e:	f043 0301 	orreq.w	r3, r3, #1
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800c652:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c654:	42a2      	cmp	r2, r4
 800c656:	bf08      	it	eq
 800c658:	f043 0301 	orreq.w	r3, r3, #1
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800c65c:	f000 001f 	and.w	r0, r0, #31
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c660:	3414      	adds	r4, #20
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800c662:	4081      	lsls	r1, r0
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c664:	42a2      	cmp	r2, r4
 800c666:	bf08      	it	eq
 800c668:	f043 0301 	orreq.w	r3, r3, #1
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800c66c:	6dac      	ldr	r4, [r5, #88]	; 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800c66e:	6061      	str	r1, [r4, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c670:	2b00      	cmp	r3, #0
 800c672:	f47f af65 	bne.w	800c540 <HAL_DMA_Abort+0x1b4>
 800c676:	4b04      	ldr	r3, [pc, #16]	; (800c688 <HAL_DMA_Abort+0x2fc>)
 800c678:	429a      	cmp	r2, r3
 800c67a:	f43f af61 	beq.w	800c540 <HAL_DMA_Abort+0x1b4>
 800c67e:	e76b      	b.n	800c558 <HAL_DMA_Abort+0x1cc>
 800c680:	5802541c 	.word	0x5802541c
 800c684:	58025430 	.word	0x58025430
 800c688:	58025494 	.word	0x58025494

0800c68c <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 800c68c:	2800      	cmp	r0, #0
 800c68e:	d060      	beq.n	800c752 <HAL_DMA_Abort_IT+0xc6>
{
 800c690:	b538      	push	{r3, r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c692:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 800c696:	4603      	mov	r3, r0
 800c698:	2a02      	cmp	r2, #2
 800c69a:	d156      	bne.n	800c74a <HAL_DMA_Abort_IT+0xbe>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c69c:	6801      	ldr	r1, [r0, #0]
 800c69e:	4a59      	ldr	r2, [pc, #356]	; (800c804 <HAL_DMA_Abort_IT+0x178>)
 800c6a0:	4291      	cmp	r1, r2
 800c6a2:	d049      	beq.n	800c738 <HAL_DMA_Abort_IT+0xac>
 800c6a4:	3218      	adds	r2, #24
 800c6a6:	4291      	cmp	r1, r2
 800c6a8:	d046      	beq.n	800c738 <HAL_DMA_Abort_IT+0xac>
 800c6aa:	3230      	adds	r2, #48	; 0x30
 800c6ac:	4856      	ldr	r0, [pc, #344]	; (800c808 <HAL_DMA_Abort_IT+0x17c>)
 800c6ae:	4c57      	ldr	r4, [pc, #348]	; (800c80c <HAL_DMA_Abort_IT+0x180>)
 800c6b0:	4281      	cmp	r1, r0
 800c6b2:	bf18      	it	ne
 800c6b4:	4291      	cmpne	r1, r2
 800c6b6:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800c6ba:	4d55      	ldr	r5, [pc, #340]	; (800c810 <HAL_DMA_Abort_IT+0x184>)
 800c6bc:	bf0c      	ite	eq
 800c6be:	2201      	moveq	r2, #1
 800c6c0:	2200      	movne	r2, #0
 800c6c2:	42a1      	cmp	r1, r4
 800c6c4:	bf08      	it	eq
 800c6c6:	f042 0201 	orreq.w	r2, r2, #1
 800c6ca:	3448      	adds	r4, #72	; 0x48
 800c6cc:	4281      	cmp	r1, r0
 800c6ce:	bf08      	it	eq
 800c6d0:	f042 0201 	orreq.w	r2, r2, #1
 800c6d4:	f500 7062 	add.w	r0, r0, #904	; 0x388
 800c6d8:	42a9      	cmp	r1, r5
 800c6da:	bf08      	it	eq
 800c6dc:	f042 0201 	orreq.w	r2, r2, #1
 800c6e0:	f505 7562 	add.w	r5, r5, #904	; 0x388
 800c6e4:	42a1      	cmp	r1, r4
 800c6e6:	bf08      	it	eq
 800c6e8:	f042 0201 	orreq.w	r2, r2, #1
 800c6ec:	f504 7462 	add.w	r4, r4, #904	; 0x388
 800c6f0:	4281      	cmp	r1, r0
 800c6f2:	bf08      	it	eq
 800c6f4:	f042 0201 	orreq.w	r2, r2, #1
 800c6f8:	3048      	adds	r0, #72	; 0x48
 800c6fa:	42a9      	cmp	r1, r5
 800c6fc:	bf08      	it	eq
 800c6fe:	f042 0201 	orreq.w	r2, r2, #1
 800c702:	3548      	adds	r5, #72	; 0x48
 800c704:	42a1      	cmp	r1, r4
 800c706:	bf08      	it	eq
 800c708:	f042 0201 	orreq.w	r2, r2, #1
 800c70c:	3448      	adds	r4, #72	; 0x48
 800c70e:	4281      	cmp	r1, r0
 800c710:	bf08      	it	eq
 800c712:	f042 0201 	orreq.w	r2, r2, #1
 800c716:	3048      	adds	r0, #72	; 0x48
 800c718:	42a9      	cmp	r1, r5
 800c71a:	bf08      	it	eq
 800c71c:	f042 0201 	orreq.w	r2, r2, #1
 800c720:	42a1      	cmp	r1, r4
 800c722:	bf08      	it	eq
 800c724:	f042 0201 	orreq.w	r2, r2, #1
 800c728:	4281      	cmp	r1, r0
 800c72a:	bf08      	it	eq
 800c72c:	f042 0201 	orreq.w	r2, r2, #1
 800c730:	b912      	cbnz	r2, 800c738 <HAL_DMA_Abort_IT+0xac>
 800c732:	4a38      	ldr	r2, [pc, #224]	; (800c814 <HAL_DMA_Abort_IT+0x188>)
 800c734:	4291      	cmp	r1, r2
 800c736:	d10e      	bne.n	800c756 <HAL_DMA_Abort_IT+0xca>
      hdma->State = HAL_DMA_STATE_ABORT;
 800c738:	2204      	movs	r2, #4
  return HAL_OK;
 800c73a:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 800c73c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800c740:	680b      	ldr	r3, [r1, #0]
 800c742:	f023 0301 	bic.w	r3, r3, #1
 800c746:	600b      	str	r3, [r1, #0]
}
 800c748:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c74a:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 800c74c:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c74e:	655a      	str	r2, [r3, #84]	; 0x54
}
 800c750:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800c752:	2001      	movs	r0, #1
}
 800c754:	4770      	bx	lr
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c756:	f104 54c0 	add.w	r4, r4, #402653184	; 0x18000000
 800c75a:	4a2f      	ldr	r2, [pc, #188]	; (800c818 <HAL_DMA_Abort_IT+0x18c>)
 800c75c:	482f      	ldr	r0, [pc, #188]	; (800c81c <HAL_DMA_Abort_IT+0x190>)
 800c75e:	f504 449f 	add.w	r4, r4, #20352	; 0x4f80
 800c762:	4d2f      	ldr	r5, [pc, #188]	; (800c820 <HAL_DMA_Abort_IT+0x194>)
 800c764:	42a1      	cmp	r1, r4
 800c766:	bf18      	it	ne
 800c768:	4291      	cmpne	r1, r2
 800c76a:	f104 0450 	add.w	r4, r4, #80	; 0x50
 800c76e:	bf0c      	ite	eq
 800c770:	2201      	moveq	r2, #1
 800c772:	2200      	movne	r2, #0
 800c774:	4281      	cmp	r1, r0
 800c776:	bf08      	it	eq
 800c778:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800c77c:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c77e:	42a9      	cmp	r1, r5
 800c780:	bf08      	it	eq
 800c782:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800c786:	f020 000e 	bic.w	r0, r0, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c78a:	3528      	adds	r5, #40	; 0x28
 800c78c:	42a1      	cmp	r1, r4
 800c78e:	bf08      	it	eq
 800c790:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800c794:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c796:	3428      	adds	r4, #40	; 0x28
      __HAL_DMA_DISABLE(hdma);
 800c798:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c79a:	42a9      	cmp	r1, r5
 800c79c:	bf08      	it	eq
 800c79e:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 800c7a2:	f020 0001 	bic.w	r0, r0, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c7a6:	42a1      	cmp	r1, r4
 800c7a8:	bf08      	it	eq
 800c7aa:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 800c7ae:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c7b0:	b912      	cbnz	r2, 800c7b8 <HAL_DMA_Abort_IT+0x12c>
 800c7b2:	4a1c      	ldr	r2, [pc, #112]	; (800c824 <HAL_DMA_Abort_IT+0x198>)
 800c7b4:	4291      	cmp	r1, r2
 800c7b6:	d117      	bne.n	800c7e8 <HAL_DMA_Abort_IT+0x15c>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800c7b8:	6e1c      	ldr	r4, [r3, #96]	; 0x60
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800c7ba:	2101      	movs	r1, #1
 800c7bc:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800c7be:	6822      	ldr	r2, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800c7c0:	f000 001f 	and.w	r0, r0, #31
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800c7c4:	6d9d      	ldr	r5, [r3, #88]	; 0x58
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800c7c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800c7ca:	4081      	lsls	r1, r0
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c7cc:	6e58      	ldr	r0, [r3, #100]	; 0x64
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800c7ce:	6022      	str	r2, [r4, #0]
        if(hdma->DMAmuxRequestGen != 0U)
 800c7d0:	e9d3 421a 	ldrd	r4, r2, [r3, #104]	; 0x68
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800c7d4:	6069      	str	r1, [r5, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c7d6:	6044      	str	r4, [r0, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 800c7d8:	b132      	cbz	r2, 800c7e8 <HAL_DMA_Abort_IT+0x15c>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800c7da:	6811      	ldr	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c7dc:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800c7de:	6f5c      	ldr	r4, [r3, #116]	; 0x74
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800c7e0:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800c7e4:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c7e6:	6044      	str	r4, [r0, #4]
      __HAL_UNLOCK(hdma);
 800c7e8:	2400      	movs	r4, #0
      hdma->State = HAL_DMA_STATE_READY;
 800c7ea:	2101      	movs	r1, #1
      if(hdma->XferAbortCallback != NULL)
 800c7ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hdma);
 800c7ee:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800c7f2:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 800c7f6:	b11a      	cbz	r2, 800c800 <HAL_DMA_Abort_IT+0x174>
        hdma->XferAbortCallback(hdma);
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	4790      	blx	r2
  return HAL_OK;
 800c7fc:	4620      	mov	r0, r4
}
 800c7fe:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800c800:	4610      	mov	r0, r2
}
 800c802:	bd38      	pop	{r3, r4, r5, pc}
 800c804:	40020010 	.word	0x40020010
 800c808:	40020040 	.word	0x40020040
 800c80c:	40020070 	.word	0x40020070
 800c810:	400200a0 	.word	0x400200a0
 800c814:	400204b8 	.word	0x400204b8
 800c818:	5802541c 	.word	0x5802541c
 800c81c:	58025430 	.word	0x58025430
 800c820:	58025444 	.word	0x58025444
 800c824:	58025494 	.word	0x58025494

0800c828 <HAL_DMA_IRQHandler>:
{
 800c828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800c82c:	4a9f      	ldr	r2, [pc, #636]	; (800caac <HAL_DMA_IRQHandler+0x284>)
  __IO uint32_t count = 0U;
 800c82e:	2500      	movs	r5, #0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800c830:	4e9f      	ldr	r6, [pc, #636]	; (800cab0 <HAL_DMA_IRQHandler+0x288>)
{
 800c832:	b082      	sub	sp, #8
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800c834:	6803      	ldr	r3, [r0, #0]
{
 800c836:	4682      	mov	sl, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 800c838:	499e      	ldr	r1, [pc, #632]	; (800cab4 <HAL_DMA_IRQHandler+0x28c>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c83a:	6d84      	ldr	r4, [r0, #88]	; 0x58
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800c83c:	4293      	cmp	r3, r2
 800c83e:	bf18      	it	ne
 800c840:	42b3      	cmpne	r3, r6
  __IO uint32_t count = 0U;
 800c842:	9501      	str	r5, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800c844:	bf08      	it	eq
 800c846:	2601      	moveq	r6, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 800c848:	680d      	ldr	r5, [r1, #0]
  tmpisr_dma  = regs_dma->ISR;
 800c84a:	6827      	ldr	r7, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800c84c:	bf18      	it	ne
 800c84e:	2600      	movne	r6, #0
  tmpisr_bdma = regs_bdma->ISR;
 800c850:	6821      	ldr	r1, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800c852:	d04a      	beq.n	800c8ea <HAL_DMA_IRQHandler+0xc2>
 800c854:	3230      	adds	r2, #48	; 0x30
 800c856:	f8df e26c 	ldr.w	lr, [pc, #620]	; 800cac4 <HAL_DMA_IRQHandler+0x29c>
 800c85a:	4897      	ldr	r0, [pc, #604]	; (800cab8 <HAL_DMA_IRQHandler+0x290>)
 800c85c:	4573      	cmp	r3, lr
 800c85e:	bf18      	it	ne
 800c860:	4293      	cmpne	r3, r2
 800c862:	f10e 0e48 	add.w	lr, lr, #72	; 0x48
 800c866:	bf0c      	ite	eq
 800c868:	2201      	moveq	r2, #1
 800c86a:	2200      	movne	r2, #0
 800c86c:	4283      	cmp	r3, r0
 800c86e:	bf08      	it	eq
 800c870:	f042 0201 	orreq.w	r2, r2, #1
 800c874:	3030      	adds	r0, #48	; 0x30
 800c876:	4573      	cmp	r3, lr
 800c878:	bf08      	it	eq
 800c87a:	f042 0201 	orreq.w	r2, r2, #1
 800c87e:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 800c882:	4283      	cmp	r3, r0
 800c884:	bf08      	it	eq
 800c886:	f042 0201 	orreq.w	r2, r2, #1
 800c88a:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800c88e:	4573      	cmp	r3, lr
 800c890:	bf08      	it	eq
 800c892:	f042 0201 	orreq.w	r2, r2, #1
 800c896:	f50e 7e5c 	add.w	lr, lr, #880	; 0x370
 800c89a:	4283      	cmp	r3, r0
 800c89c:	bf08      	it	eq
 800c89e:	f042 0201 	orreq.w	r2, r2, #1
 800c8a2:	3030      	adds	r0, #48	; 0x30
 800c8a4:	4573      	cmp	r3, lr
 800c8a6:	bf08      	it	eq
 800c8a8:	f042 0201 	orreq.w	r2, r2, #1
 800c8ac:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 800c8b0:	4283      	cmp	r3, r0
 800c8b2:	bf08      	it	eq
 800c8b4:	f042 0201 	orreq.w	r2, r2, #1
 800c8b8:	3030      	adds	r0, #48	; 0x30
 800c8ba:	4573      	cmp	r3, lr
 800c8bc:	bf08      	it	eq
 800c8be:	f042 0201 	orreq.w	r2, r2, #1
 800c8c2:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 800c8c6:	4283      	cmp	r3, r0
 800c8c8:	bf08      	it	eq
 800c8ca:	f042 0201 	orreq.w	r2, r2, #1
 800c8ce:	3030      	adds	r0, #48	; 0x30
 800c8d0:	4573      	cmp	r3, lr
 800c8d2:	bf08      	it	eq
 800c8d4:	f042 0201 	orreq.w	r2, r2, #1
 800c8d8:	4283      	cmp	r3, r0
 800c8da:	bf08      	it	eq
 800c8dc:	f042 0201 	orreq.w	r2, r2, #1
 800c8e0:	b91a      	cbnz	r2, 800c8ea <HAL_DMA_IRQHandler+0xc2>
 800c8e2:	4a76      	ldr	r2, [pc, #472]	; (800cabc <HAL_DMA_IRQHandler+0x294>)
 800c8e4:	4293      	cmp	r3, r2
 800c8e6:	f040 820b 	bne.w	800cd00 <HAL_DMA_IRQHandler+0x4d8>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800c8ea:	f8da 105c 	ldr.w	r1, [sl, #92]	; 0x5c
 800c8ee:	2208      	movs	r2, #8
 800c8f0:	f001 0c1f 	and.w	ip, r1, #31
 800c8f4:	fa02 f20c 	lsl.w	r2, r2, ip
 800c8f8:	4217      	tst	r7, r2
 800c8fa:	f040 818d 	bne.w	800cc18 <HAL_DMA_IRQHandler+0x3f0>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800c8fe:	fa27 f20c 	lsr.w	r2, r7, ip
 800c902:	07d2      	lsls	r2, r2, #31
 800c904:	d50c      	bpl.n	800c920 <HAL_DMA_IRQHandler+0xf8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800c906:	695a      	ldr	r2, [r3, #20]
 800c908:	0610      	lsls	r0, r2, #24
 800c90a:	d509      	bpl.n	800c920 <HAL_DMA_IRQHandler+0xf8>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800c90c:	2201      	movs	r2, #1
 800c90e:	fa02 f20c 	lsl.w	r2, r2, ip
 800c912:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800c914:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
 800c918:	f042 0202 	orr.w	r2, r2, #2
 800c91c:	f8ca 2054 	str.w	r2, [sl, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800c920:	f04f 0e04 	mov.w	lr, #4
 800c924:	fa0e f00c 	lsl.w	r0, lr, ip
 800c928:	4238      	tst	r0, r7
 800c92a:	d05b      	beq.n	800c9e4 <HAL_DMA_IRQHandler+0x1bc>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800c92c:	2e00      	cmp	r6, #0
 800c92e:	d14f      	bne.n	800c9d0 <HAL_DMA_IRQHandler+0x1a8>
 800c930:	4a63      	ldr	r2, [pc, #396]	; (800cac0 <HAL_DMA_IRQHandler+0x298>)
 800c932:	f8df 9190 	ldr.w	r9, [pc, #400]	; 800cac4 <HAL_DMA_IRQHandler+0x29c>
 800c936:	f8df 8180 	ldr.w	r8, [pc, #384]	; 800cab8 <HAL_DMA_IRQHandler+0x290>
 800c93a:	454b      	cmp	r3, r9
 800c93c:	bf18      	it	ne
 800c93e:	4293      	cmpne	r3, r2
 800c940:	f109 0948 	add.w	r9, r9, #72	; 0x48
 800c944:	bf0c      	ite	eq
 800c946:	2201      	moveq	r2, #1
 800c948:	2200      	movne	r2, #0
 800c94a:	4543      	cmp	r3, r8
 800c94c:	bf08      	it	eq
 800c94e:	f042 0201 	orreq.w	r2, r2, #1
 800c952:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800c956:	454b      	cmp	r3, r9
 800c958:	bf08      	it	eq
 800c95a:	f042 0201 	orreq.w	r2, r2, #1
 800c95e:	f109 0930 	add.w	r9, r9, #48	; 0x30
 800c962:	4543      	cmp	r3, r8
 800c964:	bf08      	it	eq
 800c966:	f042 0201 	orreq.w	r2, r2, #1
 800c96a:	f508 785c 	add.w	r8, r8, #880	; 0x370
 800c96e:	454b      	cmp	r3, r9
 800c970:	bf08      	it	eq
 800c972:	f042 0201 	orreq.w	r2, r2, #1
 800c976:	f509 795c 	add.w	r9, r9, #880	; 0x370
 800c97a:	4543      	cmp	r3, r8
 800c97c:	bf08      	it	eq
 800c97e:	f042 0201 	orreq.w	r2, r2, #1
 800c982:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800c986:	454b      	cmp	r3, r9
 800c988:	bf08      	it	eq
 800c98a:	f042 0201 	orreq.w	r2, r2, #1
 800c98e:	f109 0930 	add.w	r9, r9, #48	; 0x30
 800c992:	4543      	cmp	r3, r8
 800c994:	bf08      	it	eq
 800c996:	f042 0201 	orreq.w	r2, r2, #1
 800c99a:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800c99e:	454b      	cmp	r3, r9
 800c9a0:	bf08      	it	eq
 800c9a2:	f042 0201 	orreq.w	r2, r2, #1
 800c9a6:	f109 0930 	add.w	r9, r9, #48	; 0x30
 800c9aa:	4543      	cmp	r3, r8
 800c9ac:	bf08      	it	eq
 800c9ae:	f042 0201 	orreq.w	r2, r2, #1
 800c9b2:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800c9b6:	454b      	cmp	r3, r9
 800c9b8:	bf08      	it	eq
 800c9ba:	f042 0201 	orreq.w	r2, r2, #1
 800c9be:	4543      	cmp	r3, r8
 800c9c0:	bf08      	it	eq
 800c9c2:	f042 0201 	orreq.w	r2, r2, #1
 800c9c6:	b91a      	cbnz	r2, 800c9d0 <HAL_DMA_IRQHandler+0x1a8>
 800c9c8:	4a3c      	ldr	r2, [pc, #240]	; (800cabc <HAL_DMA_IRQHandler+0x294>)
 800c9ca:	4293      	cmp	r3, r2
 800c9cc:	f040 822f 	bne.w	800ce2e <HAL_DMA_IRQHandler+0x606>
 800c9d0:	681a      	ldr	r2, [r3, #0]
 800c9d2:	0792      	lsls	r2, r2, #30
 800c9d4:	d506      	bpl.n	800c9e4 <HAL_DMA_IRQHandler+0x1bc>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800c9d6:	60a0      	str	r0, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800c9d8:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
 800c9dc:	f042 0204 	orr.w	r2, r2, #4
 800c9e0:	f8ca 2054 	str.w	r2, [sl, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800c9e4:	2210      	movs	r2, #16
 800c9e6:	fa02 fc0c 	lsl.w	ip, r2, ip
 800c9ea:	ea1c 0f07 	tst.w	ip, r7
 800c9ee:	d06f      	beq.n	800cad0 <HAL_DMA_IRQHandler+0x2a8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800c9f0:	2e00      	cmp	r6, #0
 800c9f2:	d146      	bne.n	800ca82 <HAL_DMA_IRQHandler+0x25a>
 800c9f4:	4a32      	ldr	r2, [pc, #200]	; (800cac0 <HAL_DMA_IRQHandler+0x298>)
 800c9f6:	4833      	ldr	r0, [pc, #204]	; (800cac4 <HAL_DMA_IRQHandler+0x29c>)
 800c9f8:	4e2f      	ldr	r6, [pc, #188]	; (800cab8 <HAL_DMA_IRQHandler+0x290>)
 800c9fa:	4283      	cmp	r3, r0
 800c9fc:	bf18      	it	ne
 800c9fe:	4293      	cmpne	r3, r2
 800ca00:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800ca04:	bf0c      	ite	eq
 800ca06:	2201      	moveq	r2, #1
 800ca08:	2200      	movne	r2, #0
 800ca0a:	42b3      	cmp	r3, r6
 800ca0c:	bf08      	it	eq
 800ca0e:	f042 0201 	orreq.w	r2, r2, #1
 800ca12:	3630      	adds	r6, #48	; 0x30
 800ca14:	4283      	cmp	r3, r0
 800ca16:	bf08      	it	eq
 800ca18:	f042 0201 	orreq.w	r2, r2, #1
 800ca1c:	3030      	adds	r0, #48	; 0x30
 800ca1e:	42b3      	cmp	r3, r6
 800ca20:	bf08      	it	eq
 800ca22:	f042 0201 	orreq.w	r2, r2, #1
 800ca26:	f506 765c 	add.w	r6, r6, #880	; 0x370
 800ca2a:	4283      	cmp	r3, r0
 800ca2c:	bf08      	it	eq
 800ca2e:	f042 0201 	orreq.w	r2, r2, #1
 800ca32:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800ca36:	42b3      	cmp	r3, r6
 800ca38:	bf08      	it	eq
 800ca3a:	f042 0201 	orreq.w	r2, r2, #1
 800ca3e:	3630      	adds	r6, #48	; 0x30
 800ca40:	4283      	cmp	r3, r0
 800ca42:	bf08      	it	eq
 800ca44:	f042 0201 	orreq.w	r2, r2, #1
 800ca48:	3030      	adds	r0, #48	; 0x30
 800ca4a:	42b3      	cmp	r3, r6
 800ca4c:	bf08      	it	eq
 800ca4e:	f042 0201 	orreq.w	r2, r2, #1
 800ca52:	3630      	adds	r6, #48	; 0x30
 800ca54:	4283      	cmp	r3, r0
 800ca56:	bf08      	it	eq
 800ca58:	f042 0201 	orreq.w	r2, r2, #1
 800ca5c:	3030      	adds	r0, #48	; 0x30
 800ca5e:	42b3      	cmp	r3, r6
 800ca60:	bf08      	it	eq
 800ca62:	f042 0201 	orreq.w	r2, r2, #1
 800ca66:	3630      	adds	r6, #48	; 0x30
 800ca68:	4283      	cmp	r3, r0
 800ca6a:	bf08      	it	eq
 800ca6c:	f042 0201 	orreq.w	r2, r2, #1
 800ca70:	42b3      	cmp	r3, r6
 800ca72:	bf08      	it	eq
 800ca74:	f042 0201 	orreq.w	r2, r2, #1
 800ca78:	b91a      	cbnz	r2, 800ca82 <HAL_DMA_IRQHandler+0x25a>
 800ca7a:	4a10      	ldr	r2, [pc, #64]	; (800cabc <HAL_DMA_IRQHandler+0x294>)
 800ca7c:	4293      	cmp	r3, r2
 800ca7e:	f040 81de 	bne.w	800ce3e <HAL_DMA_IRQHandler+0x616>
 800ca82:	681a      	ldr	r2, [r3, #0]
 800ca84:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 800ca88:	b312      	cbz	r2, 800cad0 <HAL_DMA_IRQHandler+0x2a8>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800ca8a:	f8c4 c008 	str.w	ip, [r4, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800ca8e:	681a      	ldr	r2, [r3, #0]
 800ca90:	0352      	lsls	r2, r2, #13
 800ca92:	f100 818b 	bmi.w	800cdac <HAL_DMA_IRQHandler+0x584>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800ca96:	681a      	ldr	r2, [r3, #0]
 800ca98:	05d6      	lsls	r6, r2, #23
 800ca9a:	d403      	bmi.n	800caa4 <HAL_DMA_IRQHandler+0x27c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800ca9c:	681a      	ldr	r2, [r3, #0]
 800ca9e:	f022 0208 	bic.w	r2, r2, #8
 800caa2:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 800caa4:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
 800caa8:	b193      	cbz	r3, 800cad0 <HAL_DMA_IRQHandler+0x2a8>
 800caaa:	e00d      	b.n	800cac8 <HAL_DMA_IRQHandler+0x2a0>
 800caac:	40020028 	.word	0x40020028
 800cab0:	40020010 	.word	0x40020010
 800cab4:	2000761c 	.word	0x2000761c
 800cab8:	40020070 	.word	0x40020070
 800cabc:	400204b8 	.word	0x400204b8
 800cac0:	40020058 	.word	0x40020058
 800cac4:	40020040 	.word	0x40020040
            hdma->XferHalfCpltCallback(hdma);
 800cac8:	4650      	mov	r0, sl
 800caca:	4798      	blx	r3
 800cacc:	f8da 105c 	ldr.w	r1, [sl, #92]	; 0x5c
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800cad0:	f001 011f 	and.w	r1, r1, #31
 800cad4:	2620      	movs	r6, #32
 800cad6:	408e      	lsls	r6, r1
 800cad8:	423e      	tst	r6, r7
 800cada:	d06a      	beq.n	800cbb2 <HAL_DMA_IRQHandler+0x38a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800cadc:	f8da 2000 	ldr.w	r2, [sl]
 800cae0:	4ba7      	ldr	r3, [pc, #668]	; (800cd80 <HAL_DMA_IRQHandler+0x558>)
 800cae2:	48a8      	ldr	r0, [pc, #672]	; (800cd84 <HAL_DMA_IRQHandler+0x55c>)
 800cae4:	4fa8      	ldr	r7, [pc, #672]	; (800cd88 <HAL_DMA_IRQHandler+0x560>)
 800cae6:	4282      	cmp	r2, r0
 800cae8:	bf18      	it	ne
 800caea:	429a      	cmpne	r2, r3
 800caec:	f100 0030 	add.w	r0, r0, #48	; 0x30
 800caf0:	bf0c      	ite	eq
 800caf2:	2301      	moveq	r3, #1
 800caf4:	2300      	movne	r3, #0
 800caf6:	42ba      	cmp	r2, r7
 800caf8:	bf08      	it	eq
 800cafa:	f043 0301 	orreq.w	r3, r3, #1
 800cafe:	3730      	adds	r7, #48	; 0x30
 800cb00:	4282      	cmp	r2, r0
 800cb02:	bf08      	it	eq
 800cb04:	f043 0301 	orreq.w	r3, r3, #1
 800cb08:	3030      	adds	r0, #48	; 0x30
 800cb0a:	42ba      	cmp	r2, r7
 800cb0c:	bf08      	it	eq
 800cb0e:	f043 0301 	orreq.w	r3, r3, #1
 800cb12:	3730      	adds	r7, #48	; 0x30
 800cb14:	4282      	cmp	r2, r0
 800cb16:	bf08      	it	eq
 800cb18:	f043 0301 	orreq.w	r3, r3, #1
 800cb1c:	3030      	adds	r0, #48	; 0x30
 800cb1e:	42ba      	cmp	r2, r7
 800cb20:	bf08      	it	eq
 800cb22:	f043 0301 	orreq.w	r3, r3, #1
 800cb26:	f507 775c 	add.w	r7, r7, #880	; 0x370
 800cb2a:	4282      	cmp	r2, r0
 800cb2c:	bf08      	it	eq
 800cb2e:	f043 0301 	orreq.w	r3, r3, #1
 800cb32:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800cb36:	42ba      	cmp	r2, r7
 800cb38:	bf08      	it	eq
 800cb3a:	f043 0301 	orreq.w	r3, r3, #1
 800cb3e:	3730      	adds	r7, #48	; 0x30
 800cb40:	4282      	cmp	r2, r0
 800cb42:	bf08      	it	eq
 800cb44:	f043 0301 	orreq.w	r3, r3, #1
 800cb48:	3030      	adds	r0, #48	; 0x30
 800cb4a:	42ba      	cmp	r2, r7
 800cb4c:	bf08      	it	eq
 800cb4e:	f043 0301 	orreq.w	r3, r3, #1
 800cb52:	3730      	adds	r7, #48	; 0x30
 800cb54:	4282      	cmp	r2, r0
 800cb56:	bf08      	it	eq
 800cb58:	f043 0301 	orreq.w	r3, r3, #1
 800cb5c:	3030      	adds	r0, #48	; 0x30
 800cb5e:	42ba      	cmp	r2, r7
 800cb60:	bf08      	it	eq
 800cb62:	f043 0301 	orreq.w	r3, r3, #1
 800cb66:	3730      	adds	r7, #48	; 0x30
 800cb68:	4282      	cmp	r2, r0
 800cb6a:	bf08      	it	eq
 800cb6c:	f043 0301 	orreq.w	r3, r3, #1
 800cb70:	42ba      	cmp	r2, r7
 800cb72:	bf08      	it	eq
 800cb74:	f043 0301 	orreq.w	r3, r3, #1
 800cb78:	b91b      	cbnz	r3, 800cb82 <HAL_DMA_IRQHandler+0x35a>
 800cb7a:	4b84      	ldr	r3, [pc, #528]	; (800cd8c <HAL_DMA_IRQHandler+0x564>)
 800cb7c:	429a      	cmp	r2, r3
 800cb7e:	f040 8173 	bne.w	800ce68 <HAL_DMA_IRQHandler+0x640>
 800cb82:	6813      	ldr	r3, [r2, #0]
 800cb84:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800cb88:	b19b      	cbz	r3, 800cbb2 <HAL_DMA_IRQHandler+0x38a>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800cb8a:	60a6      	str	r6, [r4, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 800cb8c:	f89a 3035 	ldrb.w	r3, [sl, #53]	; 0x35
 800cb90:	2b04      	cmp	r3, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800cb92:	6813      	ldr	r3, [r2, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 800cb94:	f000 8114 	beq.w	800cdc0 <HAL_DMA_IRQHandler+0x598>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800cb98:	f413 2f80 	tst.w	r3, #262144	; 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800cb9c:	6813      	ldr	r3, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800cb9e:	f000 812d 	beq.w	800cdfc <HAL_DMA_IRQHandler+0x5d4>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800cba2:	031c      	lsls	r4, r3, #12
 800cba4:	f140 8138 	bpl.w	800ce18 <HAL_DMA_IRQHandler+0x5f0>
          if(hdma->XferCpltCallback != NULL)
 800cba8:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
 800cbac:	b10b      	cbz	r3, 800cbb2 <HAL_DMA_IRQHandler+0x38a>
            hdma->XferCpltCallback(hdma);
 800cbae:	4650      	mov	r0, sl
 800cbb0:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800cbb2:	f8da 3054 	ldr.w	r3, [sl, #84]	; 0x54
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	f000 80df 	beq.w	800cd7a <HAL_DMA_IRQHandler+0x552>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800cbbc:	f8da 3054 	ldr.w	r3, [sl, #84]	; 0x54
 800cbc0:	07d8      	lsls	r0, r3, #31
 800cbc2:	d51f      	bpl.n	800cc04 <HAL_DMA_IRQHandler+0x3dc>
        __HAL_DMA_DISABLE(hdma);
 800cbc4:	f8da 2000 	ldr.w	r2, [sl]
        hdma->State = HAL_DMA_STATE_ABORT;
 800cbc8:	2404      	movs	r4, #4
 800cbca:	f88a 4035 	strb.w	r4, [sl, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 800cbce:	6813      	ldr	r3, [r2, #0]
 800cbd0:	f023 0301 	bic.w	r3, r3, #1
 800cbd4:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800cbd6:	4b6e      	ldr	r3, [pc, #440]	; (800cd90 <HAL_DMA_IRQHandler+0x568>)
 800cbd8:	fba3 3505 	umull	r3, r5, r3, r5
 800cbdc:	0aad      	lsrs	r5, r5, #10
 800cbde:	e002      	b.n	800cbe6 <HAL_DMA_IRQHandler+0x3be>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800cbe0:	6813      	ldr	r3, [r2, #0]
 800cbe2:	07d9      	lsls	r1, r3, #31
 800cbe4:	d504      	bpl.n	800cbf0 <HAL_DMA_IRQHandler+0x3c8>
          if (++count > timeout)
 800cbe6:	9b01      	ldr	r3, [sp, #4]
 800cbe8:	3301      	adds	r3, #1
 800cbea:	42ab      	cmp	r3, r5
 800cbec:	9301      	str	r3, [sp, #4]
 800cbee:	d9f7      	bls.n	800cbe0 <HAL_DMA_IRQHandler+0x3b8>
        __HAL_UNLOCK(hdma);
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	f88a 3034 	strb.w	r3, [sl, #52]	; 0x34
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800cbf6:	6813      	ldr	r3, [r2, #0]
 800cbf8:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 800cbfa:	bf4c      	ite	mi
 800cbfc:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 800cbfe:	2301      	movpl	r3, #1
 800cc00:	f88a 3035 	strb.w	r3, [sl, #53]	; 0x35
      if(hdma->XferErrorCallback != NULL)
 800cc04:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	f000 80b6 	beq.w	800cd7a <HAL_DMA_IRQHandler+0x552>
        hdma->XferErrorCallback(hdma);
 800cc0e:	4650      	mov	r0, sl
}
 800cc10:	b002      	add	sp, #8
 800cc12:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        hdma->XferErrorCallback(hdma);
 800cc16:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800cc18:	6818      	ldr	r0, [r3, #0]
 800cc1a:	0740      	lsls	r0, r0, #29
 800cc1c:	d50a      	bpl.n	800cc34 <HAL_DMA_IRQHandler+0x40c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800cc1e:	6818      	ldr	r0, [r3, #0]
 800cc20:	f020 0004 	bic.w	r0, r0, #4
 800cc24:	6018      	str	r0, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800cc26:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800cc28:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
 800cc2c:	f042 0201 	orr.w	r2, r2, #1
 800cc30:	f8ca 2054 	str.w	r2, [sl, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800cc34:	fa27 f20c 	lsr.w	r2, r7, ip
 800cc38:	07d2      	lsls	r2, r2, #31
 800cc3a:	f57f ae71 	bpl.w	800c920 <HAL_DMA_IRQHandler+0xf8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800cc3e:	4a55      	ldr	r2, [pc, #340]	; (800cd94 <HAL_DMA_IRQHandler+0x56c>)
 800cc40:	4851      	ldr	r0, [pc, #324]	; (800cd88 <HAL_DMA_IRQHandler+0x560>)
 800cc42:	f8df 8164 	ldr.w	r8, [pc, #356]	; 800cda8 <HAL_DMA_IRQHandler+0x580>
 800cc46:	4283      	cmp	r3, r0
 800cc48:	bf18      	it	ne
 800cc4a:	4293      	cmpne	r3, r2
 800cc4c:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800cc50:	bf0c      	ite	eq
 800cc52:	2201      	moveq	r2, #1
 800cc54:	2200      	movne	r2, #0
 800cc56:	4543      	cmp	r3, r8
 800cc58:	bf08      	it	eq
 800cc5a:	f042 0201 	orreq.w	r2, r2, #1
 800cc5e:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800cc62:	4283      	cmp	r3, r0
 800cc64:	bf08      	it	eq
 800cc66:	f042 0201 	orreq.w	r2, r2, #1
 800cc6a:	3030      	adds	r0, #48	; 0x30
 800cc6c:	4543      	cmp	r3, r8
 800cc6e:	bf08      	it	eq
 800cc70:	f042 0201 	orreq.w	r2, r2, #1
 800cc74:	f508 785c 	add.w	r8, r8, #880	; 0x370
 800cc78:	4283      	cmp	r3, r0
 800cc7a:	bf08      	it	eq
 800cc7c:	f042 0201 	orreq.w	r2, r2, #1
 800cc80:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800cc84:	4543      	cmp	r3, r8
 800cc86:	bf08      	it	eq
 800cc88:	f042 0201 	orreq.w	r2, r2, #1
 800cc8c:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800cc90:	4283      	cmp	r3, r0
 800cc92:	bf08      	it	eq
 800cc94:	f042 0201 	orreq.w	r2, r2, #1
 800cc98:	3030      	adds	r0, #48	; 0x30
 800cc9a:	4543      	cmp	r3, r8
 800cc9c:	bf08      	it	eq
 800cc9e:	f042 0201 	orreq.w	r2, r2, #1
 800cca2:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800cca6:	4283      	cmp	r3, r0
 800cca8:	bf08      	it	eq
 800ccaa:	f042 0201 	orreq.w	r2, r2, #1
 800ccae:	3030      	adds	r0, #48	; 0x30
 800ccb0:	4543      	cmp	r3, r8
 800ccb2:	bf08      	it	eq
 800ccb4:	f042 0201 	orreq.w	r2, r2, #1
 800ccb8:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800ccbc:	4283      	cmp	r3, r0
 800ccbe:	bf08      	it	eq
 800ccc0:	f042 0201 	orreq.w	r2, r2, #1
 800ccc4:	3030      	adds	r0, #48	; 0x30
 800ccc6:	4543      	cmp	r3, r8
 800ccc8:	bf08      	it	eq
 800ccca:	f042 0201 	orreq.w	r2, r2, #1
 800ccce:	4283      	cmp	r3, r0
 800ccd0:	bf08      	it	eq
 800ccd2:	f042 0201 	orreq.w	r2, r2, #1
 800ccd6:	2a00      	cmp	r2, #0
 800ccd8:	f47f ae15 	bne.w	800c906 <HAL_DMA_IRQHandler+0xde>
 800ccdc:	2e00      	cmp	r6, #0
 800ccde:	f47f ae12 	bne.w	800c906 <HAL_DMA_IRQHandler+0xde>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800cce2:	2204      	movs	r2, #4
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800cce4:	681e      	ldr	r6, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800cce6:	fa02 f20c 	lsl.w	r2, r2, ip
 800ccea:	423a      	tst	r2, r7
 800ccec:	f040 809f 	bne.w	800ce2e <HAL_DMA_IRQHandler+0x606>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800ccf0:	2210      	movs	r2, #16
 800ccf2:	fa02 fc0c 	lsl.w	ip, r2, ip
 800ccf6:	ea17 0f0c 	tst.w	r7, ip
 800ccfa:	f43f aee9 	beq.w	800cad0 <HAL_DMA_IRQHandler+0x2a8>
 800ccfe:	e679      	b.n	800c9f4 <HAL_DMA_IRQHandler+0x1cc>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800cd00:	4a25      	ldr	r2, [pc, #148]	; (800cd98 <HAL_DMA_IRQHandler+0x570>)
 800cd02:	4e26      	ldr	r6, [pc, #152]	; (800cd9c <HAL_DMA_IRQHandler+0x574>)
 800cd04:	4d26      	ldr	r5, [pc, #152]	; (800cda0 <HAL_DMA_IRQHandler+0x578>)
 800cd06:	42b3      	cmp	r3, r6
 800cd08:	bf18      	it	ne
 800cd0a:	4293      	cmpne	r3, r2
 800cd0c:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800cd10:	bf0c      	ite	eq
 800cd12:	2201      	moveq	r2, #1
 800cd14:	2200      	movne	r2, #0
 800cd16:	42ab      	cmp	r3, r5
 800cd18:	bf08      	it	eq
 800cd1a:	f042 0201 	orreq.w	r2, r2, #1
 800cd1e:	3528      	adds	r5, #40	; 0x28
 800cd20:	42b3      	cmp	r3, r6
 800cd22:	bf08      	it	eq
 800cd24:	f042 0201 	orreq.w	r2, r2, #1
 800cd28:	3628      	adds	r6, #40	; 0x28
 800cd2a:	42ab      	cmp	r3, r5
 800cd2c:	bf08      	it	eq
 800cd2e:	f042 0201 	orreq.w	r2, r2, #1
 800cd32:	3528      	adds	r5, #40	; 0x28
 800cd34:	42b3      	cmp	r3, r6
 800cd36:	bf08      	it	eq
 800cd38:	f042 0201 	orreq.w	r2, r2, #1
 800cd3c:	42ab      	cmp	r3, r5
 800cd3e:	bf08      	it	eq
 800cd40:	f042 0201 	orreq.w	r2, r2, #1
 800cd44:	b912      	cbnz	r2, 800cd4c <HAL_DMA_IRQHandler+0x524>
 800cd46:	4a17      	ldr	r2, [pc, #92]	; (800cda4 <HAL_DMA_IRQHandler+0x57c>)
 800cd48:	4293      	cmp	r3, r2
 800cd4a:	d116      	bne.n	800cd7a <HAL_DMA_IRQHandler+0x552>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800cd4c:	f8da 505c 	ldr.w	r5, [sl, #92]	; 0x5c
 800cd50:	2604      	movs	r6, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800cd52:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800cd54:	f005 051f 	and.w	r5, r5, #31
 800cd58:	40ae      	lsls	r6, r5
 800cd5a:	420e      	tst	r6, r1
 800cd5c:	d073      	beq.n	800ce46 <HAL_DMA_IRQHandler+0x61e>
 800cd5e:	0757      	lsls	r7, r2, #29
 800cd60:	d571      	bpl.n	800ce46 <HAL_DMA_IRQHandler+0x61e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800cd62:	0410      	lsls	r0, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800cd64:	6066      	str	r6, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800cd66:	f140 809f 	bpl.w	800cea8 <HAL_DMA_IRQHandler+0x680>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800cd6a:	03d1      	lsls	r1, r2, #15
 800cd6c:	f100 80a2 	bmi.w	800ceb4 <HAL_DMA_IRQHandler+0x68c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800cd70:	f8da 3048 	ldr.w	r3, [sl, #72]	; 0x48
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	f47f af4a 	bne.w	800cc0e <HAL_DMA_IRQHandler+0x3e6>
}
 800cd7a:	b002      	add	sp, #8
 800cd7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd80:	40020010 	.word	0x40020010
 800cd84:	40020028 	.word	0x40020028
 800cd88:	40020040 	.word	0x40020040
 800cd8c:	400204b8 	.word	0x400204b8
 800cd90:	1b4e81b5 	.word	0x1b4e81b5
 800cd94:	40020058 	.word	0x40020058
 800cd98:	58025408 	.word	0x58025408
 800cd9c:	5802541c 	.word	0x5802541c
 800cda0:	58025430 	.word	0x58025430
 800cda4:	58025494 	.word	0x58025494
 800cda8:	40020070 	.word	0x40020070
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	031b      	lsls	r3, r3, #12
 800cdb0:	f57f ae78 	bpl.w	800caa4 <HAL_DMA_IRQHandler+0x27c>
            if(hdma->XferM1HalfCpltCallback != NULL)
 800cdb4:	f8da 3048 	ldr.w	r3, [sl, #72]	; 0x48
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	f47f ae85 	bne.w	800cac8 <HAL_DMA_IRQHandler+0x2a0>
 800cdbe:	e687      	b.n	800cad0 <HAL_DMA_IRQHandler+0x2a8>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800cdc0:	f023 0316 	bic.w	r3, r3, #22
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800cdc4:	f8da 5040 	ldr.w	r5, [sl, #64]	; 0x40
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800cdc8:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800cdca:	6953      	ldr	r3, [r2, #20]
 800cdcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cdd0:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800cdd2:	b33d      	cbz	r5, 800ce24 <HAL_DMA_IRQHandler+0x5fc>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800cdd4:	6813      	ldr	r3, [r2, #0]
 800cdd6:	f023 0308 	bic.w	r3, r3, #8
 800cdda:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800cddc:	233f      	movs	r3, #63	; 0x3f
          __HAL_UNLOCK(hdma);
 800cdde:	2500      	movs	r5, #0
          hdma->State = HAL_DMA_STATE_READY;
 800cde0:	2201      	movs	r2, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800cde2:	fa03 f101 	lsl.w	r1, r3, r1
          if(hdma->XferAbortCallback != NULL)
 800cde6:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800cdea:	60a1      	str	r1, [r4, #8]
          __HAL_UNLOCK(hdma);
 800cdec:	f88a 5034 	strb.w	r5, [sl, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800cdf0:	f88a 2035 	strb.w	r2, [sl, #53]	; 0x35
          if(hdma->XferAbortCallback != NULL)
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	f47f af0a 	bne.w	800cc0e <HAL_DMA_IRQHandler+0x3e6>
 800cdfa:	e7be      	b.n	800cd7a <HAL_DMA_IRQHandler+0x552>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800cdfc:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 800ce00:	f47f aed2 	bne.w	800cba8 <HAL_DMA_IRQHandler+0x380>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800ce04:	6811      	ldr	r1, [r2, #0]
            hdma->State = HAL_DMA_STATE_READY;
 800ce06:	2401      	movs	r4, #1
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800ce08:	f021 0110 	bic.w	r1, r1, #16
 800ce0c:	6011      	str	r1, [r2, #0]
            __HAL_UNLOCK(hdma);
 800ce0e:	f88a 3034 	strb.w	r3, [sl, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 800ce12:	f88a 4035 	strb.w	r4, [sl, #53]	; 0x35
 800ce16:	e6c7      	b.n	800cba8 <HAL_DMA_IRQHandler+0x380>
            if(hdma->XferM1CpltCallback != NULL)
 800ce18:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	f47f aec6 	bne.w	800cbae <HAL_DMA_IRQHandler+0x386>
 800ce22:	e6c6      	b.n	800cbb2 <HAL_DMA_IRQHandler+0x38a>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ce24:	f8da 3048 	ldr.w	r3, [sl, #72]	; 0x48
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d1d3      	bne.n	800cdd4 <HAL_DMA_IRQHandler+0x5ac>
 800ce2c:	e7d6      	b.n	800cddc <HAL_DMA_IRQHandler+0x5b4>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800ce2e:	2210      	movs	r2, #16
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800ce30:	681e      	ldr	r6, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800ce32:	fa02 fc0c 	lsl.w	ip, r2, ip
 800ce36:	ea17 0f0c 	tst.w	r7, ip
 800ce3a:	f43f ae49 	beq.w	800cad0 <HAL_DMA_IRQHandler+0x2a8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800ce3e:	681a      	ldr	r2, [r3, #0]
 800ce40:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800ce44:	e620      	b.n	800ca88 <HAL_DMA_IRQHandler+0x260>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800ce46:	2602      	movs	r6, #2
 800ce48:	40ae      	lsls	r6, r5
 800ce4a:	420e      	tst	r6, r1
 800ce4c:	d010      	beq.n	800ce70 <HAL_DMA_IRQHandler+0x648>
 800ce4e:	0797      	lsls	r7, r2, #30
 800ce50:	d50e      	bpl.n	800ce70 <HAL_DMA_IRQHandler+0x648>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800ce52:	6066      	str	r6, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ce54:	0414      	lsls	r4, r2, #16
 800ce56:	d533      	bpl.n	800cec0 <HAL_DMA_IRQHandler+0x698>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800ce58:	03d0      	lsls	r0, r2, #15
 800ce5a:	d43d      	bmi.n	800ced8 <HAL_DMA_IRQHandler+0x6b0>
          if(hdma->XferM1CpltCallback != NULL)
 800ce5c:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	f47f aed4 	bne.w	800cc0e <HAL_DMA_IRQHandler+0x3e6>
 800ce66:	e788      	b.n	800cd7a <HAL_DMA_IRQHandler+0x552>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800ce68:	6813      	ldr	r3, [r2, #0]
 800ce6a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800ce6e:	e68b      	b.n	800cb88 <HAL_DMA_IRQHandler+0x360>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800ce70:	2608      	movs	r6, #8
 800ce72:	40ae      	lsls	r6, r5
 800ce74:	420e      	tst	r6, r1
 800ce76:	d080      	beq.n	800cd7a <HAL_DMA_IRQHandler+0x552>
 800ce78:	0711      	lsls	r1, r2, #28
 800ce7a:	f57f af7e 	bpl.w	800cd7a <HAL_DMA_IRQHandler+0x552>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ce7e:	6819      	ldr	r1, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800ce80:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 800ce82:	2600      	movs	r6, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ce84:	f021 010e 	bic.w	r1, r1, #14
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800ce88:	fa02 f505 	lsl.w	r5, r2, r5
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ce8c:	6019      	str	r1, [r3, #0]
      if (hdma->XferErrorCallback != NULL)
 800ce8e:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800ce92:	6065      	str	r5, [r4, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800ce94:	f8ca 2054 	str.w	r2, [sl, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 800ce98:	f88a 6034 	strb.w	r6, [sl, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800ce9c:	f88a 2035 	strb.w	r2, [sl, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	f47f aeb4 	bne.w	800cc0e <HAL_DMA_IRQHandler+0x3e6>
 800cea6:	e768      	b.n	800cd7a <HAL_DMA_IRQHandler+0x552>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800cea8:	0692      	lsls	r2, r2, #26
 800ceaa:	d403      	bmi.n	800ceb4 <HAL_DMA_IRQHandler+0x68c>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800ceac:	681a      	ldr	r2, [r3, #0]
 800ceae:	f022 0204 	bic.w	r2, r2, #4
 800ceb2:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 800ceb4:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	f47f aea8 	bne.w	800cc0e <HAL_DMA_IRQHandler+0x3e6>
 800cebe:	e75c      	b.n	800cd7a <HAL_DMA_IRQHandler+0x552>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800cec0:	f012 0220 	ands.w	r2, r2, #32
 800cec4:	d108      	bne.n	800ced8 <HAL_DMA_IRQHandler+0x6b0>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800cec6:	6819      	ldr	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800cec8:	2401      	movs	r4, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800ceca:	f021 010a 	bic.w	r1, r1, #10
 800cece:	6019      	str	r1, [r3, #0]
          __HAL_UNLOCK(hdma);
 800ced0:	f88a 2034 	strb.w	r2, [sl, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800ced4:	f88a 4035 	strb.w	r4, [sl, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 800ced8:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
 800cedc:	2b00      	cmp	r3, #0
 800cede:	f47f ae96 	bne.w	800cc0e <HAL_DMA_IRQHandler+0x3e6>
 800cee2:	e74a      	b.n	800cd7a <HAL_DMA_IRQHandler+0x552>

0800cee4 <HAL_DMA2D_MspInit>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 800cee4:	4770      	bx	lr
 800cee6:	bf00      	nop

0800cee8 <HAL_DMA2D_Init>:
  if(hdma2d == NULL)
 800cee8:	2800      	cmp	r0, #0
 800ceea:	d036      	beq.n	800cf5a <HAL_DMA2D_Init+0x72>
{
 800ceec:	b570      	push	{r4, r5, r6, lr}
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800ceee:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 800cef2:	4604      	mov	r4, r0
 800cef4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800cef8:	b353      	cbz	r3, 800cf50 <HAL_DMA2D_Init+0x68>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800cefa:	6823      	ldr	r3, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800cefc:	2202      	movs	r2, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800cefe:	69e0      	ldr	r0, [r4, #28]
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800cf00:	2500      	movs	r5, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800cf02:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800cf06:	4916      	ldr	r1, [pc, #88]	; (800cf60 <HAL_DMA2D_Init+0x78>)
 800cf08:	681e      	ldr	r6, [r3, #0]
 800cf0a:	6862      	ldr	r2, [r4, #4]
 800cf0c:	4031      	ands	r1, r6
 800cf0e:	4302      	orrs	r2, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 800cf10:	4814      	ldr	r0, [pc, #80]	; (800cf64 <HAL_DMA2D_Init+0x7c>)
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800cf12:	4311      	orrs	r1, r2
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 800cf14:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800cf16:	6019      	str	r1, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 800cf18:	69a1      	ldr	r1, [r4, #24]
 800cf1a:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800cf1c:	430a      	orrs	r2, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800cf1e:	4912      	ldr	r1, [pc, #72]	; (800cf68 <HAL_DMA2D_Init+0x80>)
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 800cf20:	4030      	ands	r0, r6
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800cf22:	2601      	movs	r6, #1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 800cf24:	4302      	orrs	r2, r0
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800cf26:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 800cf28:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800cf2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cf2c:	4011      	ands	r1, r2
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 800cf2e:	6962      	ldr	r2, [r4, #20]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800cf30:	4301      	orrs	r1, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 800cf32:	0552      	lsls	r2, r2, #21
 800cf34:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800cf36:	6419      	str	r1, [r3, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 800cf38:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800cf3a:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
  return HAL_OK;
 800cf3e:	4628      	mov	r0, r5
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 800cf40:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 800cf44:	430a      	orrs	r2, r1
 800cf46:	635a      	str	r2, [r3, #52]	; 0x34
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800cf48:	6665      	str	r5, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800cf4a:	f884 6061 	strb.w	r6, [r4, #97]	; 0x61
}
 800cf4e:	bd70      	pop	{r4, r5, r6, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 800cf50:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    HAL_DMA2D_MspInit(hdma2d);
 800cf54:	f7ff ffc6 	bl	800cee4 <HAL_DMA2D_MspInit>
 800cf58:	e7cf      	b.n	800cefa <HAL_DMA2D_Init+0x12>
     return HAL_ERROR;
 800cf5a:	2001      	movs	r0, #1
}
 800cf5c:	4770      	bx	lr
 800cf5e:	bf00      	nop
 800cf60:	fff8ffbf 	.word	0xfff8ffbf
 800cf64:	fffffef8 	.word	0xfffffef8
 800cf68:	ffff0000 	.word	0xffff0000

0800cf6c <HAL_DMA2D_MspDeInit>:
 800cf6c:	4770      	bx	lr
 800cf6e:	bf00      	nop

0800cf70 <HAL_DMA2D_DeInit>:
  if(hdma2d == NULL)
 800cf70:	2800      	cmp	r0, #0
 800cf72:	d06b      	beq.n	800d04c <HAL_DMA2D_DeInit+0xdc>
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 800cf74:	4b40      	ldr	r3, [pc, #256]	; (800d078 <HAL_DMA2D_DeInit+0x108>)
 800cf76:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
{
 800cf7a:	b570      	push	{r4, r5, r6, lr}
 800cf7c:	4605      	mov	r5, r0
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 800cf7e:	6804      	ldr	r4, [r0, #0]
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 800cf80:	06d8      	lsls	r0, r3, #27
 800cf82:	d508      	bpl.n	800cf96 <HAL_DMA2D_DeInit+0x26>
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 800cf84:	6823      	ldr	r3, [r4, #0]
 800cf86:	07d9      	lsls	r1, r3, #31
 800cf88:	d418      	bmi.n	800cfbc <HAL_DMA2D_DeInit+0x4c>
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 800cf8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf8c:	069a      	lsls	r2, r3, #26
 800cf8e:	d45f      	bmi.n	800d050 <HAL_DMA2D_DeInit+0xe0>
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 800cf90:	69e3      	ldr	r3, [r4, #28]
 800cf92:	069b      	lsls	r3, r3, #26
 800cf94:	d431      	bmi.n	800cffa <HAL_DMA2D_DeInit+0x8a>
  hdma2d->Instance->CR       =    0U;
 800cf96:	2600      	movs	r6, #0
  hdma2d->Instance->IFCR     = 0x3FU;
 800cf98:	233f      	movs	r3, #63	; 0x3f
  HAL_DMA2D_MspDeInit(hdma2d);
 800cf9a:	4628      	mov	r0, r5
  hdma2d->Instance->CR       =    0U;
 800cf9c:	6026      	str	r6, [r4, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 800cf9e:	60a3      	str	r3, [r4, #8]
  hdma2d->Instance->FGOR     =    0U;
 800cfa0:	6126      	str	r6, [r4, #16]
  hdma2d->Instance->BGOR     =    0U;
 800cfa2:	61a6      	str	r6, [r4, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 800cfa4:	61e6      	str	r6, [r4, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 800cfa6:	6266      	str	r6, [r4, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 800cfa8:	6366      	str	r6, [r4, #52]	; 0x34
  HAL_DMA2D_MspDeInit(hdma2d);
 800cfaa:	f7ff ffdf 	bl	800cf6c <HAL_DMA2D_MspDeInit>
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800cfae:	666e      	str	r6, [r5, #100]	; 0x64
  return HAL_OK;
 800cfb0:	4630      	mov	r0, r6
  __HAL_UNLOCK(hdma2d);
 800cfb2:	f885 6060 	strb.w	r6, [r5, #96]	; 0x60
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 800cfb6:	f885 6061 	strb.w	r6, [r5, #97]	; 0x61
}
 800cfba:	bd70      	pop	{r4, r5, r6, pc}

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 800cfbc:	6823      	ldr	r3, [r4, #0]
 800cfbe:	f023 0305 	bic.w	r3, r3, #5
 800cfc2:	f043 0304 	orr.w	r3, r3, #4
 800cfc6:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800cfc8:	f7fe f910 	bl	800b1ec <HAL_GetTick>
 800cfcc:	4606      	mov	r6, r0

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800cfce:	e005      	b.n	800cfdc <HAL_DMA2D_DeInit+0x6c>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 800cfd0:	f7fe f90c 	bl	800b1ec <HAL_GetTick>
 800cfd4:	1b83      	subs	r3, r0, r6
 800cfd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cfda:	d82b      	bhi.n	800d034 <HAL_DMA2D_DeInit+0xc4>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800cfdc:	682c      	ldr	r4, [r5, #0]
 800cfde:	6823      	ldr	r3, [r4, #0]
 800cfe0:	f013 0301 	ands.w	r3, r3, #1
 800cfe4:	d1f4      	bne.n	800cfd0 <HAL_DMA2D_DeInit+0x60>
      return HAL_TIMEOUT;
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 800cfe6:	6822      	ldr	r2, [r4, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800cfe8:	2101      	movs	r1, #1
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 800cfea:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 800cfee:	6022      	str	r2, [r4, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 800cff0:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800cff4:	f885 1061 	strb.w	r1, [r5, #97]	; 0x61

  return HAL_OK;
 800cff8:	e7cd      	b.n	800cf96 <HAL_DMA2D_DeInit+0x26>
{
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 800cffa:	6823      	ldr	r3, [r4, #0]
 800cffc:	f043 0304 	orr.w	r3, r3, #4
 800d000:	6023      	str	r3, [r4, #0]
    reg  = &(hdma2d->Instance->FGPFCCR);
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 800d002:	f7fe f8f3 	bl	800b1ec <HAL_GetTick>
 800d006:	4606      	mov	r6, r0

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 800d008:	e005      	b.n	800d016 <HAL_DMA2D_DeInit+0xa6>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 800d00a:	f7fe f8ef 	bl	800b1ec <HAL_GetTick>
 800d00e:	1b80      	subs	r0, r0, r6
 800d010:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800d014:	d80e      	bhi.n	800d034 <HAL_DMA2D_DeInit+0xc4>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 800d016:	69e3      	ldr	r3, [r4, #28]
 800d018:	f013 0320 	ands.w	r3, r3, #32
 800d01c:	d1f5      	bne.n	800d00a <HAL_DMA2D_DeInit+0x9a>
      return HAL_TIMEOUT;
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 800d01e:	682c      	ldr	r4, [r5, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800d020:	2101      	movs	r1, #1
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 800d022:	6822      	ldr	r2, [r4, #0]
 800d024:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 800d028:	6022      	str	r2, [r4, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 800d02a:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800d02e:	f885 1061 	strb.w	r1, [r5, #97]	; 0x61

  return HAL_OK;
 800d032:	e7b0      	b.n	800cf96 <HAL_DMA2D_DeInit+0x26>
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800d034:	6e6b      	ldr	r3, [r5, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800d036:	2203      	movs	r2, #3
      __HAL_UNLOCK(hdma2d);
 800d038:	2100      	movs	r1, #0
            return HAL_ERROR;
 800d03a:	2001      	movs	r0, #1
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800d03c:	f043 0320 	orr.w	r3, r3, #32
      __HAL_UNLOCK(hdma2d);
 800d040:	f885 1060 	strb.w	r1, [r5, #96]	; 0x60
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800d044:	666b      	str	r3, [r5, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800d046:	f885 2061 	strb.w	r2, [r5, #97]	; 0x61
}
 800d04a:	bd70      	pop	{r4, r5, r6, pc}
     return HAL_ERROR;
 800d04c:	2001      	movs	r0, #1
}
 800d04e:	4770      	bx	lr
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 800d050:	6823      	ldr	r3, [r4, #0]
 800d052:	f043 0304 	orr.w	r3, r3, #4
 800d056:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800d058:	f7fe f8c8 	bl	800b1ec <HAL_GetTick>
 800d05c:	4606      	mov	r6, r0
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 800d05e:	e005      	b.n	800d06c <HAL_DMA2D_DeInit+0xfc>
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 800d060:	f7fe f8c4 	bl	800b1ec <HAL_GetTick>
 800d064:	1b80      	subs	r0, r0, r6
 800d066:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800d06a:	d8e3      	bhi.n	800d034 <HAL_DMA2D_DeInit+0xc4>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 800d06c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d06e:	f013 0320 	ands.w	r3, r3, #32
 800d072:	d1f5      	bne.n	800d060 <HAL_DMA2D_DeInit+0xf0>
 800d074:	e7d3      	b.n	800d01e <HAL_DMA2D_DeInit+0xae>
 800d076:	bf00      	nop
 800d078:	58024400 	.word	0x58024400

0800d07c <HAL_DMA2D_Start>:
{
 800d07c:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma2d);
 800d07e:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
 800d082:	2c01      	cmp	r4, #1
 800d084:	d03a      	beq.n	800d0fc <HAL_DMA2D_Start+0x80>
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800d086:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(hdma2d);
 800d088:	2601      	movs	r6, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800d08a:	2502      	movs	r5, #2
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800d08c:	9f04      	ldr	r7, [sp, #16]
  __HAL_LOCK(hdma2d);
 800d08e:	f880 6060 	strb.w	r6, [r0, #96]	; 0x60
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800d092:	f880 5061 	strb.w	r5, [r0, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800d096:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800d09a:	6c65      	ldr	r5, [r4, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800d09c:	6846      	ldr	r6, [r0, #4]
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800d09e:	f005 4540 	and.w	r5, r5, #3221225472	; 0xc0000000
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800d0a2:	f5b6 3f40 	cmp.w	r6, #196608	; 0x30000
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800d0a6:	ea43 0305 	orr.w	r3, r3, r5
 800d0aa:	6463      	str	r3, [r4, #68]	; 0x44
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800d0ac:	63e2      	str	r2, [r4, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800d0ae:	d00a      	beq.n	800d0c6 <HAL_DMA2D_Start+0x4a>
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else if(hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 800d0b0:	f5b6 2f80 	cmp.w	r6, #262144	; 0x40000
 800d0b4:	d025      	beq.n	800d102 <HAL_DMA2D_Start+0x86>
    WRITE_REG(hdma2d->Instance->BGMAR , pdata);
  }
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800d0b6:	60e1      	str	r1, [r4, #12]
  __HAL_DMA2D_ENABLE(hdma2d);
 800d0b8:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 800d0ba:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 800d0bc:	f043 0301 	orr.w	r3, r3, #1
 800d0c0:	6023      	str	r3, [r4, #0]
}
 800d0c2:	bcf0      	pop	{r4, r5, r6, r7}
 800d0c4:	4770      	bx	lr
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800d0c6:	6883      	ldr	r3, [r0, #8]
 800d0c8:	b1b3      	cbz	r3, 800d0f8 <HAL_DMA2D_Start+0x7c>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800d0ca:	2b01      	cmp	r3, #1
 800d0cc:	d026      	beq.n	800d11c <HAL_DMA2D_Start+0xa0>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800d0ce:	2b02      	cmp	r3, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800d0d0:	f401 027f 	and.w	r2, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800d0d4:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800d0d8:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800d0da:	d022      	beq.n	800d122 <HAL_DMA2D_Start+0xa6>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800d0dc:	2b03      	cmp	r3, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800d0de:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800d0e2:	d010      	beq.n	800d106 <HAL_DMA2D_Start+0x8a>
      tmp2 = (tmp2 >> 20U);
 800d0e4:	0d13      	lsrs	r3, r2, #20
      tmp3 = (tmp3 >> 12U);
 800d0e6:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800d0e8:	021b      	lsls	r3, r3, #8
      tmp1 = (tmp1 >> 28U);
 800d0ea:	0f09      	lsrs	r1, r1, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800d0ec:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 800d0f0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800d0f4:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800d0f8:	63a1      	str	r1, [r4, #56]	; 0x38
 800d0fa:	e7dd      	b.n	800d0b8 <HAL_DMA2D_Start+0x3c>
  __HAL_LOCK(hdma2d);
 800d0fc:	2002      	movs	r0, #2
}
 800d0fe:	bcf0      	pop	{r4, r5, r6, r7}
 800d100:	4770      	bx	lr
    WRITE_REG(hdma2d->Instance->BGMAR , pdata);
 800d102:	6161      	str	r1, [r4, #20]
 800d104:	e7d8      	b.n	800d0b8 <HAL_DMA2D_Start+0x3c>
      tmp2 = (tmp2 >> 19U);
 800d106:	0cd2      	lsrs	r2, r2, #19
      tmp3 = (tmp3 >> 11U);
 800d108:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800d10a:	0293      	lsls	r3, r2, #10
      tmp1 = (tmp1 >> 31U);
 800d10c:	0fc9      	lsrs	r1, r1, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800d10e:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 800d112:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 800d116:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 800d11a:	e7ed      	b.n	800d0f8 <HAL_DMA2D_Start+0x7c>
      tmp = (tmp3 | tmp2 | tmp4);
 800d11c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800d120:	e7ea      	b.n	800d0f8 <HAL_DMA2D_Start+0x7c>
      tmp2 = (tmp2 >> 19U);
 800d122:	0cd1      	lsrs	r1, r2, #19
      tmp3 = (tmp3 >> 10U);
 800d124:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800d126:	02c9      	lsls	r1, r1, #11
 800d128:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 800d12c:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 800d130:	e7e2      	b.n	800d0f8 <HAL_DMA2D_Start+0x7c>
 800d132:	bf00      	nop

0800d134 <HAL_DMA2D_PollForTransfer>:
{
 800d134:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 800d136:	2300      	movs	r3, #0
{
 800d138:	b082      	sub	sp, #8
 800d13a:	4604      	mov	r4, r0
 800d13c:	460d      	mov	r5, r1
  __IO uint32_t isrflags = 0x0U;
 800d13e:	9301      	str	r3, [sp, #4]
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800d140:	6803      	ldr	r3, [r0, #0]
 800d142:	681a      	ldr	r2, [r3, #0]
 800d144:	07d6      	lsls	r6, r2, #31
 800d146:	d40f      	bmi.n	800d168 <HAL_DMA2D_PollForTransfer+0x34>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800d148:	69da      	ldr	r2, [r3, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800d14a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800d14c:	430a      	orrs	r2, r1
  if (layer_start != 0U)
 800d14e:	0691      	lsls	r1, r2, #26
 800d150:	d432      	bmi.n	800d1b8 <HAL_DMA2D_PollForTransfer+0x84>
  __HAL_UNLOCK(hdma2d);
 800d152:	2200      	movs	r2, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 800d154:	2512      	movs	r5, #18
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800d156:	2101      	movs	r1, #1
  return HAL_OK;
 800d158:	4610      	mov	r0, r2
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 800d15a:	609d      	str	r5, [r3, #8]
  __HAL_UNLOCK(hdma2d);
 800d15c:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800d160:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
}
 800d164:	b002      	add	sp, #8
 800d166:	bd70      	pop	{r4, r5, r6, pc}
   tickstart = HAL_GetTick();
 800d168:	f7fe f840 	bl	800b1ec <HAL_GetTick>
 800d16c:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800d16e:	1c6a      	adds	r2, r5, #1
 800d170:	6823      	ldr	r3, [r4, #0]
 800d172:	d147      	bne.n	800d204 <HAL_DMA2D_PollForTransfer+0xd0>
 800d174:	685a      	ldr	r2, [r3, #4]
 800d176:	0796      	lsls	r6, r2, #30
 800d178:	d4e6      	bmi.n	800d148 <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800d17a:	685a      	ldr	r2, [r3, #4]
 800d17c:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800d17e:	9a01      	ldr	r2, [sp, #4]
 800d180:	f012 0f21 	tst.w	r2, #33	; 0x21
 800d184:	d0f6      	beq.n	800d174 <HAL_DMA2D_PollForTransfer+0x40>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800d186:	9a01      	ldr	r2, [sp, #4]
 800d188:	0690      	lsls	r0, r2, #26
 800d18a:	d503      	bpl.n	800d194 <HAL_DMA2D_PollForTransfer+0x60>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800d18c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d18e:	f042 0202 	orr.w	r2, r2, #2
 800d192:	6662      	str	r2, [r4, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800d194:	9a01      	ldr	r2, [sp, #4]
 800d196:	07d1      	lsls	r1, r2, #31
 800d198:	d503      	bpl.n	800d1a2 <HAL_DMA2D_PollForTransfer+0x6e>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800d19a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d19c:	f042 0201 	orr.w	r2, r2, #1
 800d1a0:	6662      	str	r2, [r4, #100]	; 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800d1a2:	2521      	movs	r5, #33	; 0x21
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 800d1a4:	2104      	movs	r1, #4
        __HAL_UNLOCK(hdma2d);
 800d1a6:	2200      	movs	r2, #0
        return HAL_ERROR;
 800d1a8:	2001      	movs	r0, #1
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800d1aa:	609d      	str	r5, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 800d1ac:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
        __HAL_UNLOCK(hdma2d);
 800d1b0:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
}
 800d1b4:	b002      	add	sp, #8
 800d1b6:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 800d1b8:	f7fe f818 	bl	800b1ec <HAL_GetTick>
 800d1bc:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800d1be:	1c68      	adds	r0, r5, #1
 800d1c0:	6823      	ldr	r3, [r4, #0]
 800d1c2:	d13b      	bne.n	800d23c <HAL_DMA2D_PollForTransfer+0x108>
 800d1c4:	685a      	ldr	r2, [r3, #4]
 800d1c6:	06d1      	lsls	r1, r2, #27
 800d1c8:	d4c3      	bmi.n	800d152 <HAL_DMA2D_PollForTransfer+0x1e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800d1ca:	685a      	ldr	r2, [r3, #4]
 800d1cc:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800d1ce:	9a01      	ldr	r2, [sp, #4]
 800d1d0:	f012 0f29 	tst.w	r2, #41	; 0x29
 800d1d4:	d0f6      	beq.n	800d1c4 <HAL_DMA2D_PollForTransfer+0x90>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800d1d6:	9a01      	ldr	r2, [sp, #4]
 800d1d8:	0712      	lsls	r2, r2, #28
 800d1da:	d503      	bpl.n	800d1e4 <HAL_DMA2D_PollForTransfer+0xb0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800d1dc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d1de:	f042 0204 	orr.w	r2, r2, #4
 800d1e2:	6662      	str	r2, [r4, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800d1e4:	9a01      	ldr	r2, [sp, #4]
 800d1e6:	0696      	lsls	r6, r2, #26
 800d1e8:	d503      	bpl.n	800d1f2 <HAL_DMA2D_PollForTransfer+0xbe>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800d1ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d1ec:	f042 0202 	orr.w	r2, r2, #2
 800d1f0:	6662      	str	r2, [r4, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800d1f2:	9a01      	ldr	r2, [sp, #4]
 800d1f4:	07d5      	lsls	r5, r2, #31
 800d1f6:	d503      	bpl.n	800d200 <HAL_DMA2D_PollForTransfer+0xcc>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800d1f8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d1fa:	f042 0201 	orr.w	r2, r2, #1
 800d1fe:	6662      	str	r2, [r4, #100]	; 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800d200:	2529      	movs	r5, #41	; 0x29
 800d202:	e7cf      	b.n	800d1a4 <HAL_DMA2D_PollForTransfer+0x70>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800d204:	685a      	ldr	r2, [r3, #4]
 800d206:	0790      	lsls	r0, r2, #30
 800d208:	d49e      	bmi.n	800d148 <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800d20a:	685a      	ldr	r2, [r3, #4]
 800d20c:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800d20e:	9a01      	ldr	r2, [sp, #4]
 800d210:	f012 0f21 	tst.w	r2, #33	; 0x21
 800d214:	d1b7      	bne.n	800d186 <HAL_DMA2D_PollForTransfer+0x52>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800d216:	f7fd ffe9 	bl	800b1ec <HAL_GetTick>
 800d21a:	1b80      	subs	r0, r0, r6
 800d21c:	42a8      	cmp	r0, r5
 800d21e:	d801      	bhi.n	800d224 <HAL_DMA2D_PollForTransfer+0xf0>
 800d220:	2d00      	cmp	r5, #0
 800d222:	d1a4      	bne.n	800d16e <HAL_DMA2D_PollForTransfer+0x3a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800d224:	6e63      	ldr	r3, [r4, #100]	; 0x64
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 800d226:	2203      	movs	r2, #3
          __HAL_UNLOCK(hdma2d);
 800d228:	2100      	movs	r1, #0
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800d22a:	f043 0320 	orr.w	r3, r3, #32
          return HAL_TIMEOUT;
 800d22e:	4610      	mov	r0, r2
          __HAL_UNLOCK(hdma2d);
 800d230:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800d234:	6663      	str	r3, [r4, #100]	; 0x64
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 800d236:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
          return HAL_TIMEOUT;
 800d23a:	e793      	b.n	800d164 <HAL_DMA2D_PollForTransfer+0x30>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800d23c:	685a      	ldr	r2, [r3, #4]
 800d23e:	06d2      	lsls	r2, r2, #27
 800d240:	d487      	bmi.n	800d152 <HAL_DMA2D_PollForTransfer+0x1e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800d242:	685a      	ldr	r2, [r3, #4]
 800d244:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800d246:	9a01      	ldr	r2, [sp, #4]
 800d248:	f012 0f29 	tst.w	r2, #41	; 0x29
 800d24c:	d1c3      	bne.n	800d1d6 <HAL_DMA2D_PollForTransfer+0xa2>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800d24e:	f7fd ffcd 	bl	800b1ec <HAL_GetTick>
 800d252:	1b80      	subs	r0, r0, r6
 800d254:	42a8      	cmp	r0, r5
 800d256:	d8e5      	bhi.n	800d224 <HAL_DMA2D_PollForTransfer+0xf0>
 800d258:	2d00      	cmp	r5, #0
 800d25a:	d1b0      	bne.n	800d1be <HAL_DMA2D_PollForTransfer+0x8a>
 800d25c:	e7e2      	b.n	800d224 <HAL_DMA2D_PollForTransfer+0xf0>
 800d25e:	bf00      	nop

0800d260 <HAL_DMA2D_LineEventCallback>:
 800d260:	4770      	bx	lr
 800d262:	bf00      	nop

0800d264 <HAL_DMA2D_CLUTLoadingCpltCallback>:
 800d264:	4770      	bx	lr
 800d266:	bf00      	nop

0800d268 <HAL_DMA2D_IRQHandler>:
{
 800d268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800d26a:	6803      	ldr	r3, [r0, #0]
{
 800d26c:	4604      	mov	r4, r0
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800d26e:	685d      	ldr	r5, [r3, #4]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800d270:	681e      	ldr	r6, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800d272:	07e9      	lsls	r1, r5, #31
 800d274:	d501      	bpl.n	800d27a <HAL_DMA2D_IRQHandler+0x12>
    if ((crflags & DMA2D_IT_TE) != 0U)
 800d276:	05f2      	lsls	r2, r6, #23
 800d278:	d456      	bmi.n	800d328 <HAL_DMA2D_IRQHandler+0xc0>
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800d27a:	06af      	lsls	r7, r5, #26
 800d27c:	d501      	bpl.n	800d282 <HAL_DMA2D_IRQHandler+0x1a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 800d27e:	04b0      	lsls	r0, r6, #18
 800d280:	d43b      	bmi.n	800d2fa <HAL_DMA2D_IRQHandler+0x92>
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800d282:	0729      	lsls	r1, r5, #28
 800d284:	d501      	bpl.n	800d28a <HAL_DMA2D_IRQHandler+0x22>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800d286:	0532      	lsls	r2, r6, #20
 800d288:	d421      	bmi.n	800d2ce <HAL_DMA2D_IRQHandler+0x66>
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800d28a:	076b      	lsls	r3, r5, #29
 800d28c:	d501      	bpl.n	800d292 <HAL_DMA2D_IRQHandler+0x2a>
    if ((crflags & DMA2D_IT_TW) != 0U)
 800d28e:	0577      	lsls	r7, r6, #21
 800d290:	d475      	bmi.n	800d37e <HAL_DMA2D_IRQHandler+0x116>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800d292:	07a8      	lsls	r0, r5, #30
 800d294:	d501      	bpl.n	800d29a <HAL_DMA2D_IRQHandler+0x32>
    if ((crflags & DMA2D_IT_TC) != 0U)
 800d296:	05b1      	lsls	r1, r6, #22
 800d298:	d404      	bmi.n	800d2a4 <HAL_DMA2D_IRQHandler+0x3c>
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800d29a:	06ea      	lsls	r2, r5, #27
 800d29c:	d501      	bpl.n	800d2a2 <HAL_DMA2D_IRQHandler+0x3a>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800d29e:	04f3      	lsls	r3, r6, #19
 800d2a0:	d45a      	bmi.n	800d358 <HAL_DMA2D_IRQHandler+0xf0>
}
 800d2a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800d2a4:	6823      	ldr	r3, [r4, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800d2a6:	2702      	movs	r7, #2
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800d2a8:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma2d);
 800d2aa:	2000      	movs	r0, #0
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800d2ac:	681a      	ldr	r2, [r3, #0]
 800d2ae:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800d2b2:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800d2b4:	609f      	str	r7, [r3, #8]
      if(hdma2d->XferCpltCallback != NULL)
 800d2b6:	6a23      	ldr	r3, [r4, #32]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800d2b8:	6e62      	ldr	r2, [r4, #100]	; 0x64
      __HAL_UNLOCK(hdma2d);
 800d2ba:	f884 0060 	strb.w	r0, [r4, #96]	; 0x60
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800d2be:	6662      	str	r2, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800d2c0:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
      if(hdma2d->XferCpltCallback != NULL)
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d0e8      	beq.n	800d29a <HAL_DMA2D_IRQHandler+0x32>
        hdma2d->XferCpltCallback(hdma2d);
 800d2c8:	4620      	mov	r0, r4
 800d2ca:	4798      	blx	r3
 800d2cc:	e7e5      	b.n	800d29a <HAL_DMA2D_IRQHandler+0x32>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800d2ce:	6823      	ldr	r3, [r4, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800d2d0:	2008      	movs	r0, #8
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800d2d2:	2104      	movs	r1, #4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800d2d4:	681a      	ldr	r2, [r3, #0]
 800d2d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d2da:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hdma2d);
 800d2dc:	2200      	movs	r2, #0
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800d2de:	6098      	str	r0, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800d2e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(hdma2d);
 800d2e2:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800d2e6:	430b      	orrs	r3, r1
      if(hdma2d->XferErrorCallback != NULL)
 800d2e8:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800d2ea:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800d2ec:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
      if(hdma2d->XferErrorCallback != NULL)
 800d2f0:	2a00      	cmp	r2, #0
 800d2f2:	d0ca      	beq.n	800d28a <HAL_DMA2D_IRQHandler+0x22>
        hdma2d->XferErrorCallback(hdma2d);
 800d2f4:	4620      	mov	r0, r4
 800d2f6:	4790      	blx	r2
 800d2f8:	e7c7      	b.n	800d28a <HAL_DMA2D_IRQHandler+0x22>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800d2fa:	6823      	ldr	r3, [r4, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800d2fc:	2020      	movs	r0, #32
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800d2fe:	2104      	movs	r1, #4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800d300:	681a      	ldr	r2, [r3, #0]
 800d302:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d306:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hdma2d);
 800d308:	2200      	movs	r2, #0
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800d30a:	6098      	str	r0, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800d30c:	6e63      	ldr	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(hdma2d);
 800d30e:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800d312:	f043 0302 	orr.w	r3, r3, #2
      if(hdma2d->XferErrorCallback != NULL)
 800d316:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800d318:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800d31a:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
      if(hdma2d->XferErrorCallback != NULL)
 800d31e:	2a00      	cmp	r2, #0
 800d320:	d0af      	beq.n	800d282 <HAL_DMA2D_IRQHandler+0x1a>
        hdma2d->XferErrorCallback(hdma2d);
 800d322:	4620      	mov	r0, r4
 800d324:	4790      	blx	r2
 800d326:	e7ac      	b.n	800d282 <HAL_DMA2D_IRQHandler+0x1a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800d328:	681a      	ldr	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800d32a:	f04f 0e01 	mov.w	lr, #1
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800d32e:	f04f 0c04 	mov.w	ip, #4
      __HAL_UNLOCK(hdma2d);
 800d332:	2700      	movs	r7, #0
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800d334:	f422 7280 	bic.w	r2, r2, #256	; 0x100
      if(hdma2d->XferErrorCallback != NULL)
 800d338:	6a41      	ldr	r1, [r0, #36]	; 0x24
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800d33a:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800d33c:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800d33e:	ea42 020e 	orr.w	r2, r2, lr
 800d342:	6642      	str	r2, [r0, #100]	; 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800d344:	f8c3 e008 	str.w	lr, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800d348:	f880 c061 	strb.w	ip, [r0, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 800d34c:	f880 7060 	strb.w	r7, [r0, #96]	; 0x60
      if(hdma2d->XferErrorCallback != NULL)
 800d350:	2900      	cmp	r1, #0
 800d352:	d092      	beq.n	800d27a <HAL_DMA2D_IRQHandler+0x12>
        hdma2d->XferErrorCallback(hdma2d);
 800d354:	4788      	blx	r1
 800d356:	e790      	b.n	800d27a <HAL_DMA2D_IRQHandler+0x12>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800d358:	6823      	ldr	r3, [r4, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800d35a:	2610      	movs	r6, #16
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800d35c:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma2d);
 800d35e:	2500      	movs	r5, #0
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800d360:	681a      	ldr	r2, [r3, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800d362:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800d364:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d368:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800d36a:	609e      	str	r6, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800d36c:	6e63      	ldr	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(hdma2d);
 800d36e:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800d372:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800d374:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800d378:	f7ff ff74 	bl	800d264 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 800d37c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800d37e:	6823      	ldr	r3, [r4, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800d380:	2104      	movs	r1, #4
      HAL_DMA2D_LineEventCallback(hdma2d);
 800d382:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800d384:	681a      	ldr	r2, [r3, #0]
 800d386:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d38a:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800d38c:	6099      	str	r1, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800d38e:	f7ff ff67 	bl	800d260 <HAL_DMA2D_LineEventCallback>
 800d392:	e77e      	b.n	800d292 <HAL_DMA2D_IRQHandler+0x2a>

0800d394 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 800d394:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
 800d398:	2a01      	cmp	r2, #1
 800d39a:	d063      	beq.n	800d464 <HAL_DMA2D_ConfigLayer+0xd0>
 800d39c:	4603      	mov	r3, r0
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800d39e:	ebc1 00c1 	rsb	r0, r1, r1, lsl #3
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800d3a2:	2202      	movs	r2, #2
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800d3a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
{
 800d3a8:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma2d);
 800d3aa:	2401      	movs	r4, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800d3ac:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  __HAL_LOCK(hdma2d);
 800d3b0:	f883 4060 	strb.w	r4, [r3, #96]	; 0x60
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800d3b4:	6b82      	ldr	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800d3b6:	6b06      	ldr	r6, [r0, #48]	; 0x30
 800d3b8:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800d3ba:	0512      	lsls	r2, r2, #20
 800d3bc:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800d3be:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800d3c2:	f1a4 0609 	sub.w	r6, r4, #9
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800d3c6:	4322      	orrs	r2, r4
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800d3c8:	2e01      	cmp	r6, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800d3ca:	ea42 5245 	orr.w	r2, r2, r5, lsl #21
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800d3ce:	d922      	bls.n	800d416 <HAL_DMA2D_ConfigLayer+0x82>
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800d3d0:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800d3d2:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800d3d6:	b981      	cbnz	r1, 800d3fa <HAL_DMA2D_ConfigLayer+0x66>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800d3d8:	6818      	ldr	r0, [r3, #0]
 800d3da:	4923      	ldr	r1, [pc, #140]	; (800d468 <HAL_DMA2D_ConfigLayer+0xd4>)
 800d3dc:	6a45      	ldr	r5, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800d3de:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800d3e0:	4029      	ands	r1, r5
 800d3e2:	430a      	orrs	r2, r1
 800d3e4:	6242      	str	r2, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800d3e6:	6184      	str	r4, [r0, #24]
  __HAL_UNLOCK(hdma2d);
 800d3e8:	2200      	movs	r2, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800d3ea:	2101      	movs	r1, #1
  return HAL_OK;
 800d3ec:	4610      	mov	r0, r2
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800d3ee:	f883 1061 	strb.w	r1, [r3, #97]	; 0x61
  __HAL_UNLOCK(hdma2d);
 800d3f2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
 800d3f6:	bc70      	pop	{r4, r5, r6}
 800d3f8:	4770      	bx	lr
    if(pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 800d3fa:	2c0b      	cmp	r4, #11
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800d3fc:	681c      	ldr	r4, [r3, #0]
    if(pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 800d3fe:	d129      	bne.n	800d454 <HAL_DMA2D_ConfigLayer+0xc0>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800d400:	69e6      	ldr	r6, [r4, #28]
 800d402:	491a      	ldr	r1, [pc, #104]	; (800d46c <HAL_DMA2D_ConfigLayer+0xd8>)
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 800d404:	6c05      	ldr	r5, [r0, #64]	; 0x40
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800d406:	4031      	ands	r1, r6
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800d408:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800d40a:	ea41 4185 	orr.w	r1, r1, r5, lsl #18
 800d40e:	430a      	orrs	r2, r1
 800d410:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800d412:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800d414:	e7e8      	b.n	800d3e8 <HAL_DMA2D_ConfigLayer+0x54>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800d416:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800d418:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
 800d41c:	4322      	orrs	r2, r4
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800d41e:	b161      	cbz	r1, 800d43a <HAL_DMA2D_ConfigLayer+0xa6>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800d420:	6819      	ldr	r1, [r3, #0]
 800d422:	4c11      	ldr	r4, [pc, #68]	; (800d468 <HAL_DMA2D_ConfigLayer+0xd4>)
 800d424:	69ce      	ldr	r6, [r1, #28]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800d426:	6b45      	ldr	r5, [r0, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800d428:	4034      	ands	r4, r6
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800d42a:	6a86      	ldr	r6, [r0, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800d42c:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800d430:	4322      	orrs	r2, r4
 800d432:	61ca      	str	r2, [r1, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800d434:	610e      	str	r6, [r1, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800d436:	620d      	str	r5, [r1, #32]
 800d438:	e7d6      	b.n	800d3e8 <HAL_DMA2D_ConfigLayer+0x54>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800d43a:	6819      	ldr	r1, [r3, #0]
 800d43c:	4c0a      	ldr	r4, [pc, #40]	; (800d468 <HAL_DMA2D_ConfigLayer+0xd4>)
 800d43e:	6a4d      	ldr	r5, [r1, #36]	; 0x24
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800d440:	6b58      	ldr	r0, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800d442:	402c      	ands	r4, r5
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800d444:	6a9d      	ldr	r5, [r3, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800d446:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800d44a:	4322      	orrs	r2, r4
 800d44c:	624a      	str	r2, [r1, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800d44e:	618d      	str	r5, [r1, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800d450:	6288      	str	r0, [r1, #40]	; 0x28
 800d452:	e7c9      	b.n	800d3e8 <HAL_DMA2D_ConfigLayer+0x54>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800d454:	69e5      	ldr	r5, [r4, #28]
 800d456:	4904      	ldr	r1, [pc, #16]	; (800d468 <HAL_DMA2D_ConfigLayer+0xd4>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800d458:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800d45a:	4029      	ands	r1, r5
 800d45c:	430a      	orrs	r2, r1
 800d45e:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800d460:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800d462:	e7c1      	b.n	800d3e8 <HAL_DMA2D_ConfigLayer+0x54>
  __HAL_LOCK(hdma2d);
 800d464:	2002      	movs	r0, #2
}
 800d466:	4770      	bx	lr
 800d468:	00ccfff0 	.word	0x00ccfff0
 800d46c:	00c0fff0 	.word	0x00c0fff0

0800d470 <HAL_DSI_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 800d470:	4770      	bx	lr
 800d472:	bf00      	nop

0800d474 <HAL_DSI_Init>:
  if (hdsi == NULL)
 800d474:	2800      	cmp	r0, #0
 800d476:	f000 80b3 	beq.w	800d5e0 <HAL_DSI_Init+0x16c>
{
 800d47a:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hdsi->State == HAL_DSI_STATE_RESET)
 800d47c:	7c43      	ldrb	r3, [r0, #17]
{
 800d47e:	b083      	sub	sp, #12
 800d480:	460d      	mov	r5, r1
 800d482:	4604      	mov	r4, r0
  if (hdsi->State == HAL_DSI_STATE_RESET)
 800d484:	2b00      	cmp	r3, #0
 800d486:	f000 80a8 	beq.w	800d5da <HAL_DSI_Init+0x166>
  __HAL_DSI_REG_ENABLE(hdsi);
 800d48a:	6823      	ldr	r3, [r4, #0]
  hdsi->State = HAL_DSI_STATE_BUSY;
 800d48c:	2103      	movs	r1, #3
  __HAL_DSI_REG_ENABLE(hdsi);
 800d48e:	2200      	movs	r2, #0
  hdsi->State = HAL_DSI_STATE_BUSY;
 800d490:	7461      	strb	r1, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 800d492:	9200      	str	r2, [sp, #0]
 800d494:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800d498:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800d49c:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800d4a0:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800d4a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d4a8:	9300      	str	r3, [sp, #0]
 800d4aa:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 800d4ac:	f7fd fe9e 	bl	800b1ec <HAL_GetTick>
 800d4b0:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800d4b2:	e006      	b.n	800d4c2 <HAL_DSI_Init+0x4e>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800d4b4:	f7fd fe9a 	bl	800b1ec <HAL_GetTick>
 800d4b8:	1b83      	subs	r3, r0, r6
 800d4ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d4be:	f200 8089 	bhi.w	800d5d4 <HAL_DSI_Init+0x160>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800d4c2:	6823      	ldr	r3, [r4, #0]
 800d4c4:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800d4c8:	04d1      	lsls	r1, r2, #19
 800d4ca:	d5f3      	bpl.n	800d4b4 <HAL_DSI_Init+0x40>
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 800d4cc:	686a      	ldr	r2, [r5, #4]
  __HAL_DSI_PLL_ENABLE(hdsi);
 800d4ce:	2000      	movs	r0, #0
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800d4d0:	f8d3 7430 	ldr.w	r7, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 800d4d4:	682e      	ldr	r6, [r5, #0]
 800d4d6:	02d2      	lsls	r2, r2, #11
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800d4d8:	4942      	ldr	r1, [pc, #264]	; (800d5e4 <HAL_DSI_Init+0x170>)
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 800d4da:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
 800d4de:	68ae      	ldr	r6, [r5, #8]
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800d4e0:	4039      	ands	r1, r7
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 800d4e2:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800d4e6:	f8c3 1430 	str.w	r1, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 800d4ea:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 800d4ee:	430a      	orrs	r2, r1
 800d4f0:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 800d4f4:	9001      	str	r0, [sp, #4]
 800d4f6:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800d4fa:	f042 0201 	orr.w	r2, r2, #1
 800d4fe:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800d502:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800d506:	f003 0301 	and.w	r3, r3, #1
 800d50a:	9301      	str	r3, [sp, #4]
 800d50c:	9b01      	ldr	r3, [sp, #4]
  tickstart = HAL_GetTick();
 800d50e:	f7fd fe6d 	bl	800b1ec <HAL_GetTick>
 800d512:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800d514:	e005      	b.n	800d522 <HAL_DSI_Init+0xae>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800d516:	f7fd fe69 	bl	800b1ec <HAL_GetTick>
 800d51a:	1b80      	subs	r0, r0, r6
 800d51c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800d520:	d858      	bhi.n	800d5d4 <HAL_DSI_Init+0x160>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800d522:	6823      	ldr	r3, [r4, #0]
 800d524:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800d528:	05d2      	lsls	r2, r2, #23
 800d52a:	d5f4      	bpl.n	800d516 <HAL_DSI_Init+0xa2>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800d52c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800d530:	f246 1ca8 	movw	ip, #25000	; 0x61a8
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800d534:	6867      	ldr	r7, [r4, #4]
  hdsi->Instance->IER[0U] = 0U;
 800d536:	2100      	movs	r1, #0
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800d538:	f042 0206 	orr.w	r2, r2, #6
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800d53c:	68e6      	ldr	r6, [r4, #12]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800d53e:	f8d4 e008 	ldr.w	lr, [r4, #8]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800d542:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 800d546:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800d54a:	f022 0203 	bic.w	r2, r2, #3
 800d54e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800d552:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800d556:	686a      	ldr	r2, [r5, #4]
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800d558:	4338      	orrs	r0, r7
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800d55a:	2a01      	cmp	r2, #1
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800d55c:	f040 0001 	orr.w	r0, r0, #1
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800d560:	bf38      	it	cc
 800d562:	2201      	movcc	r2, #1
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800d564:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800d568:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800d56c:	4617      	mov	r7, r2
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800d56e:	f020 0003 	bic.w	r0, r0, #3
 800d572:	f8c3 00a4 	str.w	r0, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800d576:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800d57a:	68a8      	ldr	r0, [r5, #8]
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800d57c:	4332      	orrs	r2, r6
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800d57e:	682d      	ldr	r5, [r5, #0]
 800d580:	f000 0003 	and.w	r0, r0, #3
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800d584:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800d588:	689e      	ldr	r6, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800d58a:	fb0c f505 	mul.w	r5, ip, r5
 800d58e:	4a16      	ldr	r2, [pc, #88]	; (800d5e8 <HAL_DSI_Init+0x174>)
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800d590:	f026 06ff 	bic.w	r6, r6, #255	; 0xff
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800d594:	fb02 f207 	mul.w	r2, r2, r7
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800d598:	609e      	str	r6, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800d59a:	689e      	ldr	r6, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800d59c:	4082      	lsls	r2, r0
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800d59e:	ea46 060e 	orr.w	r6, r6, lr
 800d5a2:	609e      	str	r6, [r3, #8]
  hdsi->State = HAL_DSI_STATE_READY;
 800d5a4:	2601      	movs	r6, #1
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800d5a6:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800d5aa:	fbb2 f2f5 	udiv	r2, r2, r5
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800d5ae:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 800d5b2:	f8c3 0418 	str.w	r0, [r3, #1048]	; 0x418
  return HAL_OK;
 800d5b6:	4608      	mov	r0, r1
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800d5b8:	f8d3 5418 	ldr.w	r5, [r3, #1048]	; 0x418
 800d5bc:	432a      	orrs	r2, r5
 800d5be:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 800d5c2:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800d5c6:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800d5ca:	6161      	str	r1, [r4, #20]
  hdsi->ErrorMsk = 0U;
 800d5cc:	61a1      	str	r1, [r4, #24]
  hdsi->State = HAL_DSI_STATE_READY;
 800d5ce:	7466      	strb	r6, [r4, #17]
}
 800d5d0:	b003      	add	sp, #12
 800d5d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_TIMEOUT;
 800d5d4:	2003      	movs	r0, #3
}
 800d5d6:	b003      	add	sp, #12
 800d5d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_DSI_MspInit(hdsi);
 800d5da:	f7ff ff49 	bl	800d470 <HAL_DSI_MspInit>
 800d5de:	e754      	b.n	800d48a <HAL_DSI_Init+0x16>
    return HAL_ERROR;
 800d5e0:	2001      	movs	r0, #1
}
 800d5e2:	4770      	bx	lr
 800d5e4:	fffc8603 	.word	0xfffc8603
 800d5e8:	003d0900 	.word	0x003d0900

0800d5ec <HAL_DSI_TearingEffectCallback>:
 800d5ec:	4770      	bx	lr
 800d5ee:	bf00      	nop

0800d5f0 <HAL_DSI_EndOfRefreshCallback>:
 800d5f0:	4770      	bx	lr
 800d5f2:	bf00      	nop

0800d5f4 <HAL_DSI_ErrorCallback>:
 800d5f4:	4770      	bx	lr
 800d5f6:	bf00      	nop

0800d5f8 <HAL_DSI_IRQHandler>:
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
  uint32_t ErrorStatus0, ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 800d5f8:	6803      	ldr	r3, [r0, #0]
 800d5fa:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800d5fe:	07d1      	lsls	r1, r2, #31
{
 800d600:	b510      	push	{r4, lr}
 800d602:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 800d604:	d503      	bpl.n	800d60e <HAL_DSI_IRQHandler+0x16>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 800d606:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800d60a:	07d2      	lsls	r2, r2, #31
 800d60c:	d462      	bmi.n	800d6d4 <HAL_DSI_IRQHandler+0xdc>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 800d60e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800d612:	0791      	lsls	r1, r2, #30
 800d614:	d503      	bpl.n	800d61e <HAL_DSI_IRQHandler+0x26>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 800d616:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800d61a:	0792      	lsls	r2, r2, #30
 800d61c:	d44f      	bmi.n	800d6be <HAL_DSI_IRQHandler+0xc6>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 800d61e:	69a3      	ldr	r3, [r4, #24]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d04b      	beq.n	800d6bc <HAL_DSI_IRQHandler+0xc4>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 800d624:	6821      	ldr	r1, [r4, #0]
 800d626:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800d62a:	f8d1 30c4 	ldr.w	r3, [r1, #196]	; 0xc4
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 800d62e:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800d632:	401a      	ands	r2, r3
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 800d634:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 800d638:	b291      	uxth	r1, r2
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 800d63a:	4003      	ands	r3, r0
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 800d63c:	b119      	cbz	r1, 800d646 <HAL_DSI_IRQHandler+0x4e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 800d63e:	6961      	ldr	r1, [r4, #20]
 800d640:	f041 0101 	orr.w	r1, r1, #1
 800d644:	6161      	str	r1, [r4, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 800d646:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
 800d64a:	d003      	beq.n	800d654 <HAL_DSI_IRQHandler+0x5c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 800d64c:	6962      	ldr	r2, [r4, #20]
 800d64e:	f042 0202 	orr.w	r2, r2, #2
 800d652:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 800d654:	07d8      	lsls	r0, r3, #31
 800d656:	d503      	bpl.n	800d660 <HAL_DSI_IRQHandler+0x68>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 800d658:	6962      	ldr	r2, [r4, #20]
 800d65a:	f042 0204 	orr.w	r2, r2, #4
 800d65e:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 800d660:	0799      	lsls	r1, r3, #30
 800d662:	d503      	bpl.n	800d66c <HAL_DSI_IRQHandler+0x74>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 800d664:	6962      	ldr	r2, [r4, #20]
 800d666:	f042 0208 	orr.w	r2, r2, #8
 800d66a:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 800d66c:	f013 0f0c 	tst.w	r3, #12
 800d670:	d003      	beq.n	800d67a <HAL_DSI_IRQHandler+0x82>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 800d672:	6962      	ldr	r2, [r4, #20]
 800d674:	f042 0210 	orr.w	r2, r2, #16
 800d678:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 800d67a:	06da      	lsls	r2, r3, #27
 800d67c:	d503      	bpl.n	800d686 <HAL_DSI_IRQHandler+0x8e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 800d67e:	6962      	ldr	r2, [r4, #20]
 800d680:	f042 0220 	orr.w	r2, r2, #32
 800d684:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 800d686:	0698      	lsls	r0, r3, #26
 800d688:	d503      	bpl.n	800d692 <HAL_DSI_IRQHandler+0x9a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 800d68a:	6962      	ldr	r2, [r4, #20]
 800d68c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d690:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 800d692:	0659      	lsls	r1, r3, #25
 800d694:	d503      	bpl.n	800d69e <HAL_DSI_IRQHandler+0xa6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 800d696:	6962      	ldr	r2, [r4, #20]
 800d698:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d69c:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 800d69e:	061a      	lsls	r2, r3, #24
 800d6a0:	d503      	bpl.n	800d6aa <HAL_DSI_IRQHandler+0xb2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 800d6a2:	6962      	ldr	r2, [r4, #20]
 800d6a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d6a8:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 800d6aa:	f413 5ff8 	tst.w	r3, #7936	; 0x1f00
 800d6ae:	d003      	beq.n	800d6b8 <HAL_DSI_IRQHandler+0xc0>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 800d6b0:	6963      	ldr	r3, [r4, #20]
 800d6b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d6b6:	6163      	str	r3, [r4, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 800d6b8:	6963      	ldr	r3, [r4, #20]
 800d6ba:	b93b      	cbnz	r3, 800d6cc <HAL_DSI_IRQHandler+0xd4>
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 800d6bc:	bd10      	pop	{r4, pc}
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800d6be:	2202      	movs	r2, #2
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800d6c0:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800d6c2:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800d6c6:	f7ff ff93 	bl	800d5f0 <HAL_DSI_EndOfRefreshCallback>
 800d6ca:	e7a8      	b.n	800d61e <HAL_DSI_IRQHandler+0x26>
      HAL_DSI_ErrorCallback(hdsi);
 800d6cc:	4620      	mov	r0, r4
 800d6ce:	f7ff ff91 	bl	800d5f4 <HAL_DSI_ErrorCallback>
}
 800d6d2:	bd10      	pop	{r4, pc}
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 800d6d4:	2201      	movs	r2, #1
 800d6d6:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_TearingEffectCallback(hdsi);
 800d6da:	f7ff ff87 	bl	800d5ec <HAL_DSI_TearingEffectCallback>
 800d6de:	6823      	ldr	r3, [r4, #0]
 800d6e0:	e795      	b.n	800d60e <HAL_DSI_IRQHandler+0x16>
 800d6e2:	bf00      	nop

0800d6e4 <HAL_DSI_ConfigVideoMode>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800d6e4:	7c03      	ldrb	r3, [r0, #16]
 800d6e6:	2b01      	cmp	r3, #1
 800d6e8:	f000 8113 	beq.w	800d912 <HAL_DSI_ConfigVideoMode+0x22e>
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 800d6ec:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hdsi);
 800d6ee:	2201      	movs	r2, #1
{
 800d6f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hdsi);
 800d6f4:	7402      	strb	r2, [r0, #16]
  if (VidCfg->ColorCoding == DSI_RGB666)
 800d6f6:	4604      	mov	r4, r0
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 800d6f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  if (VidCfg->ColorCoding == DSI_RGB666)
 800d6fa:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 800d6fc:	f022 0201 	bic.w	r2, r2, #1
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
  hdsi->Instance->VPCR |= VidCfg->PacketSize;

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 800d700:	f8d1 8014 	ldr.w	r8, [r1, #20]
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 800d704:	4e84      	ldr	r6, [pc, #528]	; (800d918 <HAL_DSI_ConfigVideoMode+0x234>)
  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 800d706:	2803      	cmp	r0, #3
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 800d708:	4d84      	ldr	r5, [pc, #528]	; (800d91c <HAL_DSI_ConfigVideoMode+0x238>)
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 800d70a:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 800d70e:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800d710:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800d714:	f022 0201 	bic.w	r2, r2, #1
 800d718:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 800d71c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d71e:	f022 0203 	bic.w	r2, r2, #3
 800d722:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 800d724:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 800d726:	ea47 070e 	orr.w	r7, r7, lr
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 800d72a:	f8d1 e018 	ldr.w	lr, [r1, #24]
  hdsi->Instance->VMCR |= VidCfg->Mode;
 800d72e:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 800d730:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d732:	ea06 0602 	and.w	r6, r6, r2
 800d736:	63de      	str	r6, [r3, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 800d738:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d73a:	ea42 020c 	orr.w	r2, r2, ip
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 800d73e:	f8d1 c000 	ldr.w	ip, [r1]
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 800d742:	63da      	str	r2, [r3, #60]	; 0x3c
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 800d744:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d746:	ea02 0205 	and.w	r2, r2, r5
 800d74a:	641a      	str	r2, [r3, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 800d74c:	6c1f      	ldr	r7, [r3, #64]	; 0x40
 800d74e:	ea47 0708 	orr.w	r7, r7, r8
 800d752:	641f      	str	r7, [r3, #64]	; 0x40
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 800d754:	6c5e      	ldr	r6, [r3, #68]	; 0x44
 800d756:	ea06 0605 	and.w	r6, r6, r5
 800d75a:	645e      	str	r6, [r3, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 800d75c:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 800d75e:	ea45 050e 	orr.w	r5, r5, lr
 800d762:	645d      	str	r5, [r3, #68]	; 0x44
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 800d764:	68dd      	ldr	r5, [r3, #12]
 800d766:	f025 0503 	bic.w	r5, r5, #3
 800d76a:	60dd      	str	r5, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 800d76c:	68da      	ldr	r2, [r3, #12]
 800d76e:	ea42 020c 	orr.w	r2, r2, ip
 800d772:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800d774:	695d      	ldr	r5, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 800d776:	69cf      	ldr	r7, [r1, #28]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800d778:	f025 0507 	bic.w	r5, r5, #7
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 800d77c:	e9d1 6208 	ldrd	r6, r2, [r1, #32]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800d780:	615d      	str	r5, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 800d782:	ea42 0206 	orr.w	r2, r2, r6
 800d786:	695d      	ldr	r5, [r3, #20]
 800d788:	ea42 0207 	orr.w	r2, r2, r7
 800d78c:	ea42 0205 	orr.w	r2, r2, r5
 800d790:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800d792:	691a      	ldr	r2, [r3, #16]
 800d794:	f022 020f 	bic.w	r2, r2, #15
 800d798:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 800d79a:	691a      	ldr	r2, [r3, #16]
 800d79c:	ea42 0200 	orr.w	r2, r2, r0
 800d7a0:	611a      	str	r2, [r3, #16]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800d7a2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800d7a6:	f022 020e 	bic.w	r2, r2, #14
 800d7aa:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 800d7ae:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800d7b2:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 800d7b6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  if (VidCfg->ColorCoding == DSI_RGB666)
 800d7ba:	d107      	bne.n	800d7cc <HAL_DSI_ConfigVideoMode+0xe8>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 800d7bc:	6918      	ldr	r0, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 800d7be:	688d      	ldr	r5, [r1, #8]
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 800d7c0:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 800d7c4:	6118      	str	r0, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 800d7c6:	691a      	ldr	r2, [r3, #16]
 800d7c8:	432a      	orrs	r2, r5
 800d7ca:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 800d7cc:	6c9f      	ldr	r7, [r3, #72]	; 0x48
  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800d7ce:	2600      	movs	r6, #0
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 800d7d0:	4a53      	ldr	r2, [pc, #332]	; (800d920 <HAL_DSI_ConfigVideoMode+0x23c>)
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 800d7d2:	6a88      	ldr	r0, [r1, #40]	; 0x28
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 800d7d4:	4017      	ands	r7, r2
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 800d7d6:	f8d1 c02c 	ldr.w	ip, [r1, #44]	; 0x2c
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 800d7da:	f8d1 e030 	ldr.w	lr, [r1, #48]	; 0x30
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 800d7de:	649f      	str	r7, [r3, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 800d7e0:	6c9d      	ldr	r5, [r3, #72]	; 0x48
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 800d7e2:	4f50      	ldr	r7, [pc, #320]	; (800d924 <HAL_DSI_ConfigVideoMode+0x240>)
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 800d7e4:	4305      	orrs	r5, r0
 800d7e6:	649d      	str	r5, [r3, #72]	; 0x48
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 800d7e8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800d7ea:	4010      	ands	r0, r2
 800d7ec:	64d8      	str	r0, [r3, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 800d7ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 800d7f0:	484d      	ldr	r0, [pc, #308]	; (800d928 <HAL_DSI_ConfigVideoMode+0x244>)
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 800d7f2:	ea42 020c 	orr.w	r2, r2, ip
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 800d7f6:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 800d7fa:	64da      	str	r2, [r3, #76]	; 0x4c
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 800d7fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d7fe:	4017      	ands	r7, r2
 800d800:	651f      	str	r7, [r3, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 800d802:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 800d804:	ea45 050e 	orr.w	r5, r5, lr
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 800d808:	f8d1 e038 	ldr.w	lr, [r1, #56]	; 0x38
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 800d80c:	651d      	str	r5, [r3, #80]	; 0x50
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 800d80e:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 800d810:	4005      	ands	r5, r0
 800d812:	655d      	str	r5, [r3, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 800d814:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d816:	ea42 020c 	orr.w	r2, r2, ip
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 800d81a:	f8d1 c03c 	ldr.w	ip, [r1, #60]	; 0x3c
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 800d81e:	655a      	str	r2, [r3, #84]	; 0x54
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 800d820:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d822:	4002      	ands	r2, r0
 800d824:	659a      	str	r2, [r3, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 800d826:	6d9f      	ldr	r7, [r3, #88]	; 0x58
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 800d828:	4a3b      	ldr	r2, [pc, #236]	; (800d918 <HAL_DSI_ConfigVideoMode+0x234>)
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 800d82a:	ea47 070e 	orr.w	r7, r7, lr
 800d82e:	659f      	str	r7, [r3, #88]	; 0x58
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 800d830:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
 800d832:	4007      	ands	r7, r0

  return HAL_OK;
 800d834:	4630      	mov	r0, r6
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 800d836:	65df      	str	r7, [r3, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 800d838:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 800d83a:	ea45 050c 	orr.w	r5, r5, ip
 800d83e:	65dd      	str	r5, [r3, #92]	; 0x5c
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 800d840:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 800d842:	402a      	ands	r2, r5
 800d844:	661a      	str	r2, [r3, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 800d846:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 800d848:	6c0a      	ldr	r2, [r1, #64]	; 0x40
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 800d84a:	f8d1 e044 	ldr.w	lr, [r1, #68]	; 0x44
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 800d84e:	4315      	orrs	r5, r2
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 800d850:	f8d1 c048 	ldr.w	ip, [r1, #72]	; 0x48
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 800d854:	661d      	str	r5, [r3, #96]	; 0x60
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 800d856:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 800d858:	f427 4700 	bic.w	r7, r7, #32768	; 0x8000
 800d85c:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 800d85e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d860:	ea42 020e 	orr.w	r2, r2, lr
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 800d864:	f8d1 e04c 	ldr.w	lr, [r1, #76]	; 0x4c
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 800d868:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 800d86a:	699f      	ldr	r7, [r3, #24]
 800d86c:	f427 077f 	bic.w	r7, r7, #16711680	; 0xff0000
 800d870:	619f      	str	r7, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 800d872:	699d      	ldr	r5, [r3, #24]
 800d874:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 800d878:	f8d1 c050 	ldr.w	ip, [r1, #80]	; 0x50
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 800d87c:	619d      	str	r5, [r3, #24]
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 800d87e:	699d      	ldr	r5, [r3, #24]
 800d880:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 800d884:	619d      	str	r5, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 800d886:	699a      	ldr	r2, [r3, #24]
 800d888:	ea42 020e 	orr.w	r2, r2, lr
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 800d88c:	f8d1 e054 	ldr.w	lr, [r1, #84]	; 0x54
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 800d890:	619a      	str	r2, [r3, #24]
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 800d892:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d894:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d898:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 800d89a:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 800d89c:	ea47 070c 	orr.w	r7, r7, ip
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 800d8a0:	f8d1 c058 	ldr.w	ip, [r1, #88]	; 0x58
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 800d8a4:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 800d8a6:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 800d8a8:	f427 5780 	bic.w	r7, r7, #4096	; 0x1000
 800d8ac:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 800d8ae:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 800d8b0:	ea45 050e 	orr.w	r5, r5, lr
 800d8b4:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 800d8b6:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 800d8b8:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
 800d8bc:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 800d8be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d8c0:	ea42 020c 	orr.w	r2, r2, ip
 800d8c4:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 800d8c6:	6b9f      	ldr	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 800d8c8:	6dcd      	ldr	r5, [r1, #92]	; 0x5c
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 800d8ca:	f427 6780 	bic.w	r7, r7, #1024	; 0x400
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 800d8ce:	f8d1 e060 	ldr.w	lr, [r1, #96]	; 0x60
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 800d8d2:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 800d8d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d8d6:	432a      	orrs	r2, r5
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 800d8d8:	e9d1 c719 	ldrd	ip, r7, [r1, #100]	; 0x64
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 800d8dc:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 800d8de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d8e0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800d8e4:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 800d8e6:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 800d8e8:	ea45 050e 	orr.w	r5, r5, lr
 800d8ec:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 800d8ee:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 800d8f0:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 800d8f4:	639d      	str	r5, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 800d8f6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800d8f8:	ea41 010c 	orr.w	r1, r1, ip
 800d8fc:	6399      	str	r1, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 800d8fe:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800d900:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800d904:	6399      	str	r1, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 800d906:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d908:	433a      	orrs	r2, r7
 800d90a:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_UNLOCK(hdsi);
 800d90c:	7426      	strb	r6, [r4, #16]
}
 800d90e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hdsi);
 800d912:	2002      	movs	r0, #2
}
 800d914:	4770      	bx	lr
 800d916:	bf00      	nop
 800d918:	ffffc000 	.word	0xffffc000
 800d91c:	ffffe000 	.word	0xffffe000
 800d920:	fffff000 	.word	0xfffff000
 800d924:	ffff8000 	.word	0xffff8000
 800d928:	fffffc00 	.word	0xfffffc00

0800d92c <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800d92c:	7c02      	ldrb	r2, [r0, #16]
 800d92e:	2a01      	cmp	r2, #1
 800d930:	d00e      	beq.n	800d950 <HAL_DSI_ConfigFlowControl+0x24>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800d932:	6802      	ldr	r2, [r0, #0]
 800d934:	4603      	mov	r3, r0
{
 800d936:	b430      	push	{r4, r5}
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800d938:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800d93a:	2500      	movs	r5, #0
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800d93c:	f024 041f 	bic.w	r4, r4, #31

  return HAL_OK;
 800d940:	4628      	mov	r0, r5
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800d942:	62d4      	str	r4, [r2, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 800d944:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 800d946:	4321      	orrs	r1, r4
 800d948:	62d1      	str	r1, [r2, #44]	; 0x2c
  __HAL_UNLOCK(hdsi);
 800d94a:	741d      	strb	r5, [r3, #16]
}
 800d94c:	bc30      	pop	{r4, r5}
 800d94e:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800d950:	2002      	movs	r0, #2
}
 800d952:	4770      	bx	lr

0800d954 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800d954:	7c03      	ldrb	r3, [r0, #16]
 800d956:	2b01      	cmp	r3, #1
 800d958:	d021      	beq.n	800d99e <HAL_DSI_Start+0x4a>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 800d95a:	6803      	ldr	r3, [r0, #0]
 800d95c:	2100      	movs	r1, #0
 800d95e:	4602      	mov	r2, r0
  __HAL_DSI_WRAPPER_ENABLE(hdsi);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
 800d960:	4608      	mov	r0, r1
{
 800d962:	b410      	push	{r4}
 800d964:	b083      	sub	sp, #12
  __HAL_DSI_ENABLE(hdsi);
 800d966:	9100      	str	r1, [sp, #0]
 800d968:	685c      	ldr	r4, [r3, #4]
 800d96a:	f044 0401 	orr.w	r4, r4, #1
 800d96e:	605c      	str	r4, [r3, #4]
 800d970:	685c      	ldr	r4, [r3, #4]
 800d972:	f004 0401 	and.w	r4, r4, #1
 800d976:	9400      	str	r4, [sp, #0]
 800d978:	9c00      	ldr	r4, [sp, #0]
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800d97a:	9101      	str	r1, [sp, #4]
 800d97c:	f8d3 4404 	ldr.w	r4, [r3, #1028]	; 0x404
 800d980:	f044 0408 	orr.w	r4, r4, #8
 800d984:	f8c3 4404 	str.w	r4, [r3, #1028]	; 0x404
 800d988:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
  __HAL_UNLOCK(hdsi);
 800d98c:	7411      	strb	r1, [r2, #16]
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800d98e:	f003 0308 	and.w	r3, r3, #8
 800d992:	9301      	str	r3, [sp, #4]
 800d994:	9b01      	ldr	r3, [sp, #4]
}
 800d996:	b003      	add	sp, #12
 800d998:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d99c:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800d99e:	2002      	movs	r0, #2
}
 800d9a0:	4770      	bx	lr
 800d9a2:	bf00      	nop

0800d9a4 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 800d9a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9a8:	4698      	mov	r8, r3
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 800d9aa:	7c03      	ldrb	r3, [r0, #16]
 800d9ac:	2b01      	cmp	r3, #1
 800d9ae:	d022      	beq.n	800d9f6 <HAL_DSI_ShortWrite+0x52>
 800d9b0:	2301      	movs	r3, #1
 800d9b2:	4604      	mov	r4, r0
 800d9b4:	460f      	mov	r7, r1
 800d9b6:	4615      	mov	r5, r2
 800d9b8:	7403      	strb	r3, [r0, #16]
  tickstart = HAL_GetTick();
 800d9ba:	f7fd fc17 	bl	800b1ec <HAL_GetTick>
 800d9be:	4681      	mov	r9, r0
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800d9c0:	e006      	b.n	800d9d0 <HAL_DSI_ShortWrite+0x2c>
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 800d9c2:	f7fd fc13 	bl	800b1ec <HAL_GetTick>
 800d9c6:	eba0 0609 	sub.w	r6, r0, r9
 800d9ca:	f5b6 7f7a 	cmp.w	r6, #1000	; 0x3e8
 800d9ce:	d810      	bhi.n	800d9f2 <HAL_DSI_ShortWrite+0x4e>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800d9d0:	6826      	ldr	r6, [r4, #0]
 800d9d2:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800d9d4:	07db      	lsls	r3, r3, #31
 800d9d6:	d5f4      	bpl.n	800d9c2 <HAL_DSI_ShortWrite+0x1e>
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800d9d8:	ea45 2308 	orr.w	r3, r5, r8, lsl #8
 800d9dc:	9a08      	ldr	r2, [sp, #32]
  return HAL_OK;
 800d9de:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800d9e0:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800d9e4:	ea42 1287 	orr.w	r2, r2, r7, lsl #6
 800d9e8:	66f2      	str	r2, [r6, #108]	; 0x6c

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	7423      	strb	r3, [r4, #16]

  return status;
}
 800d9ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 800d9f2:	2003      	movs	r0, #3
 800d9f4:	e7f9      	b.n	800d9ea <HAL_DSI_ShortWrite+0x46>
  __HAL_LOCK(hdsi);
 800d9f6:	2002      	movs	r0, #2
}
 800d9f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800d9fc <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 800d9fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da00:	4699      	mov	r9, r3
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800da02:	7c03      	ldrb	r3, [r0, #16]
{
 800da04:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  __HAL_LOCK(hdsi);
 800da06:	2b01      	cmp	r3, #1
 800da08:	d061      	beq.n	800dace <HAL_DSI_LongWrite+0xd2>
 800da0a:	2301      	movs	r3, #1
 800da0c:	4607      	mov	r7, r0
 800da0e:	468a      	mov	sl, r1
 800da10:	4693      	mov	fp, r2
 800da12:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 800da14:	f7fd fbea 	bl	800b1ec <HAL_GetTick>
 800da18:	4680      	mov	r8, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800da1a:	e006      	b.n	800da2a <HAL_DSI_LongWrite+0x2e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800da1c:	f7fd fbe6 	bl	800b1ec <HAL_GetTick>
 800da20:	eba0 0508 	sub.w	r5, r0, r8
 800da24:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
 800da28:	d84d      	bhi.n	800dac6 <HAL_DSI_LongWrite+0xca>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800da2a:	683a      	ldr	r2, [r7, #0]
 800da2c:	6f54      	ldr	r4, [r2, #116]	; 0x74
 800da2e:	f014 0401 	ands.w	r4, r4, #1
 800da32:	d0f3      	beq.n	800da1c <HAL_DSI_LongWrite+0x20>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800da34:	464b      	mov	r3, r9
 800da36:	2b03      	cmp	r3, #3
 800da38:	bf28      	it	cs
 800da3a:	2303      	movcs	r3, #3

  for (count = 0U; count < nbBytes; count++)
 800da3c:	f1b9 0f00 	cmp.w	r9, #0
 800da40:	d048      	beq.n	800dad4 <HAL_DSI_LongWrite+0xd8>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800da42:	7831      	ldrb	r1, [r6, #0]
  for (count = 0U; count < nbBytes; count++)
 800da44:	f1b9 0f01 	cmp.w	r9, #1
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800da48:	980a      	ldr	r0, [sp, #40]	; 0x28
 800da4a:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
  for (count = 0U; count < nbBytes; count++)
 800da4e:	d908      	bls.n	800da62 <HAL_DSI_LongWrite+0x66>
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800da50:	7870      	ldrb	r0, [r6, #1]
  for (count = 0U; count < nbBytes; count++)
 800da52:	f1b9 0f02 	cmp.w	r9, #2
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800da56:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
  for (count = 0U; count < nbBytes; count++)
 800da5a:	d902      	bls.n	800da62 <HAL_DSI_LongWrite+0x66>
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800da5c:	78b0      	ldrb	r0, [r6, #2]
 800da5e:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
  pparams += nbBytes;
 800da62:	441e      	add	r6, r3
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 800da64:	ebb9 0303 	subs.w	r3, r9, r3
  hdsi->Instance->GPDR = fifoword;
 800da68:	6711      	str	r1, [r2, #112]	; 0x70
  while (uicounter != 0U)
 800da6a:	d017      	beq.n	800da9c <HAL_DSI_LongWrite+0xa0>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800da6c:	2b04      	cmp	r3, #4
 800da6e:	4618      	mov	r0, r3
    fifoword = 0U;
    for (count = 0U; count < nbBytes; count++)
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800da70:	7831      	ldrb	r1, [r6, #0]
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800da72:	bf28      	it	cs
 800da74:	2004      	movcs	r0, #4
    for (count = 0U; count < nbBytes; count++)
 800da76:	2b01      	cmp	r3, #1
 800da78:	d00c      	beq.n	800da94 <HAL_DSI_LongWrite+0x98>
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800da7a:	7874      	ldrb	r4, [r6, #1]
    for (count = 0U; count < nbBytes; count++)
 800da7c:	2b02      	cmp	r3, #2
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800da7e:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    for (count = 0U; count < nbBytes; count++)
 800da82:	d007      	beq.n	800da94 <HAL_DSI_LongWrite+0x98>
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800da84:	78b4      	ldrb	r4, [r6, #2]
    for (count = 0U; count < nbBytes; count++)
 800da86:	2b03      	cmp	r3, #3
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800da88:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
    for (count = 0U; count < nbBytes; count++)
 800da8c:	d902      	bls.n	800da94 <HAL_DSI_LongWrite+0x98>
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800da8e:	78f4      	ldrb	r4, [r6, #3]
 800da90:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
  while (uicounter != 0U)
 800da94:	1a1b      	subs	r3, r3, r0
    }
    hdsi->Instance->GPDR = fifoword;

    uicounter -= nbBytes;
    pparams += nbBytes;
 800da96:	4406      	add	r6, r0
    hdsi->Instance->GPDR = fifoword;
 800da98:	6711      	str	r1, [r2, #112]	; 0x70
  while (uicounter != 0U)
 800da9a:	d1e7      	bne.n	800da6c <HAL_DSI_LongWrite+0x70>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 800da9c:	f109 0901 	add.w	r9, r9, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800daa0:	ea4b 138a 	orr.w	r3, fp, sl, lsl #6
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800daa4:	2100      	movs	r1, #0
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800daa6:	ea4f 2a09 	mov.w	sl, r9, lsl #8

  return HAL_OK;
 800daaa:	4608      	mov	r0, r1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800daac:	46d1      	mov	r9, sl
 800daae:	fa1f fa8a 	uxth.w	sl, sl
 800dab2:	f409 097f 	and.w	r9, r9, #16711680	; 0xff0000
 800dab6:	ea43 030a 	orr.w	r3, r3, sl
 800daba:	ea43 0309 	orr.w	r3, r3, r9
 800dabe:	66d3      	str	r3, [r2, #108]	; 0x6c
  __HAL_UNLOCK(hdsi);
 800dac0:	7439      	strb	r1, [r7, #16]
}
 800dac2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return HAL_TIMEOUT;
 800dac6:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 800dac8:	743c      	strb	r4, [r7, #16]
}
 800daca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(hdsi);
 800dace:	2002      	movs	r0, #2
}
 800dad0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  hdsi->Instance->GPDR = fifoword;
 800dad4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dad6:	6713      	str	r3, [r2, #112]	; 0x70
  while (uicounter != 0U)
 800dad8:	e7e0      	b.n	800da9c <HAL_DSI_LongWrite+0xa0>
 800dada:	bf00      	nop

0800dadc <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 800dadc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dae0:	461c      	mov	r4, r3
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800dae2:	7c03      	ldrb	r3, [r0, #16]
{
 800dae4:	f8dd 9020 	ldr.w	r9, [sp, #32]
  __HAL_LOCK(hdsi);
 800dae8:	2b01      	cmp	r3, #1
 800daea:	f000 8088 	beq.w	800dbfe <HAL_DSI_Read+0x122>
 800daee:	2301      	movs	r3, #1

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 800daf0:	2c02      	cmp	r4, #2
 800daf2:	4605      	mov	r5, r0
 800daf4:	460f      	mov	r7, r1
 800daf6:	4616      	mov	r6, r2
  __HAL_LOCK(hdsi);
 800daf8:	7403      	strb	r3, [r0, #16]
  if (datasize > 2U)
 800dafa:	d810      	bhi.n	800db1e <HAL_DSI_Read+0x42>
      return HAL_ERROR;
    }
  }

  /* Configure the packet to read command */
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 800dafc:	f1b9 0f06 	cmp.w	r9, #6
 800db00:	d02b      	beq.n	800db5a <HAL_DSI_Read+0x7e>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 800db02:	f1b9 0f04 	cmp.w	r9, #4
 800db06:	d066      	beq.n	800dbd6 <HAL_DSI_Read+0xfa>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 800db08:	f1b9 0f14 	cmp.w	r9, #20
 800db0c:	d07a      	beq.n	800dc04 <HAL_DSI_Read+0x128>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 800db0e:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
 800db12:	d066      	beq.n	800dbe2 <HAL_DSI_Read+0x106>
      __HAL_UNLOCK(hdsi);
 800db14:	2300      	movs	r3, #0
      return HAL_ERROR;
 800db16:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdsi);
 800db18:	742b      	strb	r3, [r5, #16]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 800db1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  tickstart = HAL_GetTick();
 800db1e:	f7fd fb65 	bl	800b1ec <HAL_GetTick>
 800db22:	4680      	mov	r8, r0
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800db24:	e006      	b.n	800db34 <HAL_DSI_Read+0x58>
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 800db26:	f7fd fb61 	bl	800b1ec <HAL_GetTick>
 800db2a:	eba0 0008 	sub.w	r0, r0, r8
 800db2e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800db32:	d8ef      	bhi.n	800db14 <HAL_DSI_Read+0x38>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800db34:	682b      	ldr	r3, [r5, #0]
 800db36:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800db38:	07d1      	lsls	r1, r2, #31
 800db3a:	d5f4      	bpl.n	800db26 <HAL_DSI_Read+0x4a>
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800db3c:	0222      	lsls	r2, r4, #8
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 800db3e:	f1b9 0f06 	cmp.w	r9, #6
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800db42:	4611      	mov	r1, r2
 800db44:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 800db48:	b289      	uxth	r1, r1
 800db4a:	ea42 1287 	orr.w	r2, r2, r7, lsl #6
 800db4e:	ea42 0201 	orr.w	r2, r2, r1
 800db52:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 800db56:	66da      	str	r2, [r3, #108]	; 0x6c
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 800db58:	d1d3      	bne.n	800db02 <HAL_DSI_Read+0x26>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800db5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 800db5c:	682a      	ldr	r2, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800db5e:	021b      	lsls	r3, r3, #8
 800db60:	ea43 1787 	orr.w	r7, r3, r7, lsl #6
 800db64:	f047 0706 	orr.w	r7, r7, #6
 800db68:	66d7      	str	r7, [r2, #108]	; 0x6c
  tickstart = HAL_GetTick();
 800db6a:	f7fd fb3f 	bl	800b1ec <HAL_GetTick>
 800db6e:	4607      	mov	r7, r0
  while (((int32_t)(datasize)) > 0)
 800db70:	e005      	b.n	800db7e <HAL_DSI_Read+0xa2>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800db72:	f7fd fb3b 	bl	800b1ec <HAL_GetTick>
 800db76:	1bc1      	subs	r1, r0, r7
 800db78:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 800db7c:	d822      	bhi.n	800dbc4 <HAL_DSI_Read+0xe8>
  while (((int32_t)(datasize)) > 0)
 800db7e:	2c00      	cmp	r4, #0
 800db80:	dd25      	ble.n	800dbce <HAL_DSI_Read+0xf2>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 800db82:	682b      	ldr	r3, [r5, #0]
 800db84:	6f59      	ldr	r1, [r3, #116]	; 0x74
 800db86:	06ca      	lsls	r2, r1, #27
 800db88:	d4f3      	bmi.n	800db72 <HAL_DSI_Read+0x96>
      nbbytes = (datasize < 4U) ? datasize : 4U;
 800db8a:	2c04      	cmp	r4, #4
      fifoword = hdsi->Instance->GPDR;
 800db8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
      nbbytes = (datasize < 4U) ? datasize : 4U;
 800db8e:	4622      	mov	r2, r4
 800db90:	bf28      	it	cs
 800db92:	2204      	movcs	r2, #4
      for (count = 0U; count < nbbytes; count++)
 800db94:	2c01      	cmp	r4, #1
        *pdata = (uint8_t)(fifoword >> (8U * count));
 800db96:	ea4f 2113 	mov.w	r1, r3, lsr #8
 800db9a:	7033      	strb	r3, [r6, #0]
 800db9c:	ea4f 4013 	mov.w	r0, r3, lsr #16
 800dba0:	ea4f 6313 	mov.w	r3, r3, lsr #24
      for (count = 0U; count < nbbytes; count++)
 800dba4:	d006      	beq.n	800dbb4 <HAL_DSI_Read+0xd8>
 800dba6:	2c02      	cmp	r4, #2
        *pdata = (uint8_t)(fifoword >> (8U * count));
 800dba8:	7071      	strb	r1, [r6, #1]
      for (count = 0U; count < nbbytes; count++)
 800dbaa:	d003      	beq.n	800dbb4 <HAL_DSI_Read+0xd8>
 800dbac:	2c03      	cmp	r4, #3
        *pdata = (uint8_t)(fifoword >> (8U * count));
 800dbae:	70b0      	strb	r0, [r6, #2]
 800dbb0:	bf88      	it	hi
 800dbb2:	70f3      	strbhi	r3, [r6, #3]
      for (count = 0U; count < nbbytes; count++)
 800dbb4:	4416      	add	r6, r2
 800dbb6:	1aa4      	subs	r4, r4, r2
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800dbb8:	f7fd fb18 	bl	800b1ec <HAL_GetTick>
 800dbbc:	1bc1      	subs	r1, r0, r7
 800dbbe:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 800dbc2:	d9dc      	bls.n	800db7e <HAL_DSI_Read+0xa2>
      __HAL_UNLOCK(hdsi);
 800dbc4:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 800dbc6:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 800dbc8:	742b      	strb	r3, [r5, #16]
}
 800dbca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_UNLOCK(hdsi);
 800dbce:	2000      	movs	r0, #0
 800dbd0:	7428      	strb	r0, [r5, #16]
}
 800dbd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800dbd6:	01bf      	lsls	r7, r7, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 800dbd8:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800dbda:	f047 0704 	orr.w	r7, r7, #4
 800dbde:	66df      	str	r7, [r3, #108]	; 0x6c
}
 800dbe0:	e7c3      	b.n	800db6a <HAL_DSI_Read+0x8e>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800dbe2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800dbe4:	01bb      	lsls	r3, r7, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800dbe6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800dbe8:	7852      	ldrb	r2, [r2, #1]
 800dbea:	7809      	ldrb	r1, [r1, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800dbec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800dbf0:	682a      	ldr	r2, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800dbf2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800dbf6:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 800dbfa:	66d3      	str	r3, [r2, #108]	; 0x6c
}
 800dbfc:	e7b5      	b.n	800db6a <HAL_DSI_Read+0x8e>
  __HAL_LOCK(hdsi);
 800dbfe:	2002      	movs	r0, #2
}
 800dc00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 800dc04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800dc06:	01bb      	lsls	r3, r7, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 800dc08:	7811      	ldrb	r1, [r2, #0]
 800dc0a:	682a      	ldr	r2, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800dc0c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800dc10:	f043 0314 	orr.w	r3, r3, #20
 800dc14:	66d3      	str	r3, [r2, #108]	; 0x6c
}
 800dc16:	e7a8      	b.n	800db6a <HAL_DSI_Read+0x8e>

0800dc18 <HAL_EXTI_RegisterCallback>:
  if (hexti == NULL)
  {
    return HAL_ERROR;
  }

  switch (CallbackID)
 800dc18:	b919      	cbnz	r1, 800dc22 <HAL_EXTI_RegisterCallback+0xa>
 800dc1a:	b110      	cbz	r0, 800dc22 <HAL_EXTI_RegisterCallback+0xa>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800dc1c:	6042      	str	r2, [r0, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dc1e:	2000      	movs	r0, #0
      break;
 800dc20:	4770      	bx	lr

    default:
      status = HAL_ERROR;
 800dc22:	2001      	movs	r0, #1
      break;
  }

  return status;
}
 800dc24:	4770      	bx	lr
 800dc26:	bf00      	nop

0800dc28 <HAL_EXTI_GetHandle>:
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800dc28:	b110      	cbz	r0, 800dc30 <HAL_EXTI_GetHandle+0x8>
    return HAL_ERROR;
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800dc2a:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 800dc2c:	2000      	movs	r0, #0
 800dc2e:	4770      	bx	lr
    return HAL_ERROR;
 800dc30:	2001      	movs	r0, #1
  }
}
 800dc32:	4770      	bx	lr

0800dc34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800dc34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800dc38:	680e      	ldr	r6, [r1, #0]
{
 800dc3a:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800dc3c:	2e00      	cmp	r6, #0
 800dc3e:	f000 80d3 	beq.w	800dde8 <HAL_GPIO_Init+0x1b4>
  uint32_t position = 0x00U;
 800dc42:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800dc44:	f8df a220 	ldr.w	sl, [pc, #544]	; 800de68 <HAL_GPIO_Init+0x234>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800dc48:	f8df b220 	ldr.w	fp, [pc, #544]	; 800de6c <HAL_GPIO_Init+0x238>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800dc4c:	46b1      	mov	r9, r6
 800dc4e:	e020      	b.n	800dc92 <HAL_GPIO_Init+0x5e>
        temp = GPIOx->AFR[position >> 3U];
 800dc50:	08da      	lsrs	r2, r3, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800dc52:	f003 0c07 	and.w	ip, r3, #7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800dc56:	f004 0403 	and.w	r4, r4, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800dc5a:	f04f 0e0f 	mov.w	lr, #15
 800dc5e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800dc62:	690e      	ldr	r6, [r1, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800dc64:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800dc68:	fa04 f707 	lsl.w	r7, r4, r7
        temp = GPIOx->AFR[position >> 3U];
 800dc6c:	6a14      	ldr	r4, [r2, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800dc6e:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800dc72:	fa06 f60c 	lsl.w	r6, r6, ip
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800dc76:	ea24 0c0e 	bic.w	ip, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800dc7a:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3U] = temp;
 800dc7e:	6216      	str	r6, [r2, #32]
      temp = GPIOx->MODER;
 800dc80:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800dc82:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800dc84:	433d      	orrs	r5, r7
      GPIOx->MODER = temp;
 800dc86:	6005      	str	r5, [r0, #0]
        }
        EXTI->FTSR1 = temp;
      }
    }

    position++;
 800dc88:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800dc8a:	fa39 f203 	lsrs.w	r2, r9, r3
 800dc8e:	f000 80ab 	beq.w	800dde8 <HAL_GPIO_Init+0x1b4>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800dc92:	2201      	movs	r2, #1
 800dc94:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 800dc96:	ea12 0809 	ands.w	r8, r2, r9
 800dc9a:	d0f5      	beq.n	800dc88 <HAL_GPIO_Init+0x54>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800dc9c:	684c      	ldr	r4, [r1, #4]
 800dc9e:	005f      	lsls	r7, r3, #1
 800dca0:	f024 0c10 	bic.w	ip, r4, #16
 800dca4:	f10c 35ff 	add.w	r5, ip, #4294967295
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800dca8:	2d01      	cmp	r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800dcaa:	f04f 0503 	mov.w	r5, #3
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800dcae:	f200 809e 	bhi.w	800ddee <HAL_GPIO_Init+0x1ba>
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800dcb2:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp = GPIOx->OSPEEDR;
 800dcb6:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800dcba:	40bd      	lsls	r5, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800dcbc:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800dcbe:	ea2e 0e05 	bic.w	lr, lr, r5
 800dcc2:	43ed      	mvns	r5, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800dcc4:	9601      	str	r6, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800dcc6:	68ce      	ldr	r6, [r1, #12]
 800dcc8:	40be      	lsls	r6, r7
 800dcca:	ea46 0e0e 	orr.w	lr, r6, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800dcce:	9e01      	ldr	r6, [sp, #4]
        GPIOx->OSPEEDR = temp;
 800dcd0:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 800dcd4:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800dcd8:	ea2e 0202 	bic.w	r2, lr, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800dcdc:	4316      	orrs	r6, r2
        GPIOx->OTYPER = temp;
 800dcde:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 800dce0:	68c6      	ldr	r6, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800dce2:	f1bc 0f02 	cmp.w	ip, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800dce6:	688a      	ldr	r2, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800dce8:	ea06 0605 	and.w	r6, r6, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800dcec:	fa02 f207 	lsl.w	r2, r2, r7
 800dcf0:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->PUPDR = temp;
 800dcf4:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800dcf6:	d0ab      	beq.n	800dc50 <HAL_GPIO_Init+0x1c>
      temp = GPIOx->MODER;
 800dcf8:	6806      	ldr	r6, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800dcfa:	f004 0203 	and.w	r2, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800dcfe:	402e      	ands	r6, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800dd00:	fa02 f707 	lsl.w	r7, r2, r7
 800dd04:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 800dd06:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800dd08:	00e6      	lsls	r6, r4, #3
 800dd0a:	d5bd      	bpl.n	800dc88 <HAL_GPIO_Init+0x54>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800dd0c:	f8da 60f4 	ldr.w	r6, [sl, #244]	; 0xf4
 800dd10:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800dd14:	f003 0203 	and.w	r2, r3, #3
 800dd18:	250f      	movs	r5, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800dd1a:	f046 0602 	orr.w	r6, r6, #2
 800dd1e:	f107 47b0 	add.w	r7, r7, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800dd22:	0092      	lsls	r2, r2, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800dd24:	f8ca 60f4 	str.w	r6, [sl, #244]	; 0xf4
 800dd28:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800dd2c:	f8da 60f4 	ldr.w	r6, [sl, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800dd30:	fa05 fc02 	lsl.w	ip, r5, r2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800dd34:	f006 0602 	and.w	r6, r6, #2
 800dd38:	9603      	str	r6, [sp, #12]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800dd3a:	4e42      	ldr	r6, [pc, #264]	; (800de44 <HAL_GPIO_Init+0x210>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800dd3c:	9d03      	ldr	r5, [sp, #12]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800dd3e:	42b0      	cmp	r0, r6
        temp = SYSCFG->EXTICR[position >> 2U];
 800dd40:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800dd42:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800dd46:	d020      	beq.n	800dd8a <HAL_GPIO_Init+0x156>
 800dd48:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800dd4c:	42b0      	cmp	r0, r6
 800dd4e:	d056      	beq.n	800ddfe <HAL_GPIO_Init+0x1ca>
 800dd50:	4e3d      	ldr	r6, [pc, #244]	; (800de48 <HAL_GPIO_Init+0x214>)
 800dd52:	42b0      	cmp	r0, r6
 800dd54:	d058      	beq.n	800de08 <HAL_GPIO_Init+0x1d4>
 800dd56:	4e3d      	ldr	r6, [pc, #244]	; (800de4c <HAL_GPIO_Init+0x218>)
 800dd58:	42b0      	cmp	r0, r6
 800dd5a:	d04b      	beq.n	800ddf4 <HAL_GPIO_Init+0x1c0>
 800dd5c:	4e3c      	ldr	r6, [pc, #240]	; (800de50 <HAL_GPIO_Init+0x21c>)
 800dd5e:	42b0      	cmp	r0, r6
 800dd60:	d05c      	beq.n	800de1c <HAL_GPIO_Init+0x1e8>
 800dd62:	4e3c      	ldr	r6, [pc, #240]	; (800de54 <HAL_GPIO_Init+0x220>)
 800dd64:	42b0      	cmp	r0, r6
 800dd66:	d05e      	beq.n	800de26 <HAL_GPIO_Init+0x1f2>
 800dd68:	4e3b      	ldr	r6, [pc, #236]	; (800de58 <HAL_GPIO_Init+0x224>)
 800dd6a:	42b0      	cmp	r0, r6
 800dd6c:	d051      	beq.n	800de12 <HAL_GPIO_Init+0x1de>
 800dd6e:	4e3b      	ldr	r6, [pc, #236]	; (800de5c <HAL_GPIO_Init+0x228>)
 800dd70:	42b0      	cmp	r0, r6
 800dd72:	d05d      	beq.n	800de30 <HAL_GPIO_Init+0x1fc>
 800dd74:	4e3a      	ldr	r6, [pc, #232]	; (800de60 <HAL_GPIO_Init+0x22c>)
 800dd76:	42b0      	cmp	r0, r6
 800dd78:	d05f      	beq.n	800de3a <HAL_GPIO_Init+0x206>
 800dd7a:	4e3a      	ldr	r6, [pc, #232]	; (800de64 <HAL_GPIO_Init+0x230>)
 800dd7c:	42b0      	cmp	r0, r6
 800dd7e:	bf0c      	ite	eq
 800dd80:	2609      	moveq	r6, #9
 800dd82:	260a      	movne	r6, #10
 800dd84:	fa06 f202 	lsl.w	r2, r6, r2
 800dd88:	4315      	orrs	r5, r2
        SYSCFG->EXTICR[position >> 2U] = temp;
 800dd8a:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 800dd8c:	ea6f 0608 	mvn.w	r6, r8
        temp = EXTI_CurrentCPU->IMR1;
 800dd90:	f8db 2000 	ldr.w	r2, [fp]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800dd94:	03e5      	lsls	r5, r4, #15
    position++;
 800dd96:	f103 0301 	add.w	r3, r3, #1
        temp &= ~(iocurrent);
 800dd9a:	bf54      	ite	pl
 800dd9c:	4032      	andpl	r2, r6
          temp |= iocurrent;
 800dd9e:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI_CurrentCPU->IMR1 = temp;
 800dda2:	f8cb 2000 	str.w	r2, [fp]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800dda6:	03a2      	lsls	r2, r4, #14
        temp = EXTI_CurrentCPU->EMR1;
 800dda8:	f8db 5004 	ldr.w	r5, [fp, #4]
        temp = EXTI->RTSR1;
 800ddac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 800ddb0:	bf54      	ite	pl
 800ddb2:	4035      	andpl	r5, r6
          temp |= iocurrent;
 800ddb4:	ea48 0505 	orrmi.w	r5, r8, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800ddb8:	02e7      	lsls	r7, r4, #11
        EXTI_CurrentCPU->EMR1 = temp;
 800ddba:	f8cb 5004 	str.w	r5, [fp, #4]
        temp = EXTI->RTSR1;
 800ddbe:	6815      	ldr	r5, [r2, #0]
        EXTI->RTSR1 = temp;
 800ddc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 800ddc4:	bf54      	ite	pl
 800ddc6:	4035      	andpl	r5, r6
          temp |= iocurrent;
 800ddc8:	ea48 0505 	orrmi.w	r5, r8, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800ddcc:	02a4      	lsls	r4, r4, #10
        EXTI->FTSR1 = temp;
 800ddce:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
        EXTI->RTSR1 = temp;
 800ddd2:	6015      	str	r5, [r2, #0]
        temp = EXTI->FTSR1;
 800ddd4:	6852      	ldr	r2, [r2, #4]
        temp &= ~(iocurrent);
 800ddd6:	bf54      	ite	pl
 800ddd8:	4032      	andpl	r2, r6
          temp |= iocurrent;
 800ddda:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR1 = temp;
 800ddde:	6062      	str	r2, [r4, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800dde0:	fa39 f203 	lsrs.w	r2, r9, r3
 800dde4:	f47f af55 	bne.w	800dc92 <HAL_GPIO_Init+0x5e>
  }
}
 800dde8:	b005      	add	sp, #20
 800ddea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddee:	40bd      	lsls	r5, r7
 800ddf0:	43ed      	mvns	r5, r5
 800ddf2:	e775      	b.n	800dce0 <HAL_GPIO_Init+0xac>
 800ddf4:	2603      	movs	r6, #3
 800ddf6:	fa06 f202 	lsl.w	r2, r6, r2
 800ddfa:	4315      	orrs	r5, r2
 800ddfc:	e7c5      	b.n	800dd8a <HAL_GPIO_Init+0x156>
 800ddfe:	2601      	movs	r6, #1
 800de00:	fa06 f202 	lsl.w	r2, r6, r2
 800de04:	4315      	orrs	r5, r2
 800de06:	e7c0      	b.n	800dd8a <HAL_GPIO_Init+0x156>
 800de08:	2602      	movs	r6, #2
 800de0a:	fa06 f202 	lsl.w	r2, r6, r2
 800de0e:	4315      	orrs	r5, r2
 800de10:	e7bb      	b.n	800dd8a <HAL_GPIO_Init+0x156>
 800de12:	2606      	movs	r6, #6
 800de14:	fa06 f202 	lsl.w	r2, r6, r2
 800de18:	4315      	orrs	r5, r2
 800de1a:	e7b6      	b.n	800dd8a <HAL_GPIO_Init+0x156>
 800de1c:	2604      	movs	r6, #4
 800de1e:	fa06 f202 	lsl.w	r2, r6, r2
 800de22:	4315      	orrs	r5, r2
 800de24:	e7b1      	b.n	800dd8a <HAL_GPIO_Init+0x156>
 800de26:	2605      	movs	r6, #5
 800de28:	fa06 f202 	lsl.w	r2, r6, r2
 800de2c:	4315      	orrs	r5, r2
 800de2e:	e7ac      	b.n	800dd8a <HAL_GPIO_Init+0x156>
 800de30:	2607      	movs	r6, #7
 800de32:	fa06 f202 	lsl.w	r2, r6, r2
 800de36:	4315      	orrs	r5, r2
 800de38:	e7a7      	b.n	800dd8a <HAL_GPIO_Init+0x156>
 800de3a:	2608      	movs	r6, #8
 800de3c:	fa06 f202 	lsl.w	r2, r6, r2
 800de40:	4315      	orrs	r5, r2
 800de42:	e7a2      	b.n	800dd8a <HAL_GPIO_Init+0x156>
 800de44:	58020000 	.word	0x58020000
 800de48:	58020800 	.word	0x58020800
 800de4c:	58020c00 	.word	0x58020c00
 800de50:	58021000 	.word	0x58021000
 800de54:	58021400 	.word	0x58021400
 800de58:	58021800 	.word	0x58021800
 800de5c:	58021c00 	.word	0x58021c00
 800de60:	58022000 	.word	0x58022000
 800de64:	58022400 	.word	0x58022400
 800de68:	58024400 	.word	0x58024400
 800de6c:	58000080 	.word	0x58000080

0800de70 <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800de70:	2900      	cmp	r1, #0
 800de72:	f000 80ac 	beq.w	800dfce <HAL_GPIO_DeInit+0x15e>
  uint32_t position = 0x00U;
 800de76:	2300      	movs	r3, #0
{
 800de78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de7c:	f8df a170 	ldr.w	sl, [pc, #368]	; 800dff0 <HAL_GPIO_DeInit+0x180>
 800de80:	b083      	sub	sp, #12
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800de82:	f8df 9170 	ldr.w	r9, [pc, #368]	; 800dff4 <HAL_GPIO_DeInit+0x184>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800de86:	f8df 8170 	ldr.w	r8, [pc, #368]	; 800dff8 <HAL_GPIO_DeInit+0x188>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800de8a:	f8df b170 	ldr.w	fp, [pc, #368]	; 800dffc <HAL_GPIO_DeInit+0x18c>
    iocurrent = GPIO_Pin & (1UL << position) ;
 800de8e:	f04f 0e01 	mov.w	lr, #1
 800de92:	fa0e f403 	lsl.w	r4, lr, r3
    if (iocurrent != 0x00U)
 800de96:	ea14 0c01 	ands.w	ip, r4, r1
 800de9a:	d073      	beq.n	800df84 <HAL_GPIO_DeInit+0x114>
      tmp = SYSCFG->EXTICR[position >> 2U];
 800de9c:	f023 0503 	bic.w	r5, r3, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800dea0:	f003 0203 	and.w	r2, r3, #3
 800dea4:	260f      	movs	r6, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800dea6:	4548      	cmp	r0, r9
 800dea8:	4455      	add	r5, sl
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800deaa:	ea4f 0282 	mov.w	r2, r2, lsl #2
      tmp = SYSCFG->EXTICR[position >> 2U];
 800deae:	68af      	ldr	r7, [r5, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800deb0:	fa06 f602 	lsl.w	r6, r6, r2
 800deb4:	ea07 0706 	and.w	r7, r7, r6
 800deb8:	9701      	str	r7, [sp, #4]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800deba:	d023      	beq.n	800df04 <HAL_GPIO_DeInit+0x94>
 800debc:	4558      	cmp	r0, fp
 800debe:	d06a      	beq.n	800df96 <HAL_GPIO_DeInit+0x126>
 800dec0:	4f46      	ldr	r7, [pc, #280]	; (800dfdc <HAL_GPIO_DeInit+0x16c>)
 800dec2:	42b8      	cmp	r0, r7
 800dec4:	d06a      	beq.n	800df9c <HAL_GPIO_DeInit+0x12c>
 800dec6:	4f46      	ldr	r7, [pc, #280]	; (800dfe0 <HAL_GPIO_DeInit+0x170>)
 800dec8:	42b8      	cmp	r0, r7
 800deca:	d071      	beq.n	800dfb0 <HAL_GPIO_DeInit+0x140>
 800decc:	4f45      	ldr	r7, [pc, #276]	; (800dfe4 <HAL_GPIO_DeInit+0x174>)
 800dece:	42b8      	cmp	r0, r7
 800ded0:	d073      	beq.n	800dfba <HAL_GPIO_DeInit+0x14a>
 800ded2:	4f45      	ldr	r7, [pc, #276]	; (800dfe8 <HAL_GPIO_DeInit+0x178>)
 800ded4:	42b8      	cmp	r0, r7
 800ded6:	d066      	beq.n	800dfa6 <HAL_GPIO_DeInit+0x136>
 800ded8:	4f44      	ldr	r7, [pc, #272]	; (800dfec <HAL_GPIO_DeInit+0x17c>)
 800deda:	42b8      	cmp	r0, r7
 800dedc:	d059      	beq.n	800df92 <HAL_GPIO_DeInit+0x122>
 800dede:	f8df e120 	ldr.w	lr, [pc, #288]	; 800e000 <HAL_GPIO_DeInit+0x190>
 800dee2:	4570      	cmp	r0, lr
 800dee4:	d074      	beq.n	800dfd0 <HAL_GPIO_DeInit+0x160>
 800dee6:	f8df e11c 	ldr.w	lr, [pc, #284]	; 800e004 <HAL_GPIO_DeInit+0x194>
 800deea:	4570      	cmp	r0, lr
 800deec:	d06a      	beq.n	800dfc4 <HAL_GPIO_DeInit+0x154>
 800deee:	f8df e118 	ldr.w	lr, [pc, #280]	; 800e008 <HAL_GPIO_DeInit+0x198>
 800def2:	4570      	cmp	r0, lr
 800def4:	bf14      	ite	ne
 800def6:	f04f 0e0a 	movne.w	lr, #10
 800defa:	f04f 0e09 	moveq.w	lr, #9
 800defe:	fa0e f202 	lsl.w	r2, lr, r2
 800df02:	e000      	b.n	800df06 <HAL_GPIO_DeInit+0x96>
 800df04:	2200      	movs	r2, #0
 800df06:	9f01      	ldr	r7, [sp, #4]
 800df08:	4297      	cmp	r7, r2
 800df0a:	d119      	bne.n	800df40 <HAL_GPIO_DeInit+0xd0>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800df0c:	f8d8 7000 	ldr.w	r7, [r8]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800df10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800df14:	ea27 070c 	bic.w	r7, r7, ip
 800df18:	f8c8 7000 	str.w	r7, [r8]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800df1c:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800df20:	ea27 070c 	bic.w	r7, r7, ip
 800df24:	f8c8 7004 	str.w	r7, [r8, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800df28:	6817      	ldr	r7, [r2, #0]
 800df2a:	ea27 070c 	bic.w	r7, r7, ip
 800df2e:	6017      	str	r7, [r2, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800df30:	6857      	ldr	r7, [r2, #4]
 800df32:	ea27 070c 	bic.w	r7, r7, ip
 800df36:	6057      	str	r7, [r2, #4]

        tmp = 0x0FUL << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800df38:	68aa      	ldr	r2, [r5, #8]
 800df3a:	ea22 0606 	bic.w	r6, r2, r6
 800df3e:	60ae      	str	r6, [r5, #8]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800df40:	005a      	lsls	r2, r3, #1
 800df42:	2603      	movs	r6, #3
 800df44:	f8d0 c000 	ldr.w	ip, [r0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800df48:	270f      	movs	r7, #15
 800df4a:	fa23 f506 	lsr.w	r5, r3, r6
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800df4e:	4096      	lsls	r6, r2
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800df50:	f003 0207 	and.w	r2, r3, #7
 800df54:	eb00 0585 	add.w	r5, r0, r5, lsl #2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800df58:	ea4c 0c06 	orr.w	ip, ip, r6
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800df5c:	0092      	lsls	r2, r2, #2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800df5e:	f8c0 c000 	str.w	ip, [r0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800df62:	4097      	lsls	r7, r2
 800df64:	6a2a      	ldr	r2, [r5, #32]
 800df66:	ea22 0207 	bic.w	r2, r2, r7
 800df6a:	622a      	str	r2, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800df6c:	68c2      	ldr	r2, [r0, #12]
 800df6e:	ea22 0206 	bic.w	r2, r2, r6
 800df72:	60c2      	str	r2, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800df74:	6842      	ldr	r2, [r0, #4]
 800df76:	ea22 0404 	bic.w	r4, r2, r4
 800df7a:	6044      	str	r4, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800df7c:	6882      	ldr	r2, [r0, #8]
 800df7e:	ea22 0606 	bic.w	r6, r2, r6
 800df82:	6086      	str	r6, [r0, #8]
    }

    position++;
 800df84:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00U)
 800df86:	fa31 f203 	lsrs.w	r2, r1, r3
 800df8a:	d180      	bne.n	800de8e <HAL_GPIO_DeInit+0x1e>
  }
}
 800df8c:	b003      	add	sp, #12
 800df8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df92:	f04f 0e06 	mov.w	lr, #6
 800df96:	fa0e f202 	lsl.w	r2, lr, r2
 800df9a:	e7b4      	b.n	800df06 <HAL_GPIO_DeInit+0x96>
 800df9c:	f04f 0e02 	mov.w	lr, #2
 800dfa0:	fa0e f202 	lsl.w	r2, lr, r2
 800dfa4:	e7af      	b.n	800df06 <HAL_GPIO_DeInit+0x96>
 800dfa6:	f04f 0e05 	mov.w	lr, #5
 800dfaa:	fa0e f202 	lsl.w	r2, lr, r2
 800dfae:	e7aa      	b.n	800df06 <HAL_GPIO_DeInit+0x96>
 800dfb0:	f04f 0e03 	mov.w	lr, #3
 800dfb4:	fa0e f202 	lsl.w	r2, lr, r2
 800dfb8:	e7a5      	b.n	800df06 <HAL_GPIO_DeInit+0x96>
 800dfba:	f04f 0e04 	mov.w	lr, #4
 800dfbe:	fa0e f202 	lsl.w	r2, lr, r2
 800dfc2:	e7a0      	b.n	800df06 <HAL_GPIO_DeInit+0x96>
 800dfc4:	f04f 0e08 	mov.w	lr, #8
 800dfc8:	fa0e f202 	lsl.w	r2, lr, r2
 800dfcc:	e79b      	b.n	800df06 <HAL_GPIO_DeInit+0x96>
 800dfce:	4770      	bx	lr
 800dfd0:	f04f 0e07 	mov.w	lr, #7
 800dfd4:	fa0e f202 	lsl.w	r2, lr, r2
 800dfd8:	e795      	b.n	800df06 <HAL_GPIO_DeInit+0x96>
 800dfda:	bf00      	nop
 800dfdc:	58020800 	.word	0x58020800
 800dfe0:	58020c00 	.word	0x58020c00
 800dfe4:	58021000 	.word	0x58021000
 800dfe8:	58021400 	.word	0x58021400
 800dfec:	58021800 	.word	0x58021800
 800dff0:	58000400 	.word	0x58000400
 800dff4:	58020000 	.word	0x58020000
 800dff8:	58000080 	.word	0x58000080
 800dffc:	58020400 	.word	0x58020400
 800e000:	58021c00 	.word	0x58021c00
 800e004:	58022000 	.word	0x58022000
 800e008:	58022400 	.word	0x58022400

0800e00c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800e00c:	6903      	ldr	r3, [r0, #16]
 800e00e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800e010:	bf14      	ite	ne
 800e012:	2001      	movne	r0, #1
 800e014:	2000      	moveq	r0, #0
 800e016:	4770      	bx	lr

0800e018 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800e018:	b902      	cbnz	r2, 800e01c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800e01a:	0409      	lsls	r1, r1, #16
 800e01c:	6181      	str	r1, [r0, #24]
  }
}
 800e01e:	4770      	bx	lr

0800e020 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800e020:	6943      	ldr	r3, [r0, #20]
 800e022:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800e026:	bf08      	it	eq
 800e028:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 800e02a:	6181      	str	r1, [r0, #24]
  }
}
 800e02c:	4770      	bx	lr
 800e02e:	bf00      	nop

0800e030 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e030:	b570      	push	{r4, r5, r6, lr}
 800e032:	4604      	mov	r4, r0
 800e034:	460d      	mov	r5, r1
 800e036:	4616      	mov	r6, r2
 800e038:	1c6a      	adds	r2, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800e03a:	6823      	ldr	r3, [r4, #0]
 800e03c:	d12c      	bne.n	800e098 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
 800e03e:	699a      	ldr	r2, [r3, #24]
 800e040:	0790      	lsls	r0, r2, #30
 800e042:	d427      	bmi.n	800e094 <I2C_WaitOnTXISFlagUntilTimeout+0x64>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e044:	699a      	ldr	r2, [r3, #24]
 800e046:	06d1      	lsls	r1, r2, #27
 800e048:	d5f9      	bpl.n	800e03e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e04a:	699a      	ldr	r2, [r3, #24]
 800e04c:	0691      	lsls	r1, r2, #26
 800e04e:	d5fc      	bpl.n	800e04a <I2C_WaitOnTXISFlagUntilTimeout+0x1a>

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e050:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e052:	2110      	movs	r1, #16
 800e054:	61d9      	str	r1, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e056:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800e058:	699a      	ldr	r2, [r3, #24]
 800e05a:	0790      	lsls	r0, r2, #30
 800e05c:	d501      	bpl.n	800e062 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
    hi2c->Instance->TXDR = 0x00U;
 800e05e:	2200      	movs	r2, #0
 800e060:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e062:	699a      	ldr	r2, [r3, #24]
 800e064:	07d1      	lsls	r1, r2, #31
 800e066:	d403      	bmi.n	800e070 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800e068:	699a      	ldr	r2, [r3, #24]
 800e06a:	f042 0201 	orr.w	r2, r2, #1
 800e06e:	619a      	str	r2, [r3, #24]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e070:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e072:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 800e074:	4e1b      	ldr	r6, [pc, #108]	; (800e0e4 <I2C_WaitOnTXISFlagUntilTimeout+0xb4>)
    hi2c->State = HAL_I2C_STATE_READY;
 800e076:	2520      	movs	r5, #32
      return HAL_ERROR;
 800e078:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 800e07a:	4032      	ands	r2, r6
 800e07c:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e07e:	6c63      	ldr	r3, [r4, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e080:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e084:	f043 0304 	orr.w	r3, r3, #4
 800e088:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800e08a:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e08e:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 800e092:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800e094:	2000      	movs	r0, #0
}
 800e096:	bd70      	pop	{r4, r5, r6, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800e098:	699a      	ldr	r2, [r3, #24]
 800e09a:	0792      	lsls	r2, r2, #30
 800e09c:	d4fa      	bmi.n	800e094 <I2C_WaitOnTXISFlagUntilTimeout+0x64>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e09e:	699a      	ldr	r2, [r3, #24]
 800e0a0:	06d0      	lsls	r0, r2, #27
 800e0a2:	d41b      	bmi.n	800e0dc <I2C_WaitOnTXISFlagUntilTimeout+0xac>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e0a4:	f7fd f8a2 	bl	800b1ec <HAL_GetTick>
 800e0a8:	1b80      	subs	r0, r0, r6
 800e0aa:	42a8      	cmp	r0, r5
 800e0ac:	d801      	bhi.n	800e0b2 <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 800e0ae:	2d00      	cmp	r5, #0
 800e0b0:	d1c2      	bne.n	800e038 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e0b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800e0b4:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e0b6:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 800e0b8:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e0ba:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800e0bc:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e0c0:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800e0c2:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e0c6:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800e0ca:	bd70      	pop	{r4, r5, r6, pc}
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e0cc:	f7fd f88e 	bl	800b1ec <HAL_GetTick>
 800e0d0:	1b80      	subs	r0, r0, r6
 800e0d2:	4285      	cmp	r5, r0
 800e0d4:	d3ed      	bcc.n	800e0b2 <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 800e0d6:	2d00      	cmp	r5, #0
 800e0d8:	d0eb      	beq.n	800e0b2 <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 800e0da:	6823      	ldr	r3, [r4, #0]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e0dc:	6999      	ldr	r1, [r3, #24]
 800e0de:	068a      	lsls	r2, r1, #26
 800e0e0:	d5f4      	bpl.n	800e0cc <I2C_WaitOnTXISFlagUntilTimeout+0x9c>
 800e0e2:	e7b5      	b.n	800e050 <I2C_WaitOnTXISFlagUntilTimeout+0x20>
 800e0e4:	fe00e800 	.word	0xfe00e800

0800e0e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800e0e8:	b570      	push	{r4, r5, r6, lr}
 800e0ea:	4604      	mov	r4, r0
 800e0ec:	460d      	mov	r5, r1
 800e0ee:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e0f0:	6823      	ldr	r3, [r4, #0]
 800e0f2:	6999      	ldr	r1, [r3, #24]
 800e0f4:	068a      	lsls	r2, r1, #26
 800e0f6:	d449      	bmi.n	800e18c <I2C_WaitOnSTOPFlagUntilTimeout+0xa4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e0f8:	6999      	ldr	r1, [r3, #24]
 800e0fa:	06ca      	lsls	r2, r1, #27
 800e0fc:	d526      	bpl.n	800e14c <I2C_WaitOnSTOPFlagUntilTimeout+0x64>
 800e0fe:	1c68      	adds	r0, r5, #1
 800e100:	d138      	bne.n	800e174 <I2C_WaitOnSTOPFlagUntilTimeout+0x8c>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e102:	699a      	ldr	r2, [r3, #24]
 800e104:	0691      	lsls	r1, r2, #26
 800e106:	d5fc      	bpl.n	800e102 <I2C_WaitOnSTOPFlagUntilTimeout+0x1a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e108:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e10a:	2110      	movs	r1, #16
 800e10c:	61d9      	str	r1, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e10e:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800e110:	699a      	ldr	r2, [r3, #24]
 800e112:	0790      	lsls	r0, r2, #30
 800e114:	d501      	bpl.n	800e11a <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
    hi2c->Instance->TXDR = 0x00U;
 800e116:	2200      	movs	r2, #0
 800e118:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e11a:	699a      	ldr	r2, [r3, #24]
 800e11c:	07d1      	lsls	r1, r2, #31
 800e11e:	d403      	bmi.n	800e128 <I2C_WaitOnSTOPFlagUntilTimeout+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800e120:	699a      	ldr	r2, [r3, #24]
 800e122:	f042 0201 	orr.w	r2, r2, #1
 800e126:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
 800e128:	685a      	ldr	r2, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e12a:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 800e12c:	4e18      	ldr	r6, [pc, #96]	; (800e190 <I2C_WaitOnSTOPFlagUntilTimeout+0xa8>)
    hi2c->State = HAL_I2C_STATE_READY;
 800e12e:	2520      	movs	r5, #32
      return HAL_ERROR;
 800e130:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 800e132:	4032      	ands	r2, r6
 800e134:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e136:	6c63      	ldr	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 800e138:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e13c:	f043 0304 	orr.w	r3, r3, #4
 800e140:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800e142:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e146:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 800e14a:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e14c:	f7fd f84e 	bl	800b1ec <HAL_GetTick>
 800e150:	1b80      	subs	r0, r0, r6
 800e152:	42a8      	cmp	r0, r5
 800e154:	d801      	bhi.n	800e15a <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
 800e156:	2d00      	cmp	r5, #0
 800e158:	d1ca      	bne.n	800e0f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e15a:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800e15c:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e15e:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 800e160:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e162:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800e164:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e168:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800e16a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e16e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800e172:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e174:	699a      	ldr	r2, [r3, #24]
 800e176:	0692      	lsls	r2, r2, #26
 800e178:	d4c6      	bmi.n	800e108 <I2C_WaitOnSTOPFlagUntilTimeout+0x20>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e17a:	f7fd f837 	bl	800b1ec <HAL_GetTick>
 800e17e:	1b80      	subs	r0, r0, r6
 800e180:	4285      	cmp	r5, r0
 800e182:	d3ea      	bcc.n	800e15a <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
 800e184:	2d00      	cmp	r5, #0
 800e186:	d0e8      	beq.n	800e15a <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
 800e188:	6823      	ldr	r3, [r4, #0]
 800e18a:	e7b8      	b.n	800e0fe <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 800e18c:	2000      	movs	r0, #0
}
 800e18e:	bd70      	pop	{r4, r5, r6, pc}
 800e190:	fe00e800 	.word	0xfe00e800

0800e194 <HAL_I2C_MspInit>:
}
 800e194:	4770      	bx	lr
 800e196:	bf00      	nop

0800e198 <HAL_I2C_Init>:
  if (hi2c == NULL)
 800e198:	2800      	cmp	r0, #0
 800e19a:	d04d      	beq.n	800e238 <HAL_I2C_Init+0xa0>
{
 800e19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800e19e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800e1a2:	4604      	mov	r4, r0
 800e1a4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d040      	beq.n	800e22e <HAL_I2C_Init+0x96>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800e1ac:	2124      	movs	r1, #36	; 0x24
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e1ae:	68e0      	ldr	r0, [r4, #12]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800e1b0:	e9d4 3200 	ldrd	r3, r2, [r4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800e1b4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e1b8:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
 800e1ba:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800e1bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 800e1c0:	f021 0101 	bic.w	r1, r1, #1
 800e1c4:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800e1c6:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800e1c8:	689a      	ldr	r2, [r3, #8]
 800e1ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e1ce:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800e1d0:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e1d2:	d028      	beq.n	800e226 <HAL_I2C_Init+0x8e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800e1d4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800e1d8:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800e1da:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800e1dc:	d102      	bne.n	800e1e4 <HAL_I2C_Init+0x4c>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800e1de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e1e2:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800e1e4:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e1e6:	2100      	movs	r1, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800e1e8:	4814      	ldr	r0, [pc, #80]	; (800e23c <HAL_I2C_Init+0xa4>)
  hi2c->State = HAL_I2C_STATE_READY;
 800e1ea:	2720      	movs	r7, #32
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800e1ec:	69a6      	ldr	r6, [r4, #24]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800e1ee:	4310      	orrs	r0, r2
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800e1f0:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800e1f4:	6058      	str	r0, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800e1f6:	432a      	orrs	r2, r5
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800e1f8:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800e1fa:	69e5      	ldr	r5, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800e1fc:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800e200:	6a26      	ldr	r6, [r4, #32]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800e202:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800e206:	4335      	orrs	r5, r6
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800e208:	60d8      	str	r0, [r3, #12]
  return HAL_OK;
 800e20a:	4608      	mov	r0, r1
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800e20c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800e20e:	601d      	str	r5, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800e210:	681a      	ldr	r2, [r3, #0]
 800e212:	f042 0201 	orr.w	r2, r2, #1
 800e216:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e218:	6461      	str	r1, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800e21a:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800e21e:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e220:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 800e224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800e226:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e22a:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800e22c:	e7da      	b.n	800e1e4 <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
 800e22e:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800e232:	f7ff ffaf 	bl	800e194 <HAL_I2C_MspInit>
 800e236:	e7b9      	b.n	800e1ac <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 800e238:	2001      	movs	r0, #1
}
 800e23a:	4770      	bx	lr
 800e23c:	02008000 	.word	0x02008000

0800e240 <HAL_I2C_MspDeInit>:
 800e240:	4770      	bx	lr
 800e242:	bf00      	nop

0800e244 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 800e244:	b1b0      	cbz	r0, 800e274 <HAL_I2C_DeInit+0x30>
  __HAL_I2C_DISABLE(hi2c);
 800e246:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800e248:	2324      	movs	r3, #36	; 0x24
{
 800e24a:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_BUSY;
 800e24c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 800e250:	4604      	mov	r4, r0
  __HAL_I2C_DISABLE(hi2c);
 800e252:	6813      	ldr	r3, [r2, #0]
 800e254:	f023 0301 	bic.w	r3, r3, #1
 800e258:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800e25a:	f7ff fff1 	bl	800e240 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e25e:	2300      	movs	r3, #0
 800e260:	6463      	str	r3, [r4, #68]	; 0x44
  return HAL_OK;
 800e262:	4618      	mov	r0, r3
  hi2c->State = HAL_I2C_STATE_RESET;
 800e264:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
 800e268:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  hi2c->PreviousState = I2C_STATE_NONE;
 800e26c:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e26e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 800e272:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800e274:	2001      	movs	r0, #1
}
 800e276:	4770      	bx	lr

0800e278 <HAL_I2C_Mem_Write>:
{
 800e278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e27c:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800e27e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800e282:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
 800e286:	2b20      	cmp	r3, #32
{
 800e288:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800e28a:	f040 80b0 	bne.w	800e3ee <HAL_I2C_Mem_Write+0x176>
    if ((pData == NULL) || (Size == 0U))
 800e28e:	9b08      	ldr	r3, [sp, #32]
 800e290:	4604      	mov	r4, r0
 800e292:	2b00      	cmp	r3, #0
 800e294:	f000 80a5 	beq.w	800e3e2 <HAL_I2C_Mem_Write+0x16a>
 800e298:	f1ba 0f00 	cmp.w	sl, #0
 800e29c:	f000 80a1 	beq.w	800e3e2 <HAL_I2C_Mem_Write+0x16a>
    __HAL_LOCK(hi2c);
 800e2a0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800e2a4:	2b01      	cmp	r3, #1
 800e2a6:	f000 80a2 	beq.w	800e3ee <HAL_I2C_Mem_Write+0x176>
 800e2aa:	2301      	movs	r3, #1
 800e2ac:	460e      	mov	r6, r1
 800e2ae:	4690      	mov	r8, r2
 800e2b0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800e2b4:	f7fc ff9a 	bl	800b1ec <HAL_GetTick>
 800e2b8:	4605      	mov	r5, r0
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 800e2ba:	e005      	b.n	800e2c8 <HAL_I2C_Mem_Write+0x50>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e2bc:	f7fc ff96 	bl	800b1ec <HAL_GetTick>
 800e2c0:	1b40      	subs	r0, r0, r5
 800e2c2:	2819      	cmp	r0, #25
 800e2c4:	f200 80af 	bhi.w	800e426 <HAL_I2C_Mem_Write+0x1ae>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e2c8:	f8d4 c000 	ldr.w	ip, [r4]
 800e2cc:	f8dc 3018 	ldr.w	r3, [ip, #24]
 800e2d0:	f413 4300 	ands.w	r3, r3, #32768	; 0x8000
 800e2d4:	d1f2      	bne.n	800e2bc <HAL_I2C_Mem_Write+0x44>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800e2d6:	2121      	movs	r1, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800e2d8:	2240      	movs	r2, #64	; 0x40
    hi2c->pBuffPtr  = pData;
 800e2da:	9808      	ldr	r0, [sp, #32]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800e2dc:	f3c6 0609 	ubfx	r6, r6, #0, #10
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800e2e0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800e2e4:	f8df e1e8 	ldr.w	lr, [pc, #488]	; 800e4d0 <HAL_I2C_Mem_Write+0x258>
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800e2e8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e2ec:	462a      	mov	r2, r5
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e2ee:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800e2f0:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800e2f4:	f8dc 1004 	ldr.w	r1, [ip, #4]
    hi2c->pBuffPtr  = pData;
 800e2f8:	6260      	str	r0, [r4, #36]	; 0x24
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800e2fa:	fa5f f089 	uxtb.w	r0, r9
 800e2fe:	ea01 010e 	and.w	r1, r1, lr
    hi2c->XferISR   = NULL;
 800e302:	6363      	str	r3, [r4, #52]	; 0x34
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800e304:	f8df e1cc 	ldr.w	lr, [pc, #460]	; 800e4d4 <HAL_I2C_Mem_Write+0x25c>
 800e308:	ea41 4300 	orr.w	r3, r1, r0, lsl #16
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e30c:	4639      	mov	r1, r7
 800e30e:	4620      	mov	r0, r4
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800e310:	4333      	orrs	r3, r6
 800e312:	ea43 0e0e 	orr.w	lr, r3, lr
 800e316:	f8cc e004 	str.w	lr, [ip, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e31a:	f7ff fe89 	bl	800e030 <I2C_WaitOnTXISFlagUntilTimeout>
 800e31e:	2800      	cmp	r0, #0
 800e320:	d171      	bne.n	800e406 <HAL_I2C_Mem_Write+0x18e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e322:	f1b9 0f01 	cmp.w	r9, #1
 800e326:	d00a      	beq.n	800e33e <HAL_I2C_Mem_Write+0xc6>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800e328:	ea4f 2018 	mov.w	r0, r8, lsr #8
 800e32c:	6823      	ldr	r3, [r4, #0]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e32e:	462a      	mov	r2, r5
 800e330:	4639      	mov	r1, r7
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800e332:	6298      	str	r0, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e334:	4620      	mov	r0, r4
 800e336:	f7ff fe7b 	bl	800e030 <I2C_WaitOnTXISFlagUntilTimeout>
 800e33a:	2800      	cmp	r0, #0
 800e33c:	d163      	bne.n	800e406 <HAL_I2C_Mem_Write+0x18e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e33e:	fa5f f288 	uxtb.w	r2, r8
 800e342:	6821      	ldr	r1, [r4, #0]
 800e344:	628a      	str	r2, [r1, #40]	; 0x28
 800e346:	1c78      	adds	r0, r7, #1
 800e348:	f040 8089 	bne.w	800e45e <HAL_I2C_Mem_Write+0x1e6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e34c:	698b      	ldr	r3, [r1, #24]
 800e34e:	061a      	lsls	r2, r3, #24
 800e350:	d5fc      	bpl.n	800e34c <HAL_I2C_Mem_Write+0xd4>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e352:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800e354:	b29b      	uxth	r3, r3
 800e356:	2bff      	cmp	r3, #255	; 0xff
 800e358:	f240 8090 	bls.w	800e47c <HAL_I2C_Mem_Write+0x204>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800e35c:	684b      	ldr	r3, [r1, #4]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e35e:	20ff      	movs	r0, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800e360:	4a58      	ldr	r2, [pc, #352]	; (800e4c4 <HAL_I2C_Mem_Write+0x24c>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e362:	8520      	strh	r0, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800e364:	4013      	ands	r3, r2
 800e366:	4a58      	ldr	r2, [pc, #352]	; (800e4c8 <HAL_I2C_Mem_Write+0x250>)
 800e368:	4333      	orrs	r3, r6
 800e36a:	431a      	orrs	r2, r3
 800e36c:	604a      	str	r2, [r1, #4]
 800e36e:	f8df 8154 	ldr.w	r8, [pc, #340]	; 800e4c4 <HAL_I2C_Mem_Write+0x24c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e372:	f04f 0aff 	mov.w	sl, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800e376:	f8df 9150 	ldr.w	r9, [pc, #336]	; 800e4c8 <HAL_I2C_Mem_Write+0x250>
 800e37a:	e004      	b.n	800e386 <HAL_I2C_Mem_Write+0x10e>
    while (hi2c->XferCount > 0U);
 800e37c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800e37e:	b29b      	uxth	r3, r3
 800e380:	2b00      	cmp	r3, #0
 800e382:	f000 8089 	beq.w	800e498 <HAL_I2C_Mem_Write+0x220>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e386:	462a      	mov	r2, r5
 800e388:	4639      	mov	r1, r7
 800e38a:	4620      	mov	r0, r4
 800e38c:	f7ff fe50 	bl	800e030 <I2C_WaitOnTXISFlagUntilTimeout>
 800e390:	2800      	cmp	r0, #0
 800e392:	d171      	bne.n	800e478 <HAL_I2C_Mem_Write+0x200>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800e394:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e396:	6821      	ldr	r1, [r4, #0]
 800e398:	f810 2b01 	ldrb.w	r2, [r0], #1
      hi2c->XferSize--;
 800e39c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800e39e:	628a      	str	r2, [r1, #40]	; 0x28
      hi2c->XferCount--;
 800e3a0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800e3a2:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 800e3a4:	6260      	str	r0, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800e3a6:	3a01      	subs	r2, #1
      hi2c->XferSize--;
 800e3a8:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800e3aa:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800e3ac:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800e3ae:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e3b0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800e3b2:	b292      	uxth	r2, r2
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d1e1      	bne.n	800e37c <HAL_I2C_Mem_Write+0x104>
 800e3b8:	2a00      	cmp	r2, #0
 800e3ba:	d0df      	beq.n	800e37c <HAL_I2C_Mem_Write+0x104>
 800e3bc:	1c78      	adds	r0, r7, #1
 800e3be:	d127      	bne.n	800e410 <HAL_I2C_Mem_Write+0x198>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e3c0:	698b      	ldr	r3, [r1, #24]
 800e3c2:	061a      	lsls	r2, r3, #24
 800e3c4:	d5fc      	bpl.n	800e3c0 <HAL_I2C_Mem_Write+0x148>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e3c6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800e3c8:	b29b      	uxth	r3, r3
 800e3ca:	2bff      	cmp	r3, #255	; 0xff
 800e3cc:	d939      	bls.n	800e442 <HAL_I2C_Mem_Write+0x1ca>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800e3ce:	684b      	ldr	r3, [r1, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e3d0:	f8a4 a028 	strh.w	sl, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800e3d4:	ea03 0308 	and.w	r3, r3, r8
 800e3d8:	4333      	orrs	r3, r6
 800e3da:	ea43 0309 	orr.w	r3, r3, r9
 800e3de:	604b      	str	r3, [r1, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800e3e0:	e7cc      	b.n	800e37c <HAL_I2C_Mem_Write+0x104>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e3e2:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
 800e3e6:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e3e8:	6463      	str	r3, [r4, #68]	; 0x44
}
 800e3ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
 800e3ee:	2002      	movs	r0, #2
}
 800e3f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e3f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800e3f6:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e3f8:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e3fa:	430b      	orrs	r3, r1
 800e3fc:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800e3fe:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e402:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800e406:	2300      	movs	r3, #0
      return HAL_ERROR;
 800e408:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 800e40a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800e40e:	e7ec      	b.n	800e3ea <HAL_I2C_Mem_Write+0x172>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e410:	698b      	ldr	r3, [r1, #24]
 800e412:	061b      	lsls	r3, r3, #24
 800e414:	d4d7      	bmi.n	800e3c6 <HAL_I2C_Mem_Write+0x14e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e416:	f7fc fee9 	bl	800b1ec <HAL_GetTick>
 800e41a:	1b40      	subs	r0, r0, r5
 800e41c:	4287      	cmp	r7, r0
 800e41e:	d302      	bcc.n	800e426 <HAL_I2C_Mem_Write+0x1ae>
 800e420:	b10f      	cbz	r7, 800e426 <HAL_I2C_Mem_Write+0x1ae>
 800e422:	6821      	ldr	r1, [r4, #0]
 800e424:	e7ca      	b.n	800e3bc <HAL_I2C_Mem_Write+0x144>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e426:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800e428:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e42a:	2200      	movs	r2, #0
          return HAL_ERROR;
 800e42c:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e42e:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800e430:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e434:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800e436:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e43a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800e43e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          hi2c->XferSize = hi2c->XferCount;
 800e442:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800e444:	684b      	ldr	r3, [r1, #4]
          hi2c->XferSize = hi2c->XferCount;
 800e446:	b292      	uxth	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800e448:	ea03 0308 	and.w	r3, r3, r8
 800e44c:	b2d0      	uxtb	r0, r2
          hi2c->XferSize = hi2c->XferCount;
 800e44e:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800e450:	4333      	orrs	r3, r6
 800e452:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e456:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800e45a:	604b      	str	r3, [r1, #4]
}
 800e45c:	e78e      	b.n	800e37c <HAL_I2C_Mem_Write+0x104>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e45e:	698b      	ldr	r3, [r1, #24]
 800e460:	061b      	lsls	r3, r3, #24
 800e462:	f53f af76 	bmi.w	800e352 <HAL_I2C_Mem_Write+0xda>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e466:	f7fc fec1 	bl	800b1ec <HAL_GetTick>
 800e46a:	1b40      	subs	r0, r0, r5
 800e46c:	4287      	cmp	r7, r0
 800e46e:	d3c1      	bcc.n	800e3f4 <HAL_I2C_Mem_Write+0x17c>
 800e470:	2f00      	cmp	r7, #0
 800e472:	d0bf      	beq.n	800e3f4 <HAL_I2C_Mem_Write+0x17c>
 800e474:	6821      	ldr	r1, [r4, #0]
 800e476:	e766      	b.n	800e346 <HAL_I2C_Mem_Write+0xce>
        return HAL_ERROR;
 800e478:	2001      	movs	r0, #1
 800e47a:	e7b6      	b.n	800e3ea <HAL_I2C_Mem_Write+0x172>
      hi2c->XferSize = hi2c->XferCount;
 800e47c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800e47e:	4811      	ldr	r0, [pc, #68]	; (800e4c4 <HAL_I2C_Mem_Write+0x24c>)
 800e480:	684b      	ldr	r3, [r1, #4]
      hi2c->XferSize = hi2c->XferCount;
 800e482:	b292      	uxth	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800e484:	4003      	ands	r3, r0
 800e486:	b2d0      	uxtb	r0, r2
      hi2c->XferSize = hi2c->XferCount;
 800e488:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800e48a:	4333      	orrs	r3, r6
 800e48c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e490:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800e494:	604b      	str	r3, [r1, #4]
}
 800e496:	e76a      	b.n	800e36e <HAL_I2C_Mem_Write+0xf6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e498:	462a      	mov	r2, r5
 800e49a:	4639      	mov	r1, r7
 800e49c:	4620      	mov	r0, r4
 800e49e:	f7ff fe23 	bl	800e0e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800e4a2:	2800      	cmp	r0, #0
 800e4a4:	d1e8      	bne.n	800e478 <HAL_I2C_Mem_Write+0x200>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e4a6:	6823      	ldr	r3, [r4, #0]
 800e4a8:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800e4aa:	4d08      	ldr	r5, [pc, #32]	; (800e4cc <HAL_I2C_Mem_Write+0x254>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e4ac:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800e4ae:	685a      	ldr	r2, [r3, #4]
 800e4b0:	402a      	ands	r2, r5
 800e4b2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800e4b4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800e4b8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e4bc:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800e4c0:	e793      	b.n	800e3ea <HAL_I2C_Mem_Write+0x172>
 800e4c2:	bf00      	nop
 800e4c4:	fc009c00 	.word	0xfc009c00
 800e4c8:	01ff0000 	.word	0x01ff0000
 800e4cc:	fe00e800 	.word	0xfe00e800
 800e4d0:	fc009800 	.word	0xfc009800
 800e4d4:	81002000 	.word	0x81002000

0800e4d8 <HAL_I2C_Mem_Read>:
{
 800e4d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4dc:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800e4de:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800e4e2:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
 800e4e6:	2b20      	cmp	r3, #32
{
 800e4e8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800e4ea:	f040 80b3 	bne.w	800e654 <HAL_I2C_Mem_Read+0x17c>
    if ((pData == NULL) || (Size == 0U))
 800e4ee:	9b08      	ldr	r3, [sp, #32]
 800e4f0:	4604      	mov	r4, r0
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	f000 80a8 	beq.w	800e648 <HAL_I2C_Mem_Read+0x170>
 800e4f8:	f1ba 0f00 	cmp.w	sl, #0
 800e4fc:	f000 80a4 	beq.w	800e648 <HAL_I2C_Mem_Read+0x170>
    __HAL_LOCK(hi2c);
 800e500:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800e504:	2b01      	cmp	r3, #1
 800e506:	f000 80a5 	beq.w	800e654 <HAL_I2C_Mem_Read+0x17c>
 800e50a:	2301      	movs	r3, #1
 800e50c:	460f      	mov	r7, r1
 800e50e:	4690      	mov	r8, r2
 800e510:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800e514:	f7fc fe6a 	bl	800b1ec <HAL_GetTick>
 800e518:	4606      	mov	r6, r0
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 800e51a:	e005      	b.n	800e528 <HAL_I2C_Mem_Read+0x50>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e51c:	f7fc fe66 	bl	800b1ec <HAL_GetTick>
 800e520:	1b80      	subs	r0, r0, r6
 800e522:	2819      	cmp	r0, #25
 800e524:	f200 8082 	bhi.w	800e62c <HAL_I2C_Mem_Read+0x154>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e528:	f8d4 c000 	ldr.w	ip, [r4]
 800e52c:	f8dc 3018 	ldr.w	r3, [ip, #24]
 800e530:	f413 4300 	ands.w	r3, r3, #32768	; 0x8000
 800e534:	d1f2      	bne.n	800e51c <HAL_I2C_Mem_Read+0x44>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800e536:	2122      	movs	r1, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800e538:	2240      	movs	r2, #64	; 0x40
    hi2c->pBuffPtr  = pData;
 800e53a:	9808      	ldr	r0, [sp, #32]
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800e53c:	f3c7 0709 	ubfx	r7, r7, #0, #10
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800e540:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800e544:	f8df e1f0 	ldr.w	lr, [pc, #496]	; 800e738 <HAL_I2C_Mem_Read+0x260>
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800e548:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e54c:	4632      	mov	r2, r6
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e54e:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800e550:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800e554:	f8dc 1004 	ldr.w	r1, [ip, #4]
    hi2c->pBuffPtr  = pData;
 800e558:	6260      	str	r0, [r4, #36]	; 0x24
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800e55a:	fa5f f089 	uxtb.w	r0, r9
 800e55e:	ea01 010e 	and.w	r1, r1, lr
    hi2c->XferISR   = NULL;
 800e562:	6363      	str	r3, [r4, #52]	; 0x34
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800e564:	f8df e1e0 	ldr.w	lr, [pc, #480]	; 800e748 <HAL_I2C_Mem_Read+0x270>
 800e568:	ea41 4300 	orr.w	r3, r1, r0, lsl #16
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e56c:	4629      	mov	r1, r5
 800e56e:	4620      	mov	r0, r4
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800e570:	433b      	orrs	r3, r7
 800e572:	ea43 0e0e 	orr.w	lr, r3, lr
 800e576:	f8cc e004 	str.w	lr, [ip, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e57a:	f7ff fd59 	bl	800e030 <I2C_WaitOnTXISFlagUntilTimeout>
 800e57e:	2800      	cmp	r0, #0
 800e580:	d174      	bne.n	800e66c <HAL_I2C_Mem_Read+0x194>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e582:	f1b9 0f01 	cmp.w	r9, #1
 800e586:	d00a      	beq.n	800e59e <HAL_I2C_Mem_Read+0xc6>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800e588:	ea4f 2018 	mov.w	r0, r8, lsr #8
 800e58c:	6823      	ldr	r3, [r4, #0]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e58e:	4632      	mov	r2, r6
 800e590:	4629      	mov	r1, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800e592:	6298      	str	r0, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e594:	4620      	mov	r0, r4
 800e596:	f7ff fd4b 	bl	800e030 <I2C_WaitOnTXISFlagUntilTimeout>
 800e59a:	2800      	cmp	r0, #0
 800e59c:	d166      	bne.n	800e66c <HAL_I2C_Mem_Read+0x194>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e59e:	fa5f f288 	uxtb.w	r2, r8
 800e5a2:	6823      	ldr	r3, [r4, #0]
 800e5a4:	629a      	str	r2, [r3, #40]	; 0x28
 800e5a6:	1c68      	adds	r0, r5, #1
 800e5a8:	f040 8091 	bne.w	800e6ce <HAL_I2C_Mem_Read+0x1f6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e5ac:	699a      	ldr	r2, [r3, #24]
 800e5ae:	0651      	lsls	r1, r2, #25
 800e5b0:	d5fc      	bpl.n	800e5ac <HAL_I2C_Mem_Read+0xd4>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e5b2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800e5b4:	b292      	uxth	r2, r2
 800e5b6:	2aff      	cmp	r2, #255	; 0xff
 800e5b8:	f240 8096 	bls.w	800e6e8 <HAL_I2C_Mem_Read+0x210>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800e5bc:	685a      	ldr	r2, [r3, #4]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e5be:	20ff      	movs	r0, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800e5c0:	495d      	ldr	r1, [pc, #372]	; (800e738 <HAL_I2C_Mem_Read+0x260>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e5c2:	8520      	strh	r0, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800e5c4:	400a      	ands	r2, r1
 800e5c6:	495d      	ldr	r1, [pc, #372]	; (800e73c <HAL_I2C_Mem_Read+0x264>)
 800e5c8:	433a      	orrs	r2, r7
 800e5ca:	4311      	orrs	r1, r2
 800e5cc:	6059      	str	r1, [r3, #4]
 800e5ce:	1c68      	adds	r0, r5, #1
 800e5d0:	f8df 8178 	ldr.w	r8, [pc, #376]	; 800e74c <HAL_I2C_Mem_Read+0x274>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e5d4:	f04f 0aff 	mov.w	sl, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800e5d8:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800e750 <HAL_I2C_Mem_Read+0x278>
 800e5dc:	d11c      	bne.n	800e618 <HAL_I2C_Mem_Read+0x140>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e5de:	699a      	ldr	r2, [r3, #24]
 800e5e0:	0751      	lsls	r1, r2, #29
 800e5e2:	d5fc      	bpl.n	800e5de <HAL_I2C_Mem_Read+0x106>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e5e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e5e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e5e8:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800e5ea:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800e5ec:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800e5ee:	3901      	subs	r1, #1
      hi2c->pBuffPtr++;
 800e5f0:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800e5f2:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 800e5f4:	b289      	uxth	r1, r1
      hi2c->pBuffPtr++;
 800e5f6:	3201      	adds	r2, #1
      hi2c->XferSize--;
 800e5f8:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800e5fa:	8561      	strh	r1, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e5fc:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800e5fe:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e600:	b289      	uxth	r1, r1
      hi2c->pBuffPtr++;
 800e602:	6262      	str	r2, [r4, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e604:	b90b      	cbnz	r3, 800e60a <HAL_I2C_Mem_Read+0x132>
 800e606:	2900      	cmp	r1, #0
 800e608:	d13f      	bne.n	800e68a <HAL_I2C_Mem_Read+0x1b2>
    while (hi2c->XferCount > 0U);
 800e60a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800e60c:	b29b      	uxth	r3, r3
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d07b      	beq.n	800e70a <HAL_I2C_Mem_Read+0x232>
 800e612:	1c68      	adds	r0, r5, #1
 800e614:	6823      	ldr	r3, [r4, #0]
 800e616:	d0e2      	beq.n	800e5de <HAL_I2C_Mem_Read+0x106>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e618:	699a      	ldr	r2, [r3, #24]
 800e61a:	0752      	lsls	r2, r2, #29
 800e61c:	d4e2      	bmi.n	800e5e4 <HAL_I2C_Mem_Read+0x10c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e61e:	f7fc fde5 	bl	800b1ec <HAL_GetTick>
 800e622:	1b80      	subs	r0, r0, r6
 800e624:	4285      	cmp	r5, r0
 800e626:	d301      	bcc.n	800e62c <HAL_I2C_Mem_Read+0x154>
 800e628:	2d00      	cmp	r5, #0
 800e62a:	d1f2      	bne.n	800e612 <HAL_I2C_Mem_Read+0x13a>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e62c:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800e62e:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e630:	2200      	movs	r2, #0
          return HAL_ERROR;
 800e632:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e634:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800e636:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e63a:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800e63c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e640:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800e644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e648:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
 800e64c:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e64e:	6463      	str	r3, [r4, #68]	; 0x44
}
 800e650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
 800e654:	2002      	movs	r0, #2
}
 800e656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e65a:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800e65c:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e65e:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e660:	430b      	orrs	r3, r1
 800e662:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800e664:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e668:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800e66c:	2300      	movs	r3, #0
      return HAL_ERROR;
 800e66e:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 800e670:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800e674:	e7ec      	b.n	800e650 <HAL_I2C_Mem_Read+0x178>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e676:	6993      	ldr	r3, [r2, #24]
 800e678:	061b      	lsls	r3, r3, #24
 800e67a:	d40c      	bmi.n	800e696 <HAL_I2C_Mem_Read+0x1be>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e67c:	f7fc fdb6 	bl	800b1ec <HAL_GetTick>
 800e680:	1b80      	subs	r0, r0, r6
 800e682:	4285      	cmp	r5, r0
 800e684:	d3d2      	bcc.n	800e62c <HAL_I2C_Mem_Read+0x154>
 800e686:	2d00      	cmp	r5, #0
 800e688:	d0d0      	beq.n	800e62c <HAL_I2C_Mem_Read+0x154>
 800e68a:	1c68      	adds	r0, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e68c:	6822      	ldr	r2, [r4, #0]
 800e68e:	d1f2      	bne.n	800e676 <HAL_I2C_Mem_Read+0x19e>
 800e690:	6993      	ldr	r3, [r2, #24]
 800e692:	0619      	lsls	r1, r3, #24
 800e694:	d5fc      	bpl.n	800e690 <HAL_I2C_Mem_Read+0x1b8>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e696:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800e698:	b29b      	uxth	r3, r3
 800e69a:	2bff      	cmp	r3, #255	; 0xff
 800e69c:	d909      	bls.n	800e6b2 <HAL_I2C_Mem_Read+0x1da>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800e69e:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e6a0:	f8a4 a028 	strh.w	sl, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800e6a4:	ea03 0308 	and.w	r3, r3, r8
 800e6a8:	433b      	orrs	r3, r7
 800e6aa:	ea43 0309 	orr.w	r3, r3, r9
 800e6ae:	6053      	str	r3, [r2, #4]
}
 800e6b0:	e7ab      	b.n	800e60a <HAL_I2C_Mem_Read+0x132>
          hi2c->XferSize = hi2c->XferCount;
 800e6b2:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800e6b4:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 800e6b6:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800e6b8:	ea03 0308 	and.w	r3, r3, r8
 800e6bc:	b2c8      	uxtb	r0, r1
          hi2c->XferSize = hi2c->XferCount;
 800e6be:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800e6c0:	433b      	orrs	r3, r7
 800e6c2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e6c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800e6ca:	6053      	str	r3, [r2, #4]
}
 800e6cc:	e79d      	b.n	800e60a <HAL_I2C_Mem_Read+0x132>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e6ce:	699a      	ldr	r2, [r3, #24]
 800e6d0:	0652      	lsls	r2, r2, #25
 800e6d2:	f53f af6e 	bmi.w	800e5b2 <HAL_I2C_Mem_Read+0xda>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e6d6:	f7fc fd89 	bl	800b1ec <HAL_GetTick>
 800e6da:	1b80      	subs	r0, r0, r6
 800e6dc:	4285      	cmp	r5, r0
 800e6de:	d3bc      	bcc.n	800e65a <HAL_I2C_Mem_Read+0x182>
 800e6e0:	2d00      	cmp	r5, #0
 800e6e2:	d0ba      	beq.n	800e65a <HAL_I2C_Mem_Read+0x182>
 800e6e4:	6823      	ldr	r3, [r4, #0]
 800e6e6:	e75e      	b.n	800e5a6 <HAL_I2C_Mem_Read+0xce>
      hi2c->XferSize = hi2c->XferCount;
 800e6e8:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800e6ea:	f8df c04c 	ldr.w	ip, [pc, #76]	; 800e738 <HAL_I2C_Mem_Read+0x260>
 800e6ee:	685a      	ldr	r2, [r3, #4]
      hi2c->XferSize = hi2c->XferCount;
 800e6f0:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800e6f2:	4813      	ldr	r0, [pc, #76]	; (800e740 <HAL_I2C_Mem_Read+0x268>)
 800e6f4:	ea02 020c 	and.w	r2, r2, ip
 800e6f8:	fa5f fc81 	uxtb.w	ip, r1
      hi2c->XferSize = hi2c->XferCount;
 800e6fc:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800e6fe:	433a      	orrs	r2, r7
 800e700:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 800e704:	4310      	orrs	r0, r2
 800e706:	6058      	str	r0, [r3, #4]
}
 800e708:	e761      	b.n	800e5ce <HAL_I2C_Mem_Read+0xf6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e70a:	4632      	mov	r2, r6
 800e70c:	4629      	mov	r1, r5
 800e70e:	4620      	mov	r0, r4
 800e710:	f7ff fcea 	bl	800e0e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800e714:	b968      	cbnz	r0, 800e732 <HAL_I2C_Mem_Read+0x25a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e716:	6823      	ldr	r3, [r4, #0]
 800e718:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800e71a:	4d0a      	ldr	r5, [pc, #40]	; (800e744 <HAL_I2C_Mem_Read+0x26c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e71c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800e71e:	685a      	ldr	r2, [r3, #4]
 800e720:	402a      	ands	r2, r5
 800e722:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800e724:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800e728:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e72c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800e730:	e78e      	b.n	800e650 <HAL_I2C_Mem_Read+0x178>
      return HAL_ERROR;
 800e732:	2001      	movs	r0, #1
 800e734:	e78c      	b.n	800e650 <HAL_I2C_Mem_Read+0x178>
 800e736:	bf00      	nop
 800e738:	fc009800 	.word	0xfc009800
 800e73c:	81ff2400 	.word	0x81ff2400
 800e740:	82002400 	.word	0x82002400
 800e744:	fe00e800 	.word	0xfe00e800
 800e748:	80002000 	.word	0x80002000
 800e74c:	fc009c00 	.word	0xfc009c00
 800e750:	01ff0000 	.word	0x01ff0000

0800e754 <HAL_I2C_GetState>:
  return hi2c->State;
 800e754:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 800e758:	4770      	bx	lr
 800e75a:	bf00      	nop

0800e75c <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 800e75c:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 800e75e:	4770      	bx	lr

0800e760 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e760:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800e764:	2a20      	cmp	r2, #32
 800e766:	d121      	bne.n	800e7ac <HAL_I2CEx_ConfigAnalogFilter+0x4c>
 800e768:	4603      	mov	r3, r0
{
 800e76a:	b470      	push	{r4, r5, r6}
 800e76c:	b2d5      	uxtb	r5, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e76e:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 800e772:	2a01      	cmp	r2, #1
 800e774:	d01c      	beq.n	800e7b0 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800e776:	681a      	ldr	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800e778:	2024      	movs	r0, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e77a:	2600      	movs	r6, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 800e77c:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800e780:	6814      	ldr	r4, [r2, #0]

    return HAL_OK;
 800e782:	4630      	mov	r0, r6
    __HAL_I2C_DISABLE(hi2c);
 800e784:	f024 0401 	bic.w	r4, r4, #1
 800e788:	6014      	str	r4, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800e78a:	6814      	ldr	r4, [r2, #0]
 800e78c:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 800e790:	6014      	str	r4, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800e792:	6814      	ldr	r4, [r2, #0]
 800e794:	4321      	orrs	r1, r4
 800e796:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 800e798:	6811      	ldr	r1, [r2, #0]
 800e79a:	f041 0101 	orr.w	r1, r1, #1
 800e79e:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800e7a0:	f883 5041 	strb.w	r5, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800e7a4:	f883 6040 	strb.w	r6, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800e7a8:	bc70      	pop	{r4, r5, r6}
 800e7aa:	4770      	bx	lr
    return HAL_BUSY;
 800e7ac:	2002      	movs	r0, #2
}
 800e7ae:	4770      	bx	lr
    return HAL_BUSY;
 800e7b0:	2002      	movs	r0, #2
}
 800e7b2:	bc70      	pop	{r4, r5, r6}
 800e7b4:	4770      	bx	lr
 800e7b6:	bf00      	nop

0800e7b8 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e7b8:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800e7bc:	2a20      	cmp	r2, #32
 800e7be:	d120      	bne.n	800e802 <HAL_I2CEx_ConfigDigitalFilter+0x4a>
 800e7c0:	4603      	mov	r3, r0
{
 800e7c2:	b470      	push	{r4, r5, r6}
 800e7c4:	b2d6      	uxtb	r6, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e7c6:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 800e7ca:	2a01      	cmp	r2, #1
 800e7cc:	d01b      	beq.n	800e806 <HAL_I2CEx_ConfigDigitalFilter+0x4e>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800e7ce:	681a      	ldr	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800e7d0:	2024      	movs	r0, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e7d2:	2500      	movs	r5, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 800e7d4:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800e7d8:	6814      	ldr	r4, [r2, #0]

    return HAL_OK;
 800e7da:	4628      	mov	r0, r5
    __HAL_I2C_DISABLE(hi2c);
 800e7dc:	f024 0401 	bic.w	r4, r4, #1
 800e7e0:	6014      	str	r4, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 800e7e2:	6814      	ldr	r4, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 800e7e4:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 800e7e8:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 800e7ec:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 800e7ee:	6811      	ldr	r1, [r2, #0]
 800e7f0:	f041 0101 	orr.w	r1, r1, #1
 800e7f4:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800e7f6:	f883 6041 	strb.w	r6, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800e7fa:	f883 5040 	strb.w	r5, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800e7fe:	bc70      	pop	{r4, r5, r6}
 800e800:	4770      	bx	lr
    return HAL_BUSY;
 800e802:	2002      	movs	r0, #2
}
 800e804:	4770      	bx	lr
    return HAL_BUSY;
 800e806:	2002      	movs	r0, #2
}
 800e808:	bc70      	pop	{r4, r5, r6}
 800e80a:	4770      	bx	lr

0800e80c <HAL_LTDC_MspInit>:
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 800e80c:	4770      	bx	lr
 800e80e:	bf00      	nop

0800e810 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 800e810:	2800      	cmp	r0, #0
 800e812:	d06d      	beq.n	800e8f0 <HAL_LTDC_Init+0xe0>
{
 800e814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800e816:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 800e81a:	4604      	mov	r4, r0
 800e81c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800e820:	2b00      	cmp	r3, #0
 800e822:	d060      	beq.n	800e8e6 <HAL_LTDC_Init+0xd6>
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800e824:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800e826:	2502      	movs	r5, #2
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800e828:	68e6      	ldr	r6, [r4, #12]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800e82a:	2100      	movs	r1, #0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800e82c:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800e830:	6925      	ldr	r5, [r4, #16]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800e832:	6967      	ldr	r7, [r4, #20]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800e834:	f8d4 c018 	ldr.w	ip, [r4, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800e838:	e9d4 3200 	ldrd	r3, r2, [r4]
 800e83c:	4302      	orrs	r2, r0
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800e83e:	6998      	ldr	r0, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800e840:	4332      	orrs	r2, r6
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800e842:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800e846:	4e2b      	ldr	r6, [pc, #172]	; (800e8f4 <HAL_LTDC_Init+0xe4>)
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800e848:	6198      	str	r0, [r3, #24]
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800e84a:	432a      	orrs	r2, r5
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800e84c:	6998      	ldr	r0, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 800e84e:	2501      	movs	r5, #1
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800e850:	4302      	orrs	r2, r0
 800e852:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800e854:	689a      	ldr	r2, [r3, #8]
 800e856:	4032      	ands	r2, r6
 800e858:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800e85a:	6898      	ldr	r0, [r3, #8]
 800e85c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800e860:	69e7      	ldr	r7, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800e862:	ea40 000c 	orr.w	r0, r0, ip
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800e866:	f8d4 c020 	ldr.w	ip, [r4, #32]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800e86a:	6098      	str	r0, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800e86c:	68d8      	ldr	r0, [r3, #12]
 800e86e:	4030      	ands	r0, r6
 800e870:	60d8      	str	r0, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800e872:	68da      	ldr	r2, [r3, #12]
 800e874:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800e878:	6a67      	ldr	r7, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800e87a:	ea42 020c 	orr.w	r2, r2, ip
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800e87e:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800e882:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800e884:	691a      	ldr	r2, [r3, #16]
 800e886:	4032      	ands	r2, r6
 800e888:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800e88a:	6918      	ldr	r0, [r3, #16]
 800e88c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
  tmp = (hltdc->Init.TotalWidth << 16U);
 800e890:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800e892:	ea40 000c 	orr.w	r0, r0, ip
 800e896:	6118      	str	r0, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800e898:	6958      	ldr	r0, [r3, #20]
 800e89a:	4006      	ands	r6, r0
 800e89c:	615e      	str	r6, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800e89e:	695a      	ldr	r2, [r3, #20]
 800e8a0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800e8a2:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800e8a6:	4302      	orrs	r2, r0
 800e8a8:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800e8aa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800e8ac:	f894 7035 	ldrb.w	r7, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800e8b0:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800e8b4:	f894 6036 	ldrb.w	r6, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800e8b8:	62d8      	str	r0, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800e8ba:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800e8bc:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 800e8c0:	4302      	orrs	r2, r0
  return HAL_OK;
 800e8c2:	4608      	mov	r0, r1
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800e8c4:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 800e8c8:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800e8cc:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800e8ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e8d0:	f042 0206 	orr.w	r2, r2, #6
 800e8d4:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 800e8d6:	699a      	ldr	r2, [r3, #24]
 800e8d8:	432a      	orrs	r2, r5
 800e8da:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800e8dc:	f8c4 10a4 	str.w	r1, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800e8e0:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
}
 800e8e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hltdc->Lock = HAL_UNLOCKED;
 800e8e6:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 800e8ea:	f7ff ff8f 	bl	800e80c <HAL_LTDC_MspInit>
 800e8ee:	e799      	b.n	800e824 <HAL_LTDC_Init+0x14>
    return HAL_ERROR;
 800e8f0:	2001      	movs	r0, #1
}
 800e8f2:	4770      	bx	lr
 800e8f4:	f000f800 	.word	0xf000f800

0800e8f8 <HAL_LTDC_ErrorCallback>:
 800e8f8:	4770      	bx	lr
 800e8fa:	bf00      	nop

0800e8fc <HAL_LTDC_LineEventCallback>:
 800e8fc:	4770      	bx	lr
 800e8fe:	bf00      	nop

0800e900 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800e900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800e902:	6803      	ldr	r3, [r0, #0]
{
 800e904:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800e906:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800e908:	6b5e      	ldr	r6, [r3, #52]	; 0x34

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800e90a:	0769      	lsls	r1, r5, #29
 800e90c:	d501      	bpl.n	800e912 <HAL_LTDC_IRQHandler+0x12>
 800e90e:	0772      	lsls	r2, r6, #29
 800e910:	d41d      	bmi.n	800e94e <HAL_LTDC_IRQHandler+0x4e>
    HAL_LTDC_ErrorCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800e912:	07ab      	lsls	r3, r5, #30
 800e914:	d501      	bpl.n	800e91a <HAL_LTDC_IRQHandler+0x1a>
 800e916:	07b7      	lsls	r7, r6, #30
 800e918:	d42d      	bmi.n	800e976 <HAL_LTDC_IRQHandler+0x76>
    HAL_LTDC_ErrorCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800e91a:	07e8      	lsls	r0, r5, #31
 800e91c:	d501      	bpl.n	800e922 <HAL_LTDC_IRQHandler+0x22>
 800e91e:	07f1      	lsls	r1, r6, #31
 800e920:	d440      	bmi.n	800e9a4 <HAL_LTDC_IRQHandler+0xa4>
    HAL_LTDC_LineEventCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800e922:	072a      	lsls	r2, r5, #28
 800e924:	d501      	bpl.n	800e92a <HAL_LTDC_IRQHandler+0x2a>
 800e926:	0733      	lsls	r3, r6, #28
 800e928:	d400      	bmi.n	800e92c <HAL_LTDC_IRQHandler+0x2c>
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800e92a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800e92c:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800e92e:	2608      	movs	r6, #8
    hltdc->State = HAL_LTDC_STATE_READY;
 800e930:	2501      	movs	r5, #1
    __HAL_UNLOCK(hltdc);
 800e932:	2100      	movs	r1, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800e934:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_LTDC_ReloadEventCallback(hltdc);
 800e936:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800e938:	f022 0208 	bic.w	r2, r2, #8
 800e93c:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800e93e:	63de      	str	r6, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800e940:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800e944:	f884 10a0 	strb.w	r1, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 800e948:	f7f2 ffce 	bl	80018e8 <HAL_LTDC_ReloadEventCallback>
}
 800e94c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800e94e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800e950:	2104      	movs	r1, #4
    __HAL_UNLOCK(hltdc);
 800e952:	2700      	movs	r7, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800e954:	f022 0204 	bic.w	r2, r2, #4
 800e958:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800e95a:	63d9      	str	r1, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800e95c:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 800e960:	f880 70a0 	strb.w	r7, [r0, #160]	; 0xa0
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800e964:	f043 0301 	orr.w	r3, r3, #1
 800e968:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800e96c:	f880 10a1 	strb.w	r1, [r0, #161]	; 0xa1
    HAL_LTDC_ErrorCallback(hltdc);
 800e970:	f7ff ffc2 	bl	800e8f8 <HAL_LTDC_ErrorCallback>
 800e974:	e7cd      	b.n	800e912 <HAL_LTDC_IRQHandler+0x12>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800e976:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800e978:	2002      	movs	r0, #2
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800e97a:	2104      	movs	r1, #4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800e97c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e97e:	f022 0202 	bic.w	r2, r2, #2
 800e982:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_UNLOCK(hltdc);
 800e984:	2200      	movs	r2, #0
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800e986:	63d8      	str	r0, [r3, #60]	; 0x3c
    HAL_LTDC_ErrorCallback(hltdc);
 800e988:	4620      	mov	r0, r4
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800e98a:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 800e98e:	f884 20a0 	strb.w	r2, [r4, #160]	; 0xa0
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800e992:	f043 0302 	orr.w	r3, r3, #2
 800e996:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800e99a:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
    HAL_LTDC_ErrorCallback(hltdc);
 800e99e:	f7ff ffab 	bl	800e8f8 <HAL_LTDC_ErrorCallback>
 800e9a2:	e7ba      	b.n	800e91a <HAL_LTDC_IRQHandler+0x1a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800e9a4:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800e9a6:	2101      	movs	r1, #1
    __HAL_UNLOCK(hltdc);
 800e9a8:	2700      	movs	r7, #0
    HAL_LTDC_LineEventCallback(hltdc);
 800e9aa:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800e9ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e9ae:	f022 0201 	bic.w	r2, r2, #1
 800e9b2:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800e9b4:	63d9      	str	r1, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800e9b6:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800e9ba:	f884 70a0 	strb.w	r7, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800e9be:	f7ff ff9d 	bl	800e8fc <HAL_LTDC_LineEventCallback>
 800e9c2:	e7ae      	b.n	800e922 <HAL_LTDC_IRQHandler+0x22>

0800e9c4 <HAL_LTDC_ConfigLayer>:
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800e9c4:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800e9c8:	2b01      	cmp	r3, #1
 800e9ca:	f000 80b7 	beq.w	800eb3c <HAL_LTDC_ConfigLayer+0x178>
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800e9ce:	ea4f 1cc2 	mov.w	ip, r2, lsl #7
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800e9d2:	2302      	movs	r3, #2
{
 800e9d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800e9d8:	f04f 0834 	mov.w	r8, #52	; 0x34
 800e9dc:	460d      	mov	r5, r1
 800e9de:	4689      	mov	r9, r1
  __HAL_LOCK(hltdc);
 800e9e0:	f04f 0101 	mov.w	r1, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800e9e4:	fb08 0202 	mla	r2, r8, r2, r0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800e9e8:	6807      	ldr	r7, [r0, #0]
  __HAL_LOCK(hltdc);
 800e9ea:	f880 10a0 	strb.w	r1, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800e9ee:	4606      	mov	r6, r0
 800e9f0:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800e9f4:	f102 0838 	add.w	r8, r2, #56	; 0x38
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800e9f8:	f8d7 a00c 	ldr.w	sl, [r7, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800e9fc:	f10c 0c84 	add.w	ip, ip, #132	; 0x84
  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800ea00:	f8df e144 	ldr.w	lr, [pc, #324]	; 800eb48 <HAL_LTDC_ConfigLayer+0x184>
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800ea04:	eb07 040c 	add.w	r4, r7, ip
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800ea08:	f3ca 4a0b 	ubfx	sl, sl, #16, #12
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800ea0c:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800ea10:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 800ea14:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800ea18:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 800ea1c:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800ea20:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800ea24:	6862      	ldr	r2, [r4, #4]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800ea26:	f8d9 3000 	ldr.w	r3, [r9]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800ea2a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800ea2e:	f8c8 3000 	str.w	r3, [r8]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800ea32:	686b      	ldr	r3, [r5, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800ea34:	6062      	str	r2, [r4, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800ea36:	68f9      	ldr	r1, [r7, #12]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800ea38:	449a      	add	sl, r3
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800ea3a:	f8d5 8000 	ldr.w	r8, [r5]
 800ea3e:	f3c1 410b 	ubfx	r1, r1, #16, #12
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800ea42:	f8d5 900c 	ldr.w	r9, [r5, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800ea46:	f108 0001 	add.w	r0, r8, #1
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800ea4a:	68aa      	ldr	r2, [r5, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800ea4c:	4401      	add	r1, r0
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800ea4e:	6928      	ldr	r0, [r5, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800ea50:	3201      	adds	r2, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800ea52:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800ea56:	f8d5 a018 	ldr.w	sl, [r5, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800ea5a:	6061      	str	r1, [r4, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800ea5c:	68f9      	ldr	r1, [r7, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800ea5e:	f8d4 b008 	ldr.w	fp, [r4, #8]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800ea62:	f3c1 010a 	ubfx	r1, r1, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800ea66:	f40b 4b70 	and.w	fp, fp, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800ea6a:	4449      	add	r1, r9
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800ea6c:	f8d5 9014 	ldr.w	r9, [r5, #20]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800ea70:	f8c4 b008 	str.w	fp, [r4, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800ea74:	f8d7 b00c 	ldr.w	fp, [r7, #12]
 800ea78:	f3cb 0b0a 	ubfx	fp, fp, #0, #11
 800ea7c:	445a      	add	r2, fp
 800ea7e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800ea82:	60a2      	str	r2, [r4, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800ea84:	6922      	ldr	r2, [r4, #16]
 800ea86:	f022 0207 	bic.w	r2, r2, #7
 800ea8a:	6122      	str	r2, [r4, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800ea8c:	6120      	str	r0, [r4, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800ea8e:	69a2      	ldr	r2, [r4, #24]
 800ea90:	2200      	movs	r2, #0
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800ea92:	f895 1031 	ldrb.w	r1, [r5, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800ea96:	f895 b032 	ldrb.w	fp, [r5, #50]	; 0x32
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800ea9a:	61a2      	str	r2, [r4, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800ea9c:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
 800eaa0:	ea42 620a 	orr.w	r2, r2, sl, lsl #24
 800eaa4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800eaa8:	6a29      	ldr	r1, [r5, #32]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800eaaa:	ea42 4a0b 	orr.w	sl, r2, fp, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800eaae:	69ea      	ldr	r2, [r5, #28]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800eab0:	f8c4 a018 	str.w	sl, [r4, #24]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800eab4:	4311      	orrs	r1, r2
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800eab6:	6962      	ldr	r2, [r4, #20]
 800eab8:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800eabc:	6162      	str	r2, [r4, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800eabe:	f8c4 9014 	str.w	r9, [r4, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800eac2:	69e2      	ldr	r2, [r4, #28]
 800eac4:	ea02 0e0e 	and.w	lr, r2, lr
 800eac8:	f8c4 e01c 	str.w	lr, [r4, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800eacc:	61e1      	str	r1, [r4, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800eace:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800ead0:	2200      	movs	r2, #0
 800ead2:	62a2      	str	r2, [r4, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800ead4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800ead6:	62a2      	str	r2, [r4, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800ead8:	bb28      	cbnz	r0, 800eb26 <HAL_LTDC_ConfigLayer+0x162>
  {
    tmp = 4U;
 800eada:	2204      	movs	r2, #4
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800eadc:	eba3 0308 	sub.w	r3, r3, r8
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800eae0:	e9d5 1e0a 	ldrd	r1, lr, [r5, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800eae4:	fb02 f303 	mul.w	r3, r2, r3
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800eae8:	2501      	movs	r5, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800eaea:	fb01 f202 	mul.w	r2, r1, r2
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800eaee:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800eaf0:	3307      	adds	r3, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800eaf2:	f001 21e0 	and.w	r1, r1, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800eaf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800eafa:	4a12      	ldr	r2, [pc, #72]	; (800eb44 <HAL_LTDC_ConfigLayer+0x180>)
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800eafc:	62e1      	str	r1, [r4, #44]	; 0x2c
  __HAL_UNLOCK(hltdc);
 800eafe:	2100      	movs	r1, #0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800eb00:	62e3      	str	r3, [r4, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800eb02:	6b23      	ldr	r3, [r4, #48]	; 0x30
  return HAL_OK;
 800eb04:	4608      	mov	r0, r1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800eb06:	401a      	ands	r2, r3
 800eb08:	6322      	str	r2, [r4, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800eb0a:	f8c4 e030 	str.w	lr, [r4, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800eb0e:	f857 300c 	ldr.w	r3, [r7, ip]
 800eb12:	432b      	orrs	r3, r5
 800eb14:	f847 300c 	str.w	r3, [r7, ip]
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800eb18:	627d      	str	r5, [r7, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800eb1a:	f886 50a1 	strb.w	r5, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800eb1e:	f886 10a0 	strb.w	r1, [r6, #160]	; 0xa0
}
 800eb22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800eb26:	2801      	cmp	r0, #1
 800eb28:	d00a      	beq.n	800eb40 <HAL_LTDC_ConfigLayer+0x17c>
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800eb2a:	1e82      	subs	r2, r0, #2
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800eb2c:	2a02      	cmp	r2, #2
 800eb2e:	d903      	bls.n	800eb38 <HAL_LTDC_ConfigLayer+0x174>
 800eb30:	2807      	cmp	r0, #7
 800eb32:	d001      	beq.n	800eb38 <HAL_LTDC_ConfigLayer+0x174>
    tmp = 1U;
 800eb34:	2201      	movs	r2, #1
 800eb36:	e7d1      	b.n	800eadc <HAL_LTDC_ConfigLayer+0x118>
    tmp = 2U;
 800eb38:	2202      	movs	r2, #2
 800eb3a:	e7cf      	b.n	800eadc <HAL_LTDC_ConfigLayer+0x118>
  __HAL_LOCK(hltdc);
 800eb3c:	2002      	movs	r0, #2
}
 800eb3e:	4770      	bx	lr
    tmp = 3U;
 800eb40:	2203      	movs	r2, #3
 800eb42:	e7cb      	b.n	800eadc <HAL_LTDC_ConfigLayer+0x118>
 800eb44:	fffff800 	.word	0xfffff800
 800eb48:	fffff8f8 	.word	0xfffff8f8

0800eb4c <HAL_LTDC_Reload>:
  __HAL_LOCK(hltdc);
 800eb4c:	f890 20a0 	ldrb.w	r2, [r0, #160]	; 0xa0
 800eb50:	2a01      	cmp	r2, #1
 800eb52:	d013      	beq.n	800eb7c <HAL_LTDC_Reload+0x30>
 800eb54:	4603      	mov	r3, r0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800eb56:	2002      	movs	r0, #2
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 800eb58:	681a      	ldr	r2, [r3, #0]
{
 800eb5a:	b470      	push	{r4, r5, r6}
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800eb5c:	f883 00a1 	strb.w	r0, [r3, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800eb60:	2500      	movs	r5, #0
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 800eb62:	6b54      	ldr	r4, [r2, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 800eb64:	2601      	movs	r6, #1
  return HAL_OK;
 800eb66:	4628      	mov	r0, r5
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 800eb68:	f044 0408 	orr.w	r4, r4, #8
 800eb6c:	6354      	str	r4, [r2, #52]	; 0x34
  hltdc->Instance->SRCR = ReloadType;
 800eb6e:	6251      	str	r1, [r2, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800eb70:	f883 60a1 	strb.w	r6, [r3, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800eb74:	f883 50a0 	strb.w	r5, [r3, #160]	; 0xa0
}
 800eb78:	bc70      	pop	{r4, r5, r6}
 800eb7a:	4770      	bx	lr
  __HAL_LOCK(hltdc);
 800eb7c:	2002      	movs	r0, #2
}
 800eb7e:	4770      	bx	lr

0800eb80 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800eb80:	b538      	push	{r3, r4, r5, lr}
 800eb82:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800eb84:	f7fc fb32 	bl	800b1ec <HAL_GetTick>

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800eb88:	2c00      	cmp	r4, #0
 800eb8a:	d05a      	beq.n	800ec42 <HAL_MDMA_Init+0xc2>

  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800eb8c:	2202      	movs	r2, #2

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800eb8e:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hmdma);
 800eb90:	2100      	movs	r1, #0
 800eb92:	4605      	mov	r5, r0
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800eb94:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(hmdma);
 800eb98:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  __HAL_MDMA_DISABLE(hmdma);
 800eb9c:	68da      	ldr	r2, [r3, #12]
 800eb9e:	f022 0201 	bic.w	r2, r2, #1
 800eba2:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800eba4:	e005      	b.n	800ebb2 <HAL_MDMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800eba6:	f7fc fb21 	bl	800b1ec <HAL_GetTick>
 800ebaa:	1b43      	subs	r3, r0, r5
 800ebac:	2b05      	cmp	r3, #5
 800ebae:	d841      	bhi.n	800ec34 <HAL_MDMA_Init+0xb4>
 800ebb0:	6823      	ldr	r3, [r4, #0]
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800ebb2:	68da      	ldr	r2, [r3, #12]
 800ebb4:	07d2      	lsls	r2, r2, #31
 800ebb6:	d4f6      	bmi.n	800eba6 <HAL_MDMA_Init+0x26>
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800ebb8:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
 800ebbc:	69e1      	ldr	r1, [r4, #28]
 800ebbe:	4302      	orrs	r2, r0
 800ebc0:	e9d4 5008 	ldrd	r5, r0, [r4, #32]
 800ebc4:	430a      	orrs	r2, r1
 800ebc6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800ebc8:	432a      	orrs	r2, r5
 800ebca:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800ebcc:	4302      	orrs	r2, r0
 800ebce:	68a0      	ldr	r0, [r4, #8]
 800ebd0:	430a      	orrs	r2, r1
 800ebd2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800ebd4:	432a      	orrs	r2, r5
 800ebd6:	1e4d      	subs	r5, r1, #1
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800ebd8:	68e1      	ldr	r1, [r4, #12]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800ebda:	4302      	orrs	r2, r0
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800ebdc:	6920      	ldr	r0, [r4, #16]
 800ebde:	4308      	orrs	r0, r1
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800ebe0:	6861      	ldr	r1, [r4, #4]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800ebe2:	ea42 4285 	orr.w	r2, r2, r5, lsl #18
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800ebe6:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800ebea:	60d8      	str	r0, [r3, #12]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800ebec:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800ebee:	d103      	bne.n	800ebf8 <HAL_MDMA_Init+0x78>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800ebf0:	691a      	ldr	r2, [r3, #16]
 800ebf2:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 800ebf6:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800ebf8:	2000      	movs	r0, #0

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800ebfa:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800ebfc:	4282      	cmp	r2, r0
  hmdma->Instance->CBNDTR = 0;
 800ebfe:	6158      	str	r0, [r3, #20]
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800ec00:	db30      	blt.n	800ec64 <HAL_MDMA_Init+0xe4>
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800ec02:	b292      	uxth	r2, r2
 800ec04:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800ec06:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800ec08:	2a00      	cmp	r2, #0
 800ec0a:	db1c      	blt.n	800ec46 <HAL_MDMA_Init+0xc6>
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800ec0c:	6a18      	ldr	r0, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800ec0e:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800ec12:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 800ec16:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800ec18:	d021      	beq.n	800ec5e <HAL_MDMA_Init+0xde>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800ec1a:	b2c9      	uxtb	r1, r1
 800ec1c:	6299      	str	r1, [r3, #40]	; 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800ec1e:	2200      	movs	r2, #0
  hmdma->State = HAL_MDMA_STATE_READY;
 800ec20:	2101      	movs	r1, #1
  hmdma->Instance->CLAR =  0;
 800ec22:	625a      	str	r2, [r3, #36]	; 0x24
  return HAL_OK;
 800ec24:	4610      	mov	r0, r2
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800ec26:	66a2      	str	r2, [r4, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
 800ec28:	6662      	str	r2, [r4, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 800ec2a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 800ec2e:	e9c4 2217 	strd	r2, r2, [r4, #92]	; 0x5c
}
 800ec32:	bd38      	pop	{r3, r4, r5, pc}
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800ec34:	2240      	movs	r2, #64	; 0x40
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800ec36:	2303      	movs	r3, #3
      return HAL_ERROR;
 800ec38:	2001      	movs	r0, #1
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800ec3a:	66a2      	str	r2, [r4, #104]	; 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800ec3c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800ec40:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800ec42:	2001      	movs	r0, #1
}
 800ec44:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800ec46:	6958      	ldr	r0, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800ec48:	4252      	negs	r2, r2
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800ec4a:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800ec4e:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
 800ec52:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800ec54:	6a18      	ldr	r0, [r3, #32]
 800ec56:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 800ec5a:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800ec5c:	d1dd      	bne.n	800ec1a <HAL_MDMA_Init+0x9a>
    hmdma->Instance->CTBR = 0;
 800ec5e:	2200      	movs	r2, #0
 800ec60:	629a      	str	r2, [r3, #40]	; 0x28
 800ec62:	e7dc      	b.n	800ec1e <HAL_MDMA_Init+0x9e>
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800ec64:	6958      	ldr	r0, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800ec66:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800ec68:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800ec6c:	b292      	uxth	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800ec6e:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800ec70:	621a      	str	r2, [r3, #32]
 800ec72:	e7c8      	b.n	800ec06 <HAL_MDMA_Init+0x86>

0800ec74 <HAL_MDMA_Start_IT>:
  if(hmdma == NULL)
 800ec74:	2800      	cmp	r0, #0
 800ec76:	d06a      	beq.n	800ed4e <HAL_MDMA_Start_IT+0xda>
{
 800ec78:	b4f0      	push	{r4, r5, r6, r7}
 800ec7a:	4604      	mov	r4, r0
  __HAL_LOCK(hmdma);
 800ec7c:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
 800ec80:	2801      	cmp	r0, #1
 800ec82:	d06d      	beq.n	800ed60 <HAL_MDMA_Start_IT+0xec>
 800ec84:	2501      	movs	r5, #1
  if(HAL_MDMA_STATE_READY == hmdma->State)
 800ec86:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 800ec8a:	42a8      	cmp	r0, r5
  __HAL_LOCK(hmdma);
 800ec8c:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 800ec90:	d005      	beq.n	800ec9e <HAL_MDMA_Start_IT+0x2a>
    __HAL_UNLOCK(hmdma);
 800ec92:	2300      	movs	r3, #0
    return HAL_BUSY;
 800ec94:	2002      	movs	r0, #2
    __HAL_UNLOCK(hmdma);
 800ec96:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800ec9a:	bcf0      	pop	{r4, r5, r6, r7}
 800ec9c:	4770      	bx	lr
    __HAL_MDMA_DISABLE(hmdma);
 800ec9e:	6825      	ldr	r5, [r4, #0]
    hmdma->State = HAL_MDMA_STATE_BUSY;
 800eca0:	2602      	movs	r6, #2
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800eca2:	2000      	movs	r0, #0
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800eca4:	f3c3 0310 	ubfx	r3, r3, #0, #17
    hmdma->State = HAL_MDMA_STATE_BUSY;
 800eca8:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 800ecac:	f04f 0c1f 	mov.w	ip, #31
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800ecb0:	66a0      	str	r0, [r4, #104]	; 0x68
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800ecb2:	f5a0 3000 	sub.w	r0, r0, #131072	; 0x20000
    __HAL_MDMA_DISABLE(hmdma);
 800ecb6:	68ef      	ldr	r7, [r5, #12]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800ecb8:	f011 4f5f 	tst.w	r1, #3741319168	; 0xdf000000
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 800ecbc:	9e04      	ldr	r6, [sp, #16]
    __HAL_MDMA_DISABLE(hmdma);
 800ecbe:	f027 0701 	bic.w	r7, r7, #1
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 800ecc2:	f106 36ff 	add.w	r6, r6, #4294967295
    __HAL_MDMA_DISABLE(hmdma);
 800ecc6:	60ef      	str	r7, [r5, #12]
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800ecc8:	696f      	ldr	r7, [r5, #20]
 800ecca:	ea00 0007 	and.w	r0, r0, r7
 800ecce:	ea43 0300 	orr.w	r3, r3, r0
 800ecd2:	616b      	str	r3, [r5, #20]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 800ecd4:	696b      	ldr	r3, [r5, #20]
 800ecd6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ecda:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
 800ecde:	616b      	str	r3, [r5, #20]
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 800ece0:	f8c5 c004 	str.w	ip, [r5, #4]
  hmdma->Instance->CDAR = DstAddress;
 800ece4:	61ea      	str	r2, [r5, #28]
  hmdma->Instance->CSAR = SrcAddress;
 800ece6:	61a9      	str	r1, [r5, #24]
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 800ece8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800ecea:	bf0c      	ite	eq
 800ecec:	f443 3380 	orreq.w	r3, r3, #65536	; 0x10000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800ecf0:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800ecf4:	f012 4f5f 	tst.w	r2, #3741319168	; 0xdf000000
    if(hmdma->XferBlockCpltCallback != NULL)
 800ecf8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800ecfa:	62ab      	str	r3, [r5, #40]	; 0x28
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 800ecfc:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800ecfe:	bf0c      	ite	eq
 800ed00:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 800ed04:	f423 3300 	bicne.w	r3, r3, #131072	; 0x20000
 800ed08:	62ab      	str	r3, [r5, #40]	; 0x28
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 800ed0a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800ed0c:	626b      	str	r3, [r5, #36]	; 0x24
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 800ed0e:	68eb      	ldr	r3, [r5, #12]
 800ed10:	f043 0306 	orr.w	r3, r3, #6
 800ed14:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBlockCpltCallback != NULL)
 800ed16:	b11a      	cbz	r2, 800ed20 <HAL_MDMA_Start_IT+0xac>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 800ed18:	68eb      	ldr	r3, [r5, #12]
 800ed1a:	f043 0310 	orr.w	r3, r3, #16
 800ed1e:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800ed20:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ed22:	b11b      	cbz	r3, 800ed2c <HAL_MDMA_Start_IT+0xb8>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 800ed24:	68eb      	ldr	r3, [r5, #12]
 800ed26:	f043 0308 	orr.w	r3, r3, #8
 800ed2a:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBufferCpltCallback != NULL)
 800ed2c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ed2e:	b11b      	cbz	r3, 800ed38 <HAL_MDMA_Start_IT+0xc4>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 800ed30:	68eb      	ldr	r3, [r5, #12]
 800ed32:	f043 0320 	orr.w	r3, r3, #32
 800ed36:	60eb      	str	r3, [r5, #12]
    __HAL_MDMA_ENABLE(hmdma);
 800ed38:	68eb      	ldr	r3, [r5, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800ed3a:	6862      	ldr	r2, [r4, #4]
    __HAL_MDMA_ENABLE(hmdma);
 800ed3c:	f043 0301 	orr.w	r3, r3, #1
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800ed40:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
    __HAL_MDMA_ENABLE(hmdma);
 800ed44:	60eb      	str	r3, [r5, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800ed46:	d004      	beq.n	800ed52 <HAL_MDMA_Start_IT+0xde>
  return HAL_OK;
 800ed48:	2000      	movs	r0, #0
}
 800ed4a:	bcf0      	pop	{r4, r5, r6, r7}
 800ed4c:	4770      	bx	lr
    return HAL_ERROR;
 800ed4e:	2001      	movs	r0, #1
}
 800ed50:	4770      	bx	lr
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 800ed52:	68eb      	ldr	r3, [r5, #12]
  return HAL_OK;
 800ed54:	2000      	movs	r0, #0
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 800ed56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ed5a:	60eb      	str	r3, [r5, #12]
}
 800ed5c:	bcf0      	pop	{r4, r5, r6, r7}
 800ed5e:	4770      	bx	lr
  __HAL_LOCK(hmdma);
 800ed60:	2002      	movs	r0, #2
}
 800ed62:	bcf0      	pop	{r4, r5, r6, r7}
 800ed64:	4770      	bx	lr
 800ed66:	bf00      	nop

0800ed68 <HAL_MDMA_IRQHandler>:
{
 800ed68:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t count = 0;
 800ed6a:	2300      	movs	r3, #0
{
 800ed6c:	4604      	mov	r4, r0
 800ed6e:	b082      	sub	sp, #8
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800ed70:	4a59      	ldr	r2, [pc, #356]	; (800eed8 <HAL_MDMA_IRQHandler+0x170>)
 800ed72:	2101      	movs	r1, #1
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800ed74:	f04f 40a4 	mov.w	r0, #1375731712	; 0x52000000
  __IO uint32_t count = 0;
 800ed78:	9301      	str	r3, [sp, #4]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800ed7a:	6823      	ldr	r3, [r4, #0]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800ed7c:	6800      	ldr	r0, [r0, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800ed7e:	441a      	add	r2, r3
 800ed80:	f3c2 1284 	ubfx	r2, r2, #6, #5
 800ed84:	fa01 f202 	lsl.w	r2, r1, r2
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800ed88:	4202      	tst	r2, r0
 800ed8a:	f000 80a2 	beq.w	800eed2 <HAL_MDMA_IRQHandler+0x16a>
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800ed8e:	681a      	ldr	r2, [r3, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800ed90:	4952      	ldr	r1, [pc, #328]	; (800eedc <HAL_MDMA_IRQHandler+0x174>)
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800ed92:	07d2      	lsls	r2, r2, #31
  uint32_t timeout = SystemCoreClock / 9600U;
 800ed94:	680d      	ldr	r5, [r1, #0]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800ed96:	d529      	bpl.n	800edec <HAL_MDMA_IRQHandler+0x84>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 800ed98:	68da      	ldr	r2, [r3, #12]
 800ed9a:	0796      	lsls	r6, r2, #30
 800ed9c:	d526      	bpl.n	800edec <HAL_MDMA_IRQHandler+0x84>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800ed9e:	68da      	ldr	r2, [r3, #12]
 800eda0:	f022 0202 	bic.w	r2, r2, #2
 800eda4:	60da      	str	r2, [r3, #12]
      errorFlag = hmdma->Instance->CESR;
 800eda6:	689a      	ldr	r2, [r3, #8]
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800eda8:	6ea1      	ldr	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TED) == 0U)
 800edaa:	0610      	lsls	r0, r2, #24
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800edac:	bf54      	ite	pl
 800edae:	f041 0101 	orrpl.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800edb2:	f041 0102 	orrmi.w	r1, r1, #2
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800edb6:	0596      	lsls	r6, r2, #22
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800edb8:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800edba:	d503      	bpl.n	800edc4 <HAL_MDMA_IRQHandler+0x5c>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 800edbc:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800edbe:	f041 0104 	orr.w	r1, r1, #4
 800edc2:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
 800edc4:	05d0      	lsls	r0, r2, #23
 800edc6:	d503      	bpl.n	800edd0 <HAL_MDMA_IRQHandler+0x68>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800edc8:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800edca:	f041 0108 	orr.w	r1, r1, #8
 800edce:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800edd0:	0551      	lsls	r1, r2, #21
 800edd2:	d503      	bpl.n	800eddc <HAL_MDMA_IRQHandler+0x74>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 800edd4:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800edd6:	f041 0110 	orr.w	r1, r1, #16
 800edda:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
 800eddc:	0516      	lsls	r6, r2, #20
 800edde:	d503      	bpl.n	800ede8 <HAL_MDMA_IRQHandler+0x80>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800ede0:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800ede2:	f042 0220 	orr.w	r2, r2, #32
 800ede6:	66a2      	str	r2, [r4, #104]	; 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800ede8:	2201      	movs	r2, #1
 800edea:	605a      	str	r2, [r3, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800edec:	681a      	ldr	r2, [r3, #0]
 800edee:	06d0      	lsls	r0, r2, #27
 800edf0:	d509      	bpl.n	800ee06 <HAL_MDMA_IRQHandler+0x9e>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800edf2:	68da      	ldr	r2, [r3, #12]
 800edf4:	0691      	lsls	r1, r2, #26
 800edf6:	d506      	bpl.n	800ee06 <HAL_MDMA_IRQHandler+0x9e>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800edf8:	2110      	movs	r1, #16
      if(hmdma->XferBufferCpltCallback != NULL)
 800edfa:	6ca2      	ldr	r2, [r4, #72]	; 0x48
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800edfc:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
 800edfe:	b112      	cbz	r2, 800ee06 <HAL_MDMA_IRQHandler+0x9e>
        hmdma->XferBufferCpltCallback(hmdma);
 800ee00:	4620      	mov	r0, r4
 800ee02:	4790      	blx	r2
 800ee04:	6823      	ldr	r3, [r4, #0]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800ee06:	681a      	ldr	r2, [r3, #0]
 800ee08:	0712      	lsls	r2, r2, #28
 800ee0a:	d509      	bpl.n	800ee20 <HAL_MDMA_IRQHandler+0xb8>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 800ee0c:	68da      	ldr	r2, [r3, #12]
 800ee0e:	06d6      	lsls	r6, r2, #27
 800ee10:	d506      	bpl.n	800ee20 <HAL_MDMA_IRQHandler+0xb8>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800ee12:	2108      	movs	r1, #8
      if(hmdma->XferBlockCpltCallback != NULL)
 800ee14:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800ee16:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
 800ee18:	b112      	cbz	r2, 800ee20 <HAL_MDMA_IRQHandler+0xb8>
        hmdma->XferBlockCpltCallback(hmdma);
 800ee1a:	4620      	mov	r0, r4
 800ee1c:	4790      	blx	r2
 800ee1e:	6823      	ldr	r3, [r4, #0]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800ee20:	681a      	ldr	r2, [r3, #0]
 800ee22:	0750      	lsls	r0, r2, #29
 800ee24:	d509      	bpl.n	800ee3a <HAL_MDMA_IRQHandler+0xd2>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 800ee26:	68da      	ldr	r2, [r3, #12]
 800ee28:	0711      	lsls	r1, r2, #28
 800ee2a:	d506      	bpl.n	800ee3a <HAL_MDMA_IRQHandler+0xd2>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800ee2c:	2104      	movs	r1, #4
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800ee2e:	6d22      	ldr	r2, [r4, #80]	; 0x50
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800ee30:	6059      	str	r1, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800ee32:	b112      	cbz	r2, 800ee3a <HAL_MDMA_IRQHandler+0xd2>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800ee34:	4620      	mov	r0, r4
 800ee36:	4790      	blx	r2
 800ee38:	6823      	ldr	r3, [r4, #0]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800ee3a:	681a      	ldr	r2, [r3, #0]
 800ee3c:	0792      	lsls	r2, r2, #30
 800ee3e:	d516      	bpl.n	800ee6e <HAL_MDMA_IRQHandler+0x106>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 800ee40:	68da      	ldr	r2, [r3, #12]
 800ee42:	0756      	lsls	r6, r2, #29
 800ee44:	d513      	bpl.n	800ee6e <HAL_MDMA_IRQHandler+0x106>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800ee46:	68da      	ldr	r2, [r3, #12]
 800ee48:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 800ee4c:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 800ee4e:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800ee52:	2a04      	cmp	r2, #4
 800ee54:	d034      	beq.n	800eec0 <HAL_MDMA_IRQHandler+0x158>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800ee56:	2602      	movs	r6, #2
      __HAL_UNLOCK(hmdma);
 800ee58:	2000      	movs	r0, #0
      hmdma->State = HAL_MDMA_STATE_READY;
 800ee5a:	2101      	movs	r1, #1
      if(hmdma->XferCpltCallback != NULL)
 800ee5c:	6c62      	ldr	r2, [r4, #68]	; 0x44
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800ee5e:	605e      	str	r6, [r3, #4]
      __HAL_UNLOCK(hmdma);
 800ee60:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
 800ee64:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      if(hmdma->XferCpltCallback != NULL)
 800ee68:	b10a      	cbz	r2, 800ee6e <HAL_MDMA_IRQHandler+0x106>
        hmdma->XferCpltCallback(hmdma);
 800ee6a:	4620      	mov	r0, r4
 800ee6c:	4790      	blx	r2
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800ee6e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d02e      	beq.n	800eed2 <HAL_MDMA_IRQHandler+0x16a>
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800ee74:	2304      	movs	r3, #4
    __HAL_MDMA_DISABLE(hmdma);
 800ee76:	6821      	ldr	r1, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800ee78:	4a19      	ldr	r2, [pc, #100]	; (800eee0 <HAL_MDMA_IRQHandler+0x178>)
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800ee7a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  uint32_t timeout = SystemCoreClock / 9600U;
 800ee7e:	fba2 3205 	umull	r3, r2, r2, r5
    __HAL_MDMA_DISABLE(hmdma);
 800ee82:	68cb      	ldr	r3, [r1, #12]
 800ee84:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 800ee88:	0a92      	lsrs	r2, r2, #10
    __HAL_MDMA_DISABLE(hmdma);
 800ee8a:	60cb      	str	r3, [r1, #12]
 800ee8c:	e002      	b.n	800ee94 <HAL_MDMA_IRQHandler+0x12c>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 800ee8e:	68cb      	ldr	r3, [r1, #12]
 800ee90:	07d8      	lsls	r0, r3, #31
 800ee92:	d504      	bpl.n	800ee9e <HAL_MDMA_IRQHandler+0x136>
      if (++count > timeout)
 800ee94:	9b01      	ldr	r3, [sp, #4]
 800ee96:	3301      	adds	r3, #1
 800ee98:	4293      	cmp	r3, r2
 800ee9a:	9301      	str	r3, [sp, #4]
 800ee9c:	d9f7      	bls.n	800ee8e <HAL_MDMA_IRQHandler+0x126>
    __HAL_UNLOCK(hmdma);
 800ee9e:	2300      	movs	r3, #0
 800eea0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800eea4:	68cb      	ldr	r3, [r1, #12]
 800eea6:	07db      	lsls	r3, r3, #31
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800eea8:	bf4c      	ite	mi
 800eeaa:	2303      	movmi	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
 800eeac:	2301      	movpl	r3, #1
 800eeae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    if (hmdma->XferErrorCallback != NULL)
 800eeb2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800eeb4:	b16b      	cbz	r3, 800eed2 <HAL_MDMA_IRQHandler+0x16a>
      hmdma->XferErrorCallback(hmdma);
 800eeb6:	4620      	mov	r0, r4
}
 800eeb8:	b002      	add	sp, #8
 800eeba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      hmdma->XferErrorCallback(hmdma);
 800eebe:	4718      	bx	r3
        __HAL_UNLOCK(hmdma);
 800eec0:	2100      	movs	r1, #0
        hmdma->State = HAL_MDMA_STATE_READY;
 800eec2:	2201      	movs	r2, #1
        if(hmdma->XferAbortCallback != NULL)
 800eec4:	6da3      	ldr	r3, [r4, #88]	; 0x58
        __HAL_UNLOCK(hmdma);
 800eec6:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
 800eeca:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        if(hmdma->XferAbortCallback != NULL)
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d1f1      	bne.n	800eeb6 <HAL_MDMA_IRQHandler+0x14e>
}
 800eed2:	b002      	add	sp, #8
 800eed4:	bd70      	pop	{r4, r5, r6, pc}
 800eed6:	bf00      	nop
 800eed8:	adffffc0 	.word	0xadffffc0
 800eedc:	2000761c 	.word	0x2000761c
 800eee0:	1b4e81b5 	.word	0x1b4e81b5

0800eee4 <HAL_PWREx_ConfigSupply>:

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800eee4:	4a1c      	ldr	r2, [pc, #112]	; (800ef58 <HAL_PWREx_ConfigSupply+0x74>)
 800eee6:	68d3      	ldr	r3, [r2, #12]
 800eee8:	f003 0307 	and.w	r3, r3, #7
 800eeec:	2b06      	cmp	r3, #6
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800eeee:	68d3      	ldr	r3, [r2, #12]
{
 800eef0:	b570      	push	{r4, r5, r6, lr}
 800eef2:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800eef4:	d005      	beq.n	800ef02 <HAL_PWREx_ConfigSupply+0x1e>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800eef6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800eefa:	1a18      	subs	r0, r3, r0
 800eefc:	bf18      	it	ne
 800eefe:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800ef00:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800ef02:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800ef06:	4616      	mov	r6, r2
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800ef08:	4303      	orrs	r3, r0
 800ef0a:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick ();
 800ef0c:	f7fc f96e 	bl	800b1ec <HAL_GetTick>
 800ef10:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800ef12:	e005      	b.n	800ef20 <HAL_PWREx_ConfigSupply+0x3c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800ef14:	f7fc f96a 	bl	800b1ec <HAL_GetTick>
 800ef18:	1b43      	subs	r3, r0, r5
 800ef1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ef1e:	d819      	bhi.n	800ef54 <HAL_PWREx_ConfigSupply+0x70>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800ef20:	6873      	ldr	r3, [r6, #4]
 800ef22:	049a      	lsls	r2, r3, #18
 800ef24:	d5f6      	bpl.n	800ef14 <HAL_PWREx_ConfigSupply+0x30>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800ef26:	f1a4 031d 	sub.w	r3, r4, #29
 800ef2a:	2b01      	cmp	r3, #1
 800ef2c:	d905      	bls.n	800ef3a <HAL_PWREx_ConfigSupply+0x56>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
 800ef2e:	f1a4 002d 	sub.w	r0, r4, #45	; 0x2d
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800ef32:	2801      	cmp	r0, #1
 800ef34:	d901      	bls.n	800ef3a <HAL_PWREx_ConfigSupply+0x56>
  return HAL_OK;
 800ef36:	2000      	movs	r0, #0
}
 800ef38:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick ();
 800ef3a:	f7fc f957 	bl	800b1ec <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800ef3e:	4d06      	ldr	r5, [pc, #24]	; (800ef58 <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 800ef40:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800ef42:	68eb      	ldr	r3, [r5, #12]
 800ef44:	03db      	lsls	r3, r3, #15
 800ef46:	d4f6      	bmi.n	800ef36 <HAL_PWREx_ConfigSupply+0x52>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800ef48:	f7fc f950 	bl	800b1ec <HAL_GetTick>
 800ef4c:	1b00      	subs	r0, r0, r4
 800ef4e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800ef52:	d9f6      	bls.n	800ef42 <HAL_PWREx_ConfigSupply+0x5e>
      return HAL_ERROR;
 800ef54:	2001      	movs	r0, #1
}
 800ef56:	bd70      	pop	{r4, r5, r6, pc}
 800ef58:	58024800 	.word	0x58024800

0800ef5c <HAL_RCC_GetSysClockFreq.part.0>:
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ef5c:	4b3b      	ldr	r3, [pc, #236]	; (800f04c <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 800ef5e:	b430      	push	{r4, r5}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ef60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800ef62:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800ef64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));

    if (pllm != 0U)
 800ef66:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800ef6a:	f3c4 1005 	ubfx	r0, r4, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800ef6e:	6b5d      	ldr	r5, [r3, #52]	; 0x34
    if (pllm != 0U)
 800ef70:	d038      	beq.n	800efe4 <HAL_RCC_GetSysClockFreq.part.0+0x88>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800ef72:	f3c5 05cc 	ubfx	r5, r5, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800ef76:	f001 0101 	and.w	r1, r1, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ef7a:	f002 0203 	and.w	r2, r2, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800ef7e:	fb01 f105 	mul.w	r1, r1, r5
 800ef82:	2a01      	cmp	r2, #1
 800ef84:	ee07 1a90 	vmov	s15, r1
 800ef88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    {
      switch (pllsource)
 800ef8c:	d002      	beq.n	800ef94 <HAL_RCC_GetSysClockFreq.part.0+0x38>
 800ef8e:	2a02      	cmp	r2, #2
 800ef90:	d04e      	beq.n	800f030 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 800ef92:	b34a      	cbz	r2, 800efe8 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ef94:	ee07 0a90 	vmov	s15, r0
 800ef98:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800f050 <HAL_RCC_GetSysClockFreq.part.0+0xf4>
 800ef9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800efa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800efa2:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800efa6:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800f054 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 800efaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800efae:	ee06 3a90 	vmov	s13, r3
 800efb2:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800efb6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800efba:	ee76 6a85 	vadd.f32	s13, s13, s10
 800efbe:	eee7 6a25 	vfma.f32	s13, s14, s11
 800efc2:	ee66 6a26 	vmul.f32	s13, s12, s13
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800efc6:	4b21      	ldr	r3, [pc, #132]	; (800f04c <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
 800efc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800efca:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800efce:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800efd0:	ee07 3a90 	vmov	s15, r3
 800efd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800efd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800efdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800efe0:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 800efe4:	bc30      	pop	{r4, r5}
 800efe6:	4770      	bx	lr
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800efe8:	681a      	ldr	r2, [r3, #0]
 800efea:	0692      	lsls	r2, r2, #26
 800efec:	d527      	bpl.n	800f03e <HAL_RCC_GetSysClockFreq.part.0+0xe2>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800efee:	6819      	ldr	r1, [r3, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800eff0:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800eff4:	4a18      	ldr	r2, [pc, #96]	; (800f058 <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800eff6:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800effa:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800effe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f004:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f006:	ed9f 5a13 	vldr	s10, [pc, #76]	; 800f054 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 800f00a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f00e:	ee06 2a10 	vmov	s12, r2
 800f012:	ee06 3a90 	vmov	s13, r3
 800f016:	eef8 5ac6 	vcvt.f32.s32	s11, s12
 800f01a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800f01e:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800f022:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800f026:	eee7 6a05 	vfma.f32	s13, s14, s10
 800f02a:	ee66 6a26 	vmul.f32	s13, s12, s13
 800f02e:	e7ca      	b.n	800efc6 <HAL_RCC_GetSysClockFreq.part.0+0x6a>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f030:	ee07 0a90 	vmov	s15, r0
 800f034:	eddf 6a09 	vldr	s13, [pc, #36]	; 800f05c <HAL_RCC_GetSysClockFreq.part.0+0x100>
 800f038:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f03c:	e7b0      	b.n	800efa0 <HAL_RCC_GetSysClockFreq.part.0+0x44>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f03e:	ee07 0a90 	vmov	s15, r0
 800f042:	eddf 6a07 	vldr	s13, [pc, #28]	; 800f060 <HAL_RCC_GetSysClockFreq.part.0+0x104>
 800f046:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f04a:	e7a9      	b.n	800efa0 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 800f04c:	58024400 	.word	0x58024400
 800f050:	4a742400 	.word	0x4a742400
 800f054:	39000000 	.word	0x39000000
 800f058:	03d09000 	.word	0x03d09000
 800f05c:	4bbebc20 	.word	0x4bbebc20
 800f060:	4c742400 	.word	0x4c742400

0800f064 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 800f064:	2800      	cmp	r0, #0
 800f066:	f000 81fb 	beq.w	800f460 <HAL_RCC_OscConfig+0x3fc>
{
 800f06a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f06c:	6803      	ldr	r3, [r0, #0]
 800f06e:	4604      	mov	r4, r0
 800f070:	07d9      	lsls	r1, r3, #31
 800f072:	d530      	bpl.n	800f0d6 <HAL_RCC_OscConfig+0x72>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f074:	49a4      	ldr	r1, [pc, #656]	; (800f308 <HAL_RCC_OscConfig+0x2a4>)
 800f076:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800f078:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f07a:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800f07e:	2a10      	cmp	r2, #16
 800f080:	f000 812e 	beq.w	800f2e0 <HAL_RCC_OscConfig+0x27c>
 800f084:	2a18      	cmp	r2, #24
 800f086:	f000 8126 	beq.w	800f2d6 <HAL_RCC_OscConfig+0x272>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f08a:	6863      	ldr	r3, [r4, #4]
 800f08c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f090:	f000 8169 	beq.w	800f366 <HAL_RCC_OscConfig+0x302>
 800f094:	2b00      	cmp	r3, #0
 800f096:	f000 8181 	beq.w	800f39c <HAL_RCC_OscConfig+0x338>
 800f09a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f09e:	4b9a      	ldr	r3, [pc, #616]	; (800f308 <HAL_RCC_OscConfig+0x2a4>)
 800f0a0:	681a      	ldr	r2, [r3, #0]
 800f0a2:	f000 827c 	beq.w	800f59e <HAL_RCC_OscConfig+0x53a>
 800f0a6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800f0aa:	601a      	str	r2, [r3, #0]
 800f0ac:	681a      	ldr	r2, [r3, #0]
 800f0ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800f0b2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800f0b4:	f7fc f89a 	bl	800b1ec <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f0b8:	4e93      	ldr	r6, [pc, #588]	; (800f308 <HAL_RCC_OscConfig+0x2a4>)
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800f0ba:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800f0be:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f0c0:	e005      	b.n	800f0ce <HAL_RCC_OscConfig+0x6a>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800f0c2:	f7fc f893 	bl	800b1ec <HAL_GetTick>
 800f0c6:	1b40      	subs	r0, r0, r5
 800f0c8:	42b8      	cmp	r0, r7
 800f0ca:	f200 8165 	bhi.w	800f398 <HAL_RCC_OscConfig+0x334>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f0ce:	6833      	ldr	r3, [r6, #0]
 800f0d0:	039b      	lsls	r3, r3, #14
 800f0d2:	d5f6      	bpl.n	800f0c2 <HAL_RCC_OscConfig+0x5e>
 800f0d4:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f0d6:	0799      	lsls	r1, r3, #30
 800f0d8:	d521      	bpl.n	800f11e <HAL_RCC_OscConfig+0xba>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f0da:	4a8b      	ldr	r2, [pc, #556]	; (800f308 <HAL_RCC_OscConfig+0x2a4>)
 800f0dc:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800f0de:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800f0e0:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 800f0e4:	f040 80a8 	bne.w	800f238 <HAL_RCC_OscConfig+0x1d4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f0e8:	4b87      	ldr	r3, [pc, #540]	; (800f308 <HAL_RCC_OscConfig+0x2a4>)
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	075b      	lsls	r3, r3, #29
 800f0ee:	d503      	bpl.n	800f0f8 <HAL_RCC_OscConfig+0x94>
 800f0f0:	68e3      	ldr	r3, [r4, #12]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	f000 80ed 	beq.w	800f2d2 <HAL_RCC_OscConfig+0x26e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f0f8:	f7fc f890 	bl	800b21c <HAL_GetREVID>
 800f0fc:	f241 0303 	movw	r3, #4099	; 0x1003
 800f100:	4298      	cmp	r0, r3
 800f102:	f200 818b 	bhi.w	800f41c <HAL_RCC_OscConfig+0x3b8>
 800f106:	6922      	ldr	r2, [r4, #16]
 800f108:	2a40      	cmp	r2, #64	; 0x40
 800f10a:	f000 8250 	beq.w	800f5ae <HAL_RCC_OscConfig+0x54a>
 800f10e:	497e      	ldr	r1, [pc, #504]	; (800f308 <HAL_RCC_OscConfig+0x2a4>)
 800f110:	684b      	ldr	r3, [r1, #4]
 800f112:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800f116:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800f11a:	604b      	str	r3, [r1, #4]
 800f11c:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800f11e:	06d9      	lsls	r1, r3, #27
 800f120:	d456      	bmi.n	800f1d0 <HAL_RCC_OscConfig+0x16c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f122:	071d      	lsls	r5, r3, #28
 800f124:	d517      	bpl.n	800f156 <HAL_RCC_OscConfig+0xf2>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800f126:	6963      	ldr	r3, [r4, #20]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	f000 80b4 	beq.w	800f296 <HAL_RCC_OscConfig+0x232>
      __HAL_RCC_LSI_ENABLE();
 800f12e:	4b76      	ldr	r3, [pc, #472]	; (800f308 <HAL_RCC_OscConfig+0x2a4>)
 800f130:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800f132:	461e      	mov	r6, r3
      __HAL_RCC_LSI_ENABLE();
 800f134:	f042 0201 	orr.w	r2, r2, #1
 800f138:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 800f13a:	f7fc f857 	bl	800b1ec <HAL_GetTick>
 800f13e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800f140:	e005      	b.n	800f14e <HAL_RCC_OscConfig+0xea>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800f142:	f7fc f853 	bl	800b1ec <HAL_GetTick>
 800f146:	1b40      	subs	r0, r0, r5
 800f148:	2802      	cmp	r0, #2
 800f14a:	f200 8125 	bhi.w	800f398 <HAL_RCC_OscConfig+0x334>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800f14e:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800f150:	0798      	lsls	r0, r3, #30
 800f152:	d5f6      	bpl.n	800f142 <HAL_RCC_OscConfig+0xde>
 800f154:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800f156:	069a      	lsls	r2, r3, #26
 800f158:	d517      	bpl.n	800f18a <HAL_RCC_OscConfig+0x126>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800f15a:	69a3      	ldr	r3, [r4, #24]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	f000 8136 	beq.w	800f3ce <HAL_RCC_OscConfig+0x36a>
      __HAL_RCC_HSI48_ENABLE();
 800f162:	4b69      	ldr	r3, [pc, #420]	; (800f308 <HAL_RCC_OscConfig+0x2a4>)
 800f164:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800f166:	461e      	mov	r6, r3
      __HAL_RCC_HSI48_ENABLE();
 800f168:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f16c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800f16e:	f7fc f83d 	bl	800b1ec <HAL_GetTick>
 800f172:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800f174:	e005      	b.n	800f182 <HAL_RCC_OscConfig+0x11e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800f176:	f7fc f839 	bl	800b1ec <HAL_GetTick>
 800f17a:	1b40      	subs	r0, r0, r5
 800f17c:	2802      	cmp	r0, #2
 800f17e:	f200 810b 	bhi.w	800f398 <HAL_RCC_OscConfig+0x334>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800f182:	6833      	ldr	r3, [r6, #0]
 800f184:	049f      	lsls	r7, r3, #18
 800f186:	d5f6      	bpl.n	800f176 <HAL_RCC_OscConfig+0x112>
 800f188:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f18a:	0759      	lsls	r1, r3, #29
 800f18c:	f100 80b2 	bmi.w	800f2f4 <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800f190:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f192:	b1d8      	cbz	r0, 800f1cc <HAL_RCC_OscConfig+0x168>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800f194:	4b5c      	ldr	r3, [pc, #368]	; (800f308 <HAL_RCC_OscConfig+0x2a4>)
 800f196:	691a      	ldr	r2, [r3, #16]
 800f198:	f002 0238 	and.w	r2, r2, #56	; 0x38
 800f19c:	2a18      	cmp	r2, #24
 800f19e:	f000 81d0 	beq.w	800f542 <HAL_RCC_OscConfig+0x4de>
        __HAL_RCC_PLL_DISABLE();
 800f1a2:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800f1a4:	2802      	cmp	r0, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800f1a6:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 800f1a8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800f1ac:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800f1ae:	f000 8163 	beq.w	800f478 <HAL_RCC_OscConfig+0x414>
        tickstart = HAL_GetTick();
 800f1b2:	f7fc f81b 	bl	800b1ec <HAL_GetTick>
 800f1b6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800f1b8:	e005      	b.n	800f1c6 <HAL_RCC_OscConfig+0x162>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f1ba:	f7fc f817 	bl	800b1ec <HAL_GetTick>
 800f1be:	1b00      	subs	r0, r0, r4
 800f1c0:	2802      	cmp	r0, #2
 800f1c2:	f200 80e9 	bhi.w	800f398 <HAL_RCC_OscConfig+0x334>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800f1c6:	682b      	ldr	r3, [r5, #0]
 800f1c8:	019b      	lsls	r3, r3, #6
 800f1ca:	d4f6      	bmi.n	800f1ba <HAL_RCC_OscConfig+0x156>
  return HAL_OK;
 800f1cc:	2000      	movs	r0, #0
}
 800f1ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f1d0:	4a4d      	ldr	r2, [pc, #308]	; (800f308 <HAL_RCC_OscConfig+0x2a4>)
 800f1d2:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800f1d4:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f1d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800f1da:	2b08      	cmp	r3, #8
 800f1dc:	d072      	beq.n	800f2c4 <HAL_RCC_OscConfig+0x260>
 800f1de:	2b18      	cmp	r3, #24
 800f1e0:	d06c      	beq.n	800f2bc <HAL_RCC_OscConfig+0x258>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800f1e2:	69e3      	ldr	r3, [r4, #28]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	f000 8105 	beq.w	800f3f4 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_ENABLE();
 800f1ea:	4b47      	ldr	r3, [pc, #284]	; (800f308 <HAL_RCC_OscConfig+0x2a4>)
 800f1ec:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800f1ee:	461e      	mov	r6, r3
        __HAL_RCC_CSI_ENABLE();
 800f1f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800f1f4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800f1f6:	f7fb fff9 	bl	800b1ec <HAL_GetTick>
 800f1fa:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800f1fc:	e005      	b.n	800f20a <HAL_RCC_OscConfig+0x1a6>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800f1fe:	f7fb fff5 	bl	800b1ec <HAL_GetTick>
 800f202:	1b40      	subs	r0, r0, r5
 800f204:	2802      	cmp	r0, #2
 800f206:	f200 80c7 	bhi.w	800f398 <HAL_RCC_OscConfig+0x334>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800f20a:	6833      	ldr	r3, [r6, #0]
 800f20c:	05db      	lsls	r3, r3, #23
 800f20e:	d5f6      	bpl.n	800f1fe <HAL_RCC_OscConfig+0x19a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800f210:	f7fc f804 	bl	800b21c <HAL_GetREVID>
 800f214:	f241 0303 	movw	r3, #4099	; 0x1003
 800f218:	4298      	cmp	r0, r3
 800f21a:	f200 81f1 	bhi.w	800f600 <HAL_RCC_OscConfig+0x59c>
 800f21e:	6a22      	ldr	r2, [r4, #32]
 800f220:	6873      	ldr	r3, [r6, #4]
 800f222:	2a20      	cmp	r2, #32
 800f224:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800f228:	bf0c      	ite	eq
 800f22a:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 800f22e:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800f232:	6073      	str	r3, [r6, #4]
 800f234:	6823      	ldr	r3, [r4, #0]
 800f236:	e774      	b.n	800f122 <HAL_RCC_OscConfig+0xbe>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800f238:	2b18      	cmp	r3, #24
 800f23a:	f000 810d 	beq.w	800f458 <HAL_RCC_OscConfig+0x3f4>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800f23e:	68e2      	ldr	r2, [r4, #12]
 800f240:	2a00      	cmp	r2, #0
 800f242:	f000 80f5 	beq.w	800f430 <HAL_RCC_OscConfig+0x3cc>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800f246:	4930      	ldr	r1, [pc, #192]	; (800f308 <HAL_RCC_OscConfig+0x2a4>)
 800f248:	680b      	ldr	r3, [r1, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f24a:	460e      	mov	r6, r1
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800f24c:	f023 0319 	bic.w	r3, r3, #25
 800f250:	4313      	orrs	r3, r2
 800f252:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 800f254:	f7fb ffca 	bl	800b1ec <HAL_GetTick>
 800f258:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f25a:	e005      	b.n	800f268 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800f25c:	f7fb ffc6 	bl	800b1ec <HAL_GetTick>
 800f260:	1b40      	subs	r0, r0, r5
 800f262:	2802      	cmp	r0, #2
 800f264:	f200 8098 	bhi.w	800f398 <HAL_RCC_OscConfig+0x334>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f268:	6833      	ldr	r3, [r6, #0]
 800f26a:	075f      	lsls	r7, r3, #29
 800f26c:	d5f6      	bpl.n	800f25c <HAL_RCC_OscConfig+0x1f8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f26e:	f7fb ffd5 	bl	800b21c <HAL_GetREVID>
 800f272:	f241 0303 	movw	r3, #4099	; 0x1003
 800f276:	4298      	cmp	r0, r3
 800f278:	f200 81cb 	bhi.w	800f612 <HAL_RCC_OscConfig+0x5ae>
 800f27c:	6922      	ldr	r2, [r4, #16]
 800f27e:	6873      	ldr	r3, [r6, #4]
 800f280:	2a40      	cmp	r2, #64	; 0x40
 800f282:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800f286:	bf0c      	ite	eq
 800f288:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 800f28c:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800f290:	6073      	str	r3, [r6, #4]
 800f292:	6823      	ldr	r3, [r4, #0]
 800f294:	e743      	b.n	800f11e <HAL_RCC_OscConfig+0xba>
      __HAL_RCC_LSI_DISABLE();
 800f296:	4b1c      	ldr	r3, [pc, #112]	; (800f308 <HAL_RCC_OscConfig+0x2a4>)
 800f298:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800f29a:	461e      	mov	r6, r3
      __HAL_RCC_LSI_DISABLE();
 800f29c:	f022 0201 	bic.w	r2, r2, #1
 800f2a0:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 800f2a2:	f7fb ffa3 	bl	800b1ec <HAL_GetTick>
 800f2a6:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800f2a8:	e004      	b.n	800f2b4 <HAL_RCC_OscConfig+0x250>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800f2aa:	f7fb ff9f 	bl	800b1ec <HAL_GetTick>
 800f2ae:	1b40      	subs	r0, r0, r5
 800f2b0:	2802      	cmp	r0, #2
 800f2b2:	d871      	bhi.n	800f398 <HAL_RCC_OscConfig+0x334>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800f2b4:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800f2b6:	0799      	lsls	r1, r3, #30
 800f2b8:	d4f7      	bmi.n	800f2aa <HAL_RCC_OscConfig+0x246>
 800f2ba:	e74b      	b.n	800f154 <HAL_RCC_OscConfig+0xf0>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800f2bc:	f002 0203 	and.w	r2, r2, #3
 800f2c0:	2a01      	cmp	r2, #1
 800f2c2:	d18e      	bne.n	800f1e2 <HAL_RCC_OscConfig+0x17e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800f2c4:	4b10      	ldr	r3, [pc, #64]	; (800f308 <HAL_RCC_OscConfig+0x2a4>)
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	05da      	lsls	r2, r3, #23
 800f2ca:	d552      	bpl.n	800f372 <HAL_RCC_OscConfig+0x30e>
 800f2cc:	69e3      	ldr	r3, [r4, #28]
 800f2ce:	2b80      	cmp	r3, #128	; 0x80
 800f2d0:	d04f      	beq.n	800f372 <HAL_RCC_OscConfig+0x30e>
        return HAL_ERROR;
 800f2d2:	2001      	movs	r0, #1
}
 800f2d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800f2d6:	f001 0103 	and.w	r1, r1, #3
 800f2da:	2902      	cmp	r1, #2
 800f2dc:	f47f aed5 	bne.w	800f08a <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f2e0:	4a09      	ldr	r2, [pc, #36]	; (800f308 <HAL_RCC_OscConfig+0x2a4>)
 800f2e2:	6812      	ldr	r2, [r2, #0]
 800f2e4:	0392      	lsls	r2, r2, #14
 800f2e6:	f57f aef6 	bpl.w	800f0d6 <HAL_RCC_OscConfig+0x72>
 800f2ea:	6862      	ldr	r2, [r4, #4]
 800f2ec:	2a00      	cmp	r2, #0
 800f2ee:	f47f aef2 	bne.w	800f0d6 <HAL_RCC_OscConfig+0x72>
 800f2f2:	e7ee      	b.n	800f2d2 <HAL_RCC_OscConfig+0x26e>
    PWR->CR1 |= PWR_CR1_DBP;
 800f2f4:	4b05      	ldr	r3, [pc, #20]	; (800f30c <HAL_RCC_OscConfig+0x2a8>)
 800f2f6:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f2f8:	461e      	mov	r6, r3
    PWR->CR1 |= PWR_CR1_DBP;
 800f2fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f2fe:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800f300:	f7fb ff74 	bl	800b1ec <HAL_GetTick>
 800f304:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f306:	e008      	b.n	800f31a <HAL_RCC_OscConfig+0x2b6>
 800f308:	58024400 	.word	0x58024400
 800f30c:	58024800 	.word	0x58024800
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800f310:	f7fb ff6c 	bl	800b1ec <HAL_GetTick>
 800f314:	1b40      	subs	r0, r0, r5
 800f316:	2864      	cmp	r0, #100	; 0x64
 800f318:	d83e      	bhi.n	800f398 <HAL_RCC_OscConfig+0x334>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f31a:	6833      	ldr	r3, [r6, #0]
 800f31c:	05da      	lsls	r2, r3, #23
 800f31e:	d5f7      	bpl.n	800f310 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f320:	68a3      	ldr	r3, [r4, #8]
 800f322:	2b01      	cmp	r3, #1
 800f324:	f000 817e 	beq.w	800f624 <HAL_RCC_OscConfig+0x5c0>
 800f328:	2b00      	cmp	r3, #0
 800f32a:	f000 8149 	beq.w	800f5c0 <HAL_RCC_OscConfig+0x55c>
 800f32e:	2b05      	cmp	r3, #5
 800f330:	4bb0      	ldr	r3, [pc, #704]	; (800f5f4 <HAL_RCC_OscConfig+0x590>)
 800f332:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f334:	f000 8185 	beq.w	800f642 <HAL_RCC_OscConfig+0x5de>
 800f338:	f022 0201 	bic.w	r2, r2, #1
 800f33c:	671a      	str	r2, [r3, #112]	; 0x70
 800f33e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f340:	f022 0204 	bic.w	r2, r2, #4
 800f344:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 800f346:	f7fb ff51 	bl	800b1ec <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f34a:	4eaa      	ldr	r6, [pc, #680]	; (800f5f4 <HAL_RCC_OscConfig+0x590>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f34c:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800f350:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f352:	e004      	b.n	800f35e <HAL_RCC_OscConfig+0x2fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f354:	f7fb ff4a 	bl	800b1ec <HAL_GetTick>
 800f358:	1b40      	subs	r0, r0, r5
 800f35a:	42b8      	cmp	r0, r7
 800f35c:	d81c      	bhi.n	800f398 <HAL_RCC_OscConfig+0x334>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f35e:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800f360:	079b      	lsls	r3, r3, #30
 800f362:	d5f7      	bpl.n	800f354 <HAL_RCC_OscConfig+0x2f0>
 800f364:	e714      	b.n	800f190 <HAL_RCC_OscConfig+0x12c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f366:	4aa3      	ldr	r2, [pc, #652]	; (800f5f4 <HAL_RCC_OscConfig+0x590>)
 800f368:	6813      	ldr	r3, [r2, #0]
 800f36a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f36e:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800f370:	e6a0      	b.n	800f0b4 <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800f372:	f7fb ff53 	bl	800b21c <HAL_GetREVID>
 800f376:	f241 0303 	movw	r3, #4099	; 0x1003
 800f37a:	4298      	cmp	r0, r3
 800f37c:	d872      	bhi.n	800f464 <HAL_RCC_OscConfig+0x400>
 800f37e:	6a22      	ldr	r2, [r4, #32]
 800f380:	2a20      	cmp	r2, #32
 800f382:	f000 8155 	beq.w	800f630 <HAL_RCC_OscConfig+0x5cc>
 800f386:	499b      	ldr	r1, [pc, #620]	; (800f5f4 <HAL_RCC_OscConfig+0x590>)
 800f388:	684b      	ldr	r3, [r1, #4]
 800f38a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800f38e:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 800f392:	604b      	str	r3, [r1, #4]
 800f394:	6823      	ldr	r3, [r4, #0]
 800f396:	e6c4      	b.n	800f122 <HAL_RCC_OscConfig+0xbe>
            return HAL_TIMEOUT;
 800f398:	2003      	movs	r0, #3
}
 800f39a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f39c:	4b95      	ldr	r3, [pc, #596]	; (800f5f4 <HAL_RCC_OscConfig+0x590>)
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800f39e:	f241 3788 	movw	r7, #5000	; 0x1388
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f3a2:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800f3a4:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f3a6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800f3aa:	601a      	str	r2, [r3, #0]
 800f3ac:	681a      	ldr	r2, [r3, #0]
 800f3ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800f3b2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800f3b4:	f7fb ff1a 	bl	800b1ec <HAL_GetTick>
 800f3b8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800f3ba:	e004      	b.n	800f3c6 <HAL_RCC_OscConfig+0x362>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800f3bc:	f7fb ff16 	bl	800b1ec <HAL_GetTick>
 800f3c0:	1b40      	subs	r0, r0, r5
 800f3c2:	42b8      	cmp	r0, r7
 800f3c4:	d8e8      	bhi.n	800f398 <HAL_RCC_OscConfig+0x334>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800f3c6:	6833      	ldr	r3, [r6, #0]
 800f3c8:	0398      	lsls	r0, r3, #14
 800f3ca:	d4f7      	bmi.n	800f3bc <HAL_RCC_OscConfig+0x358>
 800f3cc:	e682      	b.n	800f0d4 <HAL_RCC_OscConfig+0x70>
      __HAL_RCC_HSI48_DISABLE();
 800f3ce:	4b89      	ldr	r3, [pc, #548]	; (800f5f4 <HAL_RCC_OscConfig+0x590>)
 800f3d0:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800f3d2:	461e      	mov	r6, r3
      __HAL_RCC_HSI48_DISABLE();
 800f3d4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800f3d8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800f3da:	f7fb ff07 	bl	800b1ec <HAL_GetTick>
 800f3de:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800f3e0:	e004      	b.n	800f3ec <HAL_RCC_OscConfig+0x388>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800f3e2:	f7fb ff03 	bl	800b1ec <HAL_GetTick>
 800f3e6:	1b40      	subs	r0, r0, r5
 800f3e8:	2802      	cmp	r0, #2
 800f3ea:	d8d5      	bhi.n	800f398 <HAL_RCC_OscConfig+0x334>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800f3ec:	6833      	ldr	r3, [r6, #0]
 800f3ee:	0498      	lsls	r0, r3, #18
 800f3f0:	d4f7      	bmi.n	800f3e2 <HAL_RCC_OscConfig+0x37e>
 800f3f2:	e6c9      	b.n	800f188 <HAL_RCC_OscConfig+0x124>
        __HAL_RCC_CSI_DISABLE();
 800f3f4:	4b7f      	ldr	r3, [pc, #508]	; (800f5f4 <HAL_RCC_OscConfig+0x590>)
 800f3f6:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800f3f8:	461e      	mov	r6, r3
        __HAL_RCC_CSI_DISABLE();
 800f3fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f3fe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800f400:	f7fb fef4 	bl	800b1ec <HAL_GetTick>
 800f404:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800f406:	e004      	b.n	800f412 <HAL_RCC_OscConfig+0x3ae>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800f408:	f7fb fef0 	bl	800b1ec <HAL_GetTick>
 800f40c:	1b40      	subs	r0, r0, r5
 800f40e:	2802      	cmp	r0, #2
 800f410:	d8c2      	bhi.n	800f398 <HAL_RCC_OscConfig+0x334>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800f412:	6833      	ldr	r3, [r6, #0]
 800f414:	05df      	lsls	r7, r3, #23
 800f416:	d4f7      	bmi.n	800f408 <HAL_RCC_OscConfig+0x3a4>
 800f418:	6823      	ldr	r3, [r4, #0]
 800f41a:	e682      	b.n	800f122 <HAL_RCC_OscConfig+0xbe>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f41c:	4a75      	ldr	r2, [pc, #468]	; (800f5f4 <HAL_RCC_OscConfig+0x590>)
 800f41e:	6921      	ldr	r1, [r4, #16]
 800f420:	6853      	ldr	r3, [r2, #4]
 800f422:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800f426:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800f42a:	6053      	str	r3, [r2, #4]
 800f42c:	6823      	ldr	r3, [r4, #0]
 800f42e:	e676      	b.n	800f11e <HAL_RCC_OscConfig+0xba>
        __HAL_RCC_HSI_DISABLE();
 800f430:	4b70      	ldr	r3, [pc, #448]	; (800f5f4 <HAL_RCC_OscConfig+0x590>)
 800f432:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800f434:	461e      	mov	r6, r3
        __HAL_RCC_HSI_DISABLE();
 800f436:	f022 0201 	bic.w	r2, r2, #1
 800f43a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800f43c:	f7fb fed6 	bl	800b1ec <HAL_GetTick>
 800f440:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800f442:	e004      	b.n	800f44e <HAL_RCC_OscConfig+0x3ea>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800f444:	f7fb fed2 	bl	800b1ec <HAL_GetTick>
 800f448:	1b40      	subs	r0, r0, r5
 800f44a:	2802      	cmp	r0, #2
 800f44c:	d8a4      	bhi.n	800f398 <HAL_RCC_OscConfig+0x334>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800f44e:	6833      	ldr	r3, [r6, #0]
 800f450:	0758      	lsls	r0, r3, #29
 800f452:	d4f7      	bmi.n	800f444 <HAL_RCC_OscConfig+0x3e0>
 800f454:	6823      	ldr	r3, [r4, #0]
 800f456:	e662      	b.n	800f11e <HAL_RCC_OscConfig+0xba>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800f458:	0792      	lsls	r2, r2, #30
 800f45a:	f47f aef0 	bne.w	800f23e <HAL_RCC_OscConfig+0x1da>
 800f45e:	e643      	b.n	800f0e8 <HAL_RCC_OscConfig+0x84>
    return HAL_ERROR;
 800f460:	2001      	movs	r0, #1
}
 800f462:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800f464:	4a63      	ldr	r2, [pc, #396]	; (800f5f4 <HAL_RCC_OscConfig+0x590>)
 800f466:	6a21      	ldr	r1, [r4, #32]
 800f468:	68d3      	ldr	r3, [r2, #12]
 800f46a:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800f46e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800f472:	60d3      	str	r3, [r2, #12]
 800f474:	6823      	ldr	r3, [r4, #0]
 800f476:	e654      	b.n	800f122 <HAL_RCC_OscConfig+0xbe>
        tickstart = HAL_GetTick();
 800f478:	f7fb feb8 	bl	800b1ec <HAL_GetTick>
 800f47c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800f47e:	e004      	b.n	800f48a <HAL_RCC_OscConfig+0x426>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f480:	f7fb feb4 	bl	800b1ec <HAL_GetTick>
 800f484:	1b80      	subs	r0, r0, r6
 800f486:	2802      	cmp	r0, #2
 800f488:	d886      	bhi.n	800f398 <HAL_RCC_OscConfig+0x334>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800f48a:	682b      	ldr	r3, [r5, #0]
 800f48c:	0199      	lsls	r1, r3, #6
 800f48e:	d4f7      	bmi.n	800f480 <HAL_RCC_OscConfig+0x41c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800f490:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800f492:	4b59      	ldr	r3, [pc, #356]	; (800f5f8 <HAL_RCC_OscConfig+0x594>)
 800f494:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800f496:	4013      	ands	r3, r2
 800f498:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800f49a:	4958      	ldr	r1, [pc, #352]	; (800f5fc <HAL_RCC_OscConfig+0x598>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800f49c:	4303      	orrs	r3, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800f49e:	4e55      	ldr	r6, [pc, #340]	; (800f5f4 <HAL_RCC_OscConfig+0x590>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800f4a0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800f4a4:	62ab      	str	r3, [r5, #40]	; 0x28
 800f4a6:	6b27      	ldr	r7, [r4, #48]	; 0x30
 800f4a8:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 800f4ac:	3f01      	subs	r7, #1
 800f4ae:	1e50      	subs	r0, r2, #1
 800f4b0:	3b01      	subs	r3, #1
 800f4b2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800f4b4:	f3c7 0708 	ubfx	r7, r7, #0, #9
 800f4b8:	025b      	lsls	r3, r3, #9
 800f4ba:	0400      	lsls	r0, r0, #16
 800f4bc:	3a01      	subs	r2, #1
 800f4be:	b29b      	uxth	r3, r3
 800f4c0:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 800f4c4:	0612      	lsls	r2, r2, #24
 800f4c6:	4303      	orrs	r3, r0
 800f4c8:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800f4cc:	433b      	orrs	r3, r7
 800f4ce:	4313      	orrs	r3, r2
 800f4d0:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 800f4d2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800f4d4:	f023 0301 	bic.w	r3, r3, #1
 800f4d8:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800f4da:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800f4dc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f4de:	4011      	ands	r1, r2
 800f4e0:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 800f4e4:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800f4e6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800f4e8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800f4ea:	f023 030c 	bic.w	r3, r3, #12
 800f4ee:	4313      	orrs	r3, r2
 800f4f0:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800f4f2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800f4f4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800f4f6:	f023 0302 	bic.w	r3, r3, #2
 800f4fa:	4313      	orrs	r3, r2
 800f4fc:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800f4fe:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800f500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f504:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f506:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800f508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f50c:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800f50e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800f510:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800f514:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 800f516:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800f518:	f043 0301 	orr.w	r3, r3, #1
 800f51c:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800f51e:	682b      	ldr	r3, [r5, #0]
 800f520:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f524:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800f526:	f7fb fe61 	bl	800b1ec <HAL_GetTick>
 800f52a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800f52c:	e005      	b.n	800f53a <HAL_RCC_OscConfig+0x4d6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f52e:	f7fb fe5d 	bl	800b1ec <HAL_GetTick>
 800f532:	1b00      	subs	r0, r0, r4
 800f534:	2802      	cmp	r0, #2
 800f536:	f63f af2f 	bhi.w	800f398 <HAL_RCC_OscConfig+0x334>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800f53a:	6833      	ldr	r3, [r6, #0]
 800f53c:	019a      	lsls	r2, r3, #6
 800f53e:	d5f6      	bpl.n	800f52e <HAL_RCC_OscConfig+0x4ca>
 800f540:	e644      	b.n	800f1cc <HAL_RCC_OscConfig+0x168>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f542:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800f544:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800f546:	6b1d      	ldr	r5, [r3, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f548:	f43f ae41 	beq.w	800f1ce <HAL_RCC_OscConfig+0x16a>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f54c:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f550:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800f552:	428b      	cmp	r3, r1
 800f554:	f47f aebd 	bne.w	800f2d2 <HAL_RCC_OscConfig+0x26e>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800f558:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f55c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f55e:	429a      	cmp	r2, r3
 800f560:	f47f aeb7 	bne.w	800f2d2 <HAL_RCC_OscConfig+0x26e>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800f564:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f566:	f3c5 0208 	ubfx	r2, r5, #0, #9
 800f56a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800f56c:	429a      	cmp	r2, r3
 800f56e:	f47f aeb0 	bne.w	800f2d2 <HAL_RCC_OscConfig+0x26e>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800f572:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f574:	f3c5 2246 	ubfx	r2, r5, #9, #7
 800f578:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800f57a:	429a      	cmp	r2, r3
 800f57c:	f47f aea9 	bne.w	800f2d2 <HAL_RCC_OscConfig+0x26e>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800f580:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f582:	f3c5 4206 	ubfx	r2, r5, #16, #7
 800f586:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800f588:	429a      	cmp	r2, r3
 800f58a:	f47f aea2 	bne.w	800f2d2 <HAL_RCC_OscConfig+0x26e>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800f58e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800f590:	f3c5 6506 	ubfx	r5, r5, #24, #7
 800f594:	3801      	subs	r0, #1
  return HAL_OK;
 800f596:	1a28      	subs	r0, r5, r0
 800f598:	bf18      	it	ne
 800f59a:	2001      	movne	r0, #1
}
 800f59c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f59e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800f5a2:	601a      	str	r2, [r3, #0]
 800f5a4:	681a      	ldr	r2, [r3, #0]
 800f5a6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800f5aa:	601a      	str	r2, [r3, #0]
 800f5ac:	e582      	b.n	800f0b4 <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f5ae:	4a11      	ldr	r2, [pc, #68]	; (800f5f4 <HAL_RCC_OscConfig+0x590>)
 800f5b0:	6853      	ldr	r3, [r2, #4]
 800f5b2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800f5b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f5ba:	6053      	str	r3, [r2, #4]
 800f5bc:	6823      	ldr	r3, [r4, #0]
 800f5be:	e5ae      	b.n	800f11e <HAL_RCC_OscConfig+0xba>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f5c0:	4b0c      	ldr	r3, [pc, #48]	; (800f5f4 <HAL_RCC_OscConfig+0x590>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f5c2:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f5c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800f5c8:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f5ca:	f022 0201 	bic.w	r2, r2, #1
 800f5ce:	671a      	str	r2, [r3, #112]	; 0x70
 800f5d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f5d2:	f022 0204 	bic.w	r2, r2, #4
 800f5d6:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 800f5d8:	f7fb fe08 	bl	800b1ec <HAL_GetTick>
 800f5dc:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800f5de:	e005      	b.n	800f5ec <HAL_RCC_OscConfig+0x588>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f5e0:	f7fb fe04 	bl	800b1ec <HAL_GetTick>
 800f5e4:	1b40      	subs	r0, r0, r5
 800f5e6:	42b8      	cmp	r0, r7
 800f5e8:	f63f aed6 	bhi.w	800f398 <HAL_RCC_OscConfig+0x334>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800f5ec:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800f5ee:	0798      	lsls	r0, r3, #30
 800f5f0:	d4f6      	bmi.n	800f5e0 <HAL_RCC_OscConfig+0x57c>
 800f5f2:	e5cd      	b.n	800f190 <HAL_RCC_OscConfig+0x12c>
 800f5f4:	58024400 	.word	0x58024400
 800f5f8:	fffffc0c 	.word	0xfffffc0c
 800f5fc:	ffff0007 	.word	0xffff0007
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800f600:	68f3      	ldr	r3, [r6, #12]
 800f602:	6a22      	ldr	r2, [r4, #32]
 800f604:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800f608:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800f60c:	60f3      	str	r3, [r6, #12]
 800f60e:	6823      	ldr	r3, [r4, #0]
 800f610:	e587      	b.n	800f122 <HAL_RCC_OscConfig+0xbe>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f612:	6873      	ldr	r3, [r6, #4]
 800f614:	6922      	ldr	r2, [r4, #16]
 800f616:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800f61a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800f61e:	6073      	str	r3, [r6, #4]
 800f620:	6823      	ldr	r3, [r4, #0]
 800f622:	e57c      	b.n	800f11e <HAL_RCC_OscConfig+0xba>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f624:	4a0b      	ldr	r2, [pc, #44]	; (800f654 <HAL_RCC_OscConfig+0x5f0>)
 800f626:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800f628:	f043 0301 	orr.w	r3, r3, #1
 800f62c:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800f62e:	e68a      	b.n	800f346 <HAL_RCC_OscConfig+0x2e2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800f630:	4a08      	ldr	r2, [pc, #32]	; (800f654 <HAL_RCC_OscConfig+0x5f0>)
 800f632:	6853      	ldr	r3, [r2, #4]
 800f634:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800f638:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f63c:	6053      	str	r3, [r2, #4]
 800f63e:	6823      	ldr	r3, [r4, #0]
 800f640:	e56f      	b.n	800f122 <HAL_RCC_OscConfig+0xbe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f642:	f042 0204 	orr.w	r2, r2, #4
 800f646:	671a      	str	r2, [r3, #112]	; 0x70
 800f648:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f64a:	f042 0201 	orr.w	r2, r2, #1
 800f64e:	671a      	str	r2, [r3, #112]	; 0x70
 800f650:	e679      	b.n	800f346 <HAL_RCC_OscConfig+0x2e2>
 800f652:	bf00      	nop
 800f654:	58024400 	.word	0x58024400

0800f658 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f658:	4a47      	ldr	r2, [pc, #284]	; (800f778 <HAL_RCC_GetSysClockFreq+0x120>)
 800f65a:	6913      	ldr	r3, [r2, #16]
 800f65c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f660:	2b10      	cmp	r3, #16
 800f662:	d004      	beq.n	800f66e <HAL_RCC_GetSysClockFreq+0x16>
 800f664:	2b18      	cmp	r3, #24
 800f666:	d00d      	beq.n	800f684 <HAL_RCC_GetSysClockFreq+0x2c>
 800f668:	b11b      	cbz	r3, 800f672 <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = CSI_VALUE;
 800f66a:	4844      	ldr	r0, [pc, #272]	; (800f77c <HAL_RCC_GetSysClockFreq+0x124>)
 800f66c:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f66e:	4844      	ldr	r0, [pc, #272]	; (800f780 <HAL_RCC_GetSysClockFreq+0x128>)
 800f670:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f672:	6813      	ldr	r3, [r2, #0]
 800f674:	0699      	lsls	r1, r3, #26
 800f676:	d54a      	bpl.n	800f70e <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f678:	6813      	ldr	r3, [r2, #0]
 800f67a:	4842      	ldr	r0, [pc, #264]	; (800f784 <HAL_RCC_GetSysClockFreq+0x12c>)
 800f67c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800f680:	40d8      	lsrs	r0, r3
 800f682:	4770      	bx	lr
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f684:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 800f686:	b430      	push	{r4, r5}
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800f688:	6a94      	ldr	r4, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800f68a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    if (pllm != 0U)
 800f68c:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800f690:	f3c4 1005 	ubfx	r0, r4, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800f694:	6b55      	ldr	r5, [r2, #52]	; 0x34
    if (pllm != 0U)
 800f696:	d038      	beq.n	800f70a <HAL_RCC_GetSysClockFreq+0xb2>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800f698:	f3c5 05cc 	ubfx	r5, r5, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800f69c:	f001 0101 	and.w	r1, r1, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f6a0:	f003 0303 	and.w	r3, r3, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800f6a4:	fb01 f105 	mul.w	r1, r1, r5
 800f6a8:	2b01      	cmp	r3, #1
 800f6aa:	ee07 1a90 	vmov	s15, r1
 800f6ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      switch (pllsource)
 800f6b2:	d002      	beq.n	800f6ba <HAL_RCC_GetSysClockFreq+0x62>
 800f6b4:	2b02      	cmp	r3, #2
 800f6b6:	d02c      	beq.n	800f712 <HAL_RCC_GetSysClockFreq+0xba>
 800f6b8:	b393      	cbz	r3, 800f720 <HAL_RCC_GetSysClockFreq+0xc8>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f6ba:	ee07 0a90 	vmov	s15, r0
 800f6be:	eddf 6a32 	vldr	s13, [pc, #200]	; 800f788 <HAL_RCC_GetSysClockFreq+0x130>
 800f6c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f6c6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800f6c8:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800f6cc:	eddf 5a2f 	vldr	s11, [pc, #188]	; 800f78c <HAL_RCC_GetSysClockFreq+0x134>
 800f6d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f6d4:	ee06 3a90 	vmov	s13, r3
 800f6d8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800f6dc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800f6e0:	ee76 6a85 	vadd.f32	s13, s13, s10
 800f6e4:	eee7 6a25 	vfma.f32	s13, s14, s11
 800f6e8:	ee66 6a26 	vmul.f32	s13, s12, s13
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800f6ec:	4b22      	ldr	r3, [pc, #136]	; (800f778 <HAL_RCC_GetSysClockFreq+0x120>)
 800f6ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6f0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800f6f4:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800f6f6:	ee07 3a90 	vmov	s15, r3
 800f6fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f6fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f702:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f706:	ee17 0a90 	vmov	r0, s15
}
 800f70a:	bc30      	pop	{r4, r5}
 800f70c:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 800f70e:	481d      	ldr	r0, [pc, #116]	; (800f784 <HAL_RCC_GetSysClockFreq+0x12c>)
}
 800f710:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f712:	ee07 0a90 	vmov	s15, r0
 800f716:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800f790 <HAL_RCC_GetSysClockFreq+0x138>
 800f71a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f71e:	e7d2      	b.n	800f6c6 <HAL_RCC_GetSysClockFreq+0x6e>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f720:	6813      	ldr	r3, [r2, #0]
 800f722:	069b      	lsls	r3, r3, #26
 800f724:	d520      	bpl.n	800f768 <HAL_RCC_GetSysClockFreq+0x110>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f726:	6813      	ldr	r3, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f728:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f72c:	4915      	ldr	r1, [pc, #84]	; (800f784 <HAL_RCC_GetSysClockFreq+0x12c>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f72e:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f732:	f3c3 00c1 	ubfx	r0, r3, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f736:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f73a:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f73c:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f73e:	ed9f 5a13 	vldr	s10, [pc, #76]	; 800f78c <HAL_RCC_GetSysClockFreq+0x134>
 800f742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f746:	ee06 1a10 	vmov	s12, r1
 800f74a:	ee06 3a90 	vmov	s13, r3
 800f74e:	eef8 5ac6 	vcvt.f32.s32	s11, s12
 800f752:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800f756:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800f75a:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800f75e:	eee7 6a05 	vfma.f32	s13, s14, s10
 800f762:	ee66 6a26 	vmul.f32	s13, s12, s13
 800f766:	e7c1      	b.n	800f6ec <HAL_RCC_GetSysClockFreq+0x94>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f768:	ee07 0a90 	vmov	s15, r0
 800f76c:	eddf 6a09 	vldr	s13, [pc, #36]	; 800f794 <HAL_RCC_GetSysClockFreq+0x13c>
 800f770:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f774:	e7a7      	b.n	800f6c6 <HAL_RCC_GetSysClockFreq+0x6e>
 800f776:	bf00      	nop
 800f778:	58024400 	.word	0x58024400
 800f77c:	003d0900 	.word	0x003d0900
 800f780:	017d7840 	.word	0x017d7840
 800f784:	03d09000 	.word	0x03d09000
 800f788:	4a742400 	.word	0x4a742400
 800f78c:	39000000 	.word	0x39000000
 800f790:	4bbebc20 	.word	0x4bbebc20
 800f794:	4c742400 	.word	0x4c742400

0800f798 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800f798:	2800      	cmp	r0, #0
 800f79a:	f000 810e 	beq.w	800f9ba <HAL_RCC_ClockConfig+0x222>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800f79e:	4a8d      	ldr	r2, [pc, #564]	; (800f9d4 <HAL_RCC_ClockConfig+0x23c>)
 800f7a0:	6813      	ldr	r3, [r2, #0]
 800f7a2:	f003 030f 	and.w	r3, r3, #15
 800f7a6:	428b      	cmp	r3, r1
{
 800f7a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7ac:	4604      	mov	r4, r0
 800f7ae:	460d      	mov	r5, r1
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800f7b0:	d20c      	bcs.n	800f7cc <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f7b2:	6813      	ldr	r3, [r2, #0]
 800f7b4:	f023 030f 	bic.w	r3, r3, #15
 800f7b8:	430b      	orrs	r3, r1
 800f7ba:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f7bc:	6813      	ldr	r3, [r2, #0]
 800f7be:	f003 030f 	and.w	r3, r3, #15
 800f7c2:	428b      	cmp	r3, r1
 800f7c4:	d002      	beq.n	800f7cc <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800f7c6:	2001      	movs	r0, #1
}
 800f7c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800f7cc:	6823      	ldr	r3, [r4, #0]
 800f7ce:	075f      	lsls	r7, r3, #29
 800f7d0:	d50b      	bpl.n	800f7ea <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800f7d2:	4981      	ldr	r1, [pc, #516]	; (800f9d8 <HAL_RCC_ClockConfig+0x240>)
 800f7d4:	6920      	ldr	r0, [r4, #16]
 800f7d6:	698a      	ldr	r2, [r1, #24]
 800f7d8:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800f7dc:	4290      	cmp	r0, r2
 800f7de:	d904      	bls.n	800f7ea <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800f7e0:	698a      	ldr	r2, [r1, #24]
 800f7e2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800f7e6:	4302      	orrs	r2, r0
 800f7e8:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f7ea:	071e      	lsls	r6, r3, #28
 800f7ec:	d50b      	bpl.n	800f806 <HAL_RCC_ClockConfig+0x6e>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800f7ee:	497a      	ldr	r1, [pc, #488]	; (800f9d8 <HAL_RCC_ClockConfig+0x240>)
 800f7f0:	6960      	ldr	r0, [r4, #20]
 800f7f2:	69ca      	ldr	r2, [r1, #28]
 800f7f4:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800f7f8:	4290      	cmp	r0, r2
 800f7fa:	d904      	bls.n	800f806 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800f7fc:	69ca      	ldr	r2, [r1, #28]
 800f7fe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800f802:	4302      	orrs	r2, r0
 800f804:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f806:	06d8      	lsls	r0, r3, #27
 800f808:	d50b      	bpl.n	800f822 <HAL_RCC_ClockConfig+0x8a>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800f80a:	4973      	ldr	r1, [pc, #460]	; (800f9d8 <HAL_RCC_ClockConfig+0x240>)
 800f80c:	69a0      	ldr	r0, [r4, #24]
 800f80e:	69ca      	ldr	r2, [r1, #28]
 800f810:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800f814:	4290      	cmp	r0, r2
 800f816:	d904      	bls.n	800f822 <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800f818:	69ca      	ldr	r2, [r1, #28]
 800f81a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f81e:	4302      	orrs	r2, r0
 800f820:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800f822:	0699      	lsls	r1, r3, #26
 800f824:	d50b      	bpl.n	800f83e <HAL_RCC_ClockConfig+0xa6>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800f826:	496c      	ldr	r1, [pc, #432]	; (800f9d8 <HAL_RCC_ClockConfig+0x240>)
 800f828:	69e0      	ldr	r0, [r4, #28]
 800f82a:	6a0a      	ldr	r2, [r1, #32]
 800f82c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800f830:	4290      	cmp	r0, r2
 800f832:	d904      	bls.n	800f83e <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800f834:	6a0a      	ldr	r2, [r1, #32]
 800f836:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800f83a:	4302      	orrs	r2, r0
 800f83c:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f83e:	079a      	lsls	r2, r3, #30
 800f840:	f140 80ad 	bpl.w	800f99e <HAL_RCC_ClockConfig+0x206>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800f844:	4864      	ldr	r0, [pc, #400]	; (800f9d8 <HAL_RCC_ClockConfig+0x240>)
 800f846:	68e1      	ldr	r1, [r4, #12]
 800f848:	6982      	ldr	r2, [r0, #24]
 800f84a:	f002 020f 	and.w	r2, r2, #15
 800f84e:	4291      	cmp	r1, r2
 800f850:	d904      	bls.n	800f85c <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f852:	6982      	ldr	r2, [r0, #24]
 800f854:	f022 020f 	bic.w	r2, r2, #15
 800f858:	430a      	orrs	r2, r1
 800f85a:	6182      	str	r2, [r0, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f85c:	07d8      	lsls	r0, r3, #31
 800f85e:	d531      	bpl.n	800f8c4 <HAL_RCC_ClockConfig+0x12c>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800f860:	4a5d      	ldr	r2, [pc, #372]	; (800f9d8 <HAL_RCC_ClockConfig+0x240>)
 800f862:	68a1      	ldr	r1, [r4, #8]
 800f864:	6993      	ldr	r3, [r2, #24]
 800f866:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800f86a:	430b      	orrs	r3, r1
 800f86c:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f86e:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f870:	6813      	ldr	r3, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f872:	2902      	cmp	r1, #2
 800f874:	f000 80a3 	beq.w	800f9be <HAL_RCC_ClockConfig+0x226>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800f878:	2903      	cmp	r1, #3
 800f87a:	f000 809a 	beq.w	800f9b2 <HAL_RCC_ClockConfig+0x21a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800f87e:	2901      	cmp	r1, #1
 800f880:	f000 80a3 	beq.w	800f9ca <HAL_RCC_ClockConfig+0x232>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f884:	0758      	lsls	r0, r3, #29
 800f886:	d59e      	bpl.n	800f7c6 <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800f888:	4a53      	ldr	r2, [pc, #332]	; (800f9d8 <HAL_RCC_ClockConfig+0x240>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f88a:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800f88e:	6913      	ldr	r3, [r2, #16]
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f890:	4617      	mov	r7, r2
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800f892:	f023 0307 	bic.w	r3, r3, #7
 800f896:	430b      	orrs	r3, r1
 800f898:	6113      	str	r3, [r2, #16]
      tickstart = HAL_GetTick();
 800f89a:	f7fb fca7 	bl	800b1ec <HAL_GetTick>
 800f89e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f8a0:	e005      	b.n	800f8ae <HAL_RCC_ClockConfig+0x116>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f8a2:	f7fb fca3 	bl	800b1ec <HAL_GetTick>
 800f8a6:	1b80      	subs	r0, r0, r6
 800f8a8:	4540      	cmp	r0, r8
 800f8aa:	f200 808c 	bhi.w	800f9c6 <HAL_RCC_ClockConfig+0x22e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f8ae:	693b      	ldr	r3, [r7, #16]
 800f8b0:	6862      	ldr	r2, [r4, #4]
 800f8b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f8b6:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800f8ba:	d1f2      	bne.n	800f8a2 <HAL_RCC_ClockConfig+0x10a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f8bc:	6823      	ldr	r3, [r4, #0]
 800f8be:	0799      	lsls	r1, r3, #30
 800f8c0:	d506      	bpl.n	800f8d0 <HAL_RCC_ClockConfig+0x138>
 800f8c2:	68e1      	ldr	r1, [r4, #12]
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800f8c4:	4844      	ldr	r0, [pc, #272]	; (800f9d8 <HAL_RCC_ClockConfig+0x240>)
 800f8c6:	6982      	ldr	r2, [r0, #24]
 800f8c8:	f002 020f 	and.w	r2, r2, #15
 800f8cc:	428a      	cmp	r2, r1
 800f8ce:	d86a      	bhi.n	800f9a6 <HAL_RCC_ClockConfig+0x20e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800f8d0:	4940      	ldr	r1, [pc, #256]	; (800f9d4 <HAL_RCC_ClockConfig+0x23c>)
 800f8d2:	680a      	ldr	r2, [r1, #0]
 800f8d4:	f002 020f 	and.w	r2, r2, #15
 800f8d8:	42aa      	cmp	r2, r5
 800f8da:	d90a      	bls.n	800f8f2 <HAL_RCC_ClockConfig+0x15a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f8dc:	680a      	ldr	r2, [r1, #0]
 800f8de:	f022 020f 	bic.w	r2, r2, #15
 800f8e2:	432a      	orrs	r2, r5
 800f8e4:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f8e6:	680a      	ldr	r2, [r1, #0]
 800f8e8:	f002 020f 	and.w	r2, r2, #15
 800f8ec:	42aa      	cmp	r2, r5
 800f8ee:	f47f af6a 	bne.w	800f7c6 <HAL_RCC_ClockConfig+0x2e>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800f8f2:	075a      	lsls	r2, r3, #29
 800f8f4:	d50b      	bpl.n	800f90e <HAL_RCC_ClockConfig+0x176>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800f8f6:	4938      	ldr	r1, [pc, #224]	; (800f9d8 <HAL_RCC_ClockConfig+0x240>)
 800f8f8:	6920      	ldr	r0, [r4, #16]
 800f8fa:	698a      	ldr	r2, [r1, #24]
 800f8fc:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800f900:	4290      	cmp	r0, r2
 800f902:	d204      	bcs.n	800f90e <HAL_RCC_ClockConfig+0x176>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800f904:	698a      	ldr	r2, [r1, #24]
 800f906:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800f90a:	4302      	orrs	r2, r0
 800f90c:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f90e:	071f      	lsls	r7, r3, #28
 800f910:	d50b      	bpl.n	800f92a <HAL_RCC_ClockConfig+0x192>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800f912:	4931      	ldr	r1, [pc, #196]	; (800f9d8 <HAL_RCC_ClockConfig+0x240>)
 800f914:	6960      	ldr	r0, [r4, #20]
 800f916:	69ca      	ldr	r2, [r1, #28]
 800f918:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800f91c:	4290      	cmp	r0, r2
 800f91e:	d204      	bcs.n	800f92a <HAL_RCC_ClockConfig+0x192>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800f920:	69ca      	ldr	r2, [r1, #28]
 800f922:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800f926:	4302      	orrs	r2, r0
 800f928:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f92a:	06de      	lsls	r6, r3, #27
 800f92c:	d50b      	bpl.n	800f946 <HAL_RCC_ClockConfig+0x1ae>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800f92e:	492a      	ldr	r1, [pc, #168]	; (800f9d8 <HAL_RCC_ClockConfig+0x240>)
 800f930:	69a0      	ldr	r0, [r4, #24]
 800f932:	69ca      	ldr	r2, [r1, #28]
 800f934:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800f938:	4290      	cmp	r0, r2
 800f93a:	d204      	bcs.n	800f946 <HAL_RCC_ClockConfig+0x1ae>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800f93c:	69ca      	ldr	r2, [r1, #28]
 800f93e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f942:	4302      	orrs	r2, r0
 800f944:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800f946:	069d      	lsls	r5, r3, #26
 800f948:	d50b      	bpl.n	800f962 <HAL_RCC_ClockConfig+0x1ca>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800f94a:	4a23      	ldr	r2, [pc, #140]	; (800f9d8 <HAL_RCC_ClockConfig+0x240>)
 800f94c:	69e1      	ldr	r1, [r4, #28]
 800f94e:	6a13      	ldr	r3, [r2, #32]
 800f950:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800f954:	4299      	cmp	r1, r3
 800f956:	d204      	bcs.n	800f962 <HAL_RCC_ClockConfig+0x1ca>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800f958:	6a13      	ldr	r3, [r2, #32]
 800f95a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f95e:	430b      	orrs	r3, r1
 800f960:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800f962:	f7ff fe79 	bl	800f658 <HAL_RCC_GetSysClockFreq>
 800f966:	4b1c      	ldr	r3, [pc, #112]	; (800f9d8 <HAL_RCC_ClockConfig+0x240>)
 800f968:	4602      	mov	r2, r0
 800f96a:	481c      	ldr	r0, [pc, #112]	; (800f9dc <HAL_RCC_ClockConfig+0x244>)
 800f96c:	6999      	ldr	r1, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f96e:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800f970:	f3c1 2103 	ubfx	r1, r1, #8, #4
  halstatus = HAL_InitTick (uwTickPrio);
 800f974:	4d1a      	ldr	r5, [pc, #104]	; (800f9e0 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f976:	f003 030f 	and.w	r3, r3, #15
 800f97a:	4c1a      	ldr	r4, [pc, #104]	; (800f9e4 <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800f97c:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f97e:	5cc3      	ldrb	r3, [r0, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800f980:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick (uwTickPrio);
 800f984:	6828      	ldr	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f986:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = common_system_clock;
 800f98a:	4d17      	ldr	r5, [pc, #92]	; (800f9e8 <HAL_RCC_ClockConfig+0x250>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800f98c:	40ca      	lsrs	r2, r1
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f98e:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 800f992:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f994:	6023      	str	r3, [r4, #0]
}
 800f996:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 800f99a:	f7fb bbc5 	b.w	800b128 <HAL_InitTick>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f99e:	07da      	lsls	r2, r3, #31
 800f9a0:	f53f af5e 	bmi.w	800f860 <HAL_RCC_ClockConfig+0xc8>
 800f9a4:	e794      	b.n	800f8d0 <HAL_RCC_ClockConfig+0x138>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f9a6:	6982      	ldr	r2, [r0, #24]
 800f9a8:	f022 020f 	bic.w	r2, r2, #15
 800f9ac:	4311      	orrs	r1, r2
 800f9ae:	6181      	str	r1, [r0, #24]
 800f9b0:	e78e      	b.n	800f8d0 <HAL_RCC_ClockConfig+0x138>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800f9b2:	019f      	lsls	r7, r3, #6
 800f9b4:	f53f af68 	bmi.w	800f888 <HAL_RCC_ClockConfig+0xf0>
 800f9b8:	e705      	b.n	800f7c6 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800f9ba:	2001      	movs	r0, #1
}
 800f9bc:	4770      	bx	lr
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f9be:	039b      	lsls	r3, r3, #14
 800f9c0:	f53f af62 	bmi.w	800f888 <HAL_RCC_ClockConfig+0xf0>
 800f9c4:	e6ff      	b.n	800f7c6 <HAL_RCC_ClockConfig+0x2e>
            return HAL_TIMEOUT;
 800f9c6:	2003      	movs	r0, #3
 800f9c8:	e6fe      	b.n	800f7c8 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800f9ca:	05de      	lsls	r6, r3, #23
 800f9cc:	f53f af5c 	bmi.w	800f888 <HAL_RCC_ClockConfig+0xf0>
 800f9d0:	e6f9      	b.n	800f7c6 <HAL_RCC_ClockConfig+0x2e>
 800f9d2:	bf00      	nop
 800f9d4:	52002000 	.word	0x52002000
 800f9d8:	58024400 	.word	0x58024400
 800f9dc:	080970c8 	.word	0x080970c8
 800f9e0:	200076fc 	.word	0x200076fc
 800f9e4:	20007620 	.word	0x20007620
 800f9e8:	2000761c 	.word	0x2000761c

0800f9ec <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f9ec:	4a18      	ldr	r2, [pc, #96]	; (800fa50 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f9ee:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f9f0:	6913      	ldr	r3, [r2, #16]
 800f9f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f9f6:	2b10      	cmp	r3, #16
 800f9f8:	d01a      	beq.n	800fa30 <HAL_RCC_GetHCLKFreq+0x44>
 800f9fa:	2b18      	cmp	r3, #24
 800f9fc:	d023      	beq.n	800fa46 <HAL_RCC_GetHCLKFreq+0x5a>
 800f9fe:	b1cb      	cbz	r3, 800fa34 <HAL_RCC_GetHCLKFreq+0x48>
    sysclockfreq = CSI_VALUE;
 800fa00:	4814      	ldr	r0, [pc, #80]	; (800fa54 <HAL_RCC_GetHCLKFreq+0x68>)
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800fa02:	4b13      	ldr	r3, [pc, #76]	; (800fa50 <HAL_RCC_GetHCLKFreq+0x64>)
 800fa04:	4914      	ldr	r1, [pc, #80]	; (800fa58 <HAL_RCC_GetHCLKFreq+0x6c>)
 800fa06:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800fa08:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800fa0a:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800fa0e:	4c13      	ldr	r4, [pc, #76]	; (800fa5c <HAL_RCC_GetHCLKFreq+0x70>)
 800fa10:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800fa14:	4d12      	ldr	r5, [pc, #72]	; (800fa60 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800fa16:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800fa18:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800fa1a:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800fa1e:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800fa22:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800fa26:	fa22 f003 	lsr.w	r0, r2, r3
  SystemCoreClock = common_system_clock;
 800fa2a:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800fa2c:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800fa2e:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800fa30:	480c      	ldr	r0, [pc, #48]	; (800fa64 <HAL_RCC_GetHCLKFreq+0x78>)
 800fa32:	e7e6      	b.n	800fa02 <HAL_RCC_GetHCLKFreq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fa34:	6813      	ldr	r3, [r2, #0]
 800fa36:	069b      	lsls	r3, r3, #26
 800fa38:	d508      	bpl.n	800fa4c <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800fa3a:	6812      	ldr	r2, [r2, #0]
 800fa3c:	480a      	ldr	r0, [pc, #40]	; (800fa68 <HAL_RCC_GetHCLKFreq+0x7c>)
 800fa3e:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800fa42:	40d0      	lsrs	r0, r2
 800fa44:	e7dd      	b.n	800fa02 <HAL_RCC_GetHCLKFreq+0x16>
 800fa46:	f7ff fa89 	bl	800ef5c <HAL_RCC_GetSysClockFreq.part.0>
 800fa4a:	e7da      	b.n	800fa02 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800fa4c:	4806      	ldr	r0, [pc, #24]	; (800fa68 <HAL_RCC_GetHCLKFreq+0x7c>)
 800fa4e:	e7d8      	b.n	800fa02 <HAL_RCC_GetHCLKFreq+0x16>
 800fa50:	58024400 	.word	0x58024400
 800fa54:	003d0900 	.word	0x003d0900
 800fa58:	080970c8 	.word	0x080970c8
 800fa5c:	20007620 	.word	0x20007620
 800fa60:	2000761c 	.word	0x2000761c
 800fa64:	017d7840 	.word	0x017d7840
 800fa68:	03d09000 	.word	0x03d09000

0800fa6c <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800fa6c:	4a1c      	ldr	r2, [pc, #112]	; (800fae0 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800fa6e:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800fa70:	6913      	ldr	r3, [r2, #16]
 800fa72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fa76:	2b10      	cmp	r3, #16
 800fa78:	d021      	beq.n	800fabe <HAL_RCC_GetPCLK1Freq+0x52>
 800fa7a:	2b18      	cmp	r3, #24
 800fa7c:	d02a      	beq.n	800fad4 <HAL_RCC_GetPCLK1Freq+0x68>
 800fa7e:	b303      	cbz	r3, 800fac2 <HAL_RCC_GetPCLK1Freq+0x56>
    sysclockfreq = CSI_VALUE;
 800fa80:	4818      	ldr	r0, [pc, #96]	; (800fae4 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800fa82:	4a17      	ldr	r2, [pc, #92]	; (800fae0 <HAL_RCC_GetPCLK1Freq+0x74>)
 800fa84:	4918      	ldr	r1, [pc, #96]	; (800fae8 <HAL_RCC_GetPCLK1Freq+0x7c>)
 800fa86:	6994      	ldr	r4, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800fa88:	6993      	ldr	r3, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800fa8a:	f3c4 2403 	ubfx	r4, r4, #8, #4
  SystemCoreClock = common_system_clock;
 800fa8e:	4d17      	ldr	r5, [pc, #92]	; (800faec <HAL_RCC_GetPCLK1Freq+0x80>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800fa90:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800fa94:	5d0c      	ldrb	r4, [r1, r4]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800fa96:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800fa98:	f004 041f 	and.w	r4, r4, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800fa9c:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800faa0:	40e0      	lsrs	r0, r4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800faa2:	4c13      	ldr	r4, [pc, #76]	; (800faf0 <HAL_RCC_GetPCLK1Freq+0x84>)
 800faa4:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 800faa8:	6028      	str	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800faaa:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800faac:	69d2      	ldr	r2, [r2, #28]
 800faae:	f3c2 1202 	ubfx	r2, r2, #4, #3
 800fab2:	5c88      	ldrb	r0, [r1, r2]
 800fab4:	f000 001f 	and.w	r0, r0, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800fab8:	fa23 f000 	lsr.w	r0, r3, r0
 800fabc:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800fabe:	480d      	ldr	r0, [pc, #52]	; (800faf4 <HAL_RCC_GetPCLK1Freq+0x88>)
 800fac0:	e7df      	b.n	800fa82 <HAL_RCC_GetPCLK1Freq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fac2:	6813      	ldr	r3, [r2, #0]
 800fac4:	069b      	lsls	r3, r3, #26
 800fac6:	d508      	bpl.n	800fada <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800fac8:	6813      	ldr	r3, [r2, #0]
 800faca:	480b      	ldr	r0, [pc, #44]	; (800faf8 <HAL_RCC_GetPCLK1Freq+0x8c>)
 800facc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800fad0:	40d8      	lsrs	r0, r3
 800fad2:	e7d6      	b.n	800fa82 <HAL_RCC_GetPCLK1Freq+0x16>
 800fad4:	f7ff fa42 	bl	800ef5c <HAL_RCC_GetSysClockFreq.part.0>
 800fad8:	e7d3      	b.n	800fa82 <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800fada:	4807      	ldr	r0, [pc, #28]	; (800faf8 <HAL_RCC_GetPCLK1Freq+0x8c>)
 800fadc:	e7d1      	b.n	800fa82 <HAL_RCC_GetPCLK1Freq+0x16>
 800fade:	bf00      	nop
 800fae0:	58024400 	.word	0x58024400
 800fae4:	003d0900 	.word	0x003d0900
 800fae8:	080970c8 	.word	0x080970c8
 800faec:	2000761c 	.word	0x2000761c
 800faf0:	20007620 	.word	0x20007620
 800faf4:	017d7840 	.word	0x017d7840
 800faf8:	03d09000 	.word	0x03d09000

0800fafc <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800fafc:	4a1c      	ldr	r2, [pc, #112]	; (800fb70 <HAL_RCC_GetPCLK2Freq+0x74>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800fafe:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800fb00:	6913      	ldr	r3, [r2, #16]
 800fb02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fb06:	2b10      	cmp	r3, #16
 800fb08:	d021      	beq.n	800fb4e <HAL_RCC_GetPCLK2Freq+0x52>
 800fb0a:	2b18      	cmp	r3, #24
 800fb0c:	d02a      	beq.n	800fb64 <HAL_RCC_GetPCLK2Freq+0x68>
 800fb0e:	b303      	cbz	r3, 800fb52 <HAL_RCC_GetPCLK2Freq+0x56>
    sysclockfreq = CSI_VALUE;
 800fb10:	4818      	ldr	r0, [pc, #96]	; (800fb74 <HAL_RCC_GetPCLK2Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800fb12:	4a17      	ldr	r2, [pc, #92]	; (800fb70 <HAL_RCC_GetPCLK2Freq+0x74>)
 800fb14:	4918      	ldr	r1, [pc, #96]	; (800fb78 <HAL_RCC_GetPCLK2Freq+0x7c>)
 800fb16:	6994      	ldr	r4, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800fb18:	6993      	ldr	r3, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800fb1a:	f3c4 2403 	ubfx	r4, r4, #8, #4
  SystemCoreClock = common_system_clock;
 800fb1e:	4d17      	ldr	r5, [pc, #92]	; (800fb7c <HAL_RCC_GetPCLK2Freq+0x80>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800fb20:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800fb24:	5d0c      	ldrb	r4, [r1, r4]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800fb26:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800fb28:	f004 041f 	and.w	r4, r4, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800fb2c:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800fb30:	40e0      	lsrs	r0, r4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800fb32:	4c13      	ldr	r4, [pc, #76]	; (800fb80 <HAL_RCC_GetPCLK2Freq+0x84>)
 800fb34:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 800fb38:	6028      	str	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800fb3a:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800fb3c:	69d2      	ldr	r2, [r2, #28]
 800fb3e:	f3c2 2202 	ubfx	r2, r2, #8, #3
 800fb42:	5c88      	ldrb	r0, [r1, r2]
 800fb44:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800fb48:	fa23 f000 	lsr.w	r0, r3, r0
 800fb4c:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800fb4e:	480d      	ldr	r0, [pc, #52]	; (800fb84 <HAL_RCC_GetPCLK2Freq+0x88>)
 800fb50:	e7df      	b.n	800fb12 <HAL_RCC_GetPCLK2Freq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fb52:	6813      	ldr	r3, [r2, #0]
 800fb54:	069b      	lsls	r3, r3, #26
 800fb56:	d508      	bpl.n	800fb6a <HAL_RCC_GetPCLK2Freq+0x6e>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800fb58:	6813      	ldr	r3, [r2, #0]
 800fb5a:	480b      	ldr	r0, [pc, #44]	; (800fb88 <HAL_RCC_GetPCLK2Freq+0x8c>)
 800fb5c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800fb60:	40d8      	lsrs	r0, r3
 800fb62:	e7d6      	b.n	800fb12 <HAL_RCC_GetPCLK2Freq+0x16>
 800fb64:	f7ff f9fa 	bl	800ef5c <HAL_RCC_GetSysClockFreq.part.0>
 800fb68:	e7d3      	b.n	800fb12 <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800fb6a:	4807      	ldr	r0, [pc, #28]	; (800fb88 <HAL_RCC_GetPCLK2Freq+0x8c>)
 800fb6c:	e7d1      	b.n	800fb12 <HAL_RCC_GetPCLK2Freq+0x16>
 800fb6e:	bf00      	nop
 800fb70:	58024400 	.word	0x58024400
 800fb74:	003d0900 	.word	0x003d0900
 800fb78:	080970c8 	.word	0x080970c8
 800fb7c:	2000761c 	.word	0x2000761c
 800fb80:	20007620 	.word	0x20007620
 800fb84:	017d7840 	.word	0x017d7840
 800fb88:	03d09000 	.word	0x03d09000

0800fb8c <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800fb8c:	4a3b      	ldr	r2, [pc, #236]	; (800fc7c <RCCEx_PLL2_Config+0xf0>)
{
 800fb8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800fb90:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800fb92:	f003 0303 	and.w	r3, r3, #3
 800fb96:	2b03      	cmp	r3, #3
 800fb98:	d069      	beq.n	800fc6e <RCCEx_PLL2_Config+0xe2>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800fb9a:	6813      	ldr	r3, [r2, #0]
 800fb9c:	4606      	mov	r6, r0
 800fb9e:	460f      	mov	r7, r1

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800fba0:	4614      	mov	r4, r2
    __HAL_RCC_PLL2_DISABLE();
 800fba2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800fba6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800fba8:	f7fb fb20 	bl	800b1ec <HAL_GetTick>
 800fbac:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800fbae:	e004      	b.n	800fbba <RCCEx_PLL2_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800fbb0:	f7fb fb1c 	bl	800b1ec <HAL_GetTick>
 800fbb4:	1b43      	subs	r3, r0, r5
 800fbb6:	2b02      	cmp	r3, #2
 800fbb8:	d857      	bhi.n	800fc6a <RCCEx_PLL2_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800fbba:	6823      	ldr	r3, [r4, #0]
 800fbbc:	011a      	lsls	r2, r3, #4
 800fbbe:	d4f7      	bmi.n	800fbb0 <RCCEx_PLL2_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800fbc0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800fbc2:	6832      	ldr	r2, [r6, #0]
 800fbc4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800fbc8:	492d      	ldr	r1, [pc, #180]	; (800fc80 <RCCEx_PLL2_Config+0xf4>)
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800fbca:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800fbce:	62a3      	str	r3, [r4, #40]	; 0x28
 800fbd0:	6875      	ldr	r5, [r6, #4]
 800fbd2:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800fbd6:	3d01      	subs	r5, #1
 800fbd8:	1e50      	subs	r0, r2, #1
 800fbda:	3b01      	subs	r3, #1
 800fbdc:	6932      	ldr	r2, [r6, #16]
 800fbde:	f3c5 0508 	ubfx	r5, r5, #0, #9
 800fbe2:	025b      	lsls	r3, r3, #9
 800fbe4:	0400      	lsls	r0, r0, #16
 800fbe6:	3a01      	subs	r2, #1
 800fbe8:	b29b      	uxth	r3, r3
 800fbea:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 800fbee:	0612      	lsls	r2, r2, #24
 800fbf0:	4303      	orrs	r3, r0
 800fbf2:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800fbf6:	432b      	orrs	r3, r5
 800fbf8:	4313      	orrs	r3, r2
 800fbfa:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800fbfc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800fbfe:	6972      	ldr	r2, [r6, #20]
 800fc00:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800fc04:	4313      	orrs	r3, r2
 800fc06:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800fc08:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800fc0a:	69b2      	ldr	r2, [r6, #24]
 800fc0c:	f023 0320 	bic.w	r3, r3, #32
 800fc10:	4313      	orrs	r3, r2
 800fc12:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 800fc14:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800fc16:	f023 0310 	bic.w	r3, r3, #16
 800fc1a:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800fc1c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800fc1e:	69f3      	ldr	r3, [r6, #28]
 800fc20:	4011      	ands	r1, r2
 800fc22:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 800fc26:	63e1      	str	r1, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800fc28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800fc2a:	f043 0310 	orr.w	r3, r3, #16
 800fc2e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800fc30:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 800fc32:	b1f7      	cbz	r7, 800fc72 <RCCEx_PLL2_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800fc34:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800fc36:	bf0c      	ite	eq
 800fc38:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800fc3c:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 800fc40:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800fc42:	4b0e      	ldr	r3, [pc, #56]	; (800fc7c <RCCEx_PLL2_Config+0xf0>)
 800fc44:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800fc46:	461d      	mov	r5, r3
    __HAL_RCC_PLL2_ENABLE();
 800fc48:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800fc4c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800fc4e:	f7fb facd 	bl	800b1ec <HAL_GetTick>
 800fc52:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800fc54:	e004      	b.n	800fc60 <RCCEx_PLL2_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800fc56:	f7fb fac9 	bl	800b1ec <HAL_GetTick>
 800fc5a:	1b00      	subs	r0, r0, r4
 800fc5c:	2802      	cmp	r0, #2
 800fc5e:	d804      	bhi.n	800fc6a <RCCEx_PLL2_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800fc60:	682b      	ldr	r3, [r5, #0]
 800fc62:	011b      	lsls	r3, r3, #4
 800fc64:	d5f7      	bpl.n	800fc56 <RCCEx_PLL2_Config+0xca>
    }

  }


  return status;
 800fc66:	2000      	movs	r0, #0
}
 800fc68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800fc6a:	2003      	movs	r0, #3
}
 800fc6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800fc6e:	2001      	movs	r0, #1
}
 800fc70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800fc72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fc76:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fc78:	e7e3      	b.n	800fc42 <RCCEx_PLL2_Config+0xb6>
 800fc7a:	bf00      	nop
 800fc7c:	58024400 	.word	0x58024400
 800fc80:	ffff0007 	.word	0xffff0007

0800fc84 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800fc84:	4a3b      	ldr	r2, [pc, #236]	; (800fd74 <RCCEx_PLL3_Config+0xf0>)
{
 800fc86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800fc88:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800fc8a:	f003 0303 	and.w	r3, r3, #3
 800fc8e:	2b03      	cmp	r3, #3
 800fc90:	d069      	beq.n	800fd66 <RCCEx_PLL3_Config+0xe2>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800fc92:	6813      	ldr	r3, [r2, #0]
 800fc94:	4606      	mov	r6, r0
 800fc96:	460f      	mov	r7, r1

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800fc98:	4614      	mov	r4, r2
    __HAL_RCC_PLL3_DISABLE();
 800fc9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fc9e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800fca0:	f7fb faa4 	bl	800b1ec <HAL_GetTick>
 800fca4:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800fca6:	e004      	b.n	800fcb2 <RCCEx_PLL3_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800fca8:	f7fb faa0 	bl	800b1ec <HAL_GetTick>
 800fcac:	1b43      	subs	r3, r0, r5
 800fcae:	2b02      	cmp	r3, #2
 800fcb0:	d857      	bhi.n	800fd62 <RCCEx_PLL3_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800fcb2:	6823      	ldr	r3, [r4, #0]
 800fcb4:	009a      	lsls	r2, r3, #2
 800fcb6:	d4f7      	bmi.n	800fca8 <RCCEx_PLL3_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800fcb8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800fcba:	6832      	ldr	r2, [r6, #0]
 800fcbc:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800fcc0:	492d      	ldr	r1, [pc, #180]	; (800fd78 <RCCEx_PLL3_Config+0xf4>)
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800fcc2:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800fcc6:	62a3      	str	r3, [r4, #40]	; 0x28
 800fcc8:	6875      	ldr	r5, [r6, #4]
 800fcca:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800fcce:	3d01      	subs	r5, #1
 800fcd0:	1e50      	subs	r0, r2, #1
 800fcd2:	3b01      	subs	r3, #1
 800fcd4:	6932      	ldr	r2, [r6, #16]
 800fcd6:	f3c5 0508 	ubfx	r5, r5, #0, #9
 800fcda:	025b      	lsls	r3, r3, #9
 800fcdc:	0400      	lsls	r0, r0, #16
 800fcde:	3a01      	subs	r2, #1
 800fce0:	b29b      	uxth	r3, r3
 800fce2:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 800fce6:	0612      	lsls	r2, r2, #24
 800fce8:	4303      	orrs	r3, r0
 800fcea:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800fcee:	432b      	orrs	r3, r5
 800fcf0:	4313      	orrs	r3, r2
 800fcf2:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800fcf4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800fcf6:	6972      	ldr	r2, [r6, #20]
 800fcf8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800fcfc:	4313      	orrs	r3, r2
 800fcfe:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800fd00:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800fd02:	69b2      	ldr	r2, [r6, #24]
 800fd04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fd08:	4313      	orrs	r3, r2
 800fd0a:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 800fd0c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800fd0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fd12:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800fd14:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800fd16:	69f3      	ldr	r3, [r6, #28]
 800fd18:	4011      	ands	r1, r2
 800fd1a:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 800fd1e:	6461      	str	r1, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800fd20:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800fd22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fd26:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800fd28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 800fd2a:	b1f7      	cbz	r7, 800fd6a <RCCEx_PLL3_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800fd2c:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800fd2e:	bf0c      	ite	eq
 800fd30:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800fd34:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 800fd38:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800fd3a:	4b0e      	ldr	r3, [pc, #56]	; (800fd74 <RCCEx_PLL3_Config+0xf0>)
 800fd3c:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800fd3e:	461d      	mov	r5, r3
    __HAL_RCC_PLL3_ENABLE();
 800fd40:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800fd44:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800fd46:	f7fb fa51 	bl	800b1ec <HAL_GetTick>
 800fd4a:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800fd4c:	e004      	b.n	800fd58 <RCCEx_PLL3_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800fd4e:	f7fb fa4d 	bl	800b1ec <HAL_GetTick>
 800fd52:	1b00      	subs	r0, r0, r4
 800fd54:	2802      	cmp	r0, #2
 800fd56:	d804      	bhi.n	800fd62 <RCCEx_PLL3_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800fd58:	682b      	ldr	r3, [r5, #0]
 800fd5a:	009b      	lsls	r3, r3, #2
 800fd5c:	d5f7      	bpl.n	800fd4e <RCCEx_PLL3_Config+0xca>
    }

  }


  return status;
 800fd5e:	2000      	movs	r0, #0
}
 800fd60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800fd62:	2003      	movs	r0, #3
}
 800fd64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800fd66:	2001      	movs	r0, #1
}
 800fd68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800fd6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800fd6e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fd70:	e7e3      	b.n	800fd3a <RCCEx_PLL3_Config+0xb6>
 800fd72:	bf00      	nop
 800fd74:	58024400 	.word	0x58024400
 800fd78:	ffff0007 	.word	0xffff0007

0800fd7c <HAL_RCCEx_PeriphCLKConfig>:
{
 800fd7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800fd80:	6803      	ldr	r3, [r0, #0]
{
 800fd82:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800fd84:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 800fd88:	d01c      	beq.n	800fdc4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800fd8a:	6e82      	ldr	r2, [r0, #104]	; 0x68
 800fd8c:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800fd90:	f000 84bb 	beq.w	801070a <HAL_RCCEx_PeriphCLKConfig+0x98e>
 800fd94:	d823      	bhi.n	800fdde <HAL_RCCEx_PeriphCLKConfig+0x62>
 800fd96:	2a00      	cmp	r2, #0
 800fd98:	f000 8422 	beq.w	80105e0 <HAL_RCCEx_PeriphCLKConfig+0x864>
 800fd9c:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800fda0:	d120      	bne.n	800fde4 <HAL_RCCEx_PeriphCLKConfig+0x68>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800fda2:	2102      	movs	r1, #2
 800fda4:	3004      	adds	r0, #4
 800fda6:	f7ff fef1 	bl	800fb8c <RCCEx_PLL2_Config>
 800fdaa:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800fdac:	2e00      	cmp	r6, #0
 800fdae:	f040 84b4 	bne.w	801071a <HAL_RCCEx_PeriphCLKConfig+0x99e>
 800fdb2:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800fdb4:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800fdb6:	48b0      	ldr	r0, [pc, #704]	; (8010078 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800fdb8:	2600      	movs	r6, #0
 800fdba:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800fdbc:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 800fdc0:	430a      	orrs	r2, r1
 800fdc2:	6502      	str	r2, [r0, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800fdc4:	05da      	lsls	r2, r3, #23
 800fdc6:	d511      	bpl.n	800fdec <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai1ClockSelection)
 800fdc8:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800fdca:	2a04      	cmp	r2, #4
 800fdcc:	f200 8574 	bhi.w	80108b8 <HAL_RCCEx_PeriphCLKConfig+0xb3c>
 800fdd0:	e8df f012 	tbh	[pc, r2, lsl #1]
 800fdd4:	04b504ae 	.word	0x04b504ae
 800fdd8:	033104a6 	.word	0x033104a6
 800fddc:	0331      	.short	0x0331
    switch(PeriphClkInit->SpdifrxClockSelection)
 800fdde:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 800fde2:	d0e8      	beq.n	800fdb6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800fde4:	05da      	lsls	r2, r3, #23
    switch(PeriphClkInit->SpdifrxClockSelection)
 800fde6:	f04f 0601 	mov.w	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800fdea:	d4ed      	bmi.n	800fdc8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    switch(PeriphClkInit->Sai1ClockSelection)
 800fdec:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800fdee:	059f      	lsls	r7, r3, #22
 800fdf0:	d51b      	bpl.n	800fe2a <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch(PeriphClkInit->Sai23ClockSelection)
 800fdf2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800fdf4:	2a80      	cmp	r2, #128	; 0x80
 800fdf6:	f000 84ab 	beq.w	8010750 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800fdfa:	f200 8127 	bhi.w	801004c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800fdfe:	2a00      	cmp	r2, #0
 800fe00:	f000 83dc 	beq.w	80105bc <HAL_RCCEx_PeriphCLKConfig+0x840>
 800fe04:	2a40      	cmp	r2, #64	; 0x40
 800fe06:	f040 8128 	bne.w	801005a <HAL_RCCEx_PeriphCLKConfig+0x2de>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800fe0a:	2100      	movs	r1, #0
 800fe0c:	1d20      	adds	r0, r4, #4
 800fe0e:	f7ff febd 	bl	800fb8c <RCCEx_PLL2_Config>
 800fe12:	6823      	ldr	r3, [r4, #0]
 800fe14:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800fe16:	2d00      	cmp	r5, #0
 800fe18:	f040 83c2 	bne.w	80105a0 <HAL_RCCEx_PeriphCLKConfig+0x824>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800fe1c:	4996      	ldr	r1, [pc, #600]	; (8010078 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800fe1e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800fe20:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800fe22:	f422 72e0 	bic.w	r2, r2, #448	; 0x1c0
 800fe26:	4302      	orrs	r2, r0
 800fe28:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800fe2a:	0558      	lsls	r0, r3, #21
 800fe2c:	d51f      	bpl.n	800fe6e <HAL_RCCEx_PeriphCLKConfig+0xf2>
    switch(PeriphClkInit->Sai4AClockSelection)
 800fe2e:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 800fe32:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800fe36:	f000 8457 	beq.w	80106e8 <HAL_RCCEx_PeriphCLKConfig+0x96c>
 800fe3a:	f200 8111 	bhi.w	8010060 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 800fe3e:	2a00      	cmp	r2, #0
 800fe40:	f000 83b6 	beq.w	80105b0 <HAL_RCCEx_PeriphCLKConfig+0x834>
 800fe44:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800fe48:	f040 8112 	bne.w	8010070 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800fe4c:	2100      	movs	r1, #0
 800fe4e:	1d20      	adds	r0, r4, #4
 800fe50:	f7ff fe9c 	bl	800fb8c <RCCEx_PLL2_Config>
 800fe54:	6823      	ldr	r3, [r4, #0]
 800fe56:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800fe58:	2d00      	cmp	r5, #0
 800fe5a:	f040 83a7 	bne.w	80105ac <HAL_RCCEx_PeriphCLKConfig+0x830>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800fe5e:	4986      	ldr	r1, [pc, #536]	; (8010078 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800fe60:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 800fe64:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800fe66:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
 800fe6a:	4302      	orrs	r2, r0
 800fe6c:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800fe6e:	0519      	lsls	r1, r3, #20
 800fe70:	d51f      	bpl.n	800feb2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    switch(PeriphClkInit->Sai4BClockSelection)
 800fe72:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 800fe76:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 800fe7a:	f000 842c 	beq.w	80106d6 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800fe7e:	f200 80fd 	bhi.w	801007c <HAL_RCCEx_PeriphCLKConfig+0x300>
 800fe82:	2a00      	cmp	r2, #0
 800fe84:	f000 83a0 	beq.w	80105c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 800fe88:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800fe8c:	f040 80fe 	bne.w	801008c <HAL_RCCEx_PeriphCLKConfig+0x310>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800fe90:	2100      	movs	r1, #0
 800fe92:	1d20      	adds	r0, r4, #4
 800fe94:	f7ff fe7a 	bl	800fb8c <RCCEx_PLL2_Config>
 800fe98:	6823      	ldr	r3, [r4, #0]
 800fe9a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800fe9c:	2d00      	cmp	r5, #0
 800fe9e:	f040 837d 	bne.w	801059c <HAL_RCCEx_PeriphCLKConfig+0x820>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800fea2:	4975      	ldr	r1, [pc, #468]	; (8010078 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800fea4:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 800fea8:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800feaa:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 800feae:	4302      	orrs	r2, r0
 800feb0:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800feb2:	019a      	lsls	r2, r3, #6
 800feb4:	d518      	bpl.n	800fee8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch(PeriphClkInit->QspiClockSelection)
 800feb6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800feb8:	2a20      	cmp	r2, #32
 800feba:	f000 8403 	beq.w	80106c4 <HAL_RCCEx_PeriphCLKConfig+0x948>
 800febe:	f200 80e8 	bhi.w	8010092 <HAL_RCCEx_PeriphCLKConfig+0x316>
 800fec2:	b13a      	cbz	r2, 800fed4 <HAL_RCCEx_PeriphCLKConfig+0x158>
 800fec4:	2a10      	cmp	r2, #16
 800fec6:	f040 80e7 	bne.w	8010098 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800feca:	496b      	ldr	r1, [pc, #428]	; (8010078 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800fecc:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800fece:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800fed2:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800fed4:	2d00      	cmp	r5, #0
 800fed6:	f040 83b0 	bne.w	801063a <HAL_RCCEx_PeriphCLKConfig+0x8be>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800feda:	4967      	ldr	r1, [pc, #412]	; (8010078 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800fedc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800fede:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800fee0:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800fee4:	4302      	orrs	r2, r0
 800fee6:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800fee8:	04df      	lsls	r7, r3, #19
 800feea:	d51d      	bpl.n	800ff28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    switch(PeriphClkInit->Spi123ClockSelection)
 800feec:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800feee:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800fef2:	f000 8402 	beq.w	80106fa <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800fef6:	f200 80d2 	bhi.w	801009e <HAL_RCCEx_PeriphCLKConfig+0x322>
 800fefa:	2a00      	cmp	r2, #0
 800fefc:	f000 836a 	beq.w	80105d4 <HAL_RCCEx_PeriphCLKConfig+0x858>
 800ff00:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800ff04:	f040 80d3 	bne.w	80100ae <HAL_RCCEx_PeriphCLKConfig+0x332>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ff08:	2100      	movs	r1, #0
 800ff0a:	1d20      	adds	r0, r4, #4
 800ff0c:	f7ff fe3e 	bl	800fb8c <RCCEx_PLL2_Config>
 800ff10:	6823      	ldr	r3, [r4, #0]
 800ff12:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800ff14:	2d00      	cmp	r5, #0
 800ff16:	f040 8345 	bne.w	80105a4 <HAL_RCCEx_PeriphCLKConfig+0x828>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ff1a:	4957      	ldr	r1, [pc, #348]	; (8010078 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800ff1c:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800ff1e:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800ff20:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800ff24:	4302      	orrs	r2, r0
 800ff26:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ff28:	0498      	lsls	r0, r3, #18
 800ff2a:	d51b      	bpl.n	800ff64 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    switch(PeriphClkInit->Spi45ClockSelection)
 800ff2c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ff2e:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 800ff32:	f000 83b3 	beq.w	801069c <HAL_RCCEx_PeriphCLKConfig+0x920>
 800ff36:	f200 80bd 	bhi.w	80100b4 <HAL_RCCEx_PeriphCLKConfig+0x338>
 800ff3a:	b14a      	cbz	r2, 800ff50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800ff3c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800ff40:	f040 80c2 	bne.w	80100c8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ff44:	2101      	movs	r1, #1
 800ff46:	1d20      	adds	r0, r4, #4
 800ff48:	f7ff fe20 	bl	800fb8c <RCCEx_PLL2_Config>
 800ff4c:	6823      	ldr	r3, [r4, #0]
 800ff4e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800ff50:	2d00      	cmp	r5, #0
 800ff52:	f040 8374 	bne.w	801063e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ff56:	4948      	ldr	r1, [pc, #288]	; (8010078 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800ff58:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800ff5a:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800ff5c:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800ff60:	4302      	orrs	r2, r0
 800ff62:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ff64:	0459      	lsls	r1, r3, #17
 800ff66:	d51d      	bpl.n	800ffa4 <HAL_RCCEx_PeriphCLKConfig+0x228>
    switch(PeriphClkInit->Spi6ClockSelection)
 800ff68:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 800ff6c:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800ff70:	f000 839e 	beq.w	80106b0 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800ff74:	f200 80ab 	bhi.w	80100ce <HAL_RCCEx_PeriphCLKConfig+0x352>
 800ff78:	b14a      	cbz	r2, 800ff8e <HAL_RCCEx_PeriphCLKConfig+0x212>
 800ff7a:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800ff7e:	f040 80b0 	bne.w	80100e2 <HAL_RCCEx_PeriphCLKConfig+0x366>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ff82:	2101      	movs	r1, #1
 800ff84:	1d20      	adds	r0, r4, #4
 800ff86:	f7ff fe01 	bl	800fb8c <RCCEx_PLL2_Config>
 800ff8a:	6823      	ldr	r3, [r4, #0]
 800ff8c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800ff8e:	2d00      	cmp	r5, #0
 800ff90:	f040 8359 	bne.w	8010646 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ff94:	4938      	ldr	r1, [pc, #224]	; (8010078 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800ff96:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 800ff9a:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800ff9c:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 800ffa0:	4302      	orrs	r2, r0
 800ffa2:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800ffa4:	015a      	lsls	r2, r3, #5
 800ffa6:	d509      	bpl.n	800ffbc <HAL_RCCEx_PeriphCLKConfig+0x240>
    switch(PeriphClkInit->DsiClockSelection)
 800ffa8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800ffaa:	2a00      	cmp	r2, #0
 800ffac:	f000 825a 	beq.w	8010464 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
 800ffb0:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800ffb4:	f000 8250 	beq.w	8010458 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 800ffb8:	2601      	movs	r6, #1
 800ffba:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ffbc:	041f      	lsls	r7, r3, #16
 800ffbe:	d50d      	bpl.n	800ffdc <HAL_RCCEx_PeriphCLKConfig+0x260>
    switch(PeriphClkInit->FdcanClockSelection)
 800ffc0:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800ffc2:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800ffc6:	f000 8414 	beq.w	80107f2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800ffca:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800ffce:	f000 82c4 	beq.w	801055a <HAL_RCCEx_PeriphCLKConfig+0x7de>
 800ffd2:	2a00      	cmp	r2, #0
 800ffd4:	f000 82c7 	beq.w	8010566 <HAL_RCCEx_PeriphCLKConfig+0x7ea>
 800ffd8:	2601      	movs	r6, #1
 800ffda:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800ffdc:	01d8      	lsls	r0, r3, #7
 800ffde:	f100 81c5 	bmi.w	801036c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ffe2:	0259      	lsls	r1, r3, #9
 800ffe4:	f100 81e5 	bmi.w	80103b2 <HAL_RCCEx_PeriphCLKConfig+0x636>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ffe8:	07df      	lsls	r7, r3, #31
 800ffea:	f140 8088 	bpl.w	80100fe <HAL_RCCEx_PeriphCLKConfig+0x382>
    switch(PeriphClkInit->Usart16ClockSelection)
 800ffee:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800fff0:	2a28      	cmp	r2, #40	; 0x28
 800fff2:	f200 81c5 	bhi.w	8010380 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800fff6:	e8df f012 	tbh	[pc, r2, lsl #1]
 800fffa:	007e      	.short	0x007e
 800fffc:	01c301c3 	.word	0x01c301c3
 8010000:	01c301c3 	.word	0x01c301c3
 8010004:	01c301c3 	.word	0x01c301c3
 8010008:	03c801c3 	.word	0x03c801c3
 801000c:	01c301c3 	.word	0x01c301c3
 8010010:	01c301c3 	.word	0x01c301c3
 8010014:	01c301c3 	.word	0x01c301c3
 8010018:	007701c3 	.word	0x007701c3
 801001c:	01c301c3 	.word	0x01c301c3
 8010020:	01c301c3 	.word	0x01c301c3
 8010024:	01c301c3 	.word	0x01c301c3
 8010028:	007e01c3 	.word	0x007e01c3
 801002c:	01c301c3 	.word	0x01c301c3
 8010030:	01c301c3 	.word	0x01c301c3
 8010034:	01c301c3 	.word	0x01c301c3
 8010038:	007e01c3 	.word	0x007e01c3
 801003c:	01c301c3 	.word	0x01c301c3
 8010040:	01c301c3 	.word	0x01c301c3
 8010044:	01c301c3 	.word	0x01c301c3
 8010048:	007e01c3 	.word	0x007e01c3
    switch(PeriphClkInit->Sai23ClockSelection)
 801004c:	2ac0      	cmp	r2, #192	; 0xc0
 801004e:	f43f aee2 	beq.w	800fe16 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8010052:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8010056:	f43f aede 	beq.w	800fe16 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 801005a:	2601      	movs	r6, #1
 801005c:	4635      	mov	r5, r6
 801005e:	e6e4      	b.n	800fe2a <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch(PeriphClkInit->Sai4AClockSelection)
 8010060:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 8010064:	f43f aef8 	beq.w	800fe58 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8010068:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 801006c:	f43f aef4 	beq.w	800fe58 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8010070:	2601      	movs	r6, #1
 8010072:	4635      	mov	r5, r6
 8010074:	e6fb      	b.n	800fe6e <HAL_RCCEx_PeriphCLKConfig+0xf2>
 8010076:	bf00      	nop
 8010078:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Sai4BClockSelection)
 801007c:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 8010080:	f43f af0c 	beq.w	800fe9c <HAL_RCCEx_PeriphCLKConfig+0x120>
 8010084:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8010088:	f43f af08 	beq.w	800fe9c <HAL_RCCEx_PeriphCLKConfig+0x120>
 801008c:	2601      	movs	r6, #1
 801008e:	4635      	mov	r5, r6
 8010090:	e70f      	b.n	800feb2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    switch(PeriphClkInit->QspiClockSelection)
 8010092:	2a30      	cmp	r2, #48	; 0x30
 8010094:	f43f af1e 	beq.w	800fed4 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8010098:	2601      	movs	r6, #1
 801009a:	4635      	mov	r5, r6
 801009c:	e724      	b.n	800fee8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch(PeriphClkInit->Spi123ClockSelection)
 801009e:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 80100a2:	f43f af37 	beq.w	800ff14 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80100a6:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80100aa:	f43f af33 	beq.w	800ff14 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80100ae:	2601      	movs	r6, #1
 80100b0:	4635      	mov	r5, r6
 80100b2:	e739      	b.n	800ff28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    switch(PeriphClkInit->Spi45ClockSelection)
 80100b4:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 80100b8:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 80100bc:	f43f af48 	beq.w	800ff50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80100c0:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 80100c4:	f43f af44 	beq.w	800ff50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80100c8:	2601      	movs	r6, #1
 80100ca:	4635      	mov	r5, r6
 80100cc:	e74a      	b.n	800ff64 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    switch(PeriphClkInit->Spi6ClockSelection)
 80100ce:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 80100d2:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 80100d6:	f43f af5a 	beq.w	800ff8e <HAL_RCCEx_PeriphCLKConfig+0x212>
 80100da:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 80100de:	f43f af56 	beq.w	800ff8e <HAL_RCCEx_PeriphCLKConfig+0x212>
 80100e2:	2601      	movs	r6, #1
 80100e4:	4635      	mov	r5, r6
 80100e6:	e75d      	b.n	800ffa4 <HAL_RCCEx_PeriphCLKConfig+0x228>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80100e8:	2101      	movs	r1, #1
 80100ea:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80100ee:	f7ff fdc9 	bl	800fc84 <RCCEx_PLL3_Config>
 80100f2:	6823      	ldr	r3, [r4, #0]
 80100f4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80100f6:	2d00      	cmp	r5, #0
 80100f8:	f000 82b6 	beq.w	8010668 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80100fc:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80100fe:	0798      	lsls	r0, r3, #30
 8010100:	d516      	bpl.n	8010130 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8010102:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8010104:	2a05      	cmp	r2, #5
 8010106:	f200 83da 	bhi.w	80108be <HAL_RCCEx_PeriphCLKConfig+0xb42>
 801010a:	e8df f012 	tbh	[pc, r2, lsl #1]
 801010e:	000d      	.short	0x000d
 8010110:	0006032a 	.word	0x0006032a
 8010114:	000d000d 	.word	0x000d000d
 8010118:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801011a:	2101      	movs	r1, #1
 801011c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010120:	f7ff fdb0 	bl	800fc84 <RCCEx_PLL3_Config>
 8010124:	6823      	ldr	r3, [r4, #0]
 8010126:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8010128:	2d00      	cmp	r5, #0
 801012a:	f000 826f 	beq.w	801060c <HAL_RCCEx_PeriphCLKConfig+0x890>
 801012e:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8010130:	0759      	lsls	r1, r3, #29
 8010132:	d517      	bpl.n	8010164 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8010134:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 8010138:	2a05      	cmp	r2, #5
 801013a:	f200 83ba 	bhi.w	80108b2 <HAL_RCCEx_PeriphCLKConfig+0xb36>
 801013e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8010142:	000d      	.short	0x000d
 8010144:	0006031a 	.word	0x0006031a
 8010148:	000d000d 	.word	0x000d000d
 801014c:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801014e:	2101      	movs	r1, #1
 8010150:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010154:	f7ff fd96 	bl	800fc84 <RCCEx_PLL3_Config>
 8010158:	6823      	ldr	r3, [r4, #0]
 801015a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 801015c:	2d00      	cmp	r5, #0
 801015e:	f000 8260 	beq.w	8010622 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8010162:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8010164:	069a      	lsls	r2, r3, #26
 8010166:	d51d      	bpl.n	80101a4 <HAL_RCCEx_PeriphCLKConfig+0x428>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8010168:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 801016c:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8010170:	f000 8334 	beq.w	80107dc <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8010174:	f200 81a5 	bhi.w	80104c2 <HAL_RCCEx_PeriphCLKConfig+0x746>
 8010178:	b14a      	cbz	r2, 801018e <HAL_RCCEx_PeriphCLKConfig+0x412>
 801017a:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 801017e:	f040 81aa 	bne.w	80104d6 <HAL_RCCEx_PeriphCLKConfig+0x75a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8010182:	2100      	movs	r1, #0
 8010184:	1d20      	adds	r0, r4, #4
 8010186:	f7ff fd01 	bl	800fb8c <RCCEx_PLL2_Config>
 801018a:	6823      	ldr	r3, [r4, #0]
 801018c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 801018e:	2d00      	cmp	r5, #0
 8010190:	f040 8232 	bne.w	80105f8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8010194:	49ae      	ldr	r1, [pc, #696]	; (8010450 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8010196:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 801019a:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 801019c:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 80101a0:	4302      	orrs	r2, r0
 80101a2:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80101a4:	065f      	lsls	r7, r3, #25
 80101a6:	d51d      	bpl.n	80101e4 <HAL_RCCEx_PeriphCLKConfig+0x468>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80101a8:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 80101ac:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80101b0:	f000 8328 	beq.w	8010804 <HAL_RCCEx_PeriphCLKConfig+0xa88>
 80101b4:	f200 8175 	bhi.w	80104a2 <HAL_RCCEx_PeriphCLKConfig+0x726>
 80101b8:	b14a      	cbz	r2, 80101ce <HAL_RCCEx_PeriphCLKConfig+0x452>
 80101ba:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80101be:	f040 817a 	bne.w	80104b6 <HAL_RCCEx_PeriphCLKConfig+0x73a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80101c2:	2100      	movs	r1, #0
 80101c4:	1d20      	adds	r0, r4, #4
 80101c6:	f7ff fce1 	bl	800fb8c <RCCEx_PLL2_Config>
 80101ca:	6823      	ldr	r3, [r4, #0]
 80101cc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80101ce:	2d00      	cmp	r5, #0
 80101d0:	f040 8217 	bne.w	8010602 <HAL_RCCEx_PeriphCLKConfig+0x886>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80101d4:	499e      	ldr	r1, [pc, #632]	; (8010450 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80101d6:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 80101da:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80101dc:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80101e0:	4302      	orrs	r2, r0
 80101e2:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80101e4:	0618      	lsls	r0, r3, #24
 80101e6:	d51d      	bpl.n	8010224 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80101e8:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 80101ec:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80101f0:	f000 8313 	beq.w	801081a <HAL_RCCEx_PeriphCLKConfig+0xa9e>
 80101f4:	f200 8145 	bhi.w	8010482 <HAL_RCCEx_PeriphCLKConfig+0x706>
 80101f8:	b14a      	cbz	r2, 801020e <HAL_RCCEx_PeriphCLKConfig+0x492>
 80101fa:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80101fe:	f040 814a 	bne.w	8010496 <HAL_RCCEx_PeriphCLKConfig+0x71a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8010202:	2100      	movs	r1, #0
 8010204:	1d20      	adds	r0, r4, #4
 8010206:	f7ff fcc1 	bl	800fb8c <RCCEx_PLL2_Config>
 801020a:	6823      	ldr	r3, [r4, #0]
 801020c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 801020e:	2d00      	cmp	r5, #0
 8010210:	f040 81ed 	bne.w	80105ee <HAL_RCCEx_PeriphCLKConfig+0x872>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8010214:	498e      	ldr	r1, [pc, #568]	; (8010450 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8010216:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 801021a:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 801021c:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8010220:	4302      	orrs	r2, r0
 8010222:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8010224:	0719      	lsls	r1, r3, #28
 8010226:	d50b      	bpl.n	8010240 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8010228:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 801022c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8010230:	f000 8312 	beq.w	8010858 <HAL_RCCEx_PeriphCLKConfig+0xadc>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8010234:	4886      	ldr	r0, [pc, #536]	; (8010450 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8010236:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8010238:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 801023c:	430a      	orrs	r2, r1
 801023e:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8010240:	06da      	lsls	r2, r3, #27
 8010242:	d50b      	bpl.n	801025c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8010244:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8010248:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 801024c:	f000 82f9 	beq.w	8010842 <HAL_RCCEx_PeriphCLKConfig+0xac6>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8010250:	487f      	ldr	r0, [pc, #508]	; (8010450 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8010252:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8010254:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8010258:	430a      	orrs	r2, r1
 801025a:	6582      	str	r2, [r0, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801025c:	031f      	lsls	r7, r3, #12
 801025e:	d50e      	bpl.n	801027e <HAL_RCCEx_PeriphCLKConfig+0x502>
    switch(PeriphClkInit->AdcClockSelection)
 8010260:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8010264:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8010268:	f000 8161 	beq.w	801052e <HAL_RCCEx_PeriphCLKConfig+0x7b2>
 801026c:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8010270:	f000 8164 	beq.w	801053c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8010274:	2900      	cmp	r1, #0
 8010276:	f000 82db 	beq.w	8010830 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 801027a:	2601      	movs	r6, #1
 801027c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 801027e:	0358      	lsls	r0, r3, #13
 8010280:	d50f      	bpl.n	80102a2 <HAL_RCCEx_PeriphCLKConfig+0x526>
    switch(PeriphClkInit->UsbClockSelection)
 8010282:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8010286:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 801028a:	f000 813a 	beq.w	8010502 <HAL_RCCEx_PeriphCLKConfig+0x786>
 801028e:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8010292:	f000 813d 	beq.w	8010510 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8010296:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 801029a:	f000 8296 	beq.w	80107ca <HAL_RCCEx_PeriphCLKConfig+0xa4e>
 801029e:	2601      	movs	r6, #1
 80102a0:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80102a2:	03d9      	lsls	r1, r3, #15
 80102a4:	d517      	bpl.n	80102d6 <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch(PeriphClkInit->SdmmcClockSelection)
 80102a6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80102a8:	2a00      	cmp	r2, #0
 80102aa:	f000 827c 	beq.w	80107a6 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 80102ae:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80102b2:	f040 8170 	bne.w	8010596 <HAL_RCCEx_PeriphCLKConfig+0x81a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80102b6:	2102      	movs	r1, #2
 80102b8:	1d20      	adds	r0, r4, #4
 80102ba:	f7ff fc67 	bl	800fb8c <RCCEx_PLL2_Config>
 80102be:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80102c0:	6823      	ldr	r3, [r4, #0]
 80102c2:	2d00      	cmp	r5, #0
 80102c4:	f040 81db 	bne.w	801067e <HAL_RCCEx_PeriphCLKConfig+0x902>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80102c8:	4961      	ldr	r1, [pc, #388]	; (8010450 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80102ca:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80102cc:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80102ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80102d2:	4302      	orrs	r2, r0
 80102d4:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80102d6:	009a      	lsls	r2, r3, #2
 80102d8:	f100 8152 	bmi.w	8010580 <HAL_RCCEx_PeriphCLKConfig+0x804>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80102dc:	039f      	lsls	r7, r3, #14
 80102de:	d435      	bmi.n	801034c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80102e0:	1e30      	subs	r0, r6, #0
 80102e2:	bf18      	it	ne
 80102e4:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80102e6:	02de      	lsls	r6, r3, #11
 80102e8:	d506      	bpl.n	80102f8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80102ea:	4959      	ldr	r1, [pc, #356]	; (8010450 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80102ec:	6f65      	ldr	r5, [r4, #116]	; 0x74
 80102ee:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80102f0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80102f4:	432a      	orrs	r2, r5
 80102f6:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80102f8:	00dd      	lsls	r5, r3, #3
 80102fa:	d507      	bpl.n	801030c <HAL_RCCEx_PeriphCLKConfig+0x590>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80102fc:	4954      	ldr	r1, [pc, #336]	; (8010450 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80102fe:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 8010302:	690a      	ldr	r2, [r1, #16]
 8010304:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8010308:	432a      	orrs	r2, r5
 801030a:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801030c:	0299      	lsls	r1, r3, #10
 801030e:	d506      	bpl.n	801031e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8010310:	494f      	ldr	r1, [pc, #316]	; (8010450 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8010312:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8010314:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8010316:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 801031a:	432a      	orrs	r2, r5
 801031c:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 801031e:	005a      	lsls	r2, r3, #1
 8010320:	d509      	bpl.n	8010336 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8010322:	4a4b      	ldr	r2, [pc, #300]	; (8010450 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8010324:	6911      	ldr	r1, [r2, #16]
 8010326:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 801032a:	6111      	str	r1, [r2, #16]
 801032c:	6911      	ldr	r1, [r2, #16]
 801032e:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
 8010332:	4329      	orrs	r1, r5
 8010334:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8010336:	2b00      	cmp	r3, #0
 8010338:	da06      	bge.n	8010348 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 801033a:	4a45      	ldr	r2, [pc, #276]	; (8010450 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 801033c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 801033e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8010340:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8010344:	430b      	orrs	r3, r1
 8010346:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8010348:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->RngClockSelection)
 801034c:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8010350:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8010354:	f000 8230 	beq.w	80107b8 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
 8010358:	f240 80c3 	bls.w	80104e2 <HAL_RCCEx_PeriphCLKConfig+0x766>
 801035c:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 8010360:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8010364:	f000 80c0 	beq.w	80104e8 <HAL_RCCEx_PeriphCLKConfig+0x76c>
 8010368:	2001      	movs	r0, #1
 801036a:	e7bc      	b.n	80102e6 <HAL_RCCEx_PeriphCLKConfig+0x56a>
    switch(PeriphClkInit->FmcClockSelection)
 801036c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 801036e:	2a03      	cmp	r2, #3
 8010370:	f200 82a8 	bhi.w	80108c4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
 8010374:	e8df f012 	tbh	[pc, r2, lsl #1]
 8010378:	018a0010 	.word	0x018a0010
 801037c:	0010000a 	.word	0x0010000a
    switch(PeriphClkInit->Usart16ClockSelection)
 8010380:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8010382:	0798      	lsls	r0, r3, #30
    switch(PeriphClkInit->Usart16ClockSelection)
 8010384:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8010386:	f57f aed3 	bpl.w	8010130 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 801038a:	e6ba      	b.n	8010102 <HAL_RCCEx_PeriphCLKConfig+0x386>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 801038c:	2102      	movs	r1, #2
 801038e:	1d20      	adds	r0, r4, #4
 8010390:	f7ff fbfc 	bl	800fb8c <RCCEx_PLL2_Config>
 8010394:	6823      	ldr	r3, [r4, #0]
 8010396:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8010398:	2d00      	cmp	r5, #0
 801039a:	f040 8152 	bne.w	8010642 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 801039e:	492c      	ldr	r1, [pc, #176]	; (8010450 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80103a0:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80103a2:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80103a4:	f022 0203 	bic.w	r2, r2, #3
 80103a8:	4302      	orrs	r2, r0
 80103aa:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80103ac:	0259      	lsls	r1, r3, #9
 80103ae:	f57f ae1b 	bpl.w	800ffe8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80103b2:	4b28      	ldr	r3, [pc, #160]	; (8010454 <HAL_RCCEx_PeriphCLKConfig+0x6d8>)
 80103b4:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80103b6:	4698      	mov	r8, r3
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80103b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80103bc:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80103be:	f7fa ff15 	bl	800b1ec <HAL_GetTick>
 80103c2:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80103c4:	e005      	b.n	80103d2 <HAL_RCCEx_PeriphCLKConfig+0x656>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80103c6:	f7fa ff11 	bl	800b1ec <HAL_GetTick>
 80103ca:	1bc0      	subs	r0, r0, r7
 80103cc:	2864      	cmp	r0, #100	; 0x64
 80103ce:	f200 81e6 	bhi.w	801079e <HAL_RCCEx_PeriphCLKConfig+0xa22>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80103d2:	f8d8 3000 	ldr.w	r3, [r8]
 80103d6:	05da      	lsls	r2, r3, #23
 80103d8:	d5f5      	bpl.n	80103c6 <HAL_RCCEx_PeriphCLKConfig+0x64a>
    if(ret == HAL_OK)
 80103da:	2d00      	cmp	r5, #0
 80103dc:	f040 8265 	bne.w	80108aa <HAL_RCCEx_PeriphCLKConfig+0xb2e>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80103e0:	4a1b      	ldr	r2, [pc, #108]	; (8010450 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80103e2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 80103e6:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80103e8:	4059      	eors	r1, r3
 80103ea:	f411 7f40 	tst.w	r1, #768	; 0x300
 80103ee:	d00b      	beq.n	8010408 <HAL_RCCEx_PeriphCLKConfig+0x68c>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80103f0:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 80103f2:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80103f4:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80103f8:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 80103fc:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80103fe:	6f10      	ldr	r0, [r2, #112]	; 0x70
 8010400:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8010404:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8010406:	6711      	str	r1, [r2, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8010408:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801040c:	f000 822f 	beq.w	801086e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8010410:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8010414:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8010418:	f000 823d 	beq.w	8010896 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 801041c:	490c      	ldr	r1, [pc, #48]	; (8010450 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 801041e:	690a      	ldr	r2, [r1, #16]
 8010420:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8010424:	610a      	str	r2, [r1, #16]
 8010426:	4a0a      	ldr	r2, [pc, #40]	; (8010450 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8010428:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801042c:	6f11      	ldr	r1, [r2, #112]	; 0x70
 801042e:	430b      	orrs	r3, r1
 8010430:	6713      	str	r3, [r2, #112]	; 0x70
 8010432:	6823      	ldr	r3, [r4, #0]
 8010434:	e5d8      	b.n	800ffe8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8010436:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 8010438:	2d00      	cmp	r5, #0
 801043a:	f040 80b5 	bne.w	80105a8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801043e:	4904      	ldr	r1, [pc, #16]	; (8010450 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8010440:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010442:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8010444:	f022 0207 	bic.w	r2, r2, #7
 8010448:	4302      	orrs	r2, r0
 801044a:	650a      	str	r2, [r1, #80]	; 0x50
 801044c:	e4cf      	b.n	800fdee <HAL_RCCEx_PeriphCLKConfig+0x72>
 801044e:	bf00      	nop
 8010450:	58024400 	.word	0x58024400
 8010454:	58024800 	.word	0x58024800
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8010458:	2101      	movs	r1, #1
 801045a:	1d20      	adds	r0, r4, #4
 801045c:	f7ff fb96 	bl	800fb8c <RCCEx_PLL2_Config>
 8010460:	6823      	ldr	r3, [r4, #0]
 8010462:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8010464:	2d00      	cmp	r5, #0
 8010466:	f040 810c 	bne.w	8010682 <HAL_RCCEx_PeriphCLKConfig+0x906>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 801046a:	49b8      	ldr	r1, [pc, #736]	; (801074c <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801046c:	041f      	lsls	r7, r3, #16
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 801046e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8010470:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8010472:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010476:	ea42 0200 	orr.w	r2, r2, r0
 801047a:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801047c:	f57f adae 	bpl.w	800ffdc <HAL_RCCEx_PeriphCLKConfig+0x260>
 8010480:	e59e      	b.n	800ffc0 <HAL_RCCEx_PeriphCLKConfig+0x244>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8010482:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8010486:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 801048a:	f43f aec0 	beq.w	801020e <HAL_RCCEx_PeriphCLKConfig+0x492>
 801048e:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 8010492:	f43f aebc 	beq.w	801020e <HAL_RCCEx_PeriphCLKConfig+0x492>
 8010496:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8010498:	0719      	lsls	r1, r3, #28
    switch(PeriphClkInit->Lptim345ClockSelection)
 801049a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 801049c:	f57f aed0 	bpl.w	8010240 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 80104a0:	e6c2      	b.n	8010228 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80104a2:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
 80104a6:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80104aa:	f43f ae90 	beq.w	80101ce <HAL_RCCEx_PeriphCLKConfig+0x452>
 80104ae:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 80104b2:	f43f ae8c 	beq.w	80101ce <HAL_RCCEx_PeriphCLKConfig+0x452>
 80104b6:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80104b8:	0618      	lsls	r0, r3, #24
    switch(PeriphClkInit->Lptim2ClockSelection)
 80104ba:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80104bc:	f57f aeb2 	bpl.w	8010224 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80104c0:	e692      	b.n	80101e8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80104c2:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 80104c6:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 80104ca:	f43f ae60 	beq.w	801018e <HAL_RCCEx_PeriphCLKConfig+0x412>
 80104ce:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 80104d2:	f43f ae5c 	beq.w	801018e <HAL_RCCEx_PeriphCLKConfig+0x412>
 80104d6:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80104d8:	065f      	lsls	r7, r3, #25
    switch(PeriphClkInit->Lptim1ClockSelection)
 80104da:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80104dc:	f57f ae82 	bpl.w	80101e4 <HAL_RCCEx_PeriphCLKConfig+0x468>
 80104e0:	e662      	b.n	80101a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
    switch(PeriphClkInit->RngClockSelection)
 80104e2:	2a00      	cmp	r2, #0
 80104e4:	f47f af40 	bne.w	8010368 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    if(ret == HAL_OK)
 80104e8:	2d00      	cmp	r5, #0
 80104ea:	f47f af3d 	bne.w	8010368 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80104ee:	4d97      	ldr	r5, [pc, #604]	; (801074c <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 80104f0:	1e30      	subs	r0, r6, #0
 80104f2:	6d69      	ldr	r1, [r5, #84]	; 0x54
 80104f4:	bf18      	it	ne
 80104f6:	2001      	movne	r0, #1
 80104f8:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 80104fc:	430a      	orrs	r2, r1
 80104fe:	656a      	str	r2, [r5, #84]	; 0x54
 8010500:	e6f1      	b.n	80102e6 <HAL_RCCEx_PeriphCLKConfig+0x56a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8010502:	2101      	movs	r1, #1
 8010504:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010508:	f7ff fbbc 	bl	800fc84 <RCCEx_PLL3_Config>
 801050c:	6823      	ldr	r3, [r4, #0]
 801050e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8010510:	2d00      	cmp	r5, #0
 8010512:	f040 80a4 	bne.w	801065e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8010516:	498d      	ldr	r1, [pc, #564]	; (801074c <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 8010518:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801051c:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 801051e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8010522:	4302      	orrs	r2, r0
 8010524:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8010526:	03d9      	lsls	r1, r3, #15
 8010528:	f57f aed5 	bpl.w	80102d6 <HAL_RCCEx_PeriphCLKConfig+0x55a>
 801052c:	e6bb      	b.n	80102a6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 801052e:	2102      	movs	r1, #2
 8010530:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010534:	f7ff fba6 	bl	800fc84 <RCCEx_PLL3_Config>
 8010538:	6823      	ldr	r3, [r4, #0]
 801053a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 801053c:	2d00      	cmp	r5, #0
 801053e:	f040 8089 	bne.w	8010654 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8010542:	4982      	ldr	r1, [pc, #520]	; (801074c <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 8010544:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 8010548:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 801054a:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 801054e:	4302      	orrs	r2, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8010550:	0358      	lsls	r0, r3, #13
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8010552:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8010554:	f57f aea5 	bpl.w	80102a2 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8010558:	e693      	b.n	8010282 <HAL_RCCEx_PeriphCLKConfig+0x506>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 801055a:	2101      	movs	r1, #1
 801055c:	1d20      	adds	r0, r4, #4
 801055e:	f7ff fb15 	bl	800fb8c <RCCEx_PLL2_Config>
 8010562:	6823      	ldr	r3, [r4, #0]
 8010564:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8010566:	2d00      	cmp	r5, #0
 8010568:	d16f      	bne.n	801064a <HAL_RCCEx_PeriphCLKConfig+0x8ce>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801056a:	4978      	ldr	r1, [pc, #480]	; (801074c <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 801056c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 801056e:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8010570:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8010574:	4302      	orrs	r2, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8010576:	01d8      	lsls	r0, r3, #7
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8010578:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 801057a:	f57f ad32 	bpl.w	800ffe2 <HAL_RCCEx_PeriphCLKConfig+0x266>
 801057e:	e6f5      	b.n	801036c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8010580:	2102      	movs	r1, #2
 8010582:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010586:	f7ff fb7d 	bl	800fc84 <RCCEx_PLL3_Config>
 801058a:	6823      	ldr	r3, [r4, #0]
 801058c:	2800      	cmp	r0, #0
 801058e:	f43f aea5 	beq.w	80102dc <HAL_RCCEx_PeriphCLKConfig+0x560>
      status=HAL_ERROR;
 8010592:	2601      	movs	r6, #1
 8010594:	e6a2      	b.n	80102dc <HAL_RCCEx_PeriphCLKConfig+0x560>
    switch(PeriphClkInit->SdmmcClockSelection)
 8010596:	2601      	movs	r6, #1
 8010598:	4635      	mov	r5, r6
 801059a:	e69c      	b.n	80102d6 <HAL_RCCEx_PeriphCLKConfig+0x55a>
 801059c:	462e      	mov	r6, r5
 801059e:	e488      	b.n	800feb2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80105a0:	462e      	mov	r6, r5
 80105a2:	e442      	b.n	800fe2a <HAL_RCCEx_PeriphCLKConfig+0xae>
 80105a4:	462e      	mov	r6, r5
 80105a6:	e4bf      	b.n	800ff28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 80105a8:	462e      	mov	r6, r5
 80105aa:	e420      	b.n	800fdee <HAL_RCCEx_PeriphCLKConfig+0x72>
 80105ac:	462e      	mov	r6, r5
 80105ae:	e45e      	b.n	800fe6e <HAL_RCCEx_PeriphCLKConfig+0xf2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80105b0:	4966      	ldr	r1, [pc, #408]	; (801074c <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 80105b2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80105b4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80105b8:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80105ba:	e44d      	b.n	800fe58 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80105bc:	4963      	ldr	r1, [pc, #396]	; (801074c <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 80105be:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80105c0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80105c4:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80105c6:	e426      	b.n	800fe16 <HAL_RCCEx_PeriphCLKConfig+0x9a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80105c8:	4960      	ldr	r1, [pc, #384]	; (801074c <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 80105ca:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80105cc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80105d0:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80105d2:	e463      	b.n	800fe9c <HAL_RCCEx_PeriphCLKConfig+0x120>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80105d4:	495d      	ldr	r1, [pc, #372]	; (801074c <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 80105d6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80105d8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80105dc:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80105de:	e499      	b.n	800ff14 <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80105e0:	485a      	ldr	r0, [pc, #360]	; (801074c <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 80105e2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80105e4:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80105e8:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 80105ea:	f7ff bbe4 	b.w	800fdb6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80105ee:	0719      	lsls	r1, r3, #28
 80105f0:	462e      	mov	r6, r5
 80105f2:	f57f ae25 	bpl.w	8010240 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 80105f6:	e617      	b.n	8010228 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80105f8:	065f      	lsls	r7, r3, #25
 80105fa:	462e      	mov	r6, r5
 80105fc:	f57f adf2 	bpl.w	80101e4 <HAL_RCCEx_PeriphCLKConfig+0x468>
 8010600:	e5d2      	b.n	80101a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8010602:	0618      	lsls	r0, r3, #24
 8010604:	462e      	mov	r6, r5
 8010606:	f57f ae0d 	bpl.w	8010224 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 801060a:	e5ed      	b.n	80101e8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 801060c:	494f      	ldr	r1, [pc, #316]	; (801074c <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 801060e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8010610:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8010612:	f022 0207 	bic.w	r2, r2, #7
 8010616:	4302      	orrs	r2, r0
 8010618:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801061a:	0759      	lsls	r1, r3, #29
 801061c:	f57f ada2 	bpl.w	8010164 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8010620:	e588      	b.n	8010134 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8010622:	494a      	ldr	r1, [pc, #296]	; (801074c <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 8010624:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 8010628:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 801062a:	f022 0207 	bic.w	r2, r2, #7
 801062e:	4302      	orrs	r2, r0
 8010630:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8010632:	069a      	lsls	r2, r3, #26
 8010634:	f57f adb6 	bpl.w	80101a4 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8010638:	e596      	b.n	8010168 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 801063a:	462e      	mov	r6, r5
 801063c:	e454      	b.n	800fee8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 801063e:	462e      	mov	r6, r5
 8010640:	e490      	b.n	800ff64 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8010642:	462e      	mov	r6, r5
 8010644:	e4cd      	b.n	800ffe2 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8010646:	462e      	mov	r6, r5
 8010648:	e4ac      	b.n	800ffa4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 801064a:	01d8      	lsls	r0, r3, #7
 801064c:	462e      	mov	r6, r5
 801064e:	f57f acc8 	bpl.w	800ffe2 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8010652:	e68b      	b.n	801036c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8010654:	0358      	lsls	r0, r3, #13
 8010656:	462e      	mov	r6, r5
 8010658:	f57f ae23 	bpl.w	80102a2 <HAL_RCCEx_PeriphCLKConfig+0x526>
 801065c:	e611      	b.n	8010282 <HAL_RCCEx_PeriphCLKConfig+0x506>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801065e:	03d9      	lsls	r1, r3, #15
 8010660:	462e      	mov	r6, r5
 8010662:	f57f ae38 	bpl.w	80102d6 <HAL_RCCEx_PeriphCLKConfig+0x55a>
 8010666:	e61e      	b.n	80102a6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8010668:	4938      	ldr	r1, [pc, #224]	; (801074c <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 801066a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 801066c:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 801066e:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8010672:	4302      	orrs	r2, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8010674:	0798      	lsls	r0, r3, #30
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8010676:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8010678:	f57f ad5a 	bpl.w	8010130 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 801067c:	e541      	b.n	8010102 <HAL_RCCEx_PeriphCLKConfig+0x386>
 801067e:	462e      	mov	r6, r5
 8010680:	e629      	b.n	80102d6 <HAL_RCCEx_PeriphCLKConfig+0x55a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8010682:	041f      	lsls	r7, r3, #16
 8010684:	462e      	mov	r6, r5
 8010686:	f57f aca9 	bpl.w	800ffdc <HAL_RCCEx_PeriphCLKConfig+0x260>
 801068a:	e499      	b.n	800ffc0 <HAL_RCCEx_PeriphCLKConfig+0x244>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801068c:	492f      	ldr	r1, [pc, #188]	; (801074c <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 801068e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8010690:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8010694:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8010696:	2d00      	cmp	r5, #0
 8010698:	d1d3      	bne.n	8010642 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
 801069a:	e680      	b.n	801039e <HAL_RCCEx_PeriphCLKConfig+0x622>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801069c:	2101      	movs	r1, #1
 801069e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80106a2:	f7ff faef 	bl	800fc84 <RCCEx_PLL3_Config>
 80106a6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80106a8:	6823      	ldr	r3, [r4, #0]
 80106aa:	2d00      	cmp	r5, #0
 80106ac:	d1c7      	bne.n	801063e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
 80106ae:	e452      	b.n	800ff56 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80106b0:	2101      	movs	r1, #1
 80106b2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80106b6:	f7ff fae5 	bl	800fc84 <RCCEx_PLL3_Config>
 80106ba:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80106bc:	6823      	ldr	r3, [r4, #0]
 80106be:	2d00      	cmp	r5, #0
 80106c0:	d1c1      	bne.n	8010646 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
 80106c2:	e467      	b.n	800ff94 <HAL_RCCEx_PeriphCLKConfig+0x218>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80106c4:	2102      	movs	r1, #2
 80106c6:	1d20      	adds	r0, r4, #4
 80106c8:	f7ff fa60 	bl	800fb8c <RCCEx_PLL2_Config>
 80106cc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80106ce:	6823      	ldr	r3, [r4, #0]
 80106d0:	2d00      	cmp	r5, #0
 80106d2:	d1b2      	bne.n	801063a <HAL_RCCEx_PeriphCLKConfig+0x8be>
 80106d4:	e401      	b.n	800feda <HAL_RCCEx_PeriphCLKConfig+0x15e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80106d6:	2100      	movs	r1, #0
 80106d8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80106dc:	f7ff fad2 	bl	800fc84 <RCCEx_PLL3_Config>
 80106e0:	6823      	ldr	r3, [r4, #0]
 80106e2:	4605      	mov	r5, r0
      break;
 80106e4:	f7ff bbda 	b.w	800fe9c <HAL_RCCEx_PeriphCLKConfig+0x120>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80106e8:	2100      	movs	r1, #0
 80106ea:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80106ee:	f7ff fac9 	bl	800fc84 <RCCEx_PLL3_Config>
 80106f2:	6823      	ldr	r3, [r4, #0]
 80106f4:	4605      	mov	r5, r0
      break;
 80106f6:	f7ff bbaf 	b.w	800fe58 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80106fa:	2100      	movs	r1, #0
 80106fc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010700:	f7ff fac0 	bl	800fc84 <RCCEx_PLL3_Config>
 8010704:	6823      	ldr	r3, [r4, #0]
 8010706:	4605      	mov	r5, r0
      break;
 8010708:	e404      	b.n	800ff14 <HAL_RCCEx_PeriphCLKConfig+0x198>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 801070a:	2102      	movs	r1, #2
 801070c:	3024      	adds	r0, #36	; 0x24
 801070e:	f7ff fab9 	bl	800fc84 <RCCEx_PLL3_Config>
 8010712:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8010714:	2e00      	cmp	r6, #0
 8010716:	f43f ab4c 	beq.w	800fdb2 <HAL_RCCEx_PeriphCLKConfig+0x36>
 801071a:	6823      	ldr	r3, [r4, #0]
 801071c:	f7ff bb52 	b.w	800fdc4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8010720:	2100      	movs	r1, #0
 8010722:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010726:	f7ff faad 	bl	800fc84 <RCCEx_PLL3_Config>
 801072a:	6823      	ldr	r3, [r4, #0]
 801072c:	4605      	mov	r5, r0
      break;
 801072e:	e683      	b.n	8010438 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010730:	4906      	ldr	r1, [pc, #24]	; (801074c <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
      break;
 8010732:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010734:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8010736:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 801073a:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 801073c:	e67c      	b.n	8010438 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801073e:	2100      	movs	r1, #0
 8010740:	1d20      	adds	r0, r4, #4
 8010742:	f7ff fa23 	bl	800fb8c <RCCEx_PLL2_Config>
 8010746:	6823      	ldr	r3, [r4, #0]
 8010748:	4605      	mov	r5, r0
      break;
 801074a:	e675      	b.n	8010438 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 801074c:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8010750:	2100      	movs	r1, #0
 8010752:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010756:	f7ff fa95 	bl	800fc84 <RCCEx_PLL3_Config>
 801075a:	6823      	ldr	r3, [r4, #0]
 801075c:	4605      	mov	r5, r0
      break;
 801075e:	f7ff bb5a 	b.w	800fe16 <HAL_RCCEx_PeriphCLKConfig+0x9a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8010762:	2101      	movs	r1, #1
 8010764:	1d20      	adds	r0, r4, #4
 8010766:	f7ff fa11 	bl	800fb8c <RCCEx_PLL2_Config>
 801076a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 801076c:	6823      	ldr	r3, [r4, #0]
 801076e:	2d00      	cmp	r5, #0
 8010770:	f47f acdd 	bne.w	801012e <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 8010774:	e74a      	b.n	801060c <HAL_RCCEx_PeriphCLKConfig+0x890>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8010776:	2101      	movs	r1, #1
 8010778:	1d20      	adds	r0, r4, #4
 801077a:	f7ff fa07 	bl	800fb8c <RCCEx_PLL2_Config>
 801077e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8010780:	6823      	ldr	r3, [r4, #0]
 8010782:	2d00      	cmp	r5, #0
 8010784:	f47f aced 	bne.w	8010162 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8010788:	e74b      	b.n	8010622 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 801078a:	2101      	movs	r1, #1
 801078c:	1d20      	adds	r0, r4, #4
 801078e:	f7ff f9fd 	bl	800fb8c <RCCEx_PLL2_Config>
 8010792:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8010794:	6823      	ldr	r3, [r4, #0]
 8010796:	2d00      	cmp	r5, #0
 8010798:	f47f acb0 	bne.w	80100fc <HAL_RCCEx_PeriphCLKConfig+0x380>
 801079c:	e764      	b.n	8010668 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
            ret = HAL_TIMEOUT;
 801079e:	2603      	movs	r6, #3
 80107a0:	6823      	ldr	r3, [r4, #0]
 80107a2:	4635      	mov	r5, r6
 80107a4:	e420      	b.n	800ffe8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80107a6:	4949      	ldr	r1, [pc, #292]	; (80108cc <HAL_RCCEx_PeriphCLKConfig+0xb50>)
 80107a8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80107aa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80107ae:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 80107b0:	2d00      	cmp	r5, #0
 80107b2:	f47f af64 	bne.w	801067e <HAL_RCCEx_PeriphCLKConfig+0x902>
 80107b6:	e587      	b.n	80102c8 <HAL_RCCEx_PeriphCLKConfig+0x54c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80107b8:	4844      	ldr	r0, [pc, #272]	; (80108cc <HAL_RCCEx_PeriphCLKConfig+0xb50>)
 80107ba:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80107bc:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80107c0:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 80107c2:	2d00      	cmp	r5, #0
 80107c4:	f47f add0 	bne.w	8010368 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
 80107c8:	e691      	b.n	80104ee <HAL_RCCEx_PeriphCLKConfig+0x772>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80107ca:	4940      	ldr	r1, [pc, #256]	; (80108cc <HAL_RCCEx_PeriphCLKConfig+0xb50>)
 80107cc:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80107ce:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80107d2:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 80107d4:	2d00      	cmp	r5, #0
 80107d6:	f47f af42 	bne.w	801065e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80107da:	e69c      	b.n	8010516 <HAL_RCCEx_PeriphCLKConfig+0x79a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80107dc:	2102      	movs	r1, #2
 80107de:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80107e2:	f7ff fa4f 	bl	800fc84 <RCCEx_PLL3_Config>
 80107e6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80107e8:	6823      	ldr	r3, [r4, #0]
 80107ea:	2d00      	cmp	r5, #0
 80107ec:	f47f af04 	bne.w	80105f8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
 80107f0:	e4d0      	b.n	8010194 <HAL_RCCEx_PeriphCLKConfig+0x418>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80107f2:	4936      	ldr	r1, [pc, #216]	; (80108cc <HAL_RCCEx_PeriphCLKConfig+0xb50>)
 80107f4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80107f6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80107fa:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 80107fc:	2d00      	cmp	r5, #0
 80107fe:	f47f af24 	bne.w	801064a <HAL_RCCEx_PeriphCLKConfig+0x8ce>
 8010802:	e6b2      	b.n	801056a <HAL_RCCEx_PeriphCLKConfig+0x7ee>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8010804:	2102      	movs	r1, #2
 8010806:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801080a:	f7ff fa3b 	bl	800fc84 <RCCEx_PLL3_Config>
 801080e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8010810:	6823      	ldr	r3, [r4, #0]
 8010812:	2d00      	cmp	r5, #0
 8010814:	f47f aef5 	bne.w	8010602 <HAL_RCCEx_PeriphCLKConfig+0x886>
 8010818:	e4dc      	b.n	80101d4 <HAL_RCCEx_PeriphCLKConfig+0x458>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 801081a:	2102      	movs	r1, #2
 801081c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010820:	f7ff fa30 	bl	800fc84 <RCCEx_PLL3_Config>
 8010824:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8010826:	6823      	ldr	r3, [r4, #0]
 8010828:	2d00      	cmp	r5, #0
 801082a:	f47f aee0 	bne.w	80105ee <HAL_RCCEx_PeriphCLKConfig+0x872>
 801082e:	e4f1      	b.n	8010214 <HAL_RCCEx_PeriphCLKConfig+0x498>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8010830:	1d20      	adds	r0, r4, #4
 8010832:	f7ff f9ab 	bl	800fb8c <RCCEx_PLL2_Config>
 8010836:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8010838:	6823      	ldr	r3, [r4, #0]
 801083a:	2d00      	cmp	r5, #0
 801083c:	f47f af0a 	bne.w	8010654 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 8010840:	e67f      	b.n	8010542 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8010842:	2102      	movs	r1, #2
 8010844:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010848:	f7ff fa1c 	bl	800fc84 <RCCEx_PLL3_Config>
 801084c:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8010850:	b100      	cbz	r0, 8010854 <HAL_RCCEx_PeriphCLKConfig+0xad8>
        status = HAL_ERROR;
 8010852:	2601      	movs	r6, #1
 8010854:	6823      	ldr	r3, [r4, #0]
 8010856:	e4fb      	b.n	8010250 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8010858:	2102      	movs	r1, #2
 801085a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801085e:	f7ff fa11 	bl	800fc84 <RCCEx_PLL3_Config>
 8010862:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8010866:	b100      	cbz	r0, 801086a <HAL_RCCEx_PeriphCLKConfig+0xaee>
          status = HAL_ERROR;
 8010868:	2601      	movs	r6, #1
 801086a:	6823      	ldr	r3, [r4, #0]
 801086c:	e4e2      	b.n	8010234 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
        tickstart = HAL_GetTick();
 801086e:	f7fa fcbd 	bl	800b1ec <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010872:	f8df 8058 	ldr.w	r8, [pc, #88]	; 80108cc <HAL_RCCEx_PeriphCLKConfig+0xb50>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010876:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 801087a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801087c:	e004      	b.n	8010888 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801087e:	f7fa fcb5 	bl	800b1ec <HAL_GetTick>
 8010882:	1bc0      	subs	r0, r0, r7
 8010884:	4548      	cmp	r0, r9
 8010886:	d88a      	bhi.n	801079e <HAL_RCCEx_PeriphCLKConfig+0xa22>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010888:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 801088c:	079b      	lsls	r3, r3, #30
 801088e:	d5f6      	bpl.n	801087e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8010890:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8010894:	e5bc      	b.n	8010410 <HAL_RCCEx_PeriphCLKConfig+0x694>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8010896:	480d      	ldr	r0, [pc, #52]	; (80108cc <HAL_RCCEx_PeriphCLKConfig+0xb50>)
 8010898:	4a0d      	ldr	r2, [pc, #52]	; (80108d0 <HAL_RCCEx_PeriphCLKConfig+0xb54>)
 801089a:	6901      	ldr	r1, [r0, #16]
 801089c:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 80108a0:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 80108a4:	430a      	orrs	r2, r1
 80108a6:	6102      	str	r2, [r0, #16]
 80108a8:	e5bd      	b.n	8010426 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 80108aa:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80108ac:	462e      	mov	r6, r5
 80108ae:	f7ff bb9b 	b.w	800ffe8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80108b2:	2601      	movs	r6, #1
 80108b4:	4635      	mov	r5, r6
 80108b6:	e455      	b.n	8010164 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    switch(PeriphClkInit->Sai1ClockSelection)
 80108b8:	2601      	movs	r6, #1
 80108ba:	f7ff ba97 	b.w	800fdec <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Usart234578ClockSelection)
 80108be:	2601      	movs	r6, #1
 80108c0:	4635      	mov	r5, r6
 80108c2:	e435      	b.n	8010130 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    switch(PeriphClkInit->FmcClockSelection)
 80108c4:	2601      	movs	r6, #1
 80108c6:	4635      	mov	r5, r6
 80108c8:	f7ff bb8b 	b.w	800ffe2 <HAL_RCCEx_PeriphCLKConfig+0x266>
 80108cc:	58024400 	.word	0x58024400
 80108d0:	00ffffcf 	.word	0x00ffffcf

080108d4 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 80108d4:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80108d6:	f7ff f889 	bl	800f9ec <HAL_RCC_GetHCLKFreq>
 80108da:	4b05      	ldr	r3, [pc, #20]	; (80108f0 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 80108dc:	4a05      	ldr	r2, [pc, #20]	; (80108f4 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 80108de:	6a1b      	ldr	r3, [r3, #32]
 80108e0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80108e4:	5cd3      	ldrb	r3, [r2, r3]
 80108e6:	f003 031f 	and.w	r3, r3, #31
}
 80108ea:	40d8      	lsrs	r0, r3
 80108ec:	bd08      	pop	{r3, pc}
 80108ee:	bf00      	nop
 80108f0:	58024400 	.word	0x58024400
 80108f4:	080970c8 	.word	0x080970c8

080108f8 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80108f8:	4b4f      	ldr	r3, [pc, #316]	; (8010a38 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 80108fa:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80108fc:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80108fe:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8010900:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if (pll2m != 0U)
 8010902:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8010906:	f3c5 3205 	ubfx	r2, r5, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 801090a:	6bde      	ldr	r6, [r3, #60]	; 0x3c
  if (pll2m != 0U)
 801090c:	d05c      	beq.n	80109c8 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 801090e:	f3c6 06cc 	ubfx	r6, r6, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8010912:	f3c4 1400 	ubfx	r4, r4, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010916:	f001 0103 	and.w	r1, r1, #3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 801091a:	fb04 f406 	mul.w	r4, r4, r6
    switch (pllsource)
 801091e:	2901      	cmp	r1, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8010920:	ee07 4a90 	vmov	s15, r4
 8010924:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8010928:	d003      	beq.n	8010932 <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 801092a:	2902      	cmp	r1, #2
 801092c:	d075      	beq.n	8010a1a <HAL_RCCEx_GetPLL2ClockFreq+0x122>
 801092e:	2900      	cmp	r1, #0
 8010930:	d04f      	beq.n	80109d2 <HAL_RCCEx_GetPLL2ClockFreq+0xda>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8010932:	ee07 2a90 	vmov	s15, r2
 8010936:	eddf 6a41 	vldr	s13, [pc, #260]	; 8010a3c <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 801093a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801093e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010940:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8010944:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8010a40 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8010948:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801094c:	ee06 3a90 	vmov	s13, r3
 8010950:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8010954:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8010958:	ee76 6a85 	vadd.f32	s13, s13, s10
 801095c:	eee7 6a25 	vfma.f32	s13, s14, s11
 8010960:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8010964:	4a34      	ldr	r2, [pc, #208]	; (8010a38 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 8010966:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801096a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 801096c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8010970:	ee07 3a10 	vmov	s14, r3
 8010974:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8010978:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 801097a:	ee37 7a06 	vadd.f32	s14, s14, s12
 801097e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010982:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010986:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 801098a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 801098c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8010990:	ee07 3a10 	vmov	s14, r3
 8010994:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010998:	ee37 7a06 	vadd.f32	s14, s14, s12
 801099c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80109a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80109a4:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80109a8:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80109aa:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80109ae:	ee07 3a90 	vmov	s15, r3
 80109b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80109b6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80109ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80109be:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80109c2:	ed80 7a02 	vstr	s14, [r0, #8]
}
 80109c6:	4770      	bx	lr
 80109c8:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80109ca:	e9c0 2200 	strd	r2, r2, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80109ce:	6082      	str	r2, [r0, #8]
}
 80109d0:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80109d2:	6819      	ldr	r1, [r3, #0]
 80109d4:	0689      	lsls	r1, r1, #26
 80109d6:	d527      	bpl.n	8010a28 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80109d8:	6819      	ldr	r1, [r3, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80109da:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80109de:	4a19      	ldr	r2, [pc, #100]	; (8010a44 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80109e0:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80109e4:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80109e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80109ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80109ee:	40ca      	lsrs	r2, r1
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80109f0:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8010a40 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 80109f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80109f8:	ee06 2a10 	vmov	s12, r2
 80109fc:	ee06 3a90 	vmov	s13, r3
 8010a00:	eef8 5ac6 	vcvt.f32.s32	s11, s12
 8010a04:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8010a08:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8010a0c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8010a10:	eee7 6a05 	vfma.f32	s13, s14, s10
 8010a14:	ee66 6a26 	vmul.f32	s13, s12, s13
 8010a18:	e7a4      	b.n	8010964 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8010a1a:	ee07 2a90 	vmov	s15, r2
 8010a1e:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8010a48 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 8010a22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010a26:	e78a      	b.n	801093e <HAL_RCCEx_GetPLL2ClockFreq+0x46>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8010a28:	ee07 2a90 	vmov	s15, r2
 8010a2c:	eddf 6a07 	vldr	s13, [pc, #28]	; 8010a4c <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 8010a30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010a34:	e783      	b.n	801093e <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 8010a36:	bf00      	nop
 8010a38:	58024400 	.word	0x58024400
 8010a3c:	4a742400 	.word	0x4a742400
 8010a40:	39000000 	.word	0x39000000
 8010a44:	03d09000 	.word	0x03d09000
 8010a48:	4bbebc20 	.word	0x4bbebc20
 8010a4c:	4c742400 	.word	0x4c742400

08010a50 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010a50:	4b4f      	ldr	r3, [pc, #316]	; (8010b90 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 8010a52:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010a54:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8010a56:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8010a58:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if (pll3m != 0U)
 8010a5a:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8010a5e:	f3c5 5205 	ubfx	r2, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8010a62:	6c5e      	ldr	r6, [r3, #68]	; 0x44
  if (pll3m != 0U)
 8010a64:	d05c      	beq.n	8010b20 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8010a66:	f3c6 06cc 	ubfx	r6, r6, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8010a6a:	f3c4 2400 	ubfx	r4, r4, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010a6e:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8010a72:	fb04 f406 	mul.w	r4, r4, r6
    switch (pllsource)
 8010a76:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8010a78:	ee07 4a90 	vmov	s15, r4
 8010a7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8010a80:	d003      	beq.n	8010a8a <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 8010a82:	2902      	cmp	r1, #2
 8010a84:	d075      	beq.n	8010b72 <HAL_RCCEx_GetPLL3ClockFreq+0x122>
 8010a86:	2900      	cmp	r1, #0
 8010a88:	d04f      	beq.n	8010b2a <HAL_RCCEx_GetPLL3ClockFreq+0xda>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8010a8a:	ee07 2a90 	vmov	s15, r2
 8010a8e:	eddf 6a41 	vldr	s13, [pc, #260]	; 8010b94 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8010a92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a98:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8010a9c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8010b98 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8010aa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010aa4:	ee06 3a90 	vmov	s13, r3
 8010aa8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8010aac:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8010ab0:	ee76 6a85 	vadd.f32	s13, s13, s10
 8010ab4:	eee7 6a25 	vfma.f32	s13, s14, s11
 8010ab8:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8010abc:	4a34      	ldr	r2, [pc, #208]	; (8010b90 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 8010abe:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8010ac2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8010ac4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8010ac8:	ee07 3a10 	vmov	s14, r3
 8010acc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8010ad0:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8010ad2:	ee37 7a06 	vadd.f32	s14, s14, s12
 8010ad6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010ada:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010ade:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8010ae2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8010ae4:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8010ae8:	ee07 3a10 	vmov	s14, r3
 8010aec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010af0:	ee37 7a06 	vadd.f32	s14, s14, s12
 8010af4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010af8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010afc:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8010b00:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8010b02:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8010b06:	ee07 3a90 	vmov	s15, r3
 8010b0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010b0e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8010b12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010b16:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8010b1a:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8010b1e:	4770      	bx	lr
 8010b20:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8010b22:	e9c0 2200 	strd	r2, r2, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8010b26:	6082      	str	r2, [r0, #8]
}
 8010b28:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010b2a:	6819      	ldr	r1, [r3, #0]
 8010b2c:	0689      	lsls	r1, r1, #26
 8010b2e:	d527      	bpl.n	8010b80 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8010b30:	6819      	ldr	r1, [r3, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8010b32:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8010b36:	4a19      	ldr	r2, [pc, #100]	; (8010b9c <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8010b38:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8010b3c:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8010b40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8010b46:	40ca      	lsrs	r2, r1
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8010b48:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8010b98 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8010b4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b50:	ee06 2a10 	vmov	s12, r2
 8010b54:	ee06 3a90 	vmov	s13, r3
 8010b58:	eef8 5ac6 	vcvt.f32.s32	s11, s12
 8010b5c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8010b60:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8010b64:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8010b68:	eee7 6a05 	vfma.f32	s13, s14, s10
 8010b6c:	ee66 6a26 	vmul.f32	s13, s12, s13
 8010b70:	e7a4      	b.n	8010abc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8010b72:	ee07 2a90 	vmov	s15, r2
 8010b76:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8010ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 8010b7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010b7e:	e78a      	b.n	8010a96 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8010b80:	ee07 2a90 	vmov	s15, r2
 8010b84:	eddf 6a07 	vldr	s13, [pc, #28]	; 8010ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 8010b88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010b8c:	e783      	b.n	8010a96 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 8010b8e:	bf00      	nop
 8010b90:	58024400 	.word	0x58024400
 8010b94:	4a742400 	.word	0x4a742400
 8010b98:	39000000 	.word	0x39000000
 8010b9c:	03d09000 	.word	0x03d09000
 8010ba0:	4bbebc20 	.word	0x4bbebc20
 8010ba4:	4c742400 	.word	0x4c742400

08010ba8 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010ba8:	4b4f      	ldr	r3, [pc, #316]	; (8010ce8 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
{
 8010baa:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010bac:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8010bae:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8010bb0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  if (pll1m != 0U)
 8010bb2:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8010bb6:	f3c5 1205 	ubfx	r2, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8010bba:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (pll1m != 0U)
 8010bbc:	d05c      	beq.n	8010c78 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8010bbe:	f3c6 06cc 	ubfx	r6, r6, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8010bc2:	f004 0401 	and.w	r4, r4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010bc6:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8010bca:	fb04 f406 	mul.w	r4, r4, r6
    switch (pllsource)
 8010bce:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8010bd0:	ee07 4a90 	vmov	s15, r4
 8010bd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8010bd8:	d003      	beq.n	8010be2 <HAL_RCCEx_GetPLL1ClockFreq+0x3a>
 8010bda:	2902      	cmp	r1, #2
 8010bdc:	d075      	beq.n	8010cca <HAL_RCCEx_GetPLL1ClockFreq+0x122>
 8010bde:	2900      	cmp	r1, #0
 8010be0:	d04f      	beq.n	8010c82 <HAL_RCCEx_GetPLL1ClockFreq+0xda>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8010be2:	ee07 2a90 	vmov	s15, r2
 8010be6:	eddf 6a41 	vldr	s13, [pc, #260]	; 8010cec <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8010bea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010bf0:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8010bf4:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8010cf0 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 8010bf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010bfc:	ee06 3a90 	vmov	s13, r3
 8010c00:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8010c04:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8010c08:	ee76 6a85 	vadd.f32	s13, s13, s10
 8010c0c:	eee7 6a25 	vfma.f32	s13, s14, s11
 8010c10:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8010c14:	4a34      	ldr	r2, [pc, #208]	; (8010ce8 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
 8010c16:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8010c1a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8010c1c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8010c20:	ee07 3a10 	vmov	s14, r3
 8010c24:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8010c28:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8010c2a:	ee37 7a06 	vadd.f32	s14, s14, s12
 8010c2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010c32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010c36:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8010c3a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8010c3c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8010c40:	ee07 3a10 	vmov	s14, r3
 8010c44:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010c48:	ee37 7a06 	vadd.f32	s14, s14, s12
 8010c4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010c50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010c54:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8010c58:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8010c5a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8010c5e:	ee07 3a90 	vmov	s15, r3
 8010c62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010c66:	ee77 7a86 	vadd.f32	s15, s15, s12
 8010c6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010c6e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8010c72:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8010c76:	4770      	bx	lr
 8010c78:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8010c7a:	e9c0 2200 	strd	r2, r2, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8010c7e:	6082      	str	r2, [r0, #8]
}
 8010c80:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010c82:	6819      	ldr	r1, [r3, #0]
 8010c84:	0689      	lsls	r1, r1, #26
 8010c86:	d527      	bpl.n	8010cd8 <HAL_RCCEx_GetPLL1ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8010c88:	6819      	ldr	r1, [r3, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8010c8a:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8010c8e:	4a19      	ldr	r2, [pc, #100]	; (8010cf4 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>)
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8010c90:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8010c94:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8010c98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8010c9e:	40ca      	lsrs	r2, r1
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8010ca0:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8010cf0 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 8010ca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010ca8:	ee06 2a10 	vmov	s12, r2
 8010cac:	ee06 3a90 	vmov	s13, r3
 8010cb0:	eef8 5ac6 	vcvt.f32.s32	s11, s12
 8010cb4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8010cb8:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8010cbc:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8010cc0:	eee7 6a05 	vfma.f32	s13, s14, s10
 8010cc4:	ee66 6a26 	vmul.f32	s13, s12, s13
 8010cc8:	e7a4      	b.n	8010c14 <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8010cca:	ee07 2a90 	vmov	s15, r2
 8010cce:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8010cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 8010cd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010cd6:	e78a      	b.n	8010bee <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8010cd8:	ee07 2a90 	vmov	s15, r2
 8010cdc:	eddf 6a07 	vldr	s13, [pc, #28]	; 8010cfc <HAL_RCCEx_GetPLL1ClockFreq+0x154>
 8010ce0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010ce4:	e783      	b.n	8010bee <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 8010ce6:	bf00      	nop
 8010ce8:	58024400 	.word	0x58024400
 8010cec:	4a742400 	.word	0x4a742400
 8010cf0:	39000000 	.word	0x39000000
 8010cf4:	03d09000 	.word	0x03d09000
 8010cf8:	4bbebc20 	.word	0x4bbebc20
 8010cfc:	4c742400 	.word	0x4c742400

08010d00 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8010d00:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 8010d04:	b500      	push	{lr}
 8010d06:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8010d08:	d050      	beq.n	8010dac <HAL_RCCEx_GetPeriphCLKFreq+0xac>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8010d0a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8010d0e:	d019      	beq.n	8010d44 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8010d10:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8010d14:	f000 808a 	beq.w	8010e2c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8010d18:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8010d1c:	d05a      	beq.n	8010dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8010d1e:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8010d22:	d034      	beq.n	8010d8e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8010d24:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8010d28:	f000 80b1 	beq.w	8010e8e <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8010d2c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8010d30:	f000 80be 	beq.w	8010eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8010d34:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8010d38:	f000 8096 	beq.w	8010e68 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      frequency = 0;
 8010d3c:	2000      	movs	r0, #0
}
 8010d3e:	b005      	add	sp, #20
 8010d40:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8010d44:	4a70      	ldr	r2, [pc, #448]	; (8010f08 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 8010d46:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8010d48:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 8010d4c:	2b80      	cmp	r3, #128	; 0x80
 8010d4e:	d059      	beq.n	8010e04 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8010d50:	d912      	bls.n	8010d78 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
 8010d52:	2bc0      	cmp	r3, #192	; 0xc0
 8010d54:	d026      	beq.n	8010da4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 8010d56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010d5a:	d1ef      	bne.n	8010d3c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8010d5c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8010d5e:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8010d62:	d05b      	beq.n	8010e1c <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8010d64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010d68:	f000 80a0 	beq.w	8010eac <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
            frequency = HSE_VALUE;
 8010d6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010d70:	4866      	ldr	r0, [pc, #408]	; (8010f0c <HAL_RCCEx_GetPeriphCLKFreq+0x20c>)
 8010d72:	bf18      	it	ne
 8010d74:	2000      	movne	r0, #0
 8010d76:	e7e2      	b.n	8010d3e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
      switch (saiclocksource)
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d03c      	beq.n	8010df6 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8010d7c:	2b40      	cmp	r3, #64	; 0x40
 8010d7e:	d1dd      	bne.n	8010d3c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010d80:	a801      	add	r0, sp, #4
 8010d82:	f7ff fdb9 	bl	80108f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010d86:	9801      	ldr	r0, [sp, #4]
}
 8010d88:	b005      	add	sp, #20
 8010d8a:	f85d fb04 	ldr.w	pc, [sp], #4
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8010d8e:	4a5e      	ldr	r2, [pc, #376]	; (8010f08 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 8010d90:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8010d92:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 8010d96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010d9a:	d033      	beq.n	8010e04 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8010d9c:	d929      	bls.n	8010df2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8010d9e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010da2:	d158      	bne.n	8010e56 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
          frequency = EXTERNAL_CLOCK_VALUE;
 8010da4:	485a      	ldr	r0, [pc, #360]	; (8010f10 <HAL_RCCEx_GetPeriphCLKFreq+0x210>)
}
 8010da6:	b005      	add	sp, #20
 8010da8:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8010dac:	4b56      	ldr	r3, [pc, #344]	; (8010f08 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 8010dae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010db0:	f003 0307 	and.w	r3, r3, #7
 8010db4:	2b04      	cmp	r3, #4
 8010db6:	d8c1      	bhi.n	8010d3c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8010db8:	a201      	add	r2, pc, #4	; (adr r2, 8010dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8010dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dbe:	bf00      	nop
 8010dc0:	08010df7 	.word	0x08010df7
 8010dc4:	08010d81 	.word	0x08010d81
 8010dc8:	08010e05 	.word	0x08010e05
 8010dcc:	08010da5 	.word	0x08010da5
 8010dd0:	08010e13 	.word	0x08010e13
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8010dd4:	4a4c      	ldr	r2, [pc, #304]	; (8010f08 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 8010dd6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8010dd8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 8010ddc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010de0:	d010      	beq.n	8010e04 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8010de2:	d91d      	bls.n	8010e20 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8010de4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8010de8:	d0dc      	beq.n	8010da4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 8010dea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010dee:	d0b5      	beq.n	8010d5c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
 8010df0:	e7a4      	b.n	8010d3c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      switch (srcclk)
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d134      	bne.n	8010e60 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010df6:	a801      	add	r0, sp, #4
 8010df8:	f7ff fed6 	bl	8010ba8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010dfc:	9802      	ldr	r0, [sp, #8]
}
 8010dfe:	b005      	add	sp, #20
 8010e00:	f85d fb04 	ldr.w	pc, [sp], #4
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010e04:	a801      	add	r0, sp, #4
 8010e06:	f7ff fe23 	bl	8010a50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010e0a:	9801      	ldr	r0, [sp, #4]
}
 8010e0c:	b005      	add	sp, #20
 8010e0e:	f85d fb04 	ldr.w	pc, [sp], #4
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8010e12:	4b3d      	ldr	r3, [pc, #244]	; (8010f08 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 8010e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8010e16:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8010e1a:	d1a3      	bne.n	8010d64 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          frequency = HSI_VALUE;
 8010e1c:	483d      	ldr	r0, [pc, #244]	; (8010f14 <HAL_RCCEx_GetPeriphCLKFreq+0x214>)
 8010e1e:	e78e      	b.n	8010d3e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
      switch (saiclocksource)
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d0e8      	beq.n	8010df6 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8010e24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8010e28:	d0aa      	beq.n	8010d80 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
 8010e2a:	e787      	b.n	8010d3c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8010e2c:	4a36      	ldr	r2, [pc, #216]	; (8010f08 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 8010e2e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8010e30:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 8010e34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010e38:	d0e4      	beq.n	8010e04 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8010e3a:	d805      	bhi.n	8010e48 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d0da      	beq.n	8010df6 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8010e40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010e44:	d09c      	beq.n	8010d80 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
 8010e46:	e779      	b.n	8010d3c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8010e48:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8010e4c:	d0aa      	beq.n	8010da4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 8010e4e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010e52:	d083      	beq.n	8010d5c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
 8010e54:	e772      	b.n	8010d3c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      switch (srcclk)
 8010e56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010e5a:	f43f af7f 	beq.w	8010d5c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
 8010e5e:	e76d      	b.n	8010d3c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8010e60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010e64:	d08c      	beq.n	8010d80 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
 8010e66:	e769      	b.n	8010d3c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8010e68:	4b27      	ldr	r3, [pc, #156]	; (8010f08 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 8010e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010e6c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 8010e70:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8010e74:	d0d2      	beq.n	8010e1c <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
 8010e76:	d824      	bhi.n	8010ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8010e78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010e7c:	d03e      	beq.n	8010efc <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8010e7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010e82:	d127      	bne.n	8010ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010e84:	a801      	add	r0, sp, #4
 8010e86:	f7ff fde3 	bl	8010a50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8010e8a:	9802      	ldr	r0, [sp, #8]
          break;
 8010e8c:	e757      	b.n	8010d3e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8010e8e:	4a1e      	ldr	r2, [pc, #120]	; (8010f08 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 8010e90:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8010e92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 8010e96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010e9a:	d02a      	beq.n	8010ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
 8010e9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010ea0:	f43f af5c 	beq.w	8010d5c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	f47f af49 	bne.w	8010d3c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8010eaa:	e769      	b.n	8010d80 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
      switch (srcclk)
 8010eac:	481a      	ldr	r0, [pc, #104]	; (8010f18 <HAL_RCCEx_GetPeriphCLKFreq+0x218>)
 8010eae:	e746      	b.n	8010d3e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8010eb0:	4b15      	ldr	r3, [pc, #84]	; (8010f08 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 8010eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      switch (srcclk)
 8010eb4:	03db      	lsls	r3, r3, #15
 8010eb6:	d59e      	bpl.n	8010df6 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010eb8:	a801      	add	r0, sp, #4
 8010eba:	f7ff fd1d 	bl	80108f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8010ebe:	9803      	ldr	r0, [sp, #12]
          break;
 8010ec0:	e73d      	b.n	8010d3e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
      switch (srcclk)
 8010ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010ec6:	d0f1      	beq.n	8010eac <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
          frequency = HSE_VALUE;
 8010ec8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010ecc:	480f      	ldr	r0, [pc, #60]	; (8010f0c <HAL_RCCEx_GetPeriphCLKFreq+0x20c>)
 8010ece:	bf18      	it	ne
 8010ed0:	2000      	movne	r0, #0
 8010ed2:	e734      	b.n	8010d3e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
      switch (srcclk)
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	f47f af31 	bne.w	8010d3c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8010eda:	f7fe fd87 	bl	800f9ec <HAL_RCC_GetHCLKFreq>
 8010ede:	4b0a      	ldr	r3, [pc, #40]	; (8010f08 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 8010ee0:	4a0e      	ldr	r2, [pc, #56]	; (8010f1c <HAL_RCCEx_GetPeriphCLKFreq+0x21c>)
 8010ee2:	6a1b      	ldr	r3, [r3, #32]
 8010ee4:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8010ee8:	5cd3      	ldrb	r3, [r2, r3]
 8010eea:	f003 031f 	and.w	r3, r3, #31
 8010eee:	40d8      	lsrs	r0, r3
          break;
 8010ef0:	e725      	b.n	8010d3e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010ef2:	a801      	add	r0, sp, #4
 8010ef4:	f7ff fdac 	bl	8010a50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8010ef8:	9803      	ldr	r0, [sp, #12]
          break;
 8010efa:	e720      	b.n	8010d3e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010efc:	a801      	add	r0, sp, #4
 8010efe:	f7ff fcfb 	bl	80108f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010f02:	9802      	ldr	r0, [sp, #8]
          break;
 8010f04:	e71b      	b.n	8010d3e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8010f06:	bf00      	nop
 8010f08:	58024400 	.word	0x58024400
 8010f0c:	017d7840 	.word	0x017d7840
 8010f10:	00bb8000 	.word	0x00bb8000
 8010f14:	03d09000 	.word	0x03d09000
 8010f18:	003d0900 	.word	0x003d0900
 8010f1c:	080970c8 	.word	0x080970c8

08010f20 <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8010f20:	2800      	cmp	r0, #0
 8010f22:	d036      	beq.n	8010f92 <HAL_RNG_Init+0x72>
{
 8010f24:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8010f26:	7a43      	ldrb	r3, [r0, #9]
 8010f28:	4604      	mov	r4, r0
 8010f2a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8010f2e:	b333      	cbz	r3, 8010f7e <HAL_RNG_Init+0x5e>
    HAL_RNG_MspInit(hrng);
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8010f30:	2202      	movs	r2, #2
      return HAL_ERROR;
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8010f32:	e9d4 3100 	ldrd	r3, r1, [r4]
  hrng->State = HAL_RNG_STATE_BUSY;
 8010f36:	7262      	strb	r2, [r4, #9]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8010f38:	681a      	ldr	r2, [r3, #0]
 8010f3a:	f022 0220 	bic.w	r2, r2, #32
 8010f3e:	430a      	orrs	r2, r1
 8010f40:	601a      	str	r2, [r3, #0]
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8010f42:	681a      	ldr	r2, [r3, #0]
 8010f44:	f042 0204 	orr.w	r2, r2, #4
 8010f48:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8010f4a:	685b      	ldr	r3, [r3, #4]
 8010f4c:	065b      	lsls	r3, r3, #25
 8010f4e:	d503      	bpl.n	8010f58 <HAL_RNG_Init+0x38>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8010f50:	2304      	movs	r3, #4
    return HAL_ERROR;
 8010f52:	2001      	movs	r0, #1
    hrng->State = HAL_RNG_STATE_ERROR;
 8010f54:	7263      	strb	r3, [r4, #9]
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
 8010f56:	bd38      	pop	{r3, r4, r5, pc}
  tickstart = HAL_GetTick();
 8010f58:	f7fa f948 	bl	800b1ec <HAL_GetTick>
 8010f5c:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8010f5e:	e004      	b.n	8010f6a <HAL_RNG_Init+0x4a>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8010f60:	f7fa f944 	bl	800b1ec <HAL_GetTick>
 8010f64:	1b43      	subs	r3, r0, r5
 8010f66:	2b02      	cmp	r3, #2
 8010f68:	d80d      	bhi.n	8010f86 <HAL_RNG_Init+0x66>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8010f6a:	6823      	ldr	r3, [r4, #0]
 8010f6c:	685b      	ldr	r3, [r3, #4]
 8010f6e:	f013 0304 	ands.w	r3, r3, #4
 8010f72:	d1f5      	bne.n	8010f60 <HAL_RNG_Init+0x40>
  hrng->State = HAL_RNG_STATE_READY;
 8010f74:	2201      	movs	r2, #1
  return HAL_OK;
 8010f76:	4618      	mov	r0, r3
  hrng->State = HAL_RNG_STATE_READY;
 8010f78:	7262      	strb	r2, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8010f7a:	60e3      	str	r3, [r4, #12]
}
 8010f7c:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
 8010f7e:	7202      	strb	r2, [r0, #8]
    HAL_RNG_MspInit(hrng);
 8010f80:	f7f5 fb28 	bl	80065d4 <HAL_RNG_MspInit>
 8010f84:	e7d4      	b.n	8010f30 <HAL_RNG_Init+0x10>
      hrng->State = HAL_RNG_STATE_ERROR;
 8010f86:	2204      	movs	r2, #4
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8010f88:	2302      	movs	r3, #2
      return HAL_ERROR;
 8010f8a:	2001      	movs	r0, #1
      hrng->State = HAL_RNG_STATE_ERROR;
 8010f8c:	7262      	strb	r2, [r4, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8010f8e:	60e3      	str	r3, [r4, #12]
}
 8010f90:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8010f92:	2001      	movs	r0, #1
}
 8010f94:	4770      	bx	lr
 8010f96:	bf00      	nop

08010f98 <HAL_RNG_DeInit>:
#if defined(RNG_CR_CONDRST)
  uint32_t tickstart;

#endif /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8010f98:	b1b0      	cbz	r0, 8010fc8 <HAL_RNG_DeInit+0x30>
    }
  }

#else
  /* Clear Clock Error Detection bit */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CED);
 8010f9a:	6803      	ldr	r3, [r0, #0]
 8010f9c:	681a      	ldr	r2, [r3, #0]
 8010f9e:	f022 0220 	bic.w	r2, r2, #32
{
 8010fa2:	b510      	push	{r4, lr}
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CED);
 8010fa4:	601a      	str	r2, [r3, #0]
 8010fa6:	4604      	mov	r4, r0
#endif /* RNG_CR_CONDRST */
  /* Disable the RNG Peripheral */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_IE | RNG_CR_RNGEN);
 8010fa8:	681a      	ldr	r2, [r3, #0]
 8010faa:	f022 020c 	bic.w	r2, r2, #12
 8010fae:	601a      	str	r2, [r3, #0]

  /* Clear RNG interrupt status flags */
  CLEAR_BIT(hrng->Instance->SR, RNG_SR_CEIS | RNG_SR_SEIS);
 8010fb0:	685a      	ldr	r2, [r3, #4]
 8010fb2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8010fb6:	605a      	str	r2, [r3, #4]

  /* DeInit the low level hardware */
  hrng->MspDeInitCallback(hrng);
#else
  /* DeInit the low level hardware */
  HAL_RNG_MspDeInit(hrng);
 8010fb8:	f7f5 fb2a 	bl	8006610 <HAL_RNG_MspDeInit>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Update the RNG state */
  hrng->State = HAL_RNG_STATE_RESET;
 8010fbc:	2300      	movs	r3, #0
 8010fbe:	7263      	strb	r3, [r4, #9]

  /* Release Lock */
  __HAL_UNLOCK(hrng);

  /* Return the function status */
  return HAL_OK;
 8010fc0:	4618      	mov	r0, r3
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8010fc2:	60e3      	str	r3, [r4, #12]
  __HAL_UNLOCK(hrng);
 8010fc4:	7223      	strb	r3, [r4, #8]
}
 8010fc6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8010fc8:	2001      	movs	r0, #1
}
 8010fca:	4770      	bx	lr

08010fcc <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8010fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 8010fd0:	7a03      	ldrb	r3, [r0, #8]
 8010fd2:	2b01      	cmp	r3, #1
 8010fd4:	d028      	beq.n	8011028 <HAL_RNG_GenerateRandomNumber+0x5c>
 8010fd6:	2201      	movs	r2, #1

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8010fd8:	7a43      	ldrb	r3, [r0, #9]
 8010fda:	4604      	mov	r4, r0
 8010fdc:	4293      	cmp	r3, r2
 8010fde:	fa5f f883 	uxtb.w	r8, r3
  __HAL_LOCK(hrng);
 8010fe2:	7202      	strb	r2, [r0, #8]
  if (hrng->State == HAL_RNG_STATE_READY)
 8010fe4:	d007      	beq.n	8010ff6 <HAL_RNG_GenerateRandomNumber+0x2a>

    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8010fe6:	2304      	movs	r3, #4
    status = HAL_ERROR;
 8010fe8:	4690      	mov	r8, r2
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8010fea:	60c3      	str	r3, [r0, #12]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8010fec:	2300      	movs	r3, #0
 8010fee:	7223      	strb	r3, [r4, #8]

  return status;
}
 8010ff0:	4640      	mov	r0, r8
 8010ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
 8010ff6:	2302      	movs	r3, #2
 8010ff8:	460e      	mov	r6, r1
 8010ffa:	7243      	strb	r3, [r0, #9]
    tickstart = HAL_GetTick();
 8010ffc:	f7fa f8f6 	bl	800b1ec <HAL_GetTick>
 8011000:	4607      	mov	r7, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8011002:	e004      	b.n	801100e <HAL_RNG_GenerateRandomNumber+0x42>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8011004:	f7fa f8f2 	bl	800b1ec <HAL_GetTick>
 8011008:	1bc0      	subs	r0, r0, r7
 801100a:	2802      	cmp	r0, #2
 801100c:	d811      	bhi.n	8011032 <HAL_RNG_GenerateRandomNumber+0x66>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 801100e:	6822      	ldr	r2, [r4, #0]
 8011010:	6855      	ldr	r5, [r2, #4]
 8011012:	f015 0501 	ands.w	r5, r5, #1
 8011016:	d0f5      	beq.n	8011004 <HAL_RNG_GenerateRandomNumber+0x38>
    hrng->RandomNumber = hrng->Instance->DR;
 8011018:	6893      	ldr	r3, [r2, #8]
    hrng->State = HAL_RNG_STATE_READY;
 801101a:	2201      	movs	r2, #1
  HAL_StatusTypeDef status = HAL_OK;
 801101c:	f04f 0800 	mov.w	r8, #0
    hrng->RandomNumber = hrng->Instance->DR;
 8011020:	6123      	str	r3, [r4, #16]
    *random32bit = hrng->RandomNumber;
 8011022:	6033      	str	r3, [r6, #0]
    hrng->State = HAL_RNG_STATE_READY;
 8011024:	7262      	strb	r2, [r4, #9]
 8011026:	e7e1      	b.n	8010fec <HAL_RNG_GenerateRandomNumber+0x20>
  __HAL_LOCK(hrng);
 8011028:	f04f 0802 	mov.w	r8, #2
}
 801102c:	4640      	mov	r0, r8
 801102e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        hrng->State = HAL_RNG_STATE_READY;
 8011032:	2201      	movs	r2, #1
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8011034:	2302      	movs	r3, #2
        __HAL_UNLOCK(hrng);
 8011036:	7225      	strb	r5, [r4, #8]
        hrng->State = HAL_RNG_STATE_READY;
 8011038:	7262      	strb	r2, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 801103a:	60e3      	str	r3, [r4, #12]
        return HAL_ERROR;
 801103c:	e7d8      	b.n	8010ff0 <HAL_RNG_GenerateRandomNumber+0x24>
 801103e:	bf00      	nop

08011040 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8011040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011044:	4605      	mov	r5, r0
 8011046:	b086      	sub	sp, #24
 8011048:	460f      	mov	r7, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 801104a:	f7fa f8cf 	bl	800b1ec <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 801104e:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 8011050:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8011052:	6828      	ldr	r0, [r5, #0]
 8011054:	f001 ffc0 	bl	8012fd8 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8011058:	4604      	mov	r4, r0
 801105a:	b118      	cbz	r0, 8011064 <SD_FindSCR+0x24>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 801105c:	4620      	mov	r0, r4
 801105e:	b006      	add	sp, #24
 8011060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8011064:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8011066:	6828      	ldr	r0, [r5, #0]
 8011068:	0409      	lsls	r1, r1, #16
 801106a:	f002 fd01 	bl	8013a70 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 801106e:	4604      	mov	r4, r0
 8011070:	2800      	cmp	r0, #0
 8011072:	d1f3      	bne.n	801105c <SD_FindSCR+0x1c>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8011074:	f04f 32ff 	mov.w	r2, #4294967295
 8011078:	2308      	movs	r3, #8
 801107a:	2030      	movs	r0, #48	; 0x30
 801107c:	2102      	movs	r1, #2
 801107e:	e9cd 2300 	strd	r2, r3, [sp]
 8011082:	2200      	movs	r2, #0
 8011084:	2301      	movs	r3, #1
 8011086:	e9cd 0102 	strd	r0, r1, [sp, #8]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 801108a:	4669      	mov	r1, sp
 801108c:	6828      	ldr	r0, [r5, #0]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801108e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8011092:	f001 ff8b 	bl	8012fac <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8011096:	6828      	ldr	r0, [r5, #0]
 8011098:	f002 fe6a 	bl	8013d70 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 801109c:	4604      	mov	r4, r0
 801109e:	2800      	cmp	r0, #0
 80110a0:	d1dc      	bne.n	801105c <SD_FindSCR+0x1c>
  uint32_t tempscr[2U] = {0UL, 0UL};
 80110a2:	4682      	mov	sl, r0
 80110a4:	4681      	mov	r9, r0
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 80110a6:	f240 582a 	movw	r8, #1322	; 0x52a
 80110aa:	e004      	b.n	80110b6 <SD_FindSCR+0x76>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80110ac:	f7fa f89e 	bl	800b1ec <HAL_GetTick>
 80110b0:	1b83      	subs	r3, r0, r6
 80110b2:	3301      	adds	r3, #1
 80110b4:	d024      	beq.n	8011100 <SD_FindSCR+0xc0>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 80110b6:	6828      	ldr	r0, [r5, #0]
 80110b8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80110ba:	ea13 0f08 	tst.w	r3, r8
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80110be:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 80110c0:	d10c      	bne.n	80110dc <SD_FindSCR+0x9c>
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80110c2:	0319      	lsls	r1, r3, #12
 80110c4:	d4f2      	bmi.n	80110ac <SD_FindSCR+0x6c>
 80110c6:	2c00      	cmp	r4, #0
 80110c8:	d1f0      	bne.n	80110ac <SD_FindSCR+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80110ca:	f001 ff4d 	bl	8012f68 <SDMMC_ReadFIFO>
 80110ce:	4681      	mov	r9, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80110d0:	6828      	ldr	r0, [r5, #0]
      index++;
 80110d2:	2401      	movs	r4, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80110d4:	f001 ff48 	bl	8012f68 <SDMMC_ReadFIFO>
 80110d8:	4682      	mov	sl, r0
      index++;
 80110da:	e7e7      	b.n	80110ac <SD_FindSCR+0x6c>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80110dc:	071a      	lsls	r2, r3, #28
 80110de:	d415      	bmi.n	801110c <SD_FindSCR+0xcc>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80110e0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80110e2:	079b      	lsls	r3, r3, #30
 80110e4:	d40f      	bmi.n	8011106 <SD_FindSCR+0xc6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80110e6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80110e8:	f014 0420 	ands.w	r4, r4, #32
 80110ec:	d111      	bne.n	8011112 <SD_FindSCR+0xd2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80110ee:	fa9a f28a 	rev.w	r2, sl
 80110f2:	fa99 f389 	rev.w	r3, r9
 80110f6:	4908      	ldr	r1, [pc, #32]	; (8011118 <SD_FindSCR+0xd8>)
 80110f8:	6381      	str	r1, [r0, #56]	; 0x38
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80110fa:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_SD_ERROR_NONE;
 80110fe:	e7ad      	b.n	801105c <SD_FindSCR+0x1c>
      return HAL_SD_ERROR_TIMEOUT;
 8011100:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8011104:	e7aa      	b.n	801105c <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8011106:	2402      	movs	r4, #2
 8011108:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 801110a:	e7a7      	b.n	801105c <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 801110c:	2408      	movs	r4, #8
 801110e:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8011110:	e7a4      	b.n	801105c <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8011112:	2420      	movs	r4, #32
 8011114:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8011116:	e7a1      	b.n	801105c <SD_FindSCR+0x1c>
 8011118:	18000f3a 	.word	0x18000f3a

0801111c <SD_HighSpeed>:
  *         of PLL to have SDMMCCK clock between 50 and 120 MHz
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SD_HighSpeed(SD_HandleTypeDef *hsd)
{
 801111c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011120:	b096      	sub	sp, #88	; 0x58
 8011122:	4604      	mov	r4, r0
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  SDMMC_DataInitTypeDef sdmmc_datainitstructure;
  uint32_t SD_hs[16]  = {0};
 8011124:	2240      	movs	r2, #64	; 0x40
 8011126:	2100      	movs	r1, #0
 8011128:	a806      	add	r0, sp, #24
 801112a:	f013 fe87 	bl	8024e3c <memset>
  uint32_t count, loop = 0 ;
  uint32_t Timeout = HAL_GetTick();
 801112e:	f7fa f85d 	bl	800b1ec <HAL_GetTick>

  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 8011132:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8011134:	b13b      	cbz	r3, 8011146 <SD_HighSpeed+0x2a>
  {
     /* Standard Speed Card <= 12.5Mhz  */
     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
  }

  if(hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8011136:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801113a:	d00a      	beq.n	8011152 <SD_HighSpeed+0x36>
    sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;

    (void)SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure);


    errorstate = SDMMC_CmdSwitch(hsd->Instance,SDMMC_SDR25_SWITCH_PATTERN);
 801113c:	2600      	movs	r6, #0
    }

  }

  return errorstate;
}
 801113e:	4630      	mov	r0, r6
 8011140:	b016      	add	sp, #88	; 0x58
 8011142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8011146:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
}
 801114a:	4630      	mov	r0, r6
 801114c:	b016      	add	sp, #88	; 0x58
 801114e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hsd->Instance->DCTRL = 0;
 8011152:	2300      	movs	r3, #0
 8011154:	4607      	mov	r7, r0
 8011156:	6820      	ldr	r0, [r4, #0]
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8011158:	2140      	movs	r1, #64	; 0x40
    hsd->Instance->DCTRL = 0;
 801115a:	62c3      	str	r3, [r0, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 801115c:	f001 ff3c 	bl	8012fd8 <SDMMC_CmdBlockLength>
    if (errorstate != HAL_SD_ERROR_NONE)
 8011160:	4606      	mov	r6, r0
 8011162:	2800      	cmp	r0, #0
 8011164:	d1eb      	bne.n	801113e <SD_HighSpeed+0x22>
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 8011166:	f04f 32ff 	mov.w	r2, #4294967295
 801116a:	2340      	movs	r3, #64	; 0x40
 801116c:	2060      	movs	r0, #96	; 0x60
 801116e:	2102      	movs	r1, #2
 8011170:	e9cd 2300 	strd	r2, r3, [sp]
 8011174:	2200      	movs	r2, #0
 8011176:	2301      	movs	r3, #1
 8011178:	e9cd 0102 	strd	r0, r1, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure);
 801117c:	4669      	mov	r1, sp
 801117e:	6820      	ldr	r0, [r4, #0]
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 8011180:	e9cd 2304 	strd	r2, r3, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure);
 8011184:	f001 ff12 	bl	8012fac <SDMMC_ConfigData>
    errorstate = SDMMC_CmdSwitch(hsd->Instance,SDMMC_SDR25_SWITCH_PATTERN);
 8011188:	4924      	ldr	r1, [pc, #144]	; (801121c <SD_HighSpeed+0x100>)
 801118a:	6820      	ldr	r0, [r4, #0]
 801118c:	f003 f8ac 	bl	80142e8 <SDMMC_CmdSwitch>
    if(errorstate != HAL_SD_ERROR_NONE)
 8011190:	4606      	mov	r6, r0
 8011192:	2800      	cmp	r0, #0
 8011194:	d1d3      	bne.n	801113e <SD_HighSpeed+0x22>
  uint32_t count, loop = 0 ;
 8011196:	4681      	mov	r9, r0
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 8011198:	f240 5a2a 	movw	sl, #1322	; 0x52a
 801119c:	e004      	b.n	80111a8 <SD_HighSpeed+0x8c>
      if((HAL_GetTick()-Timeout) >=  SDMMC_DATATIMEOUT)
 801119e:	f7fa f825 	bl	800b1ec <HAL_GetTick>
 80111a2:	1bc0      	subs	r0, r0, r7
 80111a4:	3001      	adds	r0, #1
 80111a6:	d029      	beq.n	80111fc <SD_HighSpeed+0xe0>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 80111a8:	6820      	ldr	r0, [r4, #0]
 80111aa:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80111ac:	ea12 0f0a 	tst.w	r2, sl
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80111b0:	6b42      	ldr	r2, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 80111b2:	d112      	bne.n	80111da <SD_HighSpeed+0xbe>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80111b4:	0415      	lsls	r5, r2, #16
 80111b6:	d5f2      	bpl.n	801119e <SD_HighSpeed+0x82>
 80111b8:	ab06      	add	r3, sp, #24
 80111ba:	eb03 1549 	add.w	r5, r3, r9, lsl #5
 80111be:	ab0e      	add	r3, sp, #56	; 0x38
 80111c0:	eb03 1849 	add.w	r8, r3, r9, lsl #5
 80111c4:	e000      	b.n	80111c8 <SD_HighSpeed+0xac>
 80111c6:	6820      	ldr	r0, [r4, #0]
          SD_hs[(8U*loop)+count]  = SDMMC_ReadFIFO(hsd->Instance);
 80111c8:	f001 fece 	bl	8012f68 <SDMMC_ReadFIFO>
 80111cc:	f845 0b04 	str.w	r0, [r5], #4
        for (count = 0U; count < 8U; count++)
 80111d0:	4545      	cmp	r5, r8
 80111d2:	d1f8      	bne.n	80111c6 <SD_HighSpeed+0xaa>
        loop ++;
 80111d4:	f109 0901 	add.w	r9, r9, #1
 80111d8:	e7e1      	b.n	801119e <SD_HighSpeed+0x82>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80111da:	0714      	lsls	r4, r2, #28
 80111dc:	d415      	bmi.n	801120a <SD_HighSpeed+0xee>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80111de:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80111e0:	0791      	lsls	r1, r2, #30
 80111e2:	d415      	bmi.n	8011210 <SD_HighSpeed+0xf4>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80111e4:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80111e6:	0692      	lsls	r2, r2, #26
 80111e8:	d415      	bmi.n	8011216 <SD_HighSpeed+0xfa>
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 80111ea:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80111ee:	490c      	ldr	r1, [pc, #48]	; (8011220 <SD_HighSpeed+0x104>)
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 80111f0:	0793      	lsls	r3, r2, #30
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80111f2:	6381      	str	r1, [r0, #56]	; 0x38
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 80111f4:	d4a2      	bmi.n	801113c <SD_HighSpeed+0x20>
      errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
 80111f6:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 80111fa:	e7a0      	b.n	801113e <SD_HighSpeed+0x22>
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80111fc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
        hsd->State= HAL_SD_STATE_READY;
 8011200:	2301      	movs	r3, #1
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8011202:	63a6      	str	r6, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8011204:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_SD_ERROR_TIMEOUT;
 8011208:	e799      	b.n	801113e <SD_HighSpeed+0x22>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 801120a:	2208      	movs	r2, #8
 801120c:	6382      	str	r2, [r0, #56]	; 0x38
      return errorstate;
 801120e:	e796      	b.n	801113e <SD_HighSpeed+0x22>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8011210:	2602      	movs	r6, #2
 8011212:	6386      	str	r6, [r0, #56]	; 0x38
      return errorstate;
 8011214:	e793      	b.n	801113e <SD_HighSpeed+0x22>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8011216:	2620      	movs	r6, #32
 8011218:	6386      	str	r6, [r0, #56]	; 0x38
      return errorstate;
 801121a:	e790      	b.n	801113e <SD_HighSpeed+0x22>
 801121c:	80ffff01 	.word	0x80ffff01
 8011220:	18000f3a 	.word	0x18000f3a

08011224 <HAL_SD_MspInit>:
 8011224:	4770      	bx	lr
 8011226:	bf00      	nop

08011228 <HAL_SD_MspDeInit>:
 8011228:	4770      	bx	lr
 801122a:	bf00      	nop

0801122c <HAL_SD_ReadBlocks>:
{
 801122c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011230:	460c      	mov	r4, r1
 8011232:	b087      	sub	sp, #28
 8011234:	4683      	mov	fp, r0
 8011236:	4691      	mov	r9, r2
 8011238:	461e      	mov	r6, r3
  uint32_t tickstart = HAL_GetTick();
 801123a:	f7f9 ffd7 	bl	800b1ec <HAL_GetTick>
  if(NULL == pData)
 801123e:	2c00      	cmp	r4, #0
 8011240:	f000 8082 	beq.w	8011348 <HAL_SD_ReadBlocks+0x11c>
  if(hsd->State == HAL_SD_STATE_READY)
 8011244:	f89b 3034 	ldrb.w	r3, [fp, #52]	; 0x34
 8011248:	2b01      	cmp	r3, #1
 801124a:	fa5f f883 	uxtb.w	r8, r3
 801124e:	d168      	bne.n	8011322 <HAL_SD_ReadBlocks+0xf6>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8011250:	eb09 0306 	add.w	r3, r9, r6
 8011254:	f8db 2054 	ldr.w	r2, [fp, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8011258:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 801125a:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 801125c:	f8cb 1038 	str.w	r1, [fp, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8011260:	d87e      	bhi.n	8011360 <HAL_SD_ReadBlocks+0x134>
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8011262:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
    hsd->State = HAL_SD_STATE_BUSY;
 8011266:	2203      	movs	r2, #3
 8011268:	4605      	mov	r5, r0
    hsd->Instance->DCTRL = 0U;
 801126a:	f8db 0000 	ldr.w	r0, [fp]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 801126e:	2b01      	cmp	r3, #1
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8011270:	ea4f 2346 	mov.w	r3, r6, lsl #9
    hsd->State = HAL_SD_STATE_BUSY;
 8011274:	f88b 2034 	strb.w	r2, [fp, #52]	; 0x34
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8011278:	f04f 0a02 	mov.w	sl, #2
    hsd->Instance->DCTRL = 0U;
 801127c:	62c1      	str	r1, [r0, #44]	; 0x2c
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801127e:	f04f 31ff 	mov.w	r1, #4294967295
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8011282:	f04f 0290 	mov.w	r2, #144	; 0x90
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8011286:	9301      	str	r3, [sp, #4]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8011288:	f04f 0300 	mov.w	r3, #0
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801128c:	9100      	str	r1, [sp, #0]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 801128e:	4669      	mov	r1, sp
      add *= 512U;
 8011290:	bf18      	it	ne
 8011292:	ea4f 2949 	movne.w	r9, r9, lsl #9
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8011296:	9305      	str	r3, [sp, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8011298:	9202      	str	r2, [sp, #8]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801129a:	e9cd a303 	strd	sl, r3, [sp, #12]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 801129e:	f001 fe85 	bl	8012fac <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 80112a2:	f8db 0000 	ldr.w	r0, [fp]
    if(NumberOfBlocks > 1U)
 80112a6:	2e01      	cmp	r6, #1
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 80112a8:	68c3      	ldr	r3, [r0, #12]
 80112aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80112ae:	60c3      	str	r3, [r0, #12]
    if(NumberOfBlocks > 1U)
 80112b0:	d943      	bls.n	801133a <HAL_SD_ReadBlocks+0x10e>
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80112b2:	4649      	mov	r1, r9
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80112b4:	f8cb a030 	str.w	sl, [fp, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80112b8:	f001 ffd6 	bl	8013268 <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 80112bc:	2800      	cmp	r0, #0
 80112be:	d159      	bne.n	8011374 <HAL_SD_ReadBlocks+0x148>
    dataremaining = config.DataLength;
 80112c0:	f8dd a004 	ldr.w	sl, [sp, #4]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80112c4:	e006      	b.n	80112d4 <HAL_SD_ReadBlocks+0xa8>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80112c6:	f7f9 ff91 	bl	800b1ec <HAL_GetTick>
 80112ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80112cc:	1b40      	subs	r0, r0, r5
 80112ce:	4298      	cmp	r0, r3
 80112d0:	f080 8083 	bcs.w	80113da <HAL_SD_ReadBlocks+0x1ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80112d4:	f8db 0000 	ldr.w	r0, [fp]
 80112d8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80112da:	f413 7f95 	tst.w	r3, #298	; 0x12a
 80112de:	d159      	bne.n	8011394 <HAL_SD_ReadBlocks+0x168>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 80112e0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80112e2:	041a      	lsls	r2, r3, #16
 80112e4:	d5ef      	bpl.n	80112c6 <HAL_SD_ReadBlocks+0x9a>
 80112e6:	f1ba 0f1f 	cmp.w	sl, #31
 80112ea:	d9ec      	bls.n	80112c6 <HAL_SD_ReadBlocks+0x9a>
 80112ec:	1d27      	adds	r7, r4, #4
 80112ee:	f104 0924 	add.w	r9, r4, #36	; 0x24
 80112f2:	e001      	b.n	80112f8 <HAL_SD_ReadBlocks+0xcc>
 80112f4:	f8db 0000 	ldr.w	r0, [fp]
          data = SDMMC_ReadFIFO(hsd->Instance);
 80112f8:	f001 fe36 	bl	8012f68 <SDMMC_ReadFIFO>
 80112fc:	4602      	mov	r2, r0
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80112fe:	0a00      	lsrs	r0, r0, #8
 8011300:	3704      	adds	r7, #4
          *tempbuff = (uint8_t)(data & 0xFFU);
 8011302:	f807 2c08 	strb.w	r2, [r7, #-8]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8011306:	0c11      	lsrs	r1, r2, #16
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8011308:	0e12      	lsrs	r2, r2, #24
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 801130a:	f807 0c07 	strb.w	r0, [r7, #-7]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 801130e:	f807 1c06 	strb.w	r1, [r7, #-6]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8011312:	f807 2c05 	strb.w	r2, [r7, #-5]
        for(count = 0U; count < 8U; count++)
 8011316:	454f      	cmp	r7, r9
 8011318:	d1ec      	bne.n	80112f4 <HAL_SD_ReadBlocks+0xc8>
 801131a:	3420      	adds	r4, #32
        dataremaining -= 32U;
 801131c:	f1aa 0a20 	sub.w	sl, sl, #32
 8011320:	e7d1      	b.n	80112c6 <HAL_SD_ReadBlocks+0x9a>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8011322:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
    return HAL_ERROR;
 8011326:	f04f 0801 	mov.w	r8, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 801132a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801132e:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
}
 8011332:	4640      	mov	r0, r8
 8011334:	b007      	add	sp, #28
 8011336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 801133a:	2301      	movs	r3, #1
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 801133c:	4649      	mov	r1, r9
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 801133e:	f8cb 3030 	str.w	r3, [fp, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8011342:	f001 feed 	bl	8013120 <SDMMC_CmdReadSingleBlock>
 8011346:	e7b9      	b.n	80112bc <HAL_SD_ReadBlocks+0x90>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8011348:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
    return HAL_ERROR;
 801134c:	f04f 0801 	mov.w	r8, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8011350:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
 8011354:	4640      	mov	r0, r8
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8011356:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
}
 801135a:	b007      	add	sp, #28
 801135c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8011360:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
}
 8011364:	4640      	mov	r0, r8
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8011366:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801136a:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
}
 801136e:	b007      	add	sp, #28
 8011370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011374:	f8db 3000 	ldr.w	r3, [fp]
          hsd->State = HAL_SD_STATE_READY;
 8011378:	2101      	movs	r1, #1
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801137a:	4c39      	ldr	r4, [pc, #228]	; (8011460 <HAL_SD_ReadBlocks+0x234>)
          hsd->Context = SD_CONTEXT_NONE;
 801137c:	2200      	movs	r2, #0
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801137e:	639c      	str	r4, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8011380:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
 8011384:	4318      	orrs	r0, r3
 8011386:	f8cb 0038 	str.w	r0, [fp, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 801138a:	f88b 1034 	strb.w	r1, [fp, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 801138e:	f8cb 2030 	str.w	r2, [fp, #48]	; 0x30
          return HAL_ERROR;
 8011392:	e7ce      	b.n	8011332 <HAL_SD_ReadBlocks+0x106>
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8011394:	68c3      	ldr	r3, [r0, #12]
 8011396:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801139a:	60c3      	str	r3, [r0, #12]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 801139c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801139e:	05db      	lsls	r3, r3, #23
 80113a0:	d501      	bpl.n	80113a6 <HAL_SD_ReadBlocks+0x17a>
 80113a2:	2e01      	cmp	r6, #1
 80113a4:	d82c      	bhi.n	8011400 <HAL_SD_ReadBlocks+0x1d4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80113a6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80113a8:	f013 0308 	ands.w	r3, r3, #8
 80113ac:	d141      	bne.n	8011432 <HAL_SD_ReadBlocks+0x206>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80113ae:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80113b0:	f012 0202 	ands.w	r2, r2, #2
 80113b4:	d12f      	bne.n	8011416 <HAL_SD_ReadBlocks+0x1ea>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80113b6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80113b8:	f013 0320 	ands.w	r3, r3, #32
 80113bc:	d048      	beq.n	8011450 <HAL_SD_ReadBlocks+0x224>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80113be:	4b28      	ldr	r3, [pc, #160]	; (8011460 <HAL_SD_ReadBlocks+0x234>)
      hsd->State = HAL_SD_STATE_READY;
 80113c0:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80113c2:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80113c4:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
 80113c8:	f043 0320 	orr.w	r3, r3, #32
 80113cc:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80113d0:	f88b 1034 	strb.w	r1, [fp, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80113d4:	f8cb 2030 	str.w	r2, [fp, #48]	; 0x30
      return HAL_ERROR;
 80113d8:	e7ab      	b.n	8011332 <HAL_SD_ReadBlocks+0x106>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80113da:	f8db 3000 	ldr.w	r3, [fp]
        hsd->State= HAL_SD_STATE_READY;
 80113de:	2101      	movs	r1, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80113e0:	481f      	ldr	r0, [pc, #124]	; (8011460 <HAL_SD_ReadBlocks+0x234>)
        hsd->Context = SD_CONTEXT_NONE;
 80113e2:	2200      	movs	r2, #0
        return HAL_TIMEOUT;
 80113e4:	f04f 0803 	mov.w	r8, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80113e8:	6398      	str	r0, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80113ea:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
 80113ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80113f2:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80113f6:	f88b 1034 	strb.w	r1, [fp, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80113fa:	f8cb 2030 	str.w	r2, [fp, #48]	; 0x30
        return HAL_TIMEOUT;
 80113fe:	e798      	b.n	8011332 <HAL_SD_ReadBlocks+0x106>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8011400:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 8011404:	2b03      	cmp	r3, #3
 8011406:	d0ce      	beq.n	80113a6 <HAL_SD_ReadBlocks+0x17a>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8011408:	f002 f91a 	bl	8013640 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 801140c:	2800      	cmp	r0, #0
 801140e:	d1b1      	bne.n	8011374 <HAL_SD_ReadBlocks+0x148>
 8011410:	f8db 0000 	ldr.w	r0, [fp]
 8011414:	e7c7      	b.n	80113a6 <HAL_SD_ReadBlocks+0x17a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011416:	4a12      	ldr	r2, [pc, #72]	; (8011460 <HAL_SD_ReadBlocks+0x234>)
      hsd->State = HAL_SD_STATE_READY;
 8011418:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801141a:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 801141c:	f8db 2038 	ldr.w	r2, [fp, #56]	; 0x38
 8011420:	f042 0202 	orr.w	r2, r2, #2
 8011424:	f8cb 2038 	str.w	r2, [fp, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8011428:	f88b 1034 	strb.w	r1, [fp, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 801142c:	f8cb 3030 	str.w	r3, [fp, #48]	; 0x30
      return HAL_ERROR;
 8011430:	e77f      	b.n	8011332 <HAL_SD_ReadBlocks+0x106>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011432:	4b0b      	ldr	r3, [pc, #44]	; (8011460 <HAL_SD_ReadBlocks+0x234>)
      hsd->State = HAL_SD_STATE_READY;
 8011434:	2101      	movs	r1, #1
      hsd->Context = SD_CONTEXT_NONE;
 8011436:	2200      	movs	r2, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011438:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 801143a:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
 801143e:	f043 0308 	orr.w	r3, r3, #8
 8011442:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8011446:	f88b 1034 	strb.w	r1, [fp, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 801144a:	f8cb 2030 	str.w	r2, [fp, #48]	; 0x30
      return HAL_ERROR;
 801144e:	e770      	b.n	8011332 <HAL_SD_ReadBlocks+0x106>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8011450:	4904      	ldr	r1, [pc, #16]	; (8011464 <HAL_SD_ReadBlocks+0x238>)
    hsd->State = HAL_SD_STATE_READY;
 8011452:	2201      	movs	r2, #1
    return HAL_OK;
 8011454:	4698      	mov	r8, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8011456:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8011458:	f88b 2034 	strb.w	r2, [fp, #52]	; 0x34
    return HAL_OK;
 801145c:	e769      	b.n	8011332 <HAL_SD_ReadBlocks+0x106>
 801145e:	bf00      	nop
 8011460:	1fe00fff 	.word	0x1fe00fff
 8011464:	18000f3a 	.word	0x18000f3a

08011468 <HAL_SD_WriteBlocks>:
{
 8011468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801146c:	460d      	mov	r5, r1
 801146e:	b089      	sub	sp, #36	; 0x24
 8011470:	4604      	mov	r4, r0
 8011472:	4692      	mov	sl, r2
 8011474:	461f      	mov	r7, r3
 8011476:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
 801147a:	f7f9 feb7 	bl	800b1ec <HAL_GetTick>
  if(NULL == pData)
 801147e:	2d00      	cmp	r5, #0
 8011480:	d068      	beq.n	8011554 <HAL_SD_WriteBlocks+0xec>
  if(hsd->State == HAL_SD_STATE_READY)
 8011482:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8011486:	2b01      	cmp	r3, #1
 8011488:	fa5f f983 	uxtb.w	r9, r3
 801148c:	d152      	bne.n	8011534 <HAL_SD_WriteBlocks+0xcc>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 801148e:	eb0a 0307 	add.w	r3, sl, r7
 8011492:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8011494:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8011496:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8011498:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 801149a:	d865      	bhi.n	8011568 <HAL_SD_WriteBlocks+0x100>
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 801149c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    hsd->State = HAL_SD_STATE_BUSY;
 801149e:	2203      	movs	r2, #3
 80114a0:	4606      	mov	r6, r0
    hsd->Instance->DCTRL = 0U;
 80114a2:	6820      	ldr	r0, [r4, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80114a4:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80114a6:	f04f 33ff 	mov.w	r3, #4294967295
    hsd->State = HAL_SD_STATE_BUSY;
 80114aa:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80114ae:	f04f 0290 	mov.w	r2, #144	; 0x90
    hsd->Instance->DCTRL = 0U;
 80114b2:	62c1      	str	r1, [r0, #44]	; 0x2c
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80114b4:	ea4f 2147 	mov.w	r1, r7, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80114b8:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80114ba:	f04f 0300 	mov.w	r3, #0
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80114be:	9103      	str	r1, [sp, #12]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80114c0:	a902      	add	r1, sp, #8
      add *= 512U;
 80114c2:	bf18      	it	ne
 80114c4:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80114c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80114cc:	e9cd 3306 	strd	r3, r3, [sp, #24]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80114d0:	f001 fd6c 	bl	8012fac <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 80114d4:	6820      	ldr	r0, [r4, #0]
    if(NumberOfBlocks > 1U)
 80114d6:	2f01      	cmp	r7, #1
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 80114d8:	68c3      	ldr	r3, [r0, #12]
 80114da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80114de:	60c3      	str	r3, [r0, #12]
    if(NumberOfBlocks > 1U)
 80114e0:	d932      	bls.n	8011548 <HAL_SD_WriteBlocks+0xe0>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80114e2:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80114e4:	4651      	mov	r1, sl
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80114e6:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80114e8:	f002 f806 	bl	80134f8 <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 80114ec:	2800      	cmp	r0, #0
 80114ee:	d143      	bne.n	8011578 <HAL_SD_WriteBlocks+0x110>
    dataremaining = config.DataLength;
 80114f0:	f8dd b00c 	ldr.w	fp, [sp, #12]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80114f4:	e004      	b.n	8011500 <HAL_SD_WriteBlocks+0x98>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80114f6:	f7f9 fe79 	bl	800b1ec <HAL_GetTick>
 80114fa:	1b80      	subs	r0, r0, r6
 80114fc:	4540      	cmp	r0, r8
 80114fe:	d267      	bcs.n	80115d0 <HAL_SD_WriteBlocks+0x168>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8011500:	6820      	ldr	r0, [r4, #0]
 8011502:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011504:	f413 7f8d 	tst.w	r3, #282	; 0x11a
 8011508:	d142      	bne.n	8011590 <HAL_SD_WriteBlocks+0x128>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 801150a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801150c:	045a      	lsls	r2, r3, #17
 801150e:	d5f2      	bpl.n	80114f6 <HAL_SD_WriteBlocks+0x8e>
 8011510:	f1bb 0f1f 	cmp.w	fp, #31
 8011514:	d9ef      	bls.n	80114f6 <HAL_SD_WriteBlocks+0x8e>
 8011516:	f105 0a20 	add.w	sl, r5, #32
 801151a:	e000      	b.n	801151e <HAL_SD_WriteBlocks+0xb6>
 801151c:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 801151e:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8011522:	a901      	add	r1, sp, #4
          data |= ((uint32_t)(*tempbuff) << 24U);
 8011524:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8011526:	f001 fd23 	bl	8012f70 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 801152a:	4555      	cmp	r5, sl
 801152c:	d1f6      	bne.n	801151c <HAL_SD_WriteBlocks+0xb4>
        dataremaining -= 32U;
 801152e:	f1ab 0b20 	sub.w	fp, fp, #32
 8011532:	e7e0      	b.n	80114f6 <HAL_SD_WriteBlocks+0x8e>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8011534:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8011536:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 801153a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801153e:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8011540:	4648      	mov	r0, r9
 8011542:	b009      	add	sp, #36	; 0x24
 8011544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8011548:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 801154a:	4651      	mov	r1, sl
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 801154c:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 801154e:	f001 ff2f 	bl	80133b0 <SDMMC_CmdWriteSingleBlock>
 8011552:	e7cb      	b.n	80114ec <HAL_SD_WriteBlocks+0x84>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8011554:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8011556:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 801155a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
 801155e:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8011560:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8011562:	b009      	add	sp, #36	; 0x24
 8011564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8011568:	6ba3      	ldr	r3, [r4, #56]	; 0x38
}
 801156a:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 801156c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8011570:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8011572:	b009      	add	sp, #36	; 0x24
 8011574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011578:	6823      	ldr	r3, [r4, #0]
          hsd->State = HAL_SD_STATE_READY;
 801157a:	2101      	movs	r1, #1
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801157c:	4d2e      	ldr	r5, [pc, #184]	; (8011638 <HAL_SD_WriteBlocks+0x1d0>)
          hsd->Context = SD_CONTEXT_NONE;
 801157e:	2200      	movs	r2, #0
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011580:	639d      	str	r5, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8011582:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011584:	4318      	orrs	r0, r3
 8011586:	63a0      	str	r0, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8011588:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 801158c:	6322      	str	r2, [r4, #48]	; 0x30
          return HAL_ERROR;
 801158e:	e7d7      	b.n	8011540 <HAL_SD_WriteBlocks+0xd8>
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8011590:	68c3      	ldr	r3, [r0, #12]
 8011592:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011596:	60c3      	str	r3, [r0, #12]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8011598:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801159a:	05db      	lsls	r3, r3, #23
 801159c:	d501      	bpl.n	80115a2 <HAL_SD_WriteBlocks+0x13a>
 801159e:	2f01      	cmp	r7, #1
 80115a0:	d823      	bhi.n	80115ea <HAL_SD_WriteBlocks+0x182>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80115a2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80115a4:	f013 0308 	ands.w	r3, r3, #8
 80115a8:	d133      	bne.n	8011612 <HAL_SD_WriteBlocks+0x1aa>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80115aa:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80115ac:	f012 0202 	ands.w	r2, r2, #2
 80115b0:	d124      	bne.n	80115fc <HAL_SD_WriteBlocks+0x194>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80115b2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80115b4:	f013 0310 	ands.w	r3, r3, #16
 80115b8:	d037      	beq.n	801162a <HAL_SD_WriteBlocks+0x1c2>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80115ba:	4b1f      	ldr	r3, [pc, #124]	; (8011638 <HAL_SD_WriteBlocks+0x1d0>)
      hsd->State = HAL_SD_STATE_READY;
 80115bc:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80115be:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80115c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80115c2:	f043 0310 	orr.w	r3, r3, #16
 80115c6:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80115c8:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80115cc:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 80115ce:	e7b7      	b.n	8011540 <HAL_SD_WriteBlocks+0xd8>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80115d0:	6821      	ldr	r1, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 80115d2:	2201      	movs	r2, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80115d4:	4818      	ldr	r0, [pc, #96]	; (8011638 <HAL_SD_WriteBlocks+0x1d0>)
        hsd->Context = SD_CONTEXT_NONE;
 80115d6:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 80115d8:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80115dc:	6388      	str	r0, [r1, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80115de:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80115e0:	63a1      	str	r1, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80115e2:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80115e6:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 80115e8:	e7aa      	b.n	8011540 <HAL_SD_WriteBlocks+0xd8>
      if(hsd->SdCard.CardType != CARD_SECURED)
 80115ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80115ec:	2b03      	cmp	r3, #3
 80115ee:	d0d8      	beq.n	80115a2 <HAL_SD_WriteBlocks+0x13a>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80115f0:	f002 f826 	bl	8013640 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 80115f4:	2800      	cmp	r0, #0
 80115f6:	d1bf      	bne.n	8011578 <HAL_SD_WriteBlocks+0x110>
 80115f8:	6820      	ldr	r0, [r4, #0]
 80115fa:	e7d2      	b.n	80115a2 <HAL_SD_WriteBlocks+0x13a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80115fc:	4a0e      	ldr	r2, [pc, #56]	; (8011638 <HAL_SD_WriteBlocks+0x1d0>)
      hsd->State = HAL_SD_STATE_READY;
 80115fe:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011600:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8011602:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8011604:	f042 0202 	orr.w	r2, r2, #2
 8011608:	63a2      	str	r2, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 801160a:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 801160e:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8011610:	e796      	b.n	8011540 <HAL_SD_WriteBlocks+0xd8>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011612:	4b09      	ldr	r3, [pc, #36]	; (8011638 <HAL_SD_WriteBlocks+0x1d0>)
      hsd->State = HAL_SD_STATE_READY;
 8011614:	2101      	movs	r1, #1
      hsd->Context = SD_CONTEXT_NONE;
 8011616:	2200      	movs	r2, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011618:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 801161a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801161c:	f043 0308 	orr.w	r3, r3, #8
 8011620:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8011622:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8011626:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 8011628:	e78a      	b.n	8011540 <HAL_SD_WriteBlocks+0xd8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 801162a:	4904      	ldr	r1, [pc, #16]	; (801163c <HAL_SD_WriteBlocks+0x1d4>)
    hsd->State = HAL_SD_STATE_READY;
 801162c:	2201      	movs	r2, #1
    return HAL_OK;
 801162e:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8011630:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8011632:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_OK;
 8011636:	e783      	b.n	8011540 <HAL_SD_WriteBlocks+0xd8>
 8011638:	1fe00fff 	.word	0x1fe00fff
 801163c:	18000f3a 	.word	0x18000f3a

08011640 <HAL_SD_DeInit>:
  if(hsd == NULL)
 8011640:	b198      	cbz	r0, 801166a <HAL_SD_DeInit+0x2a>
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8011642:	6983      	ldr	r3, [r0, #24]
  hsd->State = HAL_SD_STATE_BUSY;
 8011644:	2203      	movs	r2, #3
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8011646:	2b02      	cmp	r3, #2
{
 8011648:	b510      	push	{r4, lr}
 801164a:	4604      	mov	r4, r0
  hsd->State = HAL_SD_STATE_BUSY;
 801164c:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8011650:	d00d      	beq.n	801166e <HAL_SD_DeInit+0x2e>
  (void)SDMMC_PowerState_OFF(hsd->Instance);
 8011652:	6820      	ldr	r0, [r4, #0]
 8011654:	f001 fc9a 	bl	8012f8c <SDMMC_PowerState_OFF>
  HAL_SD_MspDeInit(hsd);
 8011658:	4620      	mov	r0, r4
 801165a:	f7ff fde5 	bl	8011228 <HAL_SD_MspDeInit>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 801165e:	2300      	movs	r3, #0
 8011660:	63a3      	str	r3, [r4, #56]	; 0x38
  return HAL_OK;
 8011662:	4618      	mov	r0, r3
  hsd->State = HAL_SD_STATE_RESET;
 8011664:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8011668:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 801166a:	2001      	movs	r0, #1
}
 801166c:	4770      	bx	lr
    HAL_SD_DriveTransceiver_1_8V_Callback(RESET);
 801166e:	2000      	movs	r0, #0
 8011670:	f7f9 fd58 	bl	800b124 <HAL_SD_DriveTransceiver_1_8V_Callback>
 8011674:	e7ed      	b.n	8011652 <HAL_SD_DeInit+0x12>
 8011676:	bf00      	nop

08011678 <SD_UltraHighSpeed>:
  *         of PLL to have SDMMCCK clock between 50 and 120 MHz
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SD_UltraHighSpeed(SD_HandleTypeDef *hsd)
{
 8011678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801167c:	b096      	sub	sp, #88	; 0x58
 801167e:	4604      	mov	r4, r0
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  SDMMC_DataInitTypeDef sdmmc_datainitstructure;
  uint32_t SD_hs[16]  = {0};
 8011680:	2240      	movs	r2, #64	; 0x40
 8011682:	2100      	movs	r1, #0
 8011684:	a806      	add	r0, sp, #24
 8011686:	f013 fbd9 	bl	8024e3c <memset>
  uint32_t count, loop = 0 ;
  uint32_t Timeout = HAL_GetTick();
 801168a:	f7f9 fdaf 	bl	800b1ec <HAL_GetTick>

  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 801168e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8011690:	b13b      	cbz	r3, 80116a2 <SD_UltraHighSpeed+0x2a>
  {
     /* Standard Speed Card <= 12.5Mhz  */
     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
  }

  if(hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8011692:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011696:	d00a      	beq.n	80116ae <SD_UltraHighSpeed+0x36>
    if ( SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure) != HAL_OK)
    {
      return (HAL_SD_ERROR_GENERAL_UNKNOWN_ERR);
    }

    errorstate = SDMMC_CmdSwitch(hsd->Instance, SDMMC_SDR104_SWITCH_PATTERN);
 8011698:	2500      	movs	r5, #0
#endif /* (DLYB_SDMMC1) || (DLYB_SDMMC2) */
    }
  }

  return errorstate;
}
 801169a:	4628      	mov	r0, r5
 801169c:	b016      	add	sp, #88	; 0x58
 801169e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80116a2:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
}
 80116a6:	4628      	mov	r0, r5
 80116a8:	b016      	add	sp, #88	; 0x58
 80116aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hsd->Instance->DCTRL = 0;
 80116ae:	2300      	movs	r3, #0
 80116b0:	4606      	mov	r6, r0
 80116b2:	6820      	ldr	r0, [r4, #0]
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80116b4:	2140      	movs	r1, #64	; 0x40
    hsd->Instance->DCTRL = 0;
 80116b6:	62c3      	str	r3, [r0, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80116b8:	f001 fc8e 	bl	8012fd8 <SDMMC_CmdBlockLength>
    if (errorstate != HAL_SD_ERROR_NONE)
 80116bc:	4605      	mov	r5, r0
 80116be:	2800      	cmp	r0, #0
 80116c0:	d1eb      	bne.n	801169a <SD_UltraHighSpeed+0x22>
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 80116c2:	f04f 32ff 	mov.w	r2, #4294967295
 80116c6:	2340      	movs	r3, #64	; 0x40
 80116c8:	2060      	movs	r0, #96	; 0x60
 80116ca:	2102      	movs	r1, #2
 80116cc:	e9cd 2300 	strd	r2, r3, [sp]
 80116d0:	2200      	movs	r2, #0
 80116d2:	2301      	movs	r3, #1
 80116d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
    if ( SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure) != HAL_OK)
 80116d8:	4669      	mov	r1, sp
 80116da:	6820      	ldr	r0, [r4, #0]
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 80116dc:	e9cd 2304 	strd	r2, r3, [sp, #16]
    if ( SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure) != HAL_OK)
 80116e0:	f001 fc64 	bl	8012fac <SDMMC_ConfigData>
 80116e4:	2800      	cmp	r0, #0
 80116e6:	d14a      	bne.n	801177e <SD_UltraHighSpeed+0x106>
    errorstate = SDMMC_CmdSwitch(hsd->Instance, SDMMC_SDR104_SWITCH_PATTERN);
 80116e8:	4930      	ldr	r1, [pc, #192]	; (80117ac <SD_UltraHighSpeed+0x134>)
 80116ea:	6820      	ldr	r0, [r4, #0]
 80116ec:	f002 fdfc 	bl	80142e8 <SDMMC_CmdSwitch>
    if(errorstate != HAL_SD_ERROR_NONE)
 80116f0:	4605      	mov	r5, r0
 80116f2:	2800      	cmp	r0, #0
 80116f4:	d1d1      	bne.n	801169a <SD_UltraHighSpeed+0x22>
  uint32_t count, loop = 0 ;
 80116f6:	4681      	mov	r9, r0
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 80116f8:	f240 5a2a 	movw	sl, #1322	; 0x52a
 80116fc:	e004      	b.n	8011708 <SD_UltraHighSpeed+0x90>
      if((HAL_GetTick()-Timeout) >=  SDMMC_DATATIMEOUT)
 80116fe:	f7f9 fd75 	bl	800b1ec <HAL_GetTick>
 8011702:	1b80      	subs	r0, r0, r6
 8011704:	3001      	adds	r0, #1
 8011706:	d03d      	beq.n	8011784 <SD_UltraHighSpeed+0x10c>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 8011708:	6820      	ldr	r0, [r4, #0]
 801170a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 801170c:	ea12 0f0a 	tst.w	r2, sl
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8011710:	6b42      	ldr	r2, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 8011712:	d112      	bne.n	801173a <SD_UltraHighSpeed+0xc2>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8011714:	0417      	lsls	r7, r2, #16
 8011716:	d5f2      	bpl.n	80116fe <SD_UltraHighSpeed+0x86>
 8011718:	ab06      	add	r3, sp, #24
 801171a:	eb03 1749 	add.w	r7, r3, r9, lsl #5
 801171e:	ab0e      	add	r3, sp, #56	; 0x38
 8011720:	eb03 1849 	add.w	r8, r3, r9, lsl #5
 8011724:	e000      	b.n	8011728 <SD_UltraHighSpeed+0xb0>
 8011726:	6820      	ldr	r0, [r4, #0]
          SD_hs[(8U*loop)+count]  = SDMMC_ReadFIFO(hsd->Instance);
 8011728:	f001 fc1e 	bl	8012f68 <SDMMC_ReadFIFO>
 801172c:	f847 0b04 	str.w	r0, [r7], #4
        for (count = 0U; count < 8U; count++)
 8011730:	4547      	cmp	r7, r8
 8011732:	d1f8      	bne.n	8011726 <SD_UltraHighSpeed+0xae>
        loop ++;
 8011734:	f109 0901 	add.w	r9, r9, #1
 8011738:	e7e1      	b.n	80116fe <SD_UltraHighSpeed+0x86>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 801173a:	0716      	lsls	r6, r2, #28
 801173c:	d429      	bmi.n	8011792 <SD_UltraHighSpeed+0x11a>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 801173e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8011740:	0791      	lsls	r1, r2, #30
 8011742:	d42c      	bmi.n	801179e <SD_UltraHighSpeed+0x126>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8011744:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8011746:	0692      	lsls	r2, r2, #26
 8011748:	d42c      	bmi.n	80117a4 <SD_UltraHighSpeed+0x12c>
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 801174a:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 801174e:	4918      	ldr	r1, [pc, #96]	; (80117b0 <SD_UltraHighSpeed+0x138>)
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 8011750:	0793      	lsls	r3, r2, #30
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8011752:	6381      	str	r1, [r0, #56]	; 0x38
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 8011754:	d520      	bpl.n	8011798 <SD_UltraHighSpeed+0x120>
      HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8011756:	2001      	movs	r0, #1
 8011758:	f7f9 fce4 	bl	800b124 <HAL_SD_DriveTransceiver_1_8V_Callback>
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_1);
 801175c:	6822      	ldr	r2, [r4, #0]
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 801175e:	4815      	ldr	r0, [pc, #84]	; (80117b4 <SD_UltraHighSpeed+0x13c>)
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_1);
 8011760:	6853      	ldr	r3, [r2, #4]
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 8011762:	4c15      	ldr	r4, [pc, #84]	; (80117b8 <SD_UltraHighSpeed+0x140>)
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_1);
 8011764:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 8011768:	4914      	ldr	r1, [pc, #80]	; (80117bc <SD_UltraHighSpeed+0x144>)
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_1);
 801176a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 801176e:	42a2      	cmp	r2, r4
 8011770:	bf18      	it	ne
 8011772:	4608      	movne	r0, r1
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_1);
 8011774:	6053      	str	r3, [r2, #4]
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 8011776:	f001 fb91 	bl	8012e9c <DelayBlock_Enable>
 801177a:	2800      	cmp	r0, #0
 801177c:	d08c      	beq.n	8011698 <SD_UltraHighSpeed+0x20>
      return (HAL_SD_ERROR_GENERAL_UNKNOWN_ERR);
 801177e:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8011782:	e78a      	b.n	801169a <SD_UltraHighSpeed+0x22>
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8011784:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
        hsd->State= HAL_SD_STATE_READY;
 8011788:	2301      	movs	r3, #1
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 801178a:	63a5      	str	r5, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 801178c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_SD_ERROR_TIMEOUT;
 8011790:	e783      	b.n	801169a <SD_UltraHighSpeed+0x22>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8011792:	2208      	movs	r2, #8
 8011794:	6382      	str	r2, [r0, #56]	; 0x38
      return errorstate;
 8011796:	e780      	b.n	801169a <SD_UltraHighSpeed+0x22>
      errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8011798:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 801179c:	e77d      	b.n	801169a <SD_UltraHighSpeed+0x22>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 801179e:	2502      	movs	r5, #2
 80117a0:	6385      	str	r5, [r0, #56]	; 0x38
      return errorstate;
 80117a2:	e77a      	b.n	801169a <SD_UltraHighSpeed+0x22>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80117a4:	2520      	movs	r5, #32
 80117a6:	6385      	str	r5, [r0, #56]	; 0x38
      return errorstate;
 80117a8:	e777      	b.n	801169a <SD_UltraHighSpeed+0x22>
 80117aa:	bf00      	nop
 80117ac:	80ff1f03 	.word	0x80ff1f03
 80117b0:	18000f3a 	.word	0x18000f3a
 80117b4:	52008000 	.word	0x52008000
 80117b8:	52007000 	.word	0x52007000
 80117bc:	48022800 	.word	0x48022800

080117c0 <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80117c0:	6e02      	ldr	r2, [r0, #96]	; 0x60
{
 80117c2:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80117c4:	0f90      	lsrs	r0, r2, #30
{
 80117c6:	b5f0      	push	{r4, r5, r6, r7, lr}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80117c8:	7008      	strb	r0, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80117ca:	f3c2 6783 	ubfx	r7, r2, #26, #4
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80117ce:	f3c2 6601 	ubfx	r6, r2, #24, #2
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80117d2:	f3c2 4507 	ubfx	r5, r2, #16, #8
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80117d6:	f3c2 2007 	ubfx	r0, r2, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80117da:	b2d2      	uxtb	r2, r2
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80117dc:	704f      	strb	r7, [r1, #1]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 80117de:	2400      	movs	r4, #0
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80117e0:	708e      	strb	r6, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80117e2:	70cd      	strb	r5, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80117e4:	7108      	strb	r0, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80117e6:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80117e8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80117ea:	0d15      	lsrs	r5, r2, #20
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80117ec:	f3c2 4003 	ubfx	r0, r2, #16, #4
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80117f0:	f3c2 37c0 	ubfx	r7, r2, #15, #1
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80117f4:	f3c2 3680 	ubfx	r6, r2, #14, #1
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80117f8:	80cd      	strh	r5, [r1, #6]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80117fa:	f3c2 3540 	ubfx	r5, r2, #13, #1
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80117fe:	7208      	strb	r0, [r1, #8]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8011800:	f3c2 3000 	ubfx	r0, r2, #12, #1
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8011804:	724f      	strb	r7, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8011806:	728e      	strb	r6, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8011808:	72cd      	strb	r5, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 801180a:	7308      	strb	r0, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 801180c:	734c      	strb	r4, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 801180e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8011810:	2800      	cmp	r0, #0
 8011812:	d16e      	bne.n	80118f2 <HAL_SD_GetCardCSD+0x132>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8011814:	f640 74fc 	movw	r4, #4092	; 0xffc
 8011818:	6e98      	ldr	r0, [r3, #104]	; 0x68
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 801181a:	2501      	movs	r5, #1
    hsd->SdCard.LogBlockSize = 512U;
 801181c:	f44f 7600 	mov.w	r6, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8011820:	ea04 0282 	and.w	r2, r4, r2, lsl #2
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8011824:	f3c0 6ec2 	ubfx	lr, r0, #27, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8011828:	f3c0 4482 	ubfx	r4, r0, #18, #3
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 801182c:	f3c0 6c02 	ubfx	ip, r0, #24, #3
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8011830:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8011834:	f3c0 5742 	ubfx	r7, r0, #21, #3
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8011838:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 801183a:	f3c0 32c2 	ubfx	r2, r0, #15, #3
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 801183e:	f881 e014 	strb.w	lr, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8011842:	f881 c015 	strb.w	ip, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8011846:	758f      	strb	r7, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8011848:	75cc      	strb	r4, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 801184a:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 801184c:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 801184e:	7e0c      	ldrb	r4, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8011850:	442a      	add	r2, r5
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8011852:	f004 0407 	and.w	r4, r4, #7
 8011856:	3402      	adds	r4, #2
 8011858:	40a2      	lsls	r2, r4
 801185a:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 801185c:	7a0c      	ldrb	r4, [r1, #8]
    hsd->SdCard.LogBlockSize = 512U;
 801185e:	659e      	str	r6, [r3, #88]	; 0x58
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8011860:	f004 040f 	and.w	r4, r4, #15
 8011864:	40a5      	lsls	r5, r4
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8011866:	0a6c      	lsrs	r4, r5, #9
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8011868:	651d      	str	r5, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 801186a:	fb02 f204 	mul.w	r2, r2, r4
 801186e:	655a      	str	r2, [r3, #84]	; 0x54
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8011870:	f3c0 3580 	ubfx	r5, r0, #14, #1
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8011874:	f3c0 16c6 	ubfx	r6, r0, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8011878:	f000 027f 	and.w	r2, r0, #127	; 0x7f
  pCSD->Reserved3 = 0;
 801187c:	2400      	movs	r4, #0
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 801187e:	764d      	strb	r5, [r1, #25]
  pCSD->Reserved4 = 1;
 8011880:	2501      	movs	r5, #1
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8011882:	768e      	strb	r6, [r1, #26]
  return HAL_OK;
 8011884:	4620      	mov	r0, r4
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8011886:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8011888:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801188a:	0fdf      	lsrs	r7, r3, #31
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 801188c:	f3c3 7241 	ubfx	r2, r3, #29, #2
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8011890:	f3c3 6682 	ubfx	r6, r3, #26, #3
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8011894:	f3c3 3cc0 	ubfx	ip, r3, #15, #1
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8011898:	770f      	strb	r7, [r1, #28]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 801189a:	f3c3 5783 	ubfx	r7, r3, #22, #4
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 801189e:	774a      	strb	r2, [r1, #29]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80118a0:	f3c3 5240 	ubfx	r2, r3, #21, #1
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80118a4:	778e      	strb	r6, [r1, #30]
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80118a6:	f3c3 4600 	ubfx	r6, r3, #16, #1
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80118aa:	77cf      	strb	r7, [r1, #31]
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80118ac:	f3c3 3740 	ubfx	r7, r3, #13, #1
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80118b0:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80118b4:	f3c3 3280 	ubfx	r2, r3, #14, #1
  pCSD->Reserved3 = 0;
 80118b8:	f881 4021 	strb.w	r4, [r1, #33]	; 0x21
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80118bc:	f3c3 2481 	ubfx	r4, r3, #10, #2
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80118c0:	f881 6022 	strb.w	r6, [r1, #34]	; 0x22
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80118c4:	f3c3 3600 	ubfx	r6, r3, #12, #1
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80118c8:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80118cc:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80118d0:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80118d4:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80118d8:	f881 7025 	strb.w	r7, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80118dc:	f881 6026 	strb.w	r6, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80118e0:	f881 4027 	strb.w	r4, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80118e4:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80118e8:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 80118ec:	f881 502a 	strb.w	r5, [r1, #42]	; 0x2a
}
 80118f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80118f2:	2801      	cmp	r0, #1
 80118f4:	d110      	bne.n	8011918 <HAL_SD_GetCardCSD+0x158>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80118f6:	0412      	lsls	r2, r2, #16
 80118f8:	6e98      	ldr	r0, [r3, #104]	; 0x68
    hsd->SdCard.BlockSize = 512U;
 80118fa:	f44f 7400 	mov.w	r4, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80118fe:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 8011902:	ea42 4210 	orr.w	r2, r2, r0, lsr #16
 8011906:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8011908:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockSize = 512U;
 801190a:	651c      	str	r4, [r3, #80]	; 0x50
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 801190c:	3201      	adds	r2, #1
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 801190e:	659c      	str	r4, [r3, #88]	; 0x58
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8011910:	0292      	lsls	r2, r2, #10
 8011912:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8011914:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8011916:	e7ab      	b.n	8011870 <HAL_SD_GetCardCSD+0xb0>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011918:	681a      	ldr	r2, [r3, #0]
    hsd->State = HAL_SD_STATE_READY;
 801191a:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801191c:	4c04      	ldr	r4, [pc, #16]	; (8011930 <HAL_SD_GetCardCSD+0x170>)
    return HAL_ERROR;
 801191e:	4608      	mov	r0, r1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011920:	6394      	str	r4, [r2, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8011922:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011924:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8011928:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 801192a:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
}
 801192e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011930:	1fe00fff 	.word	0x1fe00fff

08011934 <HAL_SD_InitCard>:
{
 8011934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8011938:	2200      	movs	r2, #0
 801193a:	2300      	movs	r3, #0
{
 801193c:	b098      	sub	sp, #96	; 0x60
 801193e:	4604      	mov	r4, r0
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8011940:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8011944:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011948:	e9cd 2308 	strd	r2, r3, [sp, #32]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 801194c:	f7ff f9d8 	bl	8010d00 <HAL_RCCEx_GetPeriphCLKFreq>
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 8011950:	4ab0      	ldr	r2, [pc, #704]	; (8011c14 <HAL_SD_InitCard+0x2e0>)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8011952:	69a3      	ldr	r3, [r4, #24]
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 8011954:	0a05      	lsrs	r5, r0, #8
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8011956:	4606      	mov	r6, r0
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8011958:	6827      	ldr	r7, [r4, #0]
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 801195a:	fba2 2505 	umull	r2, r5, r2, r5
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 801195e:	2b02      	cmp	r3, #2
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 8011960:	ea4f 1515 	mov.w	r5, r5, lsr #4
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8011964:	d103      	bne.n	801196e <HAL_SD_InitCard+0x3a>
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8011966:	683b      	ldr	r3, [r7, #0]
 8011968:	f043 0310 	orr.w	r3, r3, #16
 801196c:	603b      	str	r3, [r7, #0]
  (void)SDMMC_Init(hsd->Instance, Init);
 801196e:	aa09      	add	r2, sp, #36	; 0x24
 8011970:	950a      	str	r5, [sp, #40]	; 0x28
 8011972:	ab06      	add	r3, sp, #24
 8011974:	ca07      	ldmia	r2, {r0, r1, r2}
 8011976:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801197a:	4638      	mov	r0, r7
 801197c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801197e:	f001 fad9 	bl	8012f34 <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8011982:	6820      	ldr	r0, [r4, #0]
 8011984:	f001 fafa 	bl	8012f7c <SDMMC_PowerState_ON>
  if(sdmmc_clk != 0U)
 8011988:	ebb6 0f45 	cmp.w	r6, r5, lsl #1
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 801198c:	ea4f 0045 	mov.w	r0, r5, lsl #1
  if(sdmmc_clk != 0U)
 8011990:	d31b      	bcc.n	80119ca <HAL_SD_InitCard+0x96>
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8011992:	4ba1      	ldr	r3, [pc, #644]	; (8011c18 <HAL_SD_InitCard+0x2e4>)
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8011994:	fbb6 f0f0 	udiv	r0, r6, r0
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8011998:	fbb3 f0f0 	udiv	r0, r3, r0
 801199c:	3001      	adds	r0, #1
 801199e:	f7f9 fc2b 	bl	800b1f8 <HAL_Delay>
  __IO uint32_t count = 0U;
 80119a2:	2300      	movs	r3, #0
 80119a4:	9305      	str	r3, [sp, #20]
  uint32_t tickstart = HAL_GetTick();
 80119a6:	f7f9 fc21 	bl	800b1ec <HAL_GetTick>
 80119aa:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80119ac:	6820      	ldr	r0, [r4, #0]
 80119ae:	f001 fff5 	bl	801399c <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 80119b2:	4605      	mov	r5, r0
 80119b4:	b168      	cbz	r0, 80119d2 <HAL_SD_InitCard+0x9e>
    hsd->State = HAL_SD_STATE_READY;
 80119b6:	2601      	movs	r6, #1
 80119b8:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80119bc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80119be:	4328      	orrs	r0, r5
 80119c0:	63a0      	str	r0, [r4, #56]	; 0x38
}
 80119c2:	4630      	mov	r0, r6
 80119c4:	b018      	add	sp, #96	; 0x60
 80119c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    HAL_Delay(2U);
 80119ca:	2002      	movs	r0, #2
 80119cc:	f7f9 fc14 	bl	800b1f8 <HAL_Delay>
 80119d0:	e7e7      	b.n	80119a2 <HAL_SD_InitCard+0x6e>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80119d2:	6820      	ldr	r0, [r4, #0]
 80119d4:	f002 f80e 	bl	80139f4 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 80119d8:	2800      	cmp	r0, #0
 80119da:	f040 80c2 	bne.w	8011b62 <HAL_SD_InitCard+0x22e>
    hsd->SdCard.CardVersion = CARD_V2_X;
 80119de:	2301      	movs	r3, #1
 80119e0:	6423      	str	r3, [r4, #64]	; 0x40
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80119e2:	2100      	movs	r1, #0
 80119e4:	6820      	ldr	r0, [r4, #0]
 80119e6:	f002 f843 	bl	8013a70 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80119ea:	bb10      	cbnz	r0, 8011a32 <HAL_SD_InitCard+0xfe>
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80119ec:	9b05      	ldr	r3, [sp, #20]
 80119ee:	f64f 77fe 	movw	r7, #65534	; 0xfffe
 80119f2:	42bb      	cmp	r3, r7
 80119f4:	f200 80c5 	bhi.w	8011b82 <HAL_SD_InitCard+0x24e>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80119f8:	f8df 8224 	ldr.w	r8, [pc, #548]	; 8011c20 <HAL_SD_InitCard+0x2ec>
 80119fc:	e00b      	b.n	8011a16 <HAL_SD_InitCard+0xe2>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80119fe:	6820      	ldr	r0, [r4, #0]
 8011a00:	f001 fad0 	bl	8012fa4 <SDMMC_GetResponse>
    count++;
 8011a04:	9b05      	ldr	r3, [sp, #20]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8011a06:	2800      	cmp	r0, #0
    count++;
 8011a08:	f103 0301 	add.w	r3, r3, #1
 8011a0c:	9305      	str	r3, [sp, #20]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8011a0e:	9b05      	ldr	r3, [sp, #20]
 8011a10:	db12      	blt.n	8011a38 <HAL_SD_InitCard+0x104>
 8011a12:	42bb      	cmp	r3, r7
 8011a14:	d810      	bhi.n	8011a38 <HAL_SD_InitCard+0x104>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8011a16:	2100      	movs	r1, #0
 8011a18:	6820      	ldr	r0, [r4, #0]
 8011a1a:	f002 f829 	bl	8013a70 <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8011a1e:	4641      	mov	r1, r8
    if(errorstate != HAL_SD_ERROR_NONE)
 8011a20:	4605      	mov	r5, r0
 8011a22:	2800      	cmp	r0, #0
 8011a24:	d1c7      	bne.n	80119b6 <HAL_SD_InitCard+0x82>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8011a26:	6820      	ldr	r0, [r4, #0]
 8011a28:	f002 f8c6 	bl	8013bb8 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8011a2c:	4601      	mov	r1, r0
 8011a2e:	2800      	cmp	r0, #0
 8011a30:	d0e5      	beq.n	80119fe <HAL_SD_InitCard+0xca>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8011a32:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8011a36:	e7be      	b.n	80119b6 <HAL_SD_InitCard+0x82>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8011a38:	9a05      	ldr	r2, [sp, #20]
 8011a3a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8011a3e:	429a      	cmp	r2, r3
 8011a40:	f200 80a3 	bhi.w	8011b8a <HAL_SD_InitCard+0x256>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8011a44:	0045      	lsls	r5, r0, #1
 8011a46:	d505      	bpl.n	8011a54 <HAL_SD_InitCard+0x120>
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8011a48:	69a3      	ldr	r3, [r4, #24]
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8011a4a:	2201      	movs	r2, #1
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8011a4c:	2b02      	cmp	r3, #2
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8011a4e:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8011a50:	f000 809e 	beq.w	8011b90 <HAL_SD_InitCard+0x25c>
 8011a54:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1U;
 8011a56:	2301      	movs	r3, #1
 8011a58:	f8ad 3012 	strh.w	r3, [sp, #18]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8011a5c:	f001 fa9e 	bl	8012f9c <SDMMC_GetPowerState>
 8011a60:	b348      	cbz	r0, 8011ab6 <HAL_SD_InitCard+0x182>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8011a62:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011a64:	2b03      	cmp	r3, #3
 8011a66:	d132      	bne.n	8011ace <HAL_SD_InitCard+0x19a>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8011a68:	2104      	movs	r1, #4
 8011a6a:	6820      	ldr	r0, [r4, #0]
 8011a6c:	f001 fa9a 	bl	8012fa4 <SDMMC_GetResponse>
 8011a70:	4603      	mov	r3, r0
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8011a72:	a90d      	add	r1, sp, #52	; 0x34
 8011a74:	4620      	mov	r0, r4
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8011a76:	0d1b      	lsrs	r3, r3, #20
 8011a78:	6463      	str	r3, [r4, #68]	; 0x44
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8011a7a:	f7ff fea1 	bl	80117c0 <HAL_SD_GetCardCSD>
 8011a7e:	4606      	mov	r6, r0
 8011a80:	2800      	cmp	r0, #0
 8011a82:	d17b      	bne.n	8011b7c <HAL_SD_InitCard+0x248>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8011a84:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8011a86:	4603      	mov	r3, r0
 8011a88:	6820      	ldr	r0, [r4, #0]
 8011a8a:	0412      	lsls	r2, r2, #16
 8011a8c:	f001 fee2 	bl	8013854 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8011a90:	b998      	cbnz	r0, 8011aba <HAL_SD_InitCard+0x186>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8011a92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011a96:	6820      	ldr	r0, [r4, #0]
 8011a98:	f001 fa9e 	bl	8012fd8 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8011a9c:	2800      	cmp	r0, #0
 8011a9e:	d090      	beq.n	80119c2 <HAL_SD_InitCard+0x8e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011aa0:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 8011aa2:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011aa4:	495d      	ldr	r1, [pc, #372]	; (8011c1c <HAL_SD_InitCard+0x2e8>)
    return HAL_ERROR;
 8011aa6:	4616      	mov	r6, r2
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011aa8:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8011aaa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011aac:	4318      	orrs	r0, r3
 8011aae:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8011ab0:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_ERROR;
 8011ab4:	e785      	b.n	80119c2 <HAL_SD_InitCard+0x8e>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8011ab6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    hsd->State = HAL_SD_STATE_READY;
 8011aba:	2601      	movs	r6, #1
 8011abc:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8011ac0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011ac2:	4308      	orrs	r0, r1
 8011ac4:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8011ac6:	4630      	mov	r0, r6
 8011ac8:	b018      	add	sp, #96	; 0x60
 8011aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8011ace:	6820      	ldr	r0, [r4, #0]
 8011ad0:	f002 f9f4 	bl	8013ebc <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8011ad4:	2800      	cmp	r0, #0
 8011ad6:	d1f0      	bne.n	8011aba <HAL_SD_InitCard+0x186>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8011ad8:	4601      	mov	r1, r0
 8011ada:	6820      	ldr	r0, [r4, #0]
 8011adc:	f001 fa62 	bl	8012fa4 <SDMMC_GetResponse>
 8011ae0:	4603      	mov	r3, r0
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8011ae2:	2104      	movs	r1, #4
 8011ae4:	6820      	ldr	r0, [r4, #0]
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8011ae6:	6723      	str	r3, [r4, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8011ae8:	f001 fa5c 	bl	8012fa4 <SDMMC_GetResponse>
 8011aec:	4603      	mov	r3, r0
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8011aee:	2108      	movs	r1, #8
 8011af0:	6820      	ldr	r0, [r4, #0]
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8011af2:	6763      	str	r3, [r4, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8011af4:	f001 fa56 	bl	8012fa4 <SDMMC_GetResponse>
 8011af8:	4603      	mov	r3, r0
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8011afa:	210c      	movs	r1, #12
 8011afc:	6820      	ldr	r0, [r4, #0]
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8011afe:	67a3      	str	r3, [r4, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8011b00:	f001 fa50 	bl	8012fa4 <SDMMC_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8011b04:	6be3      	ldr	r3, [r4, #60]	; 0x3c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8011b06:	67e0      	str	r0, [r4, #124]	; 0x7c
  if(hsd->SdCard.CardType != CARD_SECURED)
 8011b08:	2b03      	cmp	r3, #3
 8011b0a:	d0ad      	beq.n	8011a68 <HAL_SD_InitCard+0x134>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8011b0c:	f10d 0112 	add.w	r1, sp, #18
 8011b10:	6820      	ldr	r0, [r4, #0]
 8011b12:	f002 fa49 	bl	8013fa8 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8011b16:	2800      	cmp	r0, #0
 8011b18:	d1cf      	bne.n	8011aba <HAL_SD_InitCard+0x186>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8011b1a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011b1c:	2b03      	cmp	r3, #3
 8011b1e:	d0a3      	beq.n	8011a68 <HAL_SD_InitCard+0x134>
    hsd->SdCard.RelCardAdd = sd_rca;
 8011b20:	f8bd 1012 	ldrh.w	r1, [sp, #18]
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8011b24:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.RelCardAdd = sd_rca;
 8011b26:	64a1      	str	r1, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8011b28:	0409      	lsls	r1, r1, #16
 8011b2a:	f002 fa03 	bl	8013f34 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8011b2e:	2800      	cmp	r0, #0
 8011b30:	d1c3      	bne.n	8011aba <HAL_SD_InitCard+0x186>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8011b32:	4601      	mov	r1, r0
 8011b34:	6820      	ldr	r0, [r4, #0]
 8011b36:	f001 fa35 	bl	8012fa4 <SDMMC_GetResponse>
 8011b3a:	4603      	mov	r3, r0
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8011b3c:	2104      	movs	r1, #4
 8011b3e:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8011b40:	6623      	str	r3, [r4, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8011b42:	f001 fa2f 	bl	8012fa4 <SDMMC_GetResponse>
 8011b46:	4603      	mov	r3, r0
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8011b48:	2108      	movs	r1, #8
 8011b4a:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8011b4c:	6663      	str	r3, [r4, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8011b4e:	f001 fa29 	bl	8012fa4 <SDMMC_GetResponse>
 8011b52:	4603      	mov	r3, r0
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8011b54:	210c      	movs	r1, #12
 8011b56:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8011b58:	66a3      	str	r3, [r4, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8011b5a:	f001 fa23 	bl	8012fa4 <SDMMC_GetResponse>
 8011b5e:	66e0      	str	r0, [r4, #108]	; 0x6c
 8011b60:	e782      	b.n	8011a68 <HAL_SD_InitCard+0x134>
    hsd->SdCard.CardVersion = CARD_V1_X;
 8011b62:	6425      	str	r5, [r4, #64]	; 0x40
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8011b64:	6820      	ldr	r0, [r4, #0]
 8011b66:	f001 ff19 	bl	801399c <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8011b6a:	4605      	mov	r5, r0
 8011b6c:	2800      	cmp	r0, #0
 8011b6e:	f47f af22 	bne.w	80119b6 <HAL_SD_InitCard+0x82>
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8011b72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011b74:	2b01      	cmp	r3, #1
 8011b76:	f47f af39 	bne.w	80119ec <HAL_SD_InitCard+0xb8>
 8011b7a:	e732      	b.n	80119e2 <HAL_SD_InitCard+0xae>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8011b7c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8011b80:	e79b      	b.n	8011aba <HAL_SD_InitCard+0x186>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8011b82:	9b05      	ldr	r3, [sp, #20]
 8011b84:	42bb      	cmp	r3, r7
 8011b86:	f67f af65 	bls.w	8011a54 <HAL_SD_InitCard+0x120>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8011b8a:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 8011b8e:	e712      	b.n	80119b6 <HAL_SD_InitCard+0x82>
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8011b90:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8011b94:	6820      	ldr	r0, [r4, #0]
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8011b96:	f43f af5e 	beq.w	8011a56 <HAL_SD_InitCard+0x122>
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8011b9a:	6803      	ldr	r3, [r0, #0]
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8011b9c:	f44f 7200 	mov.w	r2, #512	; 0x200
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8011ba0:	f043 0308 	orr.w	r3, r3, #8
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8011ba4:	65e2      	str	r2, [r4, #92]	; 0x5c
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8011ba6:	6003      	str	r3, [r0, #0]
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8011ba8:	f002 fc42 	bl	8014430 <SDMMC_CmdVoltageSwitch>
        if(errorstate != HAL_SD_ERROR_NONE)
 8011bac:	4605      	mov	r5, r0
 8011bae:	b128      	cbz	r0, 8011bbc <HAL_SD_InitCard+0x288>
 8011bb0:	e701      	b.n	80119b6 <HAL_SD_InitCard+0x82>
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8011bb2:	f7f9 fb1b 	bl	800b1ec <HAL_GetTick>
 8011bb6:	1b80      	subs	r0, r0, r6
 8011bb8:	3001      	adds	r0, #1
 8011bba:	d028      	beq.n	8011c0e <HAL_SD_InitCard+0x2da>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8011bbc:	6823      	ldr	r3, [r4, #0]
 8011bbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011bc0:	0150      	lsls	r0, r2, #5
 8011bc2:	d5f6      	bpl.n	8011bb2 <HAL_SD_InitCard+0x27e>
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8011bc4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8011bc8:	639a      	str	r2, [r3, #56]	; 0x38
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8011bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011bcc:	02d9      	lsls	r1, r3, #11
 8011bce:	f57f af30 	bpl.w	8011a32 <HAL_SD_InitCard+0xfe>
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8011bd2:	2001      	movs	r0, #1
 8011bd4:	f7f9 faa6 	bl	800b124 <HAL_SD_DriveTransceiver_1_8V_Callback>
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8011bd8:	6820      	ldr	r0, [r4, #0]
 8011bda:	6803      	ldr	r3, [r0, #0]
 8011bdc:	f043 0304 	orr.w	r3, r3, #4
 8011be0:	6003      	str	r3, [r0, #0]
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8011be2:	e005      	b.n	8011bf0 <HAL_SD_InitCard+0x2bc>
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8011be4:	f7f9 fb02 	bl	800b1ec <HAL_GetTick>
 8011be8:	1b80      	subs	r0, r0, r6
 8011bea:	3001      	adds	r0, #1
 8011bec:	d00f      	beq.n	8011c0e <HAL_SD_InitCard+0x2da>
 8011bee:	6820      	ldr	r0, [r4, #0]
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8011bf0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011bf2:	019a      	lsls	r2, r3, #6
 8011bf4:	d5f6      	bpl.n	8011be4 <HAL_SD_InitCard+0x2b0>
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8011bf6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011bfa:	6383      	str	r3, [r0, #56]	; 0x38
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8011bfc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011bfe:	02db      	lsls	r3, r3, #11
 8011c00:	d4c3      	bmi.n	8011b8a <HAL_SD_InitCard+0x256>
          hsd->Instance->POWER = 0x13U;
 8011c02:	2213      	movs	r2, #19
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8011c04:	f04f 33ff 	mov.w	r3, #4294967295
          hsd->Instance->POWER = 0x13U;
 8011c08:	6002      	str	r2, [r0, #0]
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8011c0a:	6383      	str	r3, [r0, #56]	; 0x38
  if(errorstate != HAL_SD_ERROR_NONE)
 8011c0c:	e723      	b.n	8011a56 <HAL_SD_InitCard+0x122>
            return HAL_SD_ERROR_TIMEOUT;
 8011c0e:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8011c12:	e6d0      	b.n	80119b6 <HAL_SD_InitCard+0x82>
 8011c14:	014f8b59 	.word	0x014f8b59
 8011c18:	00012110 	.word	0x00012110
 8011c1c:	1fe00fff 	.word	0x1fe00fff
 8011c20:	c1100000 	.word	0xc1100000

08011c24 <HAL_SD_GetCardStatus>:
{
 8011c24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011c28:	4604      	mov	r4, r0
 8011c2a:	b097      	sub	sp, #92	; 0x5c
 8011c2c:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8011c2e:	f7f9 fadd 	bl	800b1ec <HAL_GetTick>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8011c32:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
 8011c34:	4606      	mov	r6, r0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8011c36:	6820      	ldr	r0, [r4, #0]
 8011c38:	f001 f9b4 	bl	8012fa4 <SDMMC_GetResponse>
 8011c3c:	0182      	lsls	r2, r0, #6
 8011c3e:	d45b      	bmi.n	8011cf8 <HAL_SD_GetCardStatus+0xd4>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8011c40:	2140      	movs	r1, #64	; 0x40
 8011c42:	6820      	ldr	r0, [r4, #0]
 8011c44:	f001 f9c8 	bl	8012fd8 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8011c48:	4603      	mov	r3, r0
 8011c4a:	b1e0      	cbz	r0, 8011c86 <HAL_SD_GetCardStatus+0x62>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8011c4c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8011c4e:	63a2      	str	r2, [r4, #56]	; 0x38
  if(errorstate != HAL_SD_ERROR_NONE)
 8011c50:	6820      	ldr	r0, [r4, #0]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011c52:	4a5a      	ldr	r2, [pc, #360]	; (8011dbc <HAL_SD_GetCardStatus+0x198>)
    hsd->State = HAL_SD_STATE_READY;
 8011c54:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011c56:	6382      	str	r2, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8011c58:	460e      	mov	r6, r1
    hsd->ErrorCode |= errorstate;
 8011c5a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8011c5c:	4313      	orrs	r3, r2
 8011c5e:	63a3      	str	r3, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8011c60:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8011c64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011c68:	f001 f9b6 	bl	8012fd8 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8011c6c:	b138      	cbz	r0, 8011c7e <HAL_SD_GetCardStatus+0x5a>
    hsd->State = HAL_SD_STATE_READY;
 8011c6e:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011c70:	6822      	ldr	r2, [r4, #0]
 8011c72:	4952      	ldr	r1, [pc, #328]	; (8011dbc <HAL_SD_GetCardStatus+0x198>)
    status = HAL_ERROR;
 8011c74:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011c76:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8011c78:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8011c7a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8011c7e:	4630      	mov	r0, r6
 8011c80:	b017      	add	sp, #92	; 0x5c
 8011c82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8011c86:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011c88:	6820      	ldr	r0, [r4, #0]
 8011c8a:	0409      	lsls	r1, r1, #16
 8011c8c:	f001 fef0 	bl	8013a70 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8011c90:	4603      	mov	r3, r0
 8011c92:	2800      	cmp	r0, #0
 8011c94:	d1da      	bne.n	8011c4c <HAL_SD_GetCardStatus+0x28>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8011c96:	f04f 32ff 	mov.w	r2, #4294967295
 8011c9a:	2340      	movs	r3, #64	; 0x40
 8011c9c:	2060      	movs	r0, #96	; 0x60
 8011c9e:	2102      	movs	r1, #2
 8011ca0:	e9cd 2300 	strd	r2, r3, [sp]
 8011ca4:	2301      	movs	r3, #1
 8011ca6:	2200      	movs	r2, #0
 8011ca8:	e9cd 0102 	strd	r0, r1, [sp, #8]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8011cac:	4669      	mov	r1, sp
 8011cae:	6820      	ldr	r0, [r4, #0]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8011cb0:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8011cb4:	f001 f97a 	bl	8012fac <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8011cb8:	6820      	ldr	r0, [r4, #0]
 8011cba:	f002 fa6f 	bl	801419c <SDMMC_CmdStatusRegister>
  if(errorstate != HAL_SD_ERROR_NONE)
 8011cbe:	4603      	mov	r3, r0
 8011cc0:	2800      	cmp	r0, #0
 8011cc2:	d1c3      	bne.n	8011c4c <HAL_SD_GetCardStatus+0x28>
  uint32_t *pData = pSDstatus;
 8011cc4:	af06      	add	r7, sp, #24
 8011cc6:	e004      	b.n	8011cd2 <HAL_SD_GetCardStatus+0xae>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8011cc8:	f7f9 fa90 	bl	800b1ec <HAL_GetTick>
 8011ccc:	1b80      	subs	r0, r0, r6
 8011cce:	3001      	adds	r0, #1
 8011cd0:	d016      	beq.n	8011d00 <HAL_SD_GetCardStatus+0xdc>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8011cd2:	6820      	ldr	r0, [r4, #0]
 8011cd4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011cd6:	f413 7f95 	tst.w	r3, #298	; 0x12a
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8011cda:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8011cdc:	d113      	bne.n	8011d06 <HAL_SD_GetCardStatus+0xe2>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8011cde:	041b      	lsls	r3, r3, #16
 8011ce0:	d5f2      	bpl.n	8011cc8 <HAL_SD_GetCardStatus+0xa4>
 8011ce2:	f107 0820 	add.w	r8, r7, #32
 8011ce6:	e000      	b.n	8011cea <HAL_SD_GetCardStatus+0xc6>
 8011ce8:	6820      	ldr	r0, [r4, #0]
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8011cea:	f001 f93d 	bl	8012f68 <SDMMC_ReadFIFO>
 8011cee:	f847 0b04 	str.w	r0, [r7], #4
      for(count = 0U; count < 8U; count++)
 8011cf2:	4547      	cmp	r7, r8
 8011cf4:	d1f8      	bne.n	8011ce8 <HAL_SD_GetCardStatus+0xc4>
 8011cf6:	e7e7      	b.n	8011cc8 <HAL_SD_GetCardStatus+0xa4>
  if(errorstate != HAL_SD_ERROR_NONE)
 8011cf8:	6820      	ldr	r0, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8011cfa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011cfe:	e7a8      	b.n	8011c52 <HAL_SD_GetCardStatus+0x2e>
      return HAL_SD_ERROR_TIMEOUT;
 8011d00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011d04:	e7a4      	b.n	8011c50 <HAL_SD_GetCardStatus+0x2c>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8011d06:	0719      	lsls	r1, r3, #28
 8011d08:	d451      	bmi.n	8011dae <HAL_SD_GetCardStatus+0x18a>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8011d0a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011d0c:	079a      	lsls	r2, r3, #30
 8011d0e:	d450      	bmi.n	8011db2 <HAL_SD_GetCardStatus+0x18e>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8011d10:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011d12:	069b      	lsls	r3, r3, #26
 8011d14:	d50a      	bpl.n	8011d2c <HAL_SD_GetCardStatus+0x108>
 8011d16:	e04e      	b.n	8011db6 <HAL_SD_GetCardStatus+0x192>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8011d18:	f001 f926 	bl	8012f68 <SDMMC_ReadFIFO>
 8011d1c:	f847 0b04 	str.w	r0, [r7], #4
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8011d20:	f7f9 fa64 	bl	800b1ec <HAL_GetTick>
 8011d24:	1b80      	subs	r0, r0, r6
 8011d26:	3001      	adds	r0, #1
 8011d28:	d0ea      	beq.n	8011d00 <HAL_SD_GetCardStatus+0xdc>
 8011d2a:	6820      	ldr	r0, [r4, #0]
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8011d2c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011d2e:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 8011d32:	d1f1      	bne.n	8011d18 <HAL_SD_GetCardStatus+0xf4>
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8011d34:	9f06      	ldr	r7, [sp, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8011d36:	461e      	mov	r6, r3
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8011d38:	9908      	ldr	r1, [sp, #32]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8011d3a:	0a3a      	lsrs	r2, r7, #8
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8011d3c:	f3c7 1e40 	ubfx	lr, r7, #5, #1
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8011d40:	f3c7 1881 	ubfx	r8, r7, #6, #2
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8011d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8011d46:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8011d4a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8011d4e:	fa5f f983 	uxtb.w	r9, r3
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8011d52:	ea42 6217 	orr.w	r2, r2, r7, lsr #24
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8011d56:	4f1a      	ldr	r7, [pc, #104]	; (8011dc0 <HAL_SD_GetCardStatus+0x19c>)
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8011d58:	f02c 0cff 	bic.w	ip, ip, #255	; 0xff
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8011d5c:	6387      	str	r7, [r0, #56]	; 0x38
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8011d5e:	b292      	uxth	r2, r2
 8011d60:	9f07      	ldr	r7, [sp, #28]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8011d62:	ea4c 0c09 	orr.w	ip, ip, r9
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8011d66:	f885 8000 	strb.w	r8, [r5]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8011d6a:	ba3f      	rev	r7, r7
 8011d6c:	f885 e001 	strb.w	lr, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8011d70:	806a      	strh	r2, [r5, #2]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8011d72:	fa5f fe81 	uxtb.w	lr, r1
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8011d76:	606f      	str	r7, [r5, #4]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8011d78:	f3c1 5203 	ubfx	r2, r1, #20, #4
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8011d7c:	f3c1 2707 	ubfx	r7, r1, #8, #8
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8011d80:	f885 e008 	strb.w	lr, [r5, #8]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8011d84:	f3c3 1103 	ubfx	r1, r3, #4, #4
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8011d88:	f3c3 2e85 	ubfx	lr, r3, #10, #6
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8011d8c:	726f      	strb	r7, [r5, #9]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8011d8e:	f3c3 2701 	ubfx	r7, r3, #8, #2
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8011d92:	72aa      	strb	r2, [r5, #10]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8011d94:	f003 030f 	and.w	r3, r3, #15
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8011d98:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8011d9c:	f8a5 c00c 	strh.w	ip, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8011da0:	f885 e00e 	strb.w	lr, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8011da4:	73ef      	strb	r7, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8011da6:	7429      	strb	r1, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8011da8:	746b      	strb	r3, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8011daa:	74aa      	strb	r2, [r5, #18]
 8011dac:	e75a      	b.n	8011c64 <HAL_SD_GetCardStatus+0x40>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8011dae:	2308      	movs	r3, #8
 8011db0:	e74f      	b.n	8011c52 <HAL_SD_GetCardStatus+0x2e>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8011db2:	2302      	movs	r3, #2
 8011db4:	e74d      	b.n	8011c52 <HAL_SD_GetCardStatus+0x2e>
    return HAL_SD_ERROR_RX_OVERRUN;
 8011db6:	2320      	movs	r3, #32
 8011db8:	e74b      	b.n	8011c52 <HAL_SD_GetCardStatus+0x2e>
 8011dba:	bf00      	nop
 8011dbc:	1fe00fff 	.word	0x1fe00fff
 8011dc0:	18000f3a 	.word	0x18000f3a

08011dc4 <HAL_SD_GetCardInfo>:
{
 8011dc4:	4603      	mov	r3, r0
}
 8011dc6:	2000      	movs	r0, #0
{
 8011dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8011dca:	e9d3 ec0f 	ldrd	lr, ip, [r3, #60]	; 0x3c
 8011dce:	e9d3 7611 	ldrd	r7, r6, [r3, #68]	; 0x44
 8011dd2:	e9d3 5413 	ldrd	r5, r4, [r3, #76]	; 0x4c
 8011dd6:	e9d3 2315 	ldrd	r2, r3, [r3, #84]	; 0x54
 8011dda:	e9c1 ec00 	strd	lr, ip, [r1]
 8011dde:	e9c1 7602 	strd	r7, r6, [r1, #8]
 8011de2:	e9c1 5404 	strd	r5, r4, [r1, #16]
 8011de6:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8011dea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011dec <HAL_SD_ConfigWideBusOperation>:
  hsd->State = HAL_SD_STATE_BUSY;
 8011dec:	2203      	movs	r2, #3
  if(hsd->SdCard.CardType != CARD_SECURED)
 8011dee:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8011df0:	4293      	cmp	r3, r2
{
 8011df2:	b530      	push	{r4, r5, lr}
 8011df4:	4604      	mov	r4, r0
 8011df6:	b08b      	sub	sp, #44	; 0x2c
 8011df8:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 8011dfa:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 8011dfe:	d025      	beq.n	8011e4c <HAL_SD_ConfigWideBusOperation+0x60>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8011e00:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8011e04:	d022      	beq.n	8011e4c <HAL_SD_ConfigWideBusOperation+0x60>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8011e06:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8011e0a:	d064      	beq.n	8011ed6 <HAL_SD_ConfigWideBusOperation+0xea>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8011e0c:	2900      	cmp	r1, #0
 8011e0e:	d043      	beq.n	8011e98 <HAL_SD_ConfigWideBusOperation+0xac>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8011e10:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8011e12:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011e16:	6383      	str	r3, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8011e18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011e1a:	b9f3      	cbnz	r3, 8011e5a <HAL_SD_ConfigWideBusOperation+0x6e>
    Init.BusWide             = WideMode;
 8011e1c:	9506      	str	r5, [sp, #24]
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 8011e1e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8011e22:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 8011e26:	2b03      	cmp	r3, #3
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8011e28:	9207      	str	r2, [sp, #28]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8011e2a:	e9cd 0104 	strd	r0, r1, [sp, #16]
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 8011e2e:	d92a      	bls.n	8011e86 <HAL_SD_ConfigWideBusOperation+0x9a>
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 8011e30:	9308      	str	r3, [sp, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 8011e32:	aa0a      	add	r2, sp, #40	; 0x28
 8011e34:	ab04      	add	r3, sp, #16
  HAL_StatusTypeDef status = HAL_OK;
 8011e36:	2500      	movs	r5, #0
    (void)SDMMC_Init(hsd->Instance, Init);
 8011e38:	e912 0007 	ldmdb	r2, {r0, r1, r2}
 8011e3c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8011e40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011e42:	6820      	ldr	r0, [r4, #0]
 8011e44:	f001 f876 	bl	8012f34 <SDMMC_Init>
 8011e48:	6820      	ldr	r0, [r4, #0]
 8011e4a:	e00a      	b.n	8011e62 <HAL_SD_ConfigWideBusOperation+0x76>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8011e4c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011e4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011e52:	63a3      	str	r3, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8011e54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d0e0      	beq.n	8011e1c <HAL_SD_ConfigWideBusOperation+0x30>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011e5a:	6820      	ldr	r0, [r4, #0]
    status = HAL_ERROR;
 8011e5c:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011e5e:	4b35      	ldr	r3, [pc, #212]	; (8011f34 <HAL_SD_ConfigWideBusOperation+0x148>)
 8011e60:	6383      	str	r3, [r0, #56]	; 0x38
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8011e62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011e66:	f001 f8b7 	bl	8012fd8 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8011e6a:	b130      	cbz	r0, 8011e7a <HAL_SD_ConfigWideBusOperation+0x8e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011e6c:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 8011e6e:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011e70:	4a30      	ldr	r2, [pc, #192]	; (8011f34 <HAL_SD_ConfigWideBusOperation+0x148>)
 8011e72:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8011e74:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011e76:	4318      	orrs	r0, r3
 8011e78:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 8011e7a:	2301      	movs	r3, #1
}
 8011e7c:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 8011e7e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8011e82:	b00b      	add	sp, #44	; 0x2c
 8011e84:	bd30      	pop	{r4, r5, pc}
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8011e86:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8011e88:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8011e8c:	d0d0      	beq.n	8011e30 <HAL_SD_ConfigWideBusOperation+0x44>
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8011e8e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8011e92:	d040      	beq.n	8011f16 <HAL_SD_ConfigWideBusOperation+0x12a>
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 8011e94:	2304      	movs	r3, #4
 8011e96:	e7cb      	b.n	8011e30 <HAL_SD_ConfigWideBusOperation+0x44>
  uint32_t scr[2U] = {0UL, 0UL};
 8011e98:	2200      	movs	r2, #0
 8011e9a:	2300      	movs	r3, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8011e9c:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 8011e9e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8011ea2:	f001 f87f 	bl	8012fa4 <SDMMC_GetResponse>
 8011ea6:	0182      	lsls	r2, r0, #6
 8011ea8:	d438      	bmi.n	8011f1c <HAL_SD_ConfigWideBusOperation+0x130>
  errorstate = SD_FindSCR(hsd, scr);
 8011eaa:	a904      	add	r1, sp, #16
 8011eac:	4620      	mov	r0, r4
 8011eae:	f7ff f8c7 	bl	8011040 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8011eb2:	b960      	cbnz	r0, 8011ece <HAL_SD_ConfigWideBusOperation+0xe2>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8011eb4:	9b05      	ldr	r3, [sp, #20]
 8011eb6:	03db      	lsls	r3, r3, #15
 8011eb8:	d536      	bpl.n	8011f28 <HAL_SD_ConfigWideBusOperation+0x13c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8011eba:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011ebc:	6820      	ldr	r0, [r4, #0]
 8011ebe:	0409      	lsls	r1, r1, #16
 8011ec0:	f001 fdd6 	bl	8013a70 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8011ec4:	b918      	cbnz	r0, 8011ece <HAL_SD_ConfigWideBusOperation+0xe2>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8011ec6:	4601      	mov	r1, r0
 8011ec8:	6820      	ldr	r0, [r4, #0]
 8011eca:	f001 fead 	bl	8013c28 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8011ece:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011ed0:	4308      	orrs	r0, r1
 8011ed2:	63a0      	str	r0, [r4, #56]	; 0x38
 8011ed4:	e7be      	b.n	8011e54 <HAL_SD_ConfigWideBusOperation+0x68>
  uint32_t scr[2U] = {0UL, 0UL};
 8011ed6:	2200      	movs	r2, #0
 8011ed8:	2300      	movs	r3, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8011eda:	2100      	movs	r1, #0
 8011edc:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 8011ede:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8011ee2:	f001 f85f 	bl	8012fa4 <SDMMC_GetResponse>
 8011ee6:	0180      	lsls	r0, r0, #6
 8011ee8:	d41b      	bmi.n	8011f22 <HAL_SD_ConfigWideBusOperation+0x136>
  errorstate = SD_FindSCR(hsd, scr);
 8011eea:	a904      	add	r1, sp, #16
 8011eec:	4620      	mov	r0, r4
 8011eee:	f7ff f8a7 	bl	8011040 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8011ef2:	b960      	cbnz	r0, 8011f0e <HAL_SD_ConfigWideBusOperation+0x122>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8011ef4:	9b05      	ldr	r3, [sp, #20]
 8011ef6:	0359      	lsls	r1, r3, #13
 8011ef8:	d519      	bpl.n	8011f2e <HAL_SD_ConfigWideBusOperation+0x142>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8011efa:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011efc:	6820      	ldr	r0, [r4, #0]
 8011efe:	0409      	lsls	r1, r1, #16
 8011f00:	f001 fdb6 	bl	8013a70 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8011f04:	b918      	cbnz	r0, 8011f0e <HAL_SD_ConfigWideBusOperation+0x122>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8011f06:	2102      	movs	r1, #2
 8011f08:	6820      	ldr	r0, [r4, #0]
 8011f0a:	f001 fe8d 	bl	8013c28 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8011f0e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011f10:	4318      	orrs	r0, r3
 8011f12:	63a0      	str	r0, [r4, #56]	; 0x38
 8011f14:	e79e      	b.n	8011e54 <HAL_SD_ConfigWideBusOperation+0x68>
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 8011f16:	2302      	movs	r3, #2
 8011f18:	9308      	str	r3, [sp, #32]
 8011f1a:	e78a      	b.n	8011e32 <HAL_SD_ConfigWideBusOperation+0x46>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8011f1c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8011f20:	e7d5      	b.n	8011ece <HAL_SD_ConfigWideBusOperation+0xe2>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8011f22:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8011f26:	e7f2      	b.n	8011f0e <HAL_SD_ConfigWideBusOperation+0x122>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8011f28:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8011f2c:	e7cf      	b.n	8011ece <HAL_SD_ConfigWideBusOperation+0xe2>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8011f2e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8011f32:	e7ec      	b.n	8011f0e <HAL_SD_ConfigWideBusOperation+0x122>
 8011f34:	1fe00fff 	.word	0x1fe00fff

08011f38 <HAL_SD_Init>:
{
 8011f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f3a:	b087      	sub	sp, #28
  if(hsd == NULL)
 8011f3c:	b1a0      	cbz	r0, 8011f68 <HAL_SD_Init+0x30>
  if(hsd->State == HAL_SD_STATE_RESET)
 8011f3e:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8011f42:	4604      	mov	r4, r0
 8011f44:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8011f48:	b93b      	cbnz	r3, 8011f5a <HAL_SD_Init+0x22>
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8011f4a:	6983      	ldr	r3, [r0, #24]
    hsd->Lock = HAL_UNLOCKED;
 8011f4c:	7702      	strb	r2, [r0, #28]
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8011f4e:	b90b      	cbnz	r3, 8011f54 <HAL_SD_Init+0x1c>
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 8011f50:	2302      	movs	r3, #2
 8011f52:	6183      	str	r3, [r0, #24]
    HAL_SD_MspInit(hsd);
 8011f54:	4620      	mov	r0, r4
 8011f56:	f7ff f965 	bl	8011224 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 8011f5a:	2303      	movs	r3, #3
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8011f5c:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_BUSY;
 8011f5e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8011f62:	f7ff fce7 	bl	8011934 <HAL_SD_InitCard>
 8011f66:	b118      	cbz	r0, 8011f70 <HAL_SD_Init+0x38>
    return HAL_ERROR;
 8011f68:	2601      	movs	r6, #1
}
 8011f6a:	4630      	mov	r0, r6
 8011f6c:	b007      	add	sp, #28
 8011f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8011f70:	a901      	add	r1, sp, #4
 8011f72:	4620      	mov	r0, r4
 8011f74:	f7ff fe56 	bl	8011c24 <HAL_SD_GetCardStatus>
 8011f78:	2800      	cmp	r0, #0
 8011f7a:	d1f5      	bne.n	8011f68 <HAL_SD_Init+0x30>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8011f7c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  speedgrade = CardStatus.UhsSpeedGrade;
 8011f7e:	f89d 2014 	ldrb.w	r2, [sp, #20]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8011f82:	2901      	cmp	r1, #1
  unitsize = CardStatus.UhsAllocationUnitSize;
 8011f84:	f89d 3015 	ldrb.w	r3, [sp, #21]
  speedgrade = CardStatus.UhsSpeedGrade;
 8011f88:	b2d2      	uxtb	r2, r2
  unitsize = CardStatus.UhsAllocationUnitSize;
 8011f8a:	b2db      	uxtb	r3, r3
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8011f8c:	d024      	beq.n	8011fd8 <HAL_SD_Init+0xa0>
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8011f8e:	65e0      	str	r0, [r4, #92]	; 0x5c
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8011f90:	68e1      	ldr	r1, [r4, #12]
 8011f92:	4620      	mov	r0, r4
 8011f94:	f7ff ff2a 	bl	8011dec <HAL_SD_ConfigWideBusOperation>
 8011f98:	4606      	mov	r6, r0
 8011f9a:	2800      	cmp	r0, #0
 8011f9c:	d1e4      	bne.n	8011f68 <HAL_SD_Init+0x30>
  tickstart = HAL_GetTick();
 8011f9e:	f7f9 f925 	bl	800b1ec <HAL_GetTick>
 8011fa2:	4607      	mov	r7, r0
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8011fa4:	e00c      	b.n	8011fc0 <HAL_SD_Init+0x88>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8011fa6:	6820      	ldr	r0, [r4, #0]
 8011fa8:	4629      	mov	r1, r5
 8011faa:	f000 fffb 	bl	8012fa4 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 8011fae:	f3c0 2043 	ubfx	r0, r0, #9, #4
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8011fb2:	2804      	cmp	r0, #4
 8011fb4:	d018      	beq.n	8011fe8 <HAL_SD_Init+0xb0>
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8011fb6:	f7f9 f919 	bl	800b1ec <HAL_GetTick>
 8011fba:	1bc3      	subs	r3, r0, r7
 8011fbc:	3301      	adds	r3, #1
 8011fbe:	d019      	beq.n	8011ff4 <HAL_SD_Init+0xbc>
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8011fc0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011fc2:	6820      	ldr	r0, [r4, #0]
 8011fc4:	0409      	lsls	r1, r1, #16
 8011fc6:	f002 f845 	bl	8014054 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8011fca:	4605      	mov	r5, r0
 8011fcc:	2800      	cmp	r0, #0
 8011fce:	d0ea      	beq.n	8011fa6 <HAL_SD_Init+0x6e>
    hsd->ErrorCode |= errorstate;
 8011fd0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011fd2:	4301      	orrs	r1, r0
 8011fd4:	63a1      	str	r1, [r4, #56]	; 0x38
  return (HAL_SD_CardStateTypeDef)cardstate;
 8011fd6:	e7ee      	b.n	8011fb6 <HAL_SD_Init+0x7e>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8011fd8:	4313      	orrs	r3, r2
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8011fda:	bf14      	ite	ne
 8011fdc:	f44f 7300 	movne.w	r3, #512	; 0x200
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8011fe0:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8011fe4:	65e3      	str	r3, [r4, #92]	; 0x5c
 8011fe6:	e7d3      	b.n	8011f90 <HAL_SD_Init+0x58>
  hsd->State = HAL_SD_STATE_READY;
 8011fe8:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8011fea:	63a5      	str	r5, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8011fec:	6325      	str	r5, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8011fee:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8011ff2:	e7ba      	b.n	8011f6a <HAL_SD_Init+0x32>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8011ff4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
      hsd->State= HAL_SD_STATE_READY;
 8011ff8:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 8011ffa:	2603      	movs	r6, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8011ffc:	63a2      	str	r2, [r4, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8011ffe:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_TIMEOUT;
 8012002:	e7b2      	b.n	8011f6a <HAL_SD_Init+0x32>

08012004 <HAL_SD_ConfigSpeedBusOperation>:
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8012004:	6983      	ldr	r3, [r0, #24]
  hsd->State = HAL_SD_STATE_BUSY;
 8012006:	2203      	movs	r2, #3
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8012008:	2b02      	cmp	r3, #2
{
 801200a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801200e:	4604      	mov	r4, r0
 8012010:	b096      	sub	sp, #88	; 0x58
  hsd->State = HAL_SD_STATE_BUSY;
 8012012:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8012016:	d043      	beq.n	80120a0 <HAL_SD_ConfigSpeedBusOperation+0x9c>
    switch (SpeedMode)
 8012018:	2901      	cmp	r1, #1
 801201a:	d015      	beq.n	8012048 <HAL_SD_ConfigSpeedBusOperation+0x44>
 801201c:	2902      	cmp	r1, #2
 801201e:	d05c      	beq.n	80120da <HAL_SD_ConfigSpeedBusOperation+0xd6>
 8012020:	2900      	cmp	r1, #0
 8012022:	d072      	beq.n	801210a <HAL_SD_ConfigSpeedBusOperation+0x106>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8012024:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      status = HAL_ERROR;
 8012026:	2501      	movs	r5, #1
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8012028:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801202c:	63a3      	str	r3, [r4, #56]	; 0x38
      break;
 801202e:	e00c      	b.n	801204a <HAL_SD_ConfigSpeedBusOperation+0x46>
        if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 8012030:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8012032:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012036:	f000 80af 	beq.w	8012198 <HAL_SD_ConfigSpeedBusOperation+0x194>
 801203a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801203c:	2a01      	cmp	r2, #1
 801203e:	f000 80ab 	beq.w	8012198 <HAL_SD_ConfigSpeedBusOperation+0x194>
        else if (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED)
 8012042:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012046:	d06a      	beq.n	801211e <HAL_SD_ConfigSpeedBusOperation+0x11a>
    switch (SpeedMode)
 8012048:	2500      	movs	r5, #0
  tickstart = HAL_GetTick();
 801204a:	f7f9 f8cf 	bl	800b1ec <HAL_GetTick>
 801204e:	4606      	mov	r6, r0
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8012050:	e00b      	b.n	801206a <HAL_SD_ConfigSpeedBusOperation+0x66>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8012052:	6820      	ldr	r0, [r4, #0]
 8012054:	f000 ffa6 	bl	8012fa4 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 8012058:	f3c0 2043 	ubfx	r0, r0, #9, #4
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 801205c:	2804      	cmp	r0, #4
 801205e:	d02f      	beq.n	80120c0 <HAL_SD_ConfigSpeedBusOperation+0xbc>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8012060:	f7f9 f8c4 	bl	800b1ec <HAL_GetTick>
 8012064:	1b80      	subs	r0, r0, r6
 8012066:	3001      	adds	r0, #1
 8012068:	d00f      	beq.n	801208a <HAL_SD_ConfigSpeedBusOperation+0x86>
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801206a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801206c:	6820      	ldr	r0, [r4, #0]
 801206e:	0409      	lsls	r1, r1, #16
 8012070:	f001 fff0 	bl	8014054 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8012074:	4601      	mov	r1, r0
 8012076:	2800      	cmp	r0, #0
 8012078:	d0eb      	beq.n	8012052 <HAL_SD_ConfigSpeedBusOperation+0x4e>
    hsd->ErrorCode |= errorstate;
 801207a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801207c:	4319      	orrs	r1, r3
 801207e:	63a1      	str	r1, [r4, #56]	; 0x38
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8012080:	f7f9 f8b4 	bl	800b1ec <HAL_GetTick>
 8012084:	1b80      	subs	r0, r0, r6
 8012086:	3001      	adds	r0, #1
 8012088:	d1ef      	bne.n	801206a <HAL_SD_ConfigSpeedBusOperation+0x66>
      return HAL_TIMEOUT;
 801208a:	2503      	movs	r5, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 801208c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
      hsd->State = HAL_SD_STATE_READY;
 8012090:	2301      	movs	r3, #1
}
 8012092:	4628      	mov	r0, r5
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8012094:	63a2      	str	r2, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8012096:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 801209a:	b016      	add	sp, #88	; 0x58
 801209c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    switch (SpeedMode)
 80120a0:	2904      	cmp	r1, #4
 80120a2:	d8bf      	bhi.n	8012024 <HAL_SD_ConfigSpeedBusOperation+0x20>
 80120a4:	a301      	add	r3, pc, #4	; (adr r3, 80120ac <HAL_SD_ConfigSpeedBusOperation+0xa8>)
 80120a6:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 80120aa:	bf00      	nop
 80120ac:	08012031 	.word	0x08012031
 80120b0:	08012049 	.word	0x08012049
 80120b4:	080120db 	.word	0x080120db
 80120b8:	0801216d 	.word	0x0801216d
 80120bc:	08012135 	.word	0x08012135
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80120c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80120c4:	6820      	ldr	r0, [r4, #0]
 80120c6:	f000 ff87 	bl	8012fd8 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80120ca:	b9b0      	cbnz	r0, 80120fa <HAL_SD_ConfigSpeedBusOperation+0xf6>
  hsd->State = HAL_SD_STATE_READY;
 80120cc:	2301      	movs	r3, #1
}
 80120ce:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 80120d0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80120d4:	b016      	add	sp, #88	; 0x58
 80120d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 80120da:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80120dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80120e0:	d01d      	beq.n	801211e <HAL_SD_ConfigSpeedBusOperation+0x11a>
 80120e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80120e6:	d01a      	beq.n	801211e <HAL_SD_ConfigSpeedBusOperation+0x11a>
            (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED) ||
 80120e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80120ea:	2b01      	cmp	r3, #1
 80120ec:	d017      	beq.n	801211e <HAL_SD_ConfigSpeedBusOperation+0x11a>
          hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80120ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
          status = HAL_ERROR;
 80120f0:	2501      	movs	r5, #1
          hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80120f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80120f6:	63a3      	str	r3, [r4, #56]	; 0x38
          status = HAL_ERROR;
 80120f8:	e7a7      	b.n	801204a <HAL_SD_ConfigSpeedBusOperation+0x46>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80120fa:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 80120fc:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80120fe:	4a6d      	ldr	r2, [pc, #436]	; (80122b4 <HAL_SD_ConfigSpeedBusOperation+0x2b0>)
 8012100:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8012102:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012104:	4318      	orrs	r0, r3
 8012106:	63a0      	str	r0, [r4, #56]	; 0x38
    status = HAL_ERROR;
 8012108:	e7e0      	b.n	80120cc <HAL_SD_ConfigSpeedBusOperation+0xc8>
        if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 801210a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 801210c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012110:	d005      	beq.n	801211e <HAL_SD_ConfigSpeedBusOperation+0x11a>
 8012112:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012116:	d002      	beq.n	801211e <HAL_SD_ConfigSpeedBusOperation+0x11a>
            (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED) ||
 8012118:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 801211a:	2b01      	cmp	r3, #1
 801211c:	d194      	bne.n	8012048 <HAL_SD_ConfigSpeedBusOperation+0x44>
          if (SD_HighSpeed(hsd) != HAL_SD_ERROR_NONE)
 801211e:	4620      	mov	r0, r4
 8012120:	f7fe fffc 	bl	801111c <SD_HighSpeed>
 8012124:	2800      	cmp	r0, #0
 8012126:	d08f      	beq.n	8012048 <HAL_SD_ConfigSpeedBusOperation+0x44>
          hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8012128:	6ba3      	ldr	r3, [r4, #56]	; 0x38
          status = HAL_ERROR;
 801212a:	2501      	movs	r5, #1
          hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801212c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012130:	63a3      	str	r3, [r4, #56]	; 0x38
          status = HAL_ERROR;
 8012132:	e78a      	b.n	801204a <HAL_SD_ConfigSpeedBusOperation+0x46>
        if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 8012134:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8012136:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801213a:	d002      	beq.n	8012142 <HAL_SD_ConfigSpeedBusOperation+0x13e>
 801213c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 801213e:	2b01      	cmp	r3, #1
 8012140:	d1d5      	bne.n	80120ee <HAL_SD_ConfigSpeedBusOperation+0xea>
  */
static uint32_t SD_DDR_Mode(SD_HandleTypeDef *hsd)
{
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  SDMMC_DataInitTypeDef sdmmc_datainitstructure;
  uint32_t SD_hs[16]  = {0};
 8012142:	2240      	movs	r2, #64	; 0x40
 8012144:	2100      	movs	r1, #0
 8012146:	a806      	add	r0, sp, #24
 8012148:	f012 fe78 	bl	8024e3c <memset>
  uint32_t count, loop = 0 ;
  uint32_t Timeout = HAL_GetTick();
 801214c:	f7f9 f84e 	bl	800b1ec <HAL_GetTick>

  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 8012150:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  uint32_t Timeout = HAL_GetTick();
 8012152:	4607      	mov	r7, r0
  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 8012154:	2b00      	cmp	r3, #0
 8012156:	d050      	beq.n	80121fa <HAL_SD_ConfigSpeedBusOperation+0x1f6>
  {
     /* Standard Speed Card <= 12.5Mhz  */
     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
  }

  if(hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8012158:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801215c:	d054      	beq.n	8012208 <HAL_SD_ConfigSpeedBusOperation+0x204>
  HAL_StatusTypeDef status = HAL_OK;
 801215e:	2500      	movs	r5, #0
 8012160:	6823      	ldr	r3, [r4, #0]
          hsd->Instance->CLKCR |=  SDMMC_CLKCR_BUSSPEED | SDMMC_CLKCR_DDR;
 8012162:	685a      	ldr	r2, [r3, #4]
 8012164:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 8012168:	605a      	str	r2, [r3, #4]
 801216a:	e76e      	b.n	801204a <HAL_SD_ConfigSpeedBusOperation+0x46>
        if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 801216c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 801216e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012172:	d002      	beq.n	801217a <HAL_SD_ConfigSpeedBusOperation+0x176>
 8012174:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8012176:	2b01      	cmp	r3, #1
 8012178:	d1b9      	bne.n	80120ee <HAL_SD_ConfigSpeedBusOperation+0xea>
          if (SD_UltraHighSpeed(hsd) != HAL_SD_ERROR_NONE)
 801217a:	4620      	mov	r0, r4
 801217c:	f7ff fa7c 	bl	8011678 <SD_UltraHighSpeed>
 8012180:	b1b0      	cbz	r0, 80121b0 <HAL_SD_ConfigSpeedBusOperation+0x1ac>
            hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8012182:	6ba3      	ldr	r3, [r4, #56]	; 0x38
            status = HAL_ERROR;
 8012184:	2501      	movs	r5, #1
            hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8012186:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801218a:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->Instance->CLKCR |= SDMMC_CLKCR_BUSSPEED;
 801218c:	6822      	ldr	r2, [r4, #0]
 801218e:	6853      	ldr	r3, [r2, #4]
 8012190:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012194:	6053      	str	r3, [r2, #4]
 8012196:	e758      	b.n	801204a <HAL_SD_ConfigSpeedBusOperation+0x46>
          hsd->Instance->CLKCR |= SDMMC_CLKCR_BUSSPEED;
 8012198:	6822      	ldr	r2, [r4, #0]
          if (SD_UltraHighSpeed(hsd) != HAL_SD_ERROR_NONE)
 801219a:	4620      	mov	r0, r4
          hsd->Instance->CLKCR |= SDMMC_CLKCR_BUSSPEED;
 801219c:	6853      	ldr	r3, [r2, #4]
 801219e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80121a2:	6053      	str	r3, [r2, #4]
          if (SD_UltraHighSpeed(hsd) != HAL_SD_ERROR_NONE)
 80121a4:	f7ff fa68 	bl	8011678 <SD_UltraHighSpeed>
 80121a8:	2800      	cmp	r0, #0
 80121aa:	f43f af4d 	beq.w	8012048 <HAL_SD_ConfigSpeedBusOperation+0x44>
 80121ae:	e7b6      	b.n	801211e <HAL_SD_ConfigSpeedBusOperation+0x11a>
  HAL_StatusTypeDef status = HAL_OK;
 80121b0:	4605      	mov	r5, r0
 80121b2:	e7eb      	b.n	801218c <HAL_SD_ConfigSpeedBusOperation+0x188>
        hsd->State= HAL_SD_STATE_READY;
        return HAL_SD_ERROR_TIMEOUT;
      }
    }

    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80121b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80121b6:	0716      	lsls	r6, r2, #28
 80121b8:	d478      	bmi.n	80122ac <HAL_SD_ConfigSpeedBusOperation+0x2a8>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);

      return errorstate;
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80121ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80121bc:	0790      	lsls	r0, r2, #30
 80121be:	d472      	bmi.n	80122a6 <HAL_SD_ConfigSpeedBusOperation+0x2a2>

      errorstate = SDMMC_ERROR_DATA_CRC_FAIL;

      return errorstate;
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80121c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80121c2:	0691      	lsls	r1, r2, #26
 80121c4:	d46c      	bmi.n	80122a0 <HAL_SD_ConfigSpeedBusOperation+0x29c>

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);

    /* Test if the switch mode  is ok */
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 80121c6:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80121ca:	493b      	ldr	r1, [pc, #236]	; (80122b8 <HAL_SD_ConfigSpeedBusOperation+0x2b4>)
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 80121cc:	0792      	lsls	r2, r2, #30
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80121ce:	6399      	str	r1, [r3, #56]	; 0x38
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 80121d0:	d514      	bpl.n	80121fc <HAL_SD_ConfigSpeedBusOperation+0x1f8>
    else
    {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
      hsd->DriveTransceiver_1_8V_Callback(SET);
#else
      HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 80121d2:	2001      	movs	r0, #1
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
#if defined (DLYB_SDMMC1) || defined (DLYB_SDMMC2)
      /* Enable DelayBlock Peripheral */
      /* SDMMC_CKin feedback clock selected as receive clock, for DDR50 */
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_0);
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 80121d4:	4d39      	ldr	r5, [pc, #228]	; (80122bc <HAL_SD_ConfigSpeedBusOperation+0x2b8>)
      HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 80121d6:	f7f8 ffa5 	bl	800b124 <HAL_SD_DriveTransceiver_1_8V_Callback>
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_0);
 80121da:	6822      	ldr	r2, [r4, #0]
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 80121dc:	4838      	ldr	r0, [pc, #224]	; (80122c0 <HAL_SD_ConfigSpeedBusOperation+0x2bc>)
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_0);
 80121de:	6853      	ldr	r3, [r2, #4]
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 80121e0:	4938      	ldr	r1, [pc, #224]	; (80122c4 <HAL_SD_ConfigSpeedBusOperation+0x2c0>)
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_0);
 80121e2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 80121e6:	42aa      	cmp	r2, r5
 80121e8:	bf18      	it	ne
 80121ea:	4608      	movne	r0, r1
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_0);
 80121ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80121f0:	6053      	str	r3, [r2, #4]
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 80121f2:	f000 fe53 	bl	8012e9c <DelayBlock_Enable>
 80121f6:	2800      	cmp	r0, #0
 80121f8:	d0b1      	beq.n	801215e <HAL_SD_ConfigSpeedBusOperation+0x15a>
 80121fa:	6823      	ldr	r3, [r4, #0]
            hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80121fc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
            status = HAL_ERROR;
 80121fe:	2501      	movs	r5, #1
            hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8012200:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8012204:	63a2      	str	r2, [r4, #56]	; 0x38
            status = HAL_ERROR;
 8012206:	e7ac      	b.n	8012162 <HAL_SD_ConfigSpeedBusOperation+0x15e>
    hsd->Instance->DCTRL = 0;
 8012208:	6820      	ldr	r0, [r4, #0]
 801220a:	2300      	movs	r3, #0
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 801220c:	2140      	movs	r1, #64	; 0x40
    hsd->Instance->DCTRL = 0;
 801220e:	62c3      	str	r3, [r0, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8012210:	f000 fee2 	bl	8012fd8 <SDMMC_CmdBlockLength>
    if (errorstate != HAL_SD_ERROR_NONE)
 8012214:	2800      	cmp	r0, #0
 8012216:	d1f0      	bne.n	80121fa <HAL_SD_ConfigSpeedBusOperation+0x1f6>
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 8012218:	f04f 32ff 	mov.w	r2, #4294967295
 801221c:	2340      	movs	r3, #64	; 0x40
 801221e:	2060      	movs	r0, #96	; 0x60
 8012220:	2102      	movs	r1, #2
 8012222:	e9cd 2300 	strd	r2, r3, [sp]
 8012226:	2200      	movs	r2, #0
 8012228:	2301      	movs	r3, #1
 801222a:	e9cd 0102 	strd	r0, r1, [sp, #8]
    if ( SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure) != HAL_OK)
 801222e:	4669      	mov	r1, sp
 8012230:	6820      	ldr	r0, [r4, #0]
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 8012232:	e9cd 2304 	strd	r2, r3, [sp, #16]
    if ( SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure) != HAL_OK)
 8012236:	f000 feb9 	bl	8012fac <SDMMC_ConfigData>
 801223a:	4605      	mov	r5, r0
 801223c:	2800      	cmp	r0, #0
 801223e:	d1dc      	bne.n	80121fa <HAL_SD_ConfigSpeedBusOperation+0x1f6>
    errorstate = SDMMC_CmdSwitch(hsd->Instance, SDMMC_DDR50_SWITCH_PATTERN);
 8012240:	4921      	ldr	r1, [pc, #132]	; (80122c8 <HAL_SD_ConfigSpeedBusOperation+0x2c4>)
 8012242:	6820      	ldr	r0, [r4, #0]
 8012244:	f002 f850 	bl	80142e8 <SDMMC_CmdSwitch>
    if(errorstate != HAL_SD_ERROR_NONE)
 8012248:	4606      	mov	r6, r0
 801224a:	2800      	cmp	r0, #0
 801224c:	d1d5      	bne.n	80121fa <HAL_SD_ConfigSpeedBusOperation+0x1f6>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 801224e:	f240 582a 	movw	r8, #1322	; 0x52a
 8012252:	e004      	b.n	801225e <HAL_SD_ConfigSpeedBusOperation+0x25a>
      if((HAL_GetTick()-Timeout) >=  SDMMC_DATATIMEOUT)
 8012254:	f7f8 ffca 	bl	800b1ec <HAL_GetTick>
 8012258:	1bc0      	subs	r0, r0, r7
 801225a:	3001      	adds	r0, #1
 801225c:	d018      	beq.n	8012290 <HAL_SD_ConfigSpeedBusOperation+0x28c>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 801225e:	6823      	ldr	r3, [r4, #0]
 8012260:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012262:	4618      	mov	r0, r3
 8012264:	ea12 0f08 	tst.w	r2, r8
 8012268:	d1a4      	bne.n	80121b4 <HAL_SD_ConfigSpeedBusOperation+0x1b0>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 801226a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801226c:	041b      	lsls	r3, r3, #16
 801226e:	d5f1      	bpl.n	8012254 <HAL_SD_ConfigSpeedBusOperation+0x250>
 8012270:	ab06      	add	r3, sp, #24
 8012272:	eb03 1946 	add.w	r9, r3, r6, lsl #5
 8012276:	ab0e      	add	r3, sp, #56	; 0x38
 8012278:	eb03 1a46 	add.w	sl, r3, r6, lsl #5
 801227c:	e000      	b.n	8012280 <HAL_SD_ConfigSpeedBusOperation+0x27c>
 801227e:	6820      	ldr	r0, [r4, #0]
          SD_hs[(8U*loop)+count]  = SDMMC_ReadFIFO(hsd->Instance);
 8012280:	f000 fe72 	bl	8012f68 <SDMMC_ReadFIFO>
 8012284:	f849 0b04 	str.w	r0, [r9], #4
        for (count = 0U; count < 8U; count++)
 8012288:	45d1      	cmp	r9, sl
 801228a:	d1f8      	bne.n	801227e <HAL_SD_ConfigSpeedBusOperation+0x27a>
        loop ++;
 801228c:	3601      	adds	r6, #1
 801228e:	e7e1      	b.n	8012254 <HAL_SD_ConfigSpeedBusOperation+0x250>
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8012290:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
        hsd->State= HAL_SD_STATE_READY;
 8012294:	2201      	movs	r2, #1
 8012296:	6823      	ldr	r3, [r4, #0]
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8012298:	63a1      	str	r1, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 801229a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        return HAL_SD_ERROR_TIMEOUT;
 801229e:	e7ad      	b.n	80121fc <HAL_SD_ConfigSpeedBusOperation+0x1f8>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80122a0:	2220      	movs	r2, #32
 80122a2:	639a      	str	r2, [r3, #56]	; 0x38
      return errorstate;
 80122a4:	e7aa      	b.n	80121fc <HAL_SD_ConfigSpeedBusOperation+0x1f8>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80122a6:	2202      	movs	r2, #2
 80122a8:	639a      	str	r2, [r3, #56]	; 0x38
      return errorstate;
 80122aa:	e7a7      	b.n	80121fc <HAL_SD_ConfigSpeedBusOperation+0x1f8>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80122ac:	2208      	movs	r2, #8
 80122ae:	639a      	str	r2, [r3, #56]	; 0x38
      return errorstate;
 80122b0:	e757      	b.n	8012162 <HAL_SD_ConfigSpeedBusOperation+0x15e>
 80122b2:	bf00      	nop
 80122b4:	1fe00fff 	.word	0x1fe00fff
 80122b8:	18000f3a 	.word	0x18000f3a
 80122bc:	52007000 	.word	0x52007000
 80122c0:	52008000 	.word	0x52008000
 80122c4:	48022800 	.word	0x48022800
 80122c8:	80ffff04 	.word	0x80ffff04

080122cc <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80122cc:	6c81      	ldr	r1, [r0, #72]	; 0x48
{
 80122ce:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80122d0:	0409      	lsls	r1, r1, #16
{
 80122d2:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80122d4:	6800      	ldr	r0, [r0, #0]
 80122d6:	f001 febd 	bl	8014054 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 80122da:	4601      	mov	r1, r0
 80122dc:	b120      	cbz	r0, 80122e8 <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
 80122de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80122e0:	2000      	movs	r0, #0
 80122e2:	4319      	orrs	r1, r3
 80122e4:	63a1      	str	r1, [r4, #56]	; 0x38
}
 80122e6:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80122e8:	6820      	ldr	r0, [r4, #0]
 80122ea:	f000 fe5b 	bl	8012fa4 <SDMMC_GetResponse>
  if(errorstate != HAL_SD_ERROR_NONE)
 80122ee:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 80122f2:	bd10      	pop	{r4, pc}

080122f4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80122f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80122f6:	f8d0 7080 	ldr.w	r7, [r0, #128]	; 0x80
 80122fa:	2f20      	cmp	r7, #32
 80122fc:	d141      	bne.n	8012382 <HAL_UART_Transmit_DMA+0x8e>
  {
    if ((pData == NULL) || (Size == 0U))
 80122fe:	2900      	cmp	r1, #0
 8012300:	d03d      	beq.n	801237e <HAL_UART_Transmit_DMA+0x8a>
 8012302:	fab2 f682 	clz	r6, r2
 8012306:	0976      	lsrs	r6, r6, #5
 8012308:	2a00      	cmp	r2, #0
 801230a:	d038      	beq.n	801237e <HAL_UART_Transmit_DMA+0x8a>
 801230c:	4604      	mov	r4, r0
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 801230e:	f890 007c 	ldrb.w	r0, [r0, #124]	; 0x7c
 8012312:	2801      	cmp	r0, #1
 8012314:	d035      	beq.n	8012382 <HAL_UART_Transmit_DMA+0x8e>
 8012316:	2501      	movs	r5, #1
    huart->pTxBuffPtr  = pData;
    huart->TxXferSize  = Size;
    huart->TxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012318:	f04f 0c21 	mov.w	ip, #33	; 0x21

    if (huart->hdmatx != NULL)
 801231c:	6f60      	ldr	r0, [r4, #116]	; 0x74
    huart->TxXferCount = Size;
 801231e:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
    huart->pTxBuffPtr  = pData;
 8012322:	6521      	str	r1, [r4, #80]	; 0x50
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012324:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
    huart->TxXferSize  = Size;
 8012328:	f8a4 2054 	strh.w	r2, [r4, #84]	; 0x54
    __HAL_LOCK(huart);
 801232c:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012330:	f8c4 c080 	str.w	ip, [r4, #128]	; 0x80
    if (huart->hdmatx != NULL)
 8012334:	b1c0      	cbz	r0, 8012368 <HAL_UART_Transmit_DMA+0x74>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8012336:	f8df c054 	ldr.w	ip, [pc, #84]	; 801238c <HAL_UART_Transmit_DMA+0x98>

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801233a:	4613      	mov	r3, r2
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801233c:	4a12      	ldr	r2, [pc, #72]	; (8012388 <HAL_UART_Transmit_DMA+0x94>)
      huart->hdmatx->XferAbortCallback = NULL;
 801233e:	6506      	str	r6, [r0, #80]	; 0x50
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8012340:	e9c0 c20f 	strd	ip, r2, [r0, #60]	; 0x3c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8012344:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8012346:	f8df c048 	ldr.w	ip, [pc, #72]	; 8012390 <HAL_UART_Transmit_DMA+0x9c>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801234a:	3228      	adds	r2, #40	; 0x28
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801234c:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8012350:	f7f9 fe72 	bl	800c038 <HAL_DMA_Start_IT>
 8012354:	b140      	cbz	r0, 8012368 <HAL_UART_Transmit_DMA+0x74>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8012356:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;

        return HAL_ERROR;
 8012358:	4628      	mov	r0, r5
        __HAL_UNLOCK(huart);
 801235a:	f884 607c 	strb.w	r6, [r4, #124]	; 0x7c
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 801235e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->gState = HAL_UART_STATE_READY;
 8012362:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
  }
  else
  {
    return HAL_BUSY;
  }
}
 8012366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8012368:	6823      	ldr	r3, [r4, #0]
 801236a:	2240      	movs	r2, #64	; 0x40
    __HAL_UNLOCK(huart);
 801236c:	2000      	movs	r0, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 801236e:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 8012370:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8012374:	689a      	ldr	r2, [r3, #8]
 8012376:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801237a:	609a      	str	r2, [r3, #8]
}
 801237c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 801237e:	2001      	movs	r0, #1
}
 8012380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8012382:	2002      	movs	r0, #2
}
 8012384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012386:	bf00      	nop
 8012388:	08012471 	.word	0x08012471
 801238c:	08012441 	.word	0x08012441
 8012390:	080124c9 	.word	0x080124c9

08012394 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8012396:	f8d0 7084 	ldr.w	r7, [r0, #132]	; 0x84
 801239a:	2f20      	cmp	r7, #32
 801239c:	d146      	bne.n	801242c <HAL_UART_Receive_DMA+0x98>
  {
    if ((pData == NULL) || (Size == 0U))
 801239e:	2900      	cmp	r1, #0
 80123a0:	d042      	beq.n	8012428 <HAL_UART_Receive_DMA+0x94>
 80123a2:	fab2 f682 	clz	r6, r2
 80123a6:	0976      	lsrs	r6, r6, #5
 80123a8:	2a00      	cmp	r2, #0
 80123aa:	d03d      	beq.n	8012428 <HAL_UART_Receive_DMA+0x94>
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 80123ac:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 80123b0:	4604      	mov	r4, r0
 80123b2:	2b01      	cmp	r3, #1
 80123b4:	d03a      	beq.n	801242c <HAL_UART_Receive_DMA+0x98>
    huart->RxXferSize = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->RxState = HAL_UART_STATE_BUSY_RX;

    if (huart->hdmarx != NULL)
 80123b6:	6f80      	ldr	r0, [r0, #120]	; 0x78
    __HAL_LOCK(huart);
 80123b8:	2501      	movs	r5, #1
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80123ba:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80123bc:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
    huart->pRxBuffPtr = pData;
 80123c0:	65a1      	str	r1, [r4, #88]	; 0x58
    huart->RxXferSize = Size;
 80123c2:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
    __HAL_LOCK(huart);
 80123c6:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80123ca:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    if (huart->hdmarx != NULL)
 80123ce:	b1d0      	cbz	r0, 8012406 <HAL_UART_Receive_DMA+0x72>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80123d0:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8012430 <HAL_UART_Receive_DMA+0x9c>

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80123d4:	4613      	mov	r3, r2
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80123d6:	f8df e05c 	ldr.w	lr, [pc, #92]	; 8012434 <HAL_UART_Receive_DMA+0xa0>
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80123da:	460a      	mov	r2, r1
 80123dc:	6821      	ldr	r1, [r4, #0]
      huart->hdmarx->XferAbortCallback = NULL;
 80123de:	6506      	str	r6, [r0, #80]	; 0x50
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80123e0:	3124      	adds	r1, #36	; 0x24
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80123e2:	e9c0 ec0f 	strd	lr, ip, [r0, #60]	; 0x3c
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 80123e6:	f8df c050 	ldr.w	ip, [pc, #80]	; 8012438 <HAL_UART_Receive_DMA+0xa4>
 80123ea:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80123ee:	f7f9 fe23 	bl	800c038 <HAL_DMA_Start_IT>
 80123f2:	b140      	cbz	r0, 8012406 <HAL_UART_Receive_DMA+0x72>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80123f4:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;

        return HAL_ERROR;
 80123f6:	4628      	mov	r0, r5
        __HAL_UNLOCK(huart);
 80123f8:	f884 607c 	strb.w	r6, [r4, #124]	; 0x7c
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80123fc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->gState = HAL_UART_STATE_READY;
 8012400:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
  }
  else
  {
    return HAL_BUSY;
  }
}
 8012404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012406:	6823      	ldr	r3, [r4, #0]
    __HAL_UNLOCK(huart);
 8012408:	2000      	movs	r0, #0
 801240a:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801240e:	681a      	ldr	r2, [r3, #0]
 8012410:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012414:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012416:	689a      	ldr	r2, [r3, #8]
 8012418:	f042 0201 	orr.w	r2, r2, #1
 801241c:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801241e:	689a      	ldr	r2, [r3, #8]
 8012420:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012424:	609a      	str	r2, [r3, #8]
}
 8012426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8012428:	2001      	movs	r0, #1
}
 801242a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 801242c:	2002      	movs	r0, #2
}
 801242e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012430:	080124bd 	.word	0x080124bd
 8012434:	08012481 	.word	0x08012481
 8012438:	080124c9 	.word	0x080124c9

0801243c <HAL_UART_TxCpltCallback>:
 801243c:	4770      	bx	lr
 801243e:	bf00      	nop

08012440 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8012440:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8012442:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012444:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8012446:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801244a:	d00c      	beq.n	8012466 <UART_DMATransmitCplt+0x26>
  {
    huart->TxXferCount = 0U;

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801244c:	6803      	ldr	r3, [r0, #0]
    huart->TxXferCount = 0U;
 801244e:	2200      	movs	r2, #0
 8012450:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8012454:	689a      	ldr	r2, [r3, #8]
 8012456:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801245a:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801245c:	681a      	ldr	r2, [r3, #0]
 801245e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012462:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8012464:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8012466:	f7ff ffe9 	bl	801243c <HAL_UART_TxCpltCallback>
}
 801246a:	bd08      	pop	{r3, pc}

0801246c <HAL_UART_TxHalfCpltCallback>:
 801246c:	4770      	bx	lr
 801246e:	bf00      	nop

08012470 <UART_DMATxHalfCplt>:
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8012470:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8012472:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8012474:	f7ff fffa 	bl	801246c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012478:	bd08      	pop	{r3, pc}
 801247a:	bf00      	nop

0801247c <HAL_UART_RxCpltCallback>:
 801247c:	4770      	bx	lr
 801247e:	bf00      	nop

08012480 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8012480:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8012482:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012484:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8012486:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801248a:	d012      	beq.n	80124b2 <UART_DMAReceiveCplt+0x32>
  {
    huart->RxXferCount = 0U;

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801248c:	6803      	ldr	r3, [r0, #0]
    huart->RxXferCount = 0U;
 801248e:	2200      	movs	r2, #0
    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8012490:	2120      	movs	r1, #32
    huart->RxXferCount = 0U;
 8012492:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012496:	681a      	ldr	r2, [r3, #0]
 8012498:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801249c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801249e:	689a      	ldr	r2, [r3, #8]
 80124a0:	f022 0201 	bic.w	r2, r2, #1
 80124a4:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80124a6:	689a      	ldr	r2, [r3, #8]
 80124a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80124ac:	609a      	str	r2, [r3, #8]
    huart->RxState = HAL_UART_STATE_READY;
 80124ae:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80124b2:	f7ff ffe3 	bl	801247c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80124b6:	bd08      	pop	{r3, pc}

080124b8 <HAL_UART_RxHalfCpltCallback>:
 80124b8:	4770      	bx	lr
 80124ba:	bf00      	nop

080124bc <UART_DMARxHalfCplt>:
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80124bc:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80124be:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 80124c0:	f7ff fffa 	bl	80124b8 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80124c4:	bd08      	pop	{r3, pc}
 80124c6:	bf00      	nop

080124c8 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80124c8:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80124ca:	b538      	push	{r3, r4, r5, lr}

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80124cc:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80124ce:	f8d0 4080 	ldr.w	r4, [r0, #128]	; 0x80
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80124d2:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80124d6:	689a      	ldr	r2, [r3, #8]
 80124d8:	0615      	lsls	r5, r2, #24
 80124da:	d501      	bpl.n	80124e0 <UART_DMAError+0x18>
 80124dc:	2c21      	cmp	r4, #33	; 0x21
 80124de:	d01d      	beq.n	801251c <UART_DMAError+0x54>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80124e0:	689a      	ldr	r2, [r3, #8]
 80124e2:	0652      	lsls	r2, r2, #25
 80124e4:	d501      	bpl.n	80124ea <UART_DMAError+0x22>
 80124e6:	2922      	cmp	r1, #34	; 0x22
 80124e8:	d008      	beq.n	80124fc <UART_DMAError+0x34>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80124ea:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80124ee:	f043 0310 	orr.w	r3, r3, #16
 80124f2:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80124f6:	f7f2 fa37 	bl	8004968 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80124fa:	bd38      	pop	{r3, r4, r5, pc}
    huart->RxXferCount = 0U;
 80124fc:	2400      	movs	r4, #0
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80124fe:	4a0f      	ldr	r2, [pc, #60]	; (801253c <UART_DMAError+0x74>)
  huart->RxState = HAL_UART_STATE_READY;
 8012500:	2520      	movs	r5, #32
    huart->RxXferCount = 0U;
 8012502:	f8a0 405e 	strh.w	r4, [r0, #94]	; 0x5e
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012506:	6819      	ldr	r1, [r3, #0]
 8012508:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 801250c:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801250e:	6899      	ldr	r1, [r3, #8]
 8012510:	400a      	ands	r2, r1
 8012512:	609a      	str	r2, [r3, #8]
  huart->RxISR = NULL;
 8012514:	66c4      	str	r4, [r0, #108]	; 0x6c
  huart->RxState = HAL_UART_STATE_READY;
 8012516:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
}
 801251a:	e7e6      	b.n	80124ea <UART_DMAError+0x22>
    huart->TxXferCount = 0U;
 801251c:	2200      	movs	r2, #0
  huart->gState = HAL_UART_STATE_READY;
 801251e:	2420      	movs	r4, #32
    huart->TxXferCount = 0U;
 8012520:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8012524:	681a      	ldr	r2, [r3, #0]
 8012526:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 801252a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 801252c:	689a      	ldr	r2, [r3, #8]
 801252e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8012532:	609a      	str	r2, [r3, #8]
  huart->gState = HAL_UART_STATE_READY;
 8012534:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
}
 8012538:	e7d2      	b.n	80124e0 <UART_DMAError+0x18>
 801253a:	bf00      	nop
 801253c:	effffffe 	.word	0xeffffffe

08012540 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8012540:	6802      	ldr	r2, [r0, #0]
{
 8012542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8012546:	69d3      	ldr	r3, [r2, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8012548:	f640 060f 	movw	r6, #2063	; 0x80f
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801254c:	6815      	ldr	r5, [r2, #0]
{
 801254e:	4604      	mov	r4, r0
  if (errorflags == 0U)
 8012550:	4233      	tst	r3, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8012552:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 8012554:	f000 8090 	beq.w	8012678 <HAL_UART_IRQHandler+0x138>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8012558:	4872      	ldr	r0, [pc, #456]	; (8012724 <HAL_UART_IRQHandler+0x1e4>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801255a:	4e73      	ldr	r6, [pc, #460]	; (8012728 <HAL_UART_IRQHandler+0x1e8>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801255c:	4008      	ands	r0, r1
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801255e:	402e      	ands	r6, r5
 8012560:	4306      	orrs	r6, r0
 8012562:	d11e      	bne.n	80125a2 <HAL_UART_IRQHandler+0x62>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8012564:	02de      	lsls	r6, r3, #11
 8012566:	d502      	bpl.n	801256e <HAL_UART_IRQHandler+0x2e>
 8012568:	0248      	lsls	r0, r1, #9
 801256a:	f100 80aa 	bmi.w	80126c2 <HAL_UART_IRQHandler+0x182>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801256e:	061f      	lsls	r7, r3, #24
 8012570:	d506      	bpl.n	8012580 <HAL_UART_IRQHandler+0x40>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8012572:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8012576:	f005 0080 	and.w	r0, r5, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801257a:	4301      	orrs	r1, r0
 801257c:	f040 8099 	bne.w	80126b2 <HAL_UART_IRQHandler+0x172>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8012580:	065e      	lsls	r6, r3, #25
 8012582:	d502      	bpl.n	801258a <HAL_UART_IRQHandler+0x4a>
 8012584:	0668      	lsls	r0, r5, #25
 8012586:	f100 80a8 	bmi.w	80126da <HAL_UART_IRQHandler+0x19a>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801258a:	0219      	lsls	r1, r3, #8
 801258c:	d502      	bpl.n	8012594 <HAL_UART_IRQHandler+0x54>
 801258e:	006a      	lsls	r2, r5, #1
 8012590:	f100 80b0 	bmi.w	80126f4 <HAL_UART_IRQHandler+0x1b4>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8012594:	01db      	lsls	r3, r3, #7
 8012596:	d502      	bpl.n	801259e <HAL_UART_IRQHandler+0x5e>
 8012598:	2d00      	cmp	r5, #0
 801259a:	f2c0 80b7 	blt.w	801270c <HAL_UART_IRQHandler+0x1cc>
}
 801259e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80125a2:	07de      	lsls	r6, r3, #31
 80125a4:	d509      	bpl.n	80125ba <HAL_UART_IRQHandler+0x7a>
 80125a6:	05ef      	lsls	r7, r5, #23
 80125a8:	d507      	bpl.n	80125ba <HAL_UART_IRQHandler+0x7a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80125aa:	2601      	movs	r6, #1
 80125ac:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80125ae:	f8d4 6088 	ldr.w	r6, [r4, #136]	; 0x88
 80125b2:	f046 0601 	orr.w	r6, r6, #1
 80125b6:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80125ba:	079e      	lsls	r6, r3, #30
 80125bc:	d56c      	bpl.n	8012698 <HAL_UART_IRQHandler+0x158>
 80125be:	07cf      	lsls	r7, r1, #31
 80125c0:	d509      	bpl.n	80125d6 <HAL_UART_IRQHandler+0x96>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80125c2:	2602      	movs	r6, #2
 80125c4:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80125c6:	f8d4 6088 	ldr.w	r6, [r4, #136]	; 0x88
 80125ca:	f046 0604 	orr.w	r6, r6, #4
 80125ce:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80125d2:	075e      	lsls	r6, r3, #29
 80125d4:	d464      	bmi.n	80126a0 <HAL_UART_IRQHandler+0x160>
    if (((isrflags & USART_ISR_ORE) != 0U)
 80125d6:	071f      	lsls	r7, r3, #28
 80125d8:	d50b      	bpl.n	80125f2 <HAL_UART_IRQHandler+0xb2>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80125da:	f005 0620 	and.w	r6, r5, #32
 80125de:	4330      	orrs	r0, r6
 80125e0:	d007      	beq.n	80125f2 <HAL_UART_IRQHandler+0xb2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80125e2:	2008      	movs	r0, #8
 80125e4:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80125e6:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80125ea:	f040 0008 	orr.w	r0, r0, #8
 80125ee:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80125f2:	051e      	lsls	r6, r3, #20
 80125f4:	d50a      	bpl.n	801260c <HAL_UART_IRQHandler+0xcc>
 80125f6:	0168      	lsls	r0, r5, #5
 80125f8:	d508      	bpl.n	801260c <HAL_UART_IRQHandler+0xcc>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80125fa:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80125fe:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8012600:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8012604:	f040 0020 	orr.w	r0, r0, #32
 8012608:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801260c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8012610:	2800      	cmp	r0, #0
 8012612:	d0c4      	beq.n	801259e <HAL_UART_IRQHandler+0x5e>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8012614:	069b      	lsls	r3, r3, #26
 8012616:	d506      	bpl.n	8012626 <HAL_UART_IRQHandler+0xe6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8012618:	f005 0520 	and.w	r5, r5, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801261c:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8012620:	ea55 0301 	orrs.w	r3, r5, r1
 8012624:	d16b      	bne.n	80126fe <HAL_UART_IRQHandler+0x1be>
      errorcode = huart->ErrorCode;
 8012626:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801262a:	6893      	ldr	r3, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801262c:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8012630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012634:	431d      	orrs	r5, r3
 8012636:	d06e      	beq.n	8012716 <HAL_UART_IRQHandler+0x1d6>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012638:	6811      	ldr	r1, [r2, #0]
  huart->RxState = HAL_UART_STATE_READY;
 801263a:	2520      	movs	r5, #32
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801263c:	4b3b      	ldr	r3, [pc, #236]	; (801272c <HAL_UART_IRQHandler+0x1ec>)
  huart->RxISR = NULL;
 801263e:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012640:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 8012644:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012646:	6891      	ldr	r1, [r2, #8]
 8012648:	400b      	ands	r3, r1
 801264a:	6093      	str	r3, [r2, #8]
  huart->RxState = HAL_UART_STATE_READY;
 801264c:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012650:	6893      	ldr	r3, [r2, #8]
  huart->RxISR = NULL;
 8012652:	66e0      	str	r0, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012654:	065f      	lsls	r7, r3, #25
 8012656:	d53c      	bpl.n	80126d2 <HAL_UART_IRQHandler+0x192>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012658:	6893      	ldr	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 801265a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801265c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012660:	6093      	str	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 8012662:	2800      	cmp	r0, #0
 8012664:	d035      	beq.n	80126d2 <HAL_UART_IRQHandler+0x192>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8012666:	4b32      	ldr	r3, [pc, #200]	; (8012730 <HAL_UART_IRQHandler+0x1f0>)
 8012668:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801266a:	f7fa f80f 	bl	800c68c <HAL_DMA_Abort_IT>
 801266e:	2800      	cmp	r0, #0
 8012670:	d095      	beq.n	801259e <HAL_UART_IRQHandler+0x5e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8012672:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8012674:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8012676:	e00c      	b.n	8012692 <HAL_UART_IRQHandler+0x152>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8012678:	069f      	lsls	r7, r3, #26
 801267a:	f57f af73 	bpl.w	8012564 <HAL_UART_IRQHandler+0x24>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801267e:	f005 0620 	and.w	r6, r5, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8012682:	f001 5780 	and.w	r7, r1, #268435456	; 0x10000000
 8012686:	433e      	orrs	r6, r7
 8012688:	f43f af6c 	beq.w	8012564 <HAL_UART_IRQHandler+0x24>
      if (huart->RxISR != NULL)
 801268c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 801268e:	2b00      	cmp	r3, #0
 8012690:	d085      	beq.n	801259e <HAL_UART_IRQHandler+0x5e>
}
 8012692:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8012696:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012698:	075f      	lsls	r7, r3, #29
 801269a:	d59c      	bpl.n	80125d6 <HAL_UART_IRQHandler+0x96>
 801269c:	07ce      	lsls	r6, r1, #31
 801269e:	d59a      	bpl.n	80125d6 <HAL_UART_IRQHandler+0x96>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80126a0:	2604      	movs	r6, #4
 80126a2:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80126a4:	f8d4 6088 	ldr.w	r6, [r4, #136]	; 0x88
 80126a8:	f046 0602 	orr.w	r6, r6, #2
 80126ac:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
 80126b0:	e791      	b.n	80125d6 <HAL_UART_IRQHandler+0x96>
    if (huart->TxISR != NULL)
 80126b2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	f43f af72 	beq.w	801259e <HAL_UART_IRQHandler+0x5e>
      huart->TxISR(huart);
 80126ba:	4620      	mov	r0, r4
}
 80126bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 80126c0:	4718      	bx	r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80126c2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 80126c6:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80126c8:	6213      	str	r3, [r2, #32]
}
 80126ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_WakeupCallback(huart);
 80126ce:	f000 bbdf 	b.w	8012e90 <HAL_UARTEx_WakeupCallback>
            HAL_UART_ErrorCallback(huart);
 80126d2:	4620      	mov	r0, r4
 80126d4:	f7f2 f948 	bl	8004968 <HAL_UART_ErrorCallback>
 80126d8:	e761      	b.n	801259e <HAL_UART_IRQHandler+0x5e>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80126da:	6813      	ldr	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80126dc:	2520      	movs	r5, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80126de:	2100      	movs	r1, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80126e0:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80126e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80126e6:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 80126e8:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  huart->TxISR = NULL;
 80126ec:	6721      	str	r1, [r4, #112]	; 0x70
  HAL_UART_TxCpltCallback(huart);
 80126ee:	f7ff fea5 	bl	801243c <HAL_UART_TxCpltCallback>
    return;
 80126f2:	e754      	b.n	801259e <HAL_UART_IRQHandler+0x5e>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80126f4:	4620      	mov	r0, r4
}
 80126f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80126fa:	f000 bbcd 	b.w	8012e98 <HAL_UARTEx_TxFifoEmptyCallback>
        if (huart->RxISR != NULL)
 80126fe:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8012700:	2b00      	cmp	r3, #0
 8012702:	d090      	beq.n	8012626 <HAL_UART_IRQHandler+0xe6>
          huart->RxISR(huart);
 8012704:	4620      	mov	r0, r4
 8012706:	4798      	blx	r3
 8012708:	6822      	ldr	r2, [r4, #0]
 801270a:	e78c      	b.n	8012626 <HAL_UART_IRQHandler+0xe6>
    HAL_UARTEx_RxFifoFullCallback(huart);
 801270c:	4620      	mov	r0, r4
}
 801270e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8012712:	f000 bbbf 	b.w	8012e94 <HAL_UARTEx_RxFifoFullCallback>
        HAL_UART_ErrorCallback(huart);
 8012716:	4620      	mov	r0, r4
 8012718:	f7f2 f926 	bl	8004968 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801271c:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 8012720:	e73d      	b.n	801259e <HAL_UART_IRQHandler+0x5e>
 8012722:	bf00      	nop
 8012724:	10000001 	.word	0x10000001
 8012728:	04000120 	.word	0x04000120
 801272c:	effffffe 	.word	0xeffffffe
 8012730:	08012735 	.word	0x08012735

08012734 <UART_DMAAbortOnError>:
{
 8012734:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012736:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8012738:	2300      	movs	r3, #0
 801273a:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 801273e:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 8012742:	f7f2 f911 	bl	8004968 <HAL_UART_ErrorCallback>
}
 8012746:	bd08      	pop	{r3, pc}

08012748 <HAL_UART_GetState>:
  temp1 = huart->gState;
 8012748:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
  temp2 = huart->RxState;
 801274c:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
}
 8012750:	4310      	orrs	r0, r2
 8012752:	4770      	bx	lr

08012754 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012754:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012756:	07da      	lsls	r2, r3, #31
{
 8012758:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801275a:	d506      	bpl.n	801276a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801275c:	6801      	ldr	r1, [r0, #0]
 801275e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8012760:	684a      	ldr	r2, [r1, #4]
 8012762:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8012766:	4322      	orrs	r2, r4
 8012768:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801276a:	079c      	lsls	r4, r3, #30
 801276c:	d506      	bpl.n	801277c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801276e:	6801      	ldr	r1, [r0, #0]
 8012770:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8012772:	684a      	ldr	r2, [r1, #4]
 8012774:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8012778:	4322      	orrs	r2, r4
 801277a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801277c:	0759      	lsls	r1, r3, #29
 801277e:	d506      	bpl.n	801278e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012780:	6801      	ldr	r1, [r0, #0]
 8012782:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8012784:	684a      	ldr	r2, [r1, #4]
 8012786:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801278a:	4322      	orrs	r2, r4
 801278c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801278e:	071a      	lsls	r2, r3, #28
 8012790:	d506      	bpl.n	80127a0 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012792:	6801      	ldr	r1, [r0, #0]
 8012794:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8012796:	684a      	ldr	r2, [r1, #4]
 8012798:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801279c:	4322      	orrs	r2, r4
 801279e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80127a0:	06dc      	lsls	r4, r3, #27
 80127a2:	d506      	bpl.n	80127b2 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80127a4:	6801      	ldr	r1, [r0, #0]
 80127a6:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80127a8:	688a      	ldr	r2, [r1, #8]
 80127aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80127ae:	4322      	orrs	r2, r4
 80127b0:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80127b2:	0699      	lsls	r1, r3, #26
 80127b4:	d506      	bpl.n	80127c4 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80127b6:	6801      	ldr	r1, [r0, #0]
 80127b8:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80127ba:	688a      	ldr	r2, [r1, #8]
 80127bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80127c0:	4322      	orrs	r2, r4
 80127c2:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80127c4:	065a      	lsls	r2, r3, #25
 80127c6:	d50a      	bpl.n	80127de <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80127c8:	6801      	ldr	r1, [r0, #0]
 80127ca:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80127cc:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80127ce:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80127d2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80127d6:	ea42 0204 	orr.w	r2, r2, r4
 80127da:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80127dc:	d00b      	beq.n	80127f6 <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80127de:	061b      	lsls	r3, r3, #24
 80127e0:	d506      	bpl.n	80127f0 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80127e2:	6802      	ldr	r2, [r0, #0]
 80127e4:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80127e6:	6853      	ldr	r3, [r2, #4]
 80127e8:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80127ec:	430b      	orrs	r3, r1
 80127ee:	6053      	str	r3, [r2, #4]
}
 80127f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80127f4:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80127f6:	684a      	ldr	r2, [r1, #4]
 80127f8:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80127fa:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80127fe:	4322      	orrs	r2, r4
 8012800:	604a      	str	r2, [r1, #4]
 8012802:	e7ec      	b.n	80127de <UART_AdvFeatureConfig+0x8a>

08012804 <UART_CheckIdleState>:
{
 8012804:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012806:	2300      	movs	r3, #0
{
 8012808:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801280a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tickstart = HAL_GetTick();
 801280e:	f7f8 fced 	bl	800b1ec <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012812:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8012814:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012816:	681a      	ldr	r2, [r3, #0]
 8012818:	0711      	lsls	r1, r2, #28
 801281a:	d40c      	bmi.n	8012836 <UART_CheckIdleState+0x32>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801281c:	681a      	ldr	r2, [r3, #0]
 801281e:	0752      	lsls	r2, r2, #29
 8012820:	d430      	bmi.n	8012884 <UART_CheckIdleState+0x80>
  huart->gState = HAL_UART_STATE_READY;
 8012822:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 8012824:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8012826:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
  return HAL_OK;
 801282a:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 801282c:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8012830:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
}
 8012834:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012836:	69da      	ldr	r2, [r3, #28]
 8012838:	0292      	lsls	r2, r2, #10
 801283a:	d4ef      	bmi.n	801281c <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801283c:	f7f8 fcd6 	bl	800b1ec <HAL_GetTick>
 8012840:	1b40      	subs	r0, r0, r5
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8012842:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012844:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 8012848:	d22d      	bcs.n	80128a6 <UART_CheckIdleState+0xa2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801284a:	681a      	ldr	r2, [r3, #0]
 801284c:	0750      	lsls	r0, r2, #29
 801284e:	d5f2      	bpl.n	8012836 <UART_CheckIdleState+0x32>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8012850:	69da      	ldr	r2, [r3, #28]
 8012852:	0511      	lsls	r1, r2, #20
 8012854:	d5ef      	bpl.n	8012836 <UART_CheckIdleState+0x32>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012856:	f44f 6100 	mov.w	r1, #2048	; 0x800
          huart->gState = HAL_UART_STATE_READY;
 801285a:	2220      	movs	r2, #32
          __HAL_UNLOCK(huart);
 801285c:	2500      	movs	r5, #0
      return HAL_TIMEOUT;
 801285e:	2003      	movs	r0, #3
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012860:	6219      	str	r1, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8012862:	6819      	ldr	r1, [r3, #0]
 8012864:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 8012868:	6019      	str	r1, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801286a:	6899      	ldr	r1, [r3, #8]
 801286c:	f021 0101 	bic.w	r1, r1, #1
 8012870:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8012872:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
          __HAL_UNLOCK(huart);
 8012876:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 801287a:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801287e:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
}
 8012882:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012884:	69db      	ldr	r3, [r3, #28]
 8012886:	0258      	lsls	r0, r3, #9
 8012888:	d4cb      	bmi.n	8012822 <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801288a:	f7f8 fcaf 	bl	800b1ec <HAL_GetTick>
 801288e:	1b40      	subs	r0, r0, r5
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8012890:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012892:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 8012896:	d206      	bcs.n	80128a6 <UART_CheckIdleState+0xa2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8012898:	681a      	ldr	r2, [r3, #0]
 801289a:	0751      	lsls	r1, r2, #29
 801289c:	d5f2      	bpl.n	8012884 <UART_CheckIdleState+0x80>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801289e:	69da      	ldr	r2, [r3, #28]
 80128a0:	0512      	lsls	r2, r2, #20
 80128a2:	d5ef      	bpl.n	8012884 <UART_CheckIdleState+0x80>
 80128a4:	e7d7      	b.n	8012856 <UART_CheckIdleState+0x52>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80128a6:	681a      	ldr	r2, [r3, #0]
        huart->gState = HAL_UART_STATE_READY;
 80128a8:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 80128aa:	2500      	movs	r5, #0
      return HAL_TIMEOUT;
 80128ac:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80128ae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80128b2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80128b4:	689a      	ldr	r2, [r3, #8]
 80128b6:	f022 0201 	bic.w	r2, r2, #1
 80128ba:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80128bc:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
        __HAL_UNLOCK(huart);
 80128c0:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80128c4:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
}
 80128c8:	bd38      	pop	{r3, r4, r5, pc}
 80128ca:	bf00      	nop

080128cc <HAL_UART_Init>:
  if (huart == NULL)
 80128cc:	2800      	cmp	r0, #0
 80128ce:	f000 819a 	beq.w	8012c06 <HAL_UART_Init+0x33a>
  if (huart->gState == HAL_UART_STATE_RESET)
 80128d2:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
{
 80128d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128da:	4604      	mov	r4, r0
 80128dc:	b086      	sub	sp, #24
  if (huart->gState == HAL_UART_STATE_RESET)
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d061      	beq.n	80129a6 <HAL_UART_Init+0xda>
  __HAL_UART_DISABLE(huart);
 80128e2:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80128e4:	2024      	movs	r0, #36	; 0x24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80128e6:	6921      	ldr	r1, [r4, #16]
 80128e8:	68a2      	ldr	r2, [r4, #8]
  huart->gState = HAL_UART_STATE_BUSY;
 80128ea:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80128ee:	430a      	orrs	r2, r1
  __HAL_UART_DISABLE(huart);
 80128f0:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80128f2:	6961      	ldr	r1, [r4, #20]
 80128f4:	69e0      	ldr	r0, [r4, #28]
  __HAL_UART_DISABLE(huart);
 80128f6:	f025 0501 	bic.w	r5, r5, #1
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80128fa:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80128fc:	49cb      	ldr	r1, [pc, #812]	; (8012c2c <HAL_UART_Init+0x360>)
  __HAL_UART_DISABLE(huart);
 80128fe:	601d      	str	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012900:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012902:	681e      	ldr	r6, [r3, #0]
  tmpreg |= (uint32_t)huart->FifoMode;
 8012904:	6e65      	ldr	r5, [r4, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012906:	4031      	ands	r1, r6
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8012908:	69a7      	ldr	r7, [r4, #24]
  tmpreg |= (uint32_t)huart->FifoMode;
 801290a:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801290c:	68e6      	ldr	r6, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801290e:	4dc8      	ldr	r5, [pc, #800]	; (8012c30 <HAL_UART_Init+0x364>)
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012910:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8012912:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012914:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012916:	685a      	ldr	r2, [r3, #4]
 8012918:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 801291c:	ea42 0206 	orr.w	r2, r2, r6
 8012920:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8012922:	d045      	beq.n	80129b0 <HAL_UART_Init+0xe4>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012924:	689d      	ldr	r5, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8012926:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012928:	49c2      	ldr	r1, [pc, #776]	; (8012c34 <HAL_UART_Init+0x368>)
    tmpreg |= huart->Init.OneBitSampling;
 801292a:	433a      	orrs	r2, r7
  UART_GETCLOCKSOURCE(huart, clocksource);
 801292c:	4ec2      	ldr	r6, [pc, #776]	; (8012c38 <HAL_UART_Init+0x36c>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801292e:	4029      	ands	r1, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8012930:	6a65      	ldr	r5, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012932:	42b3      	cmp	r3, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012934:	ea42 0201 	orr.w	r2, r2, r1
 8012938:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801293a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801293c:	f022 020f 	bic.w	r2, r2, #15
 8012940:	ea42 0205 	orr.w	r2, r2, r5
 8012944:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012946:	d025      	beq.n	8012994 <HAL_UART_Init+0xc8>
 8012948:	4abc      	ldr	r2, [pc, #752]	; (8012c3c <HAL_UART_Init+0x370>)
 801294a:	4293      	cmp	r3, r2
 801294c:	f000 808c 	beq.w	8012a68 <HAL_UART_Init+0x19c>
 8012950:	4abb      	ldr	r2, [pc, #748]	; (8012c40 <HAL_UART_Init+0x374>)
 8012952:	4293      	cmp	r3, r2
 8012954:	f000 8159 	beq.w	8012c0a <HAL_UART_Init+0x33e>
 8012958:	4aba      	ldr	r2, [pc, #744]	; (8012c44 <HAL_UART_Init+0x378>)
 801295a:	4293      	cmp	r3, r2
 801295c:	f000 813f 	beq.w	8012bde <HAL_UART_Init+0x312>
 8012960:	4ab9      	ldr	r2, [pc, #740]	; (8012c48 <HAL_UART_Init+0x37c>)
 8012962:	4293      	cmp	r3, r2
 8012964:	f000 81fa 	beq.w	8012d5c <HAL_UART_Init+0x490>
 8012968:	4ab8      	ldr	r2, [pc, #736]	; (8012c4c <HAL_UART_Init+0x380>)
 801296a:	4293      	cmp	r3, r2
 801296c:	f000 8265 	beq.w	8012e3a <HAL_UART_Init+0x56e>
 8012970:	4ab7      	ldr	r2, [pc, #732]	; (8012c50 <HAL_UART_Init+0x384>)
 8012972:	4293      	cmp	r3, r2
 8012974:	f000 826b 	beq.w	8012e4e <HAL_UART_Init+0x582>
 8012978:	4ab6      	ldr	r2, [pc, #728]	; (8012c54 <HAL_UART_Init+0x388>)
 801297a:	4293      	cmp	r3, r2
 801297c:	f000 8251 	beq.w	8012e22 <HAL_UART_Init+0x556>
  huart->RxISR = NULL;
 8012980:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8012982:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    return HAL_ERROR;
 8012986:	2001      	movs	r0, #1
  huart->TxISR = NULL;
 8012988:	6723      	str	r3, [r4, #112]	; 0x70
  huart->RxISR = NULL;
 801298a:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68
}
 801298e:	b006      	add	sp, #24
 8012990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012994:	4bb0      	ldr	r3, [pc, #704]	; (8012c58 <HAL_UART_Init+0x38c>)
 8012996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012998:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801299c:	2b28      	cmp	r3, #40	; 0x28
 801299e:	d8ef      	bhi.n	8012980 <HAL_UART_Init+0xb4>
 80129a0:	4aae      	ldr	r2, [pc, #696]	; (8012c5c <HAL_UART_Init+0x390>)
 80129a2:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 80129a4:	e068      	b.n	8012a78 <HAL_UART_Init+0x1ac>
    huart->Lock = HAL_UNLOCKED;
 80129a6:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 80129aa:	f7f3 fe41 	bl	8006630 <HAL_UART_MspInit>
 80129ae:	e798      	b.n	80128e2 <HAL_UART_Init+0x16>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80129b0:	6899      	ldr	r1, [r3, #8]
 80129b2:	4aa0      	ldr	r2, [pc, #640]	; (8012c34 <HAL_UART_Init+0x368>)
  UART_GETCLOCKSOURCE(huart, clocksource);
 80129b4:	48a8      	ldr	r0, [pc, #672]	; (8012c58 <HAL_UART_Init+0x38c>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80129b6:	400a      	ands	r2, r1
 80129b8:	433a      	orrs	r2, r7
 80129ba:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80129bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80129be:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80129c0:	f022 020f 	bic.w	r2, r2, #15
 80129c4:	430a      	orrs	r2, r1
 80129c6:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80129c8:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80129ca:	f003 0307 	and.w	r3, r3, #7
 80129ce:	2b05      	cmp	r3, #5
 80129d0:	d8d6      	bhi.n	8012980 <HAL_UART_Init+0xb4>
 80129d2:	4aa3      	ldr	r2, [pc, #652]	; (8012c60 <HAL_UART_Init+0x394>)
 80129d4:	5cd3      	ldrb	r3, [r2, r3]
    switch (clocksource)
 80129d6:	2b20      	cmp	r3, #32
 80129d8:	f200 8121 	bhi.w	8012c1e <HAL_UART_Init+0x352>
 80129dc:	2b01      	cmp	r3, #1
 80129de:	d9cf      	bls.n	8012980 <HAL_UART_Init+0xb4>
 80129e0:	3b02      	subs	r3, #2
 80129e2:	2b1e      	cmp	r3, #30
 80129e4:	d8cc      	bhi.n	8012980 <HAL_UART_Init+0xb4>
 80129e6:	a201      	add	r2, pc, #4	; (adr r2, 80129ec <HAL_UART_Init+0x120>)
 80129e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80129ec:	08012de3 	.word	0x08012de3
 80129f0:	08012981 	.word	0x08012981
 80129f4:	08012dd9 	.word	0x08012dd9
 80129f8:	08012981 	.word	0x08012981
 80129fc:	08012981 	.word	0x08012981
 8012a00:	08012981 	.word	0x08012981
 8012a04:	08012dc9 	.word	0x08012dc9
 8012a08:	08012981 	.word	0x08012981
 8012a0c:	08012981 	.word	0x08012981
 8012a10:	08012981 	.word	0x08012981
 8012a14:	08012981 	.word	0x08012981
 8012a18:	08012981 	.word	0x08012981
 8012a1c:	08012981 	.word	0x08012981
 8012a20:	08012981 	.word	0x08012981
 8012a24:	08012db5 	.word	0x08012db5
 8012a28:	08012981 	.word	0x08012981
 8012a2c:	08012981 	.word	0x08012981
 8012a30:	08012981 	.word	0x08012981
 8012a34:	08012981 	.word	0x08012981
 8012a38:	08012981 	.word	0x08012981
 8012a3c:	08012981 	.word	0x08012981
 8012a40:	08012981 	.word	0x08012981
 8012a44:	08012981 	.word	0x08012981
 8012a48:	08012981 	.word	0x08012981
 8012a4c:	08012981 	.word	0x08012981
 8012a50:	08012981 	.word	0x08012981
 8012a54:	08012981 	.word	0x08012981
 8012a58:	08012981 	.word	0x08012981
 8012a5c:	08012981 	.word	0x08012981
 8012a60:	08012981 	.word	0x08012981
 8012a64:	08012b7b 	.word	0x08012b7b
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012a68:	4b7b      	ldr	r3, [pc, #492]	; (8012c58 <HAL_UART_Init+0x38c>)
 8012a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012a6c:	f003 0307 	and.w	r3, r3, #7
 8012a70:	2b05      	cmp	r3, #5
 8012a72:	d885      	bhi.n	8012980 <HAL_UART_Init+0xb4>
 8012a74:	4a7b      	ldr	r2, [pc, #492]	; (8012c64 <HAL_UART_Init+0x398>)
 8012a76:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012a78:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8012a7c:	f000 80fe 	beq.w	8012c7c <HAL_UART_Init+0x3b0>
    switch (clocksource)
 8012a80:	2b20      	cmp	r3, #32
 8012a82:	f200 80ba 	bhi.w	8012bfa <HAL_UART_Init+0x32e>
 8012a86:	2b20      	cmp	r3, #32
 8012a88:	f63f af7a 	bhi.w	8012980 <HAL_UART_Init+0xb4>
 8012a8c:	a201      	add	r2, pc, #4	; (adr r2, 8012a94 <HAL_UART_Init+0x1c8>)
 8012a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a92:	bf00      	nop
 8012a94:	08012daf 	.word	0x08012daf
 8012a98:	08012da9 	.word	0x08012da9
 8012a9c:	08012981 	.word	0x08012981
 8012aa0:	08012981 	.word	0x08012981
 8012aa4:	08012d9f 	.word	0x08012d9f
 8012aa8:	08012981 	.word	0x08012981
 8012aac:	08012981 	.word	0x08012981
 8012ab0:	08012981 	.word	0x08012981
 8012ab4:	08012d85 	.word	0x08012d85
 8012ab8:	08012981 	.word	0x08012981
 8012abc:	08012981 	.word	0x08012981
 8012ac0:	08012981 	.word	0x08012981
 8012ac4:	08012981 	.word	0x08012981
 8012ac8:	08012981 	.word	0x08012981
 8012acc:	08012981 	.word	0x08012981
 8012ad0:	08012981 	.word	0x08012981
 8012ad4:	08012d71 	.word	0x08012d71
 8012ad8:	08012981 	.word	0x08012981
 8012adc:	08012981 	.word	0x08012981
 8012ae0:	08012981 	.word	0x08012981
 8012ae4:	08012981 	.word	0x08012981
 8012ae8:	08012981 	.word	0x08012981
 8012aec:	08012981 	.word	0x08012981
 8012af0:	08012981 	.word	0x08012981
 8012af4:	08012981 	.word	0x08012981
 8012af8:	08012981 	.word	0x08012981
 8012afc:	08012981 	.word	0x08012981
 8012b00:	08012981 	.word	0x08012981
 8012b04:	08012981 	.word	0x08012981
 8012b08:	08012981 	.word	0x08012981
 8012b0c:	08012981 	.word	0x08012981
 8012b10:	08012981 	.word	0x08012981
 8012b14:	08012b19 	.word	0x08012b19
        pclk = (uint32_t) CSI_VALUE;
 8012b18:	4853      	ldr	r0, [pc, #332]	; (8012c68 <HAL_UART_Init+0x39c>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012b1a:	4b54      	ldr	r3, [pc, #336]	; (8012c6c <HAL_UART_Init+0x3a0>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012b1c:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012b20:	6862      	ldr	r2, [r4, #4]
 8012b22:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8012b26:	fbb0 f3f3 	udiv	r3, r0, r3
 8012b2a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8012b2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8012b32:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012b34:	f1a3 0210 	sub.w	r2, r3, #16
 8012b38:	428a      	cmp	r2, r1
 8012b3a:	f63f af21 	bhi.w	8012980 <HAL_UART_Init+0xb4>
  huart->RxISR = NULL;
 8012b3e:	2200      	movs	r2, #0
        huart->Instance->BRR = usartdiv;
 8012b40:	6820      	ldr	r0, [r4, #0]
  huart->NbRxDataToProcess = 1;
 8012b42:	f04f 1101 	mov.w	r1, #65537	; 0x10001
        huart->Instance->BRR = usartdiv;
 8012b46:	60c3      	str	r3, [r0, #12]
  huart->TxISR = NULL;
 8012b48:	6722      	str	r2, [r4, #112]	; 0x70
  huart->RxISR = NULL;
 8012b4a:	e9c4 121a 	strd	r1, r2, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012b4e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d14e      	bne.n	8012bf2 <HAL_UART_Init+0x326>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012b54:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8012b56:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012b58:	685a      	ldr	r2, [r3, #4]
 8012b5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8012b5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012b60:	689a      	ldr	r2, [r3, #8]
 8012b62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8012b66:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8012b68:	681a      	ldr	r2, [r3, #0]
 8012b6a:	f042 0201 	orr.w	r2, r2, #1
 8012b6e:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8012b70:	f7ff fe48 	bl	8012804 <UART_CheckIdleState>
}
 8012b74:	b006      	add	sp, #24
 8012b76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        pclk = (uint32_t) CSI_VALUE;
 8012b7a:	483b      	ldr	r0, [pc, #236]	; (8012c68 <HAL_UART_Init+0x39c>)
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8012b7c:	4b3b      	ldr	r3, [pc, #236]	; (8012c6c <HAL_UART_Init+0x3a0>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012b7e:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8012b80:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012b84:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8012b88:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012b8c:	428b      	cmp	r3, r1
 8012b8e:	f4ff aef7 	bcc.w	8012980 <HAL_UART_Init+0xb4>
 8012b92:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8012b96:	f63f aef3 	bhi.w	8012980 <HAL_UART_Init+0xb4>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012b9a:	f04f 0800 	mov.w	r8, #0
 8012b9e:	2300      	movs	r3, #0
 8012ba0:	4641      	mov	r1, r8
 8012ba2:	f7ed fc05 	bl	80003b0 <__aeabi_uldivmod>
 8012ba6:	462a      	mov	r2, r5
 8012ba8:	ea4f 0c55 	mov.w	ip, r5, lsr #1
 8012bac:	4643      	mov	r3, r8
 8012bae:	020f      	lsls	r7, r1, #8
 8012bb0:	0206      	lsls	r6, r0, #8
 8012bb2:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8012bb6:	eb16 000c 	adds.w	r0, r6, ip
 8012bba:	f147 0100 	adc.w	r1, r7, #0
 8012bbe:	f7ed fbf7 	bl	80003b0 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8012bc2:	4b2b      	ldr	r3, [pc, #172]	; (8012c70 <HAL_UART_Init+0x3a4>)
 8012bc4:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8012bc8:	429a      	cmp	r2, r3
 8012bca:	f63f aed9 	bhi.w	8012980 <HAL_UART_Init+0xb4>
          huart->Instance->BRR = usartdiv;
 8012bce:	6822      	ldr	r2, [r4, #0]
  huart->NbRxDataToProcess = 1;
 8012bd0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
          huart->Instance->BRR = usartdiv;
 8012bd4:	60d0      	str	r0, [r2, #12]
  huart->NbRxDataToProcess = 1;
 8012bd6:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8012bd8:	e9c4 881b 	strd	r8, r8, [r4, #108]	; 0x6c
  return ret;
 8012bdc:	e7b7      	b.n	8012b4e <HAL_UART_Init+0x282>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012bde:	4b1e      	ldr	r3, [pc, #120]	; (8012c58 <HAL_UART_Init+0x38c>)
 8012be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012be2:	f003 0307 	and.w	r3, r3, #7
 8012be6:	2b05      	cmp	r3, #5
 8012be8:	f63f aeca 	bhi.w	8012980 <HAL_UART_Init+0xb4>
 8012bec:	4a21      	ldr	r2, [pc, #132]	; (8012c74 <HAL_UART_Init+0x3a8>)
 8012bee:	5cd3      	ldrb	r3, [r2, r3]
 8012bf0:	e742      	b.n	8012a78 <HAL_UART_Init+0x1ac>
    UART_AdvFeatureConfig(huart);
 8012bf2:	4620      	mov	r0, r4
 8012bf4:	f7ff fdae 	bl	8012754 <UART_AdvFeatureConfig>
 8012bf8:	e7ac      	b.n	8012b54 <HAL_UART_Init+0x288>
    switch (clocksource)
 8012bfa:	2b40      	cmp	r3, #64	; 0x40
 8012bfc:	f47f aec0 	bne.w	8012980 <HAL_UART_Init+0xb4>
 8012c00:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8012c04:	e789      	b.n	8012b1a <HAL_UART_Init+0x24e>
    return HAL_ERROR;
 8012c06:	2001      	movs	r0, #1
}
 8012c08:	4770      	bx	lr
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012c0a:	4b13      	ldr	r3, [pc, #76]	; (8012c58 <HAL_UART_Init+0x38c>)
 8012c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012c0e:	f003 0307 	and.w	r3, r3, #7
 8012c12:	2b05      	cmp	r3, #5
 8012c14:	f63f aeb4 	bhi.w	8012980 <HAL_UART_Init+0xb4>
 8012c18:	4a17      	ldr	r2, [pc, #92]	; (8012c78 <HAL_UART_Init+0x3ac>)
 8012c1a:	5cd3      	ldrb	r3, [r2, r3]
 8012c1c:	e72c      	b.n	8012a78 <HAL_UART_Init+0x1ac>
    switch (clocksource)
 8012c1e:	2b40      	cmp	r3, #64	; 0x40
 8012c20:	f47f aeae 	bne.w	8012980 <HAL_UART_Init+0xb4>
 8012c24:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8012c28:	e7a8      	b.n	8012b7c <HAL_UART_Init+0x2b0>
 8012c2a:	bf00      	nop
 8012c2c:	cfff69f3 	.word	0xcfff69f3
 8012c30:	58000c00 	.word	0x58000c00
 8012c34:	11fff4ff 	.word	0x11fff4ff
 8012c38:	40011000 	.word	0x40011000
 8012c3c:	40004400 	.word	0x40004400
 8012c40:	40004800 	.word	0x40004800
 8012c44:	40004c00 	.word	0x40004c00
 8012c48:	40005000 	.word	0x40005000
 8012c4c:	40011400 	.word	0x40011400
 8012c50:	40007800 	.word	0x40007800
 8012c54:	40007c00 	.word	0x40007c00
 8012c58:	58024400 	.word	0x58024400
 8012c5c:	08097a60 	.word	0x08097a60
 8012c60:	08097a94 	.word	0x08097a94
 8012c64:	08097a8c 	.word	0x08097a8c
 8012c68:	003d0900 	.word	0x003d0900
 8012c6c:	08097a9c 	.word	0x08097a9c
 8012c70:	000ffcff 	.word	0x000ffcff
 8012c74:	08097a8c 	.word	0x08097a8c
 8012c78:	08097a8c 	.word	0x08097a8c
    switch (clocksource)
 8012c7c:	2b20      	cmp	r3, #32
 8012c7e:	d86a      	bhi.n	8012d56 <HAL_UART_Init+0x48a>
 8012c80:	2b20      	cmp	r3, #32
 8012c82:	f63f ae7d 	bhi.w	8012980 <HAL_UART_Init+0xb4>
 8012c86:	a201      	add	r2, pc, #4	; (adr r2, 8012c8c <HAL_UART_Init+0x3c0>)
 8012c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c8c:	08012df5 	.word	0x08012df5
 8012c90:	08012de9 	.word	0x08012de9
 8012c94:	08012981 	.word	0x08012981
 8012c98:	08012981 	.word	0x08012981
 8012c9c:	08012e19 	.word	0x08012e19
 8012ca0:	08012981 	.word	0x08012981
 8012ca4:	08012981 	.word	0x08012981
 8012ca8:	08012981 	.word	0x08012981
 8012cac:	08012e0f 	.word	0x08012e0f
 8012cb0:	08012981 	.word	0x08012981
 8012cb4:	08012981 	.word	0x08012981
 8012cb8:	08012981 	.word	0x08012981
 8012cbc:	08012981 	.word	0x08012981
 8012cc0:	08012981 	.word	0x08012981
 8012cc4:	08012981 	.word	0x08012981
 8012cc8:	08012981 	.word	0x08012981
 8012ccc:	08012dfb 	.word	0x08012dfb
 8012cd0:	08012981 	.word	0x08012981
 8012cd4:	08012981 	.word	0x08012981
 8012cd8:	08012981 	.word	0x08012981
 8012cdc:	08012981 	.word	0x08012981
 8012ce0:	08012981 	.word	0x08012981
 8012ce4:	08012981 	.word	0x08012981
 8012ce8:	08012981 	.word	0x08012981
 8012cec:	08012981 	.word	0x08012981
 8012cf0:	08012981 	.word	0x08012981
 8012cf4:	08012981 	.word	0x08012981
 8012cf8:	08012981 	.word	0x08012981
 8012cfc:	08012981 	.word	0x08012981
 8012d00:	08012981 	.word	0x08012981
 8012d04:	08012981 	.word	0x08012981
 8012d08:	08012981 	.word	0x08012981
 8012d0c:	08012d11 	.word	0x08012d11
        pclk = (uint32_t) CSI_VALUE;
 8012d10:	4857      	ldr	r0, [pc, #348]	; (8012e70 <HAL_UART_Init+0x5a4>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012d12:	4b58      	ldr	r3, [pc, #352]	; (8012e74 <HAL_UART_Init+0x5a8>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012d14:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012d18:	6862      	ldr	r2, [r4, #4]
 8012d1a:	f833 5015 	ldrh.w	r5, [r3, r5, lsl #1]
 8012d1e:	0853      	lsrs	r3, r2, #1
 8012d20:	fbb0 f0f5 	udiv	r0, r0, r5
 8012d24:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8012d28:	fbb0 f0f2 	udiv	r0, r0, r2
 8012d2c:	b282      	uxth	r2, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012d2e:	f1a2 0310 	sub.w	r3, r2, #16
 8012d32:	428b      	cmp	r3, r1
 8012d34:	f63f ae24 	bhi.w	8012980 <HAL_UART_Init+0xb4>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012d38:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8012d3c:	f3c2 0242 	ubfx	r2, r2, #1, #3
  huart->RxISR = NULL;
 8012d40:	2100      	movs	r1, #0
        huart->Instance->BRR = brrtemp;
 8012d42:	6825      	ldr	r5, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012d44:	b29b      	uxth	r3, r3
  huart->NbRxDataToProcess = 1;
 8012d46:	f04f 1001 	mov.w	r0, #65537	; 0x10001
        huart->Instance->BRR = brrtemp;
 8012d4a:	4313      	orrs	r3, r2
 8012d4c:	60eb      	str	r3, [r5, #12]
  huart->TxISR = NULL;
 8012d4e:	6721      	str	r1, [r4, #112]	; 0x70
  huart->RxISR = NULL;
 8012d50:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
 8012d54:	e6fb      	b.n	8012b4e <HAL_UART_Init+0x282>
    switch (clocksource)
 8012d56:	2b40      	cmp	r3, #64	; 0x40
 8012d58:	d0db      	beq.n	8012d12 <HAL_UART_Init+0x446>
 8012d5a:	e611      	b.n	8012980 <HAL_UART_Init+0xb4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012d5c:	4b46      	ldr	r3, [pc, #280]	; (8012e78 <HAL_UART_Init+0x5ac>)
 8012d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012d60:	f003 0307 	and.w	r3, r3, #7
 8012d64:	2b05      	cmp	r3, #5
 8012d66:	f63f ae0b 	bhi.w	8012980 <HAL_UART_Init+0xb4>
 8012d6a:	4a44      	ldr	r2, [pc, #272]	; (8012e7c <HAL_UART_Init+0x5b0>)
 8012d6c:	5cd3      	ldrb	r3, [r2, r3]
 8012d6e:	e683      	b.n	8012a78 <HAL_UART_Init+0x1ac>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012d70:	4b41      	ldr	r3, [pc, #260]	; (8012e78 <HAL_UART_Init+0x5ac>)
 8012d72:	681a      	ldr	r2, [r3, #0]
 8012d74:	0692      	lsls	r2, r2, #26
 8012d76:	d574      	bpl.n	8012e62 <HAL_UART_Init+0x596>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	4841      	ldr	r0, [pc, #260]	; (8012e80 <HAL_UART_Init+0x5b4>)
 8012d7c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8012d80:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8012d82:	e6ca      	b.n	8012b1a <HAL_UART_Init+0x24e>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012d84:	a803      	add	r0, sp, #12
 8012d86:	f7fd fe63 	bl	8010a50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012d8a:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 8012d8c:	2800      	cmp	r0, #0
 8012d8e:	d152      	bne.n	8012e36 <HAL_UART_Init+0x56a>
  huart->RxISR = NULL;
 8012d90:	2300      	movs	r3, #0
 8012d92:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->TxISR = NULL;
 8012d96:	6723      	str	r3, [r4, #112]	; 0x70
  huart->RxISR = NULL;
 8012d98:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68
 8012d9c:	e6d7      	b.n	8012b4e <HAL_UART_Init+0x282>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012d9e:	4668      	mov	r0, sp
 8012da0:	f7fd fdaa 	bl	80108f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012da4:	9801      	ldr	r0, [sp, #4]
        break;
 8012da6:	e7f1      	b.n	8012d8c <HAL_UART_Init+0x4c0>
        pclk = HAL_RCC_GetPCLK2Freq();
 8012da8:	f7fc fea8 	bl	800fafc <HAL_RCC_GetPCLK2Freq>
        break;
 8012dac:	e7ee      	b.n	8012d8c <HAL_UART_Init+0x4c0>
        pclk = HAL_RCC_GetPCLK1Freq();
 8012dae:	f7fc fe5d 	bl	800fa6c <HAL_RCC_GetPCLK1Freq>
        break;
 8012db2:	e7eb      	b.n	8012d8c <HAL_UART_Init+0x4c0>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012db4:	4b30      	ldr	r3, [pc, #192]	; (8012e78 <HAL_UART_Init+0x5ac>)
 8012db6:	681a      	ldr	r2, [r3, #0]
 8012db8:	0690      	lsls	r0, r2, #26
 8012dba:	d554      	bpl.n	8012e66 <HAL_UART_Init+0x59a>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012dbc:	681b      	ldr	r3, [r3, #0]
 8012dbe:	4830      	ldr	r0, [pc, #192]	; (8012e80 <HAL_UART_Init+0x5b4>)
 8012dc0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8012dc4:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8012dc6:	e6d9      	b.n	8012b7c <HAL_UART_Init+0x2b0>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012dc8:	a803      	add	r0, sp, #12
 8012dca:	f7fd fe41 	bl	8010a50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012dce:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 8012dd0:	2800      	cmp	r0, #0
 8012dd2:	d0dd      	beq.n	8012d90 <HAL_UART_Init+0x4c4>
 8012dd4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012dd6:	e6d1      	b.n	8012b7c <HAL_UART_Init+0x2b0>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012dd8:	4668      	mov	r0, sp
 8012dda:	f7fd fd8d 	bl	80108f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012dde:	9801      	ldr	r0, [sp, #4]
        break;
 8012de0:	e7f6      	b.n	8012dd0 <HAL_UART_Init+0x504>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8012de2:	f7fd fd77 	bl	80108d4 <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 8012de6:	e7f3      	b.n	8012dd0 <HAL_UART_Init+0x504>
        pclk = HAL_RCC_GetPCLK2Freq();
 8012de8:	f7fc fe88 	bl	800fafc <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8012dec:	2800      	cmp	r0, #0
 8012dee:	d0cf      	beq.n	8012d90 <HAL_UART_Init+0x4c4>
 8012df0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8012df2:	e78e      	b.n	8012d12 <HAL_UART_Init+0x446>
        pclk = HAL_RCC_GetPCLK1Freq();
 8012df4:	f7fc fe3a 	bl	800fa6c <HAL_RCC_GetPCLK1Freq>
        break;
 8012df8:	e7f8      	b.n	8012dec <HAL_UART_Init+0x520>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012dfa:	4b1f      	ldr	r3, [pc, #124]	; (8012e78 <HAL_UART_Init+0x5ac>)
 8012dfc:	681a      	ldr	r2, [r3, #0]
 8012dfe:	0691      	lsls	r1, r2, #26
 8012e00:	d533      	bpl.n	8012e6a <HAL_UART_Init+0x59e>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	481e      	ldr	r0, [pc, #120]	; (8012e80 <HAL_UART_Init+0x5b4>)
 8012e06:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8012e0a:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8012e0c:	e781      	b.n	8012d12 <HAL_UART_Init+0x446>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012e0e:	a803      	add	r0, sp, #12
 8012e10:	f7fd fe1e 	bl	8010a50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012e14:	9804      	ldr	r0, [sp, #16]
        break;
 8012e16:	e7e9      	b.n	8012dec <HAL_UART_Init+0x520>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012e18:	4668      	mov	r0, sp
 8012e1a:	f7fd fd6d 	bl	80108f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012e1e:	9801      	ldr	r0, [sp, #4]
        break;
 8012e20:	e7e4      	b.n	8012dec <HAL_UART_Init+0x520>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012e22:	4b15      	ldr	r3, [pc, #84]	; (8012e78 <HAL_UART_Init+0x5ac>)
 8012e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012e26:	f003 0307 	and.w	r3, r3, #7
 8012e2a:	2b05      	cmp	r3, #5
 8012e2c:	f63f ada8 	bhi.w	8012980 <HAL_UART_Init+0xb4>
 8012e30:	4a14      	ldr	r2, [pc, #80]	; (8012e84 <HAL_UART_Init+0x5b8>)
 8012e32:	5cd3      	ldrb	r3, [r2, r3]
 8012e34:	e620      	b.n	8012a78 <HAL_UART_Init+0x1ac>
 8012e36:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8012e38:	e66f      	b.n	8012b1a <HAL_UART_Init+0x24e>
 8012e3a:	4b0f      	ldr	r3, [pc, #60]	; (8012e78 <HAL_UART_Init+0x5ac>)
 8012e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012e3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012e42:	2b28      	cmp	r3, #40	; 0x28
 8012e44:	f63f ad9c 	bhi.w	8012980 <HAL_UART_Init+0xb4>
 8012e48:	4a0f      	ldr	r2, [pc, #60]	; (8012e88 <HAL_UART_Init+0x5bc>)
 8012e4a:	5cd3      	ldrb	r3, [r2, r3]
 8012e4c:	e614      	b.n	8012a78 <HAL_UART_Init+0x1ac>
 8012e4e:	4b0a      	ldr	r3, [pc, #40]	; (8012e78 <HAL_UART_Init+0x5ac>)
 8012e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012e52:	f003 0307 	and.w	r3, r3, #7
 8012e56:	2b05      	cmp	r3, #5
 8012e58:	f63f ad92 	bhi.w	8012980 <HAL_UART_Init+0xb4>
 8012e5c:	4a0b      	ldr	r2, [pc, #44]	; (8012e8c <HAL_UART_Init+0x5c0>)
 8012e5e:	5cd3      	ldrb	r3, [r2, r3]
 8012e60:	e60a      	b.n	8012a78 <HAL_UART_Init+0x1ac>
          pclk = (uint32_t) HSI_VALUE;
 8012e62:	4807      	ldr	r0, [pc, #28]	; (8012e80 <HAL_UART_Init+0x5b4>)
 8012e64:	e659      	b.n	8012b1a <HAL_UART_Init+0x24e>
          pclk = (uint32_t) HSI_VALUE;
 8012e66:	4806      	ldr	r0, [pc, #24]	; (8012e80 <HAL_UART_Init+0x5b4>)
 8012e68:	e688      	b.n	8012b7c <HAL_UART_Init+0x2b0>
          pclk = (uint32_t) HSI_VALUE;
 8012e6a:	4805      	ldr	r0, [pc, #20]	; (8012e80 <HAL_UART_Init+0x5b4>)
 8012e6c:	e751      	b.n	8012d12 <HAL_UART_Init+0x446>
 8012e6e:	bf00      	nop
 8012e70:	003d0900 	.word	0x003d0900
 8012e74:	08097a9c 	.word	0x08097a9c
 8012e78:	58024400 	.word	0x58024400
 8012e7c:	08097a8c 	.word	0x08097a8c
 8012e80:	03d09000 	.word	0x03d09000
 8012e84:	08097a8c 	.word	0x08097a8c
 8012e88:	08097a60 	.word	0x08097a60
 8012e8c:	08097a8c 	.word	0x08097a8c

08012e90 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012e90:	4770      	bx	lr
 8012e92:	bf00      	nop

08012e94 <HAL_UARTEx_RxFifoFullCallback>:
 8012e94:	4770      	bx	lr
 8012e96:	bf00      	nop

08012e98 <HAL_UARTEx_TxFifoEmptyCallback>:
 8012e98:	4770      	bx	lr
 8012e9a:	bf00      	nop

08012e9c <DelayBlock_Enable>:
  * @brief  Enable the Delay Block instance.
  * @param  DLYBx: Pointer to DLYB instance.
  * @retval HAL status
  */
HAL_StatusTypeDef DelayBlock_Enable(DLYB_TypeDef *DLYBx)
{
 8012e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t unit_current;
  uint32_t tuning;
  uint32_t lng_mask;
  uint32_t tickstart;

  DLYBx->CR = DLYB_CR_DEN | DLYB_CR_SEN;
 8012ea0:	2700      	movs	r7, #0
{
 8012ea2:	b083      	sub	sp, #12
  DLYBx->CR = DLYB_CR_DEN | DLYB_CR_SEN;
 8012ea4:	2303      	movs	r3, #3

  for (sel_current = 0U; sel_current < DLYB_MAX_SELECT; sel_current++)
  {
    /* lng_mask is the mask bit for the LNG field to check the output of the UNITx*/
    lng_mask = DLYB_CFGR_LNG_0 << sel_current;
 8012ea6:	f44f 3980 	mov.w	r9, #65536	; 0x10000
{
 8012eaa:	4604      	mov	r4, r0
  uint32_t sel = 0U;
 8012eac:	46bb      	mov	fp, r7
  uint32_t unit = 0U;
 8012eae:	9701      	str	r7, [sp, #4]
  DLYBx->CR = DLYB_CR_DEN | DLYB_CR_SEN;
 8012eb0:	6003      	str	r3, [r0, #0]
    tuning = 0U;
 8012eb2:	f04f 0800 	mov.w	r8, #0
    lng_mask = DLYB_CFGR_LNG_0 << sel_current;
 8012eb6:	fa09 fa07 	lsl.w	sl, r9, r7
    for (unit_current = 0U; unit_current < DLYB_MAX_UNIT; unit_current++)
 8012eba:	4646      	mov	r6, r8
    {
      /* Set the Delay of the UNIT(s)*/
      DLYBx->CFGR = DLYB_MAX_SELECT | (unit_current << DLYB_CFGR_UNIT_Pos);
 8012ebc:	0233      	lsls	r3, r6, #8
 8012ebe:	f043 030c 	orr.w	r3, r3, #12
 8012ec2:	6063      	str	r3, [r4, #4]

      /* Waiting for a LNG valid value */
      tickstart =  HAL_GetTick();
 8012ec4:	f7f8 f992 	bl	800b1ec <HAL_GetTick>
 8012ec8:	4605      	mov	r5, r0
      while ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 8012eca:	e004      	b.n	8012ed6 <DelayBlock_Enable+0x3a>
      {
        if((HAL_GetTick() - tickstart) >=  DLYB_TIMEOUT)
 8012ecc:	f7f8 f98e 	bl	800b1ec <HAL_GetTick>
 8012ed0:	1b40      	subs	r0, r0, r5
 8012ed2:	28fe      	cmp	r0, #254	; 0xfe
 8012ed4:	d81a      	bhi.n	8012f0c <DelayBlock_Enable+0x70>
      while ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 8012ed6:	6863      	ldr	r3, [r4, #4]
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	daf7      	bge.n	8012ecc <DelayBlock_Enable+0x30>
          return HAL_TIMEOUT;
        }
      }
      if (tuning == 0U)
      {
        if ((DLYBx->CFGR & lng_mask) != 0U)
 8012edc:	6863      	ldr	r3, [r4, #4]
      if (tuning == 0U)
 8012ede:	f1b8 0f00 	cmp.w	r8, #0
 8012ee2:	d017      	beq.n	8012f14 <DelayBlock_Enable+0x78>
        }
      }
      else
      {
        /* 1/2 period LOW detected after the HIGH 1/2 period => FULL PERIOD passed*/
        if((DLYBx->CFGR & lng_mask ) == 0U)
 8012ee4:	ea13 0f0a 	tst.w	r3, sl
 8012ee8:	d01c      	beq.n	8012f24 <DelayBlock_Enable+0x88>
    for (unit_current = 0U; unit_current < DLYB_MAX_UNIT; unit_current++)
 8012eea:	3601      	adds	r6, #1
 8012eec:	2e80      	cmp	r6, #128	; 0x80
 8012eee:	d1e5      	bne.n	8012ebc <DelayBlock_Enable+0x20>
 8012ef0:	3701      	adds	r7, #1
  for (sel_current = 0U; sel_current < DLYB_MAX_SELECT; sel_current++)
 8012ef2:	2f0c      	cmp	r7, #12
 8012ef4:	d1dd      	bne.n	8012eb2 <DelayBlock_Enable+0x16>
  }

  /* Apply the Tuning settings */
  DLYBx->CR   = 0U;
  DLYBx->CR   = DLYB_CR_DEN | DLYB_CR_SEN;
  DLYBx->CFGR = sel | (unit << DLYB_CFGR_UNIT_Pos);
 8012ef6:	9b01      	ldr	r3, [sp, #4]
  DLYBx->CR   = 0U;
 8012ef8:	2000      	movs	r0, #0
  DLYBx->CR   = DLYB_CR_DEN | DLYB_CR_SEN;
 8012efa:	2103      	movs	r1, #3
  DLYBx->CR   = DLYB_CR_DEN;
 8012efc:	2201      	movs	r2, #1
  DLYBx->CFGR = sel | (unit << DLYB_CFGR_UNIT_Pos);
 8012efe:	ea4b 2303 	orr.w	r3, fp, r3, lsl #8
  DLYBx->CR   = 0U;
 8012f02:	6020      	str	r0, [r4, #0]
  DLYBx->CR   = DLYB_CR_DEN | DLYB_CR_SEN;
 8012f04:	6021      	str	r1, [r4, #0]
  DLYBx->CFGR = sel | (unit << DLYB_CFGR_UNIT_Pos);
 8012f06:	6063      	str	r3, [r4, #4]
  DLYBx->CR   = DLYB_CR_DEN;
 8012f08:	6022      	str	r2, [r4, #0]

  return HAL_OK;
 8012f0a:	e000      	b.n	8012f0e <DelayBlock_Enable+0x72>
          return HAL_TIMEOUT;
 8012f0c:	2003      	movs	r0, #3
}
 8012f0e:	b003      	add	sp, #12
 8012f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((DLYBx->CFGR & lng_mask) != 0U)
 8012f14:	ea13 0f0a 	tst.w	r3, sl
 8012f18:	bf14      	ite	ne
 8012f1a:	f04f 0801 	movne.w	r8, #1
 8012f1e:	f04f 0800 	moveq.w	r8, #0
 8012f22:	e7e2      	b.n	8012eea <DelayBlock_Enable+0x4e>
          if( unit == 0U )
 8012f24:	9b01      	ldr	r3, [sp, #4]
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d1e2      	bne.n	8012ef0 <DelayBlock_Enable+0x54>
            sel  = sel_current + 1U;
 8012f2a:	f107 0b01 	add.w	fp, r7, #1
          if( unit == 0U )
 8012f2e:	9601      	str	r6, [sp, #4]
 8012f30:	465f      	mov	r7, fp
 8012f32:	e7de      	b.n	8012ef2 <DelayBlock_Enable+0x56>

08012f34 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8012f34:	b084      	sub	sp, #16
 8012f36:	b470      	push	{r4, r5, r6}
 8012f38:	ae04      	add	r6, sp, #16
 8012f3a:	4605      	mov	r5, r0
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
             Init.ClockPowerSave      |\
             Init.BusWide             |\
 8012f3c:	9c07      	ldr	r4, [sp, #28]

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);

  return HAL_OK;
}
 8012f3e:	2000      	movs	r0, #0
{
 8012f40:	e886 000e 	stmia.w	r6, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 8012f44:	460b      	mov	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8012f46:	686e      	ldr	r6, [r5, #4]
             Init.ClockPowerSave      |\
 8012f48:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
  tmpreg |= (Init.ClockEdge           |\
 8012f4c:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 8012f4e:	9908      	ldr	r1, [sp, #32]
             Init.ClockPowerSave      |\
 8012f50:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8012f52:	4a04      	ldr	r2, [pc, #16]	; (8012f64 <SDMMC_Init+0x30>)
             Init.BusWide             |\
 8012f54:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8012f56:	4032      	ands	r2, r6
             Init.HardwareFlowControl |\
 8012f58:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8012f5a:	4313      	orrs	r3, r2
 8012f5c:	606b      	str	r3, [r5, #4]
}
 8012f5e:	bc70      	pop	{r4, r5, r6}
 8012f60:	b004      	add	sp, #16
 8012f62:	4770      	bx	lr
 8012f64:	ffc02c00 	.word	0xffc02c00

08012f68 <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8012f68:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8012f6c:	4770      	bx	lr
 8012f6e:	bf00      	nop

08012f70 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8012f70:	4603      	mov	r3, r0
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8012f72:	680a      	ldr	r2, [r1, #0]

  return HAL_OK;
}
 8012f74:	2000      	movs	r0, #0
  SDMMCx->FIFO = *pWriteData;
 8012f76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8012f7a:	4770      	bx	lr

08012f7c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8012f7c:	4603      	mov	r3, r0
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;

  return HAL_OK;
}
 8012f7e:	2000      	movs	r0, #0
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8012f80:	681a      	ldr	r2, [r3, #0]
 8012f82:	f042 0203 	orr.w	r2, r2, #3
 8012f86:	601a      	str	r2, [r3, #0]
}
 8012f88:	4770      	bx	lr
 8012f8a:	bf00      	nop

08012f8c <SDMMC_PowerState_OFF>:
  * @brief  Set SDMMC Power state to OFF.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_OFF(SDMMC_TypeDef *SDMMCx)
{
 8012f8c:	4603      	mov	r3, r0
  /* Set power state to OFF */
  SDMMCx->POWER &= ~(SDMMC_POWER_PWRCTRL);

  return HAL_OK;
}
 8012f8e:	2000      	movs	r0, #0
  SDMMCx->POWER &= ~(SDMMC_POWER_PWRCTRL);
 8012f90:	681a      	ldr	r2, [r3, #0]
 8012f92:	f022 0203 	bic.w	r2, r2, #3
 8012f96:	601a      	str	r2, [r3, #0]
}
 8012f98:	4770      	bx	lr
 8012f9a:	bf00      	nop

08012f9c <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8012f9c:	6800      	ldr	r0, [r0, #0]
}
 8012f9e:	f000 0003 	and.w	r0, r0, #3
 8012fa2:	4770      	bx	lr

08012fa4 <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8012fa4:	3014      	adds	r0, #20

  return (*(__IO uint32_t *) tmp);
 8012fa6:	5840      	ldr	r0, [r0, r1]
}
 8012fa8:	4770      	bx	lr
 8012faa:	bf00      	nop

08012fac <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8012fac:	b430      	push	{r4, r5}
 8012fae:	4602      	mov	r2, r0
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8012fb0:	680c      	ldr	r4, [r1, #0]
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);

  return HAL_OK;

}
 8012fb2:	2000      	movs	r0, #0
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8012fb4:	e9d1 3502 	ldrd	r3, r5, [r1, #8]
 8012fb8:	432b      	orrs	r3, r5
  SDMMCx->DLEN = Data->DataLength;
 8012fba:	684d      	ldr	r5, [r1, #4]
  SDMMCx->DTIMER = Data->DataTimeOut;
 8012fbc:	6254      	str	r4, [r2, #36]	; 0x24
                       Data->TransferDir   |\
 8012fbe:	690c      	ldr	r4, [r1, #16]
  SDMMCx->DLEN = Data->DataLength;
 8012fc0:	6295      	str	r5, [r2, #40]	; 0x28
                       Data->TransferDir   |\
 8012fc2:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 8012fc4:	694d      	ldr	r5, [r1, #20]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8012fc6:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
                       Data->TransferMode  |\
 8012fc8:	432b      	orrs	r3, r5
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8012fca:	f024 01ff 	bic.w	r1, r4, #255	; 0xff
 8012fce:	430b      	orrs	r3, r1
}
 8012fd0:	bc30      	pop	{r4, r5}
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8012fd2:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8012fd4:	4770      	bx	lr
 8012fd6:	bf00      	nop

08012fd8 <SDMMC_CmdBlockLength>:
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012fd8:	4b4b      	ldr	r3, [pc, #300]	; (8013108 <SDMMC_CmdBlockLength+0x130>)
 8012fda:	f241 3288 	movw	r2, #5000	; 0x1388
{
 8012fde:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012fe0:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012fe2:	f241 1410 	movw	r4, #4368	; 0x1110
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012fe6:	4d49      	ldr	r5, [pc, #292]	; (801310c <SDMMC_CmdBlockLength+0x134>)
  SDMMCx->ARG = Command->Argument;
 8012fe8:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012fea:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012fee:	4948      	ldr	r1, [pc, #288]	; (8013110 <SDMMC_CmdBlockLength+0x138>)
 8012ff0:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012ff2:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012ff4:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012ff6:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012ffa:	430c      	orrs	r4, r1
 8012ffc:	60c4      	str	r4, [r0, #12]

  do
  {
    if (count-- == 0U)
 8012ffe:	b14b      	cbz	r3, 8013014 <SDMMC_CmdBlockLength+0x3c>
 8013000:	1e5a      	subs	r2, r3, #1
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8013002:	4944      	ldr	r1, [pc, #272]	; (8013114 <SDMMC_CmdBlockLength+0x13c>)
    sta_reg = SDMMCx->STA;
 8013004:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8013006:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8013008:	420b      	tst	r3, r1
 801300a:	d001      	beq.n	8013010 <SDMMC_CmdBlockLength+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 801300c:	049c      	lsls	r4, r3, #18
 801300e:	d506      	bpl.n	801301e <SDMMC_CmdBlockLength+0x46>
    if (count-- == 0U)
 8013010:	1c55      	adds	r5, r2, #1
 8013012:	d1f7      	bne.n	8013004 <SDMMC_CmdBlockLength+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8013014:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8013018:	4618      	mov	r0, r3
 801301a:	bc30      	pop	{r4, r5}
 801301c:	4770      	bx	lr

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801301e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013020:	075b      	lsls	r3, r3, #29
 8013022:	d43d      	bmi.n	80130a0 <SDMMC_CmdBlockLength+0xc8>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013024:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013026:	f013 0301 	ands.w	r3, r3, #1
 801302a:	d134      	bne.n	8013096 <SDMMC_CmdBlockLength+0xbe>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801302c:	4b3a      	ldr	r3, [pc, #232]	; (8013118 <SDMMC_CmdBlockLength+0x140>)
 801302e:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8013030:	6903      	ldr	r3, [r0, #16]

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8013032:	b2db      	uxtb	r3, r3
 8013034:	2b10      	cmp	r3, #16
 8013036:	d131      	bne.n	801309c <SDMMC_CmdBlockLength+0xc4>
  return (*(__IO uint32_t *) tmp);
 8013038:	6942      	ldr	r2, [r0, #20]
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 801303a:	4b38      	ldr	r3, [pc, #224]	; (801311c <SDMMC_CmdBlockLength+0x144>)
 801303c:	4013      	ands	r3, r2
 801303e:	2b00      	cmp	r3, #0
 8013040:	d0ea      	beq.n	8013018 <SDMMC_CmdBlockLength+0x40>
  {
    return SDMMC_ERROR_NONE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8013042:	2a00      	cmp	r2, #0
 8013044:	db2f      	blt.n	80130a6 <SDMMC_CmdBlockLength+0xce>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8013046:	0055      	lsls	r5, r2, #1
 8013048:	d430      	bmi.n	80130ac <SDMMC_CmdBlockLength+0xd4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 801304a:	0094      	lsls	r4, r2, #2
 801304c:	d430      	bmi.n	80130b0 <SDMMC_CmdBlockLength+0xd8>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801304e:	00d0      	lsls	r0, r2, #3
 8013050:	d430      	bmi.n	80130b4 <SDMMC_CmdBlockLength+0xdc>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8013052:	0111      	lsls	r1, r2, #4
 8013054:	d431      	bmi.n	80130ba <SDMMC_CmdBlockLength+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8013056:	0155      	lsls	r5, r2, #5
 8013058:	d432      	bmi.n	80130c0 <SDMMC_CmdBlockLength+0xe8>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801305a:	01d4      	lsls	r4, r2, #7
 801305c:	d433      	bmi.n	80130c6 <SDMMC_CmdBlockLength+0xee>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801305e:	0210      	lsls	r0, r2, #8
 8013060:	d434      	bmi.n	80130cc <SDMMC_CmdBlockLength+0xf4>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8013062:	0251      	lsls	r1, r2, #9
 8013064:	d435      	bmi.n	80130d2 <SDMMC_CmdBlockLength+0xfa>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8013066:	0295      	lsls	r5, r2, #10
 8013068:	d436      	bmi.n	80130d8 <SDMMC_CmdBlockLength+0x100>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801306a:	02d4      	lsls	r4, r2, #11
 801306c:	d437      	bmi.n	80130de <SDMMC_CmdBlockLength+0x106>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801306e:	0350      	lsls	r0, r2, #13
 8013070:	d438      	bmi.n	80130e4 <SDMMC_CmdBlockLength+0x10c>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8013072:	0391      	lsls	r1, r2, #14
 8013074:	d439      	bmi.n	80130ea <SDMMC_CmdBlockLength+0x112>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8013076:	03d5      	lsls	r5, r2, #15
 8013078:	d43a      	bmi.n	80130f0 <SDMMC_CmdBlockLength+0x118>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801307a:	0414      	lsls	r4, r2, #16
 801307c:	d43b      	bmi.n	80130f6 <SDMMC_CmdBlockLength+0x11e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801307e:	0450      	lsls	r0, r2, #17
 8013080:	d43f      	bmi.n	8013102 <SDMMC_CmdBlockLength+0x12a>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8013082:	0491      	lsls	r1, r2, #18
 8013084:	d43a      	bmi.n	80130fc <SDMMC_CmdBlockLength+0x124>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8013086:	f012 0f08 	tst.w	r2, #8
 801308a:	bf14      	ite	ne
 801308c:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8013090:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8013094:	e7c0      	b.n	8013018 <SDMMC_CmdBlockLength+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013096:	2201      	movs	r2, #1
 8013098:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801309a:	e7bd      	b.n	8013018 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801309c:	2301      	movs	r3, #1
 801309e:	e7bb      	b.n	8013018 <SDMMC_CmdBlockLength+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80130a0:	2304      	movs	r3, #4
 80130a2:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80130a4:	e7b8      	b.n	8013018 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80130a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80130aa:	e7b5      	b.n	8013018 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80130ac:	2340      	movs	r3, #64	; 0x40
 80130ae:	e7b3      	b.n	8013018 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80130b0:	2380      	movs	r3, #128	; 0x80
 80130b2:	e7b1      	b.n	8013018 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80130b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80130b8:	e7ae      	b.n	8013018 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80130ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80130be:	e7ab      	b.n	8013018 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80130c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80130c4:	e7a8      	b.n	8013018 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80130c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80130ca:	e7a5      	b.n	8013018 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80130cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80130d0:	e7a2      	b.n	8013018 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80130d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80130d6:	e79f      	b.n	8013018 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80130d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80130dc:	e79c      	b.n	8013018 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CC_ERR;
 80130de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80130e2:	e799      	b.n	8013018 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80130e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80130e8:	e796      	b.n	8013018 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80130ea:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80130ee:	e793      	b.n	8013018 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80130f0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80130f4:	e790      	b.n	8013018 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80130f6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80130fa:	e78d      	b.n	8013018 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 80130fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8013100:	e78a      	b.n	8013018 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8013102:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8013106:	e787      	b.n	8013018 <SDMMC_CmdBlockLength+0x40>
 8013108:	2000761c 	.word	0x2000761c
 801310c:	10624dd3 	.word	0x10624dd3
 8013110:	fffee0c0 	.word	0xfffee0c0
 8013114:	00200045 	.word	0x00200045
 8013118:	002000c5 	.word	0x002000c5
 801311c:	fdffe008 	.word	0xfdffe008

08013120 <SDMMC_CmdReadSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013120:	4b4b      	ldr	r3, [pc, #300]	; (8013250 <SDMMC_CmdReadSingleBlock+0x130>)
 8013122:	f241 3288 	movw	r2, #5000	; 0x1388
{
 8013126:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013128:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801312a:	f241 1411 	movw	r4, #4369	; 0x1111
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801312e:	4d49      	ldr	r5, [pc, #292]	; (8013254 <SDMMC_CmdReadSingleBlock+0x134>)
  SDMMCx->ARG = Command->Argument;
 8013130:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013132:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013136:	4948      	ldr	r1, [pc, #288]	; (8013258 <SDMMC_CmdReadSingleBlock+0x138>)
 8013138:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801313a:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801313c:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801313e:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013142:	430c      	orrs	r4, r1
 8013144:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8013146:	b14b      	cbz	r3, 801315c <SDMMC_CmdReadSingleBlock+0x3c>
 8013148:	1e5a      	subs	r2, r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 801314a:	4944      	ldr	r1, [pc, #272]	; (801325c <SDMMC_CmdReadSingleBlock+0x13c>)
    sta_reg = SDMMCx->STA;
 801314c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 801314e:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8013150:	420b      	tst	r3, r1
 8013152:	d001      	beq.n	8013158 <SDMMC_CmdReadSingleBlock+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8013154:	049c      	lsls	r4, r3, #18
 8013156:	d506      	bpl.n	8013166 <SDMMC_CmdReadSingleBlock+0x46>
    if (count-- == 0U)
 8013158:	1c55      	adds	r5, r2, #1
 801315a:	d1f7      	bne.n	801314c <SDMMC_CmdReadSingleBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 801315c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8013160:	4618      	mov	r0, r3
 8013162:	bc30      	pop	{r4, r5}
 8013164:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013166:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013168:	075b      	lsls	r3, r3, #29
 801316a:	d43d      	bmi.n	80131e8 <SDMMC_CmdReadSingleBlock+0xc8>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801316c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801316e:	f013 0301 	ands.w	r3, r3, #1
 8013172:	d134      	bne.n	80131de <SDMMC_CmdReadSingleBlock+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013174:	4b3a      	ldr	r3, [pc, #232]	; (8013260 <SDMMC_CmdReadSingleBlock+0x140>)
 8013176:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8013178:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801317a:	b2db      	uxtb	r3, r3
 801317c:	2b11      	cmp	r3, #17
 801317e:	d131      	bne.n	80131e4 <SDMMC_CmdReadSingleBlock+0xc4>
  return (*(__IO uint32_t *) tmp);
 8013180:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8013182:	4b38      	ldr	r3, [pc, #224]	; (8013264 <SDMMC_CmdReadSingleBlock+0x144>)
 8013184:	4013      	ands	r3, r2
 8013186:	2b00      	cmp	r3, #0
 8013188:	d0ea      	beq.n	8013160 <SDMMC_CmdReadSingleBlock+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801318a:	2a00      	cmp	r2, #0
 801318c:	db2f      	blt.n	80131ee <SDMMC_CmdReadSingleBlock+0xce>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801318e:	0055      	lsls	r5, r2, #1
 8013190:	d430      	bmi.n	80131f4 <SDMMC_CmdReadSingleBlock+0xd4>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8013192:	0094      	lsls	r4, r2, #2
 8013194:	d430      	bmi.n	80131f8 <SDMMC_CmdReadSingleBlock+0xd8>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8013196:	00d0      	lsls	r0, r2, #3
 8013198:	d430      	bmi.n	80131fc <SDMMC_CmdReadSingleBlock+0xdc>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801319a:	0111      	lsls	r1, r2, #4
 801319c:	d431      	bmi.n	8013202 <SDMMC_CmdReadSingleBlock+0xe2>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801319e:	0155      	lsls	r5, r2, #5
 80131a0:	d432      	bmi.n	8013208 <SDMMC_CmdReadSingleBlock+0xe8>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80131a2:	01d4      	lsls	r4, r2, #7
 80131a4:	d433      	bmi.n	801320e <SDMMC_CmdReadSingleBlock+0xee>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80131a6:	0210      	lsls	r0, r2, #8
 80131a8:	d434      	bmi.n	8013214 <SDMMC_CmdReadSingleBlock+0xf4>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80131aa:	0251      	lsls	r1, r2, #9
 80131ac:	d435      	bmi.n	801321a <SDMMC_CmdReadSingleBlock+0xfa>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80131ae:	0295      	lsls	r5, r2, #10
 80131b0:	d436      	bmi.n	8013220 <SDMMC_CmdReadSingleBlock+0x100>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80131b2:	02d4      	lsls	r4, r2, #11
 80131b4:	d437      	bmi.n	8013226 <SDMMC_CmdReadSingleBlock+0x106>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80131b6:	0350      	lsls	r0, r2, #13
 80131b8:	d438      	bmi.n	801322c <SDMMC_CmdReadSingleBlock+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80131ba:	0391      	lsls	r1, r2, #14
 80131bc:	d439      	bmi.n	8013232 <SDMMC_CmdReadSingleBlock+0x112>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80131be:	03d5      	lsls	r5, r2, #15
 80131c0:	d43a      	bmi.n	8013238 <SDMMC_CmdReadSingleBlock+0x118>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80131c2:	0414      	lsls	r4, r2, #16
 80131c4:	d43b      	bmi.n	801323e <SDMMC_CmdReadSingleBlock+0x11e>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80131c6:	0450      	lsls	r0, r2, #17
 80131c8:	d43f      	bmi.n	801324a <SDMMC_CmdReadSingleBlock+0x12a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80131ca:	0491      	lsls	r1, r2, #18
 80131cc:	d43a      	bmi.n	8013244 <SDMMC_CmdReadSingleBlock+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80131ce:	f012 0f08 	tst.w	r2, #8
 80131d2:	bf14      	ite	ne
 80131d4:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 80131d8:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 80131dc:	e7c0      	b.n	8013160 <SDMMC_CmdReadSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80131de:	2201      	movs	r2, #1
 80131e0:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80131e2:	e7bd      	b.n	8013160 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80131e4:	2301      	movs	r3, #1
 80131e6:	e7bb      	b.n	8013160 <SDMMC_CmdReadSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80131e8:	2304      	movs	r3, #4
 80131ea:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80131ec:	e7b8      	b.n	8013160 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80131ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80131f2:	e7b5      	b.n	8013160 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80131f4:	2340      	movs	r3, #64	; 0x40
 80131f6:	e7b3      	b.n	8013160 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80131f8:	2380      	movs	r3, #128	; 0x80
 80131fa:	e7b1      	b.n	8013160 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80131fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013200:	e7ae      	b.n	8013160 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8013202:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013206:	e7ab      	b.n	8013160 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8013208:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801320c:	e7a8      	b.n	8013160 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 801320e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013212:	e7a5      	b.n	8013160 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8013214:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013218:	e7a2      	b.n	8013160 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 801321a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801321e:	e79f      	b.n	8013160 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8013220:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8013224:	e79c      	b.n	8013160 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 8013226:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801322a:	e799      	b.n	8013160 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 801322c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013230:	e796      	b.n	8013160 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8013232:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8013236:	e793      	b.n	8013160 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8013238:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801323c:	e790      	b.n	8013160 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 801323e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8013242:	e78d      	b.n	8013160 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8013244:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8013248:	e78a      	b.n	8013160 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 801324a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801324e:	e787      	b.n	8013160 <SDMMC_CmdReadSingleBlock+0x40>
 8013250:	2000761c 	.word	0x2000761c
 8013254:	10624dd3 	.word	0x10624dd3
 8013258:	fffee0c0 	.word	0xfffee0c0
 801325c:	00200045 	.word	0x00200045
 8013260:	002000c5 	.word	0x002000c5
 8013264:	fdffe008 	.word	0xfdffe008

08013268 <SDMMC_CmdReadMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013268:	4b4b      	ldr	r3, [pc, #300]	; (8013398 <SDMMC_CmdReadMultiBlock+0x130>)
 801326a:	f241 3288 	movw	r2, #5000	; 0x1388
{
 801326e:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013270:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013272:	f241 1412 	movw	r4, #4370	; 0x1112
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013276:	4d49      	ldr	r5, [pc, #292]	; (801339c <SDMMC_CmdReadMultiBlock+0x134>)
  SDMMCx->ARG = Command->Argument;
 8013278:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801327a:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801327e:	4948      	ldr	r1, [pc, #288]	; (80133a0 <SDMMC_CmdReadMultiBlock+0x138>)
 8013280:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013282:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013284:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013286:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801328a:	430c      	orrs	r4, r1
 801328c:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 801328e:	b14b      	cbz	r3, 80132a4 <SDMMC_CmdReadMultiBlock+0x3c>
 8013290:	1e5a      	subs	r2, r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8013292:	4944      	ldr	r1, [pc, #272]	; (80133a4 <SDMMC_CmdReadMultiBlock+0x13c>)
    sta_reg = SDMMCx->STA;
 8013294:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8013296:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8013298:	420b      	tst	r3, r1
 801329a:	d001      	beq.n	80132a0 <SDMMC_CmdReadMultiBlock+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 801329c:	049c      	lsls	r4, r3, #18
 801329e:	d506      	bpl.n	80132ae <SDMMC_CmdReadMultiBlock+0x46>
    if (count-- == 0U)
 80132a0:	1c55      	adds	r5, r2, #1
 80132a2:	d1f7      	bne.n	8013294 <SDMMC_CmdReadMultiBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 80132a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 80132a8:	4618      	mov	r0, r3
 80132aa:	bc30      	pop	{r4, r5}
 80132ac:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80132ae:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80132b0:	075b      	lsls	r3, r3, #29
 80132b2:	d43d      	bmi.n	8013330 <SDMMC_CmdReadMultiBlock+0xc8>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80132b4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80132b6:	f013 0301 	ands.w	r3, r3, #1
 80132ba:	d134      	bne.n	8013326 <SDMMC_CmdReadMultiBlock+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80132bc:	4b3a      	ldr	r3, [pc, #232]	; (80133a8 <SDMMC_CmdReadMultiBlock+0x140>)
 80132be:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80132c0:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80132c2:	b2db      	uxtb	r3, r3
 80132c4:	2b12      	cmp	r3, #18
 80132c6:	d131      	bne.n	801332c <SDMMC_CmdReadMultiBlock+0xc4>
  return (*(__IO uint32_t *) tmp);
 80132c8:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80132ca:	4b38      	ldr	r3, [pc, #224]	; (80133ac <SDMMC_CmdReadMultiBlock+0x144>)
 80132cc:	4013      	ands	r3, r2
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d0ea      	beq.n	80132a8 <SDMMC_CmdReadMultiBlock+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80132d2:	2a00      	cmp	r2, #0
 80132d4:	db2f      	blt.n	8013336 <SDMMC_CmdReadMultiBlock+0xce>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80132d6:	0055      	lsls	r5, r2, #1
 80132d8:	d430      	bmi.n	801333c <SDMMC_CmdReadMultiBlock+0xd4>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80132da:	0094      	lsls	r4, r2, #2
 80132dc:	d430      	bmi.n	8013340 <SDMMC_CmdReadMultiBlock+0xd8>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80132de:	00d0      	lsls	r0, r2, #3
 80132e0:	d430      	bmi.n	8013344 <SDMMC_CmdReadMultiBlock+0xdc>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80132e2:	0111      	lsls	r1, r2, #4
 80132e4:	d431      	bmi.n	801334a <SDMMC_CmdReadMultiBlock+0xe2>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80132e6:	0155      	lsls	r5, r2, #5
 80132e8:	d432      	bmi.n	8013350 <SDMMC_CmdReadMultiBlock+0xe8>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80132ea:	01d4      	lsls	r4, r2, #7
 80132ec:	d433      	bmi.n	8013356 <SDMMC_CmdReadMultiBlock+0xee>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80132ee:	0210      	lsls	r0, r2, #8
 80132f0:	d434      	bmi.n	801335c <SDMMC_CmdReadMultiBlock+0xf4>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80132f2:	0251      	lsls	r1, r2, #9
 80132f4:	d435      	bmi.n	8013362 <SDMMC_CmdReadMultiBlock+0xfa>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80132f6:	0295      	lsls	r5, r2, #10
 80132f8:	d436      	bmi.n	8013368 <SDMMC_CmdReadMultiBlock+0x100>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80132fa:	02d4      	lsls	r4, r2, #11
 80132fc:	d437      	bmi.n	801336e <SDMMC_CmdReadMultiBlock+0x106>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80132fe:	0350      	lsls	r0, r2, #13
 8013300:	d438      	bmi.n	8013374 <SDMMC_CmdReadMultiBlock+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8013302:	0391      	lsls	r1, r2, #14
 8013304:	d439      	bmi.n	801337a <SDMMC_CmdReadMultiBlock+0x112>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8013306:	03d5      	lsls	r5, r2, #15
 8013308:	d43a      	bmi.n	8013380 <SDMMC_CmdReadMultiBlock+0x118>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801330a:	0414      	lsls	r4, r2, #16
 801330c:	d43b      	bmi.n	8013386 <SDMMC_CmdReadMultiBlock+0x11e>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801330e:	0450      	lsls	r0, r2, #17
 8013310:	d43f      	bmi.n	8013392 <SDMMC_CmdReadMultiBlock+0x12a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8013312:	0491      	lsls	r1, r2, #18
 8013314:	d43a      	bmi.n	801338c <SDMMC_CmdReadMultiBlock+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8013316:	f012 0f08 	tst.w	r2, #8
 801331a:	bf14      	ite	ne
 801331c:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8013320:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8013324:	e7c0      	b.n	80132a8 <SDMMC_CmdReadMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013326:	2201      	movs	r2, #1
 8013328:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801332a:	e7bd      	b.n	80132a8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801332c:	2301      	movs	r3, #1
 801332e:	e7bb      	b.n	80132a8 <SDMMC_CmdReadMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013330:	2304      	movs	r3, #4
 8013332:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013334:	e7b8      	b.n	80132a8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8013336:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801333a:	e7b5      	b.n	80132a8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 801333c:	2340      	movs	r3, #64	; 0x40
 801333e:	e7b3      	b.n	80132a8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8013340:	2380      	movs	r3, #128	; 0x80
 8013342:	e7b1      	b.n	80132a8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8013344:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013348:	e7ae      	b.n	80132a8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 801334a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801334e:	e7ab      	b.n	80132a8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8013350:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013354:	e7a8      	b.n	80132a8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8013356:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801335a:	e7a5      	b.n	80132a8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 801335c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013360:	e7a2      	b.n	80132a8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8013362:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013366:	e79f      	b.n	80132a8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8013368:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801336c:	e79c      	b.n	80132a8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 801336e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013372:	e799      	b.n	80132a8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8013374:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013378:	e796      	b.n	80132a8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 801337a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801337e:	e793      	b.n	80132a8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8013380:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8013384:	e790      	b.n	80132a8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8013386:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801338a:	e78d      	b.n	80132a8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 801338c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8013390:	e78a      	b.n	80132a8 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8013392:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8013396:	e787      	b.n	80132a8 <SDMMC_CmdReadMultiBlock+0x40>
 8013398:	2000761c 	.word	0x2000761c
 801339c:	10624dd3 	.word	0x10624dd3
 80133a0:	fffee0c0 	.word	0xfffee0c0
 80133a4:	00200045 	.word	0x00200045
 80133a8:	002000c5 	.word	0x002000c5
 80133ac:	fdffe008 	.word	0xfdffe008

080133b0 <SDMMC_CmdWriteSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80133b0:	4b4b      	ldr	r3, [pc, #300]	; (80134e0 <SDMMC_CmdWriteSingleBlock+0x130>)
 80133b2:	f241 3288 	movw	r2, #5000	; 0x1388
{
 80133b6:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80133b8:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80133ba:	f241 1418 	movw	r4, #4376	; 0x1118
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80133be:	4d49      	ldr	r5, [pc, #292]	; (80134e4 <SDMMC_CmdWriteSingleBlock+0x134>)
  SDMMCx->ARG = Command->Argument;
 80133c0:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80133c2:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80133c6:	4948      	ldr	r1, [pc, #288]	; (80134e8 <SDMMC_CmdWriteSingleBlock+0x138>)
 80133c8:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80133ca:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80133cc:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80133ce:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80133d2:	430c      	orrs	r4, r1
 80133d4:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 80133d6:	b14b      	cbz	r3, 80133ec <SDMMC_CmdWriteSingleBlock+0x3c>
 80133d8:	1e5a      	subs	r2, r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80133da:	4944      	ldr	r1, [pc, #272]	; (80134ec <SDMMC_CmdWriteSingleBlock+0x13c>)
    sta_reg = SDMMCx->STA;
 80133dc:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 80133de:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80133e0:	420b      	tst	r3, r1
 80133e2:	d001      	beq.n	80133e8 <SDMMC_CmdWriteSingleBlock+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80133e4:	049c      	lsls	r4, r3, #18
 80133e6:	d506      	bpl.n	80133f6 <SDMMC_CmdWriteSingleBlock+0x46>
    if (count-- == 0U)
 80133e8:	1c55      	adds	r5, r2, #1
 80133ea:	d1f7      	bne.n	80133dc <SDMMC_CmdWriteSingleBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 80133ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 80133f0:	4618      	mov	r0, r3
 80133f2:	bc30      	pop	{r4, r5}
 80133f4:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80133f6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80133f8:	075b      	lsls	r3, r3, #29
 80133fa:	d43d      	bmi.n	8013478 <SDMMC_CmdWriteSingleBlock+0xc8>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80133fc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80133fe:	f013 0301 	ands.w	r3, r3, #1
 8013402:	d134      	bne.n	801346e <SDMMC_CmdWriteSingleBlock+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013404:	4b3a      	ldr	r3, [pc, #232]	; (80134f0 <SDMMC_CmdWriteSingleBlock+0x140>)
 8013406:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8013408:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801340a:	b2db      	uxtb	r3, r3
 801340c:	2b18      	cmp	r3, #24
 801340e:	d131      	bne.n	8013474 <SDMMC_CmdWriteSingleBlock+0xc4>
  return (*(__IO uint32_t *) tmp);
 8013410:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8013412:	4b38      	ldr	r3, [pc, #224]	; (80134f4 <SDMMC_CmdWriteSingleBlock+0x144>)
 8013414:	4013      	ands	r3, r2
 8013416:	2b00      	cmp	r3, #0
 8013418:	d0ea      	beq.n	80133f0 <SDMMC_CmdWriteSingleBlock+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801341a:	2a00      	cmp	r2, #0
 801341c:	db2f      	blt.n	801347e <SDMMC_CmdWriteSingleBlock+0xce>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801341e:	0055      	lsls	r5, r2, #1
 8013420:	d430      	bmi.n	8013484 <SDMMC_CmdWriteSingleBlock+0xd4>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8013422:	0094      	lsls	r4, r2, #2
 8013424:	d430      	bmi.n	8013488 <SDMMC_CmdWriteSingleBlock+0xd8>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8013426:	00d0      	lsls	r0, r2, #3
 8013428:	d430      	bmi.n	801348c <SDMMC_CmdWriteSingleBlock+0xdc>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801342a:	0111      	lsls	r1, r2, #4
 801342c:	d431      	bmi.n	8013492 <SDMMC_CmdWriteSingleBlock+0xe2>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801342e:	0155      	lsls	r5, r2, #5
 8013430:	d432      	bmi.n	8013498 <SDMMC_CmdWriteSingleBlock+0xe8>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8013432:	01d4      	lsls	r4, r2, #7
 8013434:	d433      	bmi.n	801349e <SDMMC_CmdWriteSingleBlock+0xee>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8013436:	0210      	lsls	r0, r2, #8
 8013438:	d434      	bmi.n	80134a4 <SDMMC_CmdWriteSingleBlock+0xf4>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801343a:	0251      	lsls	r1, r2, #9
 801343c:	d435      	bmi.n	80134aa <SDMMC_CmdWriteSingleBlock+0xfa>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801343e:	0295      	lsls	r5, r2, #10
 8013440:	d436      	bmi.n	80134b0 <SDMMC_CmdWriteSingleBlock+0x100>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8013442:	02d4      	lsls	r4, r2, #11
 8013444:	d437      	bmi.n	80134b6 <SDMMC_CmdWriteSingleBlock+0x106>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8013446:	0350      	lsls	r0, r2, #13
 8013448:	d438      	bmi.n	80134bc <SDMMC_CmdWriteSingleBlock+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801344a:	0391      	lsls	r1, r2, #14
 801344c:	d439      	bmi.n	80134c2 <SDMMC_CmdWriteSingleBlock+0x112>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801344e:	03d5      	lsls	r5, r2, #15
 8013450:	d43a      	bmi.n	80134c8 <SDMMC_CmdWriteSingleBlock+0x118>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8013452:	0414      	lsls	r4, r2, #16
 8013454:	d43b      	bmi.n	80134ce <SDMMC_CmdWriteSingleBlock+0x11e>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8013456:	0450      	lsls	r0, r2, #17
 8013458:	d43f      	bmi.n	80134da <SDMMC_CmdWriteSingleBlock+0x12a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801345a:	0491      	lsls	r1, r2, #18
 801345c:	d43a      	bmi.n	80134d4 <SDMMC_CmdWriteSingleBlock+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801345e:	f012 0f08 	tst.w	r2, #8
 8013462:	bf14      	ite	ne
 8013464:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8013468:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 801346c:	e7c0      	b.n	80133f0 <SDMMC_CmdWriteSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801346e:	2201      	movs	r2, #1
 8013470:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013472:	e7bd      	b.n	80133f0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013474:	2301      	movs	r3, #1
 8013476:	e7bb      	b.n	80133f0 <SDMMC_CmdWriteSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013478:	2304      	movs	r3, #4
 801347a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801347c:	e7b8      	b.n	80133f0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 801347e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8013482:	e7b5      	b.n	80133f0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8013484:	2340      	movs	r3, #64	; 0x40
 8013486:	e7b3      	b.n	80133f0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8013488:	2380      	movs	r3, #128	; 0x80
 801348a:	e7b1      	b.n	80133f0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 801348c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013490:	e7ae      	b.n	80133f0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8013492:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013496:	e7ab      	b.n	80133f0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8013498:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801349c:	e7a8      	b.n	80133f0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 801349e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80134a2:	e7a5      	b.n	80133f0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80134a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80134a8:	e7a2      	b.n	80133f0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80134aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80134ae:	e79f      	b.n	80133f0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80134b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80134b4:	e79c      	b.n	80133f0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 80134b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80134ba:	e799      	b.n	80133f0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80134bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80134c0:	e796      	b.n	80133f0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80134c2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80134c6:	e793      	b.n	80133f0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80134c8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80134cc:	e790      	b.n	80133f0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80134ce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80134d2:	e78d      	b.n	80133f0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 80134d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80134d8:	e78a      	b.n	80133f0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80134da:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80134de:	e787      	b.n	80133f0 <SDMMC_CmdWriteSingleBlock+0x40>
 80134e0:	2000761c 	.word	0x2000761c
 80134e4:	10624dd3 	.word	0x10624dd3
 80134e8:	fffee0c0 	.word	0xfffee0c0
 80134ec:	00200045 	.word	0x00200045
 80134f0:	002000c5 	.word	0x002000c5
 80134f4:	fdffe008 	.word	0xfdffe008

080134f8 <SDMMC_CmdWriteMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80134f8:	4b4b      	ldr	r3, [pc, #300]	; (8013628 <SDMMC_CmdWriteMultiBlock+0x130>)
 80134fa:	f241 3288 	movw	r2, #5000	; 0x1388
{
 80134fe:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013500:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013502:	f241 1419 	movw	r4, #4377	; 0x1119
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013506:	4d49      	ldr	r5, [pc, #292]	; (801362c <SDMMC_CmdWriteMultiBlock+0x134>)
  SDMMCx->ARG = Command->Argument;
 8013508:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801350a:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801350e:	4948      	ldr	r1, [pc, #288]	; (8013630 <SDMMC_CmdWriteMultiBlock+0x138>)
 8013510:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013512:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013514:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013516:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801351a:	430c      	orrs	r4, r1
 801351c:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 801351e:	b14b      	cbz	r3, 8013534 <SDMMC_CmdWriteMultiBlock+0x3c>
 8013520:	1e5a      	subs	r2, r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8013522:	4944      	ldr	r1, [pc, #272]	; (8013634 <SDMMC_CmdWriteMultiBlock+0x13c>)
    sta_reg = SDMMCx->STA;
 8013524:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8013526:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8013528:	420b      	tst	r3, r1
 801352a:	d001      	beq.n	8013530 <SDMMC_CmdWriteMultiBlock+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 801352c:	049c      	lsls	r4, r3, #18
 801352e:	d506      	bpl.n	801353e <SDMMC_CmdWriteMultiBlock+0x46>
    if (count-- == 0U)
 8013530:	1c55      	adds	r5, r2, #1
 8013532:	d1f7      	bne.n	8013524 <SDMMC_CmdWriteMultiBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8013534:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8013538:	4618      	mov	r0, r3
 801353a:	bc30      	pop	{r4, r5}
 801353c:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801353e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013540:	075b      	lsls	r3, r3, #29
 8013542:	d43d      	bmi.n	80135c0 <SDMMC_CmdWriteMultiBlock+0xc8>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013544:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013546:	f013 0301 	ands.w	r3, r3, #1
 801354a:	d134      	bne.n	80135b6 <SDMMC_CmdWriteMultiBlock+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801354c:	4b3a      	ldr	r3, [pc, #232]	; (8013638 <SDMMC_CmdWriteMultiBlock+0x140>)
 801354e:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8013550:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8013552:	b2db      	uxtb	r3, r3
 8013554:	2b19      	cmp	r3, #25
 8013556:	d131      	bne.n	80135bc <SDMMC_CmdWriteMultiBlock+0xc4>
  return (*(__IO uint32_t *) tmp);
 8013558:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 801355a:	4b38      	ldr	r3, [pc, #224]	; (801363c <SDMMC_CmdWriteMultiBlock+0x144>)
 801355c:	4013      	ands	r3, r2
 801355e:	2b00      	cmp	r3, #0
 8013560:	d0ea      	beq.n	8013538 <SDMMC_CmdWriteMultiBlock+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8013562:	2a00      	cmp	r2, #0
 8013564:	db2f      	blt.n	80135c6 <SDMMC_CmdWriteMultiBlock+0xce>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8013566:	0055      	lsls	r5, r2, #1
 8013568:	d430      	bmi.n	80135cc <SDMMC_CmdWriteMultiBlock+0xd4>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 801356a:	0094      	lsls	r4, r2, #2
 801356c:	d430      	bmi.n	80135d0 <SDMMC_CmdWriteMultiBlock+0xd8>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801356e:	00d0      	lsls	r0, r2, #3
 8013570:	d430      	bmi.n	80135d4 <SDMMC_CmdWriteMultiBlock+0xdc>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8013572:	0111      	lsls	r1, r2, #4
 8013574:	d431      	bmi.n	80135da <SDMMC_CmdWriteMultiBlock+0xe2>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8013576:	0155      	lsls	r5, r2, #5
 8013578:	d432      	bmi.n	80135e0 <SDMMC_CmdWriteMultiBlock+0xe8>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801357a:	01d4      	lsls	r4, r2, #7
 801357c:	d433      	bmi.n	80135e6 <SDMMC_CmdWriteMultiBlock+0xee>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801357e:	0210      	lsls	r0, r2, #8
 8013580:	d434      	bmi.n	80135ec <SDMMC_CmdWriteMultiBlock+0xf4>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8013582:	0251      	lsls	r1, r2, #9
 8013584:	d435      	bmi.n	80135f2 <SDMMC_CmdWriteMultiBlock+0xfa>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8013586:	0295      	lsls	r5, r2, #10
 8013588:	d436      	bmi.n	80135f8 <SDMMC_CmdWriteMultiBlock+0x100>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801358a:	02d4      	lsls	r4, r2, #11
 801358c:	d437      	bmi.n	80135fe <SDMMC_CmdWriteMultiBlock+0x106>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801358e:	0350      	lsls	r0, r2, #13
 8013590:	d438      	bmi.n	8013604 <SDMMC_CmdWriteMultiBlock+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8013592:	0391      	lsls	r1, r2, #14
 8013594:	d439      	bmi.n	801360a <SDMMC_CmdWriteMultiBlock+0x112>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8013596:	03d5      	lsls	r5, r2, #15
 8013598:	d43a      	bmi.n	8013610 <SDMMC_CmdWriteMultiBlock+0x118>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801359a:	0414      	lsls	r4, r2, #16
 801359c:	d43b      	bmi.n	8013616 <SDMMC_CmdWriteMultiBlock+0x11e>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801359e:	0450      	lsls	r0, r2, #17
 80135a0:	d43f      	bmi.n	8013622 <SDMMC_CmdWriteMultiBlock+0x12a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80135a2:	0491      	lsls	r1, r2, #18
 80135a4:	d43a      	bmi.n	801361c <SDMMC_CmdWriteMultiBlock+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80135a6:	f012 0f08 	tst.w	r2, #8
 80135aa:	bf14      	ite	ne
 80135ac:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 80135b0:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 80135b4:	e7c0      	b.n	8013538 <SDMMC_CmdWriteMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80135b6:	2201      	movs	r2, #1
 80135b8:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80135ba:	e7bd      	b.n	8013538 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80135bc:	2301      	movs	r3, #1
 80135be:	e7bb      	b.n	8013538 <SDMMC_CmdWriteMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80135c0:	2304      	movs	r3, #4
 80135c2:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80135c4:	e7b8      	b.n	8013538 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80135c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80135ca:	e7b5      	b.n	8013538 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80135cc:	2340      	movs	r3, #64	; 0x40
 80135ce:	e7b3      	b.n	8013538 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80135d0:	2380      	movs	r3, #128	; 0x80
 80135d2:	e7b1      	b.n	8013538 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80135d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80135d8:	e7ae      	b.n	8013538 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80135da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80135de:	e7ab      	b.n	8013538 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80135e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80135e4:	e7a8      	b.n	8013538 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80135e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80135ea:	e7a5      	b.n	8013538 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80135ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80135f0:	e7a2      	b.n	8013538 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80135f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80135f6:	e79f      	b.n	8013538 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80135f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80135fc:	e79c      	b.n	8013538 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 80135fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013602:	e799      	b.n	8013538 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8013604:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013608:	e796      	b.n	8013538 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 801360a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801360e:	e793      	b.n	8013538 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8013610:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8013614:	e790      	b.n	8013538 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8013616:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801361a:	e78d      	b.n	8013538 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 801361c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8013620:	e78a      	b.n	8013538 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8013622:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8013626:	e787      	b.n	8013538 <SDMMC_CmdWriteMultiBlock+0x40>
 8013628:	2000761c 	.word	0x2000761c
 801362c:	10624dd3 	.word	0x10624dd3
 8013630:	fffee0c0 	.word	0xfffee0c0
 8013634:	00200045 	.word	0x00200045
 8013638:	002000c5 	.word	0x002000c5
 801363c:	fdffe008 	.word	0xfdffe008

08013640 <SDMMC_CmdStopTransfer>:
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8013640:	68c2      	ldr	r2, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013642:	4b7d      	ldr	r3, [pc, #500]	; (8013838 <SDMMC_CmdStopTransfer+0x1f8>)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8013644:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013648:	497c      	ldr	r1, [pc, #496]	; (801383c <SDMMC_CmdStopTransfer+0x1fc>)
 801364a:	681b      	ldr	r3, [r3, #0]
{
 801364c:	b470      	push	{r4, r5, r6}
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 801364e:	60c2      	str	r2, [r0, #12]
  SDMMCx->ARG = Command->Argument;
 8013650:	2600      	movs	r6, #0
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8013652:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013654:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013658:	4c79      	ldr	r4, [pc, #484]	; (8013840 <SDMMC_CmdStopTransfer+0x200>)
 801365a:	f241 110c 	movw	r1, #4364	; 0x110c
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 801365e:	f025 0540 	bic.w	r5, r5, #64	; 0x40
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013662:	0a5b      	lsrs	r3, r3, #9
 8013664:	4a77      	ldr	r2, [pc, #476]	; (8013844 <SDMMC_CmdStopTransfer+0x204>)
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8013666:	60c5      	str	r5, [r0, #12]
  SDMMCx->ARG = Command->Argument;
 8013668:	6086      	str	r6, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801366a:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801366c:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013670:	402c      	ands	r4, r5
 8013672:	4321      	orrs	r1, r4
 8013674:	60c1      	str	r1, [r0, #12]
    if (count-- == 0U)
 8013676:	b14b      	cbz	r3, 801368c <SDMMC_CmdStopTransfer+0x4c>
 8013678:	1e5a      	subs	r2, r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 801367a:	4973      	ldr	r1, [pc, #460]	; (8013848 <SDMMC_CmdStopTransfer+0x208>)
    sta_reg = SDMMCx->STA;
 801367c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 801367e:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8013680:	420b      	tst	r3, r1
 8013682:	d001      	beq.n	8013688 <SDMMC_CmdStopTransfer+0x48>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8013684:	049c      	lsls	r4, r3, #18
 8013686:	d50a      	bpl.n	801369e <SDMMC_CmdStopTransfer+0x5e>
    if (count-- == 0U)
 8013688:	1c55      	adds	r5, r2, #1
 801368a:	d1f7      	bne.n	801367c <SDMMC_CmdStopTransfer+0x3c>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801368c:	68c2      	ldr	r2, [r0, #12]
 801368e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013692:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013696:	60c2      	str	r2, [r0, #12]
}
 8013698:	4618      	mov	r0, r3
 801369a:	bc70      	pop	{r4, r5, r6}
 801369c:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801369e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80136a0:	075a      	lsls	r2, r3, #29
 80136a2:	d454      	bmi.n	801374e <SDMMC_CmdStopTransfer+0x10e>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80136a4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80136a6:	f013 0301 	ands.w	r3, r3, #1
 80136aa:	d13c      	bne.n	8013726 <SDMMC_CmdStopTransfer+0xe6>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80136ac:	4a67      	ldr	r2, [pc, #412]	; (801384c <SDMMC_CmdStopTransfer+0x20c>)
 80136ae:	6382      	str	r2, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80136b0:	6902      	ldr	r2, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80136b2:	b2d2      	uxtb	r2, r2
 80136b4:	2a0c      	cmp	r2, #12
 80136b6:	d144      	bne.n	8013742 <SDMMC_CmdStopTransfer+0x102>
  return (*(__IO uint32_t *) tmp);
 80136b8:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80136ba:	4965      	ldr	r1, [pc, #404]	; (8013850 <SDMMC_CmdStopTransfer+0x210>)
 80136bc:	4011      	ands	r1, r2
 80136be:	2900      	cmp	r1, #0
 80136c0:	d038      	beq.n	8013734 <SDMMC_CmdStopTransfer+0xf4>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80136c2:	2a00      	cmp	r2, #0
 80136c4:	db36      	blt.n	8013734 <SDMMC_CmdStopTransfer+0xf4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80136c6:	0053      	lsls	r3, r2, #1
 80136c8:	d448      	bmi.n	801375c <SDMMC_CmdStopTransfer+0x11c>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80136ca:	0096      	lsls	r6, r2, #2
 80136cc:	d44c      	bmi.n	8013768 <SDMMC_CmdStopTransfer+0x128>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80136ce:	00d5      	lsls	r5, r2, #3
 80136d0:	d450      	bmi.n	8013774 <SDMMC_CmdStopTransfer+0x134>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80136d2:	0114      	lsls	r4, r2, #4
 80136d4:	d455      	bmi.n	8013782 <SDMMC_CmdStopTransfer+0x142>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80136d6:	0151      	lsls	r1, r2, #5
 80136d8:	d45a      	bmi.n	8013790 <SDMMC_CmdStopTransfer+0x150>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80136da:	01d3      	lsls	r3, r2, #7
 80136dc:	d45f      	bmi.n	801379e <SDMMC_CmdStopTransfer+0x15e>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80136de:	0216      	lsls	r6, r2, #8
 80136e0:	d464      	bmi.n	80137ac <SDMMC_CmdStopTransfer+0x16c>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80136e2:	0255      	lsls	r5, r2, #9
 80136e4:	d469      	bmi.n	80137ba <SDMMC_CmdStopTransfer+0x17a>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80136e6:	0294      	lsls	r4, r2, #10
 80136e8:	d46e      	bmi.n	80137c8 <SDMMC_CmdStopTransfer+0x188>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80136ea:	02d1      	lsls	r1, r2, #11
 80136ec:	d473      	bmi.n	80137d6 <SDMMC_CmdStopTransfer+0x196>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80136ee:	0353      	lsls	r3, r2, #13
 80136f0:	d478      	bmi.n	80137e4 <SDMMC_CmdStopTransfer+0x1a4>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80136f2:	0396      	lsls	r6, r2, #14
 80136f4:	d47d      	bmi.n	80137f2 <SDMMC_CmdStopTransfer+0x1b2>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80136f6:	03d5      	lsls	r5, r2, #15
 80136f8:	f100 8082 	bmi.w	8013800 <SDMMC_CmdStopTransfer+0x1c0>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80136fc:	0414      	lsls	r4, r2, #16
 80136fe:	f100 8086 	bmi.w	801380e <SDMMC_CmdStopTransfer+0x1ce>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8013702:	0451      	lsls	r1, r2, #17
 8013704:	f100 8091 	bmi.w	801382a <SDMMC_CmdStopTransfer+0x1ea>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8013708:	0493      	lsls	r3, r2, #18
 801370a:	f100 8087 	bmi.w	801381c <SDMMC_CmdStopTransfer+0x1dc>
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801370e:	f012 0f08 	tst.w	r2, #8
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8013712:	68c2      	ldr	r2, [r0, #12]
 8013714:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8013718:	bf14      	ite	ne
 801371a:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801371e:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8013722:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8013724:	e7b8      	b.n	8013698 <SDMMC_CmdStopTransfer+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013726:	2201      	movs	r2, #1
 8013728:	6382      	str	r2, [r0, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801372a:	68c2      	ldr	r2, [r0, #12]
 801372c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013730:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8013732:	e7b1      	b.n	8013698 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8013734:	68c2      	ldr	r2, [r0, #12]
 8013736:	f022 0280 	bic.w	r2, r2, #128	; 0x80
}
 801373a:	bc70      	pop	{r4, r5, r6}
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801373c:	60c2      	str	r2, [r0, #12]
}
 801373e:	4618      	mov	r0, r3
 8013740:	4770      	bx	lr
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8013742:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013744:	2301      	movs	r3, #1
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8013746:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801374a:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 801374c:	e7a4      	b.n	8013698 <SDMMC_CmdStopTransfer+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801374e:	2304      	movs	r3, #4
 8013750:	6383      	str	r3, [r0, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8013752:	68c2      	ldr	r2, [r0, #12]
 8013754:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013758:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 801375a:	e79d      	b.n	8013698 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801375c:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ADDR_MISALIGNED;
 801375e:	2340      	movs	r3, #64	; 0x40
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8013760:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013764:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8013766:	e797      	b.n	8013698 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8013768:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801376a:	2380      	movs	r3, #128	; 0x80
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801376c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013770:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8013772:	e791      	b.n	8013698 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8013774:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8013776:	f44f 7380 	mov.w	r3, #256	; 0x100
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801377a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801377e:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8013780:	e78a      	b.n	8013698 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8013782:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8013784:	f44f 7300 	mov.w	r3, #512	; 0x200
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8013788:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801378c:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 801378e:	e783      	b.n	8013698 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8013790:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8013792:	f44f 6380 	mov.w	r3, #1024	; 0x400
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8013796:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801379a:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 801379c:	e77c      	b.n	8013698 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801379e:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80137a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80137a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80137a8:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80137aa:	e775      	b.n	8013698 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80137ac:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_COM_CRC_FAILED;
 80137ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80137b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80137b6:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80137b8:	e76e      	b.n	8013698 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80137ba:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ILLEGAL_CMD;
 80137bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80137c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80137c4:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80137c6:	e767      	b.n	8013698 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80137c8:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80137ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80137ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80137d2:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80137d4:	e760      	b.n	8013698 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80137d6:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CC_ERR;
 80137d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80137dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80137e0:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80137e2:	e759      	b.n	8013698 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80137e4:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80137e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80137ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80137ee:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80137f0:	e752      	b.n	8013698 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80137f2:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80137f4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80137f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80137fc:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80137fe:	e74b      	b.n	8013698 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8013800:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8013802:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8013806:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801380a:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 801380c:	e744      	b.n	8013698 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801380e:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8013810:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8013814:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013818:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 801381a:	e73d      	b.n	8013698 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801381c:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ERASE_RESET;
 801381e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8013822:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013826:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8013828:	e736      	b.n	8013698 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801382a:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 801382c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8013830:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013834:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8013836:	e72f      	b.n	8013698 <SDMMC_CmdStopTransfer+0x58>
 8013838:	2000761c 	.word	0x2000761c
 801383c:	10624dd3 	.word	0x10624dd3
 8013840:	fffee0c0 	.word	0xfffee0c0
 8013844:	05f5e100 	.word	0x05f5e100
 8013848:	00200045 	.word	0x00200045
 801384c:	002000c5 	.word	0x002000c5
 8013850:	fdffe008 	.word	0xfdffe008

08013854 <SDMMC_CmdSelDesel>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013854:	4b4b      	ldr	r3, [pc, #300]	; (8013984 <SDMMC_CmdSelDesel+0x130>)
 8013856:	f241 3188 	movw	r1, #5000	; 0x1388
{
 801385a:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801385c:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801385e:	f241 1407 	movw	r4, #4359	; 0x1107
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013862:	4d49      	ldr	r5, [pc, #292]	; (8013988 <SDMMC_CmdSelDesel+0x134>)
  SDMMCx->ARG = Command->Argument;
 8013864:	6082      	str	r2, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013866:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801386a:	4a48      	ldr	r2, [pc, #288]	; (801398c <SDMMC_CmdSelDesel+0x138>)
 801386c:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801386e:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013870:	402a      	ands	r2, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013872:	fb01 f303 	mul.w	r3, r1, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013876:	4314      	orrs	r4, r2
 8013878:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 801387a:	b14b      	cbz	r3, 8013890 <SDMMC_CmdSelDesel+0x3c>
 801387c:	1e5a      	subs	r2, r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 801387e:	4944      	ldr	r1, [pc, #272]	; (8013990 <SDMMC_CmdSelDesel+0x13c>)
    sta_reg = SDMMCx->STA;
 8013880:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8013882:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8013884:	420b      	tst	r3, r1
 8013886:	d001      	beq.n	801388c <SDMMC_CmdSelDesel+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8013888:	049c      	lsls	r4, r3, #18
 801388a:	d506      	bpl.n	801389a <SDMMC_CmdSelDesel+0x46>
    if (count-- == 0U)
 801388c:	1c55      	adds	r5, r2, #1
 801388e:	d1f7      	bne.n	8013880 <SDMMC_CmdSelDesel+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8013890:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8013894:	4618      	mov	r0, r3
 8013896:	bc30      	pop	{r4, r5}
 8013898:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801389a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801389c:	075b      	lsls	r3, r3, #29
 801389e:	d43d      	bmi.n	801391c <SDMMC_CmdSelDesel+0xc8>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80138a0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80138a2:	f013 0301 	ands.w	r3, r3, #1
 80138a6:	d134      	bne.n	8013912 <SDMMC_CmdSelDesel+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80138a8:	4b3a      	ldr	r3, [pc, #232]	; (8013994 <SDMMC_CmdSelDesel+0x140>)
 80138aa:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80138ac:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80138ae:	b2db      	uxtb	r3, r3
 80138b0:	2b07      	cmp	r3, #7
 80138b2:	d131      	bne.n	8013918 <SDMMC_CmdSelDesel+0xc4>
  return (*(__IO uint32_t *) tmp);
 80138b4:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80138b6:	4b38      	ldr	r3, [pc, #224]	; (8013998 <SDMMC_CmdSelDesel+0x144>)
 80138b8:	4013      	ands	r3, r2
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d0ea      	beq.n	8013894 <SDMMC_CmdSelDesel+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80138be:	2a00      	cmp	r2, #0
 80138c0:	db2f      	blt.n	8013922 <SDMMC_CmdSelDesel+0xce>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80138c2:	0055      	lsls	r5, r2, #1
 80138c4:	d430      	bmi.n	8013928 <SDMMC_CmdSelDesel+0xd4>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80138c6:	0094      	lsls	r4, r2, #2
 80138c8:	d430      	bmi.n	801392c <SDMMC_CmdSelDesel+0xd8>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80138ca:	00d0      	lsls	r0, r2, #3
 80138cc:	d430      	bmi.n	8013930 <SDMMC_CmdSelDesel+0xdc>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80138ce:	0111      	lsls	r1, r2, #4
 80138d0:	d431      	bmi.n	8013936 <SDMMC_CmdSelDesel+0xe2>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80138d2:	0155      	lsls	r5, r2, #5
 80138d4:	d432      	bmi.n	801393c <SDMMC_CmdSelDesel+0xe8>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80138d6:	01d4      	lsls	r4, r2, #7
 80138d8:	d433      	bmi.n	8013942 <SDMMC_CmdSelDesel+0xee>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80138da:	0210      	lsls	r0, r2, #8
 80138dc:	d434      	bmi.n	8013948 <SDMMC_CmdSelDesel+0xf4>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80138de:	0251      	lsls	r1, r2, #9
 80138e0:	d435      	bmi.n	801394e <SDMMC_CmdSelDesel+0xfa>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80138e2:	0295      	lsls	r5, r2, #10
 80138e4:	d436      	bmi.n	8013954 <SDMMC_CmdSelDesel+0x100>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80138e6:	02d4      	lsls	r4, r2, #11
 80138e8:	d437      	bmi.n	801395a <SDMMC_CmdSelDesel+0x106>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80138ea:	0350      	lsls	r0, r2, #13
 80138ec:	d438      	bmi.n	8013960 <SDMMC_CmdSelDesel+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80138ee:	0391      	lsls	r1, r2, #14
 80138f0:	d439      	bmi.n	8013966 <SDMMC_CmdSelDesel+0x112>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80138f2:	03d5      	lsls	r5, r2, #15
 80138f4:	d43a      	bmi.n	801396c <SDMMC_CmdSelDesel+0x118>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80138f6:	0414      	lsls	r4, r2, #16
 80138f8:	d43b      	bmi.n	8013972 <SDMMC_CmdSelDesel+0x11e>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80138fa:	0450      	lsls	r0, r2, #17
 80138fc:	d43f      	bmi.n	801397e <SDMMC_CmdSelDesel+0x12a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80138fe:	0491      	lsls	r1, r2, #18
 8013900:	d43a      	bmi.n	8013978 <SDMMC_CmdSelDesel+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8013902:	f012 0f08 	tst.w	r2, #8
 8013906:	bf14      	ite	ne
 8013908:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 801390c:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8013910:	e7c0      	b.n	8013894 <SDMMC_CmdSelDesel+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013912:	2201      	movs	r2, #1
 8013914:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013916:	e7bd      	b.n	8013894 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013918:	2301      	movs	r3, #1
 801391a:	e7bb      	b.n	8013894 <SDMMC_CmdSelDesel+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801391c:	2304      	movs	r3, #4
 801391e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013920:	e7b8      	b.n	8013894 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8013922:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8013926:	e7b5      	b.n	8013894 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8013928:	2340      	movs	r3, #64	; 0x40
 801392a:	e7b3      	b.n	8013894 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801392c:	2380      	movs	r3, #128	; 0x80
 801392e:	e7b1      	b.n	8013894 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8013930:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013934:	e7ae      	b.n	8013894 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8013936:	f44f 7300 	mov.w	r3, #512	; 0x200
 801393a:	e7ab      	b.n	8013894 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 801393c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013940:	e7a8      	b.n	8013894 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8013942:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013946:	e7a5      	b.n	8013894 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8013948:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801394c:	e7a2      	b.n	8013894 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 801394e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013952:	e79f      	b.n	8013894 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8013954:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8013958:	e79c      	b.n	8013894 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CC_ERR;
 801395a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801395e:	e799      	b.n	8013894 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8013960:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013964:	e796      	b.n	8013894 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8013966:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801396a:	e793      	b.n	8013894 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 801396c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8013970:	e790      	b.n	8013894 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8013972:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8013976:	e78d      	b.n	8013894 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8013978:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801397c:	e78a      	b.n	8013894 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 801397e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8013982:	e787      	b.n	8013894 <SDMMC_CmdSelDesel+0x40>
 8013984:	2000761c 	.word	0x2000761c
 8013988:	10624dd3 	.word	0x10624dd3
 801398c:	fffee0c0 	.word	0xfffee0c0
 8013990:	00200045 	.word	0x00200045
 8013994:	002000c5 	.word	0x002000c5
 8013998:	fdffe008 	.word	0xfdffe008

0801399c <SDMMC_CmdGoIdleState>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801399c:	4b11      	ldr	r3, [pc, #68]	; (80139e4 <SDMMC_CmdGoIdleState+0x48>)
{
 801399e:	4601      	mov	r1, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80139a0:	4a11      	ldr	r2, [pc, #68]	; (80139e8 <SDMMC_CmdGoIdleState+0x4c>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80139a2:	6818      	ldr	r0, [r3, #0]
 80139a4:	f241 3388 	movw	r3, #5000	; 0x1388
{
 80139a8:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80139aa:	4c10      	ldr	r4, [pc, #64]	; (80139ec <SDMMC_CmdGoIdleState+0x50>)
  SDMMCx->ARG = Command->Argument;
 80139ac:	2500      	movs	r5, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80139ae:	fba4 4000 	umull	r4, r0, r4, r0
  SDMMCx->ARG = Command->Argument;
 80139b2:	608d      	str	r5, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80139b4:	68cc      	ldr	r4, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80139b6:	0a40      	lsrs	r0, r0, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80139b8:	4022      	ands	r2, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80139ba:	fb03 f300 	mul.w	r3, r3, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80139be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80139c2:	60ca      	str	r2, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80139c4:	e002      	b.n	80139cc <SDMMC_CmdGoIdleState+0x30>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80139c6:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 80139c8:	0612      	lsls	r2, r2, #24
 80139ca:	d405      	bmi.n	80139d8 <SDMMC_CmdGoIdleState+0x3c>
    if (count-- == 0U)
 80139cc:	3b01      	subs	r3, #1
 80139ce:	d2fa      	bcs.n	80139c6 <SDMMC_CmdGoIdleState+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 80139d0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80139d4:	bc30      	pop	{r4, r5}
 80139d6:	4770      	bx	lr
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80139d8:	4b05      	ldr	r3, [pc, #20]	; (80139f0 <SDMMC_CmdGoIdleState+0x54>)
  return SDMMC_ERROR_NONE;
 80139da:	2000      	movs	r0, #0
}
 80139dc:	bc30      	pop	{r4, r5}
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80139de:	638b      	str	r3, [r1, #56]	; 0x38
}
 80139e0:	4770      	bx	lr
 80139e2:	bf00      	nop
 80139e4:	2000761c 	.word	0x2000761c
 80139e8:	fffee0c0 	.word	0xfffee0c0
 80139ec:	10624dd3 	.word	0x10624dd3
 80139f0:	002000c5 	.word	0x002000c5

080139f4 <SDMMC_CmdOperCond>:
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80139f4:	4a1b      	ldr	r2, [pc, #108]	; (8013a64 <SDMMC_CmdOperCond+0x70>)
{
 80139f6:	4603      	mov	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80139f8:	491b      	ldr	r1, [pc, #108]	; (8013a68 <SDMMC_CmdOperCond+0x74>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80139fa:	f241 1008 	movw	r0, #4360	; 0x1108
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80139fe:	6812      	ldr	r2, [r2, #0]
{
 8013a00:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 8013a02:	f44f 75d5 	mov.w	r5, #426	; 0x1aa
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013a06:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013a0a:	4c18      	ldr	r4, [pc, #96]	; (8013a6c <SDMMC_CmdOperCond+0x78>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013a0c:	f241 3188 	movw	r1, #5000	; 0x1388
  SDMMCx->ARG = Command->Argument;
 8013a10:	609d      	str	r5, [r3, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013a12:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013a14:	68dd      	ldr	r5, [r3, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013a16:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013a1a:	402c      	ands	r4, r5
 8013a1c:	4320      	orrs	r0, r4
 8013a1e:	60d8      	str	r0, [r3, #12]

  do
  {
    if (count-- == 0U)
 8013a20:	b14a      	cbz	r2, 8013a36 <SDMMC_CmdOperCond+0x42>
 8013a22:	1e51      	subs	r1, r2, #1
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 8013a24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    if (count-- == 0U)
 8013a26:	3901      	subs	r1, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8013a28:	f012 0f45 	tst.w	r2, #69	; 0x45
 8013a2c:	d001      	beq.n	8013a32 <SDMMC_CmdOperCond+0x3e>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013a2e:	0490      	lsls	r0, r2, #18
 8013a30:	d505      	bpl.n	8013a3e <SDMMC_CmdOperCond+0x4a>
    if (count-- == 0U)
 8013a32:	1c4c      	adds	r4, r1, #1
 8013a34:	d1f6      	bne.n	8013a24 <SDMMC_CmdOperCond+0x30>
      return SDMMC_ERROR_TIMEOUT;
 8013a36:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8013a3a:	bc30      	pop	{r4, r5}
 8013a3c:	4770      	bx	lr

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013a3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013a40:	0751      	lsls	r1, r2, #29
 8013a42:	d40c      	bmi.n	8013a5e <SDMMC_CmdOperCond+0x6a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013a44:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8013a46:	f010 0001 	ands.w	r0, r0, #1
 8013a4a:	d105      	bne.n	8013a58 <SDMMC_CmdOperCond+0x64>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8013a4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013a4e:	0652      	lsls	r2, r2, #25
 8013a50:	d5f3      	bpl.n	8013a3a <SDMMC_CmdOperCond+0x46>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8013a52:	2240      	movs	r2, #64	; 0x40
 8013a54:	639a      	str	r2, [r3, #56]	; 0x38
 8013a56:	e7f0      	b.n	8013a3a <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013a58:	2201      	movs	r2, #1
 8013a5a:	639a      	str	r2, [r3, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013a5c:	e7ed      	b.n	8013a3a <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013a5e:	2004      	movs	r0, #4
 8013a60:	6398      	str	r0, [r3, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013a62:	e7ea      	b.n	8013a3a <SDMMC_CmdOperCond+0x46>
 8013a64:	2000761c 	.word	0x2000761c
 8013a68:	10624dd3 	.word	0x10624dd3
 8013a6c:	fffee0c0 	.word	0xfffee0c0

08013a70 <SDMMC_CmdAppCommand>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013a70:	4b4b      	ldr	r3, [pc, #300]	; (8013ba0 <SDMMC_CmdAppCommand+0x130>)
 8013a72:	f241 3288 	movw	r2, #5000	; 0x1388
{
 8013a76:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013a78:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013a7a:	f241 1437 	movw	r4, #4407	; 0x1137
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013a7e:	4d49      	ldr	r5, [pc, #292]	; (8013ba4 <SDMMC_CmdAppCommand+0x134>)
  SDMMCx->ARG = Command->Argument;
 8013a80:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013a82:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013a86:	4948      	ldr	r1, [pc, #288]	; (8013ba8 <SDMMC_CmdAppCommand+0x138>)
 8013a88:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013a8a:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013a8c:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013a8e:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013a92:	430c      	orrs	r4, r1
 8013a94:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8013a96:	b14b      	cbz	r3, 8013aac <SDMMC_CmdAppCommand+0x3c>
 8013a98:	1e5a      	subs	r2, r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8013a9a:	4944      	ldr	r1, [pc, #272]	; (8013bac <SDMMC_CmdAppCommand+0x13c>)
    sta_reg = SDMMCx->STA;
 8013a9c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8013a9e:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8013aa0:	420b      	tst	r3, r1
 8013aa2:	d001      	beq.n	8013aa8 <SDMMC_CmdAppCommand+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8013aa4:	049c      	lsls	r4, r3, #18
 8013aa6:	d506      	bpl.n	8013ab6 <SDMMC_CmdAppCommand+0x46>
    if (count-- == 0U)
 8013aa8:	1c55      	adds	r5, r2, #1
 8013aaa:	d1f7      	bne.n	8013a9c <SDMMC_CmdAppCommand+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8013aac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8013ab0:	4618      	mov	r0, r3
 8013ab2:	bc30      	pop	{r4, r5}
 8013ab4:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013ab6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013ab8:	075b      	lsls	r3, r3, #29
 8013aba:	d43d      	bmi.n	8013b38 <SDMMC_CmdAppCommand+0xc8>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013abc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013abe:	f013 0301 	ands.w	r3, r3, #1
 8013ac2:	d134      	bne.n	8013b2e <SDMMC_CmdAppCommand+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013ac4:	4b3a      	ldr	r3, [pc, #232]	; (8013bb0 <SDMMC_CmdAppCommand+0x140>)
 8013ac6:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8013ac8:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8013aca:	b2db      	uxtb	r3, r3
 8013acc:	2b37      	cmp	r3, #55	; 0x37
 8013ace:	d131      	bne.n	8013b34 <SDMMC_CmdAppCommand+0xc4>
  return (*(__IO uint32_t *) tmp);
 8013ad0:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8013ad2:	4b38      	ldr	r3, [pc, #224]	; (8013bb4 <SDMMC_CmdAppCommand+0x144>)
 8013ad4:	4013      	ands	r3, r2
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	d0ea      	beq.n	8013ab0 <SDMMC_CmdAppCommand+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8013ada:	2a00      	cmp	r2, #0
 8013adc:	db2f      	blt.n	8013b3e <SDMMC_CmdAppCommand+0xce>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8013ade:	0055      	lsls	r5, r2, #1
 8013ae0:	d430      	bmi.n	8013b44 <SDMMC_CmdAppCommand+0xd4>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8013ae2:	0094      	lsls	r4, r2, #2
 8013ae4:	d430      	bmi.n	8013b48 <SDMMC_CmdAppCommand+0xd8>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8013ae6:	00d0      	lsls	r0, r2, #3
 8013ae8:	d430      	bmi.n	8013b4c <SDMMC_CmdAppCommand+0xdc>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8013aea:	0111      	lsls	r1, r2, #4
 8013aec:	d431      	bmi.n	8013b52 <SDMMC_CmdAppCommand+0xe2>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8013aee:	0155      	lsls	r5, r2, #5
 8013af0:	d432      	bmi.n	8013b58 <SDMMC_CmdAppCommand+0xe8>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8013af2:	01d4      	lsls	r4, r2, #7
 8013af4:	d433      	bmi.n	8013b5e <SDMMC_CmdAppCommand+0xee>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8013af6:	0210      	lsls	r0, r2, #8
 8013af8:	d434      	bmi.n	8013b64 <SDMMC_CmdAppCommand+0xf4>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8013afa:	0251      	lsls	r1, r2, #9
 8013afc:	d435      	bmi.n	8013b6a <SDMMC_CmdAppCommand+0xfa>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8013afe:	0295      	lsls	r5, r2, #10
 8013b00:	d436      	bmi.n	8013b70 <SDMMC_CmdAppCommand+0x100>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8013b02:	02d4      	lsls	r4, r2, #11
 8013b04:	d437      	bmi.n	8013b76 <SDMMC_CmdAppCommand+0x106>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8013b06:	0350      	lsls	r0, r2, #13
 8013b08:	d438      	bmi.n	8013b7c <SDMMC_CmdAppCommand+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8013b0a:	0391      	lsls	r1, r2, #14
 8013b0c:	d439      	bmi.n	8013b82 <SDMMC_CmdAppCommand+0x112>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8013b0e:	03d5      	lsls	r5, r2, #15
 8013b10:	d43a      	bmi.n	8013b88 <SDMMC_CmdAppCommand+0x118>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8013b12:	0414      	lsls	r4, r2, #16
 8013b14:	d43b      	bmi.n	8013b8e <SDMMC_CmdAppCommand+0x11e>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8013b16:	0450      	lsls	r0, r2, #17
 8013b18:	d43f      	bmi.n	8013b9a <SDMMC_CmdAppCommand+0x12a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8013b1a:	0491      	lsls	r1, r2, #18
 8013b1c:	d43a      	bmi.n	8013b94 <SDMMC_CmdAppCommand+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8013b1e:	f012 0f08 	tst.w	r2, #8
 8013b22:	bf14      	ite	ne
 8013b24:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8013b28:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8013b2c:	e7c0      	b.n	8013ab0 <SDMMC_CmdAppCommand+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013b2e:	2201      	movs	r2, #1
 8013b30:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013b32:	e7bd      	b.n	8013ab0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013b34:	2301      	movs	r3, #1
 8013b36:	e7bb      	b.n	8013ab0 <SDMMC_CmdAppCommand+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013b38:	2304      	movs	r3, #4
 8013b3a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013b3c:	e7b8      	b.n	8013ab0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8013b3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8013b42:	e7b5      	b.n	8013ab0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8013b44:	2340      	movs	r3, #64	; 0x40
 8013b46:	e7b3      	b.n	8013ab0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8013b48:	2380      	movs	r3, #128	; 0x80
 8013b4a:	e7b1      	b.n	8013ab0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8013b4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013b50:	e7ae      	b.n	8013ab0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8013b52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013b56:	e7ab      	b.n	8013ab0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8013b58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013b5c:	e7a8      	b.n	8013ab0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8013b5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013b62:	e7a5      	b.n	8013ab0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8013b64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013b68:	e7a2      	b.n	8013ab0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8013b6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013b6e:	e79f      	b.n	8013ab0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8013b70:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8013b74:	e79c      	b.n	8013ab0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CC_ERR;
 8013b76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013b7a:	e799      	b.n	8013ab0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8013b7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013b80:	e796      	b.n	8013ab0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8013b82:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8013b86:	e793      	b.n	8013ab0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8013b88:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8013b8c:	e790      	b.n	8013ab0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8013b8e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8013b92:	e78d      	b.n	8013ab0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8013b94:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8013b98:	e78a      	b.n	8013ab0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8013b9a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8013b9e:	e787      	b.n	8013ab0 <SDMMC_CmdAppCommand+0x40>
 8013ba0:	2000761c 	.word	0x2000761c
 8013ba4:	10624dd3 	.word	0x10624dd3
 8013ba8:	fffee0c0 	.word	0xfffee0c0
 8013bac:	00200045 	.word	0x00200045
 8013bb0:	002000c5 	.word	0x002000c5
 8013bb4:	fdffe008 	.word	0xfdffe008

08013bb8 <SDMMC_CmdAppOperCommand>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013bb8:	4b17      	ldr	r3, [pc, #92]	; (8013c18 <SDMMC_CmdAppOperCommand+0x60>)
 8013bba:	f241 3288 	movw	r2, #5000	; 0x1388
{
 8013bbe:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013bc0:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013bc2:	f241 1429 	movw	r4, #4393	; 0x1129
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013bc6:	4d15      	ldr	r5, [pc, #84]	; (8013c1c <SDMMC_CmdAppOperCommand+0x64>)
  SDMMCx->ARG = Command->Argument;
 8013bc8:	6081      	str	r1, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013bca:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013bce:	4914      	ldr	r1, [pc, #80]	; (8013c20 <SDMMC_CmdAppOperCommand+0x68>)
 8013bd0:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013bd2:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013bd4:	4029      	ands	r1, r5
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013bd6:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013bda:	430c      	orrs	r4, r1
 8013bdc:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8013bde:	b14b      	cbz	r3, 8013bf4 <SDMMC_CmdAppOperCommand+0x3c>
 8013be0:	1e5a      	subs	r2, r3, #1
    sta_reg = SDMMCx->STA;
 8013be2:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8013be4:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8013be6:	f013 0f45 	tst.w	r3, #69	; 0x45
 8013bea:	d001      	beq.n	8013bf0 <SDMMC_CmdAppOperCommand+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013bec:	049b      	lsls	r3, r3, #18
 8013bee:	d506      	bpl.n	8013bfe <SDMMC_CmdAppOperCommand+0x46>
    if (count-- == 0U)
 8013bf0:	1c51      	adds	r1, r2, #1
 8013bf2:	d1f6      	bne.n	8013be2 <SDMMC_CmdAppOperCommand+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8013bf4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8013bf8:	4618      	mov	r0, r3
 8013bfa:	bc30      	pop	{r4, r5}
 8013bfc:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013bfe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013c00:	f013 0304 	ands.w	r3, r3, #4
 8013c04:	d104      	bne.n	8013c10 <SDMMC_CmdAppOperCommand+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013c06:	4a07      	ldr	r2, [pc, #28]	; (8013c24 <SDMMC_CmdAppOperCommand+0x6c>)
}
 8013c08:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013c0a:	6382      	str	r2, [r0, #56]	; 0x38
}
 8013c0c:	4618      	mov	r0, r3
 8013c0e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013c10:	2304      	movs	r3, #4
 8013c12:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013c14:	e7f0      	b.n	8013bf8 <SDMMC_CmdAppOperCommand+0x40>
 8013c16:	bf00      	nop
 8013c18:	2000761c 	.word	0x2000761c
 8013c1c:	10624dd3 	.word	0x10624dd3
 8013c20:	fffee0c0 	.word	0xfffee0c0
 8013c24:	002000c5 	.word	0x002000c5

08013c28 <SDMMC_CmdBusWidth>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013c28:	4b4b      	ldr	r3, [pc, #300]	; (8013d58 <SDMMC_CmdBusWidth+0x130>)
 8013c2a:	f241 3288 	movw	r2, #5000	; 0x1388
{
 8013c2e:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013c30:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013c32:	f241 1406 	movw	r4, #4358	; 0x1106
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013c36:	4d49      	ldr	r5, [pc, #292]	; (8013d5c <SDMMC_CmdBusWidth+0x134>)
  SDMMCx->ARG = Command->Argument;
 8013c38:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013c3a:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013c3e:	4948      	ldr	r1, [pc, #288]	; (8013d60 <SDMMC_CmdBusWidth+0x138>)
 8013c40:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013c42:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013c44:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013c46:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013c4a:	430c      	orrs	r4, r1
 8013c4c:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8013c4e:	b14b      	cbz	r3, 8013c64 <SDMMC_CmdBusWidth+0x3c>
 8013c50:	1e5a      	subs	r2, r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8013c52:	4944      	ldr	r1, [pc, #272]	; (8013d64 <SDMMC_CmdBusWidth+0x13c>)
    sta_reg = SDMMCx->STA;
 8013c54:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8013c56:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8013c58:	420b      	tst	r3, r1
 8013c5a:	d001      	beq.n	8013c60 <SDMMC_CmdBusWidth+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8013c5c:	049c      	lsls	r4, r3, #18
 8013c5e:	d506      	bpl.n	8013c6e <SDMMC_CmdBusWidth+0x46>
    if (count-- == 0U)
 8013c60:	1c55      	adds	r5, r2, #1
 8013c62:	d1f7      	bne.n	8013c54 <SDMMC_CmdBusWidth+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8013c64:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8013c68:	4618      	mov	r0, r3
 8013c6a:	bc30      	pop	{r4, r5}
 8013c6c:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013c6e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013c70:	075b      	lsls	r3, r3, #29
 8013c72:	d43d      	bmi.n	8013cf0 <SDMMC_CmdBusWidth+0xc8>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013c74:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013c76:	f013 0301 	ands.w	r3, r3, #1
 8013c7a:	d134      	bne.n	8013ce6 <SDMMC_CmdBusWidth+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013c7c:	4b3a      	ldr	r3, [pc, #232]	; (8013d68 <SDMMC_CmdBusWidth+0x140>)
 8013c7e:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8013c80:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8013c82:	b2db      	uxtb	r3, r3
 8013c84:	2b06      	cmp	r3, #6
 8013c86:	d131      	bne.n	8013cec <SDMMC_CmdBusWidth+0xc4>
  return (*(__IO uint32_t *) tmp);
 8013c88:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8013c8a:	4b38      	ldr	r3, [pc, #224]	; (8013d6c <SDMMC_CmdBusWidth+0x144>)
 8013c8c:	4013      	ands	r3, r2
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d0ea      	beq.n	8013c68 <SDMMC_CmdBusWidth+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8013c92:	2a00      	cmp	r2, #0
 8013c94:	db2f      	blt.n	8013cf6 <SDMMC_CmdBusWidth+0xce>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8013c96:	0055      	lsls	r5, r2, #1
 8013c98:	d430      	bmi.n	8013cfc <SDMMC_CmdBusWidth+0xd4>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8013c9a:	0094      	lsls	r4, r2, #2
 8013c9c:	d430      	bmi.n	8013d00 <SDMMC_CmdBusWidth+0xd8>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8013c9e:	00d0      	lsls	r0, r2, #3
 8013ca0:	d430      	bmi.n	8013d04 <SDMMC_CmdBusWidth+0xdc>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8013ca2:	0111      	lsls	r1, r2, #4
 8013ca4:	d431      	bmi.n	8013d0a <SDMMC_CmdBusWidth+0xe2>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8013ca6:	0155      	lsls	r5, r2, #5
 8013ca8:	d432      	bmi.n	8013d10 <SDMMC_CmdBusWidth+0xe8>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8013caa:	01d4      	lsls	r4, r2, #7
 8013cac:	d433      	bmi.n	8013d16 <SDMMC_CmdBusWidth+0xee>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8013cae:	0210      	lsls	r0, r2, #8
 8013cb0:	d434      	bmi.n	8013d1c <SDMMC_CmdBusWidth+0xf4>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8013cb2:	0251      	lsls	r1, r2, #9
 8013cb4:	d435      	bmi.n	8013d22 <SDMMC_CmdBusWidth+0xfa>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8013cb6:	0295      	lsls	r5, r2, #10
 8013cb8:	d436      	bmi.n	8013d28 <SDMMC_CmdBusWidth+0x100>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8013cba:	02d4      	lsls	r4, r2, #11
 8013cbc:	d437      	bmi.n	8013d2e <SDMMC_CmdBusWidth+0x106>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8013cbe:	0350      	lsls	r0, r2, #13
 8013cc0:	d438      	bmi.n	8013d34 <SDMMC_CmdBusWidth+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8013cc2:	0391      	lsls	r1, r2, #14
 8013cc4:	d439      	bmi.n	8013d3a <SDMMC_CmdBusWidth+0x112>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8013cc6:	03d5      	lsls	r5, r2, #15
 8013cc8:	d43a      	bmi.n	8013d40 <SDMMC_CmdBusWidth+0x118>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8013cca:	0414      	lsls	r4, r2, #16
 8013ccc:	d43b      	bmi.n	8013d46 <SDMMC_CmdBusWidth+0x11e>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8013cce:	0450      	lsls	r0, r2, #17
 8013cd0:	d43f      	bmi.n	8013d52 <SDMMC_CmdBusWidth+0x12a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8013cd2:	0491      	lsls	r1, r2, #18
 8013cd4:	d43a      	bmi.n	8013d4c <SDMMC_CmdBusWidth+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8013cd6:	f012 0f08 	tst.w	r2, #8
 8013cda:	bf14      	ite	ne
 8013cdc:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8013ce0:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8013ce4:	e7c0      	b.n	8013c68 <SDMMC_CmdBusWidth+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013ce6:	2201      	movs	r2, #1
 8013ce8:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013cea:	e7bd      	b.n	8013c68 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013cec:	2301      	movs	r3, #1
 8013cee:	e7bb      	b.n	8013c68 <SDMMC_CmdBusWidth+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013cf0:	2304      	movs	r3, #4
 8013cf2:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013cf4:	e7b8      	b.n	8013c68 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8013cf6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8013cfa:	e7b5      	b.n	8013c68 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8013cfc:	2340      	movs	r3, #64	; 0x40
 8013cfe:	e7b3      	b.n	8013c68 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8013d00:	2380      	movs	r3, #128	; 0x80
 8013d02:	e7b1      	b.n	8013c68 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8013d04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013d08:	e7ae      	b.n	8013c68 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8013d0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013d0e:	e7ab      	b.n	8013c68 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8013d10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013d14:	e7a8      	b.n	8013c68 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8013d16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013d1a:	e7a5      	b.n	8013c68 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8013d1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013d20:	e7a2      	b.n	8013c68 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8013d22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013d26:	e79f      	b.n	8013c68 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8013d28:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8013d2c:	e79c      	b.n	8013c68 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CC_ERR;
 8013d2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013d32:	e799      	b.n	8013c68 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8013d34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013d38:	e796      	b.n	8013c68 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8013d3a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8013d3e:	e793      	b.n	8013c68 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8013d40:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8013d44:	e790      	b.n	8013c68 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8013d46:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8013d4a:	e78d      	b.n	8013c68 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8013d4c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8013d50:	e78a      	b.n	8013c68 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8013d52:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8013d56:	e787      	b.n	8013c68 <SDMMC_CmdBusWidth+0x40>
 8013d58:	2000761c 	.word	0x2000761c
 8013d5c:	10624dd3 	.word	0x10624dd3
 8013d60:	fffee0c0 	.word	0xfffee0c0
 8013d64:	00200045 	.word	0x00200045
 8013d68:	002000c5 	.word	0x002000c5
 8013d6c:	fdffe008 	.word	0xfdffe008

08013d70 <SDMMC_CmdSendSCR>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013d70:	4b4c      	ldr	r3, [pc, #304]	; (8013ea4 <SDMMC_CmdSendSCR+0x134>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013d72:	f241 1133 	movw	r1, #4403	; 0x1133
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013d76:	4a4c      	ldr	r2, [pc, #304]	; (8013ea8 <SDMMC_CmdSendSCR+0x138>)
 8013d78:	681b      	ldr	r3, [r3, #0]
{
 8013d7a:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 8013d7c:	2500      	movs	r5, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013d7e:	fba2 2303 	umull	r2, r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013d82:	4c4a      	ldr	r4, [pc, #296]	; (8013eac <SDMMC_CmdSendSCR+0x13c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013d84:	f241 3288 	movw	r2, #5000	; 0x1388
  SDMMCx->ARG = Command->Argument;
 8013d88:	6085      	str	r5, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013d8a:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013d8c:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013d8e:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013d92:	402c      	ands	r4, r5
 8013d94:	4321      	orrs	r1, r4
 8013d96:	60c1      	str	r1, [r0, #12]
    if (count-- == 0U)
 8013d98:	b14b      	cbz	r3, 8013dae <SDMMC_CmdSendSCR+0x3e>
 8013d9a:	1e5a      	subs	r2, r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8013d9c:	4944      	ldr	r1, [pc, #272]	; (8013eb0 <SDMMC_CmdSendSCR+0x140>)
    sta_reg = SDMMCx->STA;
 8013d9e:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8013da0:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8013da2:	420b      	tst	r3, r1
 8013da4:	d001      	beq.n	8013daa <SDMMC_CmdSendSCR+0x3a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8013da6:	049c      	lsls	r4, r3, #18
 8013da8:	d506      	bpl.n	8013db8 <SDMMC_CmdSendSCR+0x48>
    if (count-- == 0U)
 8013daa:	1c55      	adds	r5, r2, #1
 8013dac:	d1f7      	bne.n	8013d9e <SDMMC_CmdSendSCR+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 8013dae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8013db2:	4618      	mov	r0, r3
 8013db4:	bc30      	pop	{r4, r5}
 8013db6:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013db8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013dba:	075b      	lsls	r3, r3, #29
 8013dbc:	d43d      	bmi.n	8013e3a <SDMMC_CmdSendSCR+0xca>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013dbe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013dc0:	f013 0301 	ands.w	r3, r3, #1
 8013dc4:	d134      	bne.n	8013e30 <SDMMC_CmdSendSCR+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013dc6:	4b3b      	ldr	r3, [pc, #236]	; (8013eb4 <SDMMC_CmdSendSCR+0x144>)
 8013dc8:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8013dca:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8013dcc:	b2db      	uxtb	r3, r3
 8013dce:	2b33      	cmp	r3, #51	; 0x33
 8013dd0:	d131      	bne.n	8013e36 <SDMMC_CmdSendSCR+0xc6>
  return (*(__IO uint32_t *) tmp);
 8013dd2:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8013dd4:	4b38      	ldr	r3, [pc, #224]	; (8013eb8 <SDMMC_CmdSendSCR+0x148>)
 8013dd6:	4013      	ands	r3, r2
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d0ea      	beq.n	8013db2 <SDMMC_CmdSendSCR+0x42>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8013ddc:	2a00      	cmp	r2, #0
 8013dde:	db2f      	blt.n	8013e40 <SDMMC_CmdSendSCR+0xd0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8013de0:	0055      	lsls	r5, r2, #1
 8013de2:	d430      	bmi.n	8013e46 <SDMMC_CmdSendSCR+0xd6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8013de4:	0094      	lsls	r4, r2, #2
 8013de6:	d430      	bmi.n	8013e4a <SDMMC_CmdSendSCR+0xda>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8013de8:	00d0      	lsls	r0, r2, #3
 8013dea:	d430      	bmi.n	8013e4e <SDMMC_CmdSendSCR+0xde>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8013dec:	0111      	lsls	r1, r2, #4
 8013dee:	d431      	bmi.n	8013e54 <SDMMC_CmdSendSCR+0xe4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8013df0:	0155      	lsls	r5, r2, #5
 8013df2:	d432      	bmi.n	8013e5a <SDMMC_CmdSendSCR+0xea>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8013df4:	01d4      	lsls	r4, r2, #7
 8013df6:	d433      	bmi.n	8013e60 <SDMMC_CmdSendSCR+0xf0>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8013df8:	0210      	lsls	r0, r2, #8
 8013dfa:	d434      	bmi.n	8013e66 <SDMMC_CmdSendSCR+0xf6>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8013dfc:	0251      	lsls	r1, r2, #9
 8013dfe:	d435      	bmi.n	8013e6c <SDMMC_CmdSendSCR+0xfc>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8013e00:	0295      	lsls	r5, r2, #10
 8013e02:	d436      	bmi.n	8013e72 <SDMMC_CmdSendSCR+0x102>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8013e04:	02d4      	lsls	r4, r2, #11
 8013e06:	d437      	bmi.n	8013e78 <SDMMC_CmdSendSCR+0x108>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8013e08:	0350      	lsls	r0, r2, #13
 8013e0a:	d438      	bmi.n	8013e7e <SDMMC_CmdSendSCR+0x10e>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8013e0c:	0391      	lsls	r1, r2, #14
 8013e0e:	d439      	bmi.n	8013e84 <SDMMC_CmdSendSCR+0x114>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8013e10:	03d5      	lsls	r5, r2, #15
 8013e12:	d43a      	bmi.n	8013e8a <SDMMC_CmdSendSCR+0x11a>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8013e14:	0414      	lsls	r4, r2, #16
 8013e16:	d43b      	bmi.n	8013e90 <SDMMC_CmdSendSCR+0x120>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8013e18:	0450      	lsls	r0, r2, #17
 8013e1a:	d43f      	bmi.n	8013e9c <SDMMC_CmdSendSCR+0x12c>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8013e1c:	0491      	lsls	r1, r2, #18
 8013e1e:	d43a      	bmi.n	8013e96 <SDMMC_CmdSendSCR+0x126>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8013e20:	f012 0f08 	tst.w	r2, #8
 8013e24:	bf14      	ite	ne
 8013e26:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8013e2a:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8013e2e:	e7c0      	b.n	8013db2 <SDMMC_CmdSendSCR+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013e30:	2201      	movs	r2, #1
 8013e32:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013e34:	e7bd      	b.n	8013db2 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013e36:	2301      	movs	r3, #1
 8013e38:	e7bb      	b.n	8013db2 <SDMMC_CmdSendSCR+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013e3a:	2304      	movs	r3, #4
 8013e3c:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013e3e:	e7b8      	b.n	8013db2 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8013e40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8013e44:	e7b5      	b.n	8013db2 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8013e46:	2340      	movs	r3, #64	; 0x40
 8013e48:	e7b3      	b.n	8013db2 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8013e4a:	2380      	movs	r3, #128	; 0x80
 8013e4c:	e7b1      	b.n	8013db2 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8013e4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013e52:	e7ae      	b.n	8013db2 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8013e54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013e58:	e7ab      	b.n	8013db2 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8013e5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013e5e:	e7a8      	b.n	8013db2 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8013e60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013e64:	e7a5      	b.n	8013db2 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8013e66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013e6a:	e7a2      	b.n	8013db2 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8013e6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013e70:	e79f      	b.n	8013db2 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8013e72:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8013e76:	e79c      	b.n	8013db2 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CC_ERR;
 8013e78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013e7c:	e799      	b.n	8013db2 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8013e7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013e82:	e796      	b.n	8013db2 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8013e84:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8013e88:	e793      	b.n	8013db2 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8013e8a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8013e8e:	e790      	b.n	8013db2 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8013e90:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8013e94:	e78d      	b.n	8013db2 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ERASE_RESET;
 8013e96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8013e9a:	e78a      	b.n	8013db2 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8013e9c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8013ea0:	e787      	b.n	8013db2 <SDMMC_CmdSendSCR+0x42>
 8013ea2:	bf00      	nop
 8013ea4:	2000761c 	.word	0x2000761c
 8013ea8:	10624dd3 	.word	0x10624dd3
 8013eac:	fffee0c0 	.word	0xfffee0c0
 8013eb0:	00200045 	.word	0x00200045
 8013eb4:	002000c5 	.word	0x002000c5
 8013eb8:	fdffe008 	.word	0xfdffe008

08013ebc <SDMMC_CmdSendCID>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013ebc:	4a19      	ldr	r2, [pc, #100]	; (8013f24 <SDMMC_CmdSendCID+0x68>)
{
 8013ebe:	4603      	mov	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013ec0:	4919      	ldr	r1, [pc, #100]	; (8013f28 <SDMMC_CmdSendCID+0x6c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013ec2:	f241 3002 	movw	r0, #4866	; 0x1302
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013ec6:	6812      	ldr	r2, [r2, #0]
{
 8013ec8:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 8013eca:	2500      	movs	r5, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013ecc:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013ed0:	4c16      	ldr	r4, [pc, #88]	; (8013f2c <SDMMC_CmdSendCID+0x70>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013ed2:	f241 3188 	movw	r1, #5000	; 0x1388
  SDMMCx->ARG = Command->Argument;
 8013ed6:	609d      	str	r5, [r3, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013ed8:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013eda:	68dd      	ldr	r5, [r3, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013edc:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013ee0:	402c      	ands	r4, r5
 8013ee2:	4320      	orrs	r0, r4
 8013ee4:	60d8      	str	r0, [r3, #12]
    if (count-- == 0U)
 8013ee6:	b14a      	cbz	r2, 8013efc <SDMMC_CmdSendCID+0x40>
 8013ee8:	1e51      	subs	r1, r2, #1
    sta_reg = SDMMCx->STA;
 8013eea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    if (count-- == 0U)
 8013eec:	3901      	subs	r1, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8013eee:	f012 0f45 	tst.w	r2, #69	; 0x45
 8013ef2:	d001      	beq.n	8013ef8 <SDMMC_CmdSendCID+0x3c>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013ef4:	0490      	lsls	r0, r2, #18
 8013ef6:	d505      	bpl.n	8013f04 <SDMMC_CmdSendCID+0x48>
    if (count-- == 0U)
 8013ef8:	1c4c      	adds	r4, r1, #1
 8013efa:	d1f6      	bne.n	8013eea <SDMMC_CmdSendCID+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 8013efc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8013f00:	bc30      	pop	{r4, r5}
 8013f02:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013f04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013f06:	0752      	lsls	r2, r2, #29
 8013f08:	d408      	bmi.n	8013f1c <SDMMC_CmdSendCID+0x60>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013f0a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8013f0c:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013f10:	bf14      	ite	ne
 8013f12:	2201      	movne	r2, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013f14:	4a06      	ldreq	r2, [pc, #24]	; (8013f30 <SDMMC_CmdSendCID+0x74>)
}
 8013f16:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013f18:	639a      	str	r2, [r3, #56]	; 0x38
}
 8013f1a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013f1c:	2004      	movs	r0, #4
 8013f1e:	6398      	str	r0, [r3, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013f20:	e7ee      	b.n	8013f00 <SDMMC_CmdSendCID+0x44>
 8013f22:	bf00      	nop
 8013f24:	2000761c 	.word	0x2000761c
 8013f28:	10624dd3 	.word	0x10624dd3
 8013f2c:	fffee0c0 	.word	0xfffee0c0
 8013f30:	002000c5 	.word	0x002000c5

08013f34 <SDMMC_CmdSendCSD>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013f34:	4a18      	ldr	r2, [pc, #96]	; (8013f98 <SDMMC_CmdSendCSD+0x64>)
{
 8013f36:	4603      	mov	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013f38:	f241 3088 	movw	r0, #5000	; 0x1388
 8013f3c:	6812      	ldr	r2, [r2, #0]
{
 8013f3e:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013f40:	4d16      	ldr	r5, [pc, #88]	; (8013f9c <SDMMC_CmdSendCSD+0x68>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013f42:	f241 3409 	movw	r4, #4873	; 0x1309
  SDMMCx->ARG = Command->Argument;
 8013f46:	6099      	str	r1, [r3, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013f48:	fba5 5202 	umull	r5, r2, r5, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013f4c:	4914      	ldr	r1, [pc, #80]	; (8013fa0 <SDMMC_CmdSendCSD+0x6c>)
 8013f4e:	68dd      	ldr	r5, [r3, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013f50:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013f52:	4029      	ands	r1, r5
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013f54:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013f58:	430c      	orrs	r4, r1
 8013f5a:	60dc      	str	r4, [r3, #12]
    if (count-- == 0U)
 8013f5c:	b14a      	cbz	r2, 8013f72 <SDMMC_CmdSendCSD+0x3e>
 8013f5e:	1e51      	subs	r1, r2, #1
    sta_reg = SDMMCx->STA;
 8013f60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    if (count-- == 0U)
 8013f62:	3901      	subs	r1, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8013f64:	f012 0f45 	tst.w	r2, #69	; 0x45
 8013f68:	d001      	beq.n	8013f6e <SDMMC_CmdSendCSD+0x3a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013f6a:	0490      	lsls	r0, r2, #18
 8013f6c:	d505      	bpl.n	8013f7a <SDMMC_CmdSendCSD+0x46>
    if (count-- == 0U)
 8013f6e:	1c4c      	adds	r4, r1, #1
 8013f70:	d1f6      	bne.n	8013f60 <SDMMC_CmdSendCSD+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8013f72:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8013f76:	bc30      	pop	{r4, r5}
 8013f78:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013f7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013f7c:	0752      	lsls	r2, r2, #29
 8013f7e:	d408      	bmi.n	8013f92 <SDMMC_CmdSendCSD+0x5e>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013f80:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8013f82:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013f86:	bf14      	ite	ne
 8013f88:	2201      	movne	r2, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013f8a:	4a06      	ldreq	r2, [pc, #24]	; (8013fa4 <SDMMC_CmdSendCSD+0x70>)
}
 8013f8c:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013f8e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8013f90:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013f92:	2004      	movs	r0, #4
 8013f94:	6398      	str	r0, [r3, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013f96:	e7ee      	b.n	8013f76 <SDMMC_CmdSendCSD+0x42>
 8013f98:	2000761c 	.word	0x2000761c
 8013f9c:	10624dd3 	.word	0x10624dd3
 8013fa0:	fffee0c0 	.word	0xfffee0c0
 8013fa4:	002000c5 	.word	0x002000c5

08013fa8 <SDMMC_CmdSetRelAdd>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013fa8:	4b26      	ldr	r3, [pc, #152]	; (8014044 <SDMMC_CmdSetRelAdd+0x9c>)
 8013faa:	4a27      	ldr	r2, [pc, #156]	; (8014048 <SDMMC_CmdSetRelAdd+0xa0>)
 8013fac:	681b      	ldr	r3, [r3, #0]
{
 8013fae:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 8013fb0:	2400      	movs	r4, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013fb2:	fba2 2303 	umull	r2, r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013fb6:	4d25      	ldr	r5, [pc, #148]	; (801404c <SDMMC_CmdSetRelAdd+0xa4>)
  SDMMCx->ARG = Command->Argument;
 8013fb8:	6084      	str	r4, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013fba:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013fbc:	68c2      	ldr	r2, [r0, #12]
 8013fbe:	f241 1403 	movw	r4, #4355	; 0x1103
 8013fc2:	4015      	ands	r5, r2
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013fc4:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013fc8:	432c      	orrs	r4, r5
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013fca:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013fce:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8013fd0:	b14b      	cbz	r3, 8013fe6 <SDMMC_CmdSetRelAdd+0x3e>
 8013fd2:	1e5a      	subs	r2, r3, #1
    sta_reg = SDMMCx->STA;
 8013fd4:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8013fd6:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8013fd8:	f013 0f45 	tst.w	r3, #69	; 0x45
 8013fdc:	d001      	beq.n	8013fe2 <SDMMC_CmdSetRelAdd+0x3a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013fde:	049d      	lsls	r5, r3, #18
 8013fe0:	d506      	bpl.n	8013ff0 <SDMMC_CmdSetRelAdd+0x48>
    if (count-- == 0U)
 8013fe2:	1c53      	adds	r3, r2, #1
 8013fe4:	d1f6      	bne.n	8013fd4 <SDMMC_CmdSetRelAdd+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8013fe6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8013fea:	4618      	mov	r0, r3
 8013fec:	bc30      	pop	{r4, r5}
 8013fee:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013ff0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013ff2:	075c      	lsls	r4, r3, #29
 8013ff4:	d41c      	bmi.n	8014030 <SDMMC_CmdSetRelAdd+0x88>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013ff6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013ff8:	f013 0301 	ands.w	r3, r3, #1
 8013ffc:	d113      	bne.n	8014026 <SDMMC_CmdSetRelAdd+0x7e>
  return (uint8_t)(SDMMCx->RESPCMD);
 8013ffe:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8014000:	b2db      	uxtb	r3, r3
 8014002:	2b03      	cmp	r3, #3
 8014004:	d112      	bne.n	801402c <SDMMC_CmdSetRelAdd+0x84>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014006:	4b12      	ldr	r3, [pc, #72]	; (8014050 <SDMMC_CmdSetRelAdd+0xa8>)
 8014008:	6383      	str	r3, [r0, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 801400a:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 801400c:	f412 4360 	ands.w	r3, r2, #57344	; 0xe000
 8014010:	d014      	beq.n	801403c <SDMMC_CmdSetRelAdd+0x94>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8014012:	0451      	lsls	r1, r2, #17
 8014014:	d40f      	bmi.n	8014036 <SDMMC_CmdSetRelAdd+0x8e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8014016:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 801401a:	bf14      	ite	ne
 801401c:	f44f 5380 	movne.w	r3, #4096	; 0x1000
 8014020:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8014024:	e7e1      	b.n	8013fea <SDMMC_CmdSetRelAdd+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8014026:	2201      	movs	r2, #1
 8014028:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801402a:	e7de      	b.n	8013fea <SDMMC_CmdSetRelAdd+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801402c:	2301      	movs	r3, #1
 801402e:	e7dc      	b.n	8013fea <SDMMC_CmdSetRelAdd+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014030:	2304      	movs	r3, #4
 8014032:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014034:	e7d9      	b.n	8013fea <SDMMC_CmdSetRelAdd+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8014036:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801403a:	e7d6      	b.n	8013fea <SDMMC_CmdSetRelAdd+0x42>
    *pRCA = (uint16_t) (response_r1 >> 16);
 801403c:	0c12      	lsrs	r2, r2, #16
 801403e:	800a      	strh	r2, [r1, #0]
    return SDMMC_ERROR_NONE;
 8014040:	e7d3      	b.n	8013fea <SDMMC_CmdSetRelAdd+0x42>
 8014042:	bf00      	nop
 8014044:	2000761c 	.word	0x2000761c
 8014048:	10624dd3 	.word	0x10624dd3
 801404c:	fffee0c0 	.word	0xfffee0c0
 8014050:	002000c5 	.word	0x002000c5

08014054 <SDMMC_CmdSendStatus>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8014054:	4b4b      	ldr	r3, [pc, #300]	; (8014184 <SDMMC_CmdSendStatus+0x130>)
 8014056:	f241 3288 	movw	r2, #5000	; 0x1388
{
 801405a:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801405c:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801405e:	f241 140d 	movw	r4, #4365	; 0x110d
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8014062:	4d49      	ldr	r5, [pc, #292]	; (8014188 <SDMMC_CmdSendStatus+0x134>)
  SDMMCx->ARG = Command->Argument;
 8014064:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8014066:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801406a:	4948      	ldr	r1, [pc, #288]	; (801418c <SDMMC_CmdSendStatus+0x138>)
 801406c:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801406e:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8014070:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8014072:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8014076:	430c      	orrs	r4, r1
 8014078:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 801407a:	b14b      	cbz	r3, 8014090 <SDMMC_CmdSendStatus+0x3c>
 801407c:	1e5a      	subs	r2, r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 801407e:	4944      	ldr	r1, [pc, #272]	; (8014190 <SDMMC_CmdSendStatus+0x13c>)
    sta_reg = SDMMCx->STA;
 8014080:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8014082:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8014084:	420b      	tst	r3, r1
 8014086:	d001      	beq.n	801408c <SDMMC_CmdSendStatus+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8014088:	049c      	lsls	r4, r3, #18
 801408a:	d506      	bpl.n	801409a <SDMMC_CmdSendStatus+0x46>
    if (count-- == 0U)
 801408c:	1c55      	adds	r5, r2, #1
 801408e:	d1f7      	bne.n	8014080 <SDMMC_CmdSendStatus+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8014090:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8014094:	4618      	mov	r0, r3
 8014096:	bc30      	pop	{r4, r5}
 8014098:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801409a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801409c:	075b      	lsls	r3, r3, #29
 801409e:	d43d      	bmi.n	801411c <SDMMC_CmdSendStatus+0xc8>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80140a0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80140a2:	f013 0301 	ands.w	r3, r3, #1
 80140a6:	d134      	bne.n	8014112 <SDMMC_CmdSendStatus+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80140a8:	4b3a      	ldr	r3, [pc, #232]	; (8014194 <SDMMC_CmdSendStatus+0x140>)
 80140aa:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80140ac:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80140ae:	b2db      	uxtb	r3, r3
 80140b0:	2b0d      	cmp	r3, #13
 80140b2:	d131      	bne.n	8014118 <SDMMC_CmdSendStatus+0xc4>
  return (*(__IO uint32_t *) tmp);
 80140b4:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80140b6:	4b38      	ldr	r3, [pc, #224]	; (8014198 <SDMMC_CmdSendStatus+0x144>)
 80140b8:	4013      	ands	r3, r2
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	d0ea      	beq.n	8014094 <SDMMC_CmdSendStatus+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80140be:	2a00      	cmp	r2, #0
 80140c0:	db2f      	blt.n	8014122 <SDMMC_CmdSendStatus+0xce>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80140c2:	0055      	lsls	r5, r2, #1
 80140c4:	d430      	bmi.n	8014128 <SDMMC_CmdSendStatus+0xd4>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80140c6:	0094      	lsls	r4, r2, #2
 80140c8:	d430      	bmi.n	801412c <SDMMC_CmdSendStatus+0xd8>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80140ca:	00d0      	lsls	r0, r2, #3
 80140cc:	d430      	bmi.n	8014130 <SDMMC_CmdSendStatus+0xdc>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80140ce:	0111      	lsls	r1, r2, #4
 80140d0:	d431      	bmi.n	8014136 <SDMMC_CmdSendStatus+0xe2>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80140d2:	0155      	lsls	r5, r2, #5
 80140d4:	d432      	bmi.n	801413c <SDMMC_CmdSendStatus+0xe8>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80140d6:	01d4      	lsls	r4, r2, #7
 80140d8:	d433      	bmi.n	8014142 <SDMMC_CmdSendStatus+0xee>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80140da:	0210      	lsls	r0, r2, #8
 80140dc:	d434      	bmi.n	8014148 <SDMMC_CmdSendStatus+0xf4>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80140de:	0251      	lsls	r1, r2, #9
 80140e0:	d435      	bmi.n	801414e <SDMMC_CmdSendStatus+0xfa>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80140e2:	0295      	lsls	r5, r2, #10
 80140e4:	d436      	bmi.n	8014154 <SDMMC_CmdSendStatus+0x100>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80140e6:	02d4      	lsls	r4, r2, #11
 80140e8:	d437      	bmi.n	801415a <SDMMC_CmdSendStatus+0x106>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80140ea:	0350      	lsls	r0, r2, #13
 80140ec:	d438      	bmi.n	8014160 <SDMMC_CmdSendStatus+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80140ee:	0391      	lsls	r1, r2, #14
 80140f0:	d439      	bmi.n	8014166 <SDMMC_CmdSendStatus+0x112>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80140f2:	03d5      	lsls	r5, r2, #15
 80140f4:	d43a      	bmi.n	801416c <SDMMC_CmdSendStatus+0x118>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80140f6:	0414      	lsls	r4, r2, #16
 80140f8:	d43b      	bmi.n	8014172 <SDMMC_CmdSendStatus+0x11e>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80140fa:	0450      	lsls	r0, r2, #17
 80140fc:	d43f      	bmi.n	801417e <SDMMC_CmdSendStatus+0x12a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80140fe:	0491      	lsls	r1, r2, #18
 8014100:	d43a      	bmi.n	8014178 <SDMMC_CmdSendStatus+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8014102:	f012 0f08 	tst.w	r2, #8
 8014106:	bf14      	ite	ne
 8014108:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 801410c:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8014110:	e7c0      	b.n	8014094 <SDMMC_CmdSendStatus+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8014112:	2201      	movs	r2, #1
 8014114:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014116:	e7bd      	b.n	8014094 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014118:	2301      	movs	r3, #1
 801411a:	e7bb      	b.n	8014094 <SDMMC_CmdSendStatus+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801411c:	2304      	movs	r3, #4
 801411e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014120:	e7b8      	b.n	8014094 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8014122:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8014126:	e7b5      	b.n	8014094 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8014128:	2340      	movs	r3, #64	; 0x40
 801412a:	e7b3      	b.n	8014094 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801412c:	2380      	movs	r3, #128	; 0x80
 801412e:	e7b1      	b.n	8014094 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8014130:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014134:	e7ae      	b.n	8014094 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8014136:	f44f 7300 	mov.w	r3, #512	; 0x200
 801413a:	e7ab      	b.n	8014094 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 801413c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014140:	e7a8      	b.n	8014094 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8014142:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014146:	e7a5      	b.n	8014094 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8014148:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801414c:	e7a2      	b.n	8014094 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 801414e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8014152:	e79f      	b.n	8014094 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8014154:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8014158:	e79c      	b.n	8014094 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CC_ERR;
 801415a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801415e:	e799      	b.n	8014094 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8014160:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8014164:	e796      	b.n	8014094 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8014166:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801416a:	e793      	b.n	8014094 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 801416c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8014170:	e790      	b.n	8014094 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8014172:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8014176:	e78d      	b.n	8014094 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8014178:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801417c:	e78a      	b.n	8014094 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 801417e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8014182:	e787      	b.n	8014094 <SDMMC_CmdSendStatus+0x40>
 8014184:	2000761c 	.word	0x2000761c
 8014188:	10624dd3 	.word	0x10624dd3
 801418c:	fffee0c0 	.word	0xfffee0c0
 8014190:	00200045 	.word	0x00200045
 8014194:	002000c5 	.word	0x002000c5
 8014198:	fdffe008 	.word	0xfdffe008

0801419c <SDMMC_CmdStatusRegister>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801419c:	4b4c      	ldr	r3, [pc, #304]	; (80142d0 <SDMMC_CmdStatusRegister+0x134>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801419e:	f241 110d 	movw	r1, #4365	; 0x110d
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80141a2:	4a4c      	ldr	r2, [pc, #304]	; (80142d4 <SDMMC_CmdStatusRegister+0x138>)
 80141a4:	681b      	ldr	r3, [r3, #0]
{
 80141a6:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 80141a8:	2500      	movs	r5, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80141aa:	fba2 2303 	umull	r2, r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80141ae:	4c4a      	ldr	r4, [pc, #296]	; (80142d8 <SDMMC_CmdStatusRegister+0x13c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80141b0:	f241 3288 	movw	r2, #5000	; 0x1388
  SDMMCx->ARG = Command->Argument;
 80141b4:	6085      	str	r5, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80141b6:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80141b8:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80141ba:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80141be:	402c      	ands	r4, r5
 80141c0:	4321      	orrs	r1, r4
 80141c2:	60c1      	str	r1, [r0, #12]
    if (count-- == 0U)
 80141c4:	b14b      	cbz	r3, 80141da <SDMMC_CmdStatusRegister+0x3e>
 80141c6:	1e5a      	subs	r2, r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80141c8:	4944      	ldr	r1, [pc, #272]	; (80142dc <SDMMC_CmdStatusRegister+0x140>)
    sta_reg = SDMMCx->STA;
 80141ca:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 80141cc:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80141ce:	420b      	tst	r3, r1
 80141d0:	d001      	beq.n	80141d6 <SDMMC_CmdStatusRegister+0x3a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80141d2:	049c      	lsls	r4, r3, #18
 80141d4:	d506      	bpl.n	80141e4 <SDMMC_CmdStatusRegister+0x48>
    if (count-- == 0U)
 80141d6:	1c55      	adds	r5, r2, #1
 80141d8:	d1f7      	bne.n	80141ca <SDMMC_CmdStatusRegister+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 80141da:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 80141de:	4618      	mov	r0, r3
 80141e0:	bc30      	pop	{r4, r5}
 80141e2:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80141e4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80141e6:	075b      	lsls	r3, r3, #29
 80141e8:	d43d      	bmi.n	8014266 <SDMMC_CmdStatusRegister+0xca>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80141ea:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80141ec:	f013 0301 	ands.w	r3, r3, #1
 80141f0:	d134      	bne.n	801425c <SDMMC_CmdStatusRegister+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80141f2:	4b3b      	ldr	r3, [pc, #236]	; (80142e0 <SDMMC_CmdStatusRegister+0x144>)
 80141f4:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80141f6:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80141f8:	b2db      	uxtb	r3, r3
 80141fa:	2b0d      	cmp	r3, #13
 80141fc:	d131      	bne.n	8014262 <SDMMC_CmdStatusRegister+0xc6>
  return (*(__IO uint32_t *) tmp);
 80141fe:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8014200:	4b38      	ldr	r3, [pc, #224]	; (80142e4 <SDMMC_CmdStatusRegister+0x148>)
 8014202:	4013      	ands	r3, r2
 8014204:	2b00      	cmp	r3, #0
 8014206:	d0ea      	beq.n	80141de <SDMMC_CmdStatusRegister+0x42>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8014208:	2a00      	cmp	r2, #0
 801420a:	db2f      	blt.n	801426c <SDMMC_CmdStatusRegister+0xd0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801420c:	0055      	lsls	r5, r2, #1
 801420e:	d430      	bmi.n	8014272 <SDMMC_CmdStatusRegister+0xd6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8014210:	0094      	lsls	r4, r2, #2
 8014212:	d430      	bmi.n	8014276 <SDMMC_CmdStatusRegister+0xda>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8014214:	00d0      	lsls	r0, r2, #3
 8014216:	d430      	bmi.n	801427a <SDMMC_CmdStatusRegister+0xde>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8014218:	0111      	lsls	r1, r2, #4
 801421a:	d431      	bmi.n	8014280 <SDMMC_CmdStatusRegister+0xe4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801421c:	0155      	lsls	r5, r2, #5
 801421e:	d432      	bmi.n	8014286 <SDMMC_CmdStatusRegister+0xea>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8014220:	01d4      	lsls	r4, r2, #7
 8014222:	d433      	bmi.n	801428c <SDMMC_CmdStatusRegister+0xf0>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8014224:	0210      	lsls	r0, r2, #8
 8014226:	d434      	bmi.n	8014292 <SDMMC_CmdStatusRegister+0xf6>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8014228:	0251      	lsls	r1, r2, #9
 801422a:	d435      	bmi.n	8014298 <SDMMC_CmdStatusRegister+0xfc>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801422c:	0295      	lsls	r5, r2, #10
 801422e:	d436      	bmi.n	801429e <SDMMC_CmdStatusRegister+0x102>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8014230:	02d4      	lsls	r4, r2, #11
 8014232:	d437      	bmi.n	80142a4 <SDMMC_CmdStatusRegister+0x108>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8014234:	0350      	lsls	r0, r2, #13
 8014236:	d438      	bmi.n	80142aa <SDMMC_CmdStatusRegister+0x10e>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8014238:	0391      	lsls	r1, r2, #14
 801423a:	d439      	bmi.n	80142b0 <SDMMC_CmdStatusRegister+0x114>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801423c:	03d5      	lsls	r5, r2, #15
 801423e:	d43a      	bmi.n	80142b6 <SDMMC_CmdStatusRegister+0x11a>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8014240:	0414      	lsls	r4, r2, #16
 8014242:	d43b      	bmi.n	80142bc <SDMMC_CmdStatusRegister+0x120>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8014244:	0450      	lsls	r0, r2, #17
 8014246:	d43f      	bmi.n	80142c8 <SDMMC_CmdStatusRegister+0x12c>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8014248:	0491      	lsls	r1, r2, #18
 801424a:	d43a      	bmi.n	80142c2 <SDMMC_CmdStatusRegister+0x126>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801424c:	f012 0f08 	tst.w	r2, #8
 8014250:	bf14      	ite	ne
 8014252:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8014256:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 801425a:	e7c0      	b.n	80141de <SDMMC_CmdStatusRegister+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801425c:	2201      	movs	r2, #1
 801425e:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014260:	e7bd      	b.n	80141de <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014262:	2301      	movs	r3, #1
 8014264:	e7bb      	b.n	80141de <SDMMC_CmdStatusRegister+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014266:	2304      	movs	r3, #4
 8014268:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801426a:	e7b8      	b.n	80141de <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 801426c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8014270:	e7b5      	b.n	80141de <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8014272:	2340      	movs	r3, #64	; 0x40
 8014274:	e7b3      	b.n	80141de <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8014276:	2380      	movs	r3, #128	; 0x80
 8014278:	e7b1      	b.n	80141de <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 801427a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801427e:	e7ae      	b.n	80141de <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8014280:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014284:	e7ab      	b.n	80141de <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8014286:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801428a:	e7a8      	b.n	80141de <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 801428c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014290:	e7a5      	b.n	80141de <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8014292:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014296:	e7a2      	b.n	80141de <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8014298:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801429c:	e79f      	b.n	80141de <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 801429e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80142a2:	e79c      	b.n	80141de <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CC_ERR;
 80142a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80142a8:	e799      	b.n	80141de <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80142aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80142ae:	e796      	b.n	80141de <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80142b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80142b4:	e793      	b.n	80141de <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80142b6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80142ba:	e790      	b.n	80141de <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80142bc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80142c0:	e78d      	b.n	80141de <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ERASE_RESET;
 80142c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80142c6:	e78a      	b.n	80141de <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80142c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80142cc:	e787      	b.n	80141de <SDMMC_CmdStatusRegister+0x42>
 80142ce:	bf00      	nop
 80142d0:	2000761c 	.word	0x2000761c
 80142d4:	10624dd3 	.word	0x10624dd3
 80142d8:	fffee0c0 	.word	0xfffee0c0
 80142dc:	00200045 	.word	0x00200045
 80142e0:	002000c5 	.word	0x002000c5
 80142e4:	fdffe008 	.word	0xfdffe008

080142e8 <SDMMC_CmdSwitch>:
 80142e8:	4b4b      	ldr	r3, [pc, #300]	; (8014418 <SDMMC_CmdSwitch+0x130>)
 80142ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80142ee:	b430      	push	{r4, r5}
 80142f0:	681b      	ldr	r3, [r3, #0]
 80142f2:	f241 1406 	movw	r4, #4358	; 0x1106
 80142f6:	4d49      	ldr	r5, [pc, #292]	; (801441c <SDMMC_CmdSwitch+0x134>)
 80142f8:	6081      	str	r1, [r0, #8]
 80142fa:	fba5 5303 	umull	r5, r3, r5, r3
 80142fe:	4948      	ldr	r1, [pc, #288]	; (8014420 <SDMMC_CmdSwitch+0x138>)
 8014300:	68c5      	ldr	r5, [r0, #12]
 8014302:	0a5b      	lsrs	r3, r3, #9
 8014304:	4029      	ands	r1, r5
 8014306:	fb02 f303 	mul.w	r3, r2, r3
 801430a:	430c      	orrs	r4, r1
 801430c:	60c4      	str	r4, [r0, #12]
 801430e:	b14b      	cbz	r3, 8014324 <SDMMC_CmdSwitch+0x3c>
 8014310:	1e5a      	subs	r2, r3, #1
 8014312:	4944      	ldr	r1, [pc, #272]	; (8014424 <SDMMC_CmdSwitch+0x13c>)
 8014314:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8014316:	3a01      	subs	r2, #1
 8014318:	420b      	tst	r3, r1
 801431a:	d001      	beq.n	8014320 <SDMMC_CmdSwitch+0x38>
 801431c:	049c      	lsls	r4, r3, #18
 801431e:	d506      	bpl.n	801432e <SDMMC_CmdSwitch+0x46>
 8014320:	1c55      	adds	r5, r2, #1
 8014322:	d1f7      	bne.n	8014314 <SDMMC_CmdSwitch+0x2c>
 8014324:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014328:	4618      	mov	r0, r3
 801432a:	bc30      	pop	{r4, r5}
 801432c:	4770      	bx	lr
 801432e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8014330:	075b      	lsls	r3, r3, #29
 8014332:	d43d      	bmi.n	80143b0 <SDMMC_CmdSwitch+0xc8>
 8014334:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8014336:	f013 0301 	ands.w	r3, r3, #1
 801433a:	d134      	bne.n	80143a6 <SDMMC_CmdSwitch+0xbe>
 801433c:	4b3a      	ldr	r3, [pc, #232]	; (8014428 <SDMMC_CmdSwitch+0x140>)
 801433e:	6383      	str	r3, [r0, #56]	; 0x38
 8014340:	6903      	ldr	r3, [r0, #16]
 8014342:	b2db      	uxtb	r3, r3
 8014344:	2b06      	cmp	r3, #6
 8014346:	d131      	bne.n	80143ac <SDMMC_CmdSwitch+0xc4>
 8014348:	6942      	ldr	r2, [r0, #20]
 801434a:	4b38      	ldr	r3, [pc, #224]	; (801442c <SDMMC_CmdSwitch+0x144>)
 801434c:	4013      	ands	r3, r2
 801434e:	2b00      	cmp	r3, #0
 8014350:	d0ea      	beq.n	8014328 <SDMMC_CmdSwitch+0x40>
 8014352:	2a00      	cmp	r2, #0
 8014354:	db2f      	blt.n	80143b6 <SDMMC_CmdSwitch+0xce>
 8014356:	0055      	lsls	r5, r2, #1
 8014358:	d430      	bmi.n	80143bc <SDMMC_CmdSwitch+0xd4>
 801435a:	0094      	lsls	r4, r2, #2
 801435c:	d430      	bmi.n	80143c0 <SDMMC_CmdSwitch+0xd8>
 801435e:	00d0      	lsls	r0, r2, #3
 8014360:	d430      	bmi.n	80143c4 <SDMMC_CmdSwitch+0xdc>
 8014362:	0111      	lsls	r1, r2, #4
 8014364:	d431      	bmi.n	80143ca <SDMMC_CmdSwitch+0xe2>
 8014366:	0155      	lsls	r5, r2, #5
 8014368:	d432      	bmi.n	80143d0 <SDMMC_CmdSwitch+0xe8>
 801436a:	01d4      	lsls	r4, r2, #7
 801436c:	d433      	bmi.n	80143d6 <SDMMC_CmdSwitch+0xee>
 801436e:	0210      	lsls	r0, r2, #8
 8014370:	d434      	bmi.n	80143dc <SDMMC_CmdSwitch+0xf4>
 8014372:	0251      	lsls	r1, r2, #9
 8014374:	d435      	bmi.n	80143e2 <SDMMC_CmdSwitch+0xfa>
 8014376:	0295      	lsls	r5, r2, #10
 8014378:	d436      	bmi.n	80143e8 <SDMMC_CmdSwitch+0x100>
 801437a:	02d4      	lsls	r4, r2, #11
 801437c:	d437      	bmi.n	80143ee <SDMMC_CmdSwitch+0x106>
 801437e:	0350      	lsls	r0, r2, #13
 8014380:	d438      	bmi.n	80143f4 <SDMMC_CmdSwitch+0x10c>
 8014382:	0391      	lsls	r1, r2, #14
 8014384:	d439      	bmi.n	80143fa <SDMMC_CmdSwitch+0x112>
 8014386:	03d5      	lsls	r5, r2, #15
 8014388:	d43a      	bmi.n	8014400 <SDMMC_CmdSwitch+0x118>
 801438a:	0414      	lsls	r4, r2, #16
 801438c:	d43b      	bmi.n	8014406 <SDMMC_CmdSwitch+0x11e>
 801438e:	0450      	lsls	r0, r2, #17
 8014390:	d43f      	bmi.n	8014412 <SDMMC_CmdSwitch+0x12a>
 8014392:	0491      	lsls	r1, r2, #18
 8014394:	d43a      	bmi.n	801440c <SDMMC_CmdSwitch+0x124>
 8014396:	f012 0f08 	tst.w	r2, #8
 801439a:	bf14      	ite	ne
 801439c:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 80143a0:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 80143a4:	e7c0      	b.n	8014328 <SDMMC_CmdSwitch+0x40>
 80143a6:	2201      	movs	r2, #1
 80143a8:	6382      	str	r2, [r0, #56]	; 0x38
 80143aa:	e7bd      	b.n	8014328 <SDMMC_CmdSwitch+0x40>
 80143ac:	2301      	movs	r3, #1
 80143ae:	e7bb      	b.n	8014328 <SDMMC_CmdSwitch+0x40>
 80143b0:	2304      	movs	r3, #4
 80143b2:	6383      	str	r3, [r0, #56]	; 0x38
 80143b4:	e7b8      	b.n	8014328 <SDMMC_CmdSwitch+0x40>
 80143b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80143ba:	e7b5      	b.n	8014328 <SDMMC_CmdSwitch+0x40>
 80143bc:	2340      	movs	r3, #64	; 0x40
 80143be:	e7b3      	b.n	8014328 <SDMMC_CmdSwitch+0x40>
 80143c0:	2380      	movs	r3, #128	; 0x80
 80143c2:	e7b1      	b.n	8014328 <SDMMC_CmdSwitch+0x40>
 80143c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80143c8:	e7ae      	b.n	8014328 <SDMMC_CmdSwitch+0x40>
 80143ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80143ce:	e7ab      	b.n	8014328 <SDMMC_CmdSwitch+0x40>
 80143d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80143d4:	e7a8      	b.n	8014328 <SDMMC_CmdSwitch+0x40>
 80143d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80143da:	e7a5      	b.n	8014328 <SDMMC_CmdSwitch+0x40>
 80143dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80143e0:	e7a2      	b.n	8014328 <SDMMC_CmdSwitch+0x40>
 80143e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80143e6:	e79f      	b.n	8014328 <SDMMC_CmdSwitch+0x40>
 80143e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80143ec:	e79c      	b.n	8014328 <SDMMC_CmdSwitch+0x40>
 80143ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80143f2:	e799      	b.n	8014328 <SDMMC_CmdSwitch+0x40>
 80143f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80143f8:	e796      	b.n	8014328 <SDMMC_CmdSwitch+0x40>
 80143fa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80143fe:	e793      	b.n	8014328 <SDMMC_CmdSwitch+0x40>
 8014400:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8014404:	e790      	b.n	8014328 <SDMMC_CmdSwitch+0x40>
 8014406:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801440a:	e78d      	b.n	8014328 <SDMMC_CmdSwitch+0x40>
 801440c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8014410:	e78a      	b.n	8014328 <SDMMC_CmdSwitch+0x40>
 8014412:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8014416:	e787      	b.n	8014328 <SDMMC_CmdSwitch+0x40>
 8014418:	2000761c 	.word	0x2000761c
 801441c:	10624dd3 	.word	0x10624dd3
 8014420:	fffee0c0 	.word	0xfffee0c0
 8014424:	00200045 	.word	0x00200045
 8014428:	002000c5 	.word	0x002000c5
 801442c:	fdffe008 	.word	0xfdffe008

08014430 <SDMMC_CmdVoltageSwitch>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8014430:	4b4c      	ldr	r3, [pc, #304]	; (8014564 <SDMMC_CmdVoltageSwitch+0x134>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8014432:	f241 110b 	movw	r1, #4363	; 0x110b
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8014436:	4a4c      	ldr	r2, [pc, #304]	; (8014568 <SDMMC_CmdVoltageSwitch+0x138>)
 8014438:	681b      	ldr	r3, [r3, #0]
{
 801443a:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 801443c:	2500      	movs	r5, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801443e:	fba2 2303 	umull	r2, r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8014442:	4c4a      	ldr	r4, [pc, #296]	; (801456c <SDMMC_CmdVoltageSwitch+0x13c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8014444:	f241 3288 	movw	r2, #5000	; 0x1388
  SDMMCx->ARG = Command->Argument;
 8014448:	6085      	str	r5, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801444a:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801444c:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801444e:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8014452:	402c      	ands	r4, r5
 8014454:	4321      	orrs	r1, r4
 8014456:	60c1      	str	r1, [r0, #12]
    if (count-- == 0U)
 8014458:	b14b      	cbz	r3, 801446e <SDMMC_CmdVoltageSwitch+0x3e>
 801445a:	1e5a      	subs	r2, r3, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 801445c:	4944      	ldr	r1, [pc, #272]	; (8014570 <SDMMC_CmdVoltageSwitch+0x140>)
    sta_reg = SDMMCx->STA;
 801445e:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8014460:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8014462:	420b      	tst	r3, r1
 8014464:	d001      	beq.n	801446a <SDMMC_CmdVoltageSwitch+0x3a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8014466:	049c      	lsls	r4, r3, #18
 8014468:	d506      	bpl.n	8014478 <SDMMC_CmdVoltageSwitch+0x48>
    if (count-- == 0U)
 801446a:	1c55      	adds	r5, r2, #1
 801446c:	d1f7      	bne.n	801445e <SDMMC_CmdVoltageSwitch+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 801446e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8014472:	4618      	mov	r0, r3
 8014474:	bc30      	pop	{r4, r5}
 8014476:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8014478:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801447a:	075b      	lsls	r3, r3, #29
 801447c:	d43d      	bmi.n	80144fa <SDMMC_CmdVoltageSwitch+0xca>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801447e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8014480:	f013 0301 	ands.w	r3, r3, #1
 8014484:	d134      	bne.n	80144f0 <SDMMC_CmdVoltageSwitch+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014486:	4b3b      	ldr	r3, [pc, #236]	; (8014574 <SDMMC_CmdVoltageSwitch+0x144>)
 8014488:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 801448a:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801448c:	b2db      	uxtb	r3, r3
 801448e:	2b0b      	cmp	r3, #11
 8014490:	d131      	bne.n	80144f6 <SDMMC_CmdVoltageSwitch+0xc6>
  return (*(__IO uint32_t *) tmp);
 8014492:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8014494:	4b38      	ldr	r3, [pc, #224]	; (8014578 <SDMMC_CmdVoltageSwitch+0x148>)
 8014496:	4013      	ands	r3, r2
 8014498:	2b00      	cmp	r3, #0
 801449a:	d0ea      	beq.n	8014472 <SDMMC_CmdVoltageSwitch+0x42>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801449c:	2a00      	cmp	r2, #0
 801449e:	db2f      	blt.n	8014500 <SDMMC_CmdVoltageSwitch+0xd0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80144a0:	0055      	lsls	r5, r2, #1
 80144a2:	d430      	bmi.n	8014506 <SDMMC_CmdVoltageSwitch+0xd6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80144a4:	0094      	lsls	r4, r2, #2
 80144a6:	d430      	bmi.n	801450a <SDMMC_CmdVoltageSwitch+0xda>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80144a8:	00d0      	lsls	r0, r2, #3
 80144aa:	d430      	bmi.n	801450e <SDMMC_CmdVoltageSwitch+0xde>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80144ac:	0111      	lsls	r1, r2, #4
 80144ae:	d431      	bmi.n	8014514 <SDMMC_CmdVoltageSwitch+0xe4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80144b0:	0155      	lsls	r5, r2, #5
 80144b2:	d432      	bmi.n	801451a <SDMMC_CmdVoltageSwitch+0xea>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80144b4:	01d4      	lsls	r4, r2, #7
 80144b6:	d433      	bmi.n	8014520 <SDMMC_CmdVoltageSwitch+0xf0>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80144b8:	0210      	lsls	r0, r2, #8
 80144ba:	d434      	bmi.n	8014526 <SDMMC_CmdVoltageSwitch+0xf6>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80144bc:	0251      	lsls	r1, r2, #9
 80144be:	d435      	bmi.n	801452c <SDMMC_CmdVoltageSwitch+0xfc>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80144c0:	0295      	lsls	r5, r2, #10
 80144c2:	d436      	bmi.n	8014532 <SDMMC_CmdVoltageSwitch+0x102>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80144c4:	02d4      	lsls	r4, r2, #11
 80144c6:	d437      	bmi.n	8014538 <SDMMC_CmdVoltageSwitch+0x108>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80144c8:	0350      	lsls	r0, r2, #13
 80144ca:	d438      	bmi.n	801453e <SDMMC_CmdVoltageSwitch+0x10e>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80144cc:	0391      	lsls	r1, r2, #14
 80144ce:	d439      	bmi.n	8014544 <SDMMC_CmdVoltageSwitch+0x114>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80144d0:	03d5      	lsls	r5, r2, #15
 80144d2:	d43a      	bmi.n	801454a <SDMMC_CmdVoltageSwitch+0x11a>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80144d4:	0414      	lsls	r4, r2, #16
 80144d6:	d43b      	bmi.n	8014550 <SDMMC_CmdVoltageSwitch+0x120>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80144d8:	0450      	lsls	r0, r2, #17
 80144da:	d43f      	bmi.n	801455c <SDMMC_CmdVoltageSwitch+0x12c>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80144dc:	0491      	lsls	r1, r2, #18
 80144de:	d43a      	bmi.n	8014556 <SDMMC_CmdVoltageSwitch+0x126>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80144e0:	f012 0f08 	tst.w	r2, #8
 80144e4:	bf14      	ite	ne
 80144e6:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 80144ea:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 80144ee:	e7c0      	b.n	8014472 <SDMMC_CmdVoltageSwitch+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80144f0:	2201      	movs	r2, #1
 80144f2:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80144f4:	e7bd      	b.n	8014472 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80144f6:	2301      	movs	r3, #1
 80144f8:	e7bb      	b.n	8014472 <SDMMC_CmdVoltageSwitch+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80144fa:	2304      	movs	r3, #4
 80144fc:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80144fe:	e7b8      	b.n	8014472 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8014500:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8014504:	e7b5      	b.n	8014472 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8014506:	2340      	movs	r3, #64	; 0x40
 8014508:	e7b3      	b.n	8014472 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801450a:	2380      	movs	r3, #128	; 0x80
 801450c:	e7b1      	b.n	8014472 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 801450e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014512:	e7ae      	b.n	8014472 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8014514:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014518:	e7ab      	b.n	8014472 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 801451a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801451e:	e7a8      	b.n	8014472 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8014520:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014524:	e7a5      	b.n	8014472 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8014526:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801452a:	e7a2      	b.n	8014472 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 801452c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8014530:	e79f      	b.n	8014472 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8014532:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8014536:	e79c      	b.n	8014472 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_CC_ERR;
 8014538:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801453c:	e799      	b.n	8014472 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 801453e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8014542:	e796      	b.n	8014472 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8014544:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8014548:	e793      	b.n	8014472 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 801454a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801454e:	e790      	b.n	8014472 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8014550:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8014554:	e78d      	b.n	8014472 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_ERASE_RESET;
 8014556:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801455a:	e78a      	b.n	8014472 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 801455c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8014560:	e787      	b.n	8014472 <SDMMC_CmdVoltageSwitch+0x42>
 8014562:	bf00      	nop
 8014564:	2000761c 	.word	0x2000761c
 8014568:	10624dd3 	.word	0x10624dd3
 801456c:	fffee0c0 	.word	0xfffee0c0
 8014570:	00200045 	.word	0x00200045
 8014574:	002000c5 	.word	0x002000c5
 8014578:	fdffe008 	.word	0xfdffe008

0801457c <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801457c:	287f      	cmp	r0, #127	; 0x7f
 801457e:	d911      	bls.n	80145a4 <ff_convert+0x28>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 8014580:	b989      	cbnz	r1, 80145a6 <ff_convert+0x2a>
 8014582:	4b0e      	ldr	r3, [pc, #56]	; (80145bc <ff_convert+0x40>)
{
 8014584:	b410      	push	{r4}
 8014586:	e001      	b.n	801458c <ff_convert+0x10>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8014588:	2980      	cmp	r1, #128	; 0x80
 801458a:	d015      	beq.n	80145b8 <ff_convert+0x3c>
				if (chr == Tbl[c]) break;
 801458c:	f833 2b02 	ldrh.w	r2, [r3], #2
 8014590:	b28c      	uxth	r4, r1
 8014592:	3101      	adds	r1, #1
 8014594:	4282      	cmp	r2, r0
 8014596:	d1f7      	bne.n	8014588 <ff_convert+0xc>
 8014598:	f104 0080 	add.w	r0, r4, #128	; 0x80
 801459c:	b280      	uxth	r0, r0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
 801459e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80145a2:	4770      	bx	lr
 80145a4:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80145a6:	28ff      	cmp	r0, #255	; 0xff
 80145a8:	d804      	bhi.n	80145b4 <ff_convert+0x38>
 80145aa:	4b04      	ldr	r3, [pc, #16]	; (80145bc <ff_convert+0x40>)
 80145ac:	3880      	subs	r0, #128	; 0x80
 80145ae:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80145b2:	4770      	bx	lr
 80145b4:	2000      	movs	r0, #0
 80145b6:	4770      	bx	lr
 80145b8:	2000      	movs	r0, #0
 80145ba:	e7f0      	b.n	801459e <ff_convert+0x22>
 80145bc:	08097ab4 	.word	0x08097ab4

080145c0 <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80145c0:	4b22      	ldr	r3, [pc, #136]	; (801464c <ff_wtoupper+0x8c>)
 80145c2:	4a23      	ldr	r2, [pc, #140]	; (8014650 <ff_wtoupper+0x90>)
 80145c4:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80145c8:	bf28      	it	cs
 80145ca:	4613      	movcs	r3, r2
{
 80145cc:	b470      	push	{r4, r5, r6}
 80145ce:	3304      	adds	r3, #4
 80145d0:	e001      	b.n	80145d6 <ff_wtoupper+0x16>
 80145d2:	3304      	adds	r3, #4
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 80145d4:	b1d2      	cbz	r2, 801460c <ff_wtoupper+0x4c>
		bc = *p++;								/* Get block base */
 80145d6:	f833 1c04 	ldrh.w	r1, [r3, #-4]
		if (!bc || chr < bc) break;
 80145da:	461e      	mov	r6, r3
 80145dc:	b1a1      	cbz	r1, 8014608 <ff_wtoupper+0x48>
 80145de:	4288      	cmp	r0, r1
 80145e0:	d312      	bcc.n	8014608 <ff_wtoupper+0x48>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80145e2:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 80145e6:	b2d4      	uxtb	r4, r2
 80145e8:	0a12      	lsrs	r2, r2, #8
		if (chr < bc + nc) {	/* In the block? */
 80145ea:	1865      	adds	r5, r4, r1
 80145ec:	42a8      	cmp	r0, r5
 80145ee:	daf0      	bge.n	80145d2 <ff_wtoupper+0x12>
			switch (cmd) {
 80145f0:	2a08      	cmp	r2, #8
 80145f2:	d809      	bhi.n	8014608 <ff_wtoupper+0x48>
 80145f4:	e8df f002 	tbb	[pc, r2]
 80145f8:	1a171105 	.word	0x1a171105
 80145fc:	2623201d 	.word	0x2623201d
 8014600:	0d          	.byte	0x0d
 8014601:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8014602:	1a41      	subs	r1, r0, r1
 8014604:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
	}

	return chr;
}
 8014608:	bc70      	pop	{r4, r5, r6}
 801460a:	4770      	bx	lr
		if (!cmd) p += nc;
 801460c:	eb06 0344 	add.w	r3, r6, r4, lsl #1
 8014610:	e7dd      	b.n	80145ce <ff_wtoupper+0xe>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8014612:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 8014616:	b280      	uxth	r0, r0
 8014618:	e7f6      	b.n	8014608 <ff_wtoupper+0x48>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801461a:	1a41      	subs	r1, r0, r1
 801461c:	f001 0301 	and.w	r3, r1, #1
 8014620:	1ac0      	subs	r0, r0, r3
 8014622:	b280      	uxth	r0, r0
 8014624:	e7f0      	b.n	8014608 <ff_wtoupper+0x48>
			case 2: chr -= 16; break;				/* Shift -16 */
 8014626:	3810      	subs	r0, #16
 8014628:	b280      	uxth	r0, r0
 801462a:	e7ed      	b.n	8014608 <ff_wtoupper+0x48>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801462c:	3820      	subs	r0, #32
 801462e:	b280      	uxth	r0, r0
 8014630:	e7ea      	b.n	8014608 <ff_wtoupper+0x48>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8014632:	3830      	subs	r0, #48	; 0x30
 8014634:	b280      	uxth	r0, r0
 8014636:	e7e7      	b.n	8014608 <ff_wtoupper+0x48>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8014638:	381a      	subs	r0, #26
 801463a:	b280      	uxth	r0, r0
 801463c:	e7e4      	b.n	8014608 <ff_wtoupper+0x48>
			case 6:	chr += 8; break;				/* Shift +8 */
 801463e:	3008      	adds	r0, #8
 8014640:	b280      	uxth	r0, r0
 8014642:	e7e1      	b.n	8014608 <ff_wtoupper+0x48>
			case 7: chr -= 80; break;				/* Shift -80 */
 8014644:	3850      	subs	r0, #80	; 0x50
 8014646:	b280      	uxth	r0, r0
 8014648:	e7de      	b.n	8014608 <ff_wtoupper+0x48>
 801464a:	bf00      	nop
 801464c:	08097bb4 	.word	0x08097bb4
 8014650:	08097da8 	.word	0x08097da8

08014654 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8014654:	4b03      	ldr	r3, [pc, #12]	; (8014664 <disk_status+0x10>)
 8014656:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 801465a:	4418      	add	r0, r3
 801465c:	6853      	ldr	r3, [r2, #4]
 801465e:	7b00      	ldrb	r0, [r0, #12]
 8014660:	685b      	ldr	r3, [r3, #4]
 8014662:	4718      	bx	r3
 8014664:	20009570 	.word	0x20009570

08014668 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8014668:	4b08      	ldr	r3, [pc, #32]	; (801468c <disk_initialize+0x24>)
 801466a:	5c1a      	ldrb	r2, [r3, r0]
 801466c:	b95a      	cbnz	r2, 8014686 <disk_initialize+0x1e>
  {
    disk.is_initialized[pdrv] = 1;
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801466e:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8014672:	1819      	adds	r1, r3, r0
{
 8014674:	b410      	push	{r4}
    disk.is_initialized[pdrv] = 1;
 8014676:	2401      	movs	r4, #1
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8014678:	6852      	ldr	r2, [r2, #4]
    disk.is_initialized[pdrv] = 1;
 801467a:	541c      	strb	r4, [r3, r0]
  }
  return stat;
}
 801467c:	f85d 4b04 	ldr.w	r4, [sp], #4
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8014680:	7b08      	ldrb	r0, [r1, #12]
 8014682:	6813      	ldr	r3, [r2, #0]
 8014684:	4718      	bx	r3
}
 8014686:	2000      	movs	r0, #0
 8014688:	4770      	bx	lr
 801468a:	bf00      	nop
 801468c:	20009570 	.word	0x20009570

08014690 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8014690:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8014692:	4c05      	ldr	r4, [pc, #20]	; (80146a8 <disk_read+0x18>)
 8014694:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8014698:	4420      	add	r0, r4
 801469a:	686c      	ldr	r4, [r5, #4]
 801469c:	7b00      	ldrb	r0, [r0, #12]
 801469e:	68a4      	ldr	r4, [r4, #8]
 80146a0:	46a4      	mov	ip, r4
  return res;
}
 80146a2:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80146a4:	4760      	bx	ip
 80146a6:	bf00      	nop
 80146a8:	20009570 	.word	0x20009570

080146ac <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80146ac:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80146ae:	4c05      	ldr	r4, [pc, #20]	; (80146c4 <disk_write+0x18>)
 80146b0:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 80146b4:	4420      	add	r0, r4
 80146b6:	686c      	ldr	r4, [r5, #4]
 80146b8:	7b00      	ldrb	r0, [r0, #12]
 80146ba:	68e4      	ldr	r4, [r4, #12]
 80146bc:	46a4      	mov	ip, r4
  return res;
}
 80146be:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80146c0:	4760      	bx	ip
 80146c2:	bf00      	nop
 80146c4:	20009570 	.word	0x20009570

080146c8 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80146c8:	4b05      	ldr	r3, [pc, #20]	; (80146e0 <disk_ioctl+0x18>)
{
 80146ca:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80146cc:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 80146d0:	4418      	add	r0, r3
 80146d2:	6863      	ldr	r3, [r4, #4]
 80146d4:	7b00      	ldrb	r0, [r0, #12]
 80146d6:	691b      	ldr	r3, [r3, #16]
  return res;
}
 80146d8:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80146dc:	4718      	bx	r3
 80146de:	bf00      	nop
 80146e0:	20009570 	.word	0x20009570

080146e4 <get_fattime>:
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
  return 0;
}
 80146e4:	2000      	movs	r0, #0
 80146e6:	4770      	bx	lr

080146e8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80146e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80146ec:	2700      	movs	r7, #0
	FATFS *fs = dp->obj.fs;
 80146ee:	f8d0 8000 	ldr.w	r8, [r0]
	fno->fname[0] = 0;		/* Invaidate file info */
 80146f2:	758f      	strb	r7, [r1, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80146f4:	69c3      	ldr	r3, [r0, #28]
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d066      	beq.n	80147c8 <get_fileinfo+0xe0>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 80146fa:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80146fc:	4606      	mov	r6, r0
 80146fe:	460d      	mov	r5, r1
 8014700:	3301      	adds	r3, #1
 8014702:	d01e      	beq.n	8014742 <get_fileinfo+0x5a>
			i = j = 0;
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8014704:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014708:	8818      	ldrh	r0, [r3, #0]
 801470a:	2800      	cmp	r0, #0
 801470c:	d06c      	beq.n	80147e8 <get_fileinfo+0x100>
 801470e:	f101 0715 	add.w	r7, r1, #21
 8014712:	2401      	movs	r4, #1
 8014714:	e000      	b.n	8014718 <get_fileinfo+0x30>
 8014716:	461c      	mov	r4, r3
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8014718:	2100      	movs	r1, #0
 801471a:	f7ff ff2f 	bl	801457c <ff_convert>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 801471e:	1c63      	adds	r3, r4, #1
 8014720:	2800      	cmp	r0, #0
 8014722:	d061      	beq.n	80147e8 <get_fileinfo+0x100>
 8014724:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8014728:	d05e      	beq.n	80147e8 <get_fileinfo+0x100>
				fno->fname[i++] = (TCHAR)w;
 801472a:	f807 0f01 	strb.w	r0, [r7, #1]!
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 801472e:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8014732:	f832 0014 	ldrh.w	r0, [r2, r4, lsl #1]
 8014736:	2800      	cmp	r0, #0
 8014738:	d1ed      	bne.n	8014716 <get_fileinfo+0x2e>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 801473a:	442c      	add	r4, r5
 801473c:	2300      	movs	r3, #0
 801473e:	75a3      	strb	r3, [r4, #22]
 8014740:	7daf      	ldrb	r7, [r5, #22]
	}

	i = j = 0;
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
	while (i < 11) {		/* Copy name body and extension */
		c = (TCHAR)dp->dir[i++];
 8014742:	6a36      	ldr	r6, [r6, #32]
	i = j = 0;
 8014744:	2400      	movs	r4, #0
		if (c == ' ') continue;				/* Skip padding spaces */
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
		if (i == 9) {						/* Insert a . if extension is exist */
			if (!lfv) fno->fname[j] = '.';
			fno->altname[j++] = '.';
 8014746:	f04f 082e 	mov.w	r8, #46	; 0x2e
 801474a:	1e70      	subs	r0, r6, #1
 801474c:	f106 0c0a 	add.w	ip, r6, #10
		c = (TCHAR)dp->dir[i++];
 8014750:	4602      	mov	r2, r0
 8014752:	f810 3f01 	ldrb.w	r3, [r0, #1]!
		if (c == ' ') continue;				/* Skip padding spaces */
 8014756:	2b20      	cmp	r3, #32
 8014758:	d01c      	beq.n	8014794 <get_fileinfo+0xac>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 801475a:	3202      	adds	r2, #2
 801475c:	2b05      	cmp	r3, #5
 801475e:	eba2 0206 	sub.w	r2, r2, r6
 8014762:	bf08      	it	eq
 8014764:	23e5      	moveq	r3, #229	; 0xe5
		if (i == 9) {						/* Insert a . if extension is exist */
 8014766:	2a09      	cmp	r2, #9
 8014768:	d030      	beq.n	80147cc <get_fileinfo+0xe4>
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 801476a:	1929      	adds	r1, r5, r4
 801476c:	724b      	strb	r3, [r1, #9]
		if (!lfv) {
 801476e:	b987      	cbnz	r7, 8014792 <get_fileinfo+0xaa>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8014770:	f1a3 0e41 	sub.w	lr, r3, #65	; 0x41
 8014774:	f1be 0f19 	cmp.w	lr, #25
 8014778:	d80a      	bhi.n	8014790 <get_fileinfo+0xa8>
 801477a:	2a09      	cmp	r2, #9
 801477c:	f896 e00c 	ldrb.w	lr, [r6, #12]
 8014780:	bf34      	ite	cc
 8014782:	2208      	movcc	r2, #8
 8014784:	2210      	movcs	r2, #16
 8014786:	ea1e 0f02 	tst.w	lr, r2
 801478a:	d001      	beq.n	8014790 <get_fileinfo+0xa8>
				c += 0x20;			/* To lower */
 801478c:	3320      	adds	r3, #32
 801478e:	b2db      	uxtb	r3, r3
			}
			fno->fname[j] = c;
 8014790:	758b      	strb	r3, [r1, #22]
		}
		j++;
 8014792:	3401      	adds	r4, #1
	while (i < 11) {		/* Copy name body and extension */
 8014794:	4584      	cmp	ip, r0
 8014796:	d1db      	bne.n	8014750 <get_fileinfo+0x68>
	}
	if (!lfv) {
		fno->fname[j] = 0;
 8014798:	1929      	adds	r1, r5, r4
	if (!lfv) {
 801479a:	b1ff      	cbz	r7, 80147dc <get_fileinfo+0xf4>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 801479c:	2300      	movs	r3, #0
 801479e:	724b      	strb	r3, [r1, #9]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80147a0:	7af3      	ldrb	r3, [r6, #11]
 80147a2:	722b      	strb	r3, [r5, #8]
	rv = rv << 8 | ptr[2];
 80147a4:	8bf1      	ldrh	r1, [r6, #30]
	rv = rv << 8 | ptr[1];
 80147a6:	7f72      	ldrb	r2, [r6, #29]
	rv = rv << 8 | ptr[0];
 80147a8:	7f33      	ldrb	r3, [r6, #28]
	rv = rv << 8 | ptr[1];
 80147aa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	rv = rv << 8 | ptr[0];
 80147ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80147b2:	602b      	str	r3, [r5, #0]
	rv = rv << 8 | ptr[2];
 80147b4:	8b31      	ldrh	r1, [r6, #24]
	rv = rv << 8 | ptr[1];
 80147b6:	7df2      	ldrb	r2, [r6, #23]
	rv = rv << 8 | ptr[0];
 80147b8:	7db3      	ldrb	r3, [r6, #22]
	rv = rv << 8 | ptr[1];
 80147ba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	rv = rv << 8 | ptr[0];
 80147be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80147c2:	0c1a      	lsrs	r2, r3, #16
 80147c4:	80eb      	strh	r3, [r5, #6]
 80147c6:	80aa      	strh	r2, [r5, #4]
}
 80147c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!lfv) fno->fname[j] = '.';
 80147cc:	1929      	adds	r1, r5, r4
 80147ce:	b90f      	cbnz	r7, 80147d4 <get_fileinfo+0xec>
 80147d0:	f881 8016 	strb.w	r8, [r1, #22]
			fno->altname[j++] = '.';
 80147d4:	3401      	adds	r4, #1
 80147d6:	f881 8009 	strb.w	r8, [r1, #9]
 80147da:	e7c6      	b.n	801476a <get_fileinfo+0x82>
		fno->fname[j] = 0;
 80147dc:	758f      	strb	r7, [r1, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 80147de:	7b33      	ldrb	r3, [r6, #12]
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	bf08      	it	eq
 80147e4:	4629      	moveq	r1, r5
 80147e6:	e7d9      	b.n	801479c <get_fileinfo+0xb4>
			i = j = 0;
 80147e8:	2400      	movs	r4, #0
			fno->fname[i] = 0;	/* Terminate the LFN */
 80147ea:	2300      	movs	r3, #0
 80147ec:	442c      	add	r4, r5
 80147ee:	75a3      	strb	r3, [r4, #22]
 80147f0:	7daf      	ldrb	r7, [r5, #22]
 80147f2:	e7a6      	b.n	8014742 <get_fileinfo+0x5a>

080147f4 <move_window.part.0>:
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 80147f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80147f6:	78c3      	ldrb	r3, [r0, #3]
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 80147f8:	b083      	sub	sp, #12
 80147fa:	4604      	mov	r4, r0
 80147fc:	460d      	mov	r5, r1
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80147fe:	b973      	cbnz	r3, 801481e <move_window.part.0+0x2a>
 8014800:	f100 0134 	add.w	r1, r0, #52	; 0x34
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8014804:	2301      	movs	r3, #1
 8014806:	462a      	mov	r2, r5
 8014808:	7860      	ldrb	r0, [r4, #1]
 801480a:	f7ff ff41 	bl	8014690 <disk_read>
 801480e:	b910      	cbnz	r0, 8014816 <move_window.part.0+0x22>
			fs->winsect = sector;
 8014810:	6325      	str	r5, [r4, #48]	; 0x30
}
 8014812:	b003      	add	sp, #12
 8014814:	bdf0      	pop	{r4, r5, r6, r7, pc}
				res = FR_DISK_ERR;
 8014816:	2001      	movs	r0, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8014818:	f04f 35ff 	mov.w	r5, #4294967295
 801481c:	e7f8      	b.n	8014810 <move_window.part.0+0x1c>
		wsect = fs->winsect;	/* Current sector number */
 801481e:	6b06      	ldr	r6, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8014820:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8014824:	2301      	movs	r3, #1
 8014826:	7840      	ldrb	r0, [r0, #1]
 8014828:	4632      	mov	r2, r6
 801482a:	9101      	str	r1, [sp, #4]
 801482c:	f7ff ff3e 	bl	80146ac <disk_write>
 8014830:	b9b8      	cbnz	r0, 8014862 <move_window.part.0+0x6e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8014832:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8014834:	69e3      	ldr	r3, [r4, #28]
 8014836:	1ab2      	subs	r2, r6, r2
 8014838:	9901      	ldr	r1, [sp, #4]
			fs->wflag = 0;
 801483a:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801483c:	429a      	cmp	r2, r3
 801483e:	d2e1      	bcs.n	8014804 <move_window.part.0+0x10>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014840:	78a7      	ldrb	r7, [r4, #2]
 8014842:	2f01      	cmp	r7, #1
 8014844:	d801      	bhi.n	801484a <move_window.part.0+0x56>
 8014846:	e7dd      	b.n	8014804 <move_window.part.0+0x10>
 8014848:	69e3      	ldr	r3, [r4, #28]
					wsect += fs->fsize;
 801484a:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801484c:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 801484e:	2301      	movs	r3, #1
 8014850:	7860      	ldrb	r0, [r4, #1]
 8014852:	4632      	mov	r2, r6
 8014854:	9101      	str	r1, [sp, #4]
 8014856:	f7ff ff29 	bl	80146ac <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801485a:	2f01      	cmp	r7, #1
 801485c:	9901      	ldr	r1, [sp, #4]
 801485e:	d1f3      	bne.n	8014848 <move_window.part.0+0x54>
 8014860:	e7d0      	b.n	8014804 <move_window.part.0+0x10>
			res = FR_DISK_ERR;
 8014862:	2001      	movs	r0, #1
}
 8014864:	b003      	add	sp, #12
 8014866:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014868 <put_fat.part.0>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 8014868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		switch (fs->fs_type) {
 801486c:	7803      	ldrb	r3, [r0, #0]
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 801486e:	4604      	mov	r4, r0
 8014870:	460d      	mov	r5, r1
 8014872:	4616      	mov	r6, r2
		switch (fs->fs_type) {
 8014874:	2b02      	cmp	r3, #2
 8014876:	d006      	beq.n	8014886 <put_fat.part.0+0x1e>
 8014878:	2b03      	cmp	r3, #3
 801487a:	d052      	beq.n	8014922 <put_fat.part.0+0xba>
 801487c:	2b01      	cmp	r3, #1
 801487e:	d01b      	beq.n	80148b8 <put_fat.part.0+0x50>
 8014880:	2002      	movs	r0, #2
}
 8014882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8014886:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014888:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801488a:	eb01 2115 	add.w	r1, r1, r5, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 801488e:	4299      	cmp	r1, r3
 8014890:	d003      	beq.n	801489a <put_fat.part.0+0x32>
 8014892:	f7ff ffaf 	bl	80147f4 <move_window.part.0>
			if (res != FR_OK) break;
 8014896:	2800      	cmp	r0, #0
 8014898:	d1f3      	bne.n	8014882 <put_fat.part.0+0x1a>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801489a:	006d      	lsls	r5, r5, #1
 801489c:	f104 0334 	add.w	r3, r4, #52	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 80148a0:	f3c6 2107 	ubfx	r1, r6, #8, #8
			fs->wflag = 1;
 80148a4:	2201      	movs	r2, #1
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80148a6:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
			break;
 80148aa:	2000      	movs	r0, #0
	*ptr++ = (BYTE)val; val >>= 8;
 80148ac:	555e      	strb	r6, [r3, r5]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80148ae:	442b      	add	r3, r5
	*ptr++ = (BYTE)val;
 80148b0:	7059      	strb	r1, [r3, #1]
			fs->wflag = 1;
 80148b2:	70e2      	strb	r2, [r4, #3]
}
 80148b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			bc = (UINT)clst; bc += bc / 2;
 80148b8:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80148bc:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80148be:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80148c0:	eb01 2157 	add.w	r1, r1, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 80148c4:	4299      	cmp	r1, r3
 80148c6:	d003      	beq.n	80148d0 <put_fat.part.0+0x68>
 80148c8:	f7ff ff94 	bl	80147f4 <move_window.part.0>
			if (res != FR_OK) break;
 80148cc:	2800      	cmp	r0, #0
 80148ce:	d1d8      	bne.n	8014882 <put_fat.part.0+0x1a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80148d0:	07eb      	lsls	r3, r5, #31
			p = fs->win + bc++ % SS(fs);
 80148d2:	f107 0801 	add.w	r8, r7, #1
 80148d6:	f104 0934 	add.w	r9, r4, #52	; 0x34
 80148da:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80148de:	d545      	bpl.n	801496c <put_fat.part.0+0x104>
 80148e0:	f819 3007 	ldrb.w	r3, [r9, r7]
			fs->wflag = 1;
 80148e4:	2201      	movs	r2, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80148e6:	f003 030f 	and.w	r3, r3, #15
 80148ea:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
 80148ee:	f809 3007 	strb.w	r3, [r9, r7]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80148f2:	6a61      	ldr	r1, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80148f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80148f6:	eb01 2158 	add.w	r1, r1, r8, lsr #9
			fs->wflag = 1;
 80148fa:	70e2      	strb	r2, [r4, #3]
	if (sector != fs->winsect) {	/* Window offset changed? */
 80148fc:	4299      	cmp	r1, r3
 80148fe:	d004      	beq.n	801490a <put_fat.part.0+0xa2>
 8014900:	4620      	mov	r0, r4
 8014902:	f7ff ff77 	bl	80147f4 <move_window.part.0>
			if (res != FR_OK) break;
 8014906:	2800      	cmp	r0, #0
 8014908:	d1bb      	bne.n	8014882 <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
 801490a:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801490e:	f3c6 1207 	ubfx	r2, r6, #4, #8
			p = fs->win + bc % SS(fs);
 8014912:	44c8      	add	r8, r9
			fs->wflag = 1;
 8014914:	2301      	movs	r3, #1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8014916:	f888 2000 	strb.w	r2, [r8]
			break;
 801491a:	2000      	movs	r0, #0
			fs->wflag = 1;
 801491c:	70e3      	strb	r3, [r4, #3]
}
 801491e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8014922:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014924:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8014926:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 801492a:	4299      	cmp	r1, r3
 801492c:	d003      	beq.n	8014936 <put_fat.part.0+0xce>
 801492e:	f7ff ff61 	bl	80147f4 <move_window.part.0>
			if (res != FR_OK) break;
 8014932:	2800      	cmp	r0, #0
 8014934:	d1a5      	bne.n	8014882 <put_fat.part.0+0x1a>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8014936:	00ad      	lsls	r5, r5, #2
 8014938:	f104 0134 	add.w	r1, r4, #52	; 0x34
 801493c:	f026 4270 	bic.w	r2, r6, #4026531840	; 0xf0000000
			fs->wflag = 1;
 8014940:	f04f 0c01 	mov.w	ip, #1
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8014944:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
			break;
 8014948:	2000      	movs	r0, #0
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801494a:	194f      	adds	r7, r1, r5
	rv = rv << 8 | ptr[2];
 801494c:	887b      	ldrh	r3, [r7, #2]
	rv = rv << 8 | ptr[0];
 801494e:	041b      	lsls	r3, r3, #16
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8014950:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8014954:	4313      	orrs	r3, r2
	*ptr++ = (BYTE)val; val >>= 8;
 8014956:	554b      	strb	r3, [r1, r5]
	*ptr++ = (BYTE)val; val >>= 8;
 8014958:	0c1a      	lsrs	r2, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 801495a:	0a19      	lsrs	r1, r3, #8
	*ptr++ = (BYTE)val; val >>= 8;
 801495c:	0e1b      	lsrs	r3, r3, #24
 801495e:	70ba      	strb	r2, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8014960:	7079      	strb	r1, [r7, #1]
	*ptr++ = (BYTE)val;
 8014962:	70fb      	strb	r3, [r7, #3]
			fs->wflag = 1;
 8014964:	f884 c003 	strb.w	ip, [r4, #3]
}
 8014968:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801496c:	f809 6007 	strb.w	r6, [r9, r7]
			fs->wflag = 1;
 8014970:	2201      	movs	r2, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8014972:	6a61      	ldr	r1, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014974:	6b23      	ldr	r3, [r4, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8014976:	eb01 2158 	add.w	r1, r1, r8, lsr #9
			fs->wflag = 1;
 801497a:	70e2      	strb	r2, [r4, #3]
	if (sector != fs->winsect) {	/* Window offset changed? */
 801497c:	4299      	cmp	r1, r3
 801497e:	d005      	beq.n	801498c <put_fat.part.0+0x124>
 8014980:	4620      	mov	r0, r4
 8014982:	f7ff ff37 	bl	80147f4 <move_window.part.0>
			if (res != FR_OK) break;
 8014986:	2800      	cmp	r0, #0
 8014988:	f47f af7b 	bne.w	8014882 <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
 801498c:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8014990:	f3c6 2203 	ubfx	r2, r6, #8, #4
			p = fs->win + bc % SS(fs);
 8014994:	44c8      	add	r8, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8014996:	f898 1000 	ldrb.w	r1, [r8]
 801499a:	f021 060f 	bic.w	r6, r1, #15
 801499e:	4332      	orrs	r2, r6
 80149a0:	e7b8      	b.n	8014914 <put_fat.part.0+0xac>
 80149a2:	bf00      	nop

080149a4 <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80149a4:	2901      	cmp	r1, #1
 80149a6:	d90e      	bls.n	80149c6 <get_fat.isra.0+0x22>
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 80149a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80149aa:	6983      	ldr	r3, [r0, #24]
 80149ac:	460c      	mov	r4, r1
 80149ae:	4605      	mov	r5, r0
 80149b0:	4299      	cmp	r1, r3
 80149b2:	d206      	bcs.n	80149c2 <get_fat.isra.0+0x1e>
		switch (fs->fs_type) {
 80149b4:	7803      	ldrb	r3, [r0, #0]
 80149b6:	2b02      	cmp	r3, #2
 80149b8:	d046      	beq.n	8014a48 <get_fat.isra.0+0xa4>
 80149ba:	2b03      	cmp	r3, #3
 80149bc:	d02c      	beq.n	8014a18 <get_fat.isra.0+0x74>
 80149be:	2b01      	cmp	r3, #1
 80149c0:	d003      	beq.n	80149ca <get_fat.isra.0+0x26>
 80149c2:	2001      	movs	r0, #1
}
 80149c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 80149c6:	2001      	movs	r0, #1
}
 80149c8:	4770      	bx	lr
			bc = (UINT)clst; bc += bc / 2;
 80149ca:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80149ce:	6a43      	ldr	r3, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80149d0:	6b02      	ldr	r2, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80149d2:	eb03 2157 	add.w	r1, r3, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 80149d6:	4291      	cmp	r1, r2
 80149d8:	d005      	beq.n	80149e6 <get_fat.isra.0+0x42>
 80149da:	f7ff ff0b 	bl	80147f4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80149de:	2800      	cmp	r0, #0
 80149e0:	d13b      	bne.n	8014a5a <get_fat.isra.0+0xb6>
 80149e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80149e4:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 80149e6:	f3c7 0008 	ubfx	r0, r7, #0, #9
 80149ea:	3701      	adds	r7, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80149ec:	eb03 2157 	add.w	r1, r3, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 80149f0:	4428      	add	r0, r5
	if (sector != fs->winsect) {	/* Window offset changed? */
 80149f2:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 80149f4:	f890 6034 	ldrb.w	r6, [r0, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 80149f8:	d003      	beq.n	8014a02 <get_fat.isra.0+0x5e>
 80149fa:	4628      	mov	r0, r5
 80149fc:	f7ff fefa 	bl	80147f4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014a00:	bb58      	cbnz	r0, 8014a5a <get_fat.isra.0+0xb6>
			wc |= fs->win[bc % SS(fs)] << 8;
 8014a02:	f3c7 0708 	ubfx	r7, r7, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8014a06:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8014a08:	443d      	add	r5, r7
 8014a0a:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 8014a0e:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8014a12:	d52f      	bpl.n	8014a74 <get_fat.isra.0+0xd0>
 8014a14:	0900      	lsrs	r0, r0, #4
}
 8014a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8014a18:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014a1a:	6b03      	ldr	r3, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8014a1c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014a20:	4299      	cmp	r1, r3
 8014a22:	d002      	beq.n	8014a2a <get_fat.isra.0+0x86>
 8014a24:	f7ff fee6 	bl	80147f4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8014a28:	b9b8      	cbnz	r0, 8014a5a <get_fat.isra.0+0xb6>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8014a2a:	00a4      	lsls	r4, r4, #2
 8014a2c:	3534      	adds	r5, #52	; 0x34
 8014a2e:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8014a32:	192a      	adds	r2, r5, r4
	rv = rv << 8 | ptr[0];
 8014a34:	5d28      	ldrb	r0, [r5, r4]
	rv = rv << 8 | ptr[2];
 8014a36:	8851      	ldrh	r1, [r2, #2]
	rv = rv << 8 | ptr[1];
 8014a38:	7853      	ldrb	r3, [r2, #1]
 8014a3a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 8014a3e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8014a42:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
}
 8014a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8014a48:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014a4a:	6b03      	ldr	r3, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8014a4c:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014a50:	4299      	cmp	r1, r3
 8014a52:	d005      	beq.n	8014a60 <get_fat.isra.0+0xbc>
 8014a54:	f7ff fece 	bl	80147f4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8014a58:	b110      	cbz	r0, 8014a60 <get_fat.isra.0+0xbc>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8014a5a:	f04f 30ff 	mov.w	r0, #4294967295
}
 8014a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8014a60:	0064      	lsls	r4, r4, #1
 8014a62:	3534      	adds	r5, #52	; 0x34
 8014a64:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8014a68:	192b      	adds	r3, r5, r4
	rv = rv << 8 | ptr[0];
 8014a6a:	5d28      	ldrb	r0, [r5, r4]
 8014a6c:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8014a6e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
}
 8014a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8014a74:	f3c0 000b 	ubfx	r0, r0, #0, #12
}
 8014a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014a7a:	bf00      	nop

08014a7c <dir_next.constprop.0>:
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8014a7c:	69c3      	ldr	r3, [r0, #28]
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
 8014a7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8014a82:	6945      	ldr	r5, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8014a84:	b37b      	cbz	r3, 8014ae6 <dir_next.constprop.0+0x6a>
 8014a86:	3520      	adds	r5, #32
 8014a88:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 8014a8c:	d22b      	bcs.n	8014ae6 <dir_next.constprop.0+0x6a>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8014a8e:	f3c5 0708 	ubfx	r7, r5, #0, #9
 8014a92:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8014a94:	6806      	ldr	r6, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8014a96:	b137      	cbz	r7, 8014aa6 <dir_next.constprop.0+0x2a>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8014a98:	3634      	adds	r6, #52	; 0x34
	return FR_OK;
 8014a9a:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
 8014a9c:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8014a9e:	443e      	add	r6, r7
 8014aa0:	6226      	str	r6, [r4, #32]
}
 8014aa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		dp->sect++;				/* Next sector */
 8014aa6:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
 8014aa8:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 8014aaa:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 8014aac:	b1f1      	cbz	r1, 8014aec <dir_next.constprop.0+0x70>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8014aae:	8973      	ldrh	r3, [r6, #10]
 8014ab0:	3b01      	subs	r3, #1
 8014ab2:	ea13 2855 	ands.w	r8, r3, r5, lsr #9
 8014ab6:	d1ef      	bne.n	8014a98 <dir_next.constprop.0+0x1c>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8014ab8:	4630      	mov	r0, r6
 8014aba:	f7ff ff73 	bl	80149a4 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8014abe:	2801      	cmp	r0, #1
 8014ac0:	d91c      	bls.n	8014afc <dir_next.constprop.0+0x80>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8014ac2:	1c43      	adds	r3, r0, #1
 8014ac4:	d01c      	beq.n	8014b00 <dir_next.constprop.0+0x84>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8014ac6:	69b3      	ldr	r3, [r6, #24]
 8014ac8:	4298      	cmp	r0, r3
 8014aca:	d213      	bcs.n	8014af4 <dir_next.constprop.0+0x78>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8014acc:	3b02      	subs	r3, #2
	clst -= 2;
 8014ace:	1e82      	subs	r2, r0, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 8014ad0:	61a0      	str	r0, [r4, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8014ad2:	429a      	cmp	r2, r3
 8014ad4:	d204      	bcs.n	8014ae0 <dir_next.constprop.0+0x64>
	return clst * fs->csize + fs->database;
 8014ad6:	f8b6 800a 	ldrh.w	r8, [r6, #10]
 8014ada:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8014adc:	fb02 3808 	mla	r8, r2, r8, r3
				dp->sect = clust2sect(fs, clst);
 8014ae0:	f8c4 801c 	str.w	r8, [r4, #28]
 8014ae4:	e7d8      	b.n	8014a98 <dir_next.constprop.0+0x1c>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8014ae6:	2004      	movs	r0, #4
}
 8014ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8014aec:	8933      	ldrh	r3, [r6, #8]
 8014aee:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 8014af2:	d8d1      	bhi.n	8014a98 <dir_next.constprop.0+0x1c>
				dp->sect = 0; return FR_NO_FILE;
 8014af4:	2300      	movs	r3, #0
 8014af6:	2004      	movs	r0, #4
 8014af8:	61e3      	str	r3, [r4, #28]
 8014afa:	e7d2      	b.n	8014aa2 <dir_next.constprop.0+0x26>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8014afc:	2002      	movs	r0, #2
 8014afe:	e7d0      	b.n	8014aa2 <dir_next.constprop.0+0x26>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8014b00:	2001      	movs	r0, #1
 8014b02:	e7ce      	b.n	8014aa2 <dir_next.constprop.0+0x26>

08014b04 <dir_read.constprop.0>:
FRESULT dir_read (
 8014b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while (dp->sect) {
 8014b08:	f8d0 a01c 	ldr.w	sl, [r0, #28]
FRESULT dir_read (
 8014b0c:	b083      	sub	sp, #12
 8014b0e:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8014b10:	6806      	ldr	r6, [r0, #0]
	while (dp->sect) {
 8014b12:	f1ba 0f00 	cmp.w	sl, #0
 8014b16:	d064      	beq.n	8014be2 <dir_read.constprop.0+0xde>
	BYTE ord = 0xFF, sum = 0xFF;
 8014b18:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8014b1c:	f106 0834 	add.w	r8, r6, #52	; 0x34
 8014b20:	464f      	mov	r7, r9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014b22:	6b35      	ldr	r5, [r6, #48]	; 0x30
 8014b24:	4555      	cmp	r5, sl
 8014b26:	d015      	beq.n	8014b54 <dir_read.constprop.0+0x50>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8014b28:	78f3      	ldrb	r3, [r6, #3]
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	f040 8102 	bne.w	8014d34 <dir_read.constprop.0+0x230>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8014b30:	2301      	movs	r3, #1
 8014b32:	4652      	mov	r2, sl
 8014b34:	4641      	mov	r1, r8
 8014b36:	7870      	ldrb	r0, [r6, #1]
 8014b38:	f7ff fdaa 	bl	8014690 <disk_read>
 8014b3c:	b140      	cbz	r0, 8014b50 <dir_read.constprop.0+0x4c>
			fs->winsect = sector;
 8014b3e:	f04f 33ff 	mov.w	r3, #4294967295
				res = FR_DISK_ERR;
 8014b42:	2001      	movs	r0, #1
			fs->winsect = sector;
 8014b44:	6333      	str	r3, [r6, #48]	; 0x30
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8014b46:	2300      	movs	r3, #0
 8014b48:	61e3      	str	r3, [r4, #28]
}
 8014b4a:	b003      	add	sp, #12
 8014b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 8014b50:	f8c6 a030 	str.w	sl, [r6, #48]	; 0x30
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8014b54:	6a21      	ldr	r1, [r4, #32]
 8014b56:	780a      	ldrb	r2, [r1, #0]
		if (c == 0) {
 8014b58:	2a00      	cmp	r2, #0
 8014b5a:	d042      	beq.n	8014be2 <dir_read.constprop.0+0xde>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8014b5c:	7acb      	ldrb	r3, [r1, #11]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8014b5e:	2ae5      	cmp	r2, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8014b60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014b64:	71a3      	strb	r3, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8014b66:	d005      	beq.n	8014b74 <dir_read.constprop.0+0x70>
 8014b68:	2a2e      	cmp	r2, #46	; 0x2e
 8014b6a:	d003      	beq.n	8014b74 <dir_read.constprop.0+0x70>
 8014b6c:	f023 0020 	bic.w	r0, r3, #32
 8014b70:	2808      	cmp	r0, #8
 8014b72:	d13d      	bne.n	8014bf0 <dir_read.constprop.0+0xec>
 8014b74:	6965      	ldr	r5, [r4, #20]
				ord = 0xFF;
 8014b76:	27ff      	movs	r7, #255	; 0xff
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8014b78:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8014b7a:	f8d4 a01c 	ldr.w	sl, [r4, #28]
 8014b7e:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 8014b82:	d22e      	bcs.n	8014be2 <dir_read.constprop.0+0xde>
 8014b84:	f1ba 0f00 	cmp.w	sl, #0
 8014b88:	d02b      	beq.n	8014be2 <dir_read.constprop.0+0xde>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8014b8a:	f3c5 0208 	ubfx	r2, r5, #0, #9
	FATFS *fs = dp->obj.fs;
 8014b8e:	6823      	ldr	r3, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8014b90:	bb4a      	cbnz	r2, 8014be6 <dir_read.constprop.0+0xe2>
		dp->sect++;				/* Next sector */
 8014b92:	f10a 0a01 	add.w	sl, sl, #1
		if (!dp->clust) {		/* Static table */
 8014b96:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 8014b98:	f8c4 a01c 	str.w	sl, [r4, #28]
		if (!dp->clust) {		/* Static table */
 8014b9c:	b969      	cbnz	r1, 8014bba <dir_read.constprop.0+0xb6>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8014b9e:	891a      	ldrh	r2, [r3, #8]
 8014ba0:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
 8014ba4:	d91d      	bls.n	8014be2 <dir_read.constprop.0+0xde>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8014ba6:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 8014ba8:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8014baa:	6223      	str	r3, [r4, #32]
	while (dp->sect) {
 8014bac:	f1ba 0f00 	cmp.w	sl, #0
 8014bb0:	d1b7      	bne.n	8014b22 <dir_read.constprop.0+0x1e>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8014bb2:	2000      	movs	r0, #0
}
 8014bb4:	b003      	add	sp, #12
 8014bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8014bba:	895a      	ldrh	r2, [r3, #10]
 8014bbc:	3a01      	subs	r2, #1
 8014bbe:	ea12 2b55 	ands.w	fp, r2, r5, lsr #9
 8014bc2:	d1f0      	bne.n	8014ba6 <dir_read.constprop.0+0xa2>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8014bc4:	4618      	mov	r0, r3
 8014bc6:	9301      	str	r3, [sp, #4]
 8014bc8:	f7ff feec 	bl	80149a4 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8014bcc:	2801      	cmp	r0, #1
 8014bce:	f240 80e6 	bls.w	8014d9e <dir_read.constprop.0+0x29a>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8014bd2:	1c43      	adds	r3, r0, #1
 8014bd4:	f000 80b5 	beq.w	8014d42 <dir_read.constprop.0+0x23e>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8014bd8:	9b01      	ldr	r3, [sp, #4]
 8014bda:	699a      	ldr	r2, [r3, #24]
 8014bdc:	4290      	cmp	r0, r2
 8014bde:	f0c0 80d1 	bcc.w	8014d84 <dir_read.constprop.0+0x280>
	FRESULT res = FR_NO_FILE;
 8014be2:	2004      	movs	r0, #4
 8014be4:	e7af      	b.n	8014b46 <dir_read.constprop.0+0x42>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8014be6:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 8014be8:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8014bea:	441a      	add	r2, r3
 8014bec:	6222      	str	r2, [r4, #32]
	while (dp->sect) {
 8014bee:	e798      	b.n	8014b22 <dir_read.constprop.0+0x1e>
				if (a == AM_LFN) {			/* An LFN entry is found */
 8014bf0:	2b0f      	cmp	r3, #15
 8014bf2:	f040 80dc 	bne.w	8014dae <dir_read.constprop.0+0x2aa>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8014bf6:	0650      	lsls	r0, r2, #25
						dp->blk_ofs = dp->dptr;
 8014bf8:	6965      	ldr	r5, [r4, #20]
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8014bfa:	f140 80a4 	bpl.w	8014d46 <dir_read.constprop.0+0x242>
						c &= (BYTE)~LLEF; ord = c;
 8014bfe:	f002 07bf 	and.w	r7, r2, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
 8014c02:	f891 900d 	ldrb.w	r9, [r1, #13]
						dp->blk_ofs = dp->dptr;
 8014c06:	6325      	str	r5, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8014c08:	7b4b      	ldrb	r3, [r1, #13]
 8014c0a:	454b      	cmp	r3, r9
 8014c0c:	d1b3      	bne.n	8014b76 <dir_read.constprop.0+0x72>
	rv = rv << 8 | ptr[0];
 8014c0e:	7eca      	ldrb	r2, [r1, #27]
 8014c10:	7e8b      	ldrb	r3, [r1, #26]
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8014c12:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8014c16:	d1ae      	bne.n	8014b76 <dir_read.constprop.0+0x72>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8014c18:	780b      	ldrb	r3, [r1, #0]
	rv = rv << 8 | ptr[0];
 8014c1a:	788a      	ldrb	r2, [r1, #2]
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8014c1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
	rv = rv << 8 | ptr[0];
 8014c20:	7848      	ldrb	r0, [r1, #1]
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8014c22:	3b01      	subs	r3, #1
	rv = rv << 8 | ptr[0];
 8014c24:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8014c28:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8014c2c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8014c30:	2bfe      	cmp	r3, #254	; 0xfe
 8014c32:	d8a0      	bhi.n	8014b76 <dir_read.constprop.0+0x72>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8014c34:	f8d6 e00c 	ldr.w	lr, [r6, #12]
			lfnbuf[i++] = wc = uc;			/* Store it */
 8014c38:	1c5a      	adds	r2, r3, #1
 8014c3a:	f82e 0013 	strh.w	r0, [lr, r3, lsl #1]
	rv = rv << 8 | ptr[0];
 8014c3e:	f891 a004 	ldrb.w	sl, [r1, #4]
 8014c42:	f891 c003 	ldrb.w	ip, [r1, #3]
 8014c46:	ea4c 2c0a 	orr.w	ip, ip, sl, lsl #8
		if (wc) {
 8014c4a:	2800      	cmp	r0, #0
 8014c4c:	f040 80b7 	bne.w	8014dbe <dir_read.constprop.0+0x2ba>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8014c50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014c54:	459c      	cmp	ip, r3
 8014c56:	d18e      	bne.n	8014b76 <dir_read.constprop.0+0x72>
	rv = rv << 8 | ptr[0];
 8014c58:	798b      	ldrb	r3, [r1, #6]
 8014c5a:	f891 b005 	ldrb.w	fp, [r1, #5]
 8014c5e:	ea4b 2b03 	orr.w	fp, fp, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8014c62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014c66:	459b      	cmp	fp, r3
 8014c68:	d185      	bne.n	8014b76 <dir_read.constprop.0+0x72>
	rv = rv << 8 | ptr[0];
 8014c6a:	7a0b      	ldrb	r3, [r1, #8]
 8014c6c:	f891 a007 	ldrb.w	sl, [r1, #7]
 8014c70:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8014c74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014c78:	459a      	cmp	sl, r3
 8014c7a:	f47f af7c 	bne.w	8014b76 <dir_read.constprop.0+0x72>
	rv = rv << 8 | ptr[0];
 8014c7e:	7a8b      	ldrb	r3, [r1, #10]
 8014c80:	f891 c009 	ldrb.w	ip, [r1, #9]
 8014c84:	ea4c 2c03 	orr.w	ip, ip, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8014c88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014c8c:	459c      	cmp	ip, r3
 8014c8e:	f47f af72 	bne.w	8014b76 <dir_read.constprop.0+0x72>
	rv = rv << 8 | ptr[0];
 8014c92:	7bcb      	ldrb	r3, [r1, #15]
 8014c94:	f891 b00e 	ldrb.w	fp, [r1, #14]
 8014c98:	ea4b 2b03 	orr.w	fp, fp, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8014c9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014ca0:	459b      	cmp	fp, r3
 8014ca2:	f47f af68 	bne.w	8014b76 <dir_read.constprop.0+0x72>
	rv = rv << 8 | ptr[0];
 8014ca6:	7c4b      	ldrb	r3, [r1, #17]
 8014ca8:	f891 a010 	ldrb.w	sl, [r1, #16]
 8014cac:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8014cb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014cb4:	459a      	cmp	sl, r3
 8014cb6:	f47f af5e 	bne.w	8014b76 <dir_read.constprop.0+0x72>
	rv = rv << 8 | ptr[0];
 8014cba:	7ccb      	ldrb	r3, [r1, #19]
 8014cbc:	f891 c012 	ldrb.w	ip, [r1, #18]
 8014cc0:	ea4c 2c03 	orr.w	ip, ip, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8014cc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014cc8:	459c      	cmp	ip, r3
 8014cca:	f47f af54 	bne.w	8014b76 <dir_read.constprop.0+0x72>
	rv = rv << 8 | ptr[0];
 8014cce:	7d4b      	ldrb	r3, [r1, #21]
 8014cd0:	f891 a014 	ldrb.w	sl, [r1, #20]
 8014cd4:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8014cd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014cdc:	459a      	cmp	sl, r3
 8014cde:	f47f af4a 	bne.w	8014b76 <dir_read.constprop.0+0x72>
	rv = rv << 8 | ptr[0];
 8014ce2:	7dcb      	ldrb	r3, [r1, #23]
 8014ce4:	f891 c016 	ldrb.w	ip, [r1, #22]
 8014ce8:	ea4c 2c03 	orr.w	ip, ip, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8014cec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014cf0:	459c      	cmp	ip, r3
 8014cf2:	f47f af40 	bne.w	8014b76 <dir_read.constprop.0+0x72>
	rv = rv << 8 | ptr[0];
 8014cf6:	7e4b      	ldrb	r3, [r1, #25]
 8014cf8:	f891 a018 	ldrb.w	sl, [r1, #24]
 8014cfc:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8014d00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014d04:	459a      	cmp	sl, r3
 8014d06:	f47f af36 	bne.w	8014b76 <dir_read.constprop.0+0x72>
	rv = rv << 8 | ptr[0];
 8014d0a:	7f4b      	ldrb	r3, [r1, #29]
 8014d0c:	f891 c01c 	ldrb.w	ip, [r1, #28]
 8014d10:	ea4c 2c03 	orr.w	ip, ip, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8014d14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014d18:	459c      	cmp	ip, r3
 8014d1a:	f47f af2c 	bne.w	8014b76 <dir_read.constprop.0+0x72>
	rv = rv << 8 | ptr[0];
 8014d1e:	7fcb      	ldrb	r3, [r1, #31]
 8014d20:	f891 a01e 	ldrb.w	sl, [r1, #30]
 8014d24:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8014d28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014d2c:	459a      	cmp	sl, r3
 8014d2e:	f000 8101 	beq.w	8014f34 <dir_read.constprop.0+0x430>
 8014d32:	e720      	b.n	8014b76 <dir_read.constprop.0+0x72>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8014d34:	2301      	movs	r3, #1
 8014d36:	462a      	mov	r2, r5
 8014d38:	4641      	mov	r1, r8
 8014d3a:	7870      	ldrb	r0, [r6, #1]
 8014d3c:	f7ff fcb6 	bl	80146ac <disk_write>
 8014d40:	b128      	cbz	r0, 8014d4e <dir_read.constprop.0+0x24a>
	FRESULT res = FR_NO_FILE;
 8014d42:	2001      	movs	r0, #1
 8014d44:	e6ff      	b.n	8014b46 <dir_read.constprop.0+0x42>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8014d46:	42ba      	cmp	r2, r7
 8014d48:	f47f af15 	bne.w	8014b76 <dir_read.constprop.0+0x72>
 8014d4c:	e75c      	b.n	8014c08 <dir_read.constprop.0+0x104>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8014d4e:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8014d50:	69f3      	ldr	r3, [r6, #28]
 8014d52:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
 8014d54:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8014d56:	429a      	cmp	r2, r3
 8014d58:	f4bf aeea 	bcs.w	8014b30 <dir_read.constprop.0+0x2c>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014d5c:	f896 b002 	ldrb.w	fp, [r6, #2]
 8014d60:	f1bb 0f01 	cmp.w	fp, #1
 8014d64:	d801      	bhi.n	8014d6a <dir_read.constprop.0+0x266>
 8014d66:	e6e3      	b.n	8014b30 <dir_read.constprop.0+0x2c>
 8014d68:	69f3      	ldr	r3, [r6, #28]
					wsect += fs->fsize;
 8014d6a:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014d6c:	f10b 3bff 	add.w	fp, fp, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8014d70:	2301      	movs	r3, #1
 8014d72:	4641      	mov	r1, r8
 8014d74:	462a      	mov	r2, r5
 8014d76:	7870      	ldrb	r0, [r6, #1]
 8014d78:	f7ff fc98 	bl	80146ac <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014d7c:	f1bb 0f01 	cmp.w	fp, #1
 8014d80:	d1f2      	bne.n	8014d68 <dir_read.constprop.0+0x264>
 8014d82:	e6d5      	b.n	8014b30 <dir_read.constprop.0+0x2c>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8014d84:	3a02      	subs	r2, #2
	clst -= 2;
 8014d86:	1e81      	subs	r1, r0, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 8014d88:	61a0      	str	r0, [r4, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8014d8a:	4291      	cmp	r1, r2
 8014d8c:	d209      	bcs.n	8014da2 <dir_read.constprop.0+0x29e>
	return clst * fs->csize + fs->database;
 8014d8e:	f8b3 a00a 	ldrh.w	sl, [r3, #10]
 8014d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d94:	fb01 2a0a 	mla	sl, r1, sl, r2
				dp->sect = clust2sect(fs, clst);
 8014d98:	f8c4 a01c 	str.w	sl, [r4, #28]
 8014d9c:	e703      	b.n	8014ba6 <dir_read.constprop.0+0xa2>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8014d9e:	2002      	movs	r0, #2
 8014da0:	e6d1      	b.n	8014b46 <dir_read.constprop.0+0x42>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8014da2:	3334      	adds	r3, #52	; 0x34
				dp->sect = clust2sect(fs, clst);
 8014da4:	f8c4 b01c 	str.w	fp, [r4, #28]
	dp->dptr = ofs;						/* Current entry */
 8014da8:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8014daa:	6223      	str	r3, [r4, #32]
	while (dp->sect) {
 8014dac:	e701      	b.n	8014bb2 <dir_read.constprop.0+0xae>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8014dae:	2f00      	cmp	r7, #0
 8014db0:	f000 80cb 	beq.w	8014f4a <dir_read.constprop.0+0x446>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8014db4:	f04f 33ff 	mov.w	r3, #4294967295
 8014db8:	2000      	movs	r0, #0
 8014dba:	6323      	str	r3, [r4, #48]	; 0x30
 8014dbc:	e6c5      	b.n	8014b4a <dir_read.constprop.0+0x46>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8014dbe:	2aff      	cmp	r2, #255	; 0xff
 8014dc0:	f000 810d 	beq.w	8014fde <dir_read.constprop.0+0x4da>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8014dc4:	f82e c012 	strh.w	ip, [lr, r2, lsl #1]
 8014dc8:	0050      	lsls	r0, r2, #1
	rv = rv << 8 | ptr[0];
 8014dca:	f891 a006 	ldrb.w	sl, [r1, #6]
			lfnbuf[i++] = wc = uc;			/* Store it */
 8014dce:	1c9a      	adds	r2, r3, #2
	rv = rv << 8 | ptr[0];
 8014dd0:	f891 b005 	ldrb.w	fp, [r1, #5]
 8014dd4:	ea4b 2b0a 	orr.w	fp, fp, sl, lsl #8
		if (wc) {
 8014dd8:	f1bc 0f00 	cmp.w	ip, #0
 8014ddc:	f43f af41 	beq.w	8014c62 <dir_read.constprop.0+0x15e>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8014de0:	2aff      	cmp	r2, #255	; 0xff
 8014de2:	f000 80fc 	beq.w	8014fde <dir_read.constprop.0+0x4da>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8014de6:	4470      	add	r0, lr
 8014de8:	1cda      	adds	r2, r3, #3
 8014dea:	f8a0 b002 	strh.w	fp, [r0, #2]
	rv = rv << 8 | ptr[0];
 8014dee:	f891 c008 	ldrb.w	ip, [r1, #8]
 8014df2:	f891 a007 	ldrb.w	sl, [r1, #7]
 8014df6:	ea4a 2a0c 	orr.w	sl, sl, ip, lsl #8
		if (wc) {
 8014dfa:	f1bb 0f00 	cmp.w	fp, #0
 8014dfe:	f43f af39 	beq.w	8014c74 <dir_read.constprop.0+0x170>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8014e02:	2aff      	cmp	r2, #255	; 0xff
 8014e04:	f000 80eb 	beq.w	8014fde <dir_read.constprop.0+0x4da>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8014e08:	f8a0 a004 	strh.w	sl, [r0, #4]
 8014e0c:	1d1a      	adds	r2, r3, #4
	rv = rv << 8 | ptr[0];
 8014e0e:	f891 b00a 	ldrb.w	fp, [r1, #10]
 8014e12:	f891 c009 	ldrb.w	ip, [r1, #9]
 8014e16:	ea4c 2c0b 	orr.w	ip, ip, fp, lsl #8
		if (wc) {
 8014e1a:	f1ba 0f00 	cmp.w	sl, #0
 8014e1e:	f43f af33 	beq.w	8014c88 <dir_read.constprop.0+0x184>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8014e22:	2aff      	cmp	r2, #255	; 0xff
 8014e24:	f000 80db 	beq.w	8014fde <dir_read.constprop.0+0x4da>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8014e28:	f8a0 c006 	strh.w	ip, [r0, #6]
 8014e2c:	1d5a      	adds	r2, r3, #5
	rv = rv << 8 | ptr[0];
 8014e2e:	f891 a00f 	ldrb.w	sl, [r1, #15]
 8014e32:	f891 b00e 	ldrb.w	fp, [r1, #14]
 8014e36:	ea4b 2b0a 	orr.w	fp, fp, sl, lsl #8
		if (wc) {
 8014e3a:	f1bc 0f00 	cmp.w	ip, #0
 8014e3e:	f43f af2d 	beq.w	8014c9c <dir_read.constprop.0+0x198>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8014e42:	2aff      	cmp	r2, #255	; 0xff
 8014e44:	f000 80cb 	beq.w	8014fde <dir_read.constprop.0+0x4da>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8014e48:	f8a0 b008 	strh.w	fp, [r0, #8]
 8014e4c:	1d9a      	adds	r2, r3, #6
	rv = rv << 8 | ptr[0];
 8014e4e:	f891 c011 	ldrb.w	ip, [r1, #17]
 8014e52:	f891 a010 	ldrb.w	sl, [r1, #16]
 8014e56:	ea4a 2a0c 	orr.w	sl, sl, ip, lsl #8
		if (wc) {
 8014e5a:	f1bb 0f00 	cmp.w	fp, #0
 8014e5e:	f43f af27 	beq.w	8014cb0 <dir_read.constprop.0+0x1ac>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8014e62:	2aff      	cmp	r2, #255	; 0xff
 8014e64:	f000 80bb 	beq.w	8014fde <dir_read.constprop.0+0x4da>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8014e68:	f8a0 a00a 	strh.w	sl, [r0, #10]
 8014e6c:	1dda      	adds	r2, r3, #7
	rv = rv << 8 | ptr[0];
 8014e6e:	f891 b013 	ldrb.w	fp, [r1, #19]
 8014e72:	f891 c012 	ldrb.w	ip, [r1, #18]
 8014e76:	ea4c 2c0b 	orr.w	ip, ip, fp, lsl #8
		if (wc) {
 8014e7a:	f1ba 0f00 	cmp.w	sl, #0
 8014e7e:	f43f af21 	beq.w	8014cc4 <dir_read.constprop.0+0x1c0>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8014e82:	2aff      	cmp	r2, #255	; 0xff
 8014e84:	f000 80ab 	beq.w	8014fde <dir_read.constprop.0+0x4da>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8014e88:	f8a0 c00c 	strh.w	ip, [r0, #12]
 8014e8c:	f103 0208 	add.w	r2, r3, #8
	rv = rv << 8 | ptr[0];
 8014e90:	f891 b015 	ldrb.w	fp, [r1, #21]
 8014e94:	f891 a014 	ldrb.w	sl, [r1, #20]
 8014e98:	ea4a 2a0b 	orr.w	sl, sl, fp, lsl #8
		if (wc) {
 8014e9c:	f1bc 0f00 	cmp.w	ip, #0
 8014ea0:	f43f af1a 	beq.w	8014cd8 <dir_read.constprop.0+0x1d4>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8014ea4:	2aff      	cmp	r2, #255	; 0xff
 8014ea6:	f000 809a 	beq.w	8014fde <dir_read.constprop.0+0x4da>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8014eaa:	f8a0 a00e 	strh.w	sl, [r0, #14]
 8014eae:	f103 0209 	add.w	r2, r3, #9
	rv = rv << 8 | ptr[0];
 8014eb2:	f891 b017 	ldrb.w	fp, [r1, #23]
 8014eb6:	f891 c016 	ldrb.w	ip, [r1, #22]
 8014eba:	ea4c 2c0b 	orr.w	ip, ip, fp, lsl #8
		if (wc) {
 8014ebe:	f1ba 0f00 	cmp.w	sl, #0
 8014ec2:	f43f af13 	beq.w	8014cec <dir_read.constprop.0+0x1e8>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8014ec6:	2aff      	cmp	r2, #255	; 0xff
 8014ec8:	f43f ae55 	beq.w	8014b76 <dir_read.constprop.0+0x72>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8014ecc:	f8a0 c010 	strh.w	ip, [r0, #16]
 8014ed0:	f103 020a 	add.w	r2, r3, #10
	rv = rv << 8 | ptr[0];
 8014ed4:	f891 b019 	ldrb.w	fp, [r1, #25]
 8014ed8:	f891 a018 	ldrb.w	sl, [r1, #24]
 8014edc:	ea4a 2a0b 	orr.w	sl, sl, fp, lsl #8
		if (wc) {
 8014ee0:	f1bc 0f00 	cmp.w	ip, #0
 8014ee4:	f43f af0c 	beq.w	8014d00 <dir_read.constprop.0+0x1fc>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8014ee8:	2aff      	cmp	r2, #255	; 0xff
 8014eea:	d078      	beq.n	8014fde <dir_read.constprop.0+0x4da>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8014eec:	f8a0 a012 	strh.w	sl, [r0, #18]
 8014ef0:	f103 020b 	add.w	r2, r3, #11
	rv = rv << 8 | ptr[0];
 8014ef4:	f891 b01d 	ldrb.w	fp, [r1, #29]
 8014ef8:	f891 c01c 	ldrb.w	ip, [r1, #28]
 8014efc:	ea4c 2c0b 	orr.w	ip, ip, fp, lsl #8
		if (wc) {
 8014f00:	f1ba 0f00 	cmp.w	sl, #0
 8014f04:	f43f af06 	beq.w	8014d14 <dir_read.constprop.0+0x210>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8014f08:	2aff      	cmp	r2, #255	; 0xff
 8014f0a:	d068      	beq.n	8014fde <dir_read.constprop.0+0x4da>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8014f0c:	f8a0 c014 	strh.w	ip, [r0, #20]
 8014f10:	f103 020c 	add.w	r2, r3, #12
	rv = rv << 8 | ptr[0];
 8014f14:	f891 b01f 	ldrb.w	fp, [r1, #31]
 8014f18:	f891 a01e 	ldrb.w	sl, [r1, #30]
 8014f1c:	ea4a 2a0b 	orr.w	sl, sl, fp, lsl #8
		if (wc) {
 8014f20:	f1bc 0f00 	cmp.w	ip, #0
 8014f24:	f43f af00 	beq.w	8014d28 <dir_read.constprop.0+0x224>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8014f28:	2aff      	cmp	r2, #255	; 0xff
 8014f2a:	d058      	beq.n	8014fde <dir_read.constprop.0+0x4da>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8014f2c:	f103 020d 	add.w	r2, r3, #13
 8014f30:	f8a0 a016 	strh.w	sl, [r0, #22]
	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8014f34:	780b      	ldrb	r3, [r1, #0]
 8014f36:	0659      	lsls	r1, r3, #25
 8014f38:	d504      	bpl.n	8014f44 <dir_read.constprop.0+0x440>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8014f3a:	2aff      	cmp	r2, #255	; 0xff
 8014f3c:	d04f      	beq.n	8014fde <dir_read.constprop.0+0x4da>
		lfnbuf[i] = 0;
 8014f3e:	2300      	movs	r3, #0
 8014f40:	f82e 3012 	strh.w	r3, [lr, r2, lsl #1]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8014f44:	3f01      	subs	r7, #1
 8014f46:	b2ff      	uxtb	r7, r7
 8014f48:	e616      	b.n	8014b78 <dir_read.constprop.0+0x74>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8014f4a:	780a      	ldrb	r2, [r1, #0]
 8014f4c:	784e      	ldrb	r6, [r1, #1]
 8014f4e:	01d3      	lsls	r3, r2, #7
 8014f50:	788d      	ldrb	r5, [r1, #2]
 8014f52:	78c8      	ldrb	r0, [r1, #3]
 8014f54:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 8014f58:	199a      	adds	r2, r3, r6
 8014f5a:	790e      	ldrb	r6, [r1, #4]
 8014f5c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8014f60:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8014f64:	fa55 f283 	uxtab	r2, r5, r3
 8014f68:	794d      	ldrb	r5, [r1, #5]
 8014f6a:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8014f6e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8014f72:	fa50 f283 	uxtab	r2, r0, r3
 8014f76:	7988      	ldrb	r0, [r1, #6]
 8014f78:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8014f7c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8014f80:	fa56 f283 	uxtab	r2, r6, r3
 8014f84:	79ce      	ldrb	r6, [r1, #7]
 8014f86:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8014f8a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8014f8e:	fa55 f283 	uxtab	r2, r5, r3
 8014f92:	7a0d      	ldrb	r5, [r1, #8]
 8014f94:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8014f98:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8014f9c:	fa50 f283 	uxtab	r2, r0, r3
 8014fa0:	7a48      	ldrb	r0, [r1, #9]
 8014fa2:	7a89      	ldrb	r1, [r1, #10]
 8014fa4:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8014fa8:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8014fac:	fa56 f283 	uxtab	r2, r6, r3
 8014fb0:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8014fb4:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8014fb8:	fa55 f283 	uxtab	r2, r5, r3
 8014fbc:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8014fc0:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8014fc4:	fa50 f283 	uxtab	r2, r0, r3
 8014fc8:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8014fcc:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8014fd0:	fa51 f383 	uxtab	r3, r1, r3
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8014fd4:	b2db      	uxtb	r3, r3
 8014fd6:	4599      	cmp	r9, r3
 8014fd8:	f47f aeec 	bne.w	8014db4 <dir_read.constprop.0+0x2b0>
 8014fdc:	e5e9      	b.n	8014bb2 <dir_read.constprop.0+0xae>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8014fde:	4617      	mov	r7, r2
 8014fe0:	e5ca      	b.n	8014b78 <dir_read.constprop.0+0x74>
 8014fe2:	bf00      	nop

08014fe4 <sync_fs>:
{
 8014fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8014fe6:	78c3      	ldrb	r3, [r0, #3]
{
 8014fe8:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8014fea:	b95b      	cbnz	r3, 8015004 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8014fec:	7823      	ldrb	r3, [r4, #0]
 8014fee:	2b03      	cmp	r3, #3
 8014ff0:	d029      	beq.n	8015046 <sync_fs+0x62>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8014ff2:	2200      	movs	r2, #0
 8014ff4:	7860      	ldrb	r0, [r4, #1]
 8014ff6:	4611      	mov	r1, r2
 8014ff8:	f7ff fb66 	bl	80146c8 <disk_ioctl>
			res = FR_DISK_ERR;
 8014ffc:	3800      	subs	r0, #0
 8014ffe:	bf18      	it	ne
 8015000:	2001      	movne	r0, #1
}
 8015002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
 8015004:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8015006:	f100 0734 	add.w	r7, r0, #52	; 0x34
 801500a:	2301      	movs	r3, #1
 801500c:	7840      	ldrb	r0, [r0, #1]
 801500e:	462a      	mov	r2, r5
 8015010:	4639      	mov	r1, r7
 8015012:	f7ff fb4b 	bl	80146ac <disk_write>
 8015016:	2800      	cmp	r0, #0
 8015018:	d150      	bne.n	80150bc <sync_fs+0xd8>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801501a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801501c:	69e3      	ldr	r3, [r4, #28]
 801501e:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
 8015020:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8015022:	429a      	cmp	r2, r3
 8015024:	d2e2      	bcs.n	8014fec <sync_fs+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015026:	78a6      	ldrb	r6, [r4, #2]
 8015028:	2e01      	cmp	r6, #1
 801502a:	d801      	bhi.n	8015030 <sync_fs+0x4c>
 801502c:	e7de      	b.n	8014fec <sync_fs+0x8>
 801502e:	69e3      	ldr	r3, [r4, #28]
					wsect += fs->fsize;
 8015030:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015032:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8015034:	2301      	movs	r3, #1
 8015036:	4639      	mov	r1, r7
 8015038:	462a      	mov	r2, r5
 801503a:	7860      	ldrb	r0, [r4, #1]
 801503c:	f7ff fb36 	bl	80146ac <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015040:	2e01      	cmp	r6, #1
 8015042:	d1f4      	bne.n	801502e <sync_fs+0x4a>
 8015044:	e7d2      	b.n	8014fec <sync_fs+0x8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8015046:	7926      	ldrb	r6, [r4, #4]
 8015048:	2e01      	cmp	r6, #1
 801504a:	d1d2      	bne.n	8014ff2 <sync_fs+0xe>
			mem_set(fs->win, 0, SS(fs));
 801504c:	f104 0334 	add.w	r3, r4, #52	; 0x34
	BYTE *d = (BYTE*)dst;
 8015050:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015054:	2100      	movs	r1, #0
	*ptr++ = (BYTE)val; val >>= 8;
 8015056:	2755      	movs	r7, #85	; 0x55
 8015058:	4618      	mov	r0, r3
 801505a:	f00f feef 	bl	8024e3c <memset>
 801505e:	4603      	mov	r3, r0
			fs->winsect = fs->volbase + 1;
 8015060:	6a22      	ldr	r2, [r4, #32]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8015062:	4619      	mov	r1, r3
 8015064:	4633      	mov	r3, r6
			fs->winsect = fs->volbase + 1;
 8015066:	3201      	adds	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8015068:	f884 7232 	strb.w	r7, [r4, #562]	; 0x232
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801506c:	e9d4 0504 	ldrd	r0, r5, [r4, #16]
			fs->winsect = fs->volbase + 1;
 8015070:	6322      	str	r2, [r4, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8015072:	ea4f 2c15 	mov.w	ip, r5, lsr #8
 8015076:	f884 521c 	strb.w	r5, [r4, #540]	; 0x21c
	*ptr++ = (BYTE)val; val >>= 8;
 801507a:	0c2e      	lsrs	r6, r5, #16
	*ptr++ = (BYTE)val; val >>= 8;
 801507c:	f884 0220 	strb.w	r0, [r4, #544]	; 0x220
	*ptr++ = (BYTE)val; val >>= 8;
 8015080:	0e2d      	lsrs	r5, r5, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8015082:	f884 c21d 	strb.w	ip, [r4, #541]	; 0x21d
	*ptr++ = (BYTE)val; val >>= 8;
 8015086:	f884 621e 	strb.w	r6, [r4, #542]	; 0x21e
	*ptr++ = (BYTE)val; val >>= 8;
 801508a:	0a06      	lsrs	r6, r0, #8
	*ptr++ = (BYTE)val;
 801508c:	f884 521f 	strb.w	r5, [r4, #543]	; 0x21f
	*ptr++ = (BYTE)val; val >>= 8;
 8015090:	0c05      	lsrs	r5, r0, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8015092:	0e00      	lsrs	r0, r0, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8015094:	f884 6221 	strb.w	r6, [r4, #545]	; 0x221
	*ptr++ = (BYTE)val; val >>= 8;
 8015098:	f884 5222 	strb.w	r5, [r4, #546]	; 0x222
	*ptr++ = (BYTE)val;
 801509c:	26aa      	movs	r6, #170	; 0xaa
	*ptr++ = (BYTE)val;
 801509e:	f884 0223 	strb.w	r0, [r4, #547]	; 0x223
	*ptr++ = (BYTE)val; val >>= 8;
 80150a2:	4d07      	ldr	r5, [pc, #28]	; (80150c0 <sync_fs+0xdc>)
 80150a4:	4807      	ldr	r0, [pc, #28]	; (80150c4 <sync_fs+0xe0>)
	*ptr++ = (BYTE)val;
 80150a6:	f884 6233 	strb.w	r6, [r4, #563]	; 0x233
	*ptr++ = (BYTE)val; val >>= 8;
 80150aa:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
 80150ae:	6365      	str	r5, [r4, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80150b0:	7860      	ldrb	r0, [r4, #1]
 80150b2:	f7ff fafb 	bl	80146ac <disk_write>
			fs->fsi_flag = 0;
 80150b6:	2300      	movs	r3, #0
 80150b8:	7123      	strb	r3, [r4, #4]
 80150ba:	e79a      	b.n	8014ff2 <sync_fs+0xe>
			res = FR_DISK_ERR;
 80150bc:	2001      	movs	r0, #1
}
 80150be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80150c0:	41615252 	.word	0x41615252
 80150c4:	61417272 	.word	0x61417272

080150c8 <create_chain>:
{
 80150c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150cc:	4681      	mov	r9, r0
	if (clst == 0) {	/* Create a new chain */
 80150ce:	460f      	mov	r7, r1
	FATFS *fs = obj->fs;
 80150d0:	f8d0 8000 	ldr.w	r8, [r0]
	if (clst == 0) {	/* Create a new chain */
 80150d4:	2900      	cmp	r1, #0
 80150d6:	f040 80bc 	bne.w	8015252 <create_chain+0x18a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80150da:	f8d8 6010 	ldr.w	r6, [r8, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80150de:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80150e2:	b9ce      	cbnz	r6, 8015118 <create_chain+0x50>
 80150e4:	2601      	movs	r6, #1
		ncl = scl;	/* Start cluster */
 80150e6:	4634      	mov	r4, r6
			ncl++;							/* Next cluster */
 80150e8:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80150ea:	429c      	cmp	r4, r3
 80150ec:	d318      	bcc.n	8015120 <create_chain+0x58>
				if (ncl > scl) return 0;	/* No free cluster */
 80150ee:	2e01      	cmp	r6, #1
 80150f0:	f240 80ab 	bls.w	801524a <create_chain+0x182>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80150f4:	f8d9 5000 	ldr.w	r5, [r9]
				ncl = 2;
 80150f8:	2402      	movs	r4, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80150fa:	69ab      	ldr	r3, [r5, #24]
 80150fc:	42a3      	cmp	r3, r4
 80150fe:	d907      	bls.n	8015110 <create_chain+0x48>
		switch (fs->fs_type) {
 8015100:	782b      	ldrb	r3, [r5, #0]
 8015102:	2b02      	cmp	r3, #2
 8015104:	f000 808c 	beq.w	8015220 <create_chain+0x158>
 8015108:	2b03      	cmp	r3, #3
 801510a:	d044      	beq.n	8015196 <create_chain+0xce>
 801510c:	2b01      	cmp	r3, #1
 801510e:	d00c      	beq.n	801512a <create_chain+0x62>
 8015110:	2401      	movs	r4, #1
}
 8015112:	4620      	mov	r0, r4
 8015114:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8015118:	42b3      	cmp	r3, r6
 801511a:	bf98      	it	ls
 801511c:	2601      	movls	r6, #1
 801511e:	e7e2      	b.n	80150e6 <create_chain+0x1e>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8015120:	2c01      	cmp	r4, #1
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8015122:	f8d9 5000 	ldr.w	r5, [r9]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8015126:	d9f3      	bls.n	8015110 <create_chain+0x48>
 8015128:	e7e7      	b.n	80150fa <create_chain+0x32>
			bc = (UINT)clst; bc += bc / 2;
 801512a:	eb04 0b54 	add.w	fp, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801512e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8015130:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015132:	eb03 215b 	add.w	r1, r3, fp, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8015136:	4291      	cmp	r1, r2
 8015138:	d005      	beq.n	8015146 <create_chain+0x7e>
 801513a:	4628      	mov	r0, r5
 801513c:	f7ff fb5a 	bl	80147f4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015140:	bb20      	cbnz	r0, 801518c <create_chain+0xc4>
 8015142:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015144:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 8015146:	f3cb 0008 	ubfx	r0, fp, #0, #9
 801514a:	f10b 0b01 	add.w	fp, fp, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801514e:	eb03 215b 	add.w	r1, r3, fp, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 8015152:	4428      	add	r0, r5
	if (sector != fs->winsect) {	/* Window offset changed? */
 8015154:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 8015156:	f890 a034 	ldrb.w	sl, [r0, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 801515a:	d003      	beq.n	8015164 <create_chain+0x9c>
 801515c:	4628      	mov	r0, r5
 801515e:	f7ff fb49 	bl	80147f4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015162:	b998      	cbnz	r0, 801518c <create_chain+0xc4>
			wc |= fs->win[bc % SS(fs)] << 8;
 8015164:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8015168:	07e2      	lsls	r2, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 801516a:	445d      	add	r5, fp
 801516c:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 8015170:	ea4a 2303 	orr.w	r3, sl, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8015174:	d57d      	bpl.n	8015272 <create_chain+0x1aa>
 8015176:	091b      	lsrs	r3, r3, #4
			if (cs == 0) break;				/* Found a free cluster */
 8015178:	b343      	cbz	r3, 80151cc <create_chain+0x104>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801517a:	2b01      	cmp	r3, #1
 801517c:	d0c8      	beq.n	8015110 <create_chain+0x48>
			if (ncl == scl) return 0;		/* No free cluster */
 801517e:	42a6      	cmp	r6, r4
 8015180:	d063      	beq.n	801524a <create_chain+0x182>
 8015182:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8015186:	e7af      	b.n	80150e8 <create_chain+0x20>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8015188:	2801      	cmp	r0, #1
 801518a:	d1c1      	bne.n	8015110 <create_chain+0x48>
 801518c:	f04f 34ff 	mov.w	r4, #4294967295
}
 8015190:	4620      	mov	r0, r4
 8015192:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8015196:	6a69      	ldr	r1, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8015198:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801519a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 801519e:	4299      	cmp	r1, r3
 80151a0:	d004      	beq.n	80151ac <create_chain+0xe4>
 80151a2:	4628      	mov	r0, r5
 80151a4:	f7ff fb26 	bl	80147f4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80151a8:	2800      	cmp	r0, #0
 80151aa:	d1ef      	bne.n	801518c <create_chain+0xc4>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80151ac:	00a3      	lsls	r3, r4, #2
 80151ae:	3534      	adds	r5, #52	; 0x34
 80151b0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80151b4:	18e9      	adds	r1, r5, r3
	rv = rv << 8 | ptr[0];
 80151b6:	5ceb      	ldrb	r3, [r5, r3]
	rv = rv << 8 | ptr[2];
 80151b8:	8848      	ldrh	r0, [r1, #2]
	rv = rv << 8 | ptr[1];
 80151ba:	784a      	ldrb	r2, [r1, #1]
 80151bc:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	rv = rv << 8 | ptr[0];
 80151c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80151c4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
			if (cs == 0) break;				/* Found a free cluster */
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	d1d6      	bne.n	801517a <create_chain+0xb2>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80151cc:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80151d0:	42a3      	cmp	r3, r4
 80151d2:	d99d      	bls.n	8015110 <create_chain+0x48>
 80151d4:	f04f 32ff 	mov.w	r2, #4294967295
 80151d8:	4621      	mov	r1, r4
 80151da:	4640      	mov	r0, r8
 80151dc:	f7ff fb44 	bl	8014868 <put_fat.part.0>
		if (res == FR_OK && clst != 0) {
 80151e0:	b958      	cbnz	r0, 80151fa <create_chain+0x132>
 80151e2:	b157      	cbz	r7, 80151fa <create_chain+0x132>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80151e4:	2f01      	cmp	r7, #1
 80151e6:	d993      	bls.n	8015110 <create_chain+0x48>
 80151e8:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80151ec:	429f      	cmp	r7, r3
 80151ee:	d28f      	bcs.n	8015110 <create_chain+0x48>
 80151f0:	4639      	mov	r1, r7
 80151f2:	4622      	mov	r2, r4
 80151f4:	4640      	mov	r0, r8
 80151f6:	f7ff fb37 	bl	8014868 <put_fat.part.0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80151fa:	2800      	cmp	r0, #0
 80151fc:	d1c4      	bne.n	8015188 <create_chain+0xc0>
		fs->last_clst = ncl;
 80151fe:	f8c8 4010 	str.w	r4, [r8, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8015202:	e9d8 2305 	ldrd	r2, r3, [r8, #20]
 8015206:	3b02      	subs	r3, #2
 8015208:	429a      	cmp	r2, r3
 801520a:	d802      	bhi.n	8015212 <create_chain+0x14a>
 801520c:	3a01      	subs	r2, #1
 801520e:	f8c8 2014 	str.w	r2, [r8, #20]
		fs->fsi_flag |= 1;
 8015212:	f898 3004 	ldrb.w	r3, [r8, #4]
 8015216:	f043 0301 	orr.w	r3, r3, #1
 801521a:	f888 3004 	strb.w	r3, [r8, #4]
 801521e:	e778      	b.n	8015112 <create_chain+0x4a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8015220:	6a69      	ldr	r1, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8015222:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8015224:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8015228:	4299      	cmp	r1, r3
 801522a:	d004      	beq.n	8015236 <create_chain+0x16e>
 801522c:	4628      	mov	r0, r5
 801522e:	f7ff fae1 	bl	80147f4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8015232:	2800      	cmp	r0, #0
 8015234:	d1aa      	bne.n	801518c <create_chain+0xc4>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8015236:	0063      	lsls	r3, r4, #1
 8015238:	3534      	adds	r5, #52	; 0x34
 801523a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801523e:	18ea      	adds	r2, r5, r3
	rv = rv << 8 | ptr[0];
 8015240:	5ceb      	ldrb	r3, [r5, r3]
 8015242:	7852      	ldrb	r2, [r2, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8015244:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			break;
 8015248:	e796      	b.n	8015178 <create_chain+0xb0>
				if (ncl > scl) return 0;	/* No free cluster */
 801524a:	2400      	movs	r4, #0
}
 801524c:	4620      	mov	r0, r4
 801524e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8015252:	4640      	mov	r0, r8
 8015254:	f7ff fba6 	bl	80149a4 <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8015258:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801525a:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 801525c:	f67f af58 	bls.w	8015110 <create_chain+0x48>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8015260:	1c41      	adds	r1, r0, #1
 8015262:	d093      	beq.n	801518c <create_chain+0xc4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8015264:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8015268:	4283      	cmp	r3, r0
 801526a:	f63f af52 	bhi.w	8015112 <create_chain+0x4a>
 801526e:	463e      	mov	r6, r7
 8015270:	e739      	b.n	80150e6 <create_chain+0x1e>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8015272:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015276:	e77f      	b.n	8015178 <create_chain+0xb0>

08015278 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8015278:	b570      	push	{r4, r5, r6, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801527a:	f04f 36ff 	mov.w	r6, #4294967295
 801527e:	2300      	movs	r3, #0
{
 8015280:	4604      	mov	r4, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8015282:	42b1      	cmp	r1, r6
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8015284:	70c3      	strb	r3, [r0, #3]
 8015286:	6306      	str	r6, [r0, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 8015288:	d00c      	beq.n	80152a4 <check_fs+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801528a:	460d      	mov	r5, r1
 801528c:	460a      	mov	r2, r1
 801528e:	2301      	movs	r3, #1
 8015290:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8015294:	7840      	ldrb	r0, [r0, #1]
 8015296:	f7ff f9fb 	bl	8014690 <disk_read>
 801529a:	b110      	cbz	r0, 80152a2 <check_fs+0x2a>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801529c:	2004      	movs	r0, #4
			fs->winsect = sector;
 801529e:	6326      	str	r6, [r4, #48]	; 0x30
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
 80152a0:	bd70      	pop	{r4, r5, r6, pc}
			fs->winsect = sector;
 80152a2:	6325      	str	r5, [r4, #48]	; 0x30
	rv = rv << 8 | ptr[0];
 80152a4:	f894 1233 	ldrb.w	r1, [r4, #563]	; 0x233
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80152a8:	f64a 2255 	movw	r2, #43605	; 0xaa55
	rv = rv << 8 | ptr[0];
 80152ac:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
 80152b0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80152b4:	4293      	cmp	r3, r2
 80152b6:	d12a      	bne.n	801530e <check_fs+0x96>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80152b8:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80152bc:	2be9      	cmp	r3, #233	; 0xe9
 80152be:	d007      	beq.n	80152d0 <check_fs+0x58>
 80152c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80152c2:	4a15      	ldr	r2, [pc, #84]	; (8015318 <check_fs+0xa0>)
 80152c4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80152c8:	4293      	cmp	r3, r2
 80152ca:	d001      	beq.n	80152d0 <check_fs+0x58>
	return 2;
 80152cc:	2002      	movs	r0, #2
}
 80152ce:	bd70      	pop	{r4, r5, r6, pc}
	rv = rv << 8 | ptr[2];
 80152d0:	f8b4 106c 	ldrh.w	r1, [r4, #108]	; 0x6c
	rv = rv << 8 | ptr[1];
 80152d4:	f894 206b 	ldrb.w	r2, [r4, #107]	; 0x6b
	rv = rv << 8 | ptr[0];
 80152d8:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
	rv = rv << 8 | ptr[1];
 80152dc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80152e0:	490e      	ldr	r1, [pc, #56]	; (801531c <check_fs+0xa4>)
	rv = rv << 8 | ptr[0];
 80152e2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80152e6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80152ea:	428b      	cmp	r3, r1
 80152ec:	d011      	beq.n	8015312 <check_fs+0x9a>
	rv = rv << 8 | ptr[2];
 80152ee:	f8b4 2088 	ldrh.w	r2, [r4, #136]	; 0x88
	rv = rv << 8 | ptr[1];
 80152f2:	f894 3087 	ldrb.w	r3, [r4, #135]	; 0x87
	rv = rv << 8 | ptr[0];
 80152f6:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
	rv = rv << 8 | ptr[1];
 80152fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80152fe:	4a08      	ldr	r2, [pc, #32]	; (8015320 <check_fs+0xa8>)
	rv = rv << 8 | ptr[0];
 8015300:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8015304:	4290      	cmp	r0, r2
 8015306:	bf14      	ite	ne
 8015308:	2002      	movne	r0, #2
 801530a:	2000      	moveq	r0, #0
}
 801530c:	bd70      	pop	{r4, r5, r6, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801530e:	2003      	movs	r0, #3
}
 8015310:	bd70      	pop	{r4, r5, r6, pc}
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8015312:	2000      	movs	r0, #0
}
 8015314:	bd70      	pop	{r4, r5, r6, pc}
 8015316:	bf00      	nop
 8015318:	009000eb 	.word	0x009000eb
 801531c:	00544146 	.word	0x00544146
 8015320:	33544146 	.word	0x33544146

08015324 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8015324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (*path) {	/* If the pointer is not a null */
 8015328:	6803      	ldr	r3, [r0, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801532a:	2400      	movs	r4, #0
 801532c:	600c      	str	r4, [r1, #0]
	if (*path) {	/* If the pointer is not a null */
 801532e:	b193      	cbz	r3, 8015356 <find_volume+0x32>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8015330:	781e      	ldrb	r6, [r3, #0]
 8015332:	2e1f      	cmp	r6, #31
 8015334:	d913      	bls.n	801535e <find_volume+0x3a>
 8015336:	2e3a      	cmp	r6, #58	; 0x3a
 8015338:	d011      	beq.n	801535e <find_volume+0x3a>
 801533a:	461d      	mov	r5, r3
 801533c:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8015340:	2c1f      	cmp	r4, #31
 8015342:	d90e      	bls.n	8015362 <find_volume+0x3e>
 8015344:	2c3a      	cmp	r4, #58	; 0x3a
 8015346:	d1f9      	bne.n	801533c <find_volume+0x18>
			i = *tp++ - '0';
 8015348:	3301      	adds	r3, #1
 801534a:	3e30      	subs	r6, #48	; 0x30
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801534c:	429d      	cmp	r5, r3
 801534e:	d102      	bne.n	8015356 <find_volume+0x32>
 8015350:	2e01      	cmp	r6, #1
 8015352:	f240 814d 	bls.w	80155f0 <find_volume+0x2cc>
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
 8015356:	250b      	movs	r5, #11
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 8015358:	4628      	mov	r0, r5
 801535a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801535e:	4634      	mov	r4, r6
 8015360:	461d      	mov	r5, r3
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8015362:	2c3a      	cmp	r4, #58	; 0x3a
 8015364:	d0f0      	beq.n	8015348 <find_volume+0x24>
		vol = 0;		/* Drive 0 */
 8015366:	2600      	movs	r6, #0
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8015368:	4bc8      	ldr	r3, [pc, #800]	; (801568c <find_volume+0x368>)
 801536a:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801536e:	2c00      	cmp	r4, #0
 8015370:	f000 812a 	beq.w	80155c8 <find_volume+0x2a4>
	*rfs = fs;							/* Return pointer to the file system object */
 8015374:	600c      	str	r4, [r1, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8015376:	f002 05fe 	and.w	r5, r2, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 801537a:	7823      	ldrb	r3, [r4, #0]
 801537c:	b17b      	cbz	r3, 801539e <find_volume+0x7a>
		stat = disk_status(fs->drv);
 801537e:	7860      	ldrb	r0, [r4, #1]
 8015380:	f7ff f968 	bl	8014654 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8015384:	07c1      	lsls	r1, r0, #31
 8015386:	d40a      	bmi.n	801539e <find_volume+0x7a>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8015388:	2d00      	cmp	r5, #0
 801538a:	f000 810c 	beq.w	80155a6 <find_volume+0x282>
 801538e:	f010 0504 	ands.w	r5, r0, #4
 8015392:	f000 8108 	beq.w	80155a6 <find_volume+0x282>
				return FR_WRITE_PROTECTED;
 8015396:	250a      	movs	r5, #10
}
 8015398:	4628      	mov	r0, r5
 801539a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801539e:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 80153a0:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80153a2:	7060      	strb	r0, [r4, #1]
	fs->fs_type = 0;					/* Clear the file system object */
 80153a4:	7023      	strb	r3, [r4, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80153a6:	f7ff f95f 	bl	8014668 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80153aa:	07c2      	lsls	r2, r0, #31
 80153ac:	f100 80fe 	bmi.w	80155ac <find_volume+0x288>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80153b0:	b10d      	cbz	r5, 80153b6 <find_volume+0x92>
 80153b2:	0743      	lsls	r3, r0, #29
 80153b4:	d4ef      	bmi.n	8015396 <find_volume+0x72>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80153b6:	2100      	movs	r1, #0
 80153b8:	4620      	mov	r0, r4
 80153ba:	f7ff ff5d 	bl	8015278 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80153be:	2802      	cmp	r0, #2
 80153c0:	f000 80ae 	beq.w	8015520 <find_volume+0x1fc>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80153c4:	2804      	cmp	r0, #4
 80153c6:	f000 80fd 	beq.w	80155c4 <find_volume+0x2a0>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80153ca:	2801      	cmp	r0, #1
 80153cc:	f200 80ea 	bhi.w	80155a4 <find_volume+0x280>
	bsect = 0;
 80153d0:	2500      	movs	r5, #0
	rv = rv << 8 | ptr[0];
 80153d2:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 80153d6:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 80153da:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80153de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80153e2:	f040 80df 	bne.w	80155a4 <find_volume+0x280>
	rv = rv << 8 | ptr[0];
 80153e6:	f894 204b 	ldrb.w	r2, [r4, #75]	; 0x4b
 80153ea:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80153ee:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 80153f2:	d109      	bne.n	8015408 <find_volume+0xe4>
	rv = rv << 8 | ptr[2];
 80153f4:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
	rv = rv << 8 | ptr[1];
 80153f8:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
	rv = rv << 8 | ptr[0];
 80153fc:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
	rv = rv << 8 | ptr[1];
 8015400:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 8015404:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8015408:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
		fs->fsize = fasize;
 801540c:	61e3      	str	r3, [r4, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801540e:	1e42      	subs	r2, r0, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8015410:	70a0      	strb	r0, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8015412:	2a01      	cmp	r2, #1
 8015414:	f200 80c6 	bhi.w	80155a4 <find_volume+0x280>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8015418:	f894 7041 	ldrb.w	r7, [r4, #65]	; 0x41
 801541c:	b2ba      	uxth	r2, r7
 801541e:	8162      	strh	r2, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8015420:	2a00      	cmp	r2, #0
 8015422:	f000 80bf 	beq.w	80155a4 <find_volume+0x280>
 8015426:	1e7a      	subs	r2, r7, #1
 8015428:	423a      	tst	r2, r7
 801542a:	f040 80bb 	bne.w	80155a4 <find_volume+0x280>
	rv = rv << 8 | ptr[0];
 801542e:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
 8015432:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8015436:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801543a:	f012 0f0f 	tst.w	r2, #15
	rv = rv << 8 | ptr[0];
 801543e:	4694      	mov	ip, r2
 8015440:	b216      	sxth	r6, r2
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8015442:	8122      	strh	r2, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8015444:	f040 80ae 	bne.w	80155a4 <find_volume+0x280>
	rv = rv << 8 | ptr[0];
 8015448:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 801544c:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8015450:	ea52 2201 	orrs.w	r2, r2, r1, lsl #8
 8015454:	d109      	bne.n	801546a <find_volume+0x146>
	rv = rv << 8 | ptr[2];
 8015456:	f8b4 e056 	ldrh.w	lr, [r4, #86]	; 0x56
	rv = rv << 8 | ptr[1];
 801545a:	f894 1055 	ldrb.w	r1, [r4, #85]	; 0x55
	rv = rv << 8 | ptr[0];
 801545e:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
	rv = rv << 8 | ptr[1];
 8015462:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
	rv = rv << 8 | ptr[0];
 8015466:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	rv = rv << 8 | ptr[0];
 801546a:	f894 e043 	ldrb.w	lr, [r4, #67]	; 0x43
 801546e:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8015472:	ea51 210e 	orrs.w	r1, r1, lr, lsl #8
 8015476:	f000 8095 	beq.w	80155a4 <find_volume+0x280>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801547a:	fb03 f000 	mul.w	r0, r3, r0
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801547e:	eb01 1e1c 	add.w	lr, r1, ip, lsr #4
 8015482:	4486      	add	lr, r0
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8015484:	4572      	cmp	r2, lr
 8015486:	f0c0 808d 	bcc.w	80155a4 <find_volume+0x280>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801548a:	eba2 020e 	sub.w	r2, r2, lr
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801548e:	42ba      	cmp	r2, r7
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8015490:	fbb2 f8f7 	udiv	r8, r2, r7
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8015494:	f0c0 8086 	bcc.w	80155a4 <find_volume+0x280>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8015498:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801549c:	4590      	cmp	r8, r2
 801549e:	f200 80aa 	bhi.w	80155f6 <find_volume+0x2d2>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80154a2:	f640 72f5 	movw	r2, #4085	; 0xff5
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80154a6:	4429      	add	r1, r5
		fs->database = bsect + sysect;					/* Data start sector */
 80154a8:	eb0e 0605 	add.w	r6, lr, r5
		fs->volbase = bsect;							/* Volume start sector */
 80154ac:	6225      	str	r5, [r4, #32]
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80154ae:	4590      	cmp	r8, r2
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80154b0:	f108 0202 	add.w	r2, r8, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80154b4:	6261      	str	r1, [r4, #36]	; 0x24
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80154b6:	61a2      	str	r2, [r4, #24]
		fs->database = bsect + sysect;					/* Data start sector */
 80154b8:	62e6      	str	r6, [r4, #44]	; 0x2c
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80154ba:	f200 80dd 	bhi.w	8015678 <find_volume+0x354>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80154be:	f1bc 0f00 	cmp.w	ip, #0
 80154c2:	d06f      	beq.n	80155a4 <find_volume+0x280>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80154c4:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 80154c8:	f002 0201 	and.w	r2, r2, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80154cc:	4401      	add	r1, r0
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80154ce:	2001      	movs	r0, #1
 80154d0:	eb02 0255 	add.w	r2, r2, r5, lsr #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80154d4:	62a1      	str	r1, [r4, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80154d6:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
 80154da:	ebb3 2f52 	cmp.w	r3, r2, lsr #9
 80154de:	d361      	bcc.n	80155a4 <find_volume+0x280>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80154e0:	f04f 33ff 	mov.w	r3, #4294967295
		fs->fsi_flag = 0x80;
 80154e4:	2280      	movs	r2, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80154e6:	e9c4 3304 	strd	r3, r3, [r4, #16]
		fs->fsi_flag = 0x80;
 80154ea:	7122      	strb	r2, [r4, #4]
	fs->id = ++Fsid;		/* File system mount ID */
 80154ec:	4968      	ldr	r1, [pc, #416]	; (8015690 <find_volume+0x36c>)
		if (Files[i].fs == fs) Files[i].fs = 0;
 80154ee:	4a69      	ldr	r2, [pc, #420]	; (8015694 <find_volume+0x370>)
	fs->id = ++Fsid;		/* File system mount ID */
 80154f0:	880b      	ldrh	r3, [r1, #0]
	fs->fs_type = fmt;		/* FAT sub-type */
 80154f2:	7020      	strb	r0, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80154f4:	3301      	adds	r3, #1
		if (Files[i].fs == fs) Files[i].fs = 0;
 80154f6:	6810      	ldr	r0, [r2, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80154f8:	b29b      	uxth	r3, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
 80154fa:	4284      	cmp	r4, r0
	fs->id = ++Fsid;		/* File system mount ID */
 80154fc:	800b      	strh	r3, [r1, #0]
 80154fe:	80e3      	strh	r3, [r4, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 8015500:	f000 80b7 	beq.w	8015672 <find_volume+0x34e>
 8015504:	6913      	ldr	r3, [r2, #16]
 8015506:	429c      	cmp	r4, r3
 8015508:	f000 80b0 	beq.w	801566c <find_volume+0x348>
 801550c:	6a13      	ldr	r3, [r2, #32]
 801550e:	429c      	cmp	r4, r3
 8015510:	f000 80a9 	beq.w	8015666 <find_volume+0x342>
 8015514:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8015516:	429c      	cmp	r4, r3
 8015518:	f000 80a2 	beq.w	8015660 <find_volume+0x33c>
	return FR_OK;
 801551c:	2500      	movs	r5, #0
 801551e:	e042      	b.n	80155a6 <find_volume+0x282>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8015520:	f894 11f6 	ldrb.w	r1, [r4, #502]	; 0x1f6
 8015524:	2900      	cmp	r1, #0
 8015526:	d051      	beq.n	80155cc <find_volume+0x2a8>
	rv = rv << 8 | ptr[2];
 8015528:	f8b4 31fc 	ldrh.w	r3, [r4, #508]	; 0x1fc
	rv = rv << 8 | ptr[1];
 801552c:	f894 11fb 	ldrb.w	r1, [r4, #507]	; 0x1fb
	rv = rv << 8 | ptr[0];
 8015530:	f894 81fa 	ldrb.w	r8, [r4, #506]	; 0x1fa
	rv = rv << 8 | ptr[1];
 8015534:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
	rv = rv << 8 | ptr[0];
 8015538:	ea48 2801 	orr.w	r8, r8, r1, lsl #8
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801553c:	f894 5206 	ldrb.w	r5, [r4, #518]	; 0x206
 8015540:	b14d      	cbz	r5, 8015556 <find_volume+0x232>
	rv = rv << 8 | ptr[2];
 8015542:	f8b4 220c 	ldrh.w	r2, [r4, #524]	; 0x20c
	rv = rv << 8 | ptr[1];
 8015546:	f894 320b 	ldrb.w	r3, [r4, #523]	; 0x20b
	rv = rv << 8 | ptr[0];
 801554a:	f894 520a 	ldrb.w	r5, [r4, #522]	; 0x20a
	rv = rv << 8 | ptr[1];
 801554e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8015552:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8015556:	f894 7216 	ldrb.w	r7, [r4, #534]	; 0x216
 801555a:	b14f      	cbz	r7, 8015570 <find_volume+0x24c>
	rv = rv << 8 | ptr[2];
 801555c:	f8b4 221c 	ldrh.w	r2, [r4, #540]	; 0x21c
	rv = rv << 8 | ptr[1];
 8015560:	f894 321b 	ldrb.w	r3, [r4, #539]	; 0x21b
	rv = rv << 8 | ptr[0];
 8015564:	f894 721a 	ldrb.w	r7, [r4, #538]	; 0x21a
	rv = rv << 8 | ptr[1];
 8015568:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 801556c:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8015570:	f894 6226 	ldrb.w	r6, [r4, #550]	; 0x226
 8015574:	b14e      	cbz	r6, 801558a <find_volume+0x266>
	rv = rv << 8 | ptr[2];
 8015576:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
	rv = rv << 8 | ptr[1];
 801557a:	f894 322b 	ldrb.w	r3, [r4, #555]	; 0x22b
	rv = rv << 8 | ptr[0];
 801557e:	f894 622a 	ldrb.w	r6, [r4, #554]	; 0x22a
	rv = rv << 8 | ptr[1];
 8015582:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8015586:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801558a:	f1b8 0f00 	cmp.w	r8, #0
 801558e:	d11f      	bne.n	80155d0 <find_volume+0x2ac>
 8015590:	b135      	cbz	r5, 80155a0 <find_volume+0x27c>
 8015592:	4629      	mov	r1, r5
 8015594:	4620      	mov	r0, r4
 8015596:	f7ff fe6f 	bl	8015278 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801559a:	2801      	cmp	r0, #1
 801559c:	f67f af19 	bls.w	80153d2 <find_volume+0xae>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80155a0:	b9f7      	cbnz	r7, 80155e0 <find_volume+0x2bc>
 80155a2:	b93e      	cbnz	r6, 80155b4 <find_volume+0x290>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80155a4:	250d      	movs	r5, #13
}
 80155a6:	4628      	mov	r0, r5
 80155a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80155ac:	2503      	movs	r5, #3
}
 80155ae:	4628      	mov	r0, r5
 80155b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80155b4:	4631      	mov	r1, r6
 80155b6:	4620      	mov	r0, r4
 80155b8:	f7ff fe5e 	bl	8015278 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80155bc:	2801      	cmp	r0, #1
 80155be:	d963      	bls.n	8015688 <find_volume+0x364>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80155c0:	2804      	cmp	r0, #4
 80155c2:	d1ef      	bne.n	80155a4 <find_volume+0x280>
 80155c4:	2501      	movs	r5, #1
 80155c6:	e7ee      	b.n	80155a6 <find_volume+0x282>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80155c8:	250c      	movs	r5, #12
 80155ca:	e7ec      	b.n	80155a6 <find_volume+0x282>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80155cc:	4688      	mov	r8, r1
 80155ce:	e7b5      	b.n	801553c <find_volume+0x218>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80155d0:	4641      	mov	r1, r8
 80155d2:	4620      	mov	r0, r4
 80155d4:	f7ff fe50 	bl	8015278 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80155d8:	2801      	cmp	r0, #1
 80155da:	d8d9      	bhi.n	8015590 <find_volume+0x26c>
 80155dc:	4645      	mov	r5, r8
 80155de:	e6f8      	b.n	80153d2 <find_volume+0xae>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80155e0:	4639      	mov	r1, r7
 80155e2:	4620      	mov	r0, r4
 80155e4:	f7ff fe48 	bl	8015278 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80155e8:	2801      	cmp	r0, #1
 80155ea:	d8da      	bhi.n	80155a2 <find_volume+0x27e>
 80155ec:	463d      	mov	r5, r7
 80155ee:	e6f0      	b.n	80153d2 <find_volume+0xae>
					*path = ++tt;
 80155f0:	3501      	adds	r5, #1
 80155f2:	6005      	str	r5, [r0, #0]
	if (vol < 0) return FR_INVALID_DRIVE;
 80155f4:	e6b8      	b.n	8015368 <find_volume+0x44>
	rv = rv << 8 | ptr[0];
 80155f6:	f894 c05f 	ldrb.w	ip, [r4, #95]	; 0x5f
		fs->database = bsect + sysect;					/* Data start sector */
 80155fa:	eb0e 0205 	add.w	r2, lr, r5
	rv = rv << 8 | ptr[0];
 80155fe:	f894 705e 	ldrb.w	r7, [r4, #94]	; 0x5e
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8015602:	f108 0002 	add.w	r0, r8, #2
		fs->database = bsect + sysect;					/* Data start sector */
 8015606:	62e2      	str	r2, [r4, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8015608:	4429      	add	r1, r5
	rv = rv << 8 | ptr[0];
 801560a:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801560e:	61a0      	str	r0, [r4, #24]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8015610:	6261      	str	r1, [r4, #36]	; 0x24
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8015612:	ea46 0207 	orr.w	r2, r6, r7
		fs->volbase = bsect;							/* Volume start sector */
 8015616:	6225      	str	r5, [r4, #32]
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8015618:	b212      	sxth	r2, r2
 801561a:	2a00      	cmp	r2, #0
 801561c:	d1c2      	bne.n	80155a4 <find_volume+0x280>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801561e:	0082      	lsls	r2, r0, #2
	rv = rv << 8 | ptr[2];
 8015620:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
	rv = rv << 8 | ptr[1];
 8015624:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
	rv = rv << 8 | ptr[0];
 8015628:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801562c:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
	rv = rv << 8 | ptr[1];
 8015630:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8015634:	ebb3 2f52 	cmp.w	r3, r2, lsr #9
	rv = rv << 8 | ptr[0];
 8015638:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801563c:	62a1      	str	r1, [r4, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801563e:	d3b1      	bcc.n	80155a4 <find_volume+0x280>
	rv = rv << 8 | ptr[0];
 8015640:	f894 0065 	ldrb.w	r0, [r4, #101]	; 0x65
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8015644:	f04f 32ff 	mov.w	r2, #4294967295
	rv = rv << 8 | ptr[0];
 8015648:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
		fs->fsi_flag = 0x80;
 801564c:	2180      	movs	r1, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801564e:	6162      	str	r2, [r4, #20]
	rv = rv << 8 | ptr[0];
 8015650:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8015654:	6122      	str	r2, [r4, #16]
		fs->fsi_flag = 0x80;
 8015656:	7121      	strb	r1, [r4, #4]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8015658:	2b01      	cmp	r3, #1
 801565a:	d01d      	beq.n	8015698 <find_volume+0x374>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801565c:	2003      	movs	r0, #3
 801565e:	e745      	b.n	80154ec <find_volume+0x1c8>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8015660:	2300      	movs	r3, #0
 8015662:	6313      	str	r3, [r2, #48]	; 0x30
 8015664:	e75a      	b.n	801551c <find_volume+0x1f8>
 8015666:	2300      	movs	r3, #0
 8015668:	6213      	str	r3, [r2, #32]
 801566a:	e753      	b.n	8015514 <find_volume+0x1f0>
 801566c:	2300      	movs	r3, #0
 801566e:	6113      	str	r3, [r2, #16]
 8015670:	e74c      	b.n	801550c <find_volume+0x1e8>
 8015672:	2300      	movs	r3, #0
 8015674:	6013      	str	r3, [r2, #0]
 8015676:	e745      	b.n	8015504 <find_volume+0x1e0>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8015678:	f1bc 0f00 	cmp.w	ip, #0
 801567c:	d092      	beq.n	80155a4 <find_volume+0x280>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801567e:	4401      	add	r1, r0
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8015680:	0052      	lsls	r2, r2, #1
 8015682:	2002      	movs	r0, #2
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8015684:	62a1      	str	r1, [r4, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8015686:	e726      	b.n	80154d6 <find_volume+0x1b2>
 8015688:	4635      	mov	r5, r6
 801568a:	e6a2      	b.n	80153d2 <find_volume+0xae>
 801568c:	20009524 	.word	0x20009524
 8015690:	2000956c 	.word	0x2000956c
 8015694:	2000952c 	.word	0x2000952c
			&& move_window(fs, bsect + 1) == FR_OK)
 8015698:	1c69      	adds	r1, r5, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 801569a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801569c:	4299      	cmp	r1, r3
 801569e:	d004      	beq.n	80156aa <find_volume+0x386>
 80156a0:	4620      	mov	r0, r4
 80156a2:	f7ff f8a7 	bl	80147f4 <move_window.part.0>
			&& move_window(fs, bsect + 1) == FR_OK)
 80156a6:	2800      	cmp	r0, #0
 80156a8:	d1d8      	bne.n	801565c <find_volume+0x338>
	rv = rv << 8 | ptr[0];
 80156aa:	f894 1233 	ldrb.w	r1, [r4, #563]	; 0x233
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80156ae:	f64a 2255 	movw	r2, #43605	; 0xaa55
	rv = rv << 8 | ptr[0];
 80156b2:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
			fs->fsi_flag = 0;
 80156b6:	2000      	movs	r0, #0
	rv = rv << 8 | ptr[0];
 80156b8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			fs->fsi_flag = 0;
 80156bc:	7120      	strb	r0, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80156be:	4293      	cmp	r3, r2
 80156c0:	d1cc      	bne.n	801565c <find_volume+0x338>
	rv = rv << 8 | ptr[2];
 80156c2:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
	rv = rv << 8 | ptr[1];
 80156c4:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
	rv = rv << 8 | ptr[0];
 80156c8:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
	rv = rv << 8 | ptr[1];
 80156cc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80156d0:	4914      	ldr	r1, [pc, #80]	; (8015724 <find_volume+0x400>)
	rv = rv << 8 | ptr[0];
 80156d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80156d6:	428b      	cmp	r3, r1
 80156d8:	d1c0      	bne.n	801565c <find_volume+0x338>
	rv = rv << 8 | ptr[2];
 80156da:	f8b4 121a 	ldrh.w	r1, [r4, #538]	; 0x21a
	rv = rv << 8 | ptr[1];
 80156de:	f894 2219 	ldrb.w	r2, [r4, #537]	; 0x219
	rv = rv << 8 | ptr[0];
 80156e2:	f894 3218 	ldrb.w	r3, [r4, #536]	; 0x218
	rv = rv << 8 | ptr[1];
 80156e6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80156ea:	490f      	ldr	r1, [pc, #60]	; (8015728 <find_volume+0x404>)
	rv = rv << 8 | ptr[0];
 80156ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80156f0:	428b      	cmp	r3, r1
 80156f2:	d1b3      	bne.n	801565c <find_volume+0x338>
	rv = rv << 8 | ptr[1];
 80156f4:	f894 221d 	ldrb.w	r2, [r4, #541]	; 0x21d
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80156f8:	2003      	movs	r0, #3
	rv = rv << 8 | ptr[1];
 80156fa:	f894 3221 	ldrb.w	r3, [r4, #545]	; 0x221
	rv = rv << 8 | ptr[2];
 80156fe:	f8b4 521e 	ldrh.w	r5, [r4, #542]	; 0x21e
 8015702:	f8b4 1222 	ldrh.w	r1, [r4, #546]	; 0x222
	rv = rv << 8 | ptr[1];
 8015706:	ea42 2505 	orr.w	r5, r2, r5, lsl #8
	rv = rv << 8 | ptr[0];
 801570a:	f894 221c 	ldrb.w	r2, [r4, #540]	; 0x21c
	rv = rv << 8 | ptr[1];
 801570e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 8015712:	f894 3220 	ldrb.w	r3, [r4, #544]	; 0x220
 8015716:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 801571a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801571e:	e9c4 3204 	strd	r3, r2, [r4, #16]
 8015722:	e6e3      	b.n	80154ec <find_volume+0x1c8>
 8015724:	41615252 	.word	0x41615252
 8015728:	61417272 	.word	0x61417272

0801572c <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801572c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8015730:	d274      	bcs.n	801581c <dir_sdi+0xf0>
 8015732:	06ca      	lsls	r2, r1, #27
{
 8015734:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015738:	460c      	mov	r4, r1
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801573a:	d151      	bne.n	80157e0 <dir_sdi+0xb4>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801573c:	6885      	ldr	r5, [r0, #8]
 801573e:	4607      	mov	r7, r0
	FATFS *fs = dp->obj.fs;
 8015740:	f8d0 8000 	ldr.w	r8, [r0]
	dp->dptr = ofs;				/* Set current offset */
 8015744:	6141      	str	r1, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8015746:	2d00      	cmp	r5, #0
 8015748:	d04d      	beq.n	80157e6 <dir_sdi+0xba>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801574a:	f8b8 300a 	ldrh.w	r3, [r8, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
 801574e:	ebb4 2f43 	cmp.w	r4, r3, lsl #9
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8015752:	ea4f 2943 	mov.w	r9, r3, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
 8015756:	f0c0 8099 	bcc.w	801588c <dir_sdi+0x160>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801575a:	2d01      	cmp	r5, #1
 801575c:	d940      	bls.n	80157e0 <dir_sdi+0xb4>
 801575e:	4646      	mov	r6, r8
 8015760:	e03b      	b.n	80157da <dir_sdi+0xae>
		switch (fs->fs_type) {
 8015762:	7833      	ldrb	r3, [r6, #0]
 8015764:	2b02      	cmp	r3, #2
 8015766:	d07a      	beq.n	801585e <dir_sdi+0x132>
 8015768:	2b03      	cmp	r3, #3
 801576a:	d05f      	beq.n	801582c <dir_sdi+0x100>
 801576c:	2b01      	cmp	r3, #1
 801576e:	d137      	bne.n	80157e0 <dir_sdi+0xb4>
			bc = (UINT)clst; bc += bc / 2;
 8015770:	eb05 0a55 	add.w	sl, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015774:	6a73      	ldr	r3, [r6, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8015776:	6b32      	ldr	r2, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015778:	eb03 215a 	add.w	r1, r3, sl, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 801577c:	4291      	cmp	r1, r2
 801577e:	d006      	beq.n	801578e <dir_sdi+0x62>
 8015780:	4630      	mov	r0, r6
 8015782:	f7ff f837 	bl	80147f4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015786:	2800      	cmp	r0, #0
 8015788:	d17d      	bne.n	8015886 <dir_sdi+0x15a>
 801578a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801578c:	6b32      	ldr	r2, [r6, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 801578e:	f3ca 0008 	ubfx	r0, sl, #0, #9
 8015792:	f10a 0a01 	add.w	sl, sl, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015796:	eb03 215a 	add.w	r1, r3, sl, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 801579a:	4430      	add	r0, r6
	if (sector != fs->winsect) {	/* Window offset changed? */
 801579c:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 801579e:	f890 b034 	ldrb.w	fp, [r0, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 80157a2:	d004      	beq.n	80157ae <dir_sdi+0x82>
 80157a4:	4630      	mov	r0, r6
 80157a6:	f7ff f825 	bl	80147f4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80157aa:	2800      	cmp	r0, #0
 80157ac:	d16b      	bne.n	8015886 <dir_sdi+0x15a>
			wc |= fs->win[bc % SS(fs)] << 8;
 80157ae:	f3ca 0a08 	ubfx	sl, sl, #0, #9
 80157b2:	4456      	add	r6, sl
 80157b4:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 80157b8:	ea4b 2b03 	orr.w	fp, fp, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80157bc:	07eb      	lsls	r3, r5, #31
 80157be:	d573      	bpl.n	80158a8 <dir_sdi+0x17c>
 80157c0:	ea4f 151b 	mov.w	r5, fp, lsr #4
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80157c4:	2d01      	cmp	r5, #1
 80157c6:	d90b      	bls.n	80157e0 <dir_sdi+0xb4>
 80157c8:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80157cc:	42ab      	cmp	r3, r5
 80157ce:	d907      	bls.n	80157e0 <dir_sdi+0xb4>
			ofs -= csz;
 80157d0:	eba4 0409 	sub.w	r4, r4, r9
		while (ofs >= csz) {				/* Follow cluster chain */
 80157d4:	45a1      	cmp	r9, r4
 80157d6:	d85b      	bhi.n	8015890 <dir_sdi+0x164>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80157d8:	683e      	ldr	r6, [r7, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80157da:	69b3      	ldr	r3, [r6, #24]
 80157dc:	42ab      	cmp	r3, r5
 80157de:	d8c0      	bhi.n	8015762 <dir_sdi+0x36>
		switch (fs->fs_type) {
 80157e0:	2002      	movs	r0, #2
}
 80157e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80157e6:	f898 3000 	ldrb.w	r3, [r8]
 80157ea:	2b02      	cmp	r3, #2
 80157ec:	d818      	bhi.n	8015820 <dir_sdi+0xf4>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80157ee:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 80157f2:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 80157f6:	d9f3      	bls.n	80157e0 <dir_sdi+0xb4>
		dp->sect = fs->dirbase;
 80157f8:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 80157fc:	61f9      	str	r1, [r7, #28]
	dp->clust = clst;					/* Current cluster# */
 80157fe:	61bd      	str	r5, [r7, #24]
	if (!dp->sect) return FR_INT_ERR;
 8015800:	2900      	cmp	r1, #0
 8015802:	d0ed      	beq.n	80157e0 <dir_sdi+0xb4>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8015804:	f108 0834 	add.w	r8, r8, #52	; 0x34
 8015808:	f3c4 0308 	ubfx	r3, r4, #0, #9
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801580c:	eb01 2154 	add.w	r1, r1, r4, lsr #9
	return FR_OK;
 8015810:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8015812:	4443      	add	r3, r8
 8015814:	e9c7 1307 	strd	r1, r3, [r7, #28]
}
 8015818:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return FR_INT_ERR;
 801581c:	2002      	movs	r0, #2
}
 801581e:	4770      	bx	lr
		clst = fs->dirbase;
 8015820:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8015824:	2b00      	cmp	r3, #0
 8015826:	d0e2      	beq.n	80157ee <dir_sdi+0xc2>
 8015828:	461d      	mov	r5, r3
 801582a:	e78e      	b.n	801574a <dir_sdi+0x1e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801582c:	6a71      	ldr	r1, [r6, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 801582e:	6b33      	ldr	r3, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8015830:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8015834:	4299      	cmp	r1, r3
 8015836:	d003      	beq.n	8015840 <dir_sdi+0x114>
 8015838:	4630      	mov	r0, r6
 801583a:	f7fe ffdb 	bl	80147f4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801583e:	bb10      	cbnz	r0, 8015886 <dir_sdi+0x15a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8015840:	00ad      	lsls	r5, r5, #2
 8015842:	3634      	adds	r6, #52	; 0x34
 8015844:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
 8015848:	1972      	adds	r2, r6, r5
	rv = rv << 8 | ptr[0];
 801584a:	5d75      	ldrb	r5, [r6, r5]
	rv = rv << 8 | ptr[2];
 801584c:	8851      	ldrh	r1, [r2, #2]
	rv = rv << 8 | ptr[1];
 801584e:	7853      	ldrb	r3, [r2, #1]
 8015850:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 8015854:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8015858:	f025 4570 	bic.w	r5, r5, #4026531840	; 0xf0000000
			break;
 801585c:	e7b2      	b.n	80157c4 <dir_sdi+0x98>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801585e:	6a71      	ldr	r1, [r6, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8015860:	6b33      	ldr	r3, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8015862:	eb01 2115 	add.w	r1, r1, r5, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8015866:	4299      	cmp	r1, r3
 8015868:	d003      	beq.n	8015872 <dir_sdi+0x146>
 801586a:	4630      	mov	r0, r6
 801586c:	f7fe ffc2 	bl	80147f4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8015870:	b948      	cbnz	r0, 8015886 <dir_sdi+0x15a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8015872:	006d      	lsls	r5, r5, #1
 8015874:	3634      	adds	r6, #52	; 0x34
 8015876:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
 801587a:	1973      	adds	r3, r6, r5
	rv = rv << 8 | ptr[0];
 801587c:	5d75      	ldrb	r5, [r6, r5]
 801587e:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8015880:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
			break;
 8015884:	e79e      	b.n	80157c4 <dir_sdi+0x98>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8015886:	2001      	movs	r0, #1
}
 8015888:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801588c:	f8d8 3018 	ldr.w	r3, [r8, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8015890:	3b02      	subs	r3, #2
	clst -= 2;
 8015892:	1eaa      	subs	r2, r5, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8015894:	429a      	cmp	r2, r3
 8015896:	d20a      	bcs.n	80158ae <dir_sdi+0x182>
	return clst * fs->csize + fs->database;
 8015898:	f8b8 100a 	ldrh.w	r1, [r8, #10]
 801589c:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 80158a0:	fb02 3101 	mla	r1, r2, r1, r3
		dp->sect = clust2sect(fs, clst);
 80158a4:	61f9      	str	r1, [r7, #28]
 80158a6:	e7aa      	b.n	80157fe <dir_sdi+0xd2>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80158a8:	f3cb 050b 	ubfx	r5, fp, #0, #12
 80158ac:	e78a      	b.n	80157c4 <dir_sdi+0x98>
		dp->sect = clust2sect(fs, clst);
 80158ae:	2300      	movs	r3, #0
 80158b0:	e9c7 5306 	strd	r5, r3, [r7, #24]
	if (!dp->sect) return FR_INT_ERR;
 80158b4:	e794      	b.n	80157e0 <dir_sdi+0xb4>
 80158b6:	bf00      	nop

080158b8 <dir_find>:
{
 80158b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80158bc:	2100      	movs	r1, #0
{
 80158be:	b087      	sub	sp, #28
 80158c0:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 80158c2:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80158c4:	f7ff ff32 	bl	801572c <dir_sdi>
	if (res != FR_OK) return res;
 80158c8:	4681      	mov	r9, r0
 80158ca:	b9e0      	cbnz	r0, 8015906 <dir_find+0x4e>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80158cc:	f04f 08ff 	mov.w	r8, #255	; 0xff
 80158d0:	f04f 33ff 	mov.w	r3, #4294967295
 80158d4:	69e7      	ldr	r7, [r4, #28]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80158d6:	f64f 7bff 	movw	fp, #65535	; 0xffff
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80158da:	46c1      	mov	r9, r8
 80158dc:	6323      	str	r3, [r4, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 80158de:	6b35      	ldr	r5, [r6, #48]	; 0x30
 80158e0:	42bd      	cmp	r5, r7
 80158e2:	d015      	beq.n	8015910 <dir_find+0x58>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80158e4:	78f3      	ldrb	r3, [r6, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80158e6:	f106 0134 	add.w	r1, r6, #52	; 0x34
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	f040 8086 	bne.w	80159fc <dir_find+0x144>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80158f0:	2301      	movs	r3, #1
 80158f2:	463a      	mov	r2, r7
 80158f4:	7870      	ldrb	r0, [r6, #1]
 80158f6:	f7fe fecb 	bl	8014690 <disk_read>
 80158fa:	b140      	cbz	r0, 801590e <dir_find+0x56>
			fs->winsect = sector;
 80158fc:	f04f 33ff 	mov.w	r3, #4294967295
				res = FR_DISK_ERR;
 8015900:	f04f 0901 	mov.w	r9, #1
			fs->winsect = sector;
 8015904:	6333      	str	r3, [r6, #48]	; 0x30
}
 8015906:	4648      	mov	r0, r9
 8015908:	b007      	add	sp, #28
 801590a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 801590e:	6337      	str	r7, [r6, #48]	; 0x30
		c = dp->dir[DIR_Name];
 8015910:	6a25      	ldr	r5, [r4, #32]
 8015912:	782f      	ldrb	r7, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8015914:	b34f      	cbz	r7, 801596a <dir_find+0xb2>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8015916:	7aea      	ldrb	r2, [r5, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8015918:	2fe5      	cmp	r7, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801591a:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 801591e:	71a3      	strb	r3, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8015920:	d004      	beq.n	801592c <dir_find+0x74>
 8015922:	0712      	lsls	r2, r2, #28
 8015924:	d527      	bpl.n	8015976 <dir_find+0xbe>
 8015926:	2b0f      	cmp	r3, #15
 8015928:	f000 8095 	beq.w	8015a56 <dir_find+0x19e>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801592c:	f04f 33ff 	mov.w	r3, #4294967295
 8015930:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8015934:	6323      	str	r3, [r4, #48]	; 0x30
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8015936:	6965      	ldr	r5, [r4, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8015938:	69e7      	ldr	r7, [r4, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801593a:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801593c:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 8015940:	d213      	bcs.n	801596a <dir_find+0xb2>
 8015942:	b197      	cbz	r7, 801596a <dir_find+0xb2>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8015944:	f3c5 0208 	ubfx	r2, r5, #0, #9
	FATFS *fs = dp->obj.fs;
 8015948:	6823      	ldr	r3, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801594a:	b94a      	cbnz	r2, 8015960 <dir_find+0xa8>
		dp->sect++;				/* Next sector */
 801594c:	3701      	adds	r7, #1
		if (!dp->clust) {		/* Static table */
 801594e:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 8015950:	61e7      	str	r7, [r4, #28]
		if (!dp->clust) {		/* Static table */
 8015952:	2900      	cmp	r1, #0
 8015954:	d15e      	bne.n	8015a14 <dir_find+0x15c>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8015956:	8919      	ldrh	r1, [r3, #8]
 8015958:	ebb1 1f55 	cmp.w	r1, r5, lsr #5
 801595c:	f240 813f 	bls.w	8015bde <dir_find+0x326>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8015960:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 8015962:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8015964:	4413      	add	r3, r2
 8015966:	6223      	str	r3, [r4, #32]
	} while (res == FR_OK);
 8015968:	e7b9      	b.n	80158de <dir_find+0x26>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801596a:	f04f 0904 	mov.w	r9, #4
}
 801596e:	4648      	mov	r0, r9
 8015970:	b007      	add	sp, #28
 8015972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (a == AM_LFN) {			/* An LFN entry is found */
 8015976:	2b0f      	cmp	r3, #15
 8015978:	d06d      	beq.n	8015a56 <dir_find+0x19e>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801597a:	f1b9 0f00 	cmp.w	r9, #0
 801597e:	f000 80e4 	beq.w	8015b4a <dir_find+0x292>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8015982:	f894 902f 	ldrb.w	r9, [r4, #47]	; 0x2f
 8015986:	f019 0901 	ands.w	r9, r9, #1
 801598a:	d1cf      	bne.n	801592c <dir_find+0x74>
	} while (--cnt && r == 0);
 801598c:	782a      	ldrb	r2, [r5, #0]
 801598e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8015992:	429a      	cmp	r2, r3
 8015994:	d1ca      	bne.n	801592c <dir_find+0x74>
 8015996:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 801599a:	786b      	ldrb	r3, [r5, #1]
 801599c:	429a      	cmp	r2, r3
 801599e:	d1c5      	bne.n	801592c <dir_find+0x74>
 80159a0:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 80159a4:	78ab      	ldrb	r3, [r5, #2]
 80159a6:	429a      	cmp	r2, r3
 80159a8:	d1c0      	bne.n	801592c <dir_find+0x74>
 80159aa:	78ea      	ldrb	r2, [r5, #3]
 80159ac:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 80159b0:	429a      	cmp	r2, r3
 80159b2:	d1bb      	bne.n	801592c <dir_find+0x74>
 80159b4:	792a      	ldrb	r2, [r5, #4]
 80159b6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80159ba:	429a      	cmp	r2, r3
 80159bc:	d1b6      	bne.n	801592c <dir_find+0x74>
 80159be:	796a      	ldrb	r2, [r5, #5]
 80159c0:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 80159c4:	429a      	cmp	r2, r3
 80159c6:	d1b1      	bne.n	801592c <dir_find+0x74>
 80159c8:	79aa      	ldrb	r2, [r5, #6]
 80159ca:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80159ce:	429a      	cmp	r2, r3
 80159d0:	d1ac      	bne.n	801592c <dir_find+0x74>
 80159d2:	79ea      	ldrb	r2, [r5, #7]
 80159d4:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 80159d8:	429a      	cmp	r2, r3
 80159da:	d1a7      	bne.n	801592c <dir_find+0x74>
 80159dc:	7a2a      	ldrb	r2, [r5, #8]
 80159de:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80159e2:	429a      	cmp	r2, r3
 80159e4:	d1a2      	bne.n	801592c <dir_find+0x74>
 80159e6:	7a6a      	ldrb	r2, [r5, #9]
 80159e8:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80159ec:	429a      	cmp	r2, r3
 80159ee:	d19d      	bne.n	801592c <dir_find+0x74>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80159f0:	7aaa      	ldrb	r2, [r5, #10]
 80159f2:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 80159f6:	429a      	cmp	r2, r3
 80159f8:	d198      	bne.n	801592c <dir_find+0x74>
 80159fa:	e784      	b.n	8015906 <dir_find+0x4e>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80159fc:	2301      	movs	r3, #1
 80159fe:	462a      	mov	r2, r5
 8015a00:	7870      	ldrb	r0, [r6, #1]
 8015a02:	9101      	str	r1, [sp, #4]
 8015a04:	f7fe fe52 	bl	80146ac <disk_write>
 8015a08:	9901      	ldr	r1, [sp, #4]
 8015a0a:	2800      	cmp	r0, #0
 8015a0c:	d07d      	beq.n	8015b0a <dir_find+0x252>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8015a0e:	f04f 0901 	mov.w	r9, #1
 8015a12:	e778      	b.n	8015906 <dir_find+0x4e>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8015a14:	8958      	ldrh	r0, [r3, #10]
 8015a16:	3801      	subs	r0, #1
 8015a18:	ea10 2055 	ands.w	r0, r0, r5, lsr #9
 8015a1c:	d1a0      	bne.n	8015960 <dir_find+0xa8>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8015a1e:	4618      	mov	r0, r3
 8015a20:	9202      	str	r2, [sp, #8]
 8015a22:	9301      	str	r3, [sp, #4]
 8015a24:	f7fe ffbe 	bl	80149a4 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8015a28:	2801      	cmp	r0, #1
 8015a2a:	f240 80dd 	bls.w	8015be8 <dir_find+0x330>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8015a2e:	1c43      	adds	r3, r0, #1
 8015a30:	d0ed      	beq.n	8015a0e <dir_find+0x156>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8015a32:	9b01      	ldr	r3, [sp, #4]
 8015a34:	6999      	ldr	r1, [r3, #24]
 8015a36:	4288      	cmp	r0, r1
 8015a38:	f080 80d1 	bcs.w	8015bde <dir_find+0x326>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8015a3c:	3902      	subs	r1, #2
	clst -= 2;
 8015a3e:	1e87      	subs	r7, r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8015a40:	9a02      	ldr	r2, [sp, #8]
 8015a42:	428f      	cmp	r7, r1
				dp->clust = clst;		/* Initialize data for new cluster */
 8015a44:	61a0      	str	r0, [r4, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8015a46:	f080 80d2 	bcs.w	8015bee <dir_find+0x336>
	return clst * fs->csize + fs->database;
 8015a4a:	8958      	ldrh	r0, [r3, #10]
 8015a4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8015a4e:	fb07 1700 	mla	r7, r7, r0, r1
				dp->sect = clust2sect(fs, clst);
 8015a52:	61e7      	str	r7, [r4, #28]
 8015a54:	e784      	b.n	8015960 <dir_find+0xa8>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8015a56:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8015a5a:	0658      	lsls	r0, r3, #25
 8015a5c:	f53f af6b 	bmi.w	8015936 <dir_find+0x7e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8015a60:	0679      	lsls	r1, r7, #25
 8015a62:	d54d      	bpl.n	8015b00 <dir_find+0x248>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8015a64:	6963      	ldr	r3, [r4, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8015a66:	f007 07bf 	and.w	r7, r7, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
 8015a6a:	f895 800d 	ldrb.w	r8, [r5, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8015a6e:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8015a70:	7b6b      	ldrb	r3, [r5, #13]
 8015a72:	4543      	cmp	r3, r8
 8015a74:	d146      	bne.n	8015b04 <dir_find+0x24c>
	rv = rv << 8 | ptr[0];
 8015a76:	7eea      	ldrb	r2, [r5, #27]
 8015a78:	7eab      	ldrb	r3, [r5, #26]
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8015a7a:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8015a7e:	d141      	bne.n	8015b04 <dir_find+0x24c>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8015a80:	f895 a000 	ldrb.w	sl, [r5]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8015a84:	2101      	movs	r1, #1
 8015a86:	4b65      	ldr	r3, [pc, #404]	; (8015c1c <dir_find+0x364>)
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8015a88:	f00a 0a3f 	and.w	sl, sl, #63	; 0x3f
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8015a8c:	68f0      	ldr	r0, [r6, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8015a8e:	9704      	str	r7, [sp, #16]
 8015a90:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015a94:	9403      	str	r4, [sp, #12]
 8015a96:	4607      	mov	r7, r0
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8015a98:	9005      	str	r0, [sp, #20]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8015a9a:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
 8015a9e:	eb0a 0a82 	add.w	sl, sl, r2, lsl #2
 8015aa2:	e9cd 8601 	strd	r8, r6, [sp, #4]
 8015aa6:	4654      	mov	r4, sl
 8015aa8:	46aa      	mov	sl, r5
 8015aaa:	461d      	mov	r5, r3
 8015aac:	460b      	mov	r3, r1
 8015aae:	e011      	b.n	8015ad4 <dir_find+0x21c>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8015ab0:	2cfe      	cmp	r4, #254	; 0xfe
 8015ab2:	4648      	mov	r0, r9
 8015ab4:	d81e      	bhi.n	8015af4 <dir_find+0x23c>
 8015ab6:	f7fe fd83 	bl	80145c0 <ff_wtoupper>
 8015aba:	4606      	mov	r6, r0
 8015abc:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 8015ac0:	4644      	mov	r4, r8
 8015ac2:	f7fe fd7d 	bl	80145c0 <ff_wtoupper>
 8015ac6:	4286      	cmp	r6, r0
	rv = rv << 8 | ptr[0];
 8015ac8:	464b      	mov	r3, r9
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8015aca:	d113      	bne.n	8015af4 <dir_find+0x23c>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8015acc:	4a54      	ldr	r2, [pc, #336]	; (8015c20 <dir_find+0x368>)
 8015ace:	42aa      	cmp	r2, r5
 8015ad0:	f000 808f 	beq.w	8015bf2 <dir_find+0x33a>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8015ad4:	f815 0b01 	ldrb.w	r0, [r5], #1
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8015ad8:	f104 0801 	add.w	r8, r4, #1
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8015adc:	eb0a 0e00 	add.w	lr, sl, r0
	rv = rv << 8 | ptr[0];
 8015ae0:	f81a 9000 	ldrb.w	r9, [sl, r0]
 8015ae4:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8015ae8:	ea49 2900 	orr.w	r9, r9, r0, lsl #8
		if (wc) {
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d1df      	bne.n	8015ab0 <dir_find+0x1f8>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8015af0:	45d9      	cmp	r9, fp
 8015af2:	d0eb      	beq.n	8015acc <dir_find+0x214>
 8015af4:	e9dd 8601 	ldrd	r8, r6, [sp, #4]
 8015af8:	9c03      	ldr	r4, [sp, #12]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8015afa:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8015afe:	e71a      	b.n	8015936 <dir_find+0x7e>
 8015b00:	45b9      	cmp	r9, r7
 8015b02:	d0b5      	beq.n	8015a70 <dir_find+0x1b8>
 8015b04:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8015b08:	e715      	b.n	8015936 <dir_find+0x7e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8015b0a:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8015b0c:	69f3      	ldr	r3, [r6, #28]
 8015b0e:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
 8015b10:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8015b12:	429a      	cmp	r2, r3
 8015b14:	f4bf aeec 	bcs.w	80158f0 <dir_find+0x38>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015b18:	f896 a002 	ldrb.w	sl, [r6, #2]
 8015b1c:	f1ba 0f01 	cmp.w	sl, #1
 8015b20:	f67f aee6 	bls.w	80158f0 <dir_find+0x38>
 8015b24:	9401      	str	r4, [sp, #4]
 8015b26:	460c      	mov	r4, r1
 8015b28:	e000      	b.n	8015b2c <dir_find+0x274>
 8015b2a:	69f3      	ldr	r3, [r6, #28]
					wsect += fs->fsize;
 8015b2c:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015b2e:	f10a 3aff 	add.w	sl, sl, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8015b32:	2301      	movs	r3, #1
 8015b34:	4621      	mov	r1, r4
 8015b36:	462a      	mov	r2, r5
 8015b38:	7870      	ldrb	r0, [r6, #1]
 8015b3a:	f7fe fdb7 	bl	80146ac <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015b3e:	f1ba 0f01 	cmp.w	sl, #1
 8015b42:	d1f2      	bne.n	8015b2a <dir_find+0x272>
 8015b44:	4621      	mov	r1, r4
 8015b46:	9c01      	ldr	r4, [sp, #4]
 8015b48:	e6d2      	b.n	80158f0 <dir_find+0x38>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8015b4a:	782b      	ldrb	r3, [r5, #0]
 8015b4c:	786f      	ldrb	r7, [r5, #1]
 8015b4e:	01da      	lsls	r2, r3, #7
 8015b50:	78a8      	ldrb	r0, [r5, #2]
 8015b52:	78e9      	ldrb	r1, [r5, #3]
 8015b54:	ea42 0353 	orr.w	r3, r2, r3, lsr #1
 8015b58:	19da      	adds	r2, r3, r7
 8015b5a:	792f      	ldrb	r7, [r5, #4]
 8015b5c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8015b60:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8015b64:	fa50 f383 	uxtab	r3, r0, r3
 8015b68:	7968      	ldrb	r0, [r5, #5]
 8015b6a:	f3c3 0246 	ubfx	r2, r3, #1, #7
 8015b6e:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
 8015b72:	fa51 f283 	uxtab	r2, r1, r3
 8015b76:	79a9      	ldrb	r1, [r5, #6]
 8015b78:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8015b7c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8015b80:	fa57 f383 	uxtab	r3, r7, r3
 8015b84:	79ef      	ldrb	r7, [r5, #7]
 8015b86:	f3c3 0246 	ubfx	r2, r3, #1, #7
 8015b8a:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
 8015b8e:	fa50 f283 	uxtab	r2, r0, r3
 8015b92:	7a68      	ldrb	r0, [r5, #9]
 8015b94:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8015b98:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8015b9c:	7a2a      	ldrb	r2, [r5, #8]
 8015b9e:	fa51 f383 	uxtab	r3, r1, r3
 8015ba2:	f3c3 0146 	ubfx	r1, r3, #1, #7
 8015ba6:	ea41 13c3 	orr.w	r3, r1, r3, lsl #7
 8015baa:	fa57 f183 	uxtab	r1, r7, r3
 8015bae:	f3c1 0346 	ubfx	r3, r1, #1, #7
 8015bb2:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 8015bb6:	7aa9      	ldrb	r1, [r5, #10]
 8015bb8:	fa52 f383 	uxtab	r3, r2, r3
 8015bbc:	f3c3 0246 	ubfx	r2, r3, #1, #7
 8015bc0:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
 8015bc4:	fa50 f283 	uxtab	r2, r0, r3
 8015bc8:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8015bcc:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8015bd0:	fa51 f383 	uxtab	r3, r1, r3
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8015bd4:	b2db      	uxtb	r3, r3
 8015bd6:	4598      	cmp	r8, r3
 8015bd8:	f47f aed3 	bne.w	8015982 <dir_find+0xca>
 8015bdc:	e693      	b.n	8015906 <dir_find+0x4e>
				dp->sect = 0; return FR_NO_FILE;
 8015bde:	2300      	movs	r3, #0
 8015be0:	f04f 0904 	mov.w	r9, #4
 8015be4:	61e3      	str	r3, [r4, #28]
	} while (res == FR_OK);
 8015be6:	e68e      	b.n	8015906 <dir_find+0x4e>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8015be8:	f04f 0902 	mov.w	r9, #2
 8015bec:	e68b      	b.n	8015906 <dir_find+0x4e>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8015bee:	4617      	mov	r7, r2
 8015bf0:	e72f      	b.n	8015a52 <dir_find+0x19a>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8015bf2:	4655      	mov	r5, sl
 8015bf4:	4619      	mov	r1, r3
 8015bf6:	46a2      	mov	sl, r4
 8015bf8:	9f04      	ldr	r7, [sp, #16]
 8015bfa:	782b      	ldrb	r3, [r5, #0]
 8015bfc:	9c03      	ldr	r4, [sp, #12]
 8015bfe:	065a      	lsls	r2, r3, #25
 8015c00:	e9dd 8601 	ldrd	r8, r6, [sp, #4]
 8015c04:	d500      	bpl.n	8015c08 <dir_find+0x350>
 8015c06:	b919      	cbnz	r1, 8015c10 <dir_find+0x358>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8015c08:	3f01      	subs	r7, #1
 8015c0a:	fa5f f987 	uxtb.w	r9, r7
 8015c0e:	e692      	b.n	8015936 <dir_find+0x7e>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8015c10:	9b05      	ldr	r3, [sp, #20]
 8015c12:	f833 301a 	ldrh.w	r3, [r3, sl, lsl #1]
 8015c16:	2b00      	cmp	r3, #0
 8015c18:	d0f6      	beq.n	8015c08 <dir_find+0x350>
 8015c1a:	e773      	b.n	8015b04 <dir_find+0x24c>
 8015c1c:	08097ef8 	.word	0x08097ef8
 8015c20:	08097f05 	.word	0x08097f05

08015c24 <follow_path>:
{
 8015c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8015c28:	780b      	ldrb	r3, [r1, #0]
{
 8015c2a:	b083      	sub	sp, #12
 8015c2c:	4688      	mov	r8, r1
 8015c2e:	4607      	mov	r7, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8015c30:	2b2f      	cmp	r3, #47	; 0x2f
	FATFS *fs = obj->fs;
 8015c32:	f8d0 b000 	ldr.w	fp, [r0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8015c36:	d103      	bne.n	8015c40 <follow_path+0x1c>
 8015c38:	f818 3f01 	ldrb.w	r3, [r8, #1]!
 8015c3c:	2b2f      	cmp	r3, #47	; 0x2f
 8015c3e:	d0fb      	beq.n	8015c38 <follow_path+0x14>
 8015c40:	2b5c      	cmp	r3, #92	; 0x5c
 8015c42:	d0f9      	beq.n	8015c38 <follow_path+0x14>
		obj->sclust = 0;					/* Start from root directory */
 8015c44:	2100      	movs	r1, #0
 8015c46:	60b9      	str	r1, [r7, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8015c48:	f898 3000 	ldrb.w	r3, [r8]
 8015c4c:	2b1f      	cmp	r3, #31
 8015c4e:	f240 8156 	bls.w	8015efe <follow_path+0x2da>
 8015c52:	465a      	mov	r2, fp
		if (w < ' ') break;				/* Break if end of the path name */
 8015c54:	2b1f      	cmp	r3, #31
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8015c56:	f8d2 900c 	ldr.w	r9, [r2, #12]
		w = p[si++];					/* Get a character */
 8015c5a:	b298      	uxth	r0, r3
		if (w < ' ') break;				/* Break if end of the path name */
 8015c5c:	d929      	bls.n	8015cb2 <follow_path+0x8e>
 8015c5e:	f1a9 0a02 	sub.w	sl, r9, #2
 8015c62:	4646      	mov	r6, r8
		w = p[si++];					/* Get a character */
 8015c64:	2501      	movs	r5, #1
 8015c66:	e008      	b.n	8015c7a <follow_path+0x56>
		lfn[di++] = w;					/* Store the Unicode character */
 8015c68:	f82a 0f02 	strh.w	r0, [sl, #2]!
		w = p[si++];					/* Get a character */
 8015c6c:	1c6b      	adds	r3, r5, #1
 8015c6e:	f816 0f01 	ldrb.w	r0, [r6, #1]!
		if (w < ' ') break;				/* Break if end of the path name */
 8015c72:	281f      	cmp	r0, #31
 8015c74:	f240 8104 	bls.w	8015e80 <follow_path+0x25c>
		w = p[si++];					/* Get a character */
 8015c78:	461d      	mov	r5, r3
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8015c7a:	282f      	cmp	r0, #47	; 0x2f
 8015c7c:	f105 34ff 	add.w	r4, r5, #4294967295
 8015c80:	d01e      	beq.n	8015cc0 <follow_path+0x9c>
 8015c82:	285c      	cmp	r0, #92	; 0x5c
 8015c84:	d01c      	beq.n	8015cc0 <follow_path+0x9c>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8015c86:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8015c8a:	d00e      	beq.n	8015caa <follow_path+0x86>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8015c8c:	2101      	movs	r1, #1
 8015c8e:	f7fe fc75 	bl	801457c <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8015c92:	b150      	cbz	r0, 8015caa <follow_path+0x86>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8015c94:	287f      	cmp	r0, #127	; 0x7f
 8015c96:	d8e7      	bhi.n	8015c68 <follow_path+0x44>
	while (*str && *str != chr) str++;
 8015c98:	2322      	movs	r3, #34	; 0x22
 8015c9a:	4aad      	ldr	r2, [pc, #692]	; (8015f50 <follow_path+0x32c>)
 8015c9c:	e003      	b.n	8015ca6 <follow_path+0x82>
 8015c9e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8015ca2:	2b00      	cmp	r3, #0
 8015ca4:	d0e0      	beq.n	8015c68 <follow_path+0x44>
 8015ca6:	4298      	cmp	r0, r3
 8015ca8:	d1f9      	bne.n	8015c9e <follow_path+0x7a>
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8015caa:	2006      	movs	r0, #6
}
 8015cac:	b003      	add	sp, #12
 8015cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	lfn[di] = 0;						/* LFN is created */
 8015cb2:	2300      	movs	r3, #0
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8015cb4:	2006      	movs	r0, #6
	lfn[di] = 0;						/* LFN is created */
 8015cb6:	f8a9 3000 	strh.w	r3, [r9]
}
 8015cba:	b003      	add	sp, #12
 8015cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8015cc0:	f818 3005 	ldrb.w	r3, [r8, r5]
 8015cc4:	eb08 0205 	add.w	r2, r8, r5
 8015cc8:	2b5c      	cmp	r3, #92	; 0x5c
 8015cca:	d002      	beq.n	8015cd2 <follow_path+0xae>
 8015ccc:	2b2f      	cmp	r3, #47	; 0x2f
 8015cce:	f040 812b 	bne.w	8015f28 <follow_path+0x304>
 8015cd2:	3501      	adds	r5, #1
 8015cd4:	4445      	add	r5, r8
 8015cd6:	46a8      	mov	r8, r5
 8015cd8:	f815 3b01 	ldrb.w	r3, [r5], #1
 8015cdc:	2b2f      	cmp	r3, #47	; 0x2f
 8015cde:	d0fa      	beq.n	8015cd6 <follow_path+0xb2>
 8015ce0:	2b5c      	cmp	r3, #92	; 0x5c
 8015ce2:	d0f8      	beq.n	8015cd6 <follow_path+0xb2>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8015ce4:	2c00      	cmp	r4, #0
 8015ce6:	d0e4      	beq.n	8015cb2 <follow_path+0x8e>
 8015ce8:	2603      	movs	r6, #3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8015cea:	2500      	movs	r5, #0
 8015cec:	eb09 0244 	add.w	r2, r9, r4, lsl #1
 8015cf0:	e001      	b.n	8015cf6 <follow_path+0xd2>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8015cf2:	3c01      	subs	r4, #1
 8015cf4:	d0dd      	beq.n	8015cb2 <follow_path+0x8e>
		w = lfn[di - 1];
 8015cf6:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
 8015cfa:	2b20      	cmp	r3, #32
 8015cfc:	d0f9      	beq.n	8015cf2 <follow_path+0xce>
 8015cfe:	2b2e      	cmp	r3, #46	; 0x2e
 8015d00:	d0f7      	beq.n	8015cf2 <follow_path+0xce>
		*d++ = (BYTE)val;
 8015d02:	2320      	movs	r3, #32
 8015d04:	f04f 3220 	mov.w	r2, #538976288	; 0x20202020
	lfn[di] = 0;						/* LFN is created */
 8015d08:	2100      	movs	r1, #0
 8015d0a:	f829 1014 	strh.w	r1, [r9, r4, lsl #1]
		*d++ = (BYTE)val;
 8015d0e:	627a      	str	r2, [r7, #36]	; 0x24
 8015d10:	62ba      	str	r2, [r7, #40]	; 0x28
 8015d12:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8015d16:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8015d1a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8015d1e:	f8b9 0000 	ldrh.w	r0, [r9]
 8015d22:	282e      	cmp	r0, #46	; 0x2e
 8015d24:	d002      	beq.n	8015d2c <follow_path+0x108>
 8015d26:	4298      	cmp	r0, r3
 8015d28:	f040 80f2 	bne.w	8015f10 <follow_path+0x2ec>
 8015d2c:	464a      	mov	r2, r9
 8015d2e:	2300      	movs	r3, #0
 8015d30:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 8015d34:	461d      	mov	r5, r3
 8015d36:	3301      	adds	r3, #1
 8015d38:	2820      	cmp	r0, #32
 8015d3a:	d0f9      	beq.n	8015d30 <follow_path+0x10c>
 8015d3c:	282e      	cmp	r0, #46	; 0x2e
 8015d3e:	d0f7      	beq.n	8015d30 <follow_path+0x10c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8015d40:	3502      	adds	r5, #2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8015d42:	eb09 0344 	add.w	r3, r9, r4, lsl #1
 8015d46:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
 8015d4a:	2a2e      	cmp	r2, #46	; 0x2e
 8015d4c:	d001      	beq.n	8015d52 <follow_path+0x12e>
 8015d4e:	3c01      	subs	r4, #1
 8015d50:	d1f9      	bne.n	8015d46 <follow_path+0x122>
		if (!w) break;					/* Break on end of the LFN */
 8015d52:	2800      	cmp	r0, #0
 8015d54:	d03a      	beq.n	8015dcc <follow_path+0x1a8>
 8015d56:	2300      	movs	r3, #0
 8015d58:	2208      	movs	r2, #8
 8015d5a:	4641      	mov	r1, r8
 8015d5c:	469a      	mov	sl, r3
 8015d5e:	4698      	mov	r8, r3
 8015d60:	465b      	mov	r3, fp
 8015d62:	46bb      	mov	fp, r7
 8015d64:	464f      	mov	r7, r9
 8015d66:	4691      	mov	r9, r2
 8015d68:	460a      	mov	r2, r1
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8015d6a:	2820      	cmp	r0, #32
 8015d6c:	d003      	beq.n	8015d76 <follow_path+0x152>
 8015d6e:	282e      	cmp	r0, #46	; 0x2e
 8015d70:	d155      	bne.n	8015e1e <follow_path+0x1fa>
 8015d72:	42ac      	cmp	r4, r5
 8015d74:	d053      	beq.n	8015e1e <follow_path+0x1fa>
			cf |= NS_LOSS | NS_LFN; continue;
 8015d76:	f046 0603 	orr.w	r6, r6, #3
 8015d7a:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN character */
 8015d7c:	f837 0015 	ldrh.w	r0, [r7, r5, lsl #1]
 8015d80:	3501      	adds	r5, #1
		if (!w) break;					/* Break on end of the LFN */
 8015d82:	2800      	cmp	r0, #0
 8015d84:	d1f1      	bne.n	8015d6a <follow_path+0x146>
 8015d86:	465f      	mov	r7, fp
 8015d88:	469b      	mov	fp, r3
 8015d8a:	4643      	mov	r3, r8
 8015d8c:	4690      	mov	r8, r2
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8015d8e:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8015d92:	464a      	mov	r2, r9
 8015d94:	29e5      	cmp	r1, #229	; 0xe5
 8015d96:	d102      	bne.n	8015d9e <follow_path+0x17a>
 8015d98:	2105      	movs	r1, #5
 8015d9a:	f887 1024 	strb.w	r1, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
 8015d9e:	2a08      	cmp	r2, #8
 8015da0:	f000 809c 	beq.w	8015edc <follow_path+0x2b8>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8015da4:	f003 020c 	and.w	r2, r3, #12
 8015da8:	2a0c      	cmp	r2, #12
 8015daa:	d06e      	beq.n	8015e8a <follow_path+0x266>
 8015dac:	f003 0303 	and.w	r3, r3, #3
 8015db0:	2b03      	cmp	r3, #3
 8015db2:	d06a      	beq.n	8015e8a <follow_path+0x266>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8015db4:	07b1      	lsls	r1, r6, #30
 8015db6:	d409      	bmi.n	8015dcc <follow_path+0x1a8>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8015db8:	2b01      	cmp	r3, #1
 8015dba:	d102      	bne.n	8015dc2 <follow_path+0x19e>
 8015dbc:	f046 0610 	orr.w	r6, r6, #16
 8015dc0:	b2f6      	uxtb	r6, r6
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8015dc2:	2a04      	cmp	r2, #4
 8015dc4:	d102      	bne.n	8015dcc <follow_path+0x1a8>
 8015dc6:	f046 0608 	orr.w	r6, r6, #8
 8015dca:	b2f6      	uxtb	r6, r6
			res = dir_find(dp);				/* Find an object with the segment name */
 8015dcc:	4638      	mov	r0, r7
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8015dce:	f887 602f 	strb.w	r6, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 8015dd2:	f7ff fd71 	bl	80158b8 <dir_find>
			ns = dp->fn[NSFLAG];
 8015dd6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 8015dda:	2800      	cmp	r0, #0
 8015ddc:	d161      	bne.n	8015ea2 <follow_path+0x27e>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8015dde:	075a      	lsls	r2, r3, #29
 8015de0:	f53f af64 	bmi.w	8015cac <follow_path+0x88>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8015de4:	79bb      	ldrb	r3, [r7, #6]
 8015de6:	06db      	lsls	r3, r3, #27
 8015de8:	f140 80a0 	bpl.w	8015f2c <follow_path+0x308>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8015dec:	697a      	ldr	r2, [r7, #20]
 8015dee:	f10b 0334 	add.w	r3, fp, #52	; 0x34
	if (fs->fs_type == FS_FAT32) {
 8015df2:	f89b 1000 	ldrb.w	r1, [fp]
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8015df6:	f3c2 0208 	ubfx	r2, r2, #0, #9
	if (fs->fs_type == FS_FAT32) {
 8015dfa:	2903      	cmp	r1, #3
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8015dfc:	4413      	add	r3, r2
	rv = rv << 8 | ptr[0];
 8015dfe:	7ed8      	ldrb	r0, [r3, #27]
 8015e00:	7e9a      	ldrb	r2, [r3, #26]
	cl = ld_word(dir + DIR_FstClusLO);
 8015e02:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (fs->fs_type == FS_FAT32) {
 8015e06:	d105      	bne.n	8015e14 <follow_path+0x1f0>
	rv = rv << 8 | ptr[0];
 8015e08:	7d59      	ldrb	r1, [r3, #21]
 8015e0a:	7d1b      	ldrb	r3, [r3, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8015e0c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8015e10:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8015e14:	60ba      	str	r2, [r7, #8]
		for (;;) {
 8015e16:	683a      	ldr	r2, [r7, #0]
 8015e18:	f898 3000 	ldrb.w	r3, [r8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8015e1c:	e71a      	b.n	8015c54 <follow_path+0x30>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8015e1e:	45d1      	cmp	r9, sl
 8015e20:	d91b      	bls.n	8015e5a <follow_path+0x236>
 8015e22:	1b61      	subs	r1, r4, r5
 8015e24:	fab1 f181 	clz	r1, r1
 8015e28:	0949      	lsrs	r1, r1, #5
 8015e2a:	b9b1      	cbnz	r1, 8015e5a <follow_path+0x236>
		if (w >= 0x80) {				/* Non ASCII character */
 8015e2c:	287f      	cmp	r0, #127	; 0x7f
 8015e2e:	d840      	bhi.n	8015eb2 <follow_path+0x28e>
	while (*str && *str != chr) str++;
 8015e30:	212b      	movs	r1, #43	; 0x2b
 8015e32:	f8df c124 	ldr.w	ip, [pc, #292]	; 8015f58 <follow_path+0x334>
 8015e36:	e003      	b.n	8015e40 <follow_path+0x21c>
 8015e38:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
 8015e3c:	2900      	cmp	r1, #0
 8015e3e:	d056      	beq.n	8015eee <follow_path+0x2ca>
 8015e40:	4281      	cmp	r1, r0
 8015e42:	d1f9      	bne.n	8015e38 <follow_path+0x214>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8015e44:	f046 0603 	orr.w	r6, r6, #3
 8015e48:	205f      	movs	r0, #95	; 0x5f
 8015e4a:	b2f6      	uxtb	r6, r6
		dp->fn[i++] = (BYTE)w;
 8015e4c:	eb0b 010a 	add.w	r1, fp, sl
 8015e50:	f10a 0a01 	add.w	sl, sl, #1
 8015e54:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
 8015e58:	e790      	b.n	8015d7c <follow_path+0x158>
			if (ni == 11) {				/* Long extension */
 8015e5a:	f1b9 0f0b 	cmp.w	r9, #11
 8015e5e:	d067      	beq.n	8015f30 <follow_path+0x30c>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8015e60:	42ac      	cmp	r4, r5
 8015e62:	d003      	beq.n	8015e6c <follow_path+0x248>
 8015e64:	f046 0603 	orr.w	r6, r6, #3
 8015e68:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
 8015e6a:	d38c      	bcc.n	8015d86 <follow_path+0x162>
			b <<= 2; continue;
 8015e6c:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8015e70:	4625      	mov	r5, r4
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8015e72:	f04f 090b 	mov.w	r9, #11
 8015e76:	f04f 0a08 	mov.w	sl, #8
			b <<= 2; continue;
 8015e7a:	fa5f f888 	uxtb.w	r8, r8
 8015e7e:	e77d      	b.n	8015d7c <follow_path+0x158>
	*path = &p[si];						/* Return pointer to the next segment */
 8015e80:	462c      	mov	r4, r5
 8015e82:	4498      	add	r8, r3
 8015e84:	2607      	movs	r6, #7
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8015e86:	2504      	movs	r5, #4
 8015e88:	e730      	b.n	8015cec <follow_path+0xc8>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8015e8a:	f046 0602 	orr.w	r6, r6, #2
			res = dir_find(dp);				/* Find an object with the segment name */
 8015e8e:	4638      	mov	r0, r7
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8015e90:	b2f6      	uxtb	r6, r6
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8015e92:	f887 602f 	strb.w	r6, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 8015e96:	f7ff fd0f 	bl	80158b8 <dir_find>
			ns = dp->fn[NSFLAG];
 8015e9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 8015e9e:	2800      	cmp	r0, #0
 8015ea0:	d09d      	beq.n	8015dde <follow_path+0x1ba>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8015ea2:	2804      	cmp	r0, #4
 8015ea4:	f47f af02 	bne.w	8015cac <follow_path+0x88>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8015ea8:	f013 0f04 	tst.w	r3, #4
 8015eac:	bf08      	it	eq
 8015eae:	2005      	moveq	r0, #5
 8015eb0:	e6fc      	b.n	8015cac <follow_path+0x88>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8015eb2:	e9cd 3200 	strd	r3, r2, [sp]
 8015eb6:	f7fe fb61 	bl	801457c <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8015eba:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015ebe:	b918      	cbnz	r0, 8015ec8 <follow_path+0x2a4>
			cf |= NS_LFN;				/* Force create LFN entry */
 8015ec0:	f046 0602 	orr.w	r6, r6, #2
 8015ec4:	b2f6      	uxtb	r6, r6
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8015ec6:	e7bd      	b.n	8015e44 <follow_path+0x220>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8015ec8:	4922      	ldr	r1, [pc, #136]	; (8015f54 <follow_path+0x330>)
			cf |= NS_LFN;				/* Force create LFN entry */
 8015eca:	f046 0602 	orr.w	r6, r6, #2
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8015ece:	4408      	add	r0, r1
			cf |= NS_LFN;				/* Force create LFN entry */
 8015ed0:	b2f6      	uxtb	r6, r6
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8015ed2:	f810 0c80 	ldrb.w	r0, [r0, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8015ed6:	2800      	cmp	r0, #0
 8015ed8:	d0b4      	beq.n	8015e44 <follow_path+0x220>
 8015eda:	e7a9      	b.n	8015e30 <follow_path+0x20c>
	if (ni == 8) b <<= 2;
 8015edc:	009b      	lsls	r3, r3, #2
 8015ede:	f003 020c 	and.w	r2, r3, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8015ee2:	2a0c      	cmp	r2, #12
 8015ee4:	d0d1      	beq.n	8015e8a <follow_path+0x266>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8015ee6:	07b0      	lsls	r0, r6, #30
 8015ee8:	f57f af6b 	bpl.w	8015dc2 <follow_path+0x19e>
 8015eec:	e76e      	b.n	8015dcc <follow_path+0x1a8>
				if (IsUpper(w)) {		/* ASCII large capital */
 8015eee:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 8015ef2:	2919      	cmp	r1, #25
 8015ef4:	d80f      	bhi.n	8015f16 <follow_path+0x2f2>
					b |= 2;
 8015ef6:	f048 0802 	orr.w	r8, r8, #2
 8015efa:	b2c0      	uxtb	r0, r0
 8015efc:	e7a6      	b.n	8015e4c <follow_path+0x228>
		dp->fn[NSFLAG] = NS_NONAME;
 8015efe:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 8015f00:	4638      	mov	r0, r7
		dp->fn[NSFLAG] = NS_NONAME;
 8015f02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
}
 8015f06:	b003      	add	sp, #12
 8015f08:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 8015f0c:	f7ff bc0e 	b.w	801572c <dir_sdi>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8015f10:	462e      	mov	r6, r5
 8015f12:	2501      	movs	r5, #1
 8015f14:	e715      	b.n	8015d42 <follow_path+0x11e>
					if (IsLower(w)) {	/* ASCII small capital */
 8015f16:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 8015f1a:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 8015f1c:	bf9c      	itt	ls
 8015f1e:	3820      	subls	r0, #32
 8015f20:	f048 0801 	orrls.w	r8, r8, #1
 8015f24:	b2c0      	uxtb	r0, r0
 8015f26:	e791      	b.n	8015e4c <follow_path+0x228>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8015f28:	4690      	mov	r8, r2
 8015f2a:	e6db      	b.n	8015ce4 <follow_path+0xc0>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8015f2c:	2005      	movs	r0, #5
 8015f2e:	e6bd      	b.n	8015cac <follow_path+0x88>
 8015f30:	465f      	mov	r7, fp
 8015f32:	469b      	mov	fp, r3
 8015f34:	4643      	mov	r3, r8
 8015f36:	4690      	mov	r8, r2
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8015f38:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
				cf |= NS_LOSS | NS_LFN; break;
 8015f3c:	f046 0603 	orr.w	r6, r6, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8015f40:	2ae5      	cmp	r2, #229	; 0xe5
				cf |= NS_LOSS | NS_LFN; break;
 8015f42:	b2f6      	uxtb	r6, r6
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8015f44:	f47f af2e 	bne.w	8015da4 <follow_path+0x180>
 8015f48:	2205      	movs	r2, #5
 8015f4a:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
 8015f4e:	e729      	b.n	8015da4 <follow_path+0x180>
 8015f50:	08097e64 	.word	0x08097e64
 8015f54:	08097e78 	.word	0x08097e78
 8015f58:	08097e70 	.word	0x08097e70

08015f5c <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8015f5c:	2901      	cmp	r1, #1
{
 8015f5e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = obj->fs;
 8015f62:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8015f64:	d90f      	bls.n	8015f86 <remove_chain+0x2a>
 8015f66:	69ab      	ldr	r3, [r5, #24]
 8015f68:	460c      	mov	r4, r1
 8015f6a:	428b      	cmp	r3, r1
 8015f6c:	d90b      	bls.n	8015f86 <remove_chain+0x2a>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8015f6e:	4606      	mov	r6, r0
 8015f70:	b962      	cbnz	r2, 8015f8c <remove_chain+0x30>
 8015f72:	462f      	mov	r7, r5
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8015f74:	429c      	cmp	r4, r3
 8015f76:	d206      	bcs.n	8015f86 <remove_chain+0x2a>
		switch (fs->fs_type) {
 8015f78:	783b      	ldrb	r3, [r7, #0]
 8015f7a:	2b02      	cmp	r3, #2
 8015f7c:	d07a      	beq.n	8016074 <remove_chain+0x118>
 8015f7e:	2b03      	cmp	r3, #3
 8015f80:	d05e      	beq.n	8016040 <remove_chain+0xe4>
 8015f82:	2b01      	cmp	r3, #1
 8015f84:	d011      	beq.n	8015faa <remove_chain+0x4e>
 8015f86:	2002      	movs	r0, #2
}
 8015f88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8015f8c:	4293      	cmp	r3, r2
 8015f8e:	d9fa      	bls.n	8015f86 <remove_chain+0x2a>
 8015f90:	2a01      	cmp	r2, #1
 8015f92:	d9f8      	bls.n	8015f86 <remove_chain+0x2a>
 8015f94:	4611      	mov	r1, r2
 8015f96:	4628      	mov	r0, r5
 8015f98:	f04f 32ff 	mov.w	r2, #4294967295
 8015f9c:	f7fe fc64 	bl	8014868 <put_fat.part.0>
		if (res != FR_OK) return res;
 8015fa0:	2800      	cmp	r0, #0
 8015fa2:	d1f1      	bne.n	8015f88 <remove_chain+0x2c>
 8015fa4:	6837      	ldr	r7, [r6, #0]
 8015fa6:	69bb      	ldr	r3, [r7, #24]
 8015fa8:	e7e4      	b.n	8015f74 <remove_chain+0x18>
			bc = (UINT)clst; bc += bc / 2;
 8015faa:	eb04 0854 	add.w	r8, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8015fb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015fb2:	eb03 2158 	add.w	r1, r3, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8015fb6:	4291      	cmp	r1, r2
 8015fb8:	d006      	beq.n	8015fc8 <remove_chain+0x6c>
 8015fba:	4638      	mov	r0, r7
 8015fbc:	f7fe fc1a 	bl	80147f4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015fc0:	2800      	cmp	r0, #0
 8015fc2:	d16c      	bne.n	801609e <remove_chain+0x142>
 8015fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 8015fc8:	f3c8 0008 	ubfx	r0, r8, #0, #9
 8015fcc:	f108 0801 	add.w	r8, r8, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015fd0:	eb03 2158 	add.w	r1, r3, r8, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 8015fd4:	4438      	add	r0, r7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8015fd6:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 8015fd8:	f890 9034 	ldrb.w	r9, [r0, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8015fdc:	d004      	beq.n	8015fe8 <remove_chain+0x8c>
 8015fde:	4638      	mov	r0, r7
 8015fe0:	f7fe fc08 	bl	80147f4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015fe4:	2800      	cmp	r0, #0
 8015fe6:	d15a      	bne.n	801609e <remove_chain+0x142>
			wc |= fs->win[bc % SS(fs)] << 8;
 8015fe8:	f3c8 0808 	ubfx	r8, r8, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8015fec:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8015fee:	4447      	add	r7, r8
 8015ff0:	f897 8034 	ldrb.w	r8, [r7, #52]	; 0x34
 8015ff4:	ea49 2808 	orr.w	r8, r9, r8, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8015ff8:	d553      	bpl.n	80160a2 <remove_chain+0x146>
 8015ffa:	ea4f 1818 	mov.w	r8, r8, lsr #4
		if (nxt == 0) break;				/* Empty cluster? */
 8015ffe:	f1b8 0f00 	cmp.w	r8, #0
 8016002:	d051      	beq.n	80160a8 <remove_chain+0x14c>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8016004:	f1b8 0f01 	cmp.w	r8, #1
 8016008:	d0bd      	beq.n	8015f86 <remove_chain+0x2a>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801600a:	69ab      	ldr	r3, [r5, #24]
 801600c:	42a3      	cmp	r3, r4
 801600e:	d9ba      	bls.n	8015f86 <remove_chain+0x2a>
 8016010:	4621      	mov	r1, r4
 8016012:	2200      	movs	r2, #0
 8016014:	4628      	mov	r0, r5
 8016016:	f7fe fc27 	bl	8014868 <put_fat.part.0>
			if (res != FR_OK) return res;
 801601a:	2800      	cmp	r0, #0
 801601c:	d1b4      	bne.n	8015f88 <remove_chain+0x2c>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801601e:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
 8016022:	1e91      	subs	r1, r2, #2
 8016024:	428b      	cmp	r3, r1
 8016026:	d205      	bcs.n	8016034 <remove_chain+0xd8>
			fs->fsi_flag |= 1;
 8016028:	7929      	ldrb	r1, [r5, #4]
			fs->free_clst++;
 801602a:	3301      	adds	r3, #1
			fs->fsi_flag |= 1;
 801602c:	f041 0101 	orr.w	r1, r1, #1
			fs->free_clst++;
 8016030:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
 8016032:	7129      	strb	r1, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8016034:	4542      	cmp	r2, r8
 8016036:	d937      	bls.n	80160a8 <remove_chain+0x14c>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8016038:	6837      	ldr	r7, [r6, #0]
 801603a:	4644      	mov	r4, r8
 801603c:	69bb      	ldr	r3, [r7, #24]
 801603e:	e799      	b.n	8015f74 <remove_chain+0x18>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8016040:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8016042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8016044:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8016048:	4299      	cmp	r1, r3
 801604a:	d003      	beq.n	8016054 <remove_chain+0xf8>
 801604c:	4638      	mov	r0, r7
 801604e:	f7fe fbd1 	bl	80147f4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8016052:	bb20      	cbnz	r0, 801609e <remove_chain+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8016054:	00a3      	lsls	r3, r4, #2
 8016056:	3734      	adds	r7, #52	; 0x34
 8016058:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801605c:	18fa      	adds	r2, r7, r3
	rv = rv << 8 | ptr[0];
 801605e:	f817 8003 	ldrb.w	r8, [r7, r3]
	rv = rv << 8 | ptr[2];
 8016062:	8851      	ldrh	r1, [r2, #2]
	rv = rv << 8 | ptr[1];
 8016064:	7853      	ldrb	r3, [r2, #1]
 8016066:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 801606a:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801606e:	f028 4870 	bic.w	r8, r8, #4026531840	; 0xf0000000
			break;
 8016072:	e7c4      	b.n	8015ffe <remove_chain+0xa2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8016074:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8016076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8016078:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 801607c:	4299      	cmp	r1, r3
 801607e:	d003      	beq.n	8016088 <remove_chain+0x12c>
 8016080:	4638      	mov	r0, r7
 8016082:	f7fe fbb7 	bl	80147f4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8016086:	b950      	cbnz	r0, 801609e <remove_chain+0x142>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8016088:	0063      	lsls	r3, r4, #1
 801608a:	3734      	adds	r7, #52	; 0x34
 801608c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8016090:	18fa      	adds	r2, r7, r3
	rv = rv << 8 | ptr[0];
 8016092:	f817 8003 	ldrb.w	r8, [r7, r3]
 8016096:	7853      	ldrb	r3, [r2, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8016098:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
			break;
 801609c:	e7af      	b.n	8015ffe <remove_chain+0xa2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801609e:	2001      	movs	r0, #1
 80160a0:	e772      	b.n	8015f88 <remove_chain+0x2c>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80160a2:	f3c8 080b 	ubfx	r8, r8, #0, #12
 80160a6:	e7aa      	b.n	8015ffe <remove_chain+0xa2>
	return FR_OK;
 80160a8:	2000      	movs	r0, #0
 80160aa:	e76d      	b.n	8015f88 <remove_chain+0x2c>

080160ac <dir_register>:
{
 80160ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80160b0:	f890 502f 	ldrb.w	r5, [r0, #47]	; 0x2f
{
 80160b4:	b091      	sub	sp, #68	; 0x44
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80160b6:	f015 05a0 	ands.w	r5, r5, #160	; 0xa0
 80160ba:	f040 8334 	bne.w	8016726 <dir_register+0x67a>
	FATFS *fs = dp->obj.fs;
 80160be:	6803      	ldr	r3, [r0, #0]
 80160c0:	4681      	mov	r9, r0
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80160c2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
	FATFS *fs = dp->obj.fs;
 80160c6:	9300      	str	r3, [sp, #0]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80160c8:	f8bc 3000 	ldrh.w	r3, [ip]
 80160cc:	2b00      	cmp	r3, #0
 80160ce:	f000 8348 	beq.w	8016762 <dir_register+0x6b6>
 80160d2:	4663      	mov	r3, ip
 80160d4:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 80160d8:	3501      	adds	r5, #1
 80160da:	2a00      	cmp	r2, #0
 80160dc:	d1fa      	bne.n	80160d4 <dir_register+0x28>
	mem_cpy(sn, dp->fn, 12);
 80160de:	f109 0a24 	add.w	sl, r9, #36	; 0x24
	if (cnt) {
 80160e2:	ab10      	add	r3, sp, #64	; 0x40
 80160e4:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 80160e8:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80160ec:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
 80160f0:	07d9      	lsls	r1, r3, #31
 80160f2:	9308      	str	r3, [sp, #32]
 80160f4:	f100 809a 	bmi.w	801622c <dir_register+0x180>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80160f8:	f013 0302 	ands.w	r3, r3, #2
 80160fc:	9f00      	ldr	r7, [sp, #0]
 80160fe:	f000 82ba 	beq.w	8016676 <dir_register+0x5ca>
 8016102:	4b74      	ldr	r3, [pc, #464]	; (80162d4 <dir_register+0x228>)
 8016104:	350c      	adds	r5, #12
	res = dir_sdi(dp, 0);
 8016106:	2100      	movs	r1, #0
 8016108:	4648      	mov	r0, r9
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801610a:	fba3 3505 	umull	r3, r5, r3, r5
 801610e:	08ab      	lsrs	r3, r5, #2
 8016110:	9301      	str	r3, [sp, #4]
 8016112:	3301      	adds	r3, #1
 8016114:	461c      	mov	r4, r3
	res = dir_sdi(dp, 0);
 8016116:	f7ff fb09 	bl	801572c <dir_sdi>
	if (res == FR_OK) {
 801611a:	4683      	mov	fp, r0
 801611c:	2800      	cmp	r0, #0
 801611e:	f040 82b5 	bne.w	801668c <dir_register+0x5e0>
						fs->wflag = 1;
 8016122:	f8cd a00c 	str.w	sl, [sp, #12]
		n = 0;
 8016126:	4680      	mov	r8, r0
 8016128:	f8d9 101c 	ldr.w	r1, [r9, #28]
						fs->wflag = 1;
 801612c:	46a3      	mov	fp, r4
 801612e:	46ba      	mov	sl, r7
 8016130:	9002      	str	r0, [sp, #8]
 8016132:	e029      	b.n	8016188 <dir_register+0xdc>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8016134:	fab3 f283 	clz	r2, r3
 8016138:	0952      	lsrs	r2, r2, #5
 801613a:	b3a3      	cbz	r3, 80161a6 <dir_register+0xfa>
				n = 0;					/* Not a blank entry. Restart to search */
 801613c:	4690      	mov	r8, r2
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801613e:	f8d9 4014 	ldr.w	r4, [r9, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8016142:	f8d9 101c 	ldr.w	r1, [r9, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8016146:	3420      	adds	r4, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8016148:	f5b4 1f00 	cmp.w	r4, #2097152	; 0x200000
 801614c:	f080 82a1 	bcs.w	8016692 <dir_register+0x5e6>
 8016150:	2900      	cmp	r1, #0
 8016152:	f000 829e 	beq.w	8016692 <dir_register+0x5e6>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8016156:	f3c4 0708 	ubfx	r7, r4, #0, #9
	FATFS *fs = dp->obj.fs;
 801615a:	f8d9 6000 	ldr.w	r6, [r9]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801615e:	b967      	cbnz	r7, 801617a <dir_register+0xce>
		dp->sect++;				/* Next sector */
 8016160:	3101      	adds	r1, #1
		if (!dp->clust) {		/* Static table */
 8016162:	f8d9 3018 	ldr.w	r3, [r9, #24]
		dp->sect++;				/* Next sector */
 8016166:	f8c9 101c 	str.w	r1, [r9, #28]
		if (!dp->clust) {		/* Static table */
 801616a:	2b00      	cmp	r3, #0
 801616c:	f040 82ab 	bne.w	80166c6 <dir_register+0x61a>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8016170:	8932      	ldrh	r2, [r6, #8]
 8016172:	ebb2 1f54 	cmp.w	r2, r4, lsr #5
 8016176:	f240 82f1 	bls.w	801675c <dir_register+0x6b0>
 801617a:	f106 0534 	add.w	r5, r6, #52	; 0x34
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801617e:	443d      	add	r5, r7
	dp->dptr = ofs;						/* Current entry */
 8016180:	f8c9 4014 	str.w	r4, [r9, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8016184:	f8c9 5020 	str.w	r5, [r9, #32]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8016188:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
 801618c:	428b      	cmp	r3, r1
 801618e:	d005      	beq.n	801619c <dir_register+0xf0>
 8016190:	4650      	mov	r0, sl
 8016192:	f7fe fb2f 	bl	80147f4 <move_window.part.0>
			if (res != FR_OK) break;
 8016196:	2800      	cmp	r0, #0
 8016198:	f040 82e5 	bne.w	8016766 <dir_register+0x6ba>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801619c:	f8d9 3020 	ldr.w	r3, [r9, #32]
 80161a0:	781b      	ldrb	r3, [r3, #0]
 80161a2:	2be5      	cmp	r3, #229	; 0xe5
 80161a4:	d1c6      	bne.n	8016134 <dir_register+0x88>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80161a6:	f108 0801 	add.w	r8, r8, #1
 80161aa:	45c3      	cmp	fp, r8
 80161ac:	d1c7      	bne.n	801613e <dir_register+0x92>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80161ae:	9b01      	ldr	r3, [sp, #4]
 80161b0:	e9dd ba02 	ldrd	fp, sl, [sp, #8]
 80161b4:	2b00      	cmp	r3, #0
 80161b6:	f040 82bc 	bne.w	8016732 <dir_register+0x686>
	if (sector != fs->winsect) {	/* Window offset changed? */
 80161ba:	9b00      	ldr	r3, [sp, #0]
		res = move_window(fs, dp->sect);
 80161bc:	f8d9 101c 	ldr.w	r1, [r9, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
 80161c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80161c2:	4299      	cmp	r1, r3
 80161c4:	d005      	beq.n	80161d2 <dir_register+0x126>
 80161c6:	9800      	ldr	r0, [sp, #0]
 80161c8:	f7fe fb14 	bl	80147f4 <move_window.part.0>
		if (res == FR_OK) {
 80161cc:	2800      	cmp	r0, #0
 80161ce:	f040 82ba 	bne.w	8016746 <dir_register+0x69a>
	BYTE *d = (BYTE*)dst;
 80161d2:	2220      	movs	r2, #32
 80161d4:	2100      	movs	r1, #0
 80161d6:	f8d9 0020 	ldr.w	r0, [r9, #32]
 80161da:	f00e fe2f 	bl	8024e3c <memset>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80161de:	f8d9 3020 	ldr.w	r3, [r9, #32]
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80161e2:	1d1a      	adds	r2, r3, #4
 80161e4:	4592      	cmp	sl, r2
 80161e6:	d204      	bcs.n	80161f2 <dir_register+0x146>
 80161e8:	f109 0228 	add.w	r2, r9, #40	; 0x28
 80161ec:	4293      	cmp	r3, r2
 80161ee:	f0c0 8489 	bcc.w	8016b04 <dir_register+0xa58>
			*d++ = *s++;
 80161f2:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 80161f6:	601a      	str	r2, [r3, #0]
 80161f8:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 80161fc:	605a      	str	r2, [r3, #4]
 80161fe:	f899 202c 	ldrb.w	r2, [r9, #44]	; 0x2c
}
 8016202:	4658      	mov	r0, fp
			*d++ = *s++;
 8016204:	721a      	strb	r2, [r3, #8]
 8016206:	f899 202d 	ldrb.w	r2, [r9, #45]	; 0x2d
 801620a:	725a      	strb	r2, [r3, #9]
 801620c:	f899 202e 	ldrb.w	r2, [r9, #46]	; 0x2e
 8016210:	729a      	strb	r2, [r3, #10]
			fs->wflag = 1;
 8016212:	2201      	movs	r2, #1
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8016214:	f899 302f 	ldrb.w	r3, [r9, #47]	; 0x2f
 8016218:	f8d9 1020 	ldr.w	r1, [r9, #32]
 801621c:	f003 0318 	and.w	r3, r3, #24
 8016220:	730b      	strb	r3, [r1, #12]
			fs->wflag = 1;
 8016222:	9b00      	ldr	r3, [sp, #0]
 8016224:	70da      	strb	r2, [r3, #3]
}
 8016226:	b011      	add	sp, #68	; 0x44
 8016228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 801622c:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8016230:	2340      	movs	r3, #64	; 0x40
 8016232:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
		for (n = 1; n < 100; n++) {
 8016236:	2701      	movs	r7, #1
 8016238:	9201      	str	r2, [sp, #4]
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801623a:	f04f 0820 	mov.w	r8, #32
 801623e:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8016242:	468b      	mov	fp, r1
 8016244:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
 8016248:	9204      	str	r2, [sp, #16]
 801624a:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 801624e:	9509      	str	r5, [sp, #36]	; 0x24
 8016250:	4605      	mov	r5, r0
 8016252:	9203      	str	r2, [sp, #12]
 8016254:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
 8016258:	f89d 603e 	ldrb.w	r6, [sp, #62]	; 0x3e
 801625c:	9202      	str	r2, [sp, #8]
 801625e:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
				if (sr & 0x10000) sr ^= 0x11021;
 8016262:	4c1d      	ldr	r4, [pc, #116]	; (80162d8 <dir_register+0x22c>)
 8016264:	9207      	str	r2, [sp, #28]
 8016266:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 801626a:	f889 302f 	strb.w	r3, [r9, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 801626e:	9206      	str	r2, [sp, #24]
 8016270:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8016274:	9205      	str	r2, [sp, #20]
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8016276:	4662      	mov	r2, ip
			*d++ = *s++;
 8016278:	9801      	ldr	r0, [sp, #4]
 801627a:	2100      	movs	r1, #0
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 801627c:	2f05      	cmp	r7, #5
			*d++ = *s++;
 801627e:	f889 602e 	strb.w	r6, [r9, #46]	; 0x2e
 8016282:	f8a9 002c 	strh.w	r0, [r9, #44]	; 0x2c
 8016286:	460b      	mov	r3, r1
 8016288:	9804      	ldr	r0, [sp, #16]
 801628a:	f360 0107 	bfi	r1, r0, #0, #8
 801628e:	9806      	ldr	r0, [sp, #24]
 8016290:	f360 0307 	bfi	r3, r0, #0, #8
 8016294:	9803      	ldr	r0, [sp, #12]
 8016296:	f360 210f 	bfi	r1, r0, #8, #8
 801629a:	9805      	ldr	r0, [sp, #20]
 801629c:	f360 230f 	bfi	r3, r0, #8, #8
 80162a0:	9802      	ldr	r0, [sp, #8]
 80162a2:	f36b 4317 	bfi	r3, fp, #16, #8
 80162a6:	f360 4117 	bfi	r1, r0, #16, #8
 80162aa:	9807      	ldr	r0, [sp, #28]
 80162ac:	f365 631f 	bfi	r3, r5, #24, #8
 80162b0:	f360 611f 	bfi	r1, r0, #24, #8
 80162b4:	e9c9 1309 	strd	r1, r3, [r9, #36]	; 0x24
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80162b8:	f240 8158 	bls.w	801656c <dir_register+0x4c0>
		while (*lfn) {	/* Create a CRC */
 80162bc:	8813      	ldrh	r3, [r2, #0]
 80162be:	2b00      	cmp	r3, #0
 80162c0:	f000 8154 	beq.w	801656c <dir_register+0x4c0>
				sr = (sr << 1) + (wc & 1);
 80162c4:	f003 0101 	and.w	r1, r3, #1
 80162c8:	4694      	mov	ip, r2
				wc >>= 1;
 80162ca:	0858      	lsrs	r0, r3, #1
				sr = (sr << 1) + (wc & 1);
 80162cc:	eb01 0147 	add.w	r1, r1, r7, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80162d0:	e00c      	b.n	80162ec <dir_register+0x240>
 80162d2:	bf00      	nop
 80162d4:	4ec4ec4f 	.word	0x4ec4ec4f
 80162d8:	00011021 	.word	0x00011021
				sr = (sr << 1) + (wc & 1);
 80162dc:	f003 0101 	and.w	r1, r3, #1
				wc >>= 1;
 80162e0:	0858      	lsrs	r0, r3, #1
				sr = (sr << 1) + (wc & 1);
 80162e2:	eb01 0142 	add.w	r1, r1, r2, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80162e6:	0412      	lsls	r2, r2, #16
 80162e8:	bf48      	it	mi
 80162ea:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 80162ec:	f000 0001 	and.w	r0, r0, #1
				wc >>= 1;
 80162f0:	089a      	lsrs	r2, r3, #2
				sr = (sr << 1) + (wc & 1);
 80162f2:	eb00 0041 	add.w	r0, r0, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80162f6:	0409      	lsls	r1, r1, #16
				sr = (sr << 1) + (wc & 1);
 80162f8:	f002 0101 	and.w	r1, r2, #1
				wc >>= 1;
 80162fc:	ea4f 02d3 	mov.w	r2, r3, lsr #3
				if (sr & 0x10000) sr ^= 0x11021;
 8016300:	bf48      	it	mi
 8016302:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 8016304:	f002 0201 	and.w	r2, r2, #1
 8016308:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 801630c:	0400      	lsls	r0, r0, #16
				wc >>= 1;
 801630e:	ea4f 1013 	mov.w	r0, r3, lsr #4
				if (sr & 0x10000) sr ^= 0x11021;
 8016312:	bf48      	it	mi
 8016314:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 8016316:	f000 0001 	and.w	r0, r0, #1
 801631a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 801631e:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 8016320:	ea4f 1153 	mov.w	r1, r3, lsr #5
				if (sr & 0x10000) sr ^= 0x11021;
 8016324:	bf48      	it	mi
 8016326:	4062      	eormi	r2, r4
				sr = (sr << 1) + (wc & 1);
 8016328:	f001 0101 	and.w	r1, r1, #1
 801632c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8016330:	0412      	lsls	r2, r2, #16
				wc >>= 1;
 8016332:	ea4f 1293 	mov.w	r2, r3, lsr #6
				if (sr & 0x10000) sr ^= 0x11021;
 8016336:	bf48      	it	mi
 8016338:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 801633a:	f002 0201 	and.w	r2, r2, #1
 801633e:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8016342:	0400      	lsls	r0, r0, #16
				wc >>= 1;
 8016344:	ea4f 10d3 	mov.w	r0, r3, lsr #7
				if (sr & 0x10000) sr ^= 0x11021;
 8016348:	bf48      	it	mi
 801634a:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 801634c:	f000 0001 	and.w	r0, r0, #1
 8016350:	eb02 0241 	add.w	r2, r2, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8016354:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 8016356:	ea4f 2113 	mov.w	r1, r3, lsr #8
				if (sr & 0x10000) sr ^= 0x11021;
 801635a:	bf48      	it	mi
 801635c:	4062      	eormi	r2, r4
				sr = (sr << 1) + (wc & 1);
 801635e:	f001 0101 	and.w	r1, r1, #1
 8016362:	eb00 0042 	add.w	r0, r0, r2, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8016366:	0412      	lsls	r2, r2, #16
				wc >>= 1;
 8016368:	ea4f 2253 	mov.w	r2, r3, lsr #9
				if (sr & 0x10000) sr ^= 0x11021;
 801636c:	bf48      	it	mi
 801636e:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 8016370:	f002 0201 	and.w	r2, r2, #1
 8016374:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8016378:	0400      	lsls	r0, r0, #16
				wc >>= 1;
 801637a:	ea4f 2093 	mov.w	r0, r3, lsr #10
				if (sr & 0x10000) sr ^= 0x11021;
 801637e:	bf48      	it	mi
 8016380:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 8016382:	f000 0001 	and.w	r0, r0, #1
 8016386:	eb02 0241 	add.w	r2, r2, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 801638a:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 801638c:	ea4f 21d3 	mov.w	r1, r3, lsr #11
				if (sr & 0x10000) sr ^= 0x11021;
 8016390:	bf48      	it	mi
 8016392:	4062      	eormi	r2, r4
				sr = (sr << 1) + (wc & 1);
 8016394:	f001 0101 	and.w	r1, r1, #1
 8016398:	eb00 0042 	add.w	r0, r0, r2, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 801639c:	0412      	lsls	r2, r2, #16
				wc >>= 1;
 801639e:	ea4f 3213 	mov.w	r2, r3, lsr #12
				if (sr & 0x10000) sr ^= 0x11021;
 80163a2:	bf48      	it	mi
 80163a4:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 80163a6:	f002 0201 	and.w	r2, r2, #1
 80163aa:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80163ae:	0400      	lsls	r0, r0, #16
				wc >>= 1;
 80163b0:	ea4f 3053 	mov.w	r0, r3, lsr #13
				if (sr & 0x10000) sr ^= 0x11021;
 80163b4:	bf48      	it	mi
 80163b6:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 80163b8:	f000 0001 	and.w	r0, r0, #1
 80163bc:	eb02 0241 	add.w	r2, r2, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80163c0:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 80163c2:	ea4f 3193 	mov.w	r1, r3, lsr #14
				if (sr & 0x10000) sr ^= 0x11021;
 80163c6:	bf48      	it	mi
 80163c8:	4062      	eormi	r2, r4
				wc >>= 1;
 80163ca:	0bdb      	lsrs	r3, r3, #15
				sr = (sr << 1) + (wc & 1);
 80163cc:	f001 0101 	and.w	r1, r1, #1
 80163d0:	eb00 0042 	add.w	r0, r0, r2, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80163d4:	0412      	lsls	r2, r2, #16
 80163d6:	bf48      	it	mi
 80163d8:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 80163da:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80163de:	0400      	lsls	r0, r0, #16
 80163e0:	bf48      	it	mi
 80163e2:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 80163e4:	eb03 0241 	add.w	r2, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80163e8:	0409      	lsls	r1, r1, #16
		while (*lfn) {	/* Create a CRC */
 80163ea:	f83c 3f02 	ldrh.w	r3, [ip, #2]!
				if (sr & 0x10000) sr ^= 0x11021;
 80163ee:	bf48      	it	mi
 80163f0:	4062      	eormi	r2, r4
		while (*lfn) {	/* Create a CRC */
 80163f2:	2b00      	cmp	r3, #0
 80163f4:	f47f af72 	bne.w	80162dc <dir_register+0x230>
		c = (BYTE)((seq % 16) + '0');
 80163f8:	f002 010f 	and.w	r1, r2, #15
 80163fc:	f101 0330 	add.w	r3, r1, #48	; 0x30
		if (c > '9') c += 7;
 8016400:	2b39      	cmp	r3, #57	; 0x39
 8016402:	bf88      	it	hi
 8016404:	f101 0337 	addhi.w	r3, r1, #55	; 0x37
	} while (seq);
 8016408:	2a0f      	cmp	r2, #15
		seq /= 16;
 801640a:	ea4f 1112 	mov.w	r1, r2, lsr #4
		ns[i--] = c;
 801640e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
	} while (seq);
 8016412:	f240 8144 	bls.w	801669e <dir_register+0x5f2>
		c = (BYTE)((seq % 16) + '0');
 8016416:	f001 000f 	and.w	r0, r1, #15
 801641a:	f100 0330 	add.w	r3, r0, #48	; 0x30
		if (c > '9') c += 7;
 801641e:	2b39      	cmp	r3, #57	; 0x39
 8016420:	bf88      	it	hi
 8016422:	f100 0337 	addhi.w	r3, r0, #55	; 0x37
	} while (seq);
 8016426:	290f      	cmp	r1, #15
		seq /= 16;
 8016428:	ea4f 2012 	mov.w	r0, r2, lsr #8
		ns[i--] = c;
 801642c:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
	} while (seq);
 8016430:	f240 813a 	bls.w	80166a8 <dir_register+0x5fc>
		c = (BYTE)((seq % 16) + '0');
 8016434:	f000 010f 	and.w	r1, r0, #15
 8016438:	f101 0330 	add.w	r3, r1, #48	; 0x30
		if (c > '9') c += 7;
 801643c:	2b39      	cmp	r3, #57	; 0x39
 801643e:	bf88      	it	hi
 8016440:	f101 0337 	addhi.w	r3, r1, #55	; 0x37
	} while (seq);
 8016444:	280f      	cmp	r0, #15
		seq /= 16;
 8016446:	ea4f 3112 	mov.w	r1, r2, lsr #12
		ns[i--] = c;
 801644a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
	} while (seq);
 801644e:	f240 8130 	bls.w	80166b2 <dir_register+0x606>
		c = (BYTE)((seq % 16) + '0');
 8016452:	f001 000f 	and.w	r0, r1, #15
 8016456:	f100 0330 	add.w	r3, r0, #48	; 0x30
		if (c > '9') c += 7;
 801645a:	2b39      	cmp	r3, #57	; 0x39
 801645c:	bf88      	it	hi
 801645e:	f100 0337 	addhi.w	r3, r0, #55	; 0x37
	} while (seq);
 8016462:	290f      	cmp	r1, #15
		seq /= 16;
 8016464:	ea4f 4012 	mov.w	r0, r2, lsr #16
		ns[i--] = c;
 8016468:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	} while (seq);
 801646c:	f240 8126 	bls.w	80166bc <dir_register+0x610>
		c = (BYTE)((seq % 16) + '0');
 8016470:	f000 010f 	and.w	r1, r0, #15
 8016474:	f101 0330 	add.w	r3, r1, #48	; 0x30
		if (c > '9') c += 7;
 8016478:	2b39      	cmp	r3, #57	; 0x39
 801647a:	bf88      	it	hi
 801647c:	f101 0337 	addhi.w	r3, r1, #55	; 0x37
	} while (seq);
 8016480:	280f      	cmp	r0, #15
		seq /= 16;
 8016482:	ea4f 5112 	mov.w	r1, r2, lsr #20
		ns[i--] = c;
 8016486:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
	} while (seq);
 801648a:	f240 8142 	bls.w	8016712 <dir_register+0x666>
		c = (BYTE)((seq % 16) + '0');
 801648e:	f001 000f 	and.w	r0, r1, #15
 8016492:	f100 0330 	add.w	r3, r0, #48	; 0x30
		if (c > '9') c += 7;
 8016496:	2b39      	cmp	r3, #57	; 0x39
 8016498:	bf88      	it	hi
 801649a:	f100 0337 	addhi.w	r3, r0, #55	; 0x37
	} while (seq);
 801649e:	290f      	cmp	r1, #15
		seq /= 16;
 80164a0:	ea4f 6012 	mov.w	r0, r2, lsr #24
		ns[i--] = c;
 80164a4:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	} while (seq);
 80164a8:	f240 8138 	bls.w	801671c <dir_register+0x670>
		c = (BYTE)((seq % 16) + '0');
 80164ac:	f000 010f 	and.w	r1, r0, #15
		seq /= 16;
 80164b0:	0f12      	lsrs	r2, r2, #28
		c = (BYTE)((seq % 16) + '0');
 80164b2:	f101 0330 	add.w	r3, r1, #48	; 0x30
		if (c > '9') c += 7;
 80164b6:	2b39      	cmp	r3, #57	; 0x39
 80164b8:	bf88      	it	hi
 80164ba:	f101 0337 	addhi.w	r3, r1, #55	; 0x37
	} while (seq);
 80164be:	280f      	cmp	r0, #15
		ns[i--] = c;
 80164c0:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
	} while (seq);
 80164c4:	d954      	bls.n	8016570 <dir_register+0x4c4>
		c = (BYTE)((seq % 16) + '0');
 80164c6:	f102 0330 	add.w	r3, r2, #48	; 0x30
 80164ca:	b2d2      	uxtb	r2, r2
		if (c > '9') c += 7;
 80164cc:	2b39      	cmp	r3, #57	; 0x39
 80164ce:	bf88      	it	hi
 80164d0:	f102 0337 	addhi.w	r3, r2, #55	; 0x37
		ns[i--] = c;
 80164d4:	f04f 32ff 	mov.w	r2, #4294967295
 80164d8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80164dc:	f109 0123 	add.w	r1, r9, #35	; 0x23
 80164e0:	2300      	movs	r3, #0
 80164e2:	e002      	b.n	80164ea <dir_register+0x43e>
 80164e4:	3301      	adds	r3, #1
 80164e6:	4293      	cmp	r3, r2
 80164e8:	d003      	beq.n	80164f2 <dir_register+0x446>
 80164ea:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80164ee:	2820      	cmp	r0, #32
 80164f0:	d1f8      	bne.n	80164e4 <dir_register+0x438>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80164f2:	2a07      	cmp	r2, #7
 80164f4:	d941      	bls.n	801657a <dir_register+0x4ce>
 80164f6:	1c59      	adds	r1, r3, #1
 80164f8:	f80a 8003 	strb.w	r8, [sl, r3]
	} while (j < 8);
 80164fc:	2907      	cmp	r1, #7
 80164fe:	d829      	bhi.n	8016554 <dir_register+0x4a8>
 8016500:	2907      	cmp	r1, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8016502:	f101 0001 	add.w	r0, r1, #1
 8016506:	f80a 8001 	strb.w	r8, [sl, r1]
	} while (j < 8);
 801650a:	d023      	beq.n	8016554 <dir_register+0x4a8>
 801650c:	2807      	cmp	r0, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801650e:	f100 0101 	add.w	r1, r0, #1
 8016512:	f80a 8000 	strb.w	r8, [sl, r0]
	} while (j < 8);
 8016516:	d01d      	beq.n	8016554 <dir_register+0x4a8>
 8016518:	2907      	cmp	r1, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801651a:	f101 0001 	add.w	r0, r1, #1
 801651e:	f80a 8001 	strb.w	r8, [sl, r1]
	} while (j < 8);
 8016522:	d017      	beq.n	8016554 <dir_register+0x4a8>
 8016524:	2807      	cmp	r0, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8016526:	f100 0101 	add.w	r1, r0, #1
 801652a:	f80a 8000 	strb.w	r8, [sl, r0]
	} while (j < 8);
 801652e:	d011      	beq.n	8016554 <dir_register+0x4a8>
 8016530:	2907      	cmp	r1, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8016532:	f101 0001 	add.w	r0, r1, #1
 8016536:	f80a 8001 	strb.w	r8, [sl, r1]
	} while (j < 8);
 801653a:	d00b      	beq.n	8016554 <dir_register+0x4a8>
 801653c:	2807      	cmp	r0, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801653e:	f100 0101 	add.w	r1, r0, #1
 8016542:	f80a 8000 	strb.w	r8, [sl, r0]
	} while (j < 8);
 8016546:	d005      	beq.n	8016554 <dir_register+0x4a8>
 8016548:	2906      	cmp	r1, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801654a:	f80a 8001 	strb.w	r8, [sl, r1]
	} while (j < 8);
 801654e:	d101      	bne.n	8016554 <dir_register+0x4a8>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8016550:	f889 802b 	strb.w	r8, [r9, #43]	; 0x2b
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8016554:	4648      	mov	r0, r9
 8016556:	f7ff f9af 	bl	80158b8 <dir_find>
			if (res != FR_OK) break;
 801655a:	2800      	cmp	r0, #0
 801655c:	d17e      	bne.n	801665c <dir_register+0x5b0>
		for (n = 1; n < 100; n++) {
 801655e:	3701      	adds	r7, #1
 8016560:	2f64      	cmp	r7, #100	; 0x64
 8016562:	f000 8096 	beq.w	8016692 <dir_register+0x5e6>
 8016566:	9b00      	ldr	r3, [sp, #0]
 8016568:	68da      	ldr	r2, [r3, #12]
 801656a:	e685      	b.n	8016278 <dir_register+0x1cc>
 801656c:	463a      	mov	r2, r7
 801656e:	e743      	b.n	80163f8 <dir_register+0x34c>
	ns[i] = '~';
 8016570:	237e      	movs	r3, #126	; 0x7e
 8016572:	2200      	movs	r2, #0
 8016574:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8016578:	4613      	mov	r3, r2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801657a:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 801657e:	1c59      	adds	r1, r3, #1
 8016580:	1c50      	adds	r0, r2, #1
 8016582:	4494      	add	ip, r2
	} while (j < 8);
 8016584:	2907      	cmp	r1, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8016586:	f81c cc14 	ldrb.w	ip, [ip, #-20]
 801658a:	f80a c003 	strb.w	ip, [sl, r3]
	} while (j < 8);
 801658e:	d8e1      	bhi.n	8016554 <dir_register+0x4a8>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8016590:	2807      	cmp	r0, #7
 8016592:	d8b5      	bhi.n	8016500 <dir_register+0x454>
 8016594:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
	} while (j < 8);
 8016598:	2b06      	cmp	r3, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801659a:	4460      	add	r0, ip
 801659c:	f102 0c02 	add.w	ip, r2, #2
 80165a0:	f810 ec14 	ldrb.w	lr, [r0, #-20]
 80165a4:	f103 0002 	add.w	r0, r3, #2
 80165a8:	f80a e001 	strb.w	lr, [sl, r1]
	} while (j < 8);
 80165ac:	d0d2      	beq.n	8016554 <dir_register+0x4a8>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80165ae:	f1bc 0f08 	cmp.w	ip, #8
 80165b2:	d0ab      	beq.n	801650c <dir_register+0x460>
 80165b4:	a910      	add	r1, sp, #64	; 0x40
	} while (j < 8);
 80165b6:	2b05      	cmp	r3, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80165b8:	f102 0e03 	add.w	lr, r2, #3
 80165bc:	448c      	add	ip, r1
 80165be:	f103 0103 	add.w	r1, r3, #3
 80165c2:	f81c cc14 	ldrb.w	ip, [ip, #-20]
 80165c6:	f80a c000 	strb.w	ip, [sl, r0]
	} while (j < 8);
 80165ca:	d0c3      	beq.n	8016554 <dir_register+0x4a8>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80165cc:	f1be 0f07 	cmp.w	lr, #7
 80165d0:	d8a2      	bhi.n	8016518 <dir_register+0x46c>
 80165d2:	a810      	add	r0, sp, #64	; 0x40
	} while (j < 8);
 80165d4:	2b04      	cmp	r3, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80165d6:	f102 0c04 	add.w	ip, r2, #4
 80165da:	4486      	add	lr, r0
 80165dc:	f103 0004 	add.w	r0, r3, #4
 80165e0:	f81e ec14 	ldrb.w	lr, [lr, #-20]
 80165e4:	f80a e001 	strb.w	lr, [sl, r1]
	} while (j < 8);
 80165e8:	d0b4      	beq.n	8016554 <dir_register+0x4a8>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80165ea:	f1bc 0f08 	cmp.w	ip, #8
 80165ee:	d099      	beq.n	8016524 <dir_register+0x478>
 80165f0:	a910      	add	r1, sp, #64	; 0x40
	} while (j < 8);
 80165f2:	2b03      	cmp	r3, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80165f4:	f102 0e05 	add.w	lr, r2, #5
 80165f8:	448c      	add	ip, r1
 80165fa:	f103 0105 	add.w	r1, r3, #5
 80165fe:	f81c cc14 	ldrb.w	ip, [ip, #-20]
 8016602:	f80a c000 	strb.w	ip, [sl, r0]
	} while (j < 8);
 8016606:	d0a5      	beq.n	8016554 <dir_register+0x4a8>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8016608:	f1be 0f07 	cmp.w	lr, #7
 801660c:	d890      	bhi.n	8016530 <dir_register+0x484>
 801660e:	a810      	add	r0, sp, #64	; 0x40
	} while (j < 8);
 8016610:	2b02      	cmp	r3, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8016612:	f102 0c06 	add.w	ip, r2, #6
 8016616:	4486      	add	lr, r0
 8016618:	f103 0006 	add.w	r0, r3, #6
 801661c:	f81e ec14 	ldrb.w	lr, [lr, #-20]
 8016620:	f80a e001 	strb.w	lr, [sl, r1]
	} while (j < 8);
 8016624:	d096      	beq.n	8016554 <dir_register+0x4a8>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8016626:	f1bc 0f08 	cmp.w	ip, #8
 801662a:	d087      	beq.n	801653c <dir_register+0x490>
 801662c:	a910      	add	r1, sp, #64	; 0x40
	} while (j < 8);
 801662e:	2b01      	cmp	r3, #1
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8016630:	448c      	add	ip, r1
 8016632:	f103 0107 	add.w	r1, r3, #7
 8016636:	f81c cc14 	ldrb.w	ip, [ip, #-20]
 801663a:	f80a c000 	strb.w	ip, [sl, r0]
	} while (j < 8);
 801663e:	d089      	beq.n	8016554 <dir_register+0x4a8>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8016640:	2a00      	cmp	r2, #0
 8016642:	d181      	bne.n	8016548 <dir_register+0x49c>
 8016644:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
	} while (j < 8);
 8016648:	2906      	cmp	r1, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801664a:	f80a 3001 	strb.w	r3, [sl, r1]
	} while (j < 8);
 801664e:	f43f af7f 	beq.w	8016550 <dir_register+0x4a4>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8016652:	4648      	mov	r0, r9
 8016654:	f7ff f930 	bl	80158b8 <dir_find>
			if (res != FR_OK) break;
 8016658:	2800      	cmp	r0, #0
 801665a:	d080      	beq.n	801655e <dir_register+0x4b2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 801665c:	2804      	cmp	r0, #4
 801665e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8016660:	4683      	mov	fp, r0
 8016662:	d118      	bne.n	8016696 <dir_register+0x5ea>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8016664:	9b08      	ldr	r3, [sp, #32]
 8016666:	f8d9 7000 	ldr.w	r7, [r9]
 801666a:	f889 302f 	strb.w	r3, [r9, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801666e:	f013 0302 	ands.w	r3, r3, #2
 8016672:	f47f ad46 	bne.w	8016102 <dir_register+0x56>
 8016676:	9301      	str	r3, [sp, #4]
 8016678:	2301      	movs	r3, #1
	res = dir_sdi(dp, 0);
 801667a:	2100      	movs	r1, #0
 801667c:	4648      	mov	r0, r9
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801667e:	461c      	mov	r4, r3
	res = dir_sdi(dp, 0);
 8016680:	f7ff f854 	bl	801572c <dir_sdi>
	if (res == FR_OK) {
 8016684:	4683      	mov	fp, r0
 8016686:	2800      	cmp	r0, #0
 8016688:	f43f ad4b 	beq.w	8016122 <dir_register+0x76>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801668c:	f1bb 0f04 	cmp.w	fp, #4
 8016690:	d101      	bne.n	8016696 <dir_register+0x5ea>
 8016692:	f04f 0b07 	mov.w	fp, #7
}
 8016696:	4658      	mov	r0, fp
 8016698:	b011      	add	sp, #68	; 0x44
 801669a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ns[i] = '~';
 801669e:	237e      	movs	r3, #126	; 0x7e
		ns[i--] = c;
 80166a0:	2206      	movs	r2, #6
	ns[i] = '~';
 80166a2:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80166a6:	e719      	b.n	80164dc <dir_register+0x430>
	ns[i] = '~';
 80166a8:	237e      	movs	r3, #126	; 0x7e
		ns[i--] = c;
 80166aa:	2205      	movs	r2, #5
	ns[i] = '~';
 80166ac:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80166b0:	e714      	b.n	80164dc <dir_register+0x430>
	ns[i] = '~';
 80166b2:	237e      	movs	r3, #126	; 0x7e
		ns[i--] = c;
 80166b4:	2204      	movs	r2, #4
	ns[i] = '~';
 80166b6:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80166ba:	e70f      	b.n	80164dc <dir_register+0x430>
	ns[i] = '~';
 80166bc:	237e      	movs	r3, #126	; 0x7e
		ns[i--] = c;
 80166be:	2203      	movs	r2, #3
	ns[i] = '~';
 80166c0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80166c4:	e70a      	b.n	80164dc <dir_register+0x430>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80166c6:	8972      	ldrh	r2, [r6, #10]
 80166c8:	3a01      	subs	r2, #1
 80166ca:	ea12 2254 	ands.w	r2, r2, r4, lsr #9
 80166ce:	f47f ad54 	bne.w	801617a <dir_register+0xce>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80166d2:	4619      	mov	r1, r3
 80166d4:	4630      	mov	r0, r6
 80166d6:	f7fe f965 	bl	80149a4 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80166da:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80166dc:	9004      	str	r0, [sp, #16]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80166de:	f240 822b 	bls.w	8016b38 <dir_register+0xa8c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80166e2:	1c42      	adds	r2, r0, #1
 80166e4:	d034      	beq.n	8016750 <dir_register+0x6a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80166e6:	69b3      	ldr	r3, [r6, #24]
 80166e8:	4298      	cmp	r0, r3
 80166ea:	d23e      	bcs.n	801676a <dir_register+0x6be>
 80166ec:	1e82      	subs	r2, r0, #2
 80166ee:	3b02      	subs	r3, #2
 80166f0:	f106 0534 	add.w	r5, r6, #52	; 0x34
 80166f4:	9205      	str	r2, [sp, #20]
				dp->clust = clst;		/* Initialize data for new cluster */
 80166f6:	9a04      	ldr	r2, [sp, #16]
 80166f8:	f8c9 2018 	str.w	r2, [r9, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80166fc:	9a05      	ldr	r2, [sp, #20]
 80166fe:	4293      	cmp	r3, r2
 8016700:	f240 81fe 	bls.w	8016b00 <dir_register+0xa54>
	return clst * fs->csize + fs->database;
 8016704:	8971      	ldrh	r1, [r6, #10]
 8016706:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8016708:	fb02 3101 	mla	r1, r2, r1, r3
				dp->sect = clust2sect(fs, clst);
 801670c:	f8c9 101c 	str.w	r1, [r9, #28]
 8016710:	e535      	b.n	801617e <dir_register+0xd2>
	ns[i] = '~';
 8016712:	237e      	movs	r3, #126	; 0x7e
		ns[i--] = c;
 8016714:	2202      	movs	r2, #2
	ns[i] = '~';
 8016716:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801671a:	e6df      	b.n	80164dc <dir_register+0x430>
	ns[i] = '~';
 801671c:	237e      	movs	r3, #126	; 0x7e
		ns[i--] = c;
 801671e:	2201      	movs	r2, #1
	ns[i] = '~';
 8016720:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8016724:	e6da      	b.n	80164dc <dir_register+0x430>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8016726:	f04f 0b06 	mov.w	fp, #6
}
 801672a:	4658      	mov	r0, fp
 801672c:	b011      	add	sp, #68	; 0x44
 801672e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8016732:	f8d9 1014 	ldr.w	r1, [r9, #20]
 8016736:	4648      	mov	r0, r9
 8016738:	461e      	mov	r6, r3
 801673a:	eba1 1143 	sub.w	r1, r1, r3, lsl #5
 801673e:	f7fe fff5 	bl	801572c <dir_sdi>
		if (res == FR_OK) {
 8016742:	2800      	cmp	r0, #0
 8016744:	d074      	beq.n	8016830 <dir_register+0x784>
 8016746:	4683      	mov	fp, r0
}
 8016748:	4658      	mov	r0, fp
 801674a:	b011      	add	sp, #68	; 0x44
 801674c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8016750:	f04f 0b01 	mov.w	fp, #1
}
 8016754:	4658      	mov	r0, fp
 8016756:	b011      	add	sp, #68	; 0x44
 8016758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				dp->sect = 0; return FR_NO_FILE;
 801675c:	f8c9 301c 	str.w	r3, [r9, #28]
 8016760:	e797      	b.n	8016692 <dir_register+0x5e6>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8016762:	461d      	mov	r5, r3
 8016764:	e4bb      	b.n	80160de <dir_register+0x32>
 8016766:	4683      	mov	fp, r0
 8016768:	e790      	b.n	801668c <dir_register+0x5e0>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801676a:	f8d9 1018 	ldr.w	r1, [r9, #24]
 801676e:	4648      	mov	r0, r9
 8016770:	f7fe fcaa 	bl	80150c8 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8016774:	4603      	mov	r3, r0
 8016776:	9004      	str	r0, [sp, #16]
 8016778:	2800      	cmp	r0, #0
 801677a:	d08a      	beq.n	8016692 <dir_register+0x5e6>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801677c:	2801      	cmp	r0, #1
 801677e:	f000 81db 	beq.w	8016b38 <dir_register+0xa8c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8016782:	3301      	adds	r3, #1
 8016784:	d0e4      	beq.n	8016750 <dir_register+0x6a4>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8016786:	78f3      	ldrb	r3, [r6, #3]
 8016788:	2b00      	cmp	r3, #0
 801678a:	f040 81e7 	bne.w	8016b5c <dir_register+0xab0>
 801678e:	f106 0534 	add.w	r5, r6, #52	; 0x34
	clst -= 2;
 8016792:	9b04      	ldr	r3, [sp, #16]
 8016794:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016798:	2100      	movs	r1, #0
 801679a:	4628      	mov	r0, r5
 801679c:	3b02      	subs	r3, #2
 801679e:	9305      	str	r3, [sp, #20]
 80167a0:	f00e fb4c 	bl	8024e3c <memset>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80167a4:	69b3      	ldr	r3, [r6, #24]
 80167a6:	9a05      	ldr	r2, [sp, #20]
 80167a8:	3b02      	subs	r3, #2
 80167aa:	429a      	cmp	r2, r3
 80167ac:	f080 8203 	bcs.w	8016bb6 <dir_register+0xb0a>
	return clst * fs->csize + fs->database;
 80167b0:	4610      	mov	r0, r2
 80167b2:	8971      	ldrh	r1, [r6, #10]
 80167b4:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80167b6:	fb00 2201 	mla	r2, r0, r1, r2
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80167ba:	6332      	str	r2, [r6, #48]	; 0x30
 80167bc:	2900      	cmp	r1, #0
 80167be:	f000 81cb 	beq.w	8016b58 <dir_register+0xaac>
 80167c2:	2300      	movs	r3, #0
 80167c4:	9708      	str	r7, [sp, #32]
 80167c6:	462f      	mov	r7, r5
 80167c8:	4615      	mov	r5, r2
 80167ca:	e9cd b406 	strd	fp, r4, [sp, #24]
 80167ce:	461c      	mov	r4, r3
						fs->wflag = 1;
 80167d0:	f04f 0301 	mov.w	r3, #1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80167d4:	462a      	mov	r2, r5
 80167d6:	4639      	mov	r1, r7
 80167d8:	7870      	ldrb	r0, [r6, #1]
						fs->wflag = 1;
 80167da:	70f3      	strb	r3, [r6, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80167dc:	2301      	movs	r3, #1
 80167de:	f7fd ff65 	bl	80146ac <disk_write>
 80167e2:	2800      	cmp	r0, #0
 80167e4:	d1b4      	bne.n	8016750 <dir_register+0x6a4>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80167e6:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80167e8:	69f3      	ldr	r3, [r6, #28]
 80167ea:	eba5 0c02 	sub.w	ip, r5, r2
			fs->wflag = 0;
 80167ee:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80167f0:	459c      	cmp	ip, r3
 80167f2:	d212      	bcs.n	801681a <dir_register+0x76e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80167f4:	f896 b002 	ldrb.w	fp, [r6, #2]
 80167f8:	f1bb 0f01 	cmp.w	fp, #1
 80167fc:	d801      	bhi.n	8016802 <dir_register+0x756>
 80167fe:	e00c      	b.n	801681a <dir_register+0x76e>
 8016800:	69f3      	ldr	r3, [r6, #28]
					wsect += fs->fsize;
 8016802:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8016804:	f10b 3bff 	add.w	fp, fp, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8016808:	2301      	movs	r3, #1
 801680a:	4639      	mov	r1, r7
 801680c:	462a      	mov	r2, r5
 801680e:	7870      	ldrb	r0, [r6, #1]
 8016810:	f7fd ff4c 	bl	80146ac <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8016814:	f1bb 0f01 	cmp.w	fp, #1
 8016818:	d1f2      	bne.n	8016800 <dir_register+0x754>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801681a:	6b30      	ldr	r0, [r6, #48]	; 0x30
 801681c:	1c63      	adds	r3, r4, #1
 801681e:	f8b6 c00a 	ldrh.w	ip, [r6, #10]
 8016822:	1c45      	adds	r5, r0, #1
 8016824:	4563      	cmp	r3, ip
 8016826:	6335      	str	r5, [r6, #48]	; 0x30
 8016828:	f080 818d 	bcs.w	8016b46 <dir_register+0xa9a>
 801682c:	461c      	mov	r4, r3
 801682e:	e7cf      	b.n	80167d0 <dir_register+0x724>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8016830:	f899 2024 	ldrb.w	r2, [r9, #36]	; 0x24
	dir[LDIR_Type] = 0;
 8016834:	4604      	mov	r4, r0
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8016836:	f899 1025 	ldrb.w	r1, [r9, #37]	; 0x25
 801683a:	01d3      	lsls	r3, r2, #7
 801683c:	f899 5026 	ldrb.w	r5, [r9, #38]	; 0x26
 8016840:	f899 0027 	ldrb.w	r0, [r9, #39]	; 0x27
 8016844:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 8016848:	9f00      	ldr	r7, [sp, #0]
 801684a:	185a      	adds	r2, r3, r1
 801684c:	f899 1028 	ldrb.w	r1, [r9, #40]	; 0x28
 8016850:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8016854:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8016858:	fa55 f283 	uxtab	r2, r5, r3
 801685c:	f899 5029 	ldrb.w	r5, [r9, #41]	; 0x29
 8016860:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8016864:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8016868:	fa50 f283 	uxtab	r2, r0, r3
 801686c:	f899 002a 	ldrb.w	r0, [r9, #42]	; 0x2a
 8016870:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8016874:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8016878:	fa51 f283 	uxtab	r2, r1, r3
 801687c:	f899 102b 	ldrb.w	r1, [r9, #43]	; 0x2b
 8016880:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8016884:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8016888:	fa55 f283 	uxtab	r2, r5, r3
 801688c:	f899 502c 	ldrb.w	r5, [r9, #44]	; 0x2c
 8016890:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8016894:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8016898:	fa50 f283 	uxtab	r2, r0, r3
 801689c:	f899 002d 	ldrb.w	r0, [r9, #45]	; 0x2d
 80168a0:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80168a4:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80168a8:	fa51 f283 	uxtab	r2, r1, r3
 80168ac:	f899 102e 	ldrb.w	r1, [r9, #46]	; 0x2e
 80168b0:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80168b4:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80168b8:	fa55 f283 	uxtab	r2, r5, r3
	*ptr++ = (BYTE)val; val >>= 8;
 80168bc:	25ff      	movs	r5, #255	; 0xff
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80168be:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80168c2:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80168c6:	fa50 f383 	uxtab	r3, r0, r3
 80168ca:	f3c3 0246 	ubfx	r2, r3, #1, #7
 80168ce:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
 80168d2:	fa51 f183 	uxtab	r1, r1, r3
 80168d6:	e9cd ba01 	strd	fp, sl, [sp, #4]
 80168da:	fa5f f881 	uxtb.w	r8, r1
	} while (--n);
 80168de:	e025      	b.n	801692c <dir_register+0x880>
	*ptr++ = (BYTE)val; val >>= 8;
 80168e0:	70dd      	strb	r5, [r3, #3]
	*ptr++ = (BYTE)val;
 80168e2:	711d      	strb	r5, [r3, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 80168e4:	715d      	strb	r5, [r3, #5]
	*ptr++ = (BYTE)val;
 80168e6:	719d      	strb	r5, [r3, #6]
	*ptr++ = (BYTE)val; val >>= 8;
 80168e8:	71dd      	strb	r5, [r3, #7]
	*ptr++ = (BYTE)val;
 80168ea:	721d      	strb	r5, [r3, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 80168ec:	725d      	strb	r5, [r3, #9]
	*ptr++ = (BYTE)val;
 80168ee:	729d      	strb	r5, [r3, #10]
	*ptr++ = (BYTE)val; val >>= 8;
 80168f0:	739d      	strb	r5, [r3, #14]
	*ptr++ = (BYTE)val;
 80168f2:	73dd      	strb	r5, [r3, #15]
	*ptr++ = (BYTE)val; val >>= 8;
 80168f4:	741d      	strb	r5, [r3, #16]
	*ptr++ = (BYTE)val;
 80168f6:	745d      	strb	r5, [r3, #17]
	*ptr++ = (BYTE)val; val >>= 8;
 80168f8:	749d      	strb	r5, [r3, #18]
	*ptr++ = (BYTE)val;
 80168fa:	74dd      	strb	r5, [r3, #19]
	*ptr++ = (BYTE)val; val >>= 8;
 80168fc:	751d      	strb	r5, [r3, #20]
	*ptr++ = (BYTE)val;
 80168fe:	755d      	strb	r5, [r3, #21]
	*ptr++ = (BYTE)val; val >>= 8;
 8016900:	759d      	strb	r5, [r3, #22]
	*ptr++ = (BYTE)val;
 8016902:	75dd      	strb	r5, [r3, #23]
	*ptr++ = (BYTE)val; val >>= 8;
 8016904:	761d      	strb	r5, [r3, #24]
	*ptr++ = (BYTE)val;
 8016906:	765d      	strb	r5, [r3, #25]
	*ptr++ = (BYTE)val; val >>= 8;
 8016908:	771d      	strb	r5, [r3, #28]
	*ptr++ = (BYTE)val;
 801690a:	775d      	strb	r5, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 801690c:	779d      	strb	r5, [r3, #30]
	*ptr++ = (BYTE)val;
 801690e:	77dd      	strb	r5, [r3, #31]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8016910:	f040 0040 	orr.w	r0, r0, #64	; 0x40
				fs->wflag = 1;
 8016914:	2201      	movs	r2, #1
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8016916:	7018      	strb	r0, [r3, #0]
				res = dir_next(dp, 0);	/* Next entry */
 8016918:	4648      	mov	r0, r9
				fs->wflag = 1;
 801691a:	70fa      	strb	r2, [r7, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801691c:	f7fe f8ae 	bl	8014a7c <dir_next.constprop.0>
			} while (res == FR_OK && --nent);
 8016920:	2800      	cmp	r0, #0
 8016922:	f47f af10 	bne.w	8016746 <dir_register+0x69a>
 8016926:	3e01      	subs	r6, #1
 8016928:	f000 8109 	beq.w	8016b3e <dir_register+0xa92>
				res = move_window(fs, dp->sect);
 801692c:	f8d9 101c 	ldr.w	r1, [r9, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8016930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016932:	4299      	cmp	r1, r3
 8016934:	d005      	beq.n	8016942 <dir_register+0x896>
 8016936:	4638      	mov	r0, r7
 8016938:	f7fd ff5c 	bl	80147f4 <move_window.part.0>
				if (res != FR_OK) break;
 801693c:	2800      	cmp	r0, #0
 801693e:	f47f af02 	bne.w	8016746 <dir_register+0x69a>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8016942:	b2f0      	uxtb	r0, r6
 8016944:	68f9      	ldr	r1, [r7, #12]
 8016946:	f8d9 3020 	ldr.w	r3, [r9, #32]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801694a:	f04f 0e0f 	mov.w	lr, #15
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801694e:	1e42      	subs	r2, r0, #1
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8016950:	f883 e00b 	strb.w	lr, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8016954:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8016958:	f883 800d 	strb.w	r8, [r3, #13]
	dir[LDIR_Type] = 0;
 801695c:	731c      	strb	r4, [r3, #12]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801695e:	eb02 028c 	add.w	r2, r2, ip, lsl #2
	*ptr++ = (BYTE)val; val >>= 8;
 8016962:	769c      	strb	r4, [r3, #26]
	*ptr++ = (BYTE)val;
 8016964:	76dc      	strb	r4, [r3, #27]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8016966:	f831 c012 	ldrh.w	ip, [r1, r2, lsl #1]
 801696a:	ea4f 0e42 	mov.w	lr, r2, lsl #1
	*ptr++ = (BYTE)val; val >>= 8;
 801696e:	ea4f 2a1c 	mov.w	sl, ip, lsr #8
 8016972:	f883 c001 	strb.w	ip, [r3, #1]
	*ptr++ = (BYTE)val;
 8016976:	f883 a002 	strb.w	sl, [r3, #2]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801697a:	f1bc 0f00 	cmp.w	ip, #0
 801697e:	d0af      	beq.n	80168e0 <dir_register+0x834>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8016980:	f64f 7aff 	movw	sl, #65535	; 0xffff
 8016984:	45d4      	cmp	ip, sl
 8016986:	d0ab      	beq.n	80168e0 <dir_register+0x834>
 8016988:	3201      	adds	r2, #1
 801698a:	f831 c012 	ldrh.w	ip, [r1, r2, lsl #1]
 801698e:	0052      	lsls	r2, r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8016990:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8016994:	f883 c003 	strb.w	ip, [r3, #3]
	*ptr++ = (BYTE)val;
 8016998:	f883 b004 	strb.w	fp, [r3, #4]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801699c:	f1bc 0f00 	cmp.w	ip, #0
 80169a0:	d0a0      	beq.n	80168e4 <dir_register+0x838>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80169a2:	45d4      	cmp	ip, sl
 80169a4:	d09e      	beq.n	80168e4 <dir_register+0x838>
 80169a6:	440a      	add	r2, r1
 80169a8:	f8b2 c002 	ldrh.w	ip, [r2, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80169ac:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80169b0:	f883 c005 	strb.w	ip, [r3, #5]
	*ptr++ = (BYTE)val;
 80169b4:	f883 b006 	strb.w	fp, [r3, #6]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80169b8:	f1bc 0f00 	cmp.w	ip, #0
 80169bc:	d094      	beq.n	80168e8 <dir_register+0x83c>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80169be:	45d4      	cmp	ip, sl
 80169c0:	d092      	beq.n	80168e8 <dir_register+0x83c>
 80169c2:	f8b2 c004 	ldrh.w	ip, [r2, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 80169c6:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80169ca:	f883 c007 	strb.w	ip, [r3, #7]
	*ptr++ = (BYTE)val;
 80169ce:	f883 b008 	strb.w	fp, [r3, #8]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80169d2:	f1bc 0f00 	cmp.w	ip, #0
 80169d6:	d089      	beq.n	80168ec <dir_register+0x840>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80169d8:	45d4      	cmp	ip, sl
 80169da:	d087      	beq.n	80168ec <dir_register+0x840>
 80169dc:	f8b2 c006 	ldrh.w	ip, [r2, #6]
	*ptr++ = (BYTE)val; val >>= 8;
 80169e0:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80169e4:	f883 c009 	strb.w	ip, [r3, #9]
	*ptr++ = (BYTE)val;
 80169e8:	f883 b00a 	strb.w	fp, [r3, #10]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80169ec:	f1bc 0f00 	cmp.w	ip, #0
 80169f0:	f43f af7e 	beq.w	80168f0 <dir_register+0x844>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80169f4:	45d4      	cmp	ip, sl
 80169f6:	f43f af7b 	beq.w	80168f0 <dir_register+0x844>
 80169fa:	f8b2 c008 	ldrh.w	ip, [r2, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 80169fe:	ea4f 2a1c 	mov.w	sl, ip, lsr #8
 8016a02:	f883 c00e 	strb.w	ip, [r3, #14]
	*ptr++ = (BYTE)val;
 8016a06:	f883 a00f 	strb.w	sl, [r3, #15]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8016a0a:	f1bc 0f00 	cmp.w	ip, #0
 8016a0e:	f43f af71 	beq.w	80168f4 <dir_register+0x848>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8016a12:	f64f 7aff 	movw	sl, #65535	; 0xffff
 8016a16:	45d4      	cmp	ip, sl
 8016a18:	f43f af6c 	beq.w	80168f4 <dir_register+0x848>
 8016a1c:	f8b2 c00a 	ldrh.w	ip, [r2, #10]
	*ptr++ = (BYTE)val; val >>= 8;
 8016a20:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8016a24:	f883 c010 	strb.w	ip, [r3, #16]
	*ptr++ = (BYTE)val;
 8016a28:	f883 b011 	strb.w	fp, [r3, #17]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8016a2c:	f1bc 0f00 	cmp.w	ip, #0
 8016a30:	f43f af62 	beq.w	80168f8 <dir_register+0x84c>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8016a34:	45d4      	cmp	ip, sl
 8016a36:	f43f af5f 	beq.w	80168f8 <dir_register+0x84c>
 8016a3a:	f8b2 c00c 	ldrh.w	ip, [r2, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 8016a3e:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8016a42:	f883 c012 	strb.w	ip, [r3, #18]
	*ptr++ = (BYTE)val;
 8016a46:	f883 b013 	strb.w	fp, [r3, #19]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8016a4a:	f1bc 0f00 	cmp.w	ip, #0
 8016a4e:	f43f af55 	beq.w	80168fc <dir_register+0x850>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8016a52:	45d4      	cmp	ip, sl
 8016a54:	f43f af52 	beq.w	80168fc <dir_register+0x850>
 8016a58:	f8b2 c00e 	ldrh.w	ip, [r2, #14]
	*ptr++ = (BYTE)val; val >>= 8;
 8016a5c:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8016a60:	f883 c014 	strb.w	ip, [r3, #20]
	*ptr++ = (BYTE)val;
 8016a64:	f883 b015 	strb.w	fp, [r3, #21]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8016a68:	f1bc 0f00 	cmp.w	ip, #0
 8016a6c:	f43f af48 	beq.w	8016900 <dir_register+0x854>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8016a70:	45d4      	cmp	ip, sl
 8016a72:	f43f af45 	beq.w	8016900 <dir_register+0x854>
 8016a76:	f8b2 c010 	ldrh.w	ip, [r2, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 8016a7a:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8016a7e:	f883 c016 	strb.w	ip, [r3, #22]
	*ptr++ = (BYTE)val;
 8016a82:	f883 b017 	strb.w	fp, [r3, #23]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8016a86:	f1bc 0f00 	cmp.w	ip, #0
 8016a8a:	f43f af3b 	beq.w	8016904 <dir_register+0x858>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8016a8e:	45d4      	cmp	ip, sl
 8016a90:	f43f af38 	beq.w	8016904 <dir_register+0x858>
 8016a94:	f8b2 c012 	ldrh.w	ip, [r2, #18]
	*ptr++ = (BYTE)val; val >>= 8;
 8016a98:	ea4f 2a1c 	mov.w	sl, ip, lsr #8
 8016a9c:	f883 c018 	strb.w	ip, [r3, #24]
	*ptr++ = (BYTE)val;
 8016aa0:	f883 a019 	strb.w	sl, [r3, #25]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8016aa4:	f1bc 0f00 	cmp.w	ip, #0
 8016aa8:	f43f af2e 	beq.w	8016908 <dir_register+0x85c>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8016aac:	f64f 7bff 	movw	fp, #65535	; 0xffff
 8016ab0:	45dc      	cmp	ip, fp
 8016ab2:	f43f af29 	beq.w	8016908 <dir_register+0x85c>
 8016ab6:	f8b2 c014 	ldrh.w	ip, [r2, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 8016aba:	ea4f 2a1c 	mov.w	sl, ip, lsr #8
 8016abe:	f883 c01c 	strb.w	ip, [r3, #28]
	*ptr++ = (BYTE)val;
 8016ac2:	f883 a01d 	strb.w	sl, [r3, #29]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8016ac6:	f1bc 0f00 	cmp.w	ip, #0
 8016aca:	f43f af1f 	beq.w	801690c <dir_register+0x860>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8016ace:	45dc      	cmp	ip, fp
 8016ad0:	f43f af1c 	beq.w	801690c <dir_register+0x860>
 8016ad4:	f8b2 c016 	ldrh.w	ip, [r2, #22]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8016ad8:	f64f 7afd 	movw	sl, #65533	; 0xfffd
 8016adc:	f10c 32ff 	add.w	r2, ip, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 8016ae0:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8016ae4:	f883 c01e 	strb.w	ip, [r3, #30]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8016ae8:	b292      	uxth	r2, r2
	*ptr++ = (BYTE)val;
 8016aea:	f883 b01f 	strb.w	fp, [r3, #31]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8016aee:	4552      	cmp	r2, sl
 8016af0:	f63f af0e 	bhi.w	8016910 <dir_register+0x864>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8016af4:	4471      	add	r1, lr
 8016af6:	8b4a      	ldrh	r2, [r1, #26]
 8016af8:	2a00      	cmp	r2, #0
 8016afa:	f47f af0b 	bne.w	8016914 <dir_register+0x868>
 8016afe:	e707      	b.n	8016910 <dir_register+0x864>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8016b00:	2100      	movs	r1, #0
 8016b02:	e603      	b.n	801670c <dir_register+0x660>
			*d++ = *s++;
 8016b04:	f899 2024 	ldrb.w	r2, [r9, #36]	; 0x24
 8016b08:	701a      	strb	r2, [r3, #0]
 8016b0a:	f899 2025 	ldrb.w	r2, [r9, #37]	; 0x25
 8016b0e:	705a      	strb	r2, [r3, #1]
 8016b10:	f899 2026 	ldrb.w	r2, [r9, #38]	; 0x26
 8016b14:	709a      	strb	r2, [r3, #2]
 8016b16:	f899 2027 	ldrb.w	r2, [r9, #39]	; 0x27
 8016b1a:	70da      	strb	r2, [r3, #3]
 8016b1c:	f899 2028 	ldrb.w	r2, [r9, #40]	; 0x28
 8016b20:	711a      	strb	r2, [r3, #4]
 8016b22:	f899 2029 	ldrb.w	r2, [r9, #41]	; 0x29
 8016b26:	715a      	strb	r2, [r3, #5]
 8016b28:	f899 202a 	ldrb.w	r2, [r9, #42]	; 0x2a
 8016b2c:	719a      	strb	r2, [r3, #6]
 8016b2e:	f899 202b 	ldrb.w	r2, [r9, #43]	; 0x2b
 8016b32:	71da      	strb	r2, [r3, #7]
 8016b34:	f7ff bb63 	b.w	80161fe <dir_register+0x152>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8016b38:	f04f 0b02 	mov.w	fp, #2
 8016b3c:	e5ab      	b.n	8016696 <dir_register+0x5ea>
 8016b3e:	e9dd ba01 	ldrd	fp, sl, [sp, #4]
 8016b42:	f7ff bb3a 	b.w	80161ba <dir_register+0x10e>
 8016b46:	4622      	mov	r2, r4
 8016b48:	69b3      	ldr	r3, [r6, #24]
 8016b4a:	463d      	mov	r5, r7
 8016b4c:	f8dd b018 	ldr.w	fp, [sp, #24]
 8016b50:	9f08      	ldr	r7, [sp, #32]
 8016b52:	1a82      	subs	r2, r0, r2
 8016b54:	9c07      	ldr	r4, [sp, #28]
 8016b56:	3b02      	subs	r3, #2
					fs->winsect -= n;							/* Restore window offset */
 8016b58:	6332      	str	r2, [r6, #48]	; 0x30
 8016b5a:	e5cc      	b.n	80166f6 <dir_register+0x64a>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8016b5c:	f106 0534 	add.w	r5, r6, #52	; 0x34
		wsect = fs->winsect;	/* Current sector number */
 8016b60:	6b32      	ldr	r2, [r6, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8016b62:	2301      	movs	r3, #1
 8016b64:	7870      	ldrb	r0, [r6, #1]
 8016b66:	4629      	mov	r1, r5
 8016b68:	9205      	str	r2, [sp, #20]
 8016b6a:	f7fd fd9f 	bl	80146ac <disk_write>
 8016b6e:	2800      	cmp	r0, #0
 8016b70:	f47f adee 	bne.w	8016750 <dir_register+0x6a4>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8016b74:	6a71      	ldr	r1, [r6, #36]	; 0x24
 8016b76:	9a05      	ldr	r2, [sp, #20]
 8016b78:	69f3      	ldr	r3, [r6, #28]
 8016b7a:	1a51      	subs	r1, r2, r1
			fs->wflag = 0;
 8016b7c:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8016b7e:	4299      	cmp	r1, r3
 8016b80:	f4bf ae07 	bcs.w	8016792 <dir_register+0x6e6>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8016b84:	78b1      	ldrb	r1, [r6, #2]
 8016b86:	2901      	cmp	r1, #1
 8016b88:	f67f ae03 	bls.w	8016792 <dir_register+0x6e6>
 8016b8c:	e9cd 4705 	strd	r4, r7, [sp, #20]
 8016b90:	462f      	mov	r7, r5
 8016b92:	460c      	mov	r4, r1
 8016b94:	4615      	mov	r5, r2
 8016b96:	e000      	b.n	8016b9a <dir_register+0xaee>
 8016b98:	69f3      	ldr	r3, [r6, #28]
					wsect += fs->fsize;
 8016b9a:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8016b9c:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8016b9e:	2301      	movs	r3, #1
 8016ba0:	4639      	mov	r1, r7
 8016ba2:	462a      	mov	r2, r5
 8016ba4:	7870      	ldrb	r0, [r6, #1]
 8016ba6:	f7fd fd81 	bl	80146ac <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8016baa:	2c01      	cmp	r4, #1
 8016bac:	d1f4      	bne.n	8016b98 <dir_register+0xaec>
 8016bae:	463d      	mov	r5, r7
 8016bb0:	9c05      	ldr	r4, [sp, #20]
 8016bb2:	9f06      	ldr	r7, [sp, #24]
 8016bb4:	e5ed      	b.n	8016792 <dir_register+0x6e6>
 8016bb6:	8971      	ldrh	r1, [r6, #10]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8016bb8:	2200      	movs	r2, #0
 8016bba:	e5fe      	b.n	80167ba <dir_register+0x70e>

08016bbc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8016bbc:	b530      	push	{r4, r5, lr}
 8016bbe:	b083      	sub	sp, #12
 8016bc0:	e9cd 1000 	strd	r1, r0, [sp]
	if (*path) {	/* If the pointer is not a null */
 8016bc4:	b189      	cbz	r1, 8016bea <f_mount+0x2e>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8016bc6:	780c      	ldrb	r4, [r1, #0]
 8016bc8:	2c1f      	cmp	r4, #31
 8016bca:	d911      	bls.n	8016bf0 <f_mount+0x34>
 8016bcc:	2c3a      	cmp	r4, #58	; 0x3a
 8016bce:	d00f      	beq.n	8016bf0 <f_mount+0x34>
 8016bd0:	4608      	mov	r0, r1
 8016bd2:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8016bd6:	2b1f      	cmp	r3, #31
 8016bd8:	d90c      	bls.n	8016bf4 <f_mount+0x38>
 8016bda:	2b3a      	cmp	r3, #58	; 0x3a
 8016bdc:	d1f9      	bne.n	8016bd2 <f_mount+0x16>
			i = *tp++ - '0';
 8016bde:	3101      	adds	r1, #1
 8016be0:	3c30      	subs	r4, #48	; 0x30
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8016be2:	4288      	cmp	r0, r1
 8016be4:	d101      	bne.n	8016bea <f_mount+0x2e>
 8016be6:	2c01      	cmp	r4, #1
 8016be8:	d907      	bls.n	8016bfa <f_mount+0x3e>
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
 8016bea:	200b      	movs	r0, #11

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 8016bec:	b003      	add	sp, #12
 8016bee:	bd30      	pop	{r4, r5, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8016bf0:	4623      	mov	r3, r4
 8016bf2:	4608      	mov	r0, r1
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8016bf4:	2b3a      	cmp	r3, #58	; 0x3a
 8016bf6:	d0f2      	beq.n	8016bde <f_mount+0x22>
		vol = 0;		/* Drive 0 */
 8016bf8:	2400      	movs	r4, #0
	cfs = FatFs[vol];					/* Pointer to fs object */
 8016bfa:	4d1d      	ldr	r5, [pc, #116]	; (8016c70 <f_mount+0xb4>)
 8016bfc:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
	if (cfs) {
 8016c00:	b173      	cbz	r3, 8016c20 <f_mount+0x64>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8016c02:	491c      	ldr	r1, [pc, #112]	; (8016c74 <f_mount+0xb8>)
 8016c04:	6808      	ldr	r0, [r1, #0]
 8016c06:	4283      	cmp	r3, r0
 8016c08:	d021      	beq.n	8016c4e <f_mount+0x92>
 8016c0a:	6908      	ldr	r0, [r1, #16]
 8016c0c:	4298      	cmp	r0, r3
 8016c0e:	d023      	beq.n	8016c58 <f_mount+0x9c>
 8016c10:	6a08      	ldr	r0, [r1, #32]
 8016c12:	4283      	cmp	r3, r0
 8016c14:	d025      	beq.n	8016c62 <f_mount+0xa6>
 8016c16:	6b08      	ldr	r0, [r1, #48]	; 0x30
 8016c18:	4298      	cmp	r0, r3
 8016c1a:	d015      	beq.n	8016c48 <f_mount+0x8c>
		cfs->fs_type = 0;				/* Clear old fs object */
 8016c1c:	2100      	movs	r1, #0
 8016c1e:	7019      	strb	r1, [r3, #0]
	if (fs) {
 8016c20:	9b01      	ldr	r3, [sp, #4]
 8016c22:	b163      	cbz	r3, 8016c3e <f_mount+0x82>
		fs->fs_type = 0;				/* Clear new fs object */
 8016c24:	2000      	movs	r0, #0
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8016c26:	2a01      	cmp	r2, #1
	FatFs[vol] = fs;					/* Register new fs object */
 8016c28:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
		fs->fs_type = 0;				/* Clear new fs object */
 8016c2c:	7018      	strb	r0, [r3, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8016c2e:	d1dd      	bne.n	8016bec <f_mount+0x30>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8016c30:	4602      	mov	r2, r0
 8016c32:	a901      	add	r1, sp, #4
 8016c34:	4668      	mov	r0, sp
 8016c36:	f7fe fb75 	bl	8015324 <find_volume>
}
 8016c3a:	b003      	add	sp, #12
 8016c3c:	bd30      	pop	{r4, r5, pc}
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8016c3e:	4618      	mov	r0, r3
	FatFs[vol] = fs;					/* Register new fs object */
 8016c40:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
}
 8016c44:	b003      	add	sp, #12
 8016c46:	bd30      	pop	{r4, r5, pc}
		if (Files[i].fs == fs) Files[i].fs = 0;
 8016c48:	2000      	movs	r0, #0
 8016c4a:	6308      	str	r0, [r1, #48]	; 0x30
 8016c4c:	e7e6      	b.n	8016c1c <f_mount+0x60>
 8016c4e:	2000      	movs	r0, #0
 8016c50:	6008      	str	r0, [r1, #0]
 8016c52:	6908      	ldr	r0, [r1, #16]
 8016c54:	4298      	cmp	r0, r3
 8016c56:	d1db      	bne.n	8016c10 <f_mount+0x54>
 8016c58:	2000      	movs	r0, #0
 8016c5a:	6108      	str	r0, [r1, #16]
 8016c5c:	6a08      	ldr	r0, [r1, #32]
 8016c5e:	4283      	cmp	r3, r0
 8016c60:	d1d9      	bne.n	8016c16 <f_mount+0x5a>
 8016c62:	2000      	movs	r0, #0
 8016c64:	6208      	str	r0, [r1, #32]
 8016c66:	6b08      	ldr	r0, [r1, #48]	; 0x30
 8016c68:	4298      	cmp	r0, r3
 8016c6a:	d1d7      	bne.n	8016c1c <f_mount+0x60>
 8016c6c:	e7ec      	b.n	8016c48 <f_mount+0x8c>
 8016c6e:	bf00      	nop
 8016c70:	20009524 	.word	0x20009524
 8016c74:	2000952c 	.word	0x2000952c

08016c78 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8016c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c7c:	b093      	sub	sp, #76	; 0x4c
 8016c7e:	9103      	str	r1, [sp, #12]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8016c80:	2800      	cmp	r0, #0
 8016c82:	f000 80ff 	beq.w	8016e84 <f_open+0x20c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8016c86:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 8016c8a:	4616      	mov	r6, r2
 8016c8c:	4604      	mov	r4, r0
 8016c8e:	a904      	add	r1, sp, #16
 8016c90:	a803      	add	r0, sp, #12
 8016c92:	463a      	mov	r2, r7
 8016c94:	f7fe fb46 	bl	8015324 <find_volume>
	if (res == FR_OK) {
 8016c98:	4605      	mov	r5, r0
 8016c9a:	b128      	cbz	r0, 8016ca8 <f_open+0x30>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8016c9c:	2300      	movs	r3, #0
 8016c9e:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 8016ca0:	4628      	mov	r0, r5
 8016ca2:	b013      	add	sp, #76	; 0x4c
 8016ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dj.obj.fs = fs;
 8016ca8:	9b04      	ldr	r3, [sp, #16]
		INIT_NAMBUF(fs);
 8016caa:	f44f 7000 	mov.w	r0, #512	; 0x200
		dj.obj.fs = fs;
 8016cae:	9305      	str	r3, [sp, #20]
		INIT_NAMBUF(fs);
 8016cb0:	f001 fd90 	bl	80187d4 <ff_memalloc>
 8016cb4:	4680      	mov	r8, r0
 8016cb6:	2800      	cmp	r0, #0
 8016cb8:	f000 80e9 	beq.w	8016e8e <f_open+0x216>
		res = follow_path(&dj, path);	/* Follow the file path */
 8016cbc:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
		INIT_NAMBUF(fs);
 8016cc0:	60d8      	str	r0, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8016cc2:	a805      	add	r0, sp, #20
 8016cc4:	f7fe ffae 	bl	8015c24 <follow_path>
		if (res == FR_OK) {
 8016cc8:	2800      	cmp	r0, #0
 8016cca:	d139      	bne.n	8016d40 <f_open+0xc8>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8016ccc:	f99d 3043 	ldrsb.w	r3, [sp, #67]	; 0x43
 8016cd0:	2b00      	cmp	r3, #0
 8016cd2:	f2c0 8121 	blt.w	8016f18 <f_open+0x2a0>
		if (Files[i].fs) {	/* Existing entry */
 8016cd6:	f8df 949c 	ldr.w	r9, [pc, #1180]	; 8017174 <f_open+0x4fc>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8016cda:	f027 0301 	bic.w	r3, r7, #1
				Files[i].ofs == dp->dptr) break;
 8016cde:	990a      	ldr	r1, [sp, #40]	; 0x28
		if (Files[i].fs) {	/* Existing entry */
 8016ce0:	f8d9 2000 	ldr.w	r2, [r9]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8016ce4:	9805      	ldr	r0, [sp, #20]
				Files[i].clu == dp->obj.sclust &&
 8016ce6:	f8dd c01c 	ldr.w	ip, [sp, #28]
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8016cea:	9300      	str	r3, [sp, #0]
				Files[i].ofs == dp->dptr) break;
 8016cec:	9101      	str	r1, [sp, #4]
		if (Files[i].fs) {	/* Existing entry */
 8016cee:	2a00      	cmp	r2, #0
 8016cf0:	f000 80cf 	beq.w	8016e92 <f_open+0x21a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8016cf4:	4290      	cmp	r0, r2
 8016cf6:	f000 80cf 	beq.w	8016e98 <f_open+0x220>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8016cfa:	46ae      	mov	lr, r5
		if (Files[i].fs) {	/* Existing entry */
 8016cfc:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8016d00:	2900      	cmp	r1, #0
 8016d02:	f000 81d1 	beq.w	80170a8 <f_open+0x430>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8016d06:	4288      	cmp	r0, r1
 8016d08:	f000 81db 	beq.w	80170c2 <f_open+0x44a>
		if (Files[i].fs) {	/* Existing entry */
 8016d0c:	f8d9 1020 	ldr.w	r1, [r9, #32]
 8016d10:	2900      	cmp	r1, #0
 8016d12:	f000 81cc 	beq.w	80170ae <f_open+0x436>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8016d16:	4288      	cmp	r0, r1
 8016d18:	f000 81e0 	beq.w	80170dc <f_open+0x464>
		if (Files[i].fs) {	/* Existing entry */
 8016d1c:	f8d9 1030 	ldr.w	r1, [r9, #48]	; 0x30
 8016d20:	2900      	cmp	r1, #0
 8016d22:	f000 80ce 	beq.w	8016ec2 <f_open+0x24a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8016d26:	4281      	cmp	r1, r0
 8016d28:	f000 80d9 	beq.w	8016ede <f_open+0x266>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8016d2c:	f1be 0f00 	cmp.w	lr, #0
 8016d30:	f040 80c7 	bne.w	8016ec2 <f_open+0x24a>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8016d34:	2012      	movs	r0, #18
		FREE_NAMBUF();
 8016d36:	4605      	mov	r5, r0
 8016d38:	4640      	mov	r0, r8
 8016d3a:	f001 fd4d 	bl	80187d8 <ff_memfree>
 8016d3e:	e7ad      	b.n	8016c9c <f_open+0x24>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8016d40:	f016 0f1c 	tst.w	r6, #28
 8016d44:	d0f7      	beq.n	8016d36 <f_open+0xbe>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8016d46:	2804      	cmp	r0, #4
 8016d48:	d1f5      	bne.n	8016d36 <f_open+0xbe>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8016d4a:	f8df 9428 	ldr.w	r9, [pc, #1064]	; 8017174 <f_open+0x4fc>
 8016d4e:	f8d9 3000 	ldr.w	r3, [r9]
 8016d52:	b14b      	cbz	r3, 8016d68 <f_open+0xf0>
 8016d54:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016d58:	b133      	cbz	r3, 8016d68 <f_open+0xf0>
 8016d5a:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8016d5e:	b11b      	cbz	r3, 8016d68 <f_open+0xf0>
 8016d60:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 8016d64:	2b00      	cmp	r3, #0
 8016d66:	d1e5      	bne.n	8016d34 <f_open+0xbc>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8016d68:	a805      	add	r0, sp, #20
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8016d6a:	f047 0708 	orr.w	r7, r7, #8
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8016d6e:	f7ff f99d 	bl	80160ac <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8016d72:	2800      	cmp	r0, #0
 8016d74:	d1df      	bne.n	8016d36 <f_open+0xbe>
				dw = GET_FATTIME();
 8016d76:	f7fd fcb5 	bl	80146e4 <get_fattime>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8016d7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 8016d7c:	f3c0 2107 	ubfx	r1, r0, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8016d80:	f3c0 4207 	ubfx	r2, r0, #16, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8016d84:	fa5f fe80 	uxtb.w	lr, r0
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8016d88:	f04f 0c20 	mov.w	ip, #32
	*ptr++ = (BYTE)val;
 8016d8c:	0e00      	lsrs	r0, r0, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8016d8e:	73d9      	strb	r1, [r3, #15]
	*ptr++ = (BYTE)val; val >>= 8;
 8016d90:	f883 e00e 	strb.w	lr, [r3, #14]
	*ptr++ = (BYTE)val; val >>= 8;
 8016d94:	741a      	strb	r2, [r3, #16]
	*ptr++ = (BYTE)val;
 8016d96:	7458      	strb	r0, [r3, #17]
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8016d98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8016d9a:	9e04      	ldr	r6, [sp, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 8016d9c:	75d9      	strb	r1, [r3, #23]
	*ptr++ = (BYTE)val; val >>= 8;
 8016d9e:	f883 e016 	strb.w	lr, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 8016da2:	761a      	strb	r2, [r3, #24]
	*ptr++ = (BYTE)val;
 8016da4:	7658      	strb	r0, [r3, #25]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8016da6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016da8:	f883 c00b 	strb.w	ip, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8016dac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	if (fs->fs_type == FS_FAT32) {
 8016dae:	7832      	ldrb	r2, [r6, #0]
	rv = rv << 8 | ptr[0];
 8016db0:	7ed9      	ldrb	r1, [r3, #27]
 8016db2:	f893 a01a 	ldrb.w	sl, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 8016db6:	2a03      	cmp	r2, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8016db8:	ea4a 2a01 	orr.w	sl, sl, r1, lsl #8
	if (fs->fs_type == FS_FAT32) {
 8016dbc:	d105      	bne.n	8016dca <f_open+0x152>
	rv = rv << 8 | ptr[0];
 8016dbe:	7d59      	ldrb	r1, [r3, #21]
 8016dc0:	7d1a      	ldrb	r2, [r3, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8016dc2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8016dc6:	ea4a 4a02 	orr.w	sl, sl, r2, lsl #16
	*ptr++ = (BYTE)val; val >>= 8;
 8016dca:	2200      	movs	r2, #0
 8016dcc:	769a      	strb	r2, [r3, #26]
	*ptr++ = (BYTE)val;
 8016dce:	76da      	strb	r2, [r3, #27]
	if (fs->fs_type == FS_FAT32) {
 8016dd0:	7831      	ldrb	r1, [r6, #0]
 8016dd2:	2903      	cmp	r1, #3
 8016dd4:	d101      	bne.n	8016dda <f_open+0x162>
	*ptr++ = (BYTE)val; val >>= 8;
 8016dd6:	751a      	strb	r2, [r3, #20]
	*ptr++ = (BYTE)val;
 8016dd8:	755a      	strb	r2, [r3, #21]
					st_dword(dj.dir + DIR_FileSize, 0);
 8016dda:	990d      	ldr	r1, [sp, #52]	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 8016ddc:	2200      	movs	r2, #0
					fs->wflag = 1;
 8016dde:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8016de0:	61ca      	str	r2, [r1, #28]
					fs->wflag = 1;
 8016de2:	70f3      	strb	r3, [r6, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 8016de4:	f1ba 0f00 	cmp.w	sl, #0
 8016de8:	d017      	beq.n	8016e1a <f_open+0x1a2>
						dw = fs->winsect;
 8016dea:	6b33      	ldr	r3, [r6, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
 8016dec:	a805      	add	r0, sp, #20
 8016dee:	4651      	mov	r1, sl
						dw = fs->winsect;
 8016df0:	9300      	str	r3, [sp, #0]
						res = remove_chain(&dj.obj, cl, 0);
 8016df2:	f7ff f8b3 	bl	8015f5c <remove_chain>
						if (res == FR_OK) {
 8016df6:	2800      	cmp	r0, #0
 8016df8:	d19d      	bne.n	8016d36 <f_open+0xbe>
							res = move_window(fs, dw);
 8016dfa:	9e04      	ldr	r6, [sp, #16]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8016dfc:	9b00      	ldr	r3, [sp, #0]
 8016dfe:	6b32      	ldr	r2, [r6, #48]	; 0x30
 8016e00:	4293      	cmp	r3, r2
 8016e02:	f000 81a3 	beq.w	801714c <f_open+0x4d4>
 8016e06:	4619      	mov	r1, r3
 8016e08:	4630      	mov	r0, r6
 8016e0a:	f7fd fcf3 	bl	80147f4 <move_window.part.0>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8016e0e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8016e12:	9e04      	ldr	r6, [sp, #16]
 8016e14:	6133      	str	r3, [r6, #16]
		if (res == FR_OK) {
 8016e16:	2800      	cmp	r0, #0
 8016e18:	d18d      	bne.n	8016d36 <f_open+0xbe>
 8016e1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016e1c:	9805      	ldr	r0, [sp, #20]
 8016e1e:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8016e22:	9301      	str	r3, [sp, #4]
				mode |= FA_MODIFIED;
 8016e24:	f047 0740 	orr.w	r7, r7, #64	; 0x40
 8016e28:	f027 0301 	bic.w	r3, r7, #1
 8016e2c:	9300      	str	r3, [sp, #0]
		if (Files[i].fs == dp->obj.fs &&
 8016e2e:	f8d9 1000 	ldr.w	r1, [r9]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8016e32:	6b32      	ldr	r2, [r6, #48]	; 0x30
			fp->dir_ptr = dj.dir;
 8016e34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		if (Files[i].fs == dp->obj.fs &&
 8016e36:	4281      	cmp	r1, r0
 8016e38:	9102      	str	r1, [sp, #8]
			fp->dir_ptr = dj.dir;
 8016e3a:	e9c4 2309 	strd	r2, r3, [r4, #36]	; 0x24
		if (Files[i].fs == dp->obj.fs &&
 8016e3e:	d06d      	beq.n	8016f1c <f_open+0x2a4>
 8016e40:	f8d9 e010 	ldr.w	lr, [r9, #16]
 8016e44:	4586      	cmp	lr, r0
 8016e46:	f000 80dc 	beq.w	8017002 <f_open+0x38a>
 8016e4a:	f8d9 b020 	ldr.w	fp, [r9, #32]
 8016e4e:	4583      	cmp	fp, r0
 8016e50:	f000 80e4 	beq.w	801701c <f_open+0x3a4>
 8016e54:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
 8016e58:	4282      	cmp	r2, r0
 8016e5a:	f000 80ec 	beq.w	8017036 <f_open+0x3be>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8016e5e:	9902      	ldr	r1, [sp, #8]
 8016e60:	2900      	cmp	r1, #0
 8016e62:	f000 80fd 	beq.w	8017060 <f_open+0x3e8>
 8016e66:	f1be 0f00 	cmp.w	lr, #0
 8016e6a:	f000 8144 	beq.w	80170f6 <f_open+0x47e>
 8016e6e:	f1bb 0f00 	cmp.w	fp, #0
 8016e72:	f000 80f4 	beq.w	801705e <f_open+0x3e6>
 8016e76:	2a00      	cmp	r2, #0
 8016e78:	f000 813f 	beq.w	80170fa <f_open+0x482>
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8016e7c:	2300      	movs	r3, #0
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8016e7e:	2002      	movs	r0, #2
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8016e80:	6123      	str	r3, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8016e82:	e758      	b.n	8016d36 <f_open+0xbe>
	if (!fp) return FR_INVALID_OBJECT;
 8016e84:	2509      	movs	r5, #9
}
 8016e86:	4628      	mov	r0, r5
 8016e88:	b013      	add	sp, #76	; 0x4c
 8016e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		INIT_NAMBUF(fs);
 8016e8e:	2511      	movs	r5, #17
 8016e90:	e706      	b.n	8016ca0 <f_open+0x28>
			be = 1;
 8016e92:	f04f 0e01 	mov.w	lr, #1
 8016e96:	e731      	b.n	8016cfc <f_open+0x84>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8016e98:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8016e9c:	4594      	cmp	ip, r2
 8016e9e:	f47f af2c 	bne.w	8016cfa <f_open+0x82>
				Files[i].clu == dp->obj.sclust &&
 8016ea2:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8016ea6:	4291      	cmp	r1, r2
 8016ea8:	f47f af27 	bne.w	8016cfa <f_open+0x82>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8016eac:	462a      	mov	r2, r5
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8016eae:	2b00      	cmp	r3, #0
 8016eb0:	f040 80d3 	bne.w	801705a <f_open+0x3e2>
 8016eb4:	eb09 1202 	add.w	r2, r9, r2, lsl #4
 8016eb8:	8992      	ldrh	r2, [r2, #12]
 8016eba:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8016ebe:	f000 80cc 	beq.w	801705a <f_open+0x3e2>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8016ec2:	f016 0f1c 	tst.w	r6, #28
 8016ec6:	d017      	beq.n	8016ef8 <f_open+0x280>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8016ec8:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8016ecc:	f013 0f11 	tst.w	r3, #17
 8016ed0:	f040 80f0 	bne.w	80170b4 <f_open+0x43c>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8016ed4:	0773      	lsls	r3, r6, #29
 8016ed6:	f140 80db 	bpl.w	8017090 <f_open+0x418>
 8016eda:	2008      	movs	r0, #8
 8016edc:	e72b      	b.n	8016d36 <f_open+0xbe>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8016ede:	f8d9 1034 	ldr.w	r1, [r9, #52]	; 0x34
 8016ee2:	4561      	cmp	r1, ip
 8016ee4:	f47f af22 	bne.w	8016d2c <f_open+0xb4>
				Files[i].clu == dp->obj.sclust &&
 8016ee8:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
 8016eec:	9901      	ldr	r1, [sp, #4]
 8016eee:	428a      	cmp	r2, r1
 8016ef0:	f47f af1c 	bne.w	8016d2c <f_open+0xb4>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8016ef4:	2203      	movs	r2, #3
 8016ef6:	e7da      	b.n	8016eae <f_open+0x236>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8016ef8:	f89d 201a 	ldrb.w	r2, [sp, #26]
 8016efc:	06d1      	lsls	r1, r2, #27
 8016efe:	f100 80db 	bmi.w	80170b8 <f_open+0x440>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8016f02:	07b1      	lsls	r1, r6, #30
 8016f04:	f140 80c9 	bpl.w	801709a <f_open+0x422>
 8016f08:	07d2      	lsls	r2, r2, #31
 8016f0a:	f140 80c6 	bpl.w	801709a <f_open+0x422>
		FREE_NAMBUF();
 8016f0e:	4640      	mov	r0, r8
						res = FR_DENIED;
 8016f10:	2507      	movs	r5, #7
		FREE_NAMBUF();
 8016f12:	f001 fc61 	bl	80187d8 <ff_memfree>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8016f16:	e6c1      	b.n	8016c9c <f_open+0x24>
				res = FR_INVALID_NAME;
 8016f18:	2006      	movs	r0, #6
 8016f1a:	e70c      	b.n	8016d36 <f_open+0xbe>
		if (Files[i].fs == dp->obj.fs &&
 8016f1c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8016f20:	4594      	cmp	ip, r2
 8016f22:	d18d      	bne.n	8016e40 <f_open+0x1c8>
			Files[i].clu == dp->obj.sclust &&
 8016f24:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8016f28:	9901      	ldr	r1, [sp, #4]
 8016f2a:	428a      	cmp	r2, r1
 8016f2c:	d188      	bne.n	8016e40 <f_open+0x1c8>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8016f2e:	2100      	movs	r1, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8016f30:	9a00      	ldr	r2, [sp, #0]
 8016f32:	eb09 1001 	add.w	r0, r9, r1, lsl #4
 8016f36:	2a00      	cmp	r2, #0
 8016f38:	d05b      	beq.n	8016ff2 <f_open+0x37a>
 8016f3a:	8980      	ldrh	r0, [r0, #12]
 8016f3c:	010a      	lsls	r2, r1, #4
 8016f3e:	2800      	cmp	r0, #0
 8016f40:	d19c      	bne.n	8016e7c <f_open+0x204>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8016f42:	f44f 7e80 	mov.w	lr, #256	; 0x100
	return i + 1;
 8016f46:	3101      	adds	r1, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8016f48:	4491      	add	r9, r2
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8016f4a:	6121      	str	r1, [r4, #16]
	if (fs->fs_type == FS_FAT32) {
 8016f4c:	7831      	ldrb	r1, [r6, #0]
	rv = rv << 8 | ptr[0];
 8016f4e:	7ed8      	ldrb	r0, [r3, #27]
 8016f50:	f893 a01a 	ldrb.w	sl, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 8016f54:	2903      	cmp	r1, #3
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8016f56:	f8a9 e00c 	strh.w	lr, [r9, #12]
	cl = ld_word(dir + DIR_FstClusLO);
 8016f5a:	ea4a 2a00 	orr.w	sl, sl, r0, lsl #8
	if (fs->fs_type == FS_FAT32) {
 8016f5e:	d105      	bne.n	8016f6c <f_open+0x2f4>
	rv = rv << 8 | ptr[0];
 8016f60:	7d59      	ldrb	r1, [r3, #21]
 8016f62:	7d1a      	ldrb	r2, [r3, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8016f64:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8016f68:	ea4a 4a02 	orr.w	sl, sl, r2, lsl #16
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8016f6c:	f8c4 a008 	str.w	sl, [r4, #8]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8016f70:	2100      	movs	r1, #0
	rv = rv << 8 | ptr[2];
 8016f72:	8bd8      	ldrh	r0, [r3, #30]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8016f74:	f104 0930 	add.w	r9, r4, #48	; 0x30
	rv = rv << 8 | ptr[1];
 8016f78:	7f5a      	ldrb	r2, [r3, #29]
	rv = rv << 8 | ptr[0];
 8016f7a:	f893 b01c 	ldrb.w	fp, [r3, #28]
	rv = rv << 8 | ptr[1];
 8016f7e:	ea42 2300 	orr.w	r3, r2, r0, lsl #8
			fp->obj.id = fs->id;
 8016f82:	88f2      	ldrh	r2, [r6, #6]
 8016f84:	4648      	mov	r0, r9
			fp->flag = mode;		/* Set file access mode */
 8016f86:	7527      	strb	r7, [r4, #20]
	rv = rv << 8 | ptr[0];
 8016f88:	ea4b 2b03 	orr.w	fp, fp, r3, lsl #8
			fp->obj.id = fs->id;
 8016f8c:	80a2      	strh	r2, [r4, #4]
			fp->obj.fs = fs;	 	/* Validate the file object */
 8016f8e:	6026      	str	r6, [r4, #0]
 8016f90:	f44f 7200 	mov.w	r2, #512	; 0x200
			fp->cltbl = 0;			/* Disable fast seek mode */
 8016f94:	62e1      	str	r1, [r4, #44]	; 0x2c
			fp->err = 0;			/* Clear error flag */
 8016f96:	7561      	strb	r1, [r4, #21]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8016f98:	f8c4 b00c 	str.w	fp, [r4, #12]
			fp->sect = 0;			/* Invalidate current data sector */
 8016f9c:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8016f9e:	61a1      	str	r1, [r4, #24]
 8016fa0:	f00d ff4c 	bl	8024e3c <memset>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8016fa4:	f017 0720 	ands.w	r7, r7, #32
 8016fa8:	d01e      	beq.n	8016fe8 <f_open+0x370>
 8016faa:	f1bb 0f00 	cmp.w	fp, #0
 8016fae:	d050      	beq.n	8017052 <f_open+0x3da>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8016fb0:	8973      	ldrh	r3, [r6, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8016fb2:	f8c4 b018 	str.w	fp, [r4, #24]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8016fb6:	ebbb 2f43 	cmp.w	fp, r3, lsl #9
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8016fba:	ea4f 2643 	mov.w	r6, r3, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8016fbe:	f240 809e 	bls.w	80170fe <f_open+0x486>
 8016fc2:	4651      	mov	r1, sl
 8016fc4:	e005      	b.n	8016fd2 <f_open+0x35a>
 8016fc6:	1c47      	adds	r7, r0, #1
 8016fc8:	f000 80c9 	beq.w	801715e <f_open+0x4e6>
 8016fcc:	455e      	cmp	r6, fp
 8016fce:	f080 80c6 	bcs.w	801715e <f_open+0x4e6>
					clst = get_fat(&fp->obj, clst);
 8016fd2:	6820      	ldr	r0, [r4, #0]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8016fd4:	ebab 0b06 	sub.w	fp, fp, r6
					clst = get_fat(&fp->obj, clst);
 8016fd8:	f7fd fce4 	bl	80149a4 <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
 8016fdc:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 8016fde:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 8016fe0:	d8f1      	bhi.n	8016fc6 <f_open+0x34e>
				fp->clust = clst;
 8016fe2:	61e0      	str	r0, [r4, #28]
					if (clst <= 1) res = FR_INT_ERR;
 8016fe4:	2002      	movs	r0, #2
 8016fe6:	e6a6      	b.n	8016d36 <f_open+0xbe>
		FREE_NAMBUF();
 8016fe8:	4640      	mov	r0, r8
 8016fea:	463d      	mov	r5, r7
 8016fec:	f001 fbf4 	bl	80187d8 <ff_memfree>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8016ff0:	e656      	b.n	8016ca0 <f_open+0x28>
 8016ff2:	f8b0 e00c 	ldrh.w	lr, [r0, #12]
 8016ff6:	010a      	lsls	r2, r1, #4
 8016ff8:	f10e 0e01 	add.w	lr, lr, #1
 8016ffc:	fa1f fe8e 	uxth.w	lr, lr
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8017000:	e7a1      	b.n	8016f46 <f_open+0x2ce>
		if (Files[i].fs == dp->obj.fs &&
 8017002:	f8d9 2014 	ldr.w	r2, [r9, #20]
 8017006:	4594      	cmp	ip, r2
 8017008:	f47f af1f 	bne.w	8016e4a <f_open+0x1d2>
			Files[i].clu == dp->obj.sclust &&
 801700c:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8017010:	9901      	ldr	r1, [sp, #4]
 8017012:	428a      	cmp	r2, r1
 8017014:	f47f af19 	bne.w	8016e4a <f_open+0x1d2>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8017018:	2101      	movs	r1, #1
 801701a:	e789      	b.n	8016f30 <f_open+0x2b8>
		if (Files[i].fs == dp->obj.fs &&
 801701c:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 8017020:	4594      	cmp	ip, r2
 8017022:	f47f af17 	bne.w	8016e54 <f_open+0x1dc>
			Files[i].clu == dp->obj.sclust &&
 8017026:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 801702a:	9901      	ldr	r1, [sp, #4]
 801702c:	428a      	cmp	r2, r1
 801702e:	f47f af11 	bne.w	8016e54 <f_open+0x1dc>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8017032:	2102      	movs	r1, #2
 8017034:	e77c      	b.n	8016f30 <f_open+0x2b8>
		if (Files[i].fs == dp->obj.fs &&
 8017036:	f8d9 1034 	ldr.w	r1, [r9, #52]	; 0x34
 801703a:	458c      	cmp	ip, r1
 801703c:	f47f af0f 	bne.w	8016e5e <f_open+0x1e6>
			Files[i].clu == dp->obj.sclust &&
 8017040:	f8d9 1038 	ldr.w	r1, [r9, #56]	; 0x38
 8017044:	468a      	mov	sl, r1
 8017046:	9901      	ldr	r1, [sp, #4]
 8017048:	458a      	cmp	sl, r1
 801704a:	f47f af08 	bne.w	8016e5e <f_open+0x1e6>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801704e:	2103      	movs	r1, #3
 8017050:	e76e      	b.n	8016f30 <f_open+0x2b8>
		FREE_NAMBUF();
 8017052:	4640      	mov	r0, r8
 8017054:	f001 fbc0 	bl	80187d8 <ff_memfree>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8017058:	e622      	b.n	8016ca0 <f_open+0x28>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801705a:	2010      	movs	r0, #16
 801705c:	e66b      	b.n	8016d36 <f_open+0xbe>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801705e:	2102      	movs	r1, #2
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8017060:	9a00      	ldr	r2, [sp, #0]
		Files[i].fs = dp->obj.fs;
 8017062:	eb09 1a01 	add.w	sl, r9, r1, lsl #4
		Files[i].ctr = 0;
 8017066:	f04f 0b00 	mov.w	fp, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801706a:	2a00      	cmp	r2, #0
		Files[i].fs = dp->obj.fs;
 801706c:	ea4f 1201 	mov.w	r2, r1, lsl #4
		Files[i].clu = dp->obj.sclust;
 8017070:	f8ca c004 	str.w	ip, [sl, #4]
		Files[i].fs = dp->obj.fs;
 8017074:	f849 0002 	str.w	r0, [r9, r2]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8017078:	bf18      	it	ne
 801707a:	f44f 7e80 	movne.w	lr, #256	; 0x100
		Files[i].ofs = dp->dptr;
 801707e:	9801      	ldr	r0, [sp, #4]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8017080:	bf08      	it	eq
 8017082:	f04f 0e01 	moveq.w	lr, #1
		Files[i].ctr = 0;
 8017086:	f8aa b00c 	strh.w	fp, [sl, #12]
		Files[i].ofs = dp->dptr;
 801708a:	f8ca 0008 	str.w	r0, [sl, #8]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801708e:	e75a      	b.n	8016f46 <f_open+0x2ce>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8017090:	0736      	lsls	r6, r6, #28
 8017092:	f53f ae70 	bmi.w	8016d76 <f_open+0xfe>
 8017096:	9e04      	ldr	r6, [sp, #16]
 8017098:	e6c9      	b.n	8016e2e <f_open+0x1b6>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801709a:	f006 0208 	and.w	r2, r6, #8
 801709e:	9e04      	ldr	r6, [sp, #16]
 80170a0:	2a00      	cmp	r2, #0
 80170a2:	f43f aec3 	beq.w	8016e2c <f_open+0x1b4>
 80170a6:	e6bd      	b.n	8016e24 <f_open+0x1ac>
			be = 1;
 80170a8:	f04f 0e01 	mov.w	lr, #1
 80170ac:	e62e      	b.n	8016d0c <f_open+0x94>
 80170ae:	f04f 0e01 	mov.w	lr, #1
 80170b2:	e633      	b.n	8016d1c <f_open+0xa4>
					res = FR_DENIED;
 80170b4:	2007      	movs	r0, #7
 80170b6:	e63e      	b.n	8016d36 <f_open+0xbe>
		FREE_NAMBUF();
 80170b8:	4640      	mov	r0, r8
					res = FR_NO_FILE;
 80170ba:	2504      	movs	r5, #4
		FREE_NAMBUF();
 80170bc:	f001 fb8c 	bl	80187d8 <ff_memfree>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80170c0:	e5ec      	b.n	8016c9c <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80170c2:	f8d9 1014 	ldr.w	r1, [r9, #20]
 80170c6:	458c      	cmp	ip, r1
 80170c8:	f47f ae20 	bne.w	8016d0c <f_open+0x94>
				Files[i].clu == dp->obj.sclust &&
 80170cc:	f8d9 2018 	ldr.w	r2, [r9, #24]
 80170d0:	9901      	ldr	r1, [sp, #4]
 80170d2:	4291      	cmp	r1, r2
 80170d4:	f47f ae1a 	bne.w	8016d0c <f_open+0x94>
	for (i = be = 0; i < _FS_LOCK; i++) {
 80170d8:	2201      	movs	r2, #1
 80170da:	e6e8      	b.n	8016eae <f_open+0x236>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80170dc:	f8d9 1024 	ldr.w	r1, [r9, #36]	; 0x24
 80170e0:	458c      	cmp	ip, r1
 80170e2:	f47f ae1b 	bne.w	8016d1c <f_open+0xa4>
				Files[i].clu == dp->obj.sclust &&
 80170e6:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 80170ea:	9901      	ldr	r1, [sp, #4]
 80170ec:	4291      	cmp	r1, r2
 80170ee:	f47f ae15 	bne.w	8016d1c <f_open+0xa4>
	for (i = be = 0; i < _FS_LOCK; i++) {
 80170f2:	2202      	movs	r2, #2
 80170f4:	e6db      	b.n	8016eae <f_open+0x236>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80170f6:	2101      	movs	r1, #1
 80170f8:	e7b2      	b.n	8017060 <f_open+0x3e8>
 80170fa:	2103      	movs	r1, #3
 80170fc:	e7b0      	b.n	8017060 <f_open+0x3e8>
				fp->clust = clst;
 80170fe:	f8c4 a01c 	str.w	sl, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8017102:	f3cb 0308 	ubfx	r3, fp, #0, #9
 8017106:	2b00      	cmp	r3, #0
 8017108:	d0a3      	beq.n	8017052 <f_open+0x3da>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801710a:	9804      	ldr	r0, [sp, #16]
	clst -= 2;
 801710c:	f1aa 0a02 	sub.w	sl, sl, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8017110:	6983      	ldr	r3, [r0, #24]
 8017112:	3b02      	subs	r3, #2
 8017114:	459a      	cmp	sl, r3
 8017116:	d204      	bcs.n	8017122 <f_open+0x4aa>
	return clst * fs->csize + fs->database;
 8017118:	8943      	ldrh	r3, [r0, #10]
 801711a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 801711c:	fb0a 2203 	mla	r2, sl, r3, r2
					if ((sc = clust2sect(fs, clst)) == 0) {
 8017120:	b922      	cbnz	r2, 801712c <f_open+0x4b4>
		FREE_NAMBUF();
 8017122:	4640      	mov	r0, r8
						res = FR_INT_ERR;
 8017124:	2502      	movs	r5, #2
		FREE_NAMBUF();
 8017126:	f001 fb57 	bl	80187d8 <ff_memfree>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801712a:	e5b7      	b.n	8016c9c <f_open+0x24>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801712c:	eb02 225b 	add.w	r2, r2, fp, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8017130:	4649      	mov	r1, r9
 8017132:	2301      	movs	r3, #1
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8017134:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8017136:	7840      	ldrb	r0, [r0, #1]
 8017138:	f7fd faaa 	bl	8014690 <disk_read>
 801713c:	4605      	mov	r5, r0
		FREE_NAMBUF();
 801713e:	4640      	mov	r0, r8
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8017140:	2d00      	cmp	r5, #0
 8017142:	d087      	beq.n	8017054 <f_open+0x3dc>
 8017144:	2501      	movs	r5, #1
		FREE_NAMBUF();
 8017146:	f001 fb47 	bl	80187d8 <ff_memfree>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801714a:	e5a7      	b.n	8016c9c <f_open+0x24>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801714c:	f10a 33ff 	add.w	r3, sl, #4294967295
 8017150:	9805      	ldr	r0, [sp, #20]
 8017152:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8017156:	6133      	str	r3, [r6, #16]
		if (res == FR_OK) {
 8017158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801715a:	9301      	str	r3, [sp, #4]
 801715c:	e662      	b.n	8016e24 <f_open+0x1ac>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801715e:	f1b1 3fff 	cmp.w	r1, #4294967295
 8017162:	468a      	mov	sl, r1
				fp->clust = clst;
 8017164:	61e1      	str	r1, [r4, #28]
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8017166:	bf0c      	ite	eq
 8017168:	2001      	moveq	r0, #1
 801716a:	2000      	movne	r0, #0
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801716c:	f43f ade3 	beq.w	8016d36 <f_open+0xbe>
 8017170:	e7c7      	b.n	8017102 <f_open+0x48a>
 8017172:	bf00      	nop
 8017174:	2000952c 	.word	0x2000952c

08017178 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8017178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801717c:	461f      	mov	r7, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 801717e:	2300      	movs	r3, #0
{
 8017180:	b085      	sub	sp, #20
	*br = 0;	/* Clear read byte counter */
 8017182:	603b      	str	r3, [r7, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8017184:	b150      	cbz	r0, 801719c <f_read+0x24>
 8017186:	6803      	ldr	r3, [r0, #0]
 8017188:	4604      	mov	r4, r0
 801718a:	b13b      	cbz	r3, 801719c <f_read+0x24>
 801718c:	4690      	mov	r8, r2
 801718e:	781a      	ldrb	r2, [r3, #0]
 8017190:	b122      	cbz	r2, 801719c <f_read+0x24>
 8017192:	460e      	mov	r6, r1
 8017194:	88da      	ldrh	r2, [r3, #6]
 8017196:	8881      	ldrh	r1, [r0, #4]
 8017198:	4291      	cmp	r1, r2
 801719a:	d005      	beq.n	80171a8 <f_read+0x30>
	FRESULT res = FR_INVALID_OBJECT;
 801719c:	f04f 0909 	mov.w	r9, #9
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 80171a0:	4648      	mov	r0, r9
 80171a2:	b005      	add	sp, #20
 80171a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80171a8:	7858      	ldrb	r0, [r3, #1]
 80171aa:	f7fd fa53 	bl	8014654 <disk_status>
 80171ae:	07c2      	lsls	r2, r0, #31
 80171b0:	d4f4      	bmi.n	801719c <f_read+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80171b2:	f894 9015 	ldrb.w	r9, [r4, #21]
 80171b6:	f1b9 0f00 	cmp.w	r9, #0
 80171ba:	d1f1      	bne.n	80171a0 <f_read+0x28>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80171bc:	7d23      	ldrb	r3, [r4, #20]
 80171be:	f013 0301 	ands.w	r3, r3, #1
 80171c2:	9301      	str	r3, [sp, #4]
 80171c4:	f000 80d3 	beq.w	801736e <f_read+0x1f6>
	remain = fp->obj.objsize - fp->fptr;
 80171c8:	69a1      	ldr	r1, [r4, #24]
 80171ca:	68e2      	ldr	r2, [r4, #12]
 80171cc:	1a52      	subs	r2, r2, r1
 80171ce:	4590      	cmp	r8, r2
 80171d0:	bf28      	it	cs
 80171d2:	4690      	movcs	r8, r2
	for ( ;  btr;								/* Repeat until all data read */
 80171d4:	f1b8 0f00 	cmp.w	r8, #0
 80171d8:	d0e2      	beq.n	80171a0 <f_read+0x28>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80171da:	46a3      	mov	fp, r4
 80171dc:	f104 0334 	add.w	r3, r4, #52	; 0x34
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80171e0:	f3c1 0208 	ubfx	r2, r1, #0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80171e4:	f85b ab30 	ldr.w	sl, [fp], #48
 80171e8:	9302      	str	r3, [sp, #8]
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80171ea:	2a00      	cmp	r2, #0
 80171ec:	d13f      	bne.n	801726e <f_read+0xf6>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80171ee:	f8ba 200a 	ldrh.w	r2, [sl, #10]
 80171f2:	0a4b      	lsrs	r3, r1, #9
 80171f4:	3a01      	subs	r2, #1
			if (csect == 0) {					/* On the cluster boundary? */
 80171f6:	ea12 2251 	ands.w	r2, r2, r1, lsr #9
 80171fa:	d06a      	beq.n	80172d2 <f_read+0x15a>
 80171fc:	69e0      	ldr	r0, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80171fe:	f8da 3018 	ldr.w	r3, [sl, #24]
	clst -= 2;
 8017202:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8017204:	3b02      	subs	r3, #2
 8017206:	4298      	cmp	r0, r3
 8017208:	d270      	bcs.n	80172ec <f_read+0x174>
	return clst * fs->csize + fs->database;
 801720a:	f8ba 100a 	ldrh.w	r1, [sl, #10]
 801720e:	f8da 502c 	ldr.w	r5, [sl, #44]	; 0x2c
 8017212:	fb01 5500 	mla	r5, r1, r0, r5
			if (!sect) ABORT(fs, FR_INT_ERR);
 8017216:	2d00      	cmp	r5, #0
 8017218:	d068      	beq.n	80172ec <f_read+0x174>
			if (cc) {							/* Read maximum contiguous sectors directly */
 801721a:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
			sect += csect;
 801721e:	4415      	add	r5, r2
			if (cc) {							/* Read maximum contiguous sectors directly */
 8017220:	d36c      	bcc.n	80172fc <f_read+0x184>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8017222:	eb02 2058 	add.w	r0, r2, r8, lsr #9
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8017226:	ea4f 2358 	mov.w	r3, r8, lsr #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801722a:	4288      	cmp	r0, r1
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801722c:	f89a 0001 	ldrb.w	r0, [sl, #1]
					cc = fs->csize - csect;
 8017230:	bf88      	it	hi
 8017232:	1a8b      	subhi	r3, r1, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8017234:	462a      	mov	r2, r5
 8017236:	4631      	mov	r1, r6
 8017238:	9303      	str	r3, [sp, #12]
 801723a:	f7fd fa29 	bl	8014690 <disk_read>
 801723e:	2800      	cmp	r0, #0
 8017240:	f040 8084 	bne.w	801734c <f_read+0x1d4>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8017244:	f994 2014 	ldrsb.w	r2, [r4, #20]
 8017248:	9b03      	ldr	r3, [sp, #12]
 801724a:	2a00      	cmp	r2, #0
 801724c:	f2c0 80a6 	blt.w	801739c <f_read+0x224>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8017250:	025b      	lsls	r3, r3, #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8017252:	69a1      	ldr	r1, [r4, #24]
	for ( ;  btr;								/* Repeat until all data read */
 8017254:	ebb8 0803 	subs.w	r8, r8, r3
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8017258:	683a      	ldr	r2, [r7, #0]
 801725a:	441e      	add	r6, r3
 801725c:	4419      	add	r1, r3
 801725e:	441a      	add	r2, r3
 8017260:	61a1      	str	r1, [r4, #24]
 8017262:	603a      	str	r2, [r7, #0]
	for ( ;  btr;								/* Repeat until all data read */
 8017264:	d09c      	beq.n	80171a0 <f_read+0x28>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8017266:	f3c1 0208 	ubfx	r2, r1, #0, #9
 801726a:	2a00      	cmp	r2, #0
 801726c:	d0bf      	beq.n	80171ee <f_read+0x76>
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801726e:	f5c2 7300 	rsb	r3, r2, #512	; 0x200
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8017272:	1d10      	adds	r0, r2, #4
 8017274:	1d31      	adds	r1, r6, #4
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8017276:	445a      	add	r2, fp
 8017278:	4543      	cmp	r3, r8
 801727a:	4458      	add	r0, fp
 801727c:	bf28      	it	cs
 801727e:	4643      	movcs	r3, r8
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8017280:	428a      	cmp	r2, r1
 8017282:	bf38      	it	cc
 8017284:	4286      	cmpcc	r6, r0
 8017286:	f103 3cff 	add.w	ip, r3, #4294967295
 801728a:	d367      	bcc.n	801735c <f_read+0x1e4>
 801728c:	f1bc 0f07 	cmp.w	ip, #7
 8017290:	d964      	bls.n	801735c <f_read+0x1e4>
 8017292:	f023 0003 	bic.w	r0, r3, #3
 8017296:	4631      	mov	r1, r6
 8017298:	4615      	mov	r5, r2
 801729a:	4430      	add	r0, r6
			*d++ = *s++;
 801729c:	f855 eb04 	ldr.w	lr, [r5], #4
 80172a0:	f841 eb04 	str.w	lr, [r1], #4
		} while (--cnt);
 80172a4:	4288      	cmp	r0, r1
 80172a6:	d1f9      	bne.n	801729c <f_read+0x124>
 80172a8:	f023 0103 	bic.w	r1, r3, #3
 80172ac:	428b      	cmp	r3, r1
 80172ae:	eb06 0001 	add.w	r0, r6, r1
 80172b2:	eb02 0501 	add.w	r5, r2, r1
 80172b6:	d0cc      	beq.n	8017252 <f_read+0xda>
			*d++ = *s++;
 80172b8:	5c52      	ldrb	r2, [r2, r1]
		} while (--cnt);
 80172ba:	ebbc 0c01 	subs.w	ip, ip, r1
			*d++ = *s++;
 80172be:	5472      	strb	r2, [r6, r1]
		} while (--cnt);
 80172c0:	d0c7      	beq.n	8017252 <f_read+0xda>
			*d++ = *s++;
 80172c2:	786a      	ldrb	r2, [r5, #1]
		} while (--cnt);
 80172c4:	f1bc 0f01 	cmp.w	ip, #1
			*d++ = *s++;
 80172c8:	7042      	strb	r2, [r0, #1]
		} while (--cnt);
 80172ca:	d0c2      	beq.n	8017252 <f_read+0xda>
			*d++ = *s++;
 80172cc:	78aa      	ldrb	r2, [r5, #2]
 80172ce:	7082      	strb	r2, [r0, #2]
		} while (--cnt);
 80172d0:	e7bf      	b.n	8017252 <f_read+0xda>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80172d2:	bb39      	cbnz	r1, 8017324 <f_read+0x1ac>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80172d4:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80172d6:	2801      	cmp	r0, #1
 80172d8:	d908      	bls.n	80172ec <f_read+0x174>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80172da:	1c43      	adds	r3, r0, #1
 80172dc:	d036      	beq.n	801734c <f_read+0x1d4>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80172de:	f8da 3018 	ldr.w	r3, [sl, #24]
				fp->clust = clst;				/* Update current cluster */
 80172e2:	61e0      	str	r0, [r4, #28]
	clst -= 2;
 80172e4:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80172e6:	3b02      	subs	r3, #2
 80172e8:	4298      	cmp	r0, r3
 80172ea:	d38e      	bcc.n	801720a <f_read+0x92>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80172ec:	f04f 0902 	mov.w	r9, #2
}
 80172f0:	4648      	mov	r0, r9
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80172f2:	f884 9015 	strb.w	r9, [r4, #21]
}
 80172f6:	b005      	add	sp, #20
 80172f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80172fc:	6a22      	ldr	r2, [r4, #32]
 80172fe:	42aa      	cmp	r2, r5
 8017300:	d00b      	beq.n	801731a <f_read+0x1a2>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8017302:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8017306:	2b00      	cmp	r3, #0
 8017308:	db3b      	blt.n	8017382 <f_read+0x20a>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801730a:	2301      	movs	r3, #1
 801730c:	462a      	mov	r2, r5
 801730e:	4659      	mov	r1, fp
 8017310:	f89a 0001 	ldrb.w	r0, [sl, #1]
 8017314:	f7fd f9bc 	bl	8014690 <disk_read>
 8017318:	b9c0      	cbnz	r0, 801734c <f_read+0x1d4>
			fp->sect = sect;
 801731a:	69a2      	ldr	r2, [r4, #24]
 801731c:	6225      	str	r5, [r4, #32]
 801731e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8017322:	e7a4      	b.n	801726e <f_read+0xf6>
					if (fp->cltbl) {
 8017324:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8017326:	b329      	cbz	r1, 8017374 <f_read+0x1fc>
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8017328:	6825      	ldr	r5, [r4, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801732a:	1d08      	adds	r0, r1, #4
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801732c:	6849      	ldr	r1, [r1, #4]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801732e:	896d      	ldrh	r5, [r5, #10]
 8017330:	fbb3 f3f5 	udiv	r3, r3, r5
		if (ncl == 0) return 0;	/* End of table? (error) */
 8017334:	b929      	cbnz	r1, 8017342 <f_read+0x1ca>
 8017336:	e7d9      	b.n	80172ec <f_read+0x174>
		cl -= ncl; tbl++;		/* Next fragment */
 8017338:	1a5b      	subs	r3, r3, r1
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801733a:	f850 1f08 	ldr.w	r1, [r0, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 801733e:	2900      	cmp	r1, #0
 8017340:	d0d4      	beq.n	80172ec <f_read+0x174>
		if (cl < ncl) break;	/* In this fragment? */
 8017342:	4299      	cmp	r1, r3
 8017344:	d9f8      	bls.n	8017338 <f_read+0x1c0>
	return cl + *tbl;	/* Return the cluster number */
 8017346:	6840      	ldr	r0, [r0, #4]
 8017348:	4418      	add	r0, r3
 801734a:	e7c4      	b.n	80172d6 <f_read+0x15e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801734c:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8017350:	2301      	movs	r3, #1
}
 8017352:	4648      	mov	r0, r9
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8017354:	7563      	strb	r3, [r4, #21]
}
 8017356:	b005      	add	sp, #20
 8017358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801735c:	1e71      	subs	r1, r6, #1
 801735e:	18d5      	adds	r5, r2, r3
			*d++ = *s++;
 8017360:	f812 0b01 	ldrb.w	r0, [r2], #1
		} while (--cnt);
 8017364:	42aa      	cmp	r2, r5
			*d++ = *s++;
 8017366:	f801 0f01 	strb.w	r0, [r1, #1]!
		} while (--cnt);
 801736a:	d1f9      	bne.n	8017360 <f_read+0x1e8>
 801736c:	e771      	b.n	8017252 <f_read+0xda>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801736e:	f04f 0907 	mov.w	r9, #7
 8017372:	e715      	b.n	80171a0 <f_read+0x28>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8017374:	69e1      	ldr	r1, [r4, #28]
 8017376:	6820      	ldr	r0, [r4, #0]
 8017378:	9203      	str	r2, [sp, #12]
 801737a:	f7fd fb13 	bl	80149a4 <get_fat.isra.0>
 801737e:	9a03      	ldr	r2, [sp, #12]
 8017380:	e7a9      	b.n	80172d6 <f_read+0x15e>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8017382:	2301      	movs	r3, #1
 8017384:	4659      	mov	r1, fp
 8017386:	f89a 0001 	ldrb.w	r0, [sl, #1]
 801738a:	f7fd f98f 	bl	80146ac <disk_write>
 801738e:	2800      	cmp	r0, #0
 8017390:	d1dc      	bne.n	801734c <f_read+0x1d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 8017392:	7d23      	ldrb	r3, [r4, #20]
 8017394:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017398:	7523      	strb	r3, [r4, #20]
 801739a:	e7b6      	b.n	801730a <f_read+0x192>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801739c:	6a22      	ldr	r2, [r4, #32]
 801739e:	1b55      	subs	r5, r2, r5
 80173a0:	429d      	cmp	r5, r3
 80173a2:	f4bf af55 	bcs.w	8017250 <f_read+0xd8>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80173a6:	eb06 2045 	add.w	r0, r6, r5, lsl #9
 80173aa:	4659      	mov	r1, fp
 80173ac:	4602      	mov	r2, r0
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80173ae:	3004      	adds	r0, #4
 80173b0:	4583      	cmp	fp, r0
 80173b2:	d202      	bcs.n	80173ba <f_read+0x242>
 80173b4:	9802      	ldr	r0, [sp, #8]
 80173b6:	4282      	cmp	r2, r0
 80173b8:	d309      	bcc.n	80173ce <f_read+0x256>
 80173ba:	4659      	mov	r1, fp
 80173bc:	f502 7500 	add.w	r5, r2, #512	; 0x200
			*d++ = *s++;
 80173c0:	f851 0b04 	ldr.w	r0, [r1], #4
 80173c4:	f842 0b04 	str.w	r0, [r2], #4
		} while (--cnt);
 80173c8:	42aa      	cmp	r2, r5
 80173ca:	d1f9      	bne.n	80173c0 <f_read+0x248>
 80173cc:	e740      	b.n	8017250 <f_read+0xd8>
 80173ce:	3a01      	subs	r2, #1
 80173d0:	f504 750c 	add.w	r5, r4, #560	; 0x230
			*d++ = *s++;
 80173d4:	f811 0b01 	ldrb.w	r0, [r1], #1
		} while (--cnt);
 80173d8:	428d      	cmp	r5, r1
			*d++ = *s++;
 80173da:	f802 0f01 	strb.w	r0, [r2, #1]!
		} while (--cnt);
 80173de:	d1f9      	bne.n	80173d4 <f_read+0x25c>
 80173e0:	e736      	b.n	8017250 <f_read+0xd8>
 80173e2:	bf00      	nop

080173e4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80173e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173e8:	461f      	mov	r7, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 80173ea:	2300      	movs	r3, #0
{
 80173ec:	b085      	sub	sp, #20
	*bw = 0;	/* Clear write byte counter */
 80173ee:	603b      	str	r3, [r7, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80173f0:	b150      	cbz	r0, 8017408 <f_write+0x24>
 80173f2:	6803      	ldr	r3, [r0, #0]
 80173f4:	4604      	mov	r4, r0
 80173f6:	b13b      	cbz	r3, 8017408 <f_write+0x24>
 80173f8:	4616      	mov	r6, r2
 80173fa:	781a      	ldrb	r2, [r3, #0]
 80173fc:	b122      	cbz	r2, 8017408 <f_write+0x24>
 80173fe:	460d      	mov	r5, r1
 8017400:	88da      	ldrh	r2, [r3, #6]
 8017402:	8881      	ldrh	r1, [r0, #4]
 8017404:	4291      	cmp	r1, r2
 8017406:	d005      	beq.n	8017414 <f_write+0x30>
	FRESULT res = FR_INVALID_OBJECT;
 8017408:	f04f 0809 	mov.w	r8, #9
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 801740c:	4640      	mov	r0, r8
 801740e:	b005      	add	sp, #20
 8017410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8017414:	7858      	ldrb	r0, [r3, #1]
 8017416:	f7fd f91d 	bl	8014654 <disk_status>
 801741a:	07c1      	lsls	r1, r0, #31
 801741c:	d4f4      	bmi.n	8017408 <f_write+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801741e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8017422:	f1b8 0f00 	cmp.w	r8, #0
 8017426:	d1f1      	bne.n	801740c <f_write+0x28>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8017428:	7d23      	ldrb	r3, [r4, #20]
 801742a:	079a      	lsls	r2, r3, #30
 801742c:	f140 80f5 	bpl.w	801761a <f_write+0x236>
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8017430:	69a2      	ldr	r2, [r4, #24]
 8017432:	42f2      	cmn	r2, r6
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8017434:	bf28      	it	cs
 8017436:	43d6      	mvncs	r6, r2
	for ( ;  btw;							/* Repeat until all data written */
 8017438:	2e00      	cmp	r6, #0
 801743a:	d064      	beq.n	8017506 <f_write+0x122>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801743c:	46a2      	mov	sl, r4
 801743e:	f504 730c 	add.w	r3, r4, #560	; 0x230
 8017442:	f85a 9b30 	ldr.w	r9, [sl], #48
 8017446:	9301      	str	r3, [sp, #4]
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8017448:	f3c2 0108 	ubfx	r1, r2, #0, #9
 801744c:	2900      	cmp	r1, #0
 801744e:	d169      	bne.n	8017524 <f_write+0x140>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8017450:	f8b9 b00a 	ldrh.w	fp, [r9, #10]
 8017454:	0a53      	lsrs	r3, r2, #9
 8017456:	f10b 3bff 	add.w	fp, fp, #4294967295
			if (csect == 0) {				/* On the cluster boundary? */
 801745a:	ea1b 2b52 	ands.w	fp, fp, r2, lsr #9
 801745e:	d110      	bne.n	8017482 <f_write+0x9e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8017460:	2a00      	cmp	r2, #0
 8017462:	f040 80a2 	bne.w	80175aa <f_write+0x1c6>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8017466:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 8017468:	2800      	cmp	r0, #0
 801746a:	f000 80e3 	beq.w	8017634 <f_write+0x250>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801746e:	2801      	cmp	r0, #1
 8017470:	f000 8093 	beq.w	801759a <f_write+0x1b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8017474:	1c43      	adds	r3, r0, #1
 8017476:	f000 80bd 	beq.w	80175f4 <f_write+0x210>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801747a:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 801747c:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801747e:	b903      	cbnz	r3, 8017482 <f_write+0x9e>
 8017480:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8017482:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8017486:	2b00      	cmp	r3, #0
 8017488:	f2c0 80a7 	blt.w	80175da <f_write+0x1f6>
	clst -= 2;
 801748c:	69e2      	ldr	r2, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801748e:	f8d9 3018 	ldr.w	r3, [r9, #24]
	clst -= 2;
 8017492:	3a02      	subs	r2, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8017494:	3b02      	subs	r3, #2
 8017496:	429a      	cmp	r2, r3
 8017498:	d27f      	bcs.n	801759a <f_write+0x1b6>
	return clst * fs->csize + fs->database;
 801749a:	f8b9 100a 	ldrh.w	r1, [r9, #10]
 801749e:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 80174a2:	fb01 3202 	mla	r2, r1, r2, r3
			if (!sect) ABORT(fs, FR_INT_ERR);
 80174a6:	2a00      	cmp	r2, #0
 80174a8:	d077      	beq.n	801759a <f_write+0x1b6>
			if (cc) {						/* Write maximum contiguous sectors directly */
 80174aa:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
			sect += csect;
 80174ae:	445a      	add	r2, fp
			if (cc) {						/* Write maximum contiguous sectors directly */
 80174b0:	d32d      	bcc.n	801750e <f_write+0x12a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80174b2:	eb0b 2056 	add.w	r0, fp, r6, lsr #9
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80174b6:	0a73      	lsrs	r3, r6, #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80174b8:	4288      	cmp	r0, r1
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80174ba:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
 80174be:	bf88      	it	hi
 80174c0:	eba1 030b 	subhi.w	r3, r1, fp
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80174c4:	4629      	mov	r1, r5
 80174c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80174ca:	f7fd f8ef 	bl	80146ac <disk_write>
 80174ce:	2800      	cmp	r0, #0
 80174d0:	f040 8090 	bne.w	80175f4 <f_write+0x210>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80174d4:	6a21      	ldr	r1, [r4, #32]
 80174d6:	9a02      	ldr	r2, [sp, #8]
 80174d8:	9b03      	ldr	r3, [sp, #12]
 80174da:	1a8a      	subs	r2, r1, r2
 80174dc:	429a      	cmp	r2, r3
 80174de:	f0c0 80bd 	bcc.w	801765c <f_write+0x278>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80174e2:	eb05 2143 	add.w	r1, r5, r3, lsl #9
 80174e6:	025b      	lsls	r3, r3, #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80174e8:	69a2      	ldr	r2, [r4, #24]
 80174ea:	460d      	mov	r5, r1
 80174ec:	68e0      	ldr	r0, [r4, #12]
 80174ee:	441a      	add	r2, r3
 80174f0:	6839      	ldr	r1, [r7, #0]
 80174f2:	4290      	cmp	r0, r2
 80174f4:	4419      	add	r1, r3
 80174f6:	61a2      	str	r2, [r4, #24]
 80174f8:	bf38      	it	cc
 80174fa:	4610      	movcc	r0, r2
	for ( ;  btw;							/* Repeat until all data written */
 80174fc:	1af6      	subs	r6, r6, r3
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80174fe:	60e0      	str	r0, [r4, #12]
 8017500:	6039      	str	r1, [r7, #0]
	for ( ;  btw;							/* Repeat until all data written */
 8017502:	d1a1      	bne.n	8017448 <f_write+0x64>
 8017504:	7d23      	ldrb	r3, [r4, #20]
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8017506:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801750a:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 801750c:	e77e      	b.n	801740c <f_write+0x28>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801750e:	6a23      	ldr	r3, [r4, #32]
				fp->fptr < fp->obj.objsize &&
 8017510:	69a1      	ldr	r1, [r4, #24]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8017512:	4293      	cmp	r3, r2
 8017514:	d003      	beq.n	801751e <f_write+0x13a>
 8017516:	68e3      	ldr	r3, [r4, #12]
 8017518:	4299      	cmp	r1, r3
 801751a:	f0c0 8093 	bcc.w	8017644 <f_write+0x260>
			fp->sect = sect;
 801751e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8017522:	6222      	str	r2, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8017524:	f5c1 7300 	rsb	r3, r1, #512	; 0x200
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8017528:	1d08      	adds	r0, r1, #4
 801752a:	1d2a      	adds	r2, r5, #4
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801752c:	4451      	add	r1, sl
 801752e:	42b3      	cmp	r3, r6
 8017530:	4450      	add	r0, sl
 8017532:	bf28      	it	cs
 8017534:	4633      	movcs	r3, r6
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8017536:	4291      	cmp	r1, r2
 8017538:	bf38      	it	cc
 801753a:	4285      	cmpcc	r5, r0
 801753c:	f103 3eff 	add.w	lr, r3, #4294967295
 8017540:	d360      	bcc.n	8017604 <f_write+0x220>
 8017542:	f1be 0f07 	cmp.w	lr, #7
 8017546:	d95d      	bls.n	8017604 <f_write+0x220>
 8017548:	f023 0003 	bic.w	r0, r3, #3
 801754c:	462a      	mov	r2, r5
 801754e:	468c      	mov	ip, r1
 8017550:	4428      	add	r0, r5
			*d++ = *s++;
 8017552:	f852 bb04 	ldr.w	fp, [r2], #4
 8017556:	4290      	cmp	r0, r2
 8017558:	f84c bb04 	str.w	fp, [ip], #4
		} while (--cnt);
 801755c:	d1f9      	bne.n	8017552 <f_write+0x16e>
 801755e:	f023 0203 	bic.w	r2, r3, #3
 8017562:	4293      	cmp	r3, r2
 8017564:	eb01 0002 	add.w	r0, r1, r2
 8017568:	eb05 0c02 	add.w	ip, r5, r2
 801756c:	d053      	beq.n	8017616 <f_write+0x232>
			*d++ = *s++;
 801756e:	f815 b002 	ldrb.w	fp, [r5, r2]
		} while (--cnt);
 8017572:	ebbe 0e02 	subs.w	lr, lr, r2
			*d++ = *s++;
 8017576:	f801 b002 	strb.w	fp, [r1, r2]
		} while (--cnt);
 801757a:	d051      	beq.n	8017620 <f_write+0x23c>
			*d++ = *s++;
 801757c:	f89c 2001 	ldrb.w	r2, [ip, #1]
		} while (--cnt);
 8017580:	f1be 0f01 	cmp.w	lr, #1
			*d++ = *s++;
 8017584:	7042      	strb	r2, [r0, #1]
		} while (--cnt);
 8017586:	d04b      	beq.n	8017620 <f_write+0x23c>
			*d++ = *s++;
 8017588:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801758c:	18e9      	adds	r1, r5, r3
 801758e:	7082      	strb	r2, [r0, #2]
		fp->flag |= FA_DIRTY;
 8017590:	7d22      	ldrb	r2, [r4, #20]
 8017592:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8017596:	7522      	strb	r2, [r4, #20]
 8017598:	e7a6      	b.n	80174e8 <f_write+0x104>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801759a:	f04f 0802 	mov.w	r8, #2
}
 801759e:	4640      	mov	r0, r8
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80175a0:	f884 8015 	strb.w	r8, [r4, #21]
}
 80175a4:	b005      	add	sp, #20
 80175a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (fp->cltbl) {
 80175aa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80175ac:	2a00      	cmp	r2, #0
 80175ae:	d039      	beq.n	8017624 <f_write+0x240>
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80175b0:	6820      	ldr	r0, [r4, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80175b2:	1d11      	adds	r1, r2, #4
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80175b4:	6852      	ldr	r2, [r2, #4]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80175b6:	8940      	ldrh	r0, [r0, #10]
 80175b8:	fbb3 f3f0 	udiv	r3, r3, r0
		if (ncl == 0) return 0;	/* End of table? (error) */
 80175bc:	b92a      	cbnz	r2, 80175ca <f_write+0x1e6>
 80175be:	e7a1      	b.n	8017504 <f_write+0x120>
		cl -= ncl; tbl++;		/* Next fragment */
 80175c0:	1a9b      	subs	r3, r3, r2
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80175c2:	f851 2f08 	ldr.w	r2, [r1, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 80175c6:	2a00      	cmp	r2, #0
 80175c8:	d09c      	beq.n	8017504 <f_write+0x120>
		if (cl < ncl) break;	/* In this fragment? */
 80175ca:	4293      	cmp	r3, r2
 80175cc:	d2f8      	bcs.n	80175c0 <f_write+0x1dc>
	return cl + *tbl;	/* Return the cluster number */
 80175ce:	6848      	ldr	r0, [r1, #4]
 80175d0:	4418      	add	r0, r3
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80175d2:	2800      	cmp	r0, #0
 80175d4:	f47f af4b 	bne.w	801746e <f_write+0x8a>
 80175d8:	e794      	b.n	8017504 <f_write+0x120>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80175da:	2301      	movs	r3, #1
 80175dc:	6a22      	ldr	r2, [r4, #32]
 80175de:	4651      	mov	r1, sl
 80175e0:	f899 0001 	ldrb.w	r0, [r9, #1]
 80175e4:	f7fd f862 	bl	80146ac <disk_write>
 80175e8:	b920      	cbnz	r0, 80175f4 <f_write+0x210>
				fp->flag &= (BYTE)~FA_DIRTY;
 80175ea:	7d23      	ldrb	r3, [r4, #20]
 80175ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80175f0:	7523      	strb	r3, [r4, #20]
 80175f2:	e74b      	b.n	801748c <f_write+0xa8>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80175f4:	f04f 0801 	mov.w	r8, #1
}
 80175f8:	4640      	mov	r0, r8
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80175fa:	f884 8015 	strb.w	r8, [r4, #21]
}
 80175fe:	b005      	add	sp, #20
 8017600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017604:	1e4a      	subs	r2, r1, #1
 8017606:	18e9      	adds	r1, r5, r3
			*d++ = *s++;
 8017608:	f815 0b01 	ldrb.w	r0, [r5], #1
		} while (--cnt);
 801760c:	428d      	cmp	r5, r1
			*d++ = *s++;
 801760e:	f802 0f01 	strb.w	r0, [r2, #1]!
		} while (--cnt);
 8017612:	d1f9      	bne.n	8017608 <f_write+0x224>
 8017614:	e7bc      	b.n	8017590 <f_write+0x1ac>
 8017616:	4661      	mov	r1, ip
 8017618:	e7ba      	b.n	8017590 <f_write+0x1ac>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801761a:	f04f 0807 	mov.w	r8, #7
 801761e:	e6f5      	b.n	801740c <f_write+0x28>
 8017620:	18e9      	adds	r1, r5, r3
 8017622:	e7b5      	b.n	8017590 <f_write+0x1ac>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8017624:	69e1      	ldr	r1, [r4, #28]
 8017626:	4620      	mov	r0, r4
 8017628:	f7fd fd4e 	bl	80150c8 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801762c:	2800      	cmp	r0, #0
 801762e:	f47f af1e 	bne.w	801746e <f_write+0x8a>
 8017632:	e767      	b.n	8017504 <f_write+0x120>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8017634:	4659      	mov	r1, fp
 8017636:	4620      	mov	r0, r4
 8017638:	f7fd fd46 	bl	80150c8 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801763c:	2800      	cmp	r0, #0
 801763e:	f47f af16 	bne.w	801746e <f_write+0x8a>
 8017642:	e75f      	b.n	8017504 <f_write+0x120>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8017644:	2301      	movs	r3, #1
 8017646:	4651      	mov	r1, sl
 8017648:	f899 0001 	ldrb.w	r0, [r9, #1]
 801764c:	9202      	str	r2, [sp, #8]
 801764e:	f7fd f81f 	bl	8014690 <disk_read>
				fp->fptr < fp->obj.objsize &&
 8017652:	2800      	cmp	r0, #0
 8017654:	d1ce      	bne.n	80175f4 <f_write+0x210>
 8017656:	69a1      	ldr	r1, [r4, #24]
 8017658:	9a02      	ldr	r2, [sp, #8]
 801765a:	e760      	b.n	801751e <f_write+0x13a>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801765c:	eb05 2142 	add.w	r1, r5, r2, lsl #9
 8017660:	460a      	mov	r2, r1
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8017662:	3104      	adds	r1, #4
 8017664:	458a      	cmp	sl, r1
 8017666:	d203      	bcs.n	8017670 <f_write+0x28c>
 8017668:	f104 0134 	add.w	r1, r4, #52	; 0x34
 801766c:	428a      	cmp	r2, r1
 801766e:	d30d      	bcc.n	801768c <f_write+0x2a8>
 8017670:	4651      	mov	r1, sl
 8017672:	f8dd c004 	ldr.w	ip, [sp, #4]
			*d++ = *s++;
 8017676:	f852 0b04 	ldr.w	r0, [r2], #4
 801767a:	f841 0b04 	str.w	r0, [r1], #4
		} while (--cnt);
 801767e:	4561      	cmp	r1, ip
 8017680:	d1f9      	bne.n	8017676 <f_write+0x292>
					fp->flag &= (BYTE)~FA_DIRTY;
 8017682:	7d22      	ldrb	r2, [r4, #20]
 8017684:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8017688:	7522      	strb	r2, [r4, #20]
 801768a:	e72a      	b.n	80174e2 <f_write+0xfe>
 801768c:	f104 012f 	add.w	r1, r4, #47	; 0x2f
 8017690:	f502 7c00 	add.w	ip, r2, #512	; 0x200
			*d++ = *s++;
 8017694:	f812 0b01 	ldrb.w	r0, [r2], #1
		} while (--cnt);
 8017698:	4594      	cmp	ip, r2
			*d++ = *s++;
 801769a:	f801 0f01 	strb.w	r0, [r1, #1]!
		} while (--cnt);
 801769e:	d1f9      	bne.n	8017694 <f_write+0x2b0>
 80176a0:	e7ef      	b.n	8017682 <f_write+0x29e>
 80176a2:	bf00      	nop

080176a4 <f_close>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80176a4:	b158      	cbz	r0, 80176be <f_close+0x1a>
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80176a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80176a8:	6803      	ldr	r3, [r0, #0]
 80176aa:	4604      	mov	r4, r0
 80176ac:	b12b      	cbz	r3, 80176ba <f_close+0x16>
 80176ae:	781a      	ldrb	r2, [r3, #0]
 80176b0:	b11a      	cbz	r2, 80176ba <f_close+0x16>
 80176b2:	8881      	ldrh	r1, [r0, #4]
 80176b4:	88da      	ldrh	r2, [r3, #6]
 80176b6:	4291      	cmp	r1, r2
 80176b8:	d003      	beq.n	80176c2 <f_close+0x1e>
	FRESULT res = FR_INVALID_OBJECT;
 80176ba:	2009      	movs	r0, #9
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 80176bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	FRESULT res = FR_INVALID_OBJECT;
 80176be:	2009      	movs	r0, #9
}
 80176c0:	4770      	bx	lr
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80176c2:	7858      	ldrb	r0, [r3, #1]
 80176c4:	f7fc ffc6 	bl	8014654 <disk_status>
 80176c8:	07c1      	lsls	r1, r0, #31
 80176ca:	d4f6      	bmi.n	80176ba <f_close+0x16>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80176cc:	7d23      	ldrb	r3, [r4, #20]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80176ce:	6825      	ldr	r5, [r4, #0]
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80176d0:	065a      	lsls	r2, r3, #25
 80176d2:	d53d      	bpl.n	8017750 <f_close+0xac>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80176d4:	061b      	lsls	r3, r3, #24
 80176d6:	d45e      	bmi.n	8017796 <f_close+0xf2>
			tm = GET_FATTIME();				/* Modified time */
 80176d8:	f7fd f804 	bl	80146e4 <get_fattime>
				res = move_window(fs, fp->dir_sect);
 80176dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80176de:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			tm = GET_FATTIME();				/* Modified time */
 80176e0:	4606      	mov	r6, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 80176e2:	4299      	cmp	r1, r3
 80176e4:	d004      	beq.n	80176f0 <f_close+0x4c>
 80176e6:	4628      	mov	r0, r5
 80176e8:	f7fd f884 	bl	80147f4 <move_window.part.0>
				if (res == FR_OK) {
 80176ec:	2800      	cmp	r0, #0
 80176ee:	d1e5      	bne.n	80176bc <f_close+0x18>
					dir = fp->dir_ptr;
 80176f0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80176f2:	7acb      	ldrb	r3, [r1, #11]
 80176f4:	f043 0320 	orr.w	r3, r3, #32
 80176f8:	72cb      	strb	r3, [r1, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80176fa:	68a3      	ldr	r3, [r4, #8]
 80176fc:	6822      	ldr	r2, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80176fe:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8017702:	768b      	strb	r3, [r1, #26]
	*ptr++ = (BYTE)val;
 8017704:	76c8      	strb	r0, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 8017706:	7812      	ldrb	r2, [r2, #0]
 8017708:	2a03      	cmp	r2, #3
 801770a:	d103      	bne.n	8017714 <f_close+0x70>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801770c:	0c1b      	lsrs	r3, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 801770e:	0a1a      	lsrs	r2, r3, #8
 8017710:	750b      	strb	r3, [r1, #20]
	*ptr++ = (BYTE)val;
 8017712:	754a      	strb	r2, [r1, #21]
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8017714:	68e3      	ldr	r3, [r4, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 8017716:	0a37      	lsrs	r7, r6, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8017718:	0c32      	lsrs	r2, r6, #16
	*ptr++ = (BYTE)val; val >>= 8;
 801771a:	758e      	strb	r6, [r1, #22]
 801771c:	0a18      	lsrs	r0, r3, #8
 801771e:	770b      	strb	r3, [r1, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 8017720:	75cf      	strb	r7, [r1, #23]
	*ptr++ = (BYTE)val; val >>= 8;
 8017722:	0e36      	lsrs	r6, r6, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8017724:	7748      	strb	r0, [r1, #29]
					fs->wflag = 1;
 8017726:	2701      	movs	r7, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8017728:	0c18      	lsrs	r0, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 801772a:	760a      	strb	r2, [r1, #24]
 801772c:	0e1b      	lsrs	r3, r3, #24
	*ptr++ = (BYTE)val; val >>= 8;
 801772e:	2200      	movs	r2, #0
	*ptr++ = (BYTE)val; val >>= 8;
 8017730:	7788      	strb	r0, [r1, #30]
					res = sync_fs(fs);					/* Restore it to the directory */
 8017732:	4628      	mov	r0, r5
	*ptr++ = (BYTE)val;
 8017734:	77cb      	strb	r3, [r1, #31]
 8017736:	764e      	strb	r6, [r1, #25]
	*ptr++ = (BYTE)val; val >>= 8;
 8017738:	748a      	strb	r2, [r1, #18]
	*ptr++ = (BYTE)val;
 801773a:	74ca      	strb	r2, [r1, #19]
					fs->wflag = 1;
 801773c:	70ef      	strb	r7, [r5, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801773e:	f7fd fc51 	bl	8014fe4 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 8017742:	7d23      	ldrb	r3, [r4, #20]
 8017744:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017748:	7523      	strb	r3, [r4, #20]
	if (res == FR_OK)
 801774a:	2800      	cmp	r0, #0
 801774c:	d1b6      	bne.n	80176bc <f_close+0x18>
 801774e:	6825      	ldr	r5, [r4, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8017750:	2d00      	cmp	r5, #0
 8017752:	d0b2      	beq.n	80176ba <f_close+0x16>
 8017754:	782b      	ldrb	r3, [r5, #0]
 8017756:	2b00      	cmp	r3, #0
 8017758:	d0af      	beq.n	80176ba <f_close+0x16>
 801775a:	88a2      	ldrh	r2, [r4, #4]
 801775c:	88eb      	ldrh	r3, [r5, #6]
 801775e:	429a      	cmp	r2, r3
 8017760:	d1ab      	bne.n	80176ba <f_close+0x16>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8017762:	7868      	ldrb	r0, [r5, #1]
 8017764:	f7fc ff76 	bl	8014654 <disk_status>
 8017768:	f010 0001 	ands.w	r0, r0, #1
 801776c:	d1a5      	bne.n	80176ba <f_close+0x16>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801776e:	6923      	ldr	r3, [r4, #16]
 8017770:	3b01      	subs	r3, #1
 8017772:	2b03      	cmp	r3, #3
 8017774:	d820      	bhi.n	80177b8 <f_close+0x114>
		n = Files[i].ctr;
 8017776:	4912      	ldr	r1, [pc, #72]	; (80177c0 <f_close+0x11c>)
 8017778:	011d      	lsls	r5, r3, #4
 801777a:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 801777e:	899a      	ldrh	r2, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8017780:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8017784:	d014      	beq.n	80177b0 <f_close+0x10c>
		if (n > 0) n--;				/* Decrement read mode open count */
 8017786:	b1a2      	cbz	r2, 80177b2 <f_close+0x10e>
 8017788:	3a01      	subs	r2, #1
 801778a:	b292      	uxth	r2, r2
		Files[i].ctr = n;
 801778c:	819a      	strh	r2, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801778e:	b182      	cbz	r2, 80177b2 <f_close+0x10e>
				fp->obj.fs = 0;			/* Invalidate file object */
 8017790:	2300      	movs	r3, #0
 8017792:	6023      	str	r3, [r4, #0]
}
 8017794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8017796:	2301      	movs	r3, #1
 8017798:	6a22      	ldr	r2, [r4, #32]
 801779a:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801779e:	7868      	ldrb	r0, [r5, #1]
 80177a0:	f7fc ff84 	bl	80146ac <disk_write>
 80177a4:	b950      	cbnz	r0, 80177bc <f_close+0x118>
				fp->flag &= (BYTE)~FA_DIRTY;
 80177a6:	7d23      	ldrb	r3, [r4, #20]
 80177a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80177ac:	7523      	strb	r3, [r4, #20]
 80177ae:	e793      	b.n	80176d8 <f_close+0x34>
		Files[i].ctr = n;
 80177b0:	8198      	strh	r0, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80177b2:	2300      	movs	r3, #0
 80177b4:	514b      	str	r3, [r1, r5]
			if (res == FR_OK)
 80177b6:	e7eb      	b.n	8017790 <f_close+0xec>
		res = FR_INT_ERR;			/* Invalid index nunber */
 80177b8:	2002      	movs	r0, #2
}
 80177ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80177bc:	2001      	movs	r0, #1
}
 80177be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80177c0:	2000952c 	.word	0x2000952c

080177c4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80177c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177c8:	b085      	sub	sp, #20
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80177ca:	b148      	cbz	r0, 80177e0 <f_lseek+0x1c>
 80177cc:	6803      	ldr	r3, [r0, #0]
 80177ce:	4604      	mov	r4, r0
 80177d0:	b133      	cbz	r3, 80177e0 <f_lseek+0x1c>
 80177d2:	781a      	ldrb	r2, [r3, #0]
 80177d4:	b122      	cbz	r2, 80177e0 <f_lseek+0x1c>
 80177d6:	460d      	mov	r5, r1
 80177d8:	88da      	ldrh	r2, [r3, #6]
 80177da:	8881      	ldrh	r1, [r0, #4]
 80177dc:	4291      	cmp	r1, r2
 80177de:	d004      	beq.n	80177ea <f_lseek+0x26>
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
			ofs = fp->obj.objsize;
		}
		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
 80177e0:	2609      	movs	r6, #9
			fp->sect = nsect;
		}
	}

	LEAVE_FF(fs, res);
}
 80177e2:	4630      	mov	r0, r6
 80177e4:	b005      	add	sp, #20
 80177e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80177ea:	7858      	ldrb	r0, [r3, #1]
 80177ec:	f7fc ff32 	bl	8014654 <disk_status>
 80177f0:	07c3      	lsls	r3, r0, #31
 80177f2:	d4f5      	bmi.n	80177e0 <f_lseek+0x1c>
	if (res == FR_OK) res = (FRESULT)fp->err;
 80177f4:	7d66      	ldrb	r6, [r4, #21]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80177f6:	f8d4 a000 	ldr.w	sl, [r4]
	if (res != FR_OK) LEAVE_FF(fs, res);
 80177fa:	2e00      	cmp	r6, #0
 80177fc:	d1f1      	bne.n	80177e2 <f_lseek+0x1e>
	if (fp->cltbl) {	/* Fast seek */
 80177fe:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8017800:	2800      	cmp	r0, #0
 8017802:	d049      	beq.n	8017898 <f_lseek+0xd4>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8017804:	1c6f      	adds	r7, r5, #1
 8017806:	f000 8097 	beq.w	8017938 <f_lseek+0x174>
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 801780a:	68e1      	ldr	r1, [r4, #12]
 801780c:	428d      	cmp	r5, r1
 801780e:	bf28      	it	cs
 8017810:	460d      	movcs	r5, r1
			fp->fptr = ofs;				/* Set file pointer */
 8017812:	61a5      	str	r5, [r4, #24]
			if (ofs) {
 8017814:	2d00      	cmp	r5, #0
 8017816:	d0e4      	beq.n	80177e2 <f_lseek+0x1e>
				fp->clust = clmt_clust(fp, ofs - 1);
 8017818:	1e69      	subs	r1, r5, #1
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801781a:	f8ba 700a 	ldrh.w	r7, [sl, #10]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801781e:	6843      	ldr	r3, [r0, #4]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8017820:	1d02      	adds	r2, r0, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8017822:	0a49      	lsrs	r1, r1, #9
 8017824:	fbb1 f0f7 	udiv	r0, r1, r7
		if (ncl == 0) return 0;	/* End of table? (error) */
 8017828:	b933      	cbnz	r3, 8017838 <f_lseek+0x74>
 801782a:	e11e      	b.n	8017a6a <f_lseek+0x2a6>
		cl -= ncl; tbl++;		/* Next fragment */
 801782c:	1ac0      	subs	r0, r0, r3
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801782e:	f852 3f08 	ldr.w	r3, [r2, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 8017832:	2b00      	cmp	r3, #0
 8017834:	f000 8119 	beq.w	8017a6a <f_lseek+0x2a6>
		if (cl < ncl) break;	/* In this fragment? */
 8017838:	4298      	cmp	r0, r3
 801783a:	d2f7      	bcs.n	801782c <f_lseek+0x68>
	return cl + *tbl;	/* Return the cluster number */
 801783c:	6853      	ldr	r3, [r2, #4]
 801783e:	4403      	add	r3, r0
 8017840:	1e9a      	subs	r2, r3, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8017842:	f8da 0018 	ldr.w	r0, [sl, #24]
				fp->clust = clmt_clust(fp, ofs - 1);
 8017846:	61e3      	str	r3, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8017848:	1e83      	subs	r3, r0, #2
 801784a:	4293      	cmp	r3, r2
 801784c:	f240 80cf 	bls.w	80179ee <f_lseek+0x22a>
	return clst * fs->csize + fs->database;
 8017850:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
 8017854:	fb02 3307 	mla	r3, r2, r7, r3
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8017858:	2b00      	cmp	r3, #0
 801785a:	f000 80c8 	beq.w	80179ee <f_lseek+0x22a>
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801785e:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8017862:	2d00      	cmp	r5, #0
 8017864:	d0bd      	beq.n	80177e2 <f_lseek+0x1e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8017866:	3f01      	subs	r7, #1
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8017868:	6a22      	ldr	r2, [r4, #32]
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 801786a:	4039      	ands	r1, r7
 801786c:	18cf      	adds	r7, r1, r3
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801786e:	42ba      	cmp	r2, r7
 8017870:	d0b7      	beq.n	80177e2 <f_lseek+0x1e>
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8017872:	f994 3014 	ldrsb.w	r3, [r4, #20]
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8017876:	f104 0130 	add.w	r1, r4, #48	; 0x30
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 801787a:	2b00      	cmp	r3, #0
 801787c:	f2c0 8142 	blt.w	8017b04 <f_lseek+0x340>
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8017880:	f89a 0001 	ldrb.w	r0, [sl, #1]
 8017884:	2301      	movs	r3, #1
 8017886:	463a      	mov	r2, r7
 8017888:	f7fc ff02 	bl	8014690 <disk_read>
 801788c:	4606      	mov	r6, r0
 801788e:	2800      	cmp	r0, #0
 8017890:	f040 80aa 	bne.w	80179e8 <f_lseek+0x224>
			fp->sect = nsect;
 8017894:	6227      	str	r7, [r4, #32]
 8017896:	e7a4      	b.n	80177e2 <f_lseek+0x1e>
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8017898:	68e3      	ldr	r3, [r4, #12]
 801789a:	42ab      	cmp	r3, r5
 801789c:	d204      	bcs.n	80178a8 <f_lseek+0xe4>
 801789e:	7d22      	ldrb	r2, [r4, #20]
 80178a0:	f012 0f02 	tst.w	r2, #2
 80178a4:	bf08      	it	eq
 80178a6:	461d      	moveq	r5, r3
		fp->fptr = nsect = 0;
 80178a8:	2200      	movs	r2, #0
		ifptr = fp->fptr;
 80178aa:	69a3      	ldr	r3, [r4, #24]
		fp->fptr = nsect = 0;
 80178ac:	61a2      	str	r2, [r4, #24]
		if (ofs) {
 80178ae:	2d00      	cmp	r5, #0
 80178b0:	d097      	beq.n	80177e2 <f_lseek+0x1e>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80178b2:	f8ba 800a 	ldrh.w	r8, [sl, #10]
 80178b6:	ea4f 2848 	mov.w	r8, r8, lsl #9
			if (ifptr > 0 &&
 80178ba:	2b00      	cmp	r3, #0
 80178bc:	d035      	beq.n	801792a <f_lseek+0x166>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80178be:	3b01      	subs	r3, #1
 80178c0:	1e6a      	subs	r2, r5, #1
 80178c2:	fbb3 f1f8 	udiv	r1, r3, r8
 80178c6:	fbb2 f2f8 	udiv	r2, r2, r8
			if (ifptr > 0 &&
 80178ca:	428a      	cmp	r2, r1
 80178cc:	d32d      	bcc.n	801792a <f_lseek+0x166>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80178ce:	f1c8 0200 	rsb	r2, r8, #0
				clst = fp->clust;
 80178d2:	69e7      	ldr	r7, [r4, #28]
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80178d4:	4013      	ands	r3, r2
				ofs -= fp->fptr;
 80178d6:	1aed      	subs	r5, r5, r3
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80178d8:	61a3      	str	r3, [r4, #24]
			if (clst != 0) {
 80178da:	2f00      	cmp	r7, #0
 80178dc:	f000 80ec 	beq.w	8017ab8 <f_lseek+0x2f4>
				while (ofs > bcs) {						/* Cluster following loop */
 80178e0:	4545      	cmp	r5, r8
 80178e2:	f240 80d3 	bls.w	8017a8c <f_lseek+0x2c8>
 80178e6:	4639      	mov	r1, r7
 80178e8:	e012      	b.n	8017910 <f_lseek+0x14c>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80178ea:	f7fd fbed 	bl	80150c8 <create_chain>
						if (clst == 0) {				/* Clip file size in case of disk full */
 80178ee:	4601      	mov	r1, r0
 80178f0:	2800      	cmp	r0, #0
 80178f2:	f000 8126 	beq.w	8017b42 <f_lseek+0x37e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80178f6:	1c4b      	adds	r3, r1, #1
 80178f8:	d076      	beq.n	80179e8 <f_lseek+0x224>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80178fa:	2901      	cmp	r1, #1
 80178fc:	d977      	bls.n	80179ee <f_lseek+0x22a>
 80178fe:	f8da 3018 	ldr.w	r3, [sl, #24]
 8017902:	428b      	cmp	r3, r1
 8017904:	d973      	bls.n	80179ee <f_lseek+0x22a>
				while (ofs > bcs) {						/* Cluster following loop */
 8017906:	45a8      	cmp	r8, r5
					fp->clust = clst;
 8017908:	61e1      	str	r1, [r4, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 801790a:	f080 80bd 	bcs.w	8017a88 <f_lseek+0x2c4>
 801790e:	69a3      	ldr	r3, [r4, #24]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8017910:	7d22      	ldrb	r2, [r4, #20]
					ofs -= bcs; fp->fptr += bcs;
 8017912:	4443      	add	r3, r8
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8017914:	4620      	mov	r0, r4
					ofs -= bcs; fp->fptr += bcs;
 8017916:	eba5 0508 	sub.w	r5, r5, r8
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 801791a:	0792      	lsls	r2, r2, #30
					ofs -= bcs; fp->fptr += bcs;
 801791c:	61a3      	str	r3, [r4, #24]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 801791e:	d4e4      	bmi.n	80178ea <f_lseek+0x126>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8017920:	6820      	ldr	r0, [r4, #0]
 8017922:	f7fd f83f 	bl	80149a4 <get_fat.isra.0>
 8017926:	4601      	mov	r1, r0
 8017928:	e7e5      	b.n	80178f6 <f_lseek+0x132>
				clst = fp->obj.sclust;					/* start from the first cluster */
 801792a:	68a7      	ldr	r7, [r4, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801792c:	2f00      	cmp	r7, #0
 801792e:	f000 809f 	beq.w	8017a70 <f_lseek+0x2ac>
 8017932:	2300      	movs	r3, #0
				fp->clust = clst;
 8017934:	61e7      	str	r7, [r4, #28]
 8017936:	e7d0      	b.n	80178da <f_lseek+0x116>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8017938:	4683      	mov	fp, r0
			cl = fp->obj.sclust;		/* Origin of the chain */
 801793a:	68a3      	ldr	r3, [r4, #8]
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 801793c:	f85b 2b04 	ldr.w	r2, [fp], #4
 8017940:	9200      	str	r2, [sp, #0]
			if (cl) {
 8017942:	2b00      	cmp	r3, #0
 8017944:	f000 8088 	beq.w	8017a58 <f_lseek+0x294>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8017948:	2202      	movs	r2, #2
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801794a:	4657      	mov	r7, sl
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 801794c:	4699      	mov	r9, r3
 801794e:	9603      	str	r6, [sp, #12]
 8017950:	e9cd ba01 	strd	fp, sl, [sp, #4]
 8017954:	4692      	mov	sl, r2
 8017956:	46a3      	mov	fp, r4
 8017958:	464d      	mov	r5, r9
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 801795a:	2400      	movs	r4, #0
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801795c:	2d01      	cmp	r5, #1
						pcl = cl; ncl++;
 801795e:	f104 0401 	add.w	r4, r4, #1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8017962:	d902      	bls.n	801796a <f_lseek+0x1a6>
 8017964:	69bb      	ldr	r3, [r7, #24]
 8017966:	429d      	cmp	r5, r3
 8017968:	d303      	bcc.n	8017972 <f_lseek+0x1ae>
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 801796a:	2602      	movs	r6, #2
 801796c:	f88b 6015 	strb.w	r6, [fp, #21]
 8017970:	e737      	b.n	80177e2 <f_lseek+0x1e>
		switch (fs->fs_type) {
 8017972:	783b      	ldrb	r3, [r7, #0]
 8017974:	2b02      	cmp	r3, #2
 8017976:	d02c      	beq.n	80179d2 <f_lseek+0x20e>
 8017978:	2b03      	cmp	r3, #3
 801797a:	d03e      	beq.n	80179fa <f_lseek+0x236>
 801797c:	2b01      	cmp	r3, #1
 801797e:	d1f4      	bne.n	801796a <f_lseek+0x1a6>
			bc = (UINT)clst; bc += bc / 2;
 8017980:	eb05 0655 	add.w	r6, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8017986:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017988:	eb03 2156 	add.w	r1, r3, r6, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 801798c:	4291      	cmp	r1, r2
 801798e:	d005      	beq.n	801799c <f_lseek+0x1d8>
 8017990:	4638      	mov	r0, r7
 8017992:	f7fc ff2f 	bl	80147f4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017996:	bb30      	cbnz	r0, 80179e6 <f_lseek+0x222>
 8017998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801799a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 801799c:	f3c6 0008 	ubfx	r0, r6, #0, #9
 80179a0:	3601      	adds	r6, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80179a2:	eb03 2156 	add.w	r1, r3, r6, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 80179a6:	4438      	add	r0, r7
	if (sector != fs->winsect) {	/* Window offset changed? */
 80179a8:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 80179aa:	f890 8034 	ldrb.w	r8, [r0, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 80179ae:	d003      	beq.n	80179b8 <f_lseek+0x1f4>
 80179b0:	4638      	mov	r0, r7
 80179b2:	f7fc ff1f 	bl	80147f4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80179b6:	b9b0      	cbnz	r0, 80179e6 <f_lseek+0x222>
			wc |= fs->win[bc % SS(fs)] << 8;
 80179b8:	f3c6 0608 	ubfx	r6, r6, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80179bc:	07e8      	lsls	r0, r5, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 80179be:	4437      	add	r7, r6
 80179c0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80179c4:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80179c8:	f140 80ad 	bpl.w	8017b26 <f_lseek+0x362>
 80179cc:	ea4f 1818 	mov.w	r8, r8, lsr #4
 80179d0:	e02d      	b.n	8017a2e <f_lseek+0x26a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80179d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80179d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80179d6:	eb01 2115 	add.w	r1, r1, r5, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 80179da:	4299      	cmp	r1, r3
 80179dc:	d031      	beq.n	8017a42 <f_lseek+0x27e>
 80179de:	4638      	mov	r0, r7
 80179e0:	f7fc ff08 	bl	80147f4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80179e4:	b368      	cbz	r0, 8017a42 <f_lseek+0x27e>
 80179e6:	465c      	mov	r4, fp
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80179e8:	2601      	movs	r6, #1
 80179ea:	7566      	strb	r6, [r4, #21]
 80179ec:	e6f9      	b.n	80177e2 <f_lseek+0x1e>
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80179ee:	2602      	movs	r6, #2
}
 80179f0:	4630      	mov	r0, r6
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80179f2:	7566      	strb	r6, [r4, #21]
}
 80179f4:	b005      	add	sp, #20
 80179f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80179fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80179fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80179fe:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8017a02:	4299      	cmp	r1, r3
 8017a04:	d004      	beq.n	8017a10 <f_lseek+0x24c>
 8017a06:	4638      	mov	r0, r7
 8017a08:	f7fc fef4 	bl	80147f4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8017a0c:	2800      	cmp	r0, #0
 8017a0e:	d1ea      	bne.n	80179e6 <f_lseek+0x222>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8017a10:	00ab      	lsls	r3, r5, #2
 8017a12:	3734      	adds	r7, #52	; 0x34
 8017a14:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8017a18:	18fa      	adds	r2, r7, r3
	rv = rv << 8 | ptr[0];
 8017a1a:	f817 8003 	ldrb.w	r8, [r7, r3]
	rv = rv << 8 | ptr[2];
 8017a1e:	8851      	ldrh	r1, [r2, #2]
	rv = rv << 8 | ptr[1];
 8017a20:	7853      	ldrb	r3, [r2, #1]
 8017a22:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 8017a26:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8017a2a:	f028 4870 	bic.w	r8, r8, #4026531840	; 0xf0000000
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8017a2e:	f1b8 0f01 	cmp.w	r8, #1
 8017a32:	d99a      	bls.n	801796a <f_lseek+0x1a6>
					} while (cl == pcl + 1);
 8017a34:	3501      	adds	r5, #1
 8017a36:	4545      	cmp	r5, r8
 8017a38:	d150      	bne.n	8017adc <f_lseek+0x318>
 8017a3a:	4645      	mov	r5, r8
 8017a3c:	f8db 7000 	ldr.w	r7, [fp]
 8017a40:	e78c      	b.n	801795c <f_lseek+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8017a42:	006b      	lsls	r3, r5, #1
 8017a44:	3734      	adds	r7, #52	; 0x34
 8017a46:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8017a4a:	18fa      	adds	r2, r7, r3
	rv = rv << 8 | ptr[0];
 8017a4c:	f817 8003 	ldrb.w	r8, [r7, r3]
 8017a50:	7853      	ldrb	r3, [r2, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8017a52:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
			break;
 8017a56:	e7ea      	b.n	8017a2e <f_lseek+0x26a>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8017a58:	2202      	movs	r2, #2
			if (ulen <= tlen) {
 8017a5a:	9b00      	ldr	r3, [sp, #0]
			*fp->cltbl = ulen;	/* Number of items used */
 8017a5c:	6002      	str	r2, [r0, #0]
			if (ulen <= tlen) {
 8017a5e:	429a      	cmp	r2, r3
 8017a60:	d85f      	bhi.n	8017b22 <f_lseek+0x35e>
				*tbl = 0;		/* Terminate table */
 8017a62:	2300      	movs	r3, #0
 8017a64:	f8cb 3000 	str.w	r3, [fp]
 8017a68:	e6bb      	b.n	80177e2 <f_lseek+0x1e>
 8017a6a:	f06f 0201 	mvn.w	r2, #1
 8017a6e:	e6e8      	b.n	8017842 <f_lseek+0x7e>
					clst = create_chain(&fp->obj, 0);
 8017a70:	4639      	mov	r1, r7
 8017a72:	4620      	mov	r0, r4
 8017a74:	f7fd fb28 	bl	80150c8 <create_chain>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8017a78:	2801      	cmp	r0, #1
					clst = create_chain(&fp->obj, 0);
 8017a7a:	4607      	mov	r7, r0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8017a7c:	d0b7      	beq.n	80179ee <f_lseek+0x22a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8017a7e:	1c41      	adds	r1, r0, #1
 8017a80:	d0b2      	beq.n	80179e8 <f_lseek+0x224>
					fp->obj.sclust = clst;
 8017a82:	69a3      	ldr	r3, [r4, #24]
 8017a84:	60a0      	str	r0, [r4, #8]
 8017a86:	e755      	b.n	8017934 <f_lseek+0x170>
 8017a88:	460f      	mov	r7, r1
 8017a8a:	69a3      	ldr	r3, [r4, #24]
				fp->fptr += ofs;
 8017a8c:	442b      	add	r3, r5
				if (ofs % SS(fs)) {
 8017a8e:	f3c5 0208 	ubfx	r2, r5, #0, #9
				fp->fptr += ofs;
 8017a92:	61a3      	str	r3, [r4, #24]
				if (ofs % SS(fs)) {
 8017a94:	2a00      	cmp	r2, #0
 8017a96:	d057      	beq.n	8017b48 <f_lseek+0x384>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8017a98:	f8da 2018 	ldr.w	r2, [sl, #24]
	clst -= 2;
 8017a9c:	1eb9      	subs	r1, r7, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8017a9e:	3a02      	subs	r2, #2
 8017aa0:	4291      	cmp	r1, r2
 8017aa2:	d2a4      	bcs.n	80179ee <f_lseek+0x22a>
	return clst * fs->csize + fs->database;
 8017aa4:	f8ba 700a 	ldrh.w	r7, [sl, #10]
 8017aa8:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
 8017aac:	fb01 2707 	mla	r7, r1, r7, r2
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8017ab0:	2f00      	cmp	r7, #0
 8017ab2:	d09c      	beq.n	80179ee <f_lseek+0x22a>
					nsect += (DWORD)(ofs / SS(fs));
 8017ab4:	eb07 2755 	add.w	r7, r7, r5, lsr #9
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8017ab8:	68e2      	ldr	r2, [r4, #12]
 8017aba:	429a      	cmp	r2, r3
 8017abc:	d204      	bcs.n	8017ac8 <f_lseek+0x304>
			fp->flag |= FA_MODIFIED;
 8017abe:	7d22      	ldrb	r2, [r4, #20]
			fp->obj.objsize = fp->fptr;
 8017ac0:	60e3      	str	r3, [r4, #12]
			fp->flag |= FA_MODIFIED;
 8017ac2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8017ac6:	7522      	strb	r2, [r4, #20]
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8017ac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017acc:	2b00      	cmp	r3, #0
 8017ace:	f43f ae88 	beq.w	80177e2 <f_lseek+0x1e>
 8017ad2:	6a22      	ldr	r2, [r4, #32]
 8017ad4:	42ba      	cmp	r2, r7
 8017ad6:	f47f aecc 	bne.w	8017872 <f_lseek+0xae>
 8017ada:	e682      	b.n	80177e2 <f_lseek+0x1e>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8017adc:	f10a 0a02 	add.w	sl, sl, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8017ae0:	9b00      	ldr	r3, [sp, #0]
 8017ae2:	4553      	cmp	r3, sl
 8017ae4:	d322      	bcc.n	8017b2c <f_lseek+0x368>
						*tbl++ = ncl; *tbl++ = tcl;
 8017ae6:	9b01      	ldr	r3, [sp, #4]
 8017ae8:	4618      	mov	r0, r3
 8017aea:	f840 4b08 	str.w	r4, [r0], #8
 8017aee:	f8c3 9004 	str.w	r9, [r3, #4]
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8017af2:	9b02      	ldr	r3, [sp, #8]
 8017af4:	699a      	ldr	r2, [r3, #24]
 8017af6:	4590      	cmp	r8, r2
 8017af8:	d228      	bcs.n	8017b4c <f_lseek+0x388>
						*tbl++ = ncl; *tbl++ = tcl;
 8017afa:	9001      	str	r0, [sp, #4]
{
 8017afc:	46c1      	mov	r9, r8
 8017afe:	f8db 7000 	ldr.w	r7, [fp]
 8017b02:	e729      	b.n	8017958 <f_lseek+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8017b04:	2301      	movs	r3, #1
 8017b06:	f89a 0001 	ldrb.w	r0, [sl, #1]
 8017b0a:	9100      	str	r1, [sp, #0]
 8017b0c:	f7fc fdce 	bl	80146ac <disk_write>
 8017b10:	2800      	cmp	r0, #0
 8017b12:	f47f af69 	bne.w	80179e8 <f_lseek+0x224>
				fp->flag &= (BYTE)~FA_DIRTY;
 8017b16:	7d23      	ldrb	r3, [r4, #20]
 8017b18:	9900      	ldr	r1, [sp, #0]
 8017b1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017b1e:	7523      	strb	r3, [r4, #20]
 8017b20:	e6ae      	b.n	8017880 <f_lseek+0xbc>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8017b22:	2611      	movs	r6, #17
 8017b24:	e65d      	b.n	80177e2 <f_lseek+0x1e>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8017b26:	f3c8 080b 	ubfx	r8, r8, #0, #12
 8017b2a:	e780      	b.n	8017a2e <f_lseek+0x26a>
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8017b2c:	9b02      	ldr	r3, [sp, #8]
 8017b2e:	699a      	ldr	r2, [r3, #24]
 8017b30:	4542      	cmp	r2, r8
 8017b32:	d8e3      	bhi.n	8017afc <f_lseek+0x338>
 8017b34:	465c      	mov	r4, fp
 8017b36:	4652      	mov	r2, sl
 8017b38:	9e03      	ldr	r6, [sp, #12]
 8017b3a:	f8dd b004 	ldr.w	fp, [sp, #4]
 8017b3e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8017b40:	e78b      	b.n	8017a5a <f_lseek+0x296>
 8017b42:	4607      	mov	r7, r0
 8017b44:	69a3      	ldr	r3, [r4, #24]
 8017b46:	e7b7      	b.n	8017ab8 <f_lseek+0x2f4>
		fp->fptr = nsect = 0;
 8017b48:	4617      	mov	r7, r2
 8017b4a:	e7b5      	b.n	8017ab8 <f_lseek+0x2f4>
 8017b4c:	465c      	mov	r4, fp
 8017b4e:	4652      	mov	r2, sl
 8017b50:	9e03      	ldr	r6, [sp, #12]
						*tbl++ = ncl; *tbl++ = tcl;
 8017b52:	4683      	mov	fp, r0
 8017b54:	e7f3      	b.n	8017b3e <f_lseek+0x37a>
 8017b56:	bf00      	nop

08017b58 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8017b58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017b5c:	b085      	sub	sp, #20
 8017b5e:	9101      	str	r1, [sp, #4]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8017b60:	2800      	cmp	r0, #0
 8017b62:	d04b      	beq.n	8017bfc <f_opendir+0xa4>

	/* Get logical drive */
	obj = &dp->obj;
 8017b64:	4605      	mov	r5, r0
	res = find_volume(&path, &fs, 0);
 8017b66:	2200      	movs	r2, #0
 8017b68:	a903      	add	r1, sp, #12
 8017b6a:	a801      	add	r0, sp, #4
 8017b6c:	f7fd fbda 	bl	8015324 <find_volume>
	if (res == FR_OK) {
 8017b70:	4604      	mov	r4, r0
 8017b72:	b128      	cbz	r0, 8017b80 <f_opendir+0x28>
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8017b74:	2300      	movs	r3, #0
 8017b76:	602b      	str	r3, [r5, #0]

	LEAVE_FF(fs, res);
}
 8017b78:	4620      	mov	r0, r4
 8017b7a:	b005      	add	sp, #20
 8017b7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		obj->fs = fs;
 8017b80:	9b03      	ldr	r3, [sp, #12]
		INIT_NAMBUF(fs);
 8017b82:	f44f 7000 	mov.w	r0, #512	; 0x200
		obj->fs = fs;
 8017b86:	602b      	str	r3, [r5, #0]
		INIT_NAMBUF(fs);
 8017b88:	f000 fe24 	bl	80187d4 <ff_memalloc>
 8017b8c:	4606      	mov	r6, r0
 8017b8e:	2800      	cmp	r0, #0
 8017b90:	d039      	beq.n	8017c06 <f_opendir+0xae>
 8017b92:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8017b94:	4628      	mov	r0, r5
 8017b96:	9901      	ldr	r1, [sp, #4]
		INIT_NAMBUF(fs);
 8017b98:	60de      	str	r6, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8017b9a:	f7fe f843 	bl	8015c24 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 8017b9e:	4604      	mov	r4, r0
 8017ba0:	bb28      	cbnz	r0, 8017bee <f_opendir+0x96>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8017ba2:	f995 302f 	ldrsb.w	r3, [r5, #47]	; 0x2f
 8017ba6:	2b00      	cmp	r3, #0
 8017ba8:	db34      	blt.n	8017c14 <f_opendir+0xbc>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8017baa:	79ab      	ldrb	r3, [r5, #6]
 8017bac:	06db      	lsls	r3, r3, #27
 8017bae:	d52c      	bpl.n	8017c0a <f_opendir+0xb2>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8017bb0:	9a03      	ldr	r2, [sp, #12]
 8017bb2:	6a29      	ldr	r1, [r5, #32]
	if (fs->fs_type == FS_FAT32) {
 8017bb4:	7810      	ldrb	r0, [r2, #0]
	rv = rv << 8 | ptr[0];
 8017bb6:	7ecc      	ldrb	r4, [r1, #27]
 8017bb8:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
 8017bba:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8017bbc:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
	if (fs->fs_type == FS_FAT32) {
 8017bc0:	d105      	bne.n	8017bce <f_opendir+0x76>
	rv = rv << 8 | ptr[0];
 8017bc2:	7d48      	ldrb	r0, [r1, #21]
 8017bc4:	7d09      	ldrb	r1, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8017bc6:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8017bca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8017bce:	60ab      	str	r3, [r5, #8]
				obj->id = fs->id;
 8017bd0:	88d3      	ldrh	r3, [r2, #6]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8017bd2:	2100      	movs	r1, #0
 8017bd4:	4628      	mov	r0, r5
				obj->id = fs->id;
 8017bd6:	80ab      	strh	r3, [r5, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8017bd8:	f7fd fda8 	bl	801572c <dir_sdi>
				if (res == FR_OK) {
 8017bdc:	4604      	mov	r4, r0
 8017bde:	b930      	cbnz	r0, 8017bee <f_opendir+0x96>
					if (obj->sclust) {
 8017be0:	68aa      	ldr	r2, [r5, #8]
 8017be2:	b9ca      	cbnz	r2, 8017c18 <f_opendir+0xc0>
						obj->lockid = 0;	/* Root directory need not to be locked */
 8017be4:	6128      	str	r0, [r5, #16]
		FREE_NAMBUF();
 8017be6:	4630      	mov	r0, r6
 8017be8:	f000 fdf6 	bl	80187d8 <ff_memfree>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8017bec:	e7c4      	b.n	8017b78 <f_opendir+0x20>
		FREE_NAMBUF();
 8017bee:	4630      	mov	r0, r6
 8017bf0:	f000 fdf2 	bl	80187d8 <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8017bf4:	2c04      	cmp	r4, #4
 8017bf6:	bf08      	it	eq
 8017bf8:	2405      	moveq	r4, #5
 8017bfa:	e7bb      	b.n	8017b74 <f_opendir+0x1c>
	if (!dp) return FR_INVALID_OBJECT;
 8017bfc:	2409      	movs	r4, #9
}
 8017bfe:	4620      	mov	r0, r4
 8017c00:	b005      	add	sp, #20
 8017c02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		INIT_NAMBUF(fs);
 8017c06:	2411      	movs	r4, #17
 8017c08:	e7b6      	b.n	8017b78 <f_opendir+0x20>
		FREE_NAMBUF();
 8017c0a:	4630      	mov	r0, r6
					res = FR_NO_PATH;
 8017c0c:	2405      	movs	r4, #5
		FREE_NAMBUF();
 8017c0e:	f000 fde3 	bl	80187d8 <ff_memfree>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8017c12:	e7af      	b.n	8017b74 <f_opendir+0x1c>
 8017c14:	9a03      	ldr	r2, [sp, #12]
 8017c16:	e7db      	b.n	8017bd0 <f_opendir+0x78>
		if (Files[i].fs == dp->obj.fs &&
 8017c18:	4b38      	ldr	r3, [pc, #224]	; (8017cfc <f_opendir+0x1a4>)
 8017c1a:	6829      	ldr	r1, [r5, #0]
 8017c1c:	f8d3 9000 	ldr.w	r9, [r3]
 8017c20:	4589      	cmp	r9, r1
 8017c22:	d04a      	beq.n	8017cba <f_opendir+0x162>
 8017c24:	f8d3 e010 	ldr.w	lr, [r3, #16]
 8017c28:	4571      	cmp	r1, lr
 8017c2a:	d03c      	beq.n	8017ca6 <f_opendir+0x14e>
 8017c2c:	f8d3 8020 	ldr.w	r8, [r3, #32]
 8017c30:	4541      	cmp	r1, r8
 8017c32:	d02e      	beq.n	8017c92 <f_opendir+0x13a>
 8017c34:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 8017c36:	428f      	cmp	r7, r1
 8017c38:	d011      	beq.n	8017c5e <f_opendir+0x106>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8017c3a:	f1b9 0f00 	cmp.w	r9, #0
 8017c3e:	d055      	beq.n	8017cec <f_opendir+0x194>
 8017c40:	f1be 0f00 	cmp.w	lr, #0
 8017c44:	d042      	beq.n	8017ccc <f_opendir+0x174>
 8017c46:	f1b8 0f00 	cmp.w	r8, #0
 8017c4a:	d054      	beq.n	8017cf6 <f_opendir+0x19e>
 8017c4c:	2f00      	cmp	r7, #0
 8017c4e:	d04f      	beq.n	8017cf0 <f_opendir+0x198>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8017c50:	2300      	movs	r3, #0
		FREE_NAMBUF();
 8017c52:	4630      	mov	r0, r6
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8017c54:	2412      	movs	r4, #18
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8017c56:	612b      	str	r3, [r5, #16]
		FREE_NAMBUF();
 8017c58:	f000 fdbe 	bl	80187d8 <ff_memfree>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8017c5c:	e78a      	b.n	8017b74 <f_opendir+0x1c>
		if (Files[i].fs == dp->obj.fs &&
 8017c5e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8017c60:	4282      	cmp	r2, r0
 8017c62:	d1ea      	bne.n	8017c3a <f_opendir+0xe2>
			Files[i].clu == dp->obj.sclust &&
 8017c64:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8017c66:	4684      	mov	ip, r0
 8017c68:	6968      	ldr	r0, [r5, #20]
 8017c6a:	4584      	cmp	ip, r0
 8017c6c:	d1e5      	bne.n	8017c3a <f_opendir+0xe2>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8017c6e:	f04f 0c03 	mov.w	ip, #3
 8017c72:	eb03 120c 	add.w	r2, r3, ip, lsl #4
 8017c76:	ea4f 170c 	mov.w	r7, ip, lsl #4
 8017c7a:	8992      	ldrh	r2, [r2, #12]
 8017c7c:	3201      	adds	r2, #1
 8017c7e:	b292      	uxth	r2, r2
	return i + 1;
 8017c80:	f10c 0101 	add.w	r1, ip, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8017c84:	443b      	add	r3, r7
		FREE_NAMBUF();
 8017c86:	4630      	mov	r0, r6
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8017c88:	6129      	str	r1, [r5, #16]
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8017c8a:	819a      	strh	r2, [r3, #12]
		FREE_NAMBUF();
 8017c8c:	f000 fda4 	bl	80187d8 <ff_memfree>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8017c90:	e772      	b.n	8017b78 <f_opendir+0x20>
		if (Files[i].fs == dp->obj.fs &&
 8017c92:	6a5f      	ldr	r7, [r3, #36]	; 0x24
 8017c94:	42ba      	cmp	r2, r7
 8017c96:	d1cd      	bne.n	8017c34 <f_opendir+0xdc>
			Files[i].clu == dp->obj.sclust &&
 8017c98:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 8017c9a:	6968      	ldr	r0, [r5, #20]
 8017c9c:	4287      	cmp	r7, r0
 8017c9e:	d1c9      	bne.n	8017c34 <f_opendir+0xdc>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8017ca0:	f04f 0c02 	mov.w	ip, #2
 8017ca4:	e7e5      	b.n	8017c72 <f_opendir+0x11a>
		if (Files[i].fs == dp->obj.fs &&
 8017ca6:	695f      	ldr	r7, [r3, #20]
 8017ca8:	42ba      	cmp	r2, r7
 8017caa:	d1bf      	bne.n	8017c2c <f_opendir+0xd4>
			Files[i].clu == dp->obj.sclust &&
 8017cac:	699f      	ldr	r7, [r3, #24]
 8017cae:	6968      	ldr	r0, [r5, #20]
 8017cb0:	4287      	cmp	r7, r0
 8017cb2:	d1bb      	bne.n	8017c2c <f_opendir+0xd4>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8017cb4:	f04f 0c01 	mov.w	ip, #1
 8017cb8:	e7db      	b.n	8017c72 <f_opendir+0x11a>
		if (Files[i].fs == dp->obj.fs &&
 8017cba:	685f      	ldr	r7, [r3, #4]
 8017cbc:	42ba      	cmp	r2, r7
 8017cbe:	d1b1      	bne.n	8017c24 <f_opendir+0xcc>
			Files[i].clu == dp->obj.sclust &&
 8017cc0:	689f      	ldr	r7, [r3, #8]
 8017cc2:	6968      	ldr	r0, [r5, #20]
 8017cc4:	4287      	cmp	r7, r0
 8017cc6:	d1ad      	bne.n	8017c24 <f_opendir+0xcc>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8017cc8:	46a4      	mov	ip, r4
 8017cca:	e7d2      	b.n	8017c72 <f_opendir+0x11a>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8017ccc:	f04f 0c01 	mov.w	ip, #1
		Files[i].fs = dp->obj.fs;
 8017cd0:	eb03 1e0c 	add.w	lr, r3, ip, lsl #4
		Files[i].ofs = dp->dptr;
 8017cd4:	6968      	ldr	r0, [r5, #20]
		Files[i].fs = dp->obj.fs;
 8017cd6:	ea4f 170c 	mov.w	r7, ip, lsl #4
		Files[i].ctr = 0;
 8017cda:	f04f 0800 	mov.w	r8, #0
		Files[i].ofs = dp->dptr;
 8017cde:	e9ce 2001 	strd	r2, r0, [lr, #4]
		Files[i].fs = dp->obj.fs;
 8017ce2:	51d9      	str	r1, [r3, r7]
		Files[i].ctr = 0;
 8017ce4:	2201      	movs	r2, #1
 8017ce6:	f8ae 800c 	strh.w	r8, [lr, #12]
 8017cea:	e7c9      	b.n	8017c80 <f_opendir+0x128>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8017cec:	46cc      	mov	ip, r9
 8017cee:	e7ef      	b.n	8017cd0 <f_opendir+0x178>
 8017cf0:	f04f 0c03 	mov.w	ip, #3
 8017cf4:	e7ec      	b.n	8017cd0 <f_opendir+0x178>
 8017cf6:	f04f 0c02 	mov.w	ip, #2
 8017cfa:	e7e9      	b.n	8017cd0 <f_opendir+0x178>
 8017cfc:	2000952c 	.word	0x2000952c

08017d00 <f_closedir>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8017d00:	b330      	cbz	r0, 8017d50 <f_closedir+0x50>
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8017d02:	b538      	push	{r3, r4, r5, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8017d04:	6803      	ldr	r3, [r0, #0]
 8017d06:	4604      	mov	r4, r0
 8017d08:	b12b      	cbz	r3, 8017d16 <f_closedir+0x16>
 8017d0a:	781a      	ldrb	r2, [r3, #0]
 8017d0c:	b11a      	cbz	r2, 8017d16 <f_closedir+0x16>
 8017d0e:	8881      	ldrh	r1, [r0, #4]
 8017d10:	88da      	ldrh	r2, [r3, #6]
 8017d12:	4291      	cmp	r1, r2
 8017d14:	d001      	beq.n	8017d1a <f_closedir+0x1a>
	FRESULT res = FR_INVALID_OBJECT;
 8017d16:	2009      	movs	r0, #9
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
}
 8017d18:	bd38      	pop	{r3, r4, r5, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8017d1a:	7858      	ldrb	r0, [r3, #1]
 8017d1c:	f7fc fc9a 	bl	8014654 <disk_status>
 8017d20:	f010 0001 	ands.w	r0, r0, #1
 8017d24:	d1f7      	bne.n	8017d16 <f_closedir+0x16>
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8017d26:	6923      	ldr	r3, [r4, #16]
 8017d28:	b17b      	cbz	r3, 8017d4a <f_closedir+0x4a>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8017d2a:	3b01      	subs	r3, #1
 8017d2c:	2b03      	cmp	r3, #3
 8017d2e:	d815      	bhi.n	8017d5c <f_closedir+0x5c>
		n = Files[i].ctr;
 8017d30:	490b      	ldr	r1, [pc, #44]	; (8017d60 <f_closedir+0x60>)
 8017d32:	011d      	lsls	r5, r3, #4
 8017d34:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 8017d38:	899a      	ldrh	r2, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8017d3a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8017d3e:	d009      	beq.n	8017d54 <f_closedir+0x54>
		if (n > 0) n--;				/* Decrement read mode open count */
 8017d40:	b14a      	cbz	r2, 8017d56 <f_closedir+0x56>
 8017d42:	3a01      	subs	r2, #1
 8017d44:	b292      	uxth	r2, r2
		Files[i].ctr = n;
 8017d46:	819a      	strh	r2, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8017d48:	b12a      	cbz	r2, 8017d56 <f_closedir+0x56>
			dp->obj.fs = 0;			/* Invalidate directory object */
 8017d4a:	2300      	movs	r3, #0
 8017d4c:	6023      	str	r3, [r4, #0]
}
 8017d4e:	bd38      	pop	{r3, r4, r5, pc}
	FRESULT res = FR_INVALID_OBJECT;
 8017d50:	2009      	movs	r0, #9
}
 8017d52:	4770      	bx	lr
		Files[i].ctr = n;
 8017d54:	8198      	strh	r0, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8017d56:	2300      	movs	r3, #0
 8017d58:	514b      	str	r3, [r1, r5]
		if (res == FR_OK)
 8017d5a:	e7f6      	b.n	8017d4a <f_closedir+0x4a>
		res = FR_INT_ERR;			/* Invalid index nunber */
 8017d5c:	2002      	movs	r0, #2
}
 8017d5e:	bd38      	pop	{r3, r4, r5, pc}
 8017d60:	2000952c 	.word	0x2000952c

08017d64 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8017d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8017d66:	b148      	cbz	r0, 8017d7c <f_readdir+0x18>
 8017d68:	6803      	ldr	r3, [r0, #0]
 8017d6a:	4604      	mov	r4, r0
 8017d6c:	b133      	cbz	r3, 8017d7c <f_readdir+0x18>
 8017d6e:	781a      	ldrb	r2, [r3, #0]
 8017d70:	b122      	cbz	r2, 8017d7c <f_readdir+0x18>
 8017d72:	460e      	mov	r6, r1
 8017d74:	88da      	ldrh	r2, [r3, #6]
 8017d76:	8881      	ldrh	r1, [r0, #4]
 8017d78:	4291      	cmp	r1, r2
 8017d7a:	d002      	beq.n	8017d82 <f_readdir+0x1e>
	FRESULT res = FR_INVALID_OBJECT;
 8017d7c:	2509      	movs	r5, #9
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
}
 8017d7e:	4628      	mov	r0, r5
 8017d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8017d82:	7858      	ldrb	r0, [r3, #1]
 8017d84:	f7fc fc66 	bl	8014654 <disk_status>
 8017d88:	07c3      	lsls	r3, r0, #31
 8017d8a:	d4f7      	bmi.n	8017d7c <f_readdir+0x18>
		if (!fno) {
 8017d8c:	b1f6      	cbz	r6, 8017dcc <f_readdir+0x68>
			INIT_NAMBUF(fs);
 8017d8e:	f44f 7000 	mov.w	r0, #512	; 0x200
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8017d92:	6825      	ldr	r5, [r4, #0]
			INIT_NAMBUF(fs);
 8017d94:	f000 fd1e 	bl	80187d4 <ff_memalloc>
 8017d98:	4607      	mov	r7, r0
 8017d9a:	b1e8      	cbz	r0, 8017dd8 <f_readdir+0x74>
 8017d9c:	60e8      	str	r0, [r5, #12]
			res = dir_read(dp, 0);			/* Read an item */
 8017d9e:	4620      	mov	r0, r4
 8017da0:	f7fc feb0 	bl	8014b04 <dir_read.constprop.0>
			if (res == FR_OK) {				/* A valid entry is found */
 8017da4:	f010 0ffb 	tst.w	r0, #251	; 0xfb
			res = dir_read(dp, 0);			/* Read an item */
 8017da8:	4605      	mov	r5, r0
			if (res == FR_OK) {				/* A valid entry is found */
 8017daa:	d10a      	bne.n	8017dc2 <f_readdir+0x5e>
				get_fileinfo(dp, fno);		/* Get the object information */
 8017dac:	4631      	mov	r1, r6
 8017dae:	4620      	mov	r0, r4
 8017db0:	f7fc fc9a 	bl	80146e8 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8017db4:	4620      	mov	r0, r4
 8017db6:	f7fc fe61 	bl	8014a7c <dir_next.constprop.0>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8017dba:	2804      	cmp	r0, #4
 8017dbc:	bf14      	ite	ne
 8017dbe:	4605      	movne	r5, r0
 8017dc0:	2500      	moveq	r5, #0
			FREE_NAMBUF();
 8017dc2:	4638      	mov	r0, r7
 8017dc4:	f000 fd08 	bl	80187d8 <ff_memfree>
}
 8017dc8:	4628      	mov	r0, r5
 8017dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8017dcc:	4631      	mov	r1, r6
 8017dce:	4620      	mov	r0, r4
}
 8017dd0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8017dd4:	f7fd bcaa 	b.w	801572c <dir_sdi>
			INIT_NAMBUF(fs);
 8017dd8:	2511      	movs	r5, #17
 8017dda:	e7d0      	b.n	8017d7e <f_readdir+0x1a>

08017ddc <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8017ddc:	b570      	push	{r4, r5, r6, lr}
 8017dde:	b090      	sub	sp, #64	; 0x40
 8017de0:	460d      	mov	r5, r1
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8017de2:	2200      	movs	r2, #0
{
 8017de4:	9001      	str	r0, [sp, #4]
	res = find_volume(&path, &dj.obj.fs, 0);
 8017de6:	a903      	add	r1, sp, #12
 8017de8:	a801      	add	r0, sp, #4
 8017dea:	f7fd fa9b 	bl	8015324 <find_volume>
	if (res == FR_OK) {
 8017dee:	4604      	mov	r4, r0
 8017df0:	b110      	cbz	r0, 8017df8 <f_stat+0x1c>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
}
 8017df2:	4620      	mov	r0, r4
 8017df4:	b010      	add	sp, #64	; 0x40
 8017df6:	bd70      	pop	{r4, r5, r6, pc}
		INIT_NAMBUF(dj.obj.fs);
 8017df8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8017dfc:	f000 fcea 	bl	80187d4 <ff_memalloc>
 8017e00:	4606      	mov	r6, r0
 8017e02:	b1b0      	cbz	r0, 8017e32 <f_stat+0x56>
 8017e04:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8017e06:	a803      	add	r0, sp, #12
 8017e08:	9901      	ldr	r1, [sp, #4]
		INIT_NAMBUF(dj.obj.fs);
 8017e0a:	60de      	str	r6, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8017e0c:	f7fd ff0a 	bl	8015c24 <follow_path>
		if (res == FR_OK) {				/* Follow completed */
 8017e10:	4604      	mov	r4, r0
 8017e12:	b940      	cbnz	r0, 8017e26 <f_stat+0x4a>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8017e14:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
 8017e18:	2b00      	cmp	r3, #0
 8017e1a:	db0c      	blt.n	8017e36 <f_stat+0x5a>
				if (fno) get_fileinfo(&dj, fno);
 8017e1c:	b11d      	cbz	r5, 8017e26 <f_stat+0x4a>
 8017e1e:	4629      	mov	r1, r5
 8017e20:	a803      	add	r0, sp, #12
 8017e22:	f7fc fc61 	bl	80146e8 <get_fileinfo>
		FREE_NAMBUF();
 8017e26:	4630      	mov	r0, r6
 8017e28:	f000 fcd6 	bl	80187d8 <ff_memfree>
}
 8017e2c:	4620      	mov	r0, r4
 8017e2e:	b010      	add	sp, #64	; 0x40
 8017e30:	bd70      	pop	{r4, r5, r6, pc}
		INIT_NAMBUF(dj.obj.fs);
 8017e32:	2411      	movs	r4, #17
 8017e34:	e7dd      	b.n	8017df2 <f_stat+0x16>
				res = FR_INVALID_NAME;
 8017e36:	2406      	movs	r4, #6
 8017e38:	e7f5      	b.n	8017e26 <f_stat+0x4a>
 8017e3a:	bf00      	nop

08017e3c <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8017e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e40:	b097      	sub	sp, #92	; 0x5c
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8017e42:	2202      	movs	r2, #2
{
 8017e44:	9007      	str	r0, [sp, #28]
	res = find_volume(&path, &fs, FA_WRITE);
 8017e46:	a908      	add	r1, sp, #32
 8017e48:	a807      	add	r0, sp, #28
 8017e4a:	f7fd fa6b 	bl	8015324 <find_volume>
	dj.obj.fs = fs;
 8017e4e:	9b08      	ldr	r3, [sp, #32]
	if (res == FR_OK) {
 8017e50:	4606      	mov	r6, r0
	dj.obj.fs = fs;
 8017e52:	9309      	str	r3, [sp, #36]	; 0x24
	if (res == FR_OK) {
 8017e54:	b118      	cbz	r0, 8017e5e <f_mkdir+0x22>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
 8017e56:	4630      	mov	r0, r6
 8017e58:	b017      	add	sp, #92	; 0x5c
 8017e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		INIT_NAMBUF(fs);
 8017e5e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8017e62:	f000 fcb7 	bl	80187d4 <ff_memalloc>
 8017e66:	4604      	mov	r4, r0
 8017e68:	b190      	cbz	r0, 8017e90 <f_mkdir+0x54>
		res = follow_path(&dj, path);			/* Follow the file path */
 8017e6a:	e9dd 1307 	ldrd	r1, r3, [sp, #28]
		INIT_NAMBUF(fs);
 8017e6e:	60d8      	str	r0, [r3, #12]
		res = follow_path(&dj, path);			/* Follow the file path */
 8017e70:	a809      	add	r0, sp, #36	; 0x24
 8017e72:	f7fd fed7 	bl	8015c24 <follow_path>
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8017e76:	b148      	cbz	r0, 8017e8c <f_mkdir+0x50>
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8017e78:	2804      	cmp	r0, #4
 8017e7a:	d00b      	beq.n	8017e94 <f_mkdir+0x58>
 8017e7c:	4606      	mov	r6, r0
		FREE_NAMBUF();
 8017e7e:	4620      	mov	r0, r4
 8017e80:	f000 fcaa 	bl	80187d8 <ff_memfree>
}
 8017e84:	4630      	mov	r0, r6
 8017e86:	b017      	add	sp, #92	; 0x5c
 8017e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8017e8c:	2608      	movs	r6, #8
 8017e8e:	e7f6      	b.n	8017e7e <f_mkdir+0x42>
		INIT_NAMBUF(fs);
 8017e90:	2611      	movs	r6, #17
 8017e92:	e7e0      	b.n	8017e56 <f_mkdir+0x1a>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8017e94:	4631      	mov	r1, r6
 8017e96:	a809      	add	r0, sp, #36	; 0x24
 8017e98:	f7fd f916 	bl	80150c8 <create_chain>
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8017e9c:	9d08      	ldr	r5, [sp, #32]
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8017e9e:	4680      	mov	r8, r0
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8017ea0:	896b      	ldrh	r3, [r5, #10]
 8017ea2:	025b      	lsls	r3, r3, #9
 8017ea4:	930c      	str	r3, [sp, #48]	; 0x30
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8017ea6:	2800      	cmp	r0, #0
 8017ea8:	f000 810e 	beq.w	80180c8 <f_mkdir+0x28c>
			if (dcl == 1) res = FR_INT_ERR;
 8017eac:	2801      	cmp	r0, #1
 8017eae:	f000 810f 	beq.w	80180d0 <f_mkdir+0x294>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8017eb2:	f1b0 3fff 	cmp.w	r0, #4294967295
 8017eb6:	f000 8117 	beq.w	80180e8 <f_mkdir+0x2ac>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8017eba:	78eb      	ldrb	r3, [r5, #3]
 8017ebc:	2b00      	cmp	r3, #0
 8017ebe:	f040 8115 	bne.w	80180ec <f_mkdir+0x2b0>
			tm = GET_FATTIME();
 8017ec2:	f7fc fc0f 	bl	80146e4 <get_fattime>
				dsc = clust2sect(fs, dcl);
 8017ec6:	f8dd 9020 	ldr.w	r9, [sp, #32]
	clst -= 2;
 8017eca:	f1a8 0202 	sub.w	r2, r8, #2
			tm = GET_FATTIME();
 8017ece:	4605      	mov	r5, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8017ed0:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8017ed4:	3b02      	subs	r3, #2
 8017ed6:	429a      	cmp	r2, r3
 8017ed8:	f080 8103 	bcs.w	80180e2 <f_mkdir+0x2a6>
	return clst * fs->csize + fs->database;
 8017edc:	f8b9 700a 	ldrh.w	r7, [r9, #10]
 8017ee0:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 8017ee4:	fb02 3307 	mla	r3, r2, r7, r3
 8017ee8:	469b      	mov	fp, r3
	*ptr++ = (BYTE)val; val >>= 8;
 8017eea:	b2eb      	uxtb	r3, r5
				dir = fs->win;
 8017eec:	f109 0a34 	add.w	sl, r9, #52	; 0x34
				mem_set(dir, 0, SS(fs));
 8017ef0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017ef4:	2100      	movs	r1, #0
	*ptr++ = (BYTE)val; val >>= 8;
 8017ef6:	9302      	str	r3, [sp, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 8017ef8:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8017efc:	4650      	mov	r0, sl
	*ptr++ = (BYTE)val; val >>= 8;
 8017efe:	fa5f f788 	uxtb.w	r7, r8
	*ptr++ = (BYTE)val; val >>= 8;
 8017f02:	9303      	str	r3, [sp, #12]
 8017f04:	f00c ff9a 	bl	8024e3c <memset>
 8017f08:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
					dir[DIR_Attr] = AM_DIR;
 8017f0c:	2210      	movs	r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8017f0e:	9701      	str	r7, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8017f10:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8017f14:	f8c9 3034 	str.w	r3, [r9, #52]	; 0x34
	*ptr++ = (BYTE)val;
 8017f18:	0e2d      	lsrs	r5, r5, #24
 8017f1a:	f8ca 3004 	str.w	r3, [sl, #4]
	*ptr++ = (BYTE)val;
 8017f1e:	f3c8 2707 	ubfx	r7, r8, #8, #8
 8017f22:	f8ca 3007 	str.w	r3, [sl, #7]
					dir[DIR_Name] = '.';
 8017f26:	212e      	movs	r1, #46	; 0x2e
					dir[DIR_Attr] = AM_DIR;
 8017f28:	f889 203f 	strb.w	r2, [r9, #63]	; 0x3f
	*ptr++ = (BYTE)val; val >>= 8;
 8017f2c:	9a02      	ldr	r2, [sp, #8]
	if (fs->fs_type == FS_FAT32) {
 8017f2e:	f899 3000 	ldrb.w	r3, [r9]
	*ptr++ = (BYTE)val; val >>= 8;
 8017f32:	f889 204a 	strb.w	r2, [r9, #74]	; 0x4a
	*ptr++ = (BYTE)val; val >>= 8;
 8017f36:	9a03      	ldr	r2, [sp, #12]
	if (fs->fs_type == FS_FAT32) {
 8017f38:	2b03      	cmp	r3, #3
	*ptr++ = (BYTE)val; val >>= 8;
 8017f3a:	9005      	str	r0, [sp, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 8017f3c:	f889 204b 	strb.w	r2, [r9, #75]	; 0x4b
	*ptr++ = (BYTE)val; val >>= 8;
 8017f40:	9a01      	ldr	r2, [sp, #4]
	*ptr++ = (BYTE)val;
 8017f42:	9506      	str	r5, [sp, #24]
	*ptr++ = (BYTE)val;
 8017f44:	9704      	str	r7, [sp, #16]
					dir[DIR_Name] = '.';
 8017f46:	f889 1034 	strb.w	r1, [r9, #52]	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 8017f4a:	f889 004c 	strb.w	r0, [r9, #76]	; 0x4c
	*ptr++ = (BYTE)val;
 8017f4e:	f889 504d 	strb.w	r5, [r9, #77]	; 0x4d
	*ptr++ = (BYTE)val; val >>= 8;
 8017f52:	f889 204e 	strb.w	r2, [r9, #78]	; 0x4e
	*ptr++ = (BYTE)val;
 8017f56:	f889 704f 	strb.w	r7, [r9, #79]	; 0x4f
	if (fs->fs_type == FS_FAT32) {
 8017f5a:	d106      	bne.n	8017f6a <f_mkdir+0x12e>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8017f5c:	ea4f 4318 	mov.w	r3, r8, lsr #16
	*ptr++ = (BYTE)val; val >>= 8;
 8017f60:	0a1a      	lsrs	r2, r3, #8
 8017f62:	f889 3048 	strb.w	r3, [r9, #72]	; 0x48
	*ptr++ = (BYTE)val;
 8017f66:	f889 2049 	strb.w	r2, [r9, #73]	; 0x49
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8017f6a:	f109 0358 	add.w	r3, r9, #88	; 0x58
 8017f6e:	459a      	cmp	sl, r3
 8017f70:	d206      	bcs.n	8017f80 <f_mkdir+0x144>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8017f72:	f109 0154 	add.w	r1, r9, #84	; 0x54
 8017f76:	f109 0338 	add.w	r3, r9, #56	; 0x38
 8017f7a:	4299      	cmp	r1, r3
 8017f7c:	f0c0 80c4 	bcc.w	8018108 <f_mkdir+0x2cc>
			*d++ = *s++;
 8017f80:	f8d9 2034 	ldr.w	r2, [r9, #52]	; 0x34
 8017f84:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
 8017f88:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
 8017f8c:	f8c9 3058 	str.w	r3, [r9, #88]	; 0x58
 8017f90:	f8d9 203c 	ldr.w	r2, [r9, #60]	; 0x3c
 8017f94:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 8017f98:	f8c9 205c 	str.w	r2, [r9, #92]	; 0x5c
 8017f9c:	f8c9 3060 	str.w	r3, [r9, #96]	; 0x60
 8017fa0:	f8d9 2044 	ldr.w	r2, [r9, #68]	; 0x44
 8017fa4:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8017fa8:	f8c9 2064 	str.w	r2, [r9, #100]	; 0x64
 8017fac:	f8c9 3068 	str.w	r3, [r9, #104]	; 0x68
 8017fb0:	f8d9 204c 	ldr.w	r2, [r9, #76]	; 0x4c
 8017fb4:	f8d9 3050 	ldr.w	r3, [r9, #80]	; 0x50
 8017fb8:	f8c9 206c 	str.w	r2, [r9, #108]	; 0x6c
 8017fbc:	f8c9 3070 	str.w	r3, [r9, #112]	; 0x70
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8017fc0:	222e      	movs	r2, #46	; 0x2e
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8017fc2:	9d08      	ldr	r5, [sp, #32]
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8017fc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017fc6:	f889 2055 	strb.w	r2, [r9, #85]	; 0x55
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8017fca:	782a      	ldrb	r2, [r5, #0]
 8017fcc:	2a03      	cmp	r2, #3
 8017fce:	f000 8081 	beq.w	80180d4 <f_mkdir+0x298>
 8017fd2:	b2de      	uxtb	r6, r3
 8017fd4:	f3c3 2207 	ubfx	r2, r3, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8017fd8:	f889 606e 	strb.w	r6, [r9, #110]	; 0x6e
	*ptr++ = (BYTE)val;
 8017fdc:	f889 206f 	strb.w	r2, [r9, #111]	; 0x6f
	if (fs->fs_type == FS_FAT32) {
 8017fe0:	782a      	ldrb	r2, [r5, #0]
 8017fe2:	2a03      	cmp	r2, #3
 8017fe4:	d105      	bne.n	8017ff2 <f_mkdir+0x1b6>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8017fe6:	0c1b      	lsrs	r3, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8017fe8:	0a1a      	lsrs	r2, r3, #8
 8017fea:	f889 3068 	strb.w	r3, [r9, #104]	; 0x68
	*ptr++ = (BYTE)val;
 8017fee:	f889 2069 	strb.w	r2, [r9, #105]	; 0x69
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8017ff2:	896b      	ldrh	r3, [r5, #10]
 8017ff4:	2b00      	cmp	r3, #0
 8017ff6:	d03b      	beq.n	8018070 <f_mkdir+0x234>
 8017ff8:	3b01      	subs	r3, #1
 8017ffa:	465f      	mov	r7, fp
 8017ffc:	9400      	str	r4, [sp, #0]
 8017ffe:	445b      	add	r3, fp
 8018000:	469b      	mov	fp, r3
					fs->wflag = 1;
 8018002:	f04f 0301 	mov.w	r3, #1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8018006:	f105 0434 	add.w	r4, r5, #52	; 0x34
 801800a:	463a      	mov	r2, r7
 801800c:	7868      	ldrb	r0, [r5, #1]
					fs->wflag = 1;
 801800e:	70eb      	strb	r3, [r5, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8018010:	4621      	mov	r1, r4
 8018012:	2301      	movs	r3, #1
					fs->winsect = dsc++;
 8018014:	632f      	str	r7, [r5, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8018016:	f7fc fb49 	bl	80146ac <disk_write>
 801801a:	bb00      	cbnz	r0, 801805e <f_mkdir+0x222>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801801c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801801e:	69eb      	ldr	r3, [r5, #28]
 8018020:	1aba      	subs	r2, r7, r2
			fs->wflag = 0;
 8018022:	70e8      	strb	r0, [r5, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8018024:	429a      	cmp	r2, r3
 8018026:	d20f      	bcs.n	8018048 <f_mkdir+0x20c>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8018028:	78ae      	ldrb	r6, [r5, #2]
 801802a:	2e01      	cmp	r6, #1
 801802c:	d90c      	bls.n	8018048 <f_mkdir+0x20c>
 801802e:	46b9      	mov	r9, r7
 8018030:	e000      	b.n	8018034 <f_mkdir+0x1f8>
 8018032:	69eb      	ldr	r3, [r5, #28]
					wsect += fs->fsize;
 8018034:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8018036:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8018038:	2301      	movs	r3, #1
 801803a:	4621      	mov	r1, r4
 801803c:	464a      	mov	r2, r9
 801803e:	7868      	ldrb	r0, [r5, #1]
 8018040:	f7fc fb34 	bl	80146ac <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8018044:	2e01      	cmp	r6, #1
 8018046:	d1f4      	bne.n	8018032 <f_mkdir+0x1f6>
 8018048:	f44f 7200 	mov.w	r2, #512	; 0x200
 801804c:	2100      	movs	r1, #0
 801804e:	4650      	mov	r0, sl
 8018050:	f00c fef4 	bl	8024e3c <memset>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8018054:	45bb      	cmp	fp, r7
 8018056:	d00a      	beq.n	801806e <f_mkdir+0x232>
 8018058:	3701      	adds	r7, #1
 801805a:	9d08      	ldr	r5, [sp, #32]
 801805c:	e7d1      	b.n	8018002 <f_mkdir+0x1c6>
 801805e:	9c00      	ldr	r4, [sp, #0]
			res = FR_DISK_ERR;
 8018060:	2601      	movs	r6, #1
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8018062:	4641      	mov	r1, r8
 8018064:	a809      	add	r0, sp, #36	; 0x24
 8018066:	2200      	movs	r2, #0
 8018068:	f7fd ff78 	bl	8015f5c <remove_chain>
 801806c:	e707      	b.n	8017e7e <f_mkdir+0x42>
 801806e:	9c00      	ldr	r4, [sp, #0]
				res = dir_register(&dj);	/* Register the object to the directoy */
 8018070:	a809      	add	r0, sp, #36	; 0x24
 8018072:	f7fe f81b 	bl	80160ac <dir_register>
			if (res == FR_OK) {
 8018076:	4606      	mov	r6, r0
 8018078:	2800      	cmp	r0, #0
 801807a:	d1f2      	bne.n	8018062 <f_mkdir+0x226>
	*ptr++ = (BYTE)val; val >>= 8;
 801807c:	9a02      	ldr	r2, [sp, #8]
					dir = dj.dir;
 801807e:	9b11      	ldr	r3, [sp, #68]	; 0x44
	*ptr++ = (BYTE)val; val >>= 8;
 8018080:	f362 0607 	bfi	r6, r2, #0, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8018084:	9a01      	ldr	r2, [sp, #4]
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8018086:	9808      	ldr	r0, [sp, #32]
	*ptr++ = (BYTE)val; val >>= 8;
 8018088:	769a      	strb	r2, [r3, #26]
	*ptr++ = (BYTE)val; val >>= 8;
 801808a:	9a03      	ldr	r2, [sp, #12]
 801808c:	f362 260f 	bfi	r6, r2, #8, #8
	*ptr++ = (BYTE)val;
 8018090:	9a04      	ldr	r2, [sp, #16]
 8018092:	76da      	strb	r2, [r3, #27]
	*ptr++ = (BYTE)val; val >>= 8;
 8018094:	9a05      	ldr	r2, [sp, #20]
 8018096:	f362 4617 	bfi	r6, r2, #16, #8
 801809a:	9a06      	ldr	r2, [sp, #24]
 801809c:	f362 661f 	bfi	r6, r2, #24, #8
 80180a0:	f8c3 6016 	str.w	r6, [r3, #22]
	if (fs->fs_type == FS_FAT32) {
 80180a4:	7802      	ldrb	r2, [r0, #0]
 80180a6:	2a03      	cmp	r2, #3
 80180a8:	d106      	bne.n	80180b8 <f_mkdir+0x27c>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80180aa:	ea4f 4818 	mov.w	r8, r8, lsr #16
	*ptr++ = (BYTE)val; val >>= 8;
 80180ae:	ea4f 2218 	mov.w	r2, r8, lsr #8
 80180b2:	f883 8014 	strb.w	r8, [r3, #20]
	*ptr++ = (BYTE)val;
 80180b6:	755a      	strb	r2, [r3, #21]
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 80180b8:	2110      	movs	r1, #16
					fs->wflag = 1;
 80180ba:	2201      	movs	r2, #1
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 80180bc:	72d9      	strb	r1, [r3, #11]
					fs->wflag = 1;
 80180be:	70c2      	strb	r2, [r0, #3]
					res = sync_fs(fs);
 80180c0:	f7fc ff90 	bl	8014fe4 <sync_fs>
 80180c4:	4606      	mov	r6, r0
 80180c6:	e6da      	b.n	8017e7e <f_mkdir+0x42>
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80180c8:	2607      	movs	r6, #7
			tm = GET_FATTIME();
 80180ca:	f7fc fb0b 	bl	80146e4 <get_fattime>
			if (res == FR_OK) {					/* Initialize the new directory table */
 80180ce:	e7c8      	b.n	8018062 <f_mkdir+0x226>
			if (dcl == 1) res = FR_INT_ERR;
 80180d0:	2602      	movs	r6, #2
 80180d2:	e7fa      	b.n	80180ca <f_mkdir+0x28e>
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80180d4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80180d6:	429a      	cmp	r2, r3
 80180d8:	f47f af7b 	bne.w	8017fd2 <f_mkdir+0x196>
 80180dc:	2200      	movs	r2, #0
 80180de:	4613      	mov	r3, r2
 80180e0:	e77a      	b.n	8017fd8 <f_mkdir+0x19c>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80180e2:	2300      	movs	r3, #0
 80180e4:	469b      	mov	fp, r3
 80180e6:	e700      	b.n	8017eea <f_mkdir+0xae>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80180e8:	2601      	movs	r6, #1
 80180ea:	e7ee      	b.n	80180ca <f_mkdir+0x28e>
		wsect = fs->winsect;	/* Current sector number */
 80180ec:	6b2f      	ldr	r7, [r5, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80180ee:	f105 0a34 	add.w	sl, r5, #52	; 0x34
 80180f2:	2301      	movs	r3, #1
 80180f4:	7868      	ldrb	r0, [r5, #1]
 80180f6:	463a      	mov	r2, r7
 80180f8:	4651      	mov	r1, sl
 80180fa:	f7fc fad7 	bl	80146ac <disk_write>
 80180fe:	b160      	cbz	r0, 801811a <f_mkdir+0x2de>
			res = FR_DISK_ERR;
 8018100:	2601      	movs	r6, #1
			tm = GET_FATTIME();
 8018102:	f7fc faef 	bl	80146e4 <get_fattime>
			if (res == FR_OK) {
 8018106:	e7ac      	b.n	8018062 <f_mkdir+0x226>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8018108:	4653      	mov	r3, sl
 801810a:	465f      	mov	r7, fp
			*d++ = *s++;
 801810c:	f813 2b01 	ldrb.w	r2, [r3], #1
		} while (--cnt);
 8018110:	4299      	cmp	r1, r3
			*d++ = *s++;
 8018112:	77da      	strb	r2, [r3, #31]
		} while (--cnt);
 8018114:	d1fa      	bne.n	801810c <f_mkdir+0x2d0>
 8018116:	46bb      	mov	fp, r7
 8018118:	e752      	b.n	8017fc0 <f_mkdir+0x184>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801811a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801811c:	69eb      	ldr	r3, [r5, #28]
 801811e:	1aba      	subs	r2, r7, r2
			fs->wflag = 0;
 8018120:	70ee      	strb	r6, [r5, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8018122:	429a      	cmp	r2, r3
 8018124:	f4bf aecd 	bcs.w	8017ec2 <f_mkdir+0x86>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8018128:	f895 9002 	ldrb.w	r9, [r5, #2]
 801812c:	f1b9 0f01 	cmp.w	r9, #1
 8018130:	d801      	bhi.n	8018136 <f_mkdir+0x2fa>
 8018132:	e6c6      	b.n	8017ec2 <f_mkdir+0x86>
 8018134:	69eb      	ldr	r3, [r5, #28]
					wsect += fs->fsize;
 8018136:	441f      	add	r7, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8018138:	f109 39ff 	add.w	r9, r9, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 801813c:	2301      	movs	r3, #1
 801813e:	4651      	mov	r1, sl
 8018140:	463a      	mov	r2, r7
 8018142:	7868      	ldrb	r0, [r5, #1]
 8018144:	f7fc fab2 	bl	80146ac <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8018148:	f1b9 0f01 	cmp.w	r9, #1
 801814c:	d1f2      	bne.n	8018134 <f_mkdir+0x2f8>
 801814e:	e6b8      	b.n	8017ec2 <f_mkdir+0x86>

08018150 <f_putc>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8018150:	b171      	cbz	r1, 8018170 <f_putc+0x20>
 8018152:	680b      	ldr	r3, [r1, #0]

int f_putc (
	TCHAR c,	/* A character to be output */
	FIL* fp		/* Pointer to the file object */
)
{
 8018154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018158:	460c      	mov	r4, r1
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801815a:	b12b      	cbz	r3, 8018168 <f_putc+0x18>
 801815c:	781a      	ldrb	r2, [r3, #0]
 801815e:	b11a      	cbz	r2, 8018168 <f_putc+0x18>
 8018160:	8889      	ldrh	r1, [r1, #4]
 8018162:	88da      	ldrh	r2, [r3, #6]
 8018164:	4291      	cmp	r1, r2
 8018166:	d006      	beq.n	8018176 <f_putc+0x26>
	return EOF;
 8018168:	f04f 30ff 	mov.w	r0, #4294967295


	putc_init(&pb, fp);
	putc_bfd(&pb, c);	/* Put the character */
	return putc_flush(&pb);
}
 801816c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return EOF;
 8018170:	f04f 30ff 	mov.w	r0, #4294967295
}
 8018174:	4770      	bx	lr
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8018176:	4605      	mov	r5, r0
 8018178:	7858      	ldrb	r0, [r3, #1]
 801817a:	f7fc fa6b 	bl	8014654 <disk_status>
 801817e:	07c2      	lsls	r2, r0, #31
 8018180:	d4f2      	bmi.n	8018168 <f_putc+0x18>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8018182:	7d63      	ldrb	r3, [r4, #21]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8018184:	6826      	ldr	r6, [r4, #0]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8018186:	2b00      	cmp	r3, #0
 8018188:	d1ee      	bne.n	8018168 <f_putc+0x18>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801818a:	7d20      	ldrb	r0, [r4, #20]
 801818c:	0783      	lsls	r3, r0, #30
 801818e:	d5eb      	bpl.n	8018168 <f_putc+0x18>
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8018190:	69a1      	ldr	r1, [r4, #24]
 8018192:	1c4f      	adds	r7, r1, #1
 8018194:	d044      	beq.n	8018220 <f_putc+0xd0>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8018196:	f3c1 0308 	ubfx	r3, r1, #0, #9
 801819a:	2b00      	cmp	r3, #0
 801819c:	d17b      	bne.n	8018296 <f_putc+0x146>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801819e:	f8b6 c00a 	ldrh.w	ip, [r6, #10]
 80181a2:	0a4b      	lsrs	r3, r1, #9
 80181a4:	f10c 37ff 	add.w	r7, ip, #4294967295
			if (csect == 0) {				/* On the cluster boundary? */
 80181a8:	ea17 2751 	ands.w	r7, r7, r1, lsr #9
 80181ac:	d10d      	bne.n	80181ca <f_putc+0x7a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80181ae:	2900      	cmp	r1, #0
 80181b0:	d140      	bne.n	8018234 <f_putc+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80181b2:	68a3      	ldr	r3, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 80181b4:	2b00      	cmp	r3, #0
 80181b6:	d067      	beq.n	8018288 <f_putc+0x138>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80181b8:	2b01      	cmp	r3, #1
 80181ba:	d035      	beq.n	8018228 <f_putc+0xd8>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80181bc:	1c5a      	adds	r2, r3, #1
 80181be:	d075      	beq.n	80182ac <f_putc+0x15c>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80181c0:	68a2      	ldr	r2, [r4, #8]
 80181c2:	7d20      	ldrb	r0, [r4, #20]
				fp->clust = clst;			/* Update current cluster */
 80181c4:	61e3      	str	r3, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80181c6:	b902      	cbnz	r2, 80181ca <f_putc+0x7a>
 80181c8:	60a3      	str	r3, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80181ca:	0603      	lsls	r3, r0, #24
 80181cc:	d44a      	bmi.n	8018264 <f_putc+0x114>
	clst -= 2;
 80181ce:	69e2      	ldr	r2, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80181d0:	69b3      	ldr	r3, [r6, #24]
	clst -= 2;
 80181d2:	3a02      	subs	r2, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80181d4:	3b02      	subs	r3, #2
 80181d6:	429a      	cmp	r2, r3
 80181d8:	d226      	bcs.n	8018228 <f_putc+0xd8>
	return clst * fs->csize + fs->database;
 80181da:	8973      	ldrh	r3, [r6, #10]
 80181dc:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 80181de:	fb02 1203 	mla	r2, r2, r3, r1
			if (!sect) ABORT(fs, FR_INT_ERR);
 80181e2:	b30a      	cbz	r2, 8018228 <f_putc+0xd8>
			sect += csect;
 80181e4:	4417      	add	r7, r2
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80181e6:	6a23      	ldr	r3, [r4, #32]
 80181e8:	429f      	cmp	r7, r3
 80181ea:	d048      	beq.n	801827e <f_putc+0x12e>
				fp->fptr < fp->obj.objsize &&
 80181ec:	69a3      	ldr	r3, [r4, #24]
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80181ee:	f104 0830 	add.w	r8, r4, #48	; 0x30
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80181f2:	68e2      	ldr	r2, [r4, #12]
 80181f4:	4293      	cmp	r3, r2
 80181f6:	d351      	bcc.n	801829c <f_putc+0x14c>
			fp->sect = sect;
 80181f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80181fc:	6227      	str	r7, [r4, #32]
			*d++ = *s++;
 80181fe:	f808 5003 	strb.w	r5, [r8, r3]
		&& (UINT)pb->idx == nw) return pb->nchr;
 8018202:	2001      	movs	r0, #1
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8018204:	69a3      	ldr	r3, [r4, #24]
 8018206:	68e1      	ldr	r1, [r4, #12]
 8018208:	4403      	add	r3, r0
		fp->flag |= FA_DIRTY;
 801820a:	7d22      	ldrb	r2, [r4, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801820c:	4299      	cmp	r1, r3
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801820e:	f062 023f 	orn	r2, r2, #63	; 0x3f
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8018212:	61a3      	str	r3, [r4, #24]
 8018214:	bf38      	it	cc
 8018216:	4619      	movcc	r1, r3
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8018218:	7522      	strb	r2, [r4, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801821a:	60e1      	str	r1, [r4, #12]
}
 801821c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8018220:	f040 0340 	orr.w	r3, r0, #64	; 0x40
 8018224:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 8018226:	e79f      	b.n	8018168 <f_putc+0x18>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8018228:	2302      	movs	r3, #2
	return EOF;
 801822a:	f04f 30ff 	mov.w	r0, #4294967295
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801822e:	7563      	strb	r3, [r4, #21]
}
 8018230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if (fp->cltbl) {
 8018234:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8018236:	b331      	cbz	r1, 8018286 <f_putc+0x136>
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8018238:	684a      	ldr	r2, [r1, #4]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801823a:	3104      	adds	r1, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801823c:	fbb3 f3fc 	udiv	r3, r3, ip
		if (ncl == 0) return 0;	/* End of table? (error) */
 8018240:	b92a      	cbnz	r2, 801824e <f_putc+0xfe>
 8018242:	e7ed      	b.n	8018220 <f_putc+0xd0>
		cl -= ncl; tbl++;		/* Next fragment */
 8018244:	1a9b      	subs	r3, r3, r2
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8018246:	f851 2f08 	ldr.w	r2, [r1, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 801824a:	2a00      	cmp	r2, #0
 801824c:	d0e8      	beq.n	8018220 <f_putc+0xd0>
		if (cl < ncl) break;	/* In this fragment? */
 801824e:	429a      	cmp	r2, r3
 8018250:	d9f8      	bls.n	8018244 <f_putc+0xf4>
	return cl + *tbl;	/* Return the cluster number */
 8018252:	6848      	ldr	r0, [r1, #4]
 8018254:	4403      	add	r3, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8018256:	2b00      	cmp	r3, #0
 8018258:	d1ae      	bne.n	80181b8 <f_putc+0x68>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801825a:	7d23      	ldrb	r3, [r4, #20]
 801825c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018260:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 8018262:	e781      	b.n	8018168 <f_putc+0x18>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8018264:	2301      	movs	r3, #1
 8018266:	6a22      	ldr	r2, [r4, #32]
 8018268:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801826c:	7870      	ldrb	r0, [r6, #1]
 801826e:	f7fc fa1d 	bl	80146ac <disk_write>
 8018272:	b9d8      	cbnz	r0, 80182ac <f_putc+0x15c>
				fp->flag &= (BYTE)~FA_DIRTY;
 8018274:	7d23      	ldrb	r3, [r4, #20]
 8018276:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801827a:	7523      	strb	r3, [r4, #20]
 801827c:	e7a7      	b.n	80181ce <f_putc+0x7e>
 801827e:	f104 0830 	add.w	r8, r4, #48	; 0x30
 8018282:	69a3      	ldr	r3, [r4, #24]
 8018284:	e7b8      	b.n	80181f8 <f_putc+0xa8>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8018286:	69e1      	ldr	r1, [r4, #28]
 8018288:	4620      	mov	r0, r4
 801828a:	f7fc ff1d 	bl	80150c8 <create_chain>
 801828e:	4603      	mov	r3, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8018290:	2b00      	cmp	r3, #0
 8018292:	d191      	bne.n	80181b8 <f_putc+0x68>
 8018294:	e7e1      	b.n	801825a <f_putc+0x10a>
 8018296:	f104 0830 	add.w	r8, r4, #48	; 0x30
 801829a:	e7b0      	b.n	80181fe <f_putc+0xae>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801829c:	7870      	ldrb	r0, [r6, #1]
 801829e:	2301      	movs	r3, #1
 80182a0:	463a      	mov	r2, r7
 80182a2:	4641      	mov	r1, r8
 80182a4:	f7fc f9f4 	bl	8014690 <disk_read>
				fp->fptr < fp->obj.objsize &&
 80182a8:	2800      	cmp	r0, #0
 80182aa:	d0ea      	beq.n	8018282 <f_putc+0x132>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80182ac:	2301      	movs	r3, #1
	return EOF;
 80182ae:	f04f 30ff 	mov.w	r0, #4294967295
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80182b2:	7563      	strb	r3, [r4, #21]
 80182b4:	e75a      	b.n	801816c <f_putc+0x1c>
 80182b6:	bf00      	nop

080182b8 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 80182b8:	b40e      	push	{r1, r2, r3}
 80182ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182be:	b0a0      	sub	sp, #128	; 0x80
	pb->nchr = pb->idx = 0;
 80182c0:	2300      	movs	r3, #0
{
 80182c2:	a929      	add	r1, sp, #164	; 0xa4
	pb->fp = fp;
 80182c4:	900d      	str	r0, [sp, #52]	; 0x34
	pb->nchr = pb->idx = 0;
 80182c6:	930e      	str	r3, [sp, #56]	; 0x38
{
 80182c8:	f851 bb04 	ldr.w	fp, [r1], #4
	pb->nchr = pb->idx = 0;
 80182cc:	930f      	str	r3, [sp, #60]	; 0x3c
	putc_init(&pb, fp);

	va_start(arp, fmt);

	for (;;) {
		c = *fmt++;
 80182ce:	465c      	mov	r4, fp
	va_start(arp, fmt);
 80182d0:	9103      	str	r1, [sp, #12]
		c = *fmt++;
 80182d2:	f814 1b01 	ldrb.w	r1, [r4], #1
		if (c == 0) break;			/* End of string */
 80182d6:	b9b1      	cbnz	r1, 8018306 <f_printf+0x4e>
 80182d8:	e24b      	b.n	8018772 <f_printf+0x4ba>
	if (i < 0) return;
 80182da:	2b00      	cmp	r3, #0
 80182dc:	f2c0 81bc 	blt.w	8018658 <f_printf+0x3a0>
	pb->buf[i++] = (BYTE)c;
 80182e0:	aa20      	add	r2, sp, #128	; 0x80
 80182e2:	1c5d      	adds	r5, r3, #1
 80182e4:	441a      	add	r2, r3
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80182e6:	2d3c      	cmp	r5, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 80182e8:	f802 1c40 	strb.w	r1, [r2, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80182ec:	f300 81b6 	bgt.w	801865c <f_printf+0x3a4>
	pb->nchr++;
 80182f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80182f2:	462b      	mov	r3, r5
 80182f4:	46a3      	mov	fp, r4
	pb->idx = i;
 80182f6:	950e      	str	r5, [sp, #56]	; 0x38
	pb->nchr++;
 80182f8:	3201      	adds	r2, #1
 80182fa:	920f      	str	r2, [sp, #60]	; 0x3c
		c = *fmt++;
 80182fc:	465c      	mov	r4, fp
 80182fe:	f814 1b01 	ldrb.w	r1, [r4], #1
		if (c == 0) break;			/* End of string */
 8018302:	2900      	cmp	r1, #0
 8018304:	d062      	beq.n	80183cc <f_printf+0x114>
		if (c != '%') {				/* Non escape character */
 8018306:	2925      	cmp	r1, #37	; 0x25
 8018308:	d1e7      	bne.n	80182da <f_printf+0x22>
			putc_bfd(&pb, c);
			continue;
		}
		w = f = 0;
		c = *fmt++;
 801830a:	f89b 5001 	ldrb.w	r5, [fp, #1]
		if (c == '0') {				/* Flag: '0' padding */
 801830e:	2d30      	cmp	r5, #48	; 0x30
 8018310:	f000 8198 	beq.w	8018644 <f_printf+0x38c>
			f = 1; c = *fmt++;
		} else {
			if (c == '-') {			/* Flag: left justified */
 8018314:	2d2d      	cmp	r5, #45	; 0x2d
 8018316:	f000 81ad 	beq.w	8018674 <f_printf+0x3bc>
		c = *fmt++;
 801831a:	2200      	movs	r2, #0
 801831c:	f10b 0b02 	add.w	fp, fp, #2
 8018320:	2104      	movs	r1, #4
		w = f = 0;
 8018322:	4692      	mov	sl, r2
		c = *fmt++;
 8018324:	9200      	str	r2, [sp, #0]
				f = 2; c = *fmt++;
			}
		}
		while (IsDigit(c)) {		/* Precision */
 8018326:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
 801832a:	2400      	movs	r4, #0
 801832c:	2a09      	cmp	r2, #9
 801832e:	d80a      	bhi.n	8018346 <f_printf+0x8e>
			w = w * 10 + c - '0';
 8018330:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8018334:	eb05 0444 	add.w	r4, r5, r4, lsl #1
			c = *fmt++;
 8018338:	f81b 5b01 	ldrb.w	r5, [fp], #1
		while (IsDigit(c)) {		/* Precision */
 801833c:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
			w = w * 10 + c - '0';
 8018340:	3c30      	subs	r4, #48	; 0x30
		while (IsDigit(c)) {		/* Precision */
 8018342:	2a09      	cmp	r2, #9
 8018344:	d9f4      	bls.n	8018330 <f_printf+0x78>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8018346:	f005 02df 	and.w	r2, r5, #223	; 0xdf
 801834a:	2a4c      	cmp	r2, #76	; 0x4c
 801834c:	f040 8176 	bne.w	801863c <f_printf+0x384>
			f |= 4; c = *fmt++;
 8018350:	468a      	mov	sl, r1
 8018352:	2604      	movs	r6, #4
 8018354:	f81b 5b01 	ldrb.w	r5, [fp], #1
		}
		if (!c) break;
 8018358:	2d00      	cmp	r5, #0
 801835a:	d037      	beq.n	80183cc <f_printf+0x114>
		d = c;
		if (IsLower(d)) d -= 0x20;
 801835c:	f1a5 0261 	sub.w	r2, r5, #97	; 0x61
 8018360:	2a19      	cmp	r2, #25
 8018362:	f200 816d 	bhi.w	8018640 <f_printf+0x388>
 8018366:	f1a5 0220 	sub.w	r2, r5, #32
 801836a:	b2d2      	uxtb	r2, r2
		switch (d) {				/* Type is... */
 801836c:	f1a2 0142 	sub.w	r1, r2, #66	; 0x42
 8018370:	2916      	cmp	r1, #22
 8018372:	d818      	bhi.n	80183a6 <f_printf+0xee>
 8018374:	e8df f011 	tbh	[pc, r1, lsl #1]
 8018378:	0054018f 	.word	0x0054018f
 801837c:	00170041 	.word	0x00170041
 8018380:	00170017 	.word	0x00170017
 8018384:	00170017 	.word	0x00170017
 8018388:	00170017 	.word	0x00170017
 801838c:	00170017 	.word	0x00170017
 8018390:	00a60017 	.word	0x00a60017
 8018394:	00170017 	.word	0x00170017
 8018398:	006f0017 	.word	0x006f0017
 801839c:	00410017 	.word	0x00410017
 80183a0:	00170017 	.word	0x00170017
 80183a4:	0191      	.short	0x0191
	if (i < 0) return;
 80183a6:	2b00      	cmp	r3, #0
 80183a8:	dba8      	blt.n	80182fc <f_printf+0x44>
	pb->buf[i++] = (BYTE)c;
 80183aa:	aa20      	add	r2, sp, #128	; 0x80
 80183ac:	1c5c      	adds	r4, r3, #1
 80183ae:	441a      	add	r2, r3
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80183b0:	2c3c      	cmp	r4, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 80183b2:	f802 5c40 	strb.w	r5, [r2, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80183b6:	dc42      	bgt.n	801843e <f_printf+0x186>
	pb->nchr++;
 80183b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80183ba:	4623      	mov	r3, r4
	pb->idx = i;
 80183bc:	940e      	str	r4, [sp, #56]	; 0x38
		c = *fmt++;
 80183be:	465c      	mov	r4, fp
	pb->nchr++;
 80183c0:	3201      	adds	r2, #1
		c = *fmt++;
 80183c2:	f814 1b01 	ldrb.w	r1, [r4], #1
	pb->nchr++;
 80183c6:	920f      	str	r2, [sp, #60]	; 0x3c
		if (c == 0) break;			/* End of string */
 80183c8:	2900      	cmp	r1, #0
 80183ca:	d19c      	bne.n	8018306 <f_printf+0x4e>
	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 80183cc:	2b00      	cmp	r3, #0
 80183ce:	f2c0 81c9 	blt.w	8018764 <f_printf+0x4ac>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 80183d2:	461a      	mov	r2, r3
 80183d4:	a910      	add	r1, sp, #64	; 0x40
 80183d6:	ab04      	add	r3, sp, #16
 80183d8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80183da:	f7ff f803 	bl	80173e4 <f_write>
 80183de:	2800      	cmp	r0, #0
 80183e0:	f040 81c0 	bne.w	8018764 <f_printf+0x4ac>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80183e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80183e6:	9b04      	ldr	r3, [sp, #16]
 80183e8:	429a      	cmp	r2, r3
 80183ea:	f040 81bb 	bne.w	8018764 <f_printf+0x4ac>
 80183ee:	980f      	ldr	r0, [sp, #60]	; 0x3c
	}

	va_end(arp);

	return putc_flush(&pb);
}
 80183f0:	b020      	add	sp, #128	; 0x80
 80183f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183f6:	b003      	add	sp, #12
 80183f8:	4770      	bx	lr
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 80183fa:	2e00      	cmp	r6, #0
 80183fc:	f040 814f 	bne.w	801869e <f_printf+0x3e6>
 8018400:	2a44      	cmp	r2, #68	; 0x44
 8018402:	f040 8140 	bne.w	8018686 <f_printf+0x3ce>
 8018406:	9903      	ldr	r1, [sp, #12]
		if (d == 'D' && (v & 0x80000000)) {
 8018408:	2a44      	cmp	r2, #68	; 0x44
 801840a:	f04f 000a 	mov.w	r0, #10
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 801840e:	f101 0704 	add.w	r7, r1, #4
 8018412:	680e      	ldr	r6, [r1, #0]
 8018414:	9703      	str	r7, [sp, #12]
 8018416:	4631      	mov	r1, r6
		if (d == 'D' && (v & 0x80000000)) {
 8018418:	d060      	beq.n	80184dc <f_printf+0x224>
 801841a:	2200      	movs	r2, #0
 801841c:	9201      	str	r2, [sp, #4]
 801841e:	e069      	b.n	80184f4 <f_printf+0x23c>
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8018420:	9a03      	ldr	r2, [sp, #12]
	if (i < 0) return;
 8018422:	2b00      	cmp	r3, #0
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8018424:	f102 0104 	add.w	r1, r2, #4
 8018428:	9103      	str	r1, [sp, #12]
	if (i < 0) return;
 801842a:	f6ff af67 	blt.w	80182fc <f_printf+0x44>
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 801842e:	6811      	ldr	r1, [r2, #0]
	pb->buf[i++] = (BYTE)c;
 8018430:	1c5c      	adds	r4, r3, #1
 8018432:	aa20      	add	r2, sp, #128	; 0x80
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8018434:	2c3c      	cmp	r4, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 8018436:	441a      	add	r2, r3
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8018438:	f802 1c40 	strb.w	r1, [r2, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801843c:	ddbc      	ble.n	80183b8 <f_printf+0x100>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 801843e:	ab04      	add	r3, sp, #16
 8018440:	4622      	mov	r2, r4
 8018442:	a910      	add	r1, sp, #64	; 0x40
 8018444:	980d      	ldr	r0, [sp, #52]	; 0x34
 8018446:	f7fe ffcd 	bl	80173e4 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 801844a:	9b04      	ldr	r3, [sp, #16]
 801844c:	1b1c      	subs	r4, r3, r4
 801844e:	bf18      	it	ne
 8018450:	f04f 34ff 	movne.w	r4, #4294967295
 8018454:	e7b0      	b.n	80183b8 <f_printf+0x100>
			p = va_arg(arp, TCHAR*);
 8018456:	9a03      	ldr	r2, [sp, #12]
 8018458:	6815      	ldr	r5, [r2, #0]
 801845a:	3204      	adds	r2, #4
			for (j = 0; p[j]; j++) ;
 801845c:	7829      	ldrb	r1, [r5, #0]
			p = va_arg(arp, TCHAR*);
 801845e:	9203      	str	r2, [sp, #12]
			for (j = 0; p[j]; j++) ;
 8018460:	2900      	cmp	r1, #0
 8018462:	f000 811e 	beq.w	80186a2 <f_printf+0x3ea>
 8018466:	462a      	mov	r2, r5
 8018468:	f1c5 0601 	rsb	r6, r5, #1
 801846c:	18b7      	adds	r7, r6, r2
 801846e:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8018472:	2800      	cmp	r0, #0
 8018474:	d1fa      	bne.n	801846c <f_printf+0x1b4>
			if (!(f & 2)) {
 8018476:	9a00      	ldr	r2, [sp, #0]
 8018478:	2a00      	cmp	r2, #0
 801847a:	f000 813c 	beq.w	80186f6 <f_printf+0x43e>
			while (*p) putc_bfd(&pb, *p++);
 801847e:	1c7e      	adds	r6, r7, #1
 8018480:	46a8      	mov	r8, r5
 8018482:	e009      	b.n	8018498 <f_printf+0x1e0>
	pb->nchr++;
 8018484:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018486:	462b      	mov	r3, r5
	pb->idx = i;
 8018488:	950e      	str	r5, [sp, #56]	; 0x38
	pb->nchr++;
 801848a:	3201      	adds	r2, #1
 801848c:	920f      	str	r2, [sp, #60]	; 0x3c
			while (*p) putc_bfd(&pb, *p++);
 801848e:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 8018492:	2900      	cmp	r1, #0
 8018494:	f000 810a 	beq.w	80186ac <f_printf+0x3f4>
	pb->buf[i++] = (BYTE)c;
 8018498:	aa20      	add	r2, sp, #128	; 0x80
	if (i < 0) return;
 801849a:	2b00      	cmp	r3, #0
	pb->buf[i++] = (BYTE)c;
 801849c:	f103 0501 	add.w	r5, r3, #1
 80184a0:	441a      	add	r2, r3
	if (i < 0) return;
 80184a2:	dbf4      	blt.n	801848e <f_printf+0x1d6>
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80184a4:	2d3c      	cmp	r5, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 80184a6:	f802 1c40 	strb.w	r1, [r2, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80184aa:	ddeb      	ble.n	8018484 <f_printf+0x1cc>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80184ac:	ab04      	add	r3, sp, #16
 80184ae:	462a      	mov	r2, r5
 80184b0:	a910      	add	r1, sp, #64	; 0x40
 80184b2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80184b4:	f7fe ff96 	bl	80173e4 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80184b8:	9b04      	ldr	r3, [sp, #16]
 80184ba:	1b5d      	subs	r5, r3, r5
 80184bc:	bf18      	it	ne
 80184be:	f04f 35ff 	movne.w	r5, #4294967295
 80184c2:	e7df      	b.n	8018484 <f_printf+0x1cc>
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 80184c4:	2008      	movs	r0, #8
 80184c6:	2e00      	cmp	r6, #0
 80184c8:	f000 80de 	beq.w	8018688 <f_printf+0x3d0>
 80184cc:	9903      	ldr	r1, [sp, #12]
		if (d == 'D' && (v & 0x80000000)) {
 80184ce:	2a44      	cmp	r2, #68	; 0x44
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 80184d0:	f101 0704 	add.w	r7, r1, #4
 80184d4:	680e      	ldr	r6, [r1, #0]
 80184d6:	9703      	str	r7, [sp, #12]
 80184d8:	4631      	mov	r1, r6
		if (d == 'D' && (v & 0x80000000)) {
 80184da:	d19e      	bne.n	801841a <f_printf+0x162>
 80184dc:	2e00      	cmp	r6, #0
 80184de:	da9c      	bge.n	801841a <f_printf+0x162>
			f |= 8;
 80184e0:	f04a 0208 	orr.w	r2, sl, #8
			v = 0 - v;
 80184e4:	4271      	negs	r1, r6
			f |= 8;
 80184e6:	f00a 0602 	and.w	r6, sl, #2
 80184ea:	fa5f fa82 	uxtb.w	sl, r2
 80184ee:	9600      	str	r6, [sp, #0]
 80184f0:	2608      	movs	r6, #8
 80184f2:	9601      	str	r6, [sp, #4]
		i = 0;
 80184f4:	2d78      	cmp	r5, #120	; 0x78
 80184f6:	ae05      	add	r6, sp, #20
 80184f8:	f04f 0e00 	mov.w	lr, #0
 80184fc:	bf0c      	ite	eq
 80184fe:	f04f 0927 	moveq.w	r9, #39	; 0x27
 8018502:	f04f 0907 	movne.w	r9, #7
 8018506:	46b4      	mov	ip, r6
 8018508:	e000      	b.n	801850c <f_printf+0x254>
		} while (v && i < sizeof str / sizeof str[0]);
 801850a:	46ae      	mov	lr, r5
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 801850c:	460f      	mov	r7, r1
			str[i++] = d + '0';
 801850e:	f10e 0501 	add.w	r5, lr, #1
			d = (TCHAR)(v % r); v /= r;
 8018512:	fbb1 f2f0 	udiv	r2, r1, r0
 8018516:	fb00 1812 	mls	r8, r0, r2, r1
 801851a:	4611      	mov	r1, r2
 801851c:	fa5f f288 	uxtb.w	r2, r8
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8018520:	f1b8 0f09 	cmp.w	r8, #9
 8018524:	eb09 0802 	add.w	r8, r9, r2
 8018528:	bf88      	it	hi
 801852a:	fa5f f288 	uxtbhi.w	r2, r8
		} while (v && i < sizeof str / sizeof str[0]);
 801852e:	2d1f      	cmp	r5, #31
			str[i++] = d + '0';
 8018530:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8018534:	f80c 2b01 	strb.w	r2, [ip], #1
		} while (v && i < sizeof str / sizeof str[0]);
 8018538:	d801      	bhi.n	801853e <f_printf+0x286>
 801853a:	4287      	cmp	r7, r0
 801853c:	d2e5      	bcs.n	801850a <f_printf+0x252>
		if (f & 8) str[i++] = '-';
 801853e:	9a01      	ldr	r2, [sp, #4]
 8018540:	b132      	cbz	r2, 8018550 <f_printf+0x298>
 8018542:	aa20      	add	r2, sp, #128	; 0x80
 8018544:	212d      	movs	r1, #45	; 0x2d
 8018546:	442a      	add	r2, r5
 8018548:	f10e 0502 	add.w	r5, lr, #2
 801854c:	f802 1c6c 	strb.w	r1, [r2, #-108]
		j = i; d = (f & 1) ? '0' : ' ';
 8018550:	f01a 0f01 	tst.w	sl, #1
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8018554:	9a00      	ldr	r2, [sp, #0]
		j = i; d = (f & 1) ? '0' : ' ';
 8018556:	bf0c      	ite	eq
 8018558:	f04f 0820 	moveq.w	r8, #32
 801855c:	f04f 0830 	movne.w	r8, #48	; 0x30
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8018560:	bb22      	cbnz	r2, 80185ac <f_printf+0x2f4>
 8018562:	42a5      	cmp	r5, r4
 8018564:	f105 0901 	add.w	r9, r5, #1
 8018568:	d30a      	bcc.n	8018580 <f_printf+0x2c8>
 801856a:	e020      	b.n	80185ae <f_printf+0x2f6>
	pb->nchr++;
 801856c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801856e:	463b      	mov	r3, r7
	pb->idx = i;
 8018570:	970e      	str	r7, [sp, #56]	; 0x38
	pb->nchr++;
 8018572:	3201      	adds	r2, #1
 8018574:	920f      	str	r2, [sp, #60]	; 0x3c
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8018576:	f109 0201 	add.w	r2, r9, #1
 801857a:	454c      	cmp	r4, r9
 801857c:	4691      	mov	r9, r2
 801857e:	d016      	beq.n	80185ae <f_printf+0x2f6>
	pb->buf[i++] = (BYTE)c;
 8018580:	aa20      	add	r2, sp, #128	; 0x80
	if (i < 0) return;
 8018582:	2b00      	cmp	r3, #0
	pb->buf[i++] = (BYTE)c;
 8018584:	f103 0701 	add.w	r7, r3, #1
 8018588:	441a      	add	r2, r3
	if (i < 0) return;
 801858a:	dbf4      	blt.n	8018576 <f_printf+0x2be>
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801858c:	2f3c      	cmp	r7, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 801858e:	f802 8c40 	strb.w	r8, [r2, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8018592:	ddeb      	ble.n	801856c <f_printf+0x2b4>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8018594:	ab04      	add	r3, sp, #16
 8018596:	463a      	mov	r2, r7
 8018598:	a910      	add	r1, sp, #64	; 0x40
 801859a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801859c:	f7fe ff22 	bl	80173e4 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80185a0:	9b04      	ldr	r3, [sp, #16]
 80185a2:	1bdf      	subs	r7, r3, r7
 80185a4:	bf18      	it	ne
 80185a6:	f04f 37ff 	movne.w	r7, #4294967295
 80185aa:	e7df      	b.n	801856c <f_printf+0x2b4>
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 80185ac:	46a9      	mov	r9, r5
 80185ae:	4435      	add	r5, r6
 80185b0:	e007      	b.n	80185c2 <f_printf+0x30a>
	pb->nchr++;
 80185b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80185b4:	463b      	mov	r3, r7
	pb->idx = i;
 80185b6:	970e      	str	r7, [sp, #56]	; 0x38
	pb->nchr++;
 80185b8:	3201      	adds	r2, #1
 80185ba:	920f      	str	r2, [sp, #60]	; 0x3c
		} while (i);
 80185bc:	3d01      	subs	r5, #1
 80185be:	42b5      	cmp	r5, r6
 80185c0:	d017      	beq.n	80185f2 <f_printf+0x33a>
	pb->buf[i++] = (BYTE)c;
 80185c2:	aa20      	add	r2, sp, #128	; 0x80
	if (i < 0) return;
 80185c4:	2b00      	cmp	r3, #0
	pb->buf[i++] = (BYTE)c;
 80185c6:	f103 0701 	add.w	r7, r3, #1
 80185ca:	441a      	add	r2, r3
	if (i < 0) return;
 80185cc:	dbf6      	blt.n	80185bc <f_printf+0x304>
	pb->buf[i++] = (BYTE)c;
 80185ce:	f815 3c01 	ldrb.w	r3, [r5, #-1]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80185d2:	2f3c      	cmp	r7, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 80185d4:	f802 3c40 	strb.w	r3, [r2, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80185d8:	ddeb      	ble.n	80185b2 <f_printf+0x2fa>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80185da:	ab04      	add	r3, sp, #16
 80185dc:	463a      	mov	r2, r7
 80185de:	a910      	add	r1, sp, #64	; 0x40
 80185e0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80185e2:	f7fe feff 	bl	80173e4 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80185e6:	9b04      	ldr	r3, [sp, #16]
 80185e8:	1bdf      	subs	r7, r3, r7
 80185ea:	bf18      	it	ne
 80185ec:	f04f 37ff 	movne.w	r7, #4294967295
 80185f0:	e7df      	b.n	80185b2 <f_printf+0x2fa>
		while (j++ < w) putc_bfd(&pb, d);
 80185f2:	454c      	cmp	r4, r9
 80185f4:	f109 0501 	add.w	r5, r9, #1
 80185f8:	d80a      	bhi.n	8018610 <f_printf+0x358>
 80185fa:	e67f      	b.n	80182fc <f_printf+0x44>
	pb->nchr++;
 80185fc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80185fe:	4613      	mov	r3, r2
	pb->idx = i;
 8018600:	920e      	str	r2, [sp, #56]	; 0x38
	pb->nchr++;
 8018602:	3101      	adds	r1, #1
 8018604:	910f      	str	r1, [sp, #60]	; 0x3c
		while (j++ < w) putc_bfd(&pb, d);
 8018606:	1c6a      	adds	r2, r5, #1
 8018608:	42ac      	cmp	r4, r5
 801860a:	4615      	mov	r5, r2
 801860c:	f43f ae76 	beq.w	80182fc <f_printf+0x44>
	pb->buf[i++] = (BYTE)c;
 8018610:	aa20      	add	r2, sp, #128	; 0x80
	if (i < 0) return;
 8018612:	2b00      	cmp	r3, #0
	pb->buf[i++] = (BYTE)c;
 8018614:	eb02 0103 	add.w	r1, r2, r3
 8018618:	f103 0201 	add.w	r2, r3, #1
	if (i < 0) return;
 801861c:	dbf3      	blt.n	8018606 <f_printf+0x34e>
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801861e:	2b3c      	cmp	r3, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 8018620:	f801 8c40 	strb.w	r8, [r1, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8018624:	d1ea      	bne.n	80185fc <f_printf+0x344>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8018626:	ab04      	add	r3, sp, #16
 8018628:	a910      	add	r1, sp, #64	; 0x40
 801862a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801862c:	f7fe feda 	bl	80173e4 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8018630:	9a04      	ldr	r2, [sp, #16]
 8018632:	3a3d      	subs	r2, #61	; 0x3d
 8018634:	bf18      	it	ne
 8018636:	f04f 32ff 	movne.w	r2, #4294967295
 801863a:	e7df      	b.n	80185fc <f_printf+0x344>
 801863c:	2600      	movs	r6, #0
 801863e:	e68b      	b.n	8018358 <f_printf+0xa0>
 8018640:	462a      	mov	r2, r5
 8018642:	e693      	b.n	801836c <f_printf+0xb4>
			f = 1; c = *fmt++;
 8018644:	2200      	movs	r2, #0
 8018646:	f89b 5002 	ldrb.w	r5, [fp, #2]
 801864a:	2105      	movs	r1, #5
 801864c:	f10b 0b03 	add.w	fp, fp, #3
 8018650:	f04f 0a01 	mov.w	sl, #1
 8018654:	9200      	str	r2, [sp, #0]
 8018656:	e666      	b.n	8018326 <f_printf+0x6e>
	if (i < 0) return;
 8018658:	46a3      	mov	fp, r4
 801865a:	e64f      	b.n	80182fc <f_printf+0x44>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 801865c:	ab04      	add	r3, sp, #16
 801865e:	462a      	mov	r2, r5
 8018660:	a910      	add	r1, sp, #64	; 0x40
 8018662:	980d      	ldr	r0, [sp, #52]	; 0x34
 8018664:	f7fe febe 	bl	80173e4 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8018668:	9b04      	ldr	r3, [sp, #16]
 801866a:	1b5d      	subs	r5, r3, r5
 801866c:	bf18      	it	ne
 801866e:	f04f 35ff 	movne.w	r5, #4294967295
 8018672:	e63d      	b.n	80182f0 <f_printf+0x38>
				f = 2; c = *fmt++;
 8018674:	2202      	movs	r2, #2
 8018676:	f89b 5002 	ldrb.w	r5, [fp, #2]
 801867a:	2106      	movs	r1, #6
 801867c:	f10b 0b03 	add.w	fp, fp, #3
 8018680:	4692      	mov	sl, r2
 8018682:	9200      	str	r2, [sp, #0]
 8018684:	e64f      	b.n	8018326 <f_printf+0x6e>
 8018686:	200a      	movs	r0, #10
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8018688:	9a03      	ldr	r2, [sp, #12]
 801868a:	2100      	movs	r1, #0
 801868c:	1d16      	adds	r6, r2, #4
 801868e:	9101      	str	r1, [sp, #4]
 8018690:	6811      	ldr	r1, [r2, #0]
 8018692:	9603      	str	r6, [sp, #12]
 8018694:	e72e      	b.n	80184f4 <f_printf+0x23c>
	return EOF;
 8018696:	2002      	movs	r0, #2
 8018698:	e715      	b.n	80184c6 <f_printf+0x20e>
 801869a:	2010      	movs	r0, #16
 801869c:	e713      	b.n	80184c6 <f_printf+0x20e>
 801869e:	200a      	movs	r0, #10
 80186a0:	e714      	b.n	80184cc <f_printf+0x214>
			if (!(f & 2)) {
 80186a2:	9a00      	ldr	r2, [sp, #0]
 80186a4:	2a00      	cmp	r2, #0
 80186a6:	d068      	beq.n	801877a <f_printf+0x4c2>
			for (j = 0; p[j]; j++) ;
 80186a8:	460f      	mov	r7, r1
			if (!(f & 2)) {
 80186aa:	2601      	movs	r6, #1
			while (j++ < w) putc_bfd(&pb, ' ');
 80186ac:	42a7      	cmp	r7, r4
 80186ae:	f4bf ae25 	bcs.w	80182fc <f_printf+0x44>
	pb->buf[i++] = (BYTE)c;
 80186b2:	2720      	movs	r7, #32
 80186b4:	e009      	b.n	80186ca <f_printf+0x412>
	pb->nchr++;
 80186b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80186b8:	462b      	mov	r3, r5
	pb->idx = i;
 80186ba:	950e      	str	r5, [sp, #56]	; 0x38
	pb->nchr++;
 80186bc:	3201      	adds	r2, #1
 80186be:	920f      	str	r2, [sp, #60]	; 0x3c
			while (j++ < w) putc_bfd(&pb, ' ');
 80186c0:	1c72      	adds	r2, r6, #1
 80186c2:	42b4      	cmp	r4, r6
 80186c4:	4616      	mov	r6, r2
 80186c6:	f67f ae19 	bls.w	80182fc <f_printf+0x44>
	pb->buf[i++] = (BYTE)c;
 80186ca:	aa20      	add	r2, sp, #128	; 0x80
	if (i < 0) return;
 80186cc:	2b00      	cmp	r3, #0
	pb->buf[i++] = (BYTE)c;
 80186ce:	f103 0501 	add.w	r5, r3, #1
 80186d2:	441a      	add	r2, r3
	if (i < 0) return;
 80186d4:	dbf4      	blt.n	80186c0 <f_printf+0x408>
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80186d6:	2d3c      	cmp	r5, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 80186d8:	f802 7c40 	strb.w	r7, [r2, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80186dc:	ddeb      	ble.n	80186b6 <f_printf+0x3fe>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80186de:	ab04      	add	r3, sp, #16
 80186e0:	462a      	mov	r2, r5
 80186e2:	a910      	add	r1, sp, #64	; 0x40
 80186e4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80186e6:	f7fe fe7d 	bl	80173e4 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80186ea:	9b04      	ldr	r3, [sp, #16]
 80186ec:	1b5d      	subs	r5, r3, r5
 80186ee:	bf18      	it	ne
 80186f0:	f04f 35ff 	movne.w	r5, #4294967295
 80186f4:	e7df      	b.n	80186b6 <f_printf+0x3fe>
				while (j++ < w) putc_bfd(&pb, ' ');
 80186f6:	42bc      	cmp	r4, r7
 80186f8:	f107 0801 	add.w	r8, r7, #1
 80186fc:	f107 0602 	add.w	r6, r7, #2
 8018700:	d939      	bls.n	8018776 <f_printf+0x4be>
 8018702:	4647      	mov	r7, r8
	pb->buf[i++] = (BYTE)c;
 8018704:	f04f 0920 	mov.w	r9, #32
 8018708:	e008      	b.n	801871c <f_printf+0x464>
	pb->nchr++;
 801870a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801870c:	4633      	mov	r3, r6
	pb->idx = i;
 801870e:	960e      	str	r6, [sp, #56]	; 0x38
	pb->nchr++;
 8018710:	3201      	adds	r2, #1
 8018712:	920f      	str	r2, [sp, #60]	; 0x3c
				while (j++ < w) putc_bfd(&pb, ' ');
 8018714:	1c7a      	adds	r2, r7, #1
 8018716:	42bc      	cmp	r4, r7
 8018718:	4617      	mov	r7, r2
 801871a:	d915      	bls.n	8018748 <f_printf+0x490>
	pb->buf[i++] = (BYTE)c;
 801871c:	aa20      	add	r2, sp, #128	; 0x80
	if (i < 0) return;
 801871e:	2b00      	cmp	r3, #0
	pb->buf[i++] = (BYTE)c;
 8018720:	f103 0601 	add.w	r6, r3, #1
 8018724:	441a      	add	r2, r3
	if (i < 0) return;
 8018726:	dbf5      	blt.n	8018714 <f_printf+0x45c>
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8018728:	2e3c      	cmp	r6, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 801872a:	f802 9c40 	strb.w	r9, [r2, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801872e:	ddec      	ble.n	801870a <f_printf+0x452>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8018730:	ab04      	add	r3, sp, #16
 8018732:	4632      	mov	r2, r6
 8018734:	a910      	add	r1, sp, #64	; 0x40
 8018736:	980d      	ldr	r0, [sp, #52]	; 0x34
 8018738:	f7fe fe54 	bl	80173e4 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 801873c:	9b04      	ldr	r3, [sp, #16]
 801873e:	1b9e      	subs	r6, r3, r6
 8018740:	bf18      	it	ne
 8018742:	f04f 36ff 	movne.w	r6, #4294967295
 8018746:	e7e0      	b.n	801870a <f_printf+0x452>
 8018748:	eba4 0708 	sub.w	r7, r4, r8
 801874c:	f108 0201 	add.w	r2, r8, #1
 8018750:	7829      	ldrb	r1, [r5, #0]
 8018752:	4544      	cmp	r4, r8
 8018754:	bf38      	it	cc
 8018756:	2700      	movcc	r7, #0
 8018758:	4417      	add	r7, r2
 801875a:	1c7e      	adds	r6, r7, #1
			while (*p) putc_bfd(&pb, *p++);
 801875c:	2900      	cmp	r1, #0
 801875e:	f47f ae8f 	bne.w	8018480 <f_printf+0x1c8>
 8018762:	e7a3      	b.n	80186ac <f_printf+0x3f4>
	return EOF;
 8018764:	f04f 30ff 	mov.w	r0, #4294967295
}
 8018768:	b020      	add	sp, #128	; 0x80
 801876a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801876e:	b003      	add	sp, #12
 8018770:	4770      	bx	lr
 8018772:	460b      	mov	r3, r1
 8018774:	e62d      	b.n	80183d2 <f_printf+0x11a>
				while (j++ < w) putc_bfd(&pb, ' ');
 8018776:	4647      	mov	r7, r8
 8018778:	e682      	b.n	8018480 <f_printf+0x1c8>
 801877a:	2c00      	cmp	r4, #0
 801877c:	f43f adbe 	beq.w	80182fc <f_printf+0x44>
 8018780:	f04f 0801 	mov.w	r8, #1
 8018784:	e7bd      	b.n	8018702 <f_printf+0x44a>
 8018786:	bf00      	nop

08018788 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8018788:	4b11      	ldr	r3, [pc, #68]	; (80187d0 <FATFS_LinkDriver+0x48>)
 801878a:	7b9a      	ldrb	r2, [r3, #14]
 801878c:	2a01      	cmp	r2, #1
 801878e:	d901      	bls.n	8018794 <FATFS_LinkDriver+0xc>
  uint8_t ret = 1;
 8018790:	2001      	movs	r0, #1
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
}
 8018792:	4770      	bx	lr
{
 8018794:	b4f0      	push	{r4, r5, r6, r7}
    disk.is_initialized[disk.nbr] = 0;
 8018796:	f893 c00e 	ldrb.w	ip, [r3, #14]
 801879a:	2200      	movs	r2, #0
    disk.drv[disk.nbr] = drv;
 801879c:	7b9e      	ldrb	r6, [r3, #14]
    path[1] = ':';
 801879e:	273a      	movs	r7, #58	; 0x3a
    disk.lun[disk.nbr] = lun;
 80187a0:	7b9d      	ldrb	r5, [r3, #14]
    disk.is_initialized[disk.nbr] = 0;
 80187a2:	fa5f fc8c 	uxtb.w	ip, ip
    DiskNum = disk.nbr++;
 80187a6:	7b9c      	ldrb	r4, [r3, #14]
    disk.drv[disk.nbr] = drv;
 80187a8:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    disk.lun[disk.nbr] = lun;
 80187ac:	441d      	add	r5, r3
    disk.is_initialized[disk.nbr] = 0;
 80187ae:	f803 200c 	strb.w	r2, [r3, ip]
    disk.drv[disk.nbr] = drv;
 80187b2:	6070      	str	r0, [r6, #4]
    DiskNum = disk.nbr++;
 80187b4:	1c60      	adds	r0, r4, #1
    disk.lun[disk.nbr] = lun;
 80187b6:	732a      	strb	r2, [r5, #12]
    path[0] = DiskNum + '0';
 80187b8:	3430      	adds	r4, #48	; 0x30
    DiskNum = disk.nbr++;
 80187ba:	b2c0      	uxtb	r0, r0
    path[2] = '/';
 80187bc:	252f      	movs	r5, #47	; 0x2f
    DiskNum = disk.nbr++;
 80187be:	7398      	strb	r0, [r3, #14]
    path[3] = 0;
 80187c0:	4610      	mov	r0, r2
    path[0] = DiskNum + '0';
 80187c2:	700c      	strb	r4, [r1, #0]
    path[1] = ':';
 80187c4:	704f      	strb	r7, [r1, #1]
    path[2] = '/';
 80187c6:	708d      	strb	r5, [r1, #2]
    path[3] = 0;
 80187c8:	70ca      	strb	r2, [r1, #3]
}
 80187ca:	bcf0      	pop	{r4, r5, r6, r7}
 80187cc:	4770      	bx	lr
 80187ce:	bf00      	nop
 80187d0:	20009570 	.word	0x20009570

080187d4 <ff_memalloc>:

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 80187d4:	f00c bafa 	b.w	8024dcc <malloc>

080187d8 <ff_memfree>:

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 80187d8:	f00c bb00 	b.w	8024ddc <free>

080187dc <Init_DataMemoryLayout>:
  AIContext->nn_input_buffer = NULL;
  #else
  AIContext->nn_input_buffer = ai_fp_global_memory + AI_ACTIVATION_BUFFER_SIZE;
  #endif /* AI_NETWORK_INPUTS_IN_ACTIVATIONS */
#elif MEMORY_SCHEME != FULL_INTERNAL_MEM_OPT
  App_Context_Ptr->Camera_ContextPtr->camera_capture_buffer = ai_fp_global_memory;
 80187dc:	4a08      	ldr	r2, [pc, #32]	; (8018800 <Init_DataMemoryLayout+0x24>)
  AiContext_TypeDef *AIContext = App_Context_Ptr->Ai_ContextPtr;
 80187de:	6b01      	ldr	r1, [r0, #48]	; 0x30
  App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE;
 80187e0:	f502 3316 	add.w	r3, r2, #153600	; 0x25800
{
 80187e4:	b470      	push	{r4, r5, r6}
  AIContext->nn_input_buffer = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE;
  #endif /* AI_NETWORK_INPUTS_IN_ACTIVATIONS */
  #else /* MEMORY_SCHEME == FULL_EXTERNAL */
  /* Bottom camera_frame_buff buffer and resize_output_buff buffer */
  #define  RESIZE_OUTPUT_BUFFER_OFFSET (CAM_FRAME_BUFFER_SIZE - RESIZE_OUTPUT_BUFFER_SIZE)
  App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE;
 80187e6:	e9d0 4007 	ldrd	r4, r0, [r0, #28]
  App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE + RESIZE_OUTPUT_BUFFER_OFFSET;
  AIContext->activation_buffer = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE;
  #ifdef AI_NETWORK_INPUTS_IN_ACTIVATIONS
  AIContext->nn_input_buffer = NULL;
 80187ea:	2500      	movs	r5, #0
  App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE + RESIZE_OUTPUT_BUFFER_OFFSET;
 80187ec:	f502 2686 	add.w	r6, r2, #274432	; 0x43000
  App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE;
 80187f0:	e9c4 2300 	strd	r2, r3, [r4]
  App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE + RESIZE_OUTPUT_BUFFER_OFFSET;
 80187f4:	6486      	str	r6, [r0, #72]	; 0x48
  App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE;
 80187f6:	6283      	str	r3, [r0, #40]	; 0x28
  AIContext->nn_input_buffer = NULL;
 80187f8:	e9c1 5301 	strd	r5, r3, [r1, #4]
  #endif /* AI_NETWORK_INPUTS_IN_ACTIVATIONS */
  #endif /* MEMORY_SCHEME == SPLIT_INT_EXT */
#else
  #error "Please check definition of MEMORY_SCHEME define"
#endif /* MEMORY_SCHEME == FULL_INTERNAL_MEM_OPT */
}
 80187fc:	bc70      	pop	{r4, r5, r6}
 80187fe:	4770      	bx	lr
 8018800:	24000000 	.word	0x24000000

08018804 <Run_Preprocessing>:
* @brief  Run preprocessing stages on captured frame
* @param  App context ptr
* @retval None
*/
void Run_Preprocessing(AppContext_TypeDef *App_Context_Ptr)
{
 8018804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018808:	4605      	mov	r5, r0
    /*********************************************************************************************/
    UTILS_DCache_Coherency_Maintenance((void *)(App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer), CAM_FRAME_BUFFER_SIZE, INVALIDATE);
  }
#endif
  
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer);
 801880a:	69c0      	ldr	r0, [r0, #28]
  TestRunCtxt_Ptr->src_height_size=CAM_RES_HEIGHT;
  TestRunCtxt_Ptr->src_bpp=IMAGE_BPP_RGB565;
  TestRunCtxt_Ptr->src_size=CAM_FRAME_BUFFER_SIZE;
  TestRunCtxt_Ptr->PerformCapture=1;
  TestRunCtxt_Ptr->DumpFormat=DATA_FORMAT_BMP;
  TestRunCtxt_Ptr->rb_swap=0;
 801880c:	2700      	movs	r7, #0
  TestRunCtxt_Ptr->PerformCapture=1;
 801880e:	f04f 0901 	mov.w	r9, #1
  TestRunContext_TypeDef* TestRunCtxt_Ptr=&App_Context_Ptr->Test_ContextPtr->TestRunContext;
 8018812:	6aec      	ldr	r4, [r5, #44]	; 0x2c
  TestRunCtxt_Ptr->src_bpp=IMAGE_BPP_RGB565;
 8018814:	f04f 0b02 	mov.w	fp, #2
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer);
 8018818:	6842      	ldr	r2, [r0, #4]
  TestRunCtxt_Ptr->src_width_size=CAM_RES_WIDTH;
 801881a:	f44f 73a0 	mov.w	r3, #320	; 0x140
  PreprocContext_TypeDef* PreprocCtxt_Ptr=App_Context_Ptr->Preproc_ContextPtr;
 801881e:	6a2e      	ldr	r6, [r5, #32]
  TestRunCtxt_Ptr->src_height_size=CAM_RES_HEIGHT;
 8018820:	f04f 0af0 	mov.w	sl, #240	; 0xf0
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer);
 8018824:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
  TestRunCtxt_Ptr->src_size=CAM_FRAME_BUFFER_SIZE;
 8018828:	f44f 3116 	mov.w	r1, #153600	; 0x25800
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[0];
 801882c:	4a61      	ldr	r2, [pc, #388]	; (80189b4 <Run_Preprocessing+0x1b0>)
{
 801882e:	b083      	sub	sp, #12
  TestRunCtxt_Ptr->src_width_size=CAM_RES_WIDTH;
 8018830:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 8018834:	4620      	mov	r0, r4
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[0];
 8018836:	f8c4 254c 	str.w	r2, [r4, #1356]	; 0x54c
  PreprocCtxt_Ptr->Resize_Src_Img.data=App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer;
  PreprocCtxt_Ptr->Resize_Src_Img.w=CAM_RES_WIDTH;
  PreprocCtxt_Ptr->Resize_Src_Img.h=CAM_RES_HEIGHT;
  PreprocCtxt_Ptr->Resize_Src_Img.bpp=IMAGE_BPP_RGB565;
  PreprocCtxt_Ptr->Resize_Dst_Img.data=App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data;
  PreprocCtxt_Ptr->Resize_Dst_Img.w=AI_NETWORK_WIDTH;
 801883a:	f04f 0880 	mov.w	r8, #128	; 0x80
  TestRunCtxt_Ptr->src_height_size=CAM_RES_HEIGHT;
 801883e:	f8c4 a554 	str.w	sl, [r4, #1364]	; 0x554
  TestRunCtxt_Ptr->PerformCapture=1;
 8018842:	f8c4 9560 	str.w	r9, [r4, #1376]	; 0x560
  TestRunCtxt_Ptr->DumpFormat=DATA_FORMAT_BMP;
 8018846:	f884 9564 	strb.w	r9, [r4, #1380]	; 0x564
  TestRunCtxt_Ptr->src_size=CAM_FRAME_BUFFER_SIZE;
 801884a:	f8c4 155c 	str.w	r1, [r4, #1372]	; 0x55c
  TestRunCtxt_Ptr->src_bpp=IMAGE_BPP_RGB565;
 801884e:	f8c4 b558 	str.w	fp, [r4, #1368]	; 0x558
  TestRunCtxt_Ptr->rb_swap=0;
 8018852:	f8c4 7568 	str.w	r7, [r4, #1384]	; 0x568
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 8018856:	7829      	ldrb	r1, [r5, #0]
 8018858:	f7eb f968 	bl	8003b2c <TEST_Run>
  tresize_start=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 801885c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 801885e:	f7ec f8a9 	bl	80049b4 <UTILS_GetTimeStamp>
  PreprocCtxt_Ptr->Resize_Src_Img.w=CAM_RES_WIDTH;
 8018862:	f44f 73a0 	mov.w	r3, #320	; 0x140
  tresize_start=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 8018866:	9000      	str	r0, [sp, #0]
  PreprocCtxt_Ptr->Resize_Dst_Img.data=App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data;
 8018868:	e9d5 1c07 	ldrd	r1, ip, [r5, #28]
  PreprocCtxt_Ptr->Resize_Src_Img.data=App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer;
 801886c:	684a      	ldr	r2, [r1, #4]
  PreprocCtxt_Ptr->Resize_Dst_Img.h=AI_NETWORK_HEIGHT;
  PreprocCtxt_Ptr->Resize_Dst_Img.bpp=IMAGE_BPP_RGB565;
  PREPROC_ImageResize(App_Context_Ptr->Preproc_ContextPtr);
 801886e:	4660      	mov	r0, ip
  PreprocCtxt_Ptr->Resize_Dst_Img.data=App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data;
 8018870:	f8dc 1048 	ldr.w	r1, [ip, #72]	; 0x48
  PreprocCtxt_Ptr->Resize_Src_Img.data=App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer;
 8018874:	63b2      	str	r2, [r6, #56]	; 0x38
  PreprocCtxt_Ptr->Resize_Src_Img.bpp=IMAGE_BPP_RGB565;
 8018876:	f8c6 b034 	str.w	fp, [r6, #52]	; 0x34
  PreprocCtxt_Ptr->Resize_Src_Img.h=CAM_RES_HEIGHT;
 801887a:	e9c6 3a0b 	strd	r3, sl, [r6, #44]	; 0x2c
  PreprocCtxt_Ptr->Resize_Dst_Img.bpp=IMAGE_BPP_RGB565;
 801887e:	e9c6 b111 	strd	fp, r1, [r6, #68]	; 0x44
  PreprocCtxt_Ptr->Resize_Dst_Img.h=AI_NETWORK_HEIGHT;
 8018882:	e9c6 880f 	strd	r8, r8, [r6, #60]	; 0x3c
  PREPROC_ImageResize(App_Context_Ptr->Preproc_ContextPtr);
 8018886:	f7e9 f837 	bl	80018f8 <PREPROC_ImageResize>
  
  tresize_stop=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 801888a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 801888c:	f7ec f892 	bl	80049b4 <UTILS_GetTimeStamp>
  
#if PIXEL_FMT_CONV == HW_PFC
  /******************************************************************************************/
  /****Coherency purpose: clean the source buffer area in L1 D-Cache before DMA2D reading****/
  /******************************************************************************************/
  UTILS_DCache_Coherency_Maintenance((void *)(App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data), RESIZE_OUTPUT_BUFFER_SIZE, CLEAN);
 8018890:	6a2b      	ldr	r3, [r5, #32]
 8018892:	465a      	mov	r2, fp
  tresize_stop=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 8018894:	4682      	mov	sl, r0
  UTILS_DCache_Coherency_Maintenance((void *)(App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data), RESIZE_OUTPUT_BUFFER_SIZE, CLEAN);
 8018896:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801889a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801889c:	f7ec f948 	bl	8004b30 <UTILS_DCache_Coherency_Maintenance>
#endif
  
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data);
 80188a0:	6a29      	ldr	r1, [r5, #32]
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[1];
 80188a2:	4a44      	ldr	r2, [pc, #272]	; (80189b4 <Run_Preprocessing+0x1b0>)
  TestRunCtxt_Ptr->src_width_size=AI_NETWORK_WIDTH;
  TestRunCtxt_Ptr->src_height_size=AI_NETWORK_HEIGHT;
  TestRunCtxt_Ptr->src_bpp=IMAGE_BPP_RGB565;
  TestRunCtxt_Ptr->src_size=RESIZE_OUTPUT_BUFFER_SIZE;
 80188a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data);
 80188a8:	6c89      	ldr	r1, [r1, #72]	; 0x48
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[1];
 80188aa:	f102 0020 	add.w	r0, r2, #32
  TestRunCtxt_Ptr->PerformCapture=0;
  TestRunCtxt_Ptr->DumpFormat=DATA_FORMAT_BMP;
 80188ae:	f884 9564 	strb.w	r9, [r4, #1380]	; 0x564
  TestRunCtxt_Ptr->src_size=RESIZE_OUTPUT_BUFFER_SIZE;
 80188b2:	f8c4 355c 	str.w	r3, [r4, #1372]	; 0x55c
  TestRunCtxt_Ptr->src_width_size=AI_NETWORK_WIDTH;
 80188b6:	f8c4 8550 	str.w	r8, [r4, #1360]	; 0x550
  TestRunCtxt_Ptr->src_height_size=AI_NETWORK_HEIGHT;
 80188ba:	f8c4 8554 	str.w	r8, [r4, #1364]	; 0x554
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[1];
 80188be:	f8c4 054c 	str.w	r0, [r4, #1356]	; 0x54c
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data);
 80188c2:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
  TestRunCtxt_Ptr->rb_swap=0;
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 80188c6:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  TestRunCtxt_Ptr->src_bpp=IMAGE_BPP_RGB565;
 80188c8:	f8c4 b558 	str.w	fp, [r4, #1368]	; 0x558
  TestRunCtxt_Ptr->PerformCapture=0;
 80188cc:	f8c4 7560 	str.w	r7, [r4, #1376]	; 0x560
  TestRunCtxt_Ptr->rb_swap=0;
 80188d0:	f8c4 7568 	str.w	r7, [r4, #1384]	; 0x568
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 80188d4:	7829      	ldrb	r1, [r5, #0]
 80188d6:	f7eb f929 	bl	8003b2c <TEST_Run>
  
  tpfc_start=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 80188da:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80188dc:	f7ec f86a 	bl	80049b4 <UTILS_GetTimeStamp>
  
  /*************************************/
  /****Image Pixel Format Conversion****/
  /*************************************/
  PreprocCtxt_Ptr->Pfc_Src_Img.data=App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data;
 80188e0:	6a29      	ldr	r1, [r5, #32]
  tpfc_start=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 80188e2:	9001      	str	r0, [sp, #4]
  PreprocCtxt_Ptr->Pfc_Src_Img.data=App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data;
 80188e4:	6c8b      	ldr	r3, [r1, #72]	; 0x48
  PreprocCtxt_Ptr->Pfc_Dst_Img.h=AI_NETWORK_HEIGHT;
  PreprocCtxt_Ptr->Dma2dcfg.x=0;
  PreprocCtxt_Ptr->Dma2dcfg.y=0;
  PreprocCtxt_Ptr->Dma2dcfg.rowStride=AI_NETWORK_WIDTH;
  PreprocCtxt_Ptr->red_blue_swap=1;
  PREPROC_PixelFormatConversion(App_Context_Ptr->Preproc_ContextPtr);
 80188e6:	4608      	mov	r0, r1
  PreprocCtxt_Ptr->Pfc_Dst_Img.data=App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data;
 80188e8:	6a89      	ldr	r1, [r1, #40]	; 0x28
  PreprocCtxt_Ptr->Pfc_Src_Img.data=App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.data;
 80188ea:	61b3      	str	r3, [r6, #24]
  PreprocCtxt_Ptr->Pfc_Dst_Img.data=App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data;
 80188ec:	62b1      	str	r1, [r6, #40]	; 0x28
  PreprocCtxt_Ptr->Dma2dcfg.rowStride=AI_NETWORK_WIDTH;
 80188ee:	e9c6 7800 	strd	r7, r8, [r6]
  PreprocCtxt_Ptr->Pfc_Src_Img.w=AI_NETWORK_WIDTH;
 80188f2:	e9c6 9802 	strd	r9, r8, [r6, #8]
  PreprocCtxt_Ptr->Pfc_Src_Img.bpp=IMAGE_BPP_RGB565;
 80188f6:	e9c6 8b04 	strd	r8, fp, [r6, #16]
  PreprocCtxt_Ptr->Pfc_Dst_Img.h=AI_NETWORK_HEIGHT;
 80188fa:	e9c6 8807 	strd	r8, r8, [r6, #28]
  PREPROC_PixelFormatConversion(App_Context_Ptr->Preproc_ContextPtr);
 80188fe:	f7e9 f80f 	bl	8001920 <PREPROC_PixelFormatConversion>
  
  tpfc_stop=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 8018902:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8018904:	f7ec f856 	bl	80049b4 <UTILS_GetTimeStamp>
  
#if PIXEL_FMT_CONV == HW_PFC 
  /**************************************************************************************/
  /****Coherency purpose: invalidate the source area in L1 D-Cache before CPU reading****/  
  /**************************************************************************************/
  UTILS_DCache_Coherency_Maintenance((void *)(App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data), 
 8018908:	6a2b      	ldr	r3, [r5, #32]
 801890a:	464a      	mov	r2, r9
  tpfc_stop=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 801890c:	4606      	mov	r6, r0
  UTILS_DCache_Coherency_Maintenance((void *)(App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data), 
 801890e:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8018912:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8018914:	f7ec f90c 	bl	8004b30 <UTILS_DCache_Coherency_Maintenance>
                                     PFC_OUTPUT_BUFFER_SIZE, 
                                     INVALIDATE);
#endif
  
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data);
 8018918:	6a29      	ldr	r1, [r5, #32]
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[2];
 801891a:	4a26      	ldr	r2, [pc, #152]	; (80189b4 <Run_Preprocessing+0x1b0>)
  TestRunCtxt_Ptr->src_width_size=AI_NETWORK_WIDTH;
  TestRunCtxt_Ptr->src_height_size=AI_NETWORK_HEIGHT;
  TestRunCtxt_Ptr->src_bpp=App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.bpp;
  TestRunCtxt_Ptr->src_size=PFC_OUTPUT_BUFFER_SIZE;
 801891c:	f44f 4040 	mov.w	r0, #49152	; 0xc000
  TestRunCtxt_Ptr->src_bpp=App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.bpp;
 8018920:	e9d1 1309 	ldrd	r1, r3, [r1, #36]	; 0x24
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[2];
 8018924:	3240      	adds	r2, #64	; 0x40
  TestRunCtxt_Ptr->PerformCapture=0;
  TestRunCtxt_Ptr->DumpFormat=DATA_FORMAT_BMP;
 8018926:	f884 9564 	strb.w	r9, [r4, #1380]	; 0x564
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data);
 801892a:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[2];
 801892e:	f8c4 254c 	str.w	r2, [r4, #1356]	; 0x54c
  TestRunCtxt_Ptr->src_width_size=AI_NETWORK_WIDTH;
 8018932:	f8c4 8550 	str.w	r8, [r4, #1360]	; 0x550
  TestRunCtxt_Ptr->src_height_size=AI_NETWORK_HEIGHT;
 8018936:	f8c4 8554 	str.w	r8, [r4, #1364]	; 0x554
  TestRunCtxt_Ptr->rb_swap=1;
 801893a:	f8c4 9568 	str.w	r9, [r4, #1384]	; 0x568
  TestRunCtxt_Ptr->src_size=PFC_OUTPUT_BUFFER_SIZE;
 801893e:	f8c4 055c 	str.w	r0, [r4, #1372]	; 0x55c
  TestRunCtxt_Ptr->src_bpp=App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.bpp;
 8018942:	f8c4 1558 	str.w	r1, [r4, #1368]	; 0x558
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 8018946:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  TestRunCtxt_Ptr->PerformCapture=0;
 8018948:	f8c4 7560 	str.w	r7, [r4, #1376]	; 0x560
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 801894c:	7829      	ldrb	r1, [r5, #0]
 801894e:	f7eb f8ed 	bl	8003b2c <TEST_Run>

  tpvc_start=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 8018952:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8018954:	f7ec f82e 	bl	80049b4 <UTILS_GetTimeStamp>
#ifdef OBJECTDETECT
  AI_PixelValueConversion(App_Context_Ptr->People_ContextPtr,
                                      (void*)(App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data));
#else
  AI_PixelValueConversion(App_Context_Ptr->Ai_ContextPtr,
                                      (void*)(App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.data));
 8018958:	6a2a      	ldr	r2, [r5, #32]
  tpvc_start=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 801895a:	4681      	mov	r9, r0
  AI_PixelValueConversion(App_Context_Ptr->Ai_ContextPtr,
 801895c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801895e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8018960:	f7e8 f8fa 	bl	8000b58 <AI_PixelValueConversion>
#endif /* OBJECTDETECT */

  tpvc_stop=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 8018964:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8018966:	f7ec f825 	bl	80049b4 <UTILS_GetTimeStamp>
  
  TestRunCtxt_Ptr->src_buff_addr=(void *)(NULL);
  TestRunCtxt_Ptr->src_buff_name="";
 801896a:	4a13      	ldr	r2, [pc, #76]	; (80189b8 <Run_Preprocessing+0x1b4>)
  TestRunCtxt_Ptr->src_width_size=0;
  TestRunCtxt_Ptr->src_height_size=0;
  TestRunCtxt_Ptr->src_size=0;
  TestRunCtxt_Ptr->PerformCapture=0;
  TestRunCtxt_Ptr->DumpFormat=DATA_FORMAT_RAW;
 801896c:	f884 7564 	strb.w	r7, [r4, #1380]	; 0x564
  tpvc_stop=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 8018970:	4680      	mov	r8, r0
  TestRunCtxt_Ptr->src_buff_name="";
 8018972:	f8c4 254c 	str.w	r2, [r4, #1356]	; 0x54c
  TestRunCtxt_Ptr->rb_swap=0;
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 8018976:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  TestRunCtxt_Ptr->src_buff_addr=(void *)(NULL);
 8018978:	f8c4 7548 	str.w	r7, [r4, #1352]	; 0x548
  TestRunCtxt_Ptr->src_width_size=0;
 801897c:	f8c4 7550 	str.w	r7, [r4, #1360]	; 0x550
  TestRunCtxt_Ptr->src_height_size=0;
 8018980:	f8c4 7554 	str.w	r7, [r4, #1364]	; 0x554
  TestRunCtxt_Ptr->src_size=0;
 8018984:	f8c4 755c 	str.w	r7, [r4, #1372]	; 0x55c
  TestRunCtxt_Ptr->PerformCapture=0;
 8018988:	f8c4 7560 	str.w	r7, [r4, #1376]	; 0x560
  TestRunCtxt_Ptr->rb_swap=0;
 801898c:	f8c4 7568 	str.w	r7, [r4, #1384]	; 0x568
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 8018990:	7829      	ldrb	r1, [r5, #0]
 8018992:	f7eb f8cb 	bl	8003b2c <TEST_Run>
  
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_PFC]=tpfc_stop-tpfc_start;
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_RESIZE]=tresize_stop-tresize_start;
 8018996:	9900      	ldr	r1, [sp, #0]
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_PFC]=tpfc_stop-tpfc_start;
 8018998:	9b01      	ldr	r3, [sp, #4]
 801899a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_RESIZE]=tresize_stop-tresize_start;
 801899c:	ebaa 0001 	sub.w	r0, sl, r1
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_PFC]=tpfc_stop-tpfc_start;
 80189a0:	1af3      	subs	r3, r6, r3
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_PVC]=tpvc_stop-tpvc_start;
 80189a2:	eba8 0109 	sub.w	r1, r8, r9
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_RESIZE]=tresize_stop-tresize_start;
 80189a6:	e9c2 0301 	strd	r0, r3, [r2, #4]
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_PVC]=tpvc_stop-tpvc_start;
 80189aa:	60d1      	str	r1, [r2, #12]
}
 80189ac:	b003      	add	sp, #12
 80189ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189b2:	bf00      	nop
 80189b4:	20000014 	.word	0x20000014
 80189b8:	08028934 	.word	0x08028934

080189bc <Image_CheckResizeMemoryLayout>:

bool Image_CheckResizeMemoryLayout(image_t *src_img, image_t *dst_img)
{
 80189bc:	b570      	push	{r4, r5, r6, lr}
 80189be:	460c      	mov	r4, r1
 80189c0:	4606      	mov	r6, r0
  uint32_t src_size = STM32Ipl_ImageDataSize(src_img);
 80189c2:	f000 f84b 	bl	8018a5c <STM32Ipl_ImageDataSize>
 80189c6:	4605      	mov	r5, r0
  uint32_t dst_size = STM32Ipl_ImageDataSize(dst_img);
 80189c8:	4620      	mov	r0, r4
 80189ca:	f000 f847 	bl	8018a5c <STM32Ipl_ImageDataSize>
  uint32_t src_start = (uint32_t)src_img->data;
  uint32_t dst_start = (uint32_t)dst_img->data;
 80189ce:	68e4      	ldr	r4, [r4, #12]
  uint32_t src_end = src_start + src_size - 1;
 80189d0:	68f2      	ldr	r2, [r6, #12]
  uint32_t dst_end = dst_start + dst_size - 1;
 80189d2:	1e61      	subs	r1, r4, #1
  uint32_t src_end = src_start + src_size - 1;
 80189d4:	3a01      	subs	r2, #1
  uint32_t dst_end = dst_start + dst_size - 1;
 80189d6:	4408      	add	r0, r1
  uint32_t src_end = src_start + src_size - 1;
 80189d8:	442a      	add	r2, r5
  {
    reverse = false; /* ((src_start >= dst_start) || (src_end <= dst_start)) */
  }

  return reverse;
}
 80189da:	4282      	cmp	r2, r0
 80189dc:	bf98      	it	ls
 80189de:	4294      	cmpls	r4, r2
 80189e0:	bf34      	ite	cc
 80189e2:	2001      	movcc	r0, #1
 80189e4:	2000      	movcs	r0, #0
 80189e6:	bd70      	pop	{r4, r5, r6, pc}

080189e8 <STM32Ipl_InitLib>:
 * @param memAddr	Address of the memory buffer allocated to STM32IPL for its internal purposes.
 * @param memSize	Size of the memory buffer (bytes).
 * @return			void.
 */
void STM32Ipl_InitLib(void *memAddr, uint32_t memSize)
{
 80189e8:	b508      	push	{r3, lr}
	umm_init(memAddr, memSize);
 80189ea:	f001 ffdd 	bl	801a9a8 <umm_init>
	fb_init();
}
 80189ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	fb_init();
 80189f2:	f001 bd6d 	b.w	801a4d0 <fb_init>
 80189f6:	bf00      	nop

080189f8 <STM32Ipl_Init>:
 * @param data		Pointer to the pixel data assigned to image.
 * @return			void.
 */
void STM32Ipl_Init(image_t *img, uint32_t width, uint32_t height, image_bpp_t format, void *data)
{
	if (img) {
 80189f8:	b120      	cbz	r0, 8018a04 <STM32Ipl_Init+0xc>
		img->w = width;
		img->h = height;
		img->bpp = format;
 80189fa:	6083      	str	r3, [r0, #8]
		img->data = data;
 80189fc:	9b00      	ldr	r3, [sp, #0]
		img->h = height;
 80189fe:	e9c0 1200 	strd	r1, r2, [r0]
		img->data = data;
 8018a02:	60c3      	str	r3, [r0, #12]
	}
}
 8018a04:	4770      	bx	lr
 8018a06:	bf00      	nop

08018a08 <STM32Ipl_ReleaseData>:
 * @param img	Image.
 * @return		void.
 */
void STM32Ipl_ReleaseData(image_t *img)
{
	if (img) {
 8018a08:	b150      	cbz	r0, 8018a20 <STM32Ipl_ReleaseData+0x18>
{
 8018a0a:	b510      	push	{r4, lr}
 8018a0c:	4604      	mov	r4, r0
		xfree(img->data);
 8018a0e:	68c0      	ldr	r0, [r0, #12]
 8018a10:	f001 fd5c 	bl	801a4cc <xfree>
		img->w = width;
 8018a14:	2300      	movs	r3, #0
		img->h = height;
 8018a16:	e9c4 3300 	strd	r3, r3, [r4]
		img->data = data;
 8018a1a:	e9c4 3302 	strd	r3, r3, [r4, #8]
		STM32Ipl_Init(img, 0, 0, (image_bpp_t)0, 0);
	}
}
 8018a1e:	bd10      	pop	{r4, pc}
 8018a20:	4770      	bx	lr
 8018a22:	bf00      	nop

08018a24 <STM32Ipl_DataSize>:
 * @param format	Image format.
 * @return			Size of the image data buffer (bytes), 0 in case of wrong/unsupported arguments.
 */
uint32_t STM32Ipl_DataSize(uint32_t width, uint32_t height, image_bpp_t format)
{
	switch ((uint32_t)format) {
 8018a24:	2a04      	cmp	r2, #4
 8018a26:	d816      	bhi.n	8018a56 <STM32Ipl_DataSize+0x32>
 8018a28:	e8df f002 	tbb	[pc, r2]
 8018a2c:	030c0306 	.word	0x030c0306
 8018a30:	10          	.byte	0x10
 8018a31:	00          	.byte	0x00
		case IMAGE_BPP_BINARY:
			return ((width + UINT32_T_MASK) >> UINT32_T_SHIFT) * height * sizeof(uint32_t);

		case IMAGE_BPP_GRAYSCALE:
			return width * height * sizeof(uint8_t);
 8018a32:	fb01 f000 	mul.w	r0, r1, r0
 8018a36:	4770      	bx	lr
			return ((width + UINT32_T_MASK) >> UINT32_T_SHIFT) * height * sizeof(uint32_t);
 8018a38:	301f      	adds	r0, #31
 8018a3a:	0940      	lsrs	r0, r0, #5
 8018a3c:	fb01 f000 	mul.w	r0, r1, r0
 8018a40:	0080      	lsls	r0, r0, #2
 8018a42:	4770      	bx	lr

		case IMAGE_BPP_RGB565:
			return width * height * sizeof(uint16_t);
 8018a44:	fb01 f000 	mul.w	r0, r1, r0
 8018a48:	0040      	lsls	r0, r0, #1
 8018a4a:	4770      	bx	lr

		case IMAGE_BPP_BAYER:
			return width * height * sizeof(uint8_t);

		case IMAGE_BPP_RGB888:
			return width * height * 3;
 8018a4c:	fb01 f000 	mul.w	r0, r1, r0
 8018a50:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8018a54:	4770      	bx	lr
{
 8018a56:	2000      	movs	r0, #0
	}

	return 0;
}
 8018a58:	4770      	bx	lr
 8018a5a:	bf00      	nop

08018a5c <STM32Ipl_ImageDataSize>:
 * @param img	Image.
 * @return		Size of the image data buffer (bytes), 0 in case of wrong/unsupported argument.
 */
uint32_t STM32Ipl_ImageDataSize(const image_t *img)
{
	return img ? STM32Ipl_DataSize(img->w, img->h, (image_bpp_t)img->bpp) : 0;
 8018a5c:	b150      	cbz	r0, 8018a74 <STM32Ipl_ImageDataSize+0x18>
 8018a5e:	7a03      	ldrb	r3, [r0, #8]
 8018a60:	e9d0 2000 	ldrd	r2, r0, [r0]
	switch ((uint32_t)format) {
 8018a64:	2b04      	cmp	r3, #4
 8018a66:	d804      	bhi.n	8018a72 <STM32Ipl_ImageDataSize+0x16>
 8018a68:	e8df f003 	tbb	[pc, r3]
 8018a6c:	050e0508 	.word	0x050e0508
 8018a70:	12          	.byte	0x12
 8018a71:	00          	.byte	0x00
	return img ? STM32Ipl_DataSize(img->w, img->h, (image_bpp_t)img->bpp) : 0;
 8018a72:	2000      	movs	r0, #0
}
 8018a74:	4770      	bx	lr
			return width * height * sizeof(uint8_t);
 8018a76:	fb00 f002 	mul.w	r0, r0, r2
 8018a7a:	4770      	bx	lr
			return ((width + UINT32_T_MASK) >> UINT32_T_SHIFT) * height * sizeof(uint32_t);
 8018a7c:	321f      	adds	r2, #31
 8018a7e:	0952      	lsrs	r2, r2, #5
 8018a80:	fb00 f002 	mul.w	r0, r0, r2
 8018a84:	0080      	lsls	r0, r0, #2
 8018a86:	4770      	bx	lr
			return width * height * sizeof(uint16_t);
 8018a88:	fb00 f002 	mul.w	r0, r0, r2
 8018a8c:	0040      	lsls	r0, r0, #1
 8018a8e:	4770      	bx	lr
			return width * height * 3;
 8018a90:	fb00 f002 	mul.w	r0, r0, r2
 8018a94:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8018a98:	4770      	bx	lr
 8018a9a:	bf00      	nop

08018a9c <STM32Ipl_ImageFormatSupported>:
 */
bool STM32Ipl_ImageFormatSupported(const image_t *img, uint32_t formats)
{
	stm32ipl_if_t format;

	switch (img->bpp) {
 8018a9c:	6883      	ldr	r3, [r0, #8]
 8018a9e:	2b04      	cmp	r3, #4
 8018aa0:	d810      	bhi.n	8018ac4 <STM32Ipl_ImageFormatSupported+0x28>
 8018aa2:	e8df f003 	tbb	[pc, r3]
 8018aa6:	0903      	.short	0x0903
 8018aa8:	0f0d      	.short	0x0f0d
 8018aaa:	0b          	.byte	0x0b
 8018aab:	00          	.byte	0x00
 8018aac:	2301      	movs	r3, #1

		default:
			return false;
	}

	return (format & formats);
 8018aae:	4219      	tst	r1, r3
 8018ab0:	bf14      	ite	ne
 8018ab2:	2001      	movne	r0, #1
 8018ab4:	2000      	moveq	r0, #0
 8018ab6:	4770      	bx	lr
	switch (img->bpp) {
 8018ab8:	2302      	movs	r3, #2
 8018aba:	e7f8      	b.n	8018aae <STM32Ipl_ImageFormatSupported+0x12>
			break;
 8018abc:	2308      	movs	r3, #8
 8018abe:	e7f6      	b.n	8018aae <STM32Ipl_ImageFormatSupported+0x12>
			break;
 8018ac0:	2304      	movs	r3, #4
 8018ac2:	e7f4      	b.n	8018aae <STM32Ipl_ImageFormatSupported+0x12>
	switch (img->bpp) {
 8018ac4:	2000      	movs	r0, #0
}
 8018ac6:	4770      	bx	lr

08018ac8 <STM32Ipl_CopyData>:
 * @param dst   Destination image; if it is not valid, an error is returned.
 * @return		stm32ipl_err_Ok on success, error otherwise.
 */
stm32ipl_err_t STM32Ipl_CopyData(const image_t *src, image_t *dst)
{
	STM32IPL_CHECK_VALID_IMAGE(src)
 8018ac8:	2800      	cmp	r0, #0
 8018aca:	d033      	beq.n	8018b34 <STM32Ipl_CopyData+0x6c>
{
 8018acc:	b570      	push	{r4, r5, r6, lr}
	STM32IPL_CHECK_VALID_IMAGE(src)
 8018ace:	68c6      	ldr	r6, [r0, #12]
	STM32IPL_CHECK_VALID_IMAGE(dst)
 8018ad0:	b36e      	cbz	r6, 8018b2e <STM32Ipl_CopyData+0x66>
 8018ad2:	b361      	cbz	r1, 8018b2e <STM32Ipl_CopyData+0x66>
 8018ad4:	68cd      	ldr	r5, [r1, #12]
 8018ad6:	b355      	cbz	r5, 8018b2e <STM32Ipl_CopyData+0x66>
	STM32IPL_CHECK_SAME_SIZE(src, dst)
 8018ad8:	680b      	ldr	r3, [r1, #0]
 8018ada:	6804      	ldr	r4, [r0, #0]
 8018adc:	429c      	cmp	r4, r3
 8018ade:	d126      	bne.n	8018b2e <STM32Ipl_CopyData+0x66>
 8018ae0:	684b      	ldr	r3, [r1, #4]
 8018ae2:	6842      	ldr	r2, [r0, #4]
 8018ae4:	429a      	cmp	r2, r3
 8018ae6:	d122      	bne.n	8018b2e <STM32Ipl_CopyData+0x66>
	STM32IPL_CHECK_SAME_FORMAT(src, dst)
 8018ae8:	6889      	ldr	r1, [r1, #8]
 8018aea:	6883      	ldr	r3, [r0, #8]
 8018aec:	428b      	cmp	r3, r1
 8018aee:	d11e      	bne.n	8018b2e <STM32Ipl_CopyData+0x66>
	switch ((uint32_t)format) {
 8018af0:	b2db      	uxtb	r3, r3
 8018af2:	2b04      	cmp	r3, #4
 8018af4:	d821      	bhi.n	8018b3a <STM32Ipl_CopyData+0x72>
 8018af6:	e8df f003 	tbb	[pc, r3]
 8018afa:	030b      	.short	0x030b
 8018afc:	0311      	.short	0x0311
 8018afe:	15          	.byte	0x15
 8018aff:	00          	.byte	0x00
			return width * height * sizeof(uint8_t);
 8018b00:	fb02 f204 	mul.w	r2, r2, r4

	memcpy(dst->data, src->data, STM32Ipl_ImageDataSize(dst));
 8018b04:	4631      	mov	r1, r6
 8018b06:	4628      	mov	r0, r5
 8018b08:	f00c f970 	bl	8024dec <memcpy>

	return stm32ipl_err_Ok;
 8018b0c:	2000      	movs	r0, #0
}
 8018b0e:	bd70      	pop	{r4, r5, r6, pc}
			return ((width + UINT32_T_MASK) >> UINT32_T_SHIFT) * height * sizeof(uint32_t);
 8018b10:	341f      	adds	r4, #31
 8018b12:	0964      	lsrs	r4, r4, #5
 8018b14:	fb02 f204 	mul.w	r2, r2, r4
 8018b18:	0092      	lsls	r2, r2, #2
 8018b1a:	e7f3      	b.n	8018b04 <STM32Ipl_CopyData+0x3c>
			return width * height * sizeof(uint16_t);
 8018b1c:	fb02 f204 	mul.w	r2, r2, r4
 8018b20:	0052      	lsls	r2, r2, #1
 8018b22:	e7ef      	b.n	8018b04 <STM32Ipl_CopyData+0x3c>
			return width * height * 3;
 8018b24:	fb02 f204 	mul.w	r2, r2, r4
 8018b28:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018b2c:	e7ea      	b.n	8018b04 <STM32Ipl_CopyData+0x3c>
	STM32IPL_CHECK_VALID_IMAGE(src)
 8018b2e:	f06f 0001 	mvn.w	r0, #1
}
 8018b32:	bd70      	pop	{r4, r5, r6, pc}
	STM32IPL_CHECK_VALID_IMAGE(src)
 8018b34:	f06f 0001 	mvn.w	r0, #1
}
 8018b38:	4770      	bx	lr
	return img ? STM32Ipl_DataSize(img->w, img->h, (image_bpp_t)img->bpp) : 0;
 8018b3a:	2200      	movs	r2, #0
 8018b3c:	e7e2      	b.n	8018b04 <STM32Ipl_CopyData+0x3c>
 8018b3e:	bf00      	nop

08018b40 <writeBmpHeader>:
 * paletteColorUsed	The number of palette items used.
 * return stm32ipl_err_Ok on success, errors otherwise.
 */
static stm32ipl_err_t writeBmpHeader(FIL *fp, uint32_t width, uint32_t height, uint32_t dataOffset, uint32_t lineSize,
		uint32_t bitsPP, uint32_t compression, uint32_t paletteColorUsed)
{
 8018b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b44:	b091      	sub	sp, #68	; 0x44
 8018b46:	460f      	mov	r7, r1
 8018b48:	4615      	mov	r5, r2
 8018b4a:	4606      	mov	r6, r0
 8018b4c:	9c1a      	ldr	r4, [sp, #104]	; 0x68
	uint8_t header[54];
	uint32_t fileSize;
	uint32_t imageSize;
	UINT bytesWritten;

	memset(&header, 0, 54);
 8018b4e:	2232      	movs	r2, #50	; 0x32
 8018b50:	2100      	movs	r1, #0
 8018b52:	a803      	add	r0, sp, #12

	imageSize = lineSize * height;
 8018b54:	fb05 f404 	mul.w	r4, r5, r4
{
 8018b58:	4698      	mov	r8, r3
	header[14] = 40;

	/* biWidth. */
	header[18] = (uint8_t)((width & 0XFF));
	header[19] = (uint8_t)((width >> 8) & 0xFF);
	header[20] = (uint8_t)((width >> 16) & 0xFF);
 8018b5a:	ea4f 4b17 	mov.w	fp, r7, lsr #16
	header[23] = (uint8_t)((height >> 8) & 0xFF);
	header[24] = (uint8_t)((height >> 16) & 0xFF);
	header[25] = (uint8_t)((height >> 24) & 0xFF);

	/* biPlanes. */
	header[26] = 1;
 8018b5e:	f04f 0a01 	mov.w	sl, #1
	memset(&header, 0, 54);
 8018b62:	f00c f96b 	bl	8024e3c <memset>
	header[18] = (uint8_t)((width & 0XFF));
 8018b66:	f8ad 701a 	strh.w	r7, [sp, #26]
	header[21] = (uint8_t)((width >> 24) & 0xFF);
 8018b6a:	0e3a      	lsrs	r2, r7, #24

	/* biBitCount. */
	header[28] = (uint8_t)((bitsPP & 0XFF));
 8018b6c:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
	fileSize = dataOffset + imageSize;
 8018b6e:	eb04 0308 	add.w	r3, r4, r8
	header[30] = (uint8_t)compression;

	/* biSizeImage. */
	header[34] = (uint8_t)((imageSize & 0XFF));
	header[35] = (uint8_t)((imageSize >> 8) & 0xFF);
	header[36] = (uint8_t)((imageSize >> 16) & 0xFF);
 8018b72:	0c20      	lsrs	r0, r4, #16
	header[28] = (uint8_t)((bitsPP & 0XFF));
 8018b74:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
	header[24] = (uint8_t)((height >> 16) & 0xFF);
 8018b78:	ea4f 4915 	mov.w	r9, r5, lsr #16
	header[30] = (uint8_t)compression;
 8018b7c:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	header[4] = (uint8_t)((fileSize >> 16) & 0xFF);
 8018b7e:	ea4f 4c13 	mov.w	ip, r3, lsr #16
	header[2] = (uint8_t)((fileSize & 0XFF));
 8018b82:	f8ad 300a 	strh.w	r3, [sp, #10]
	header[5] = (uint8_t)((fileSize >> 24) & 0xFF);
 8018b86:	0e1b      	lsrs	r3, r3, #24
	header[30] = (uint8_t)compression;
 8018b88:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
	header[0] = 'B';
 8018b8c:	f644 5e42 	movw	lr, #19778	; 0x4d42
	header[43] = (uint8_t)((2835 >> 8) & 0xFF);
	header[44] = (uint8_t)((2835 >> 16) & 0xFF);
	header[45] = (uint8_t)((2835 >> 24) & 0xFF);

	/* biClrUsed. */
	header[46] = (uint8_t)((paletteColorUsed & 0XFF));
 8018b90:	9f1d      	ldr	r7, [sp, #116]	; 0x74
	header[49] = (uint8_t)((paletteColorUsed >> 24) & 0xFF);

	/* biClrImportant. */
	//header[50] = 0;
	/* Write header */
	res = f_write(fp, header, 14, &bytesWritten);
 8018b92:	a902      	add	r1, sp, #8
	header[34] = (uint8_t)((imageSize & 0XFF));
 8018b94:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
	header[37] = (uint8_t)((imageSize >> 24) & 0xFF);
 8018b98:	0e24      	lsrs	r4, r4, #24
	header[10] = (uint8_t)((dataOffset & 0XFF));
 8018b9a:	f8ad 8012 	strh.w	r8, [sp, #18]
	header[14] = 40;
 8018b9e:	f04f 0828 	mov.w	r8, #40	; 0x28
	header[22] = (uint8_t)((height & 0XFF));
 8018ba2:	f8ad 501e 	strh.w	r5, [sp, #30]
	header[25] = (uint8_t)((height >> 24) & 0xFF);
 8018ba6:	0e2d      	lsrs	r5, r5, #24
	header[46] = (uint8_t)((paletteColorUsed & 0XFF));
 8018ba8:	f8ad 7036 	strh.w	r7, [sp, #54]	; 0x36
	header[12] = (uint8_t)((dataOffset >> 16) & 0xFF);
 8018bac:	2700      	movs	r7, #0
	header[4] = (uint8_t)((fileSize >> 16) & 0xFF);
 8018bae:	f88d c00c 	strb.w	ip, [sp, #12]
	header[38] = (uint8_t)((2835 & 0XFF));
 8018bb2:	f640 3c13 	movw	ip, #2835	; 0xb13
	header[5] = (uint8_t)((fileSize >> 24) & 0xFF);
 8018bb6:	f88d 300d 	strb.w	r3, [sp, #13]
	res = f_write(fp, header, 14, &bytesWritten);
 8018bba:	ab01      	add	r3, sp, #4
	header[36] = (uint8_t)((imageSize >> 16) & 0xFF);
 8018bbc:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
	res = f_write(fp, header, 14, &bytesWritten);
 8018bc0:	4630      	mov	r0, r6
	header[21] = (uint8_t)((width >> 24) & 0xFF);
 8018bc2:	f88d 201d 	strb.w	r2, [sp, #29]
	res = f_write(fp, header, 14, &bytesWritten);
 8018bc6:	220e      	movs	r2, #14
	header[37] = (uint8_t)((imageSize >> 24) & 0xFF);
 8018bc8:	f88d 402d 	strb.w	r4, [sp, #45]	; 0x2d
	header[20] = (uint8_t)((width >> 16) & 0xFF);
 8018bcc:	f88d b01c 	strb.w	fp, [sp, #28]
	header[24] = (uint8_t)((height >> 16) & 0xFF);
 8018bd0:	f88d 9020 	strb.w	r9, [sp, #32]
	header[25] = (uint8_t)((height >> 24) & 0xFF);
 8018bd4:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
	header[0] = 'B';
 8018bd8:	f8ad e008 	strh.w	lr, [sp, #8]
	header[12] = (uint8_t)((dataOffset >> 16) & 0xFF);
 8018bdc:	f8ad 7014 	strh.w	r7, [sp, #20]
	header[29] = (uint8_t)((bitsPP >> 8) & 0xFF);
 8018be0:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
	header[48] = (uint8_t)((paletteColorUsed >> 16) & 0xFF);
 8018be4:	f8ad 7038 	strh.w	r7, [sp, #56]	; 0x38
	header[14] = 40;
 8018be8:	f88d 8016 	strb.w	r8, [sp, #22]
	header[26] = 1;
 8018bec:	f88d a022 	strb.w	sl, [sp, #34]	; 0x22
	header[38] = (uint8_t)((2835 & 0XFF));
 8018bf0:	f8cd c02e 	str.w	ip, [sp, #46]	; 0x2e
 8018bf4:	f8cd c032 	str.w	ip, [sp, #50]	; 0x32
	res = f_write(fp, header, 14, &bytesWritten);
 8018bf8:	f7fe fbf4 	bl	80173e4 <f_write>
	if (res != FR_OK || bytesWritten != 14)
 8018bfc:	b980      	cbnz	r0, 8018c20 <writeBmpHeader+0xe0>
 8018bfe:	9b01      	ldr	r3, [sp, #4]
 8018c00:	2b0e      	cmp	r3, #14
 8018c02:	d10d      	bne.n	8018c20 <writeBmpHeader+0xe0>
		return stm32ipl_err_WritingFile;

	res = f_write(fp, header + 14, 40, &bytesWritten);
 8018c04:	ab01      	add	r3, sp, #4
 8018c06:	4642      	mov	r2, r8
 8018c08:	4630      	mov	r0, r6
 8018c0a:	f10d 0116 	add.w	r1, sp, #22
 8018c0e:	f7fe fbe9 	bl	80173e4 <f_write>
	if (res != FR_OK || bytesWritten != 40)
 8018c12:	b928      	cbnz	r0, 8018c20 <writeBmpHeader+0xe0>
 8018c14:	9b01      	ldr	r3, [sp, #4]
 8018c16:	4543      	cmp	r3, r8
 8018c18:	d102      	bne.n	8018c20 <writeBmpHeader+0xe0>
		return stm32ipl_err_WritingFile;

	return stm32ipl_err_Ok;
}
 8018c1a:	b011      	add	sp, #68	; 0x44
 8018c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return stm32ipl_err_WritingFile;
 8018c20:	f06f 0008 	mvn.w	r0, #8
 8018c24:	e7f9      	b.n	8018c1a <writeBmpHeader+0xda>
 8018c26:	bf00      	nop

08018c28 <saveBmp>:
 * img		Image to be saved.
 * filename	Name of the output file.
 * return	stm32ipl_err_Ok on success, error otherwise.
 */
static stm32ipl_err_t saveBmp(const image_t *img, const char *filename)
{
 8018c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c2c:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
 8018c30:	4605      	mov	r5, r0
	UINT bytesWritten;

	width = img->w;
	height = img->h;

	if (f_open(&fp, (const TCHAR*)filename, FA_WRITE | FA_CREATE_ALWAYS) != FR_OK)
 8018c32:	220a      	movs	r2, #10
 8018c34:	a808      	add	r0, sp, #32
	height = img->h;
 8018c36:	e9d5 6900 	ldrd	r6, r9, [r5]
	if (f_open(&fp, (const TCHAR*)filename, FA_WRITE | FA_CREATE_ALWAYS) != FR_OK)
 8018c3a:	f7fe f81d 	bl	8016c78 <f_open>
 8018c3e:	2800      	cmp	r0, #0
 8018c40:	f040 81a7 	bne.w	8018f92 <saveBmp+0x36a>
		return stm32ipl_err_OpeningFile;

	switch (img->bpp) {
 8018c44:	68ab      	ldr	r3, [r5, #8]
 8018c46:	2b04      	cmp	r3, #4
 8018c48:	f200 815f 	bhi.w	8018f0a <saveBmp+0x2e2>
 8018c4c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8018c50:	00b40048 	.word	0x00b40048
 8018c54:	015d00eb 	.word	0x015d00eb
 8018c58:	0005      	.short	0x0005

			break;
		}

		case IMAGE_BPP_RGB888: {
			uint32_t dataLen = width * 3;
 8018c5a:	eb06 0846 	add.w	r8, r6, r6, lsl #1
			lineSize = (((width * 24) + 31) / 32) * 4;
			padding = lineSize - dataLen;

			/* Header. */
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 14 + 40, lineSize, 24, 0, 0)) {
 8018c5e:	2300      	movs	r3, #0
 8018c60:	2218      	movs	r2, #24
 8018c62:	4631      	mov	r1, r6
			lineSize = (((width * 24) + 31) / 32) * 4;
 8018c64:	ea4f 07c8 	mov.w	r7, r8, lsl #3
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 14 + 40, lineSize, 24, 0, 0)) {
 8018c68:	a808      	add	r0, sp, #32
 8018c6a:	9201      	str	r2, [sp, #4]
 8018c6c:	464a      	mov	r2, r9
			lineSize = (((width * 24) + 31) / 32) * 4;
 8018c6e:	371f      	adds	r7, #31
 8018c70:	097f      	lsrs	r7, r7, #5
 8018c72:	00bc      	lsls	r4, r7, #2
			padding = lineSize - dataLen;
 8018c74:	ebc8 0787 	rsb	r7, r8, r7, lsl #2
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 14 + 40, lineSize, 24, 0, 0)) {
 8018c78:	9400      	str	r4, [sp, #0]
 8018c7a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8018c7e:	2336      	movs	r3, #54	; 0x36
 8018c80:	f7ff ff5e 	bl	8018b40 <writeBmpHeader>
 8018c84:	bb18      	cbnz	r0, 8018cce <saveBmp+0xa6>
				f_close(&fp);
				return stm32ipl_err_WritingFile;
			}

			for (int32_t i = height - 1; i >= 0; i--) {
 8018c86:	f1b9 0601 	subs.w	r6, r9, #1
 8018c8a:	f100 8090 	bmi.w	8018dae <saveBmp+0x186>
 8018c8e:	fb08 f906 	mul.w	r9, r8, r6
 8018c92:	f10d 0a18 	add.w	sl, sp, #24
				uint8_t *data = img->data + i * dataLen;
 8018c96:	68e9      	ldr	r1, [r5, #12]

				/* Image data. */
				res = f_write(&fp, data, dataLen, &bytesWritten);
 8018c98:	4653      	mov	r3, sl
 8018c9a:	4642      	mov	r2, r8
 8018c9c:	a808      	add	r0, sp, #32
 8018c9e:	4449      	add	r1, r9
 8018ca0:	f7fe fba0 	bl	80173e4 <f_write>
				if (res != FR_OK || bytesWritten != dataLen) {
 8018ca4:	b998      	cbnz	r0, 8018cce <saveBmp+0xa6>
 8018ca6:	f8da 3000 	ldr.w	r3, [sl]
 8018caa:	4543      	cmp	r3, r8
 8018cac:	d10f      	bne.n	8018cce <saveBmp+0xa6>
					f_close(&fp);
					return stm32ipl_err_WritingFile;
				}

				/* Padding. */
				for (uint32_t j = 0; j < padding; j++) {
 8018cae:	2f00      	cmp	r7, #0
 8018cb0:	f000 8134 	beq.w	8018f1c <saveBmp+0x2f4>
 8018cb4:	4604      	mov	r4, r0
 8018cb6:	e002      	b.n	8018cbe <saveBmp+0x96>
 8018cb8:	42a7      	cmp	r7, r4
 8018cba:	f000 812f 	beq.w	8018f1c <saveBmp+0x2f4>
					if (1 != f_putc(0, &fp)) {
 8018cbe:	a908      	add	r1, sp, #32
 8018cc0:	2000      	movs	r0, #0
 8018cc2:	f7ff fa45 	bl	8018150 <f_putc>
 8018cc6:	2801      	cmp	r0, #1
				for (uint32_t j = 0; j < padding; j++) {
 8018cc8:	f104 0401 	add.w	r4, r4, #1
					if (1 != f_putc(0, &fp)) {
 8018ccc:	d0f4      	beq.n	8018cb8 <saveBmp+0x90>
				f_close(&fp);
 8018cce:	a808      	add	r0, sp, #32
 8018cd0:	f7fe fce8 	bl	80176a4 <f_close>
				return stm32ipl_err_WritingFile;
 8018cd4:	f06f 0008 	mvn.w	r0, #8
	};

	f_close(&fp);

	return stm32ipl_err_Ok;
}
 8018cd8:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
 8018cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			lineSize = (((width) + 31) / 32) * 4;
 8018ce0:	f106 081f 	add.w	r8, r6, #31
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 54 + 8, lineSize, 1, 0, 2)) {
 8018ce4:	2202      	movs	r2, #2
			uint32_t palette = 0;
 8018ce6:	2400      	movs	r4, #0
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 54 + 8, lineSize, 1, 0, 2)) {
 8018ce8:	2301      	movs	r3, #1
			lineSize = (((width) + 31) / 32) * 4;
 8018cea:	ea4f 1858 	mov.w	r8, r8, lsr #5
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 54 + 8, lineSize, 1, 0, 2)) {
 8018cee:	9203      	str	r2, [sp, #12]
 8018cf0:	9301      	str	r3, [sp, #4]
 8018cf2:	4631      	mov	r1, r6
			lineSize = (((width) + 31) / 32) * 4;
 8018cf4:	fa08 f802 	lsl.w	r8, r8, r2
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 54 + 8, lineSize, 1, 0, 2)) {
 8018cf8:	233e      	movs	r3, #62	; 0x3e
 8018cfa:	464a      	mov	r2, r9
 8018cfc:	a808      	add	r0, sp, #32
 8018cfe:	9402      	str	r4, [sp, #8]
 8018d00:	f8cd 8000 	str.w	r8, [sp]
			uint32_t palette = 0;
 8018d04:	9407      	str	r4, [sp, #28]
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 54 + 8, lineSize, 1, 0, 2)) {
 8018d06:	f7ff ff1b 	bl	8018b40 <writeBmpHeader>
 8018d0a:	2800      	cmp	r0, #0
 8018d0c:	d1df      	bne.n	8018cce <saveBmp+0xa6>
			res = f_write(&fp, &palette, sizeof(palette), &bytesWritten);
 8018d0e:	f10d 0a18 	add.w	sl, sp, #24
 8018d12:	2204      	movs	r2, #4
 8018d14:	a907      	add	r1, sp, #28
 8018d16:	a808      	add	r0, sp, #32
 8018d18:	4653      	mov	r3, sl
 8018d1a:	f7fe fb63 	bl	80173e4 <f_write>
			if (res != FR_OK || bytesWritten != sizeof(palette)) {
 8018d1e:	2800      	cmp	r0, #0
 8018d20:	d1d5      	bne.n	8018cce <saveBmp+0xa6>
 8018d22:	f8da 2000 	ldr.w	r2, [sl]
 8018d26:	2a04      	cmp	r2, #4
 8018d28:	d1d1      	bne.n	8018cce <saveBmp+0xa6>
			palette = 0xFFFFFF;
 8018d2a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
			res = f_write(&fp, &palette, sizeof(palette), &bytesWritten);
 8018d2e:	a907      	add	r1, sp, #28
 8018d30:	4653      	mov	r3, sl
			palette = 0xFFFFFF;
 8018d32:	9007      	str	r0, [sp, #28]
			res = f_write(&fp, &palette, sizeof(palette), &bytesWritten);
 8018d34:	a808      	add	r0, sp, #32
 8018d36:	f7fe fb55 	bl	80173e4 <f_write>
			if (res != FR_OK || bytesWritten != sizeof(palette)) {
 8018d3a:	2800      	cmp	r0, #0
 8018d3c:	d1c7      	bne.n	8018cce <saveBmp+0xa6>
 8018d3e:	f8da 3000 	ldr.w	r3, [sl]
 8018d42:	2b04      	cmp	r3, #4
 8018d44:	d1c3      	bne.n	8018cce <saveBmp+0xa6>
			for (int32_t i = height - 1; i >= 0; i--) {
 8018d46:	f1b9 0601 	subs.w	r6, r9, #1
 8018d4a:	d430      	bmi.n	8018dae <saveBmp+0x186>
 8018d4c:	fb08 f906 	mul.w	r9, r8, r6
				uint8_t *srcData = img->data + offset;
 8018d50:	68ec      	ldr	r4, [r5, #12]
				for (uint32_t j = 0; j < lineSize; j++) {
 8018d52:	f1b8 0f00 	cmp.w	r8, #0
 8018d56:	d025      	beq.n	8018da4 <saveBmp+0x17c>
 8018d58:	eb04 0708 	add.w	r7, r4, r8
 8018d5c:	444c      	add	r4, r9
 8018d5e:	444f      	add	r7, r9
					uint8_t dstData = reverse8(*(srcData + j));
 8018d60:	f814 2b01 	ldrb.w	r2, [r4], #1
	int size = sizeof(val) * CHAR_BIT - 1;
 8018d64:	f04f 0c07 	mov.w	ip, #7
	for (val >>= 1; val; val >>= 1) {
 8018d68:	0853      	lsrs	r3, r2, #1
 8018d6a:	d008      	beq.n	8018d7e <saveBmp+0x156>
		rev |= val & 1;
 8018d6c:	f003 0101 	and.w	r1, r3, #1
	for (val >>= 1; val; val >>= 1) {
 8018d70:	085b      	lsrs	r3, r3, #1
		size--;
 8018d72:	f10c 3cff 	add.w	ip, ip, #4294967295
		rev |= val & 1;
 8018d76:	ea41 0242 	orr.w	r2, r1, r2, lsl #1
 8018d7a:	b2d2      	uxtb	r2, r2
	for (val >>= 1; val; val >>= 1) {
 8018d7c:	d1f6      	bne.n	8018d6c <saveBmp+0x144>
	rev <<= size;
 8018d7e:	fa02 fc0c 	lsl.w	ip, r2, ip
					res = f_write(&fp, &dstData, 1, &bytesWritten);
 8018d82:	4653      	mov	r3, sl
 8018d84:	2201      	movs	r2, #1
 8018d86:	f10d 0117 	add.w	r1, sp, #23
 8018d8a:	a808      	add	r0, sp, #32
	rev <<= size;
 8018d8c:	f88d c017 	strb.w	ip, [sp, #23]
					res = f_write(&fp, &dstData, 1, &bytesWritten);
 8018d90:	f7fe fb28 	bl	80173e4 <f_write>
					if (res != FR_OK || bytesWritten != 1) {
 8018d94:	2800      	cmp	r0, #0
 8018d96:	d19a      	bne.n	8018cce <saveBmp+0xa6>
 8018d98:	f8da 3000 	ldr.w	r3, [sl]
 8018d9c:	2b01      	cmp	r3, #1
 8018d9e:	d196      	bne.n	8018cce <saveBmp+0xa6>
				for (uint32_t j = 0; j < lineSize; j++) {
 8018da0:	42bc      	cmp	r4, r7
 8018da2:	d1dd      	bne.n	8018d60 <saveBmp+0x138>
			for (int32_t i = height - 1; i >= 0; i--) {
 8018da4:	3e01      	subs	r6, #1
 8018da6:	eba9 0908 	sub.w	r9, r9, r8
 8018daa:	1c72      	adds	r2, r6, #1
 8018dac:	d1d0      	bne.n	8018d50 <saveBmp+0x128>
	f_close(&fp);
 8018dae:	a808      	add	r0, sp, #32
 8018db0:	f7fe fc78 	bl	80176a4 <f_close>
	return stm32ipl_err_Ok;
 8018db4:	2000      	movs	r0, #0
 8018db6:	e78f      	b.n	8018cd8 <saveBmp+0xb0>
			lineSize = (((width * 8) + 31) / 32) * 4;
 8018db8:	ea4f 08c6 	mov.w	r8, r6, lsl #3
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 54 + 1024, lineSize, 8, 0, 256)) {
 8018dbc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8018dc0:	2300      	movs	r3, #0
 8018dc2:	2208      	movs	r2, #8
			lineSize = (((width * 8) + 31) / 32) * 4;
 8018dc4:	f108 081f 	add.w	r8, r8, #31
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 54 + 1024, lineSize, 8, 0, 256)) {
 8018dc8:	a808      	add	r0, sp, #32
 8018dca:	9201      	str	r2, [sp, #4]
 8018dcc:	464a      	mov	r2, r9
			lineSize = (((width * 8) + 31) / 32) * 4;
 8018dce:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8018dd2:	ea4f 0888 	mov.w	r8, r8, lsl #2
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 54 + 1024, lineSize, 8, 0, 256)) {
 8018dd6:	e9cd 3102 	strd	r3, r1, [sp, #8]
 8018dda:	f8cd 8000 	str.w	r8, [sp]
 8018dde:	f240 4336 	movw	r3, #1078	; 0x436
 8018de2:	4631      	mov	r1, r6
 8018de4:	f7ff feac 	bl	8018b40 <writeBmpHeader>
 8018de8:	2800      	cmp	r0, #0
 8018dea:	f47f af70 	bne.w	8018cce <saveBmp+0xa6>
			for (uint32_t i = 0; i < 256; i++) {
 8018dee:	4604      	mov	r4, r0
 8018df0:	f10d 0a18 	add.w	sl, sp, #24
 8018df4:	e008      	b.n	8018e08 <saveBmp+0x1e0>
				if (res != FR_OK || bytesWritten != 4) {
 8018df6:	f8da 3000 	ldr.w	r3, [sl]
 8018dfa:	2b04      	cmp	r3, #4
 8018dfc:	f47f af67 	bne.w	8018cce <saveBmp+0xa6>
			for (uint32_t i = 0; i < 256; i++) {
 8018e00:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8018e04:	f000 8098 	beq.w	8018f38 <saveBmp+0x310>
				uint32_t value = (i << 16) | (i << 8) | i;
 8018e08:	0427      	lsls	r7, r4, #16
				res = f_write(&fp, &value, sizeof(value), &bytesWritten);
 8018e0a:	4653      	mov	r3, sl
 8018e0c:	2204      	movs	r2, #4
 8018e0e:	a907      	add	r1, sp, #28
				uint32_t value = (i << 16) | (i << 8) | i;
 8018e10:	ea47 2704 	orr.w	r7, r7, r4, lsl #8
				res = f_write(&fp, &value, sizeof(value), &bytesWritten);
 8018e14:	a808      	add	r0, sp, #32
				uint32_t value = (i << 16) | (i << 8) | i;
 8018e16:	4327      	orrs	r7, r4
			for (uint32_t i = 0; i < 256; i++) {
 8018e18:	3401      	adds	r4, #1
				uint32_t value = (i << 16) | (i << 8) | i;
 8018e1a:	9707      	str	r7, [sp, #28]
				res = f_write(&fp, &value, sizeof(value), &bytesWritten);
 8018e1c:	f7fe fae2 	bl	80173e4 <f_write>
				if (res != FR_OK || bytesWritten != 4) {
 8018e20:	2800      	cmp	r0, #0
 8018e22:	d0e8      	beq.n	8018df6 <saveBmp+0x1ce>
 8018e24:	e753      	b.n	8018cce <saveBmp+0xa6>
			lineSize = (((width * 16) + 31) / 32) * 4;
 8018e26:	0137      	lsls	r7, r6, #4
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 14 + 40 + 12, lineSize, 16, BI_BITFIELDS, 0)) {
 8018e28:	2100      	movs	r1, #0
 8018e2a:	2303      	movs	r3, #3
 8018e2c:	2210      	movs	r2, #16
			lineSize = (((width * 16) + 31) / 32) * 4;
 8018e2e:	371f      	adds	r7, #31
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 14 + 40 + 12, lineSize, 16, BI_BITFIELDS, 0)) {
 8018e30:	a808      	add	r0, sp, #32
 8018e32:	9201      	str	r2, [sp, #4]
 8018e34:	464a      	mov	r2, r9
			lineSize = (((width * 16) + 31) / 32) * 4;
 8018e36:	097f      	lsrs	r7, r7, #5
			uint32_t dataLen = width << 1;
 8018e38:	ea4f 0b46 	mov.w	fp, r6, lsl #1
			lineSize = (((width * 16) + 31) / 32) * 4;
 8018e3c:	00bf      	lsls	r7, r7, #2
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 14 + 40 + 12, lineSize, 16, BI_BITFIELDS, 0)) {
 8018e3e:	e9cd 3102 	strd	r3, r1, [sp, #8]
 8018e42:	9700      	str	r7, [sp, #0]
 8018e44:	2342      	movs	r3, #66	; 0x42
 8018e46:	4631      	mov	r1, r6
			padding = lineSize - dataLen;
 8018e48:	eba7 0746 	sub.w	r7, r7, r6, lsl #1
			if (stm32ipl_err_Ok != writeBmpHeader(&fp, width, height, 14 + 40 + 12, lineSize, 16, BI_BITFIELDS, 0)) {
 8018e4c:	f7ff fe78 	bl	8018b40 <writeBmpHeader>
 8018e50:	2800      	cmp	r0, #0
 8018e52:	f47f af3c 	bne.w	8018cce <saveBmp+0xa6>
			res = f_write(&fp, &mask, 4, &bytesWritten);
 8018e56:	f10d 0a18 	add.w	sl, sp, #24
			mask = 0xF800;
 8018e5a:	f44f 4478 	mov.w	r4, #63488	; 0xf800
			res = f_write(&fp, &mask, 4, &bytesWritten);
 8018e5e:	2204      	movs	r2, #4
 8018e60:	a907      	add	r1, sp, #28
 8018e62:	4653      	mov	r3, sl
 8018e64:	a808      	add	r0, sp, #32
			mask = 0xF800;
 8018e66:	9407      	str	r4, [sp, #28]
			res = f_write(&fp, &mask, 4, &bytesWritten);
 8018e68:	f7fe fabc 	bl	80173e4 <f_write>
			if (res != FR_OK || bytesWritten != 4) {
 8018e6c:	2800      	cmp	r0, #0
 8018e6e:	f47f af2e 	bne.w	8018cce <saveBmp+0xa6>
 8018e72:	f8da 2000 	ldr.w	r2, [sl]
 8018e76:	2a04      	cmp	r2, #4
 8018e78:	f47f af29 	bne.w	8018cce <saveBmp+0xa6>
			mask = 0x7E0;
 8018e7c:	f44f 64fc 	mov.w	r4, #2016	; 0x7e0
			res = f_write(&fp, &mask, 4, &bytesWritten);
 8018e80:	4653      	mov	r3, sl
 8018e82:	a907      	add	r1, sp, #28
 8018e84:	a808      	add	r0, sp, #32
			mask = 0x7E0;
 8018e86:	9407      	str	r4, [sp, #28]
			res = f_write(&fp, &mask, 4, &bytesWritten);
 8018e88:	f7fe faac 	bl	80173e4 <f_write>
			if (res != FR_OK || bytesWritten != 4) {
 8018e8c:	2800      	cmp	r0, #0
 8018e8e:	f47f af1e 	bne.w	8018cce <saveBmp+0xa6>
 8018e92:	f8da 2000 	ldr.w	r2, [sl]
 8018e96:	2a04      	cmp	r2, #4
 8018e98:	f47f af19 	bne.w	8018cce <saveBmp+0xa6>
			mask = 0x1F;
 8018e9c:	201f      	movs	r0, #31
			res = f_write(&fp, &mask, 4, &bytesWritten);
 8018e9e:	a907      	add	r1, sp, #28
 8018ea0:	4653      	mov	r3, sl
			mask = 0x1F;
 8018ea2:	9007      	str	r0, [sp, #28]
			res = f_write(&fp, &mask, 4, &bytesWritten);
 8018ea4:	a808      	add	r0, sp, #32
 8018ea6:	f7fe fa9d 	bl	80173e4 <f_write>
			if (res != FR_OK || bytesWritten != 4) {
 8018eaa:	2800      	cmp	r0, #0
 8018eac:	f47f af0f 	bne.w	8018cce <saveBmp+0xa6>
 8018eb0:	f8da 3000 	ldr.w	r3, [sl]
 8018eb4:	2b04      	cmp	r3, #4
 8018eb6:	f47f af0a 	bne.w	8018cce <saveBmp+0xa6>
			for (int32_t i = height - 1; i >= 0; i--) {
 8018eba:	f1b9 0901 	subs.w	r9, r9, #1
 8018ebe:	f53f af76 	bmi.w	8018dae <saveBmp+0x186>
 8018ec2:	fb06 f809 	mul.w	r8, r6, r9
 8018ec6:	ebc6 73c6 	rsb	r3, r6, r6, lsl #31
 8018eca:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8018ece:	005e      	lsls	r6, r3, #1
				res = f_write(&fp, ((uint16_t*)img->data) + offset, dataLen, &bytesWritten);
 8018ed0:	68e9      	ldr	r1, [r5, #12]
 8018ed2:	4653      	mov	r3, sl
 8018ed4:	465a      	mov	r2, fp
 8018ed6:	a808      	add	r0, sp, #32
 8018ed8:	4441      	add	r1, r8
 8018eda:	f7fe fa83 	bl	80173e4 <f_write>
				if (res != FR_OK || bytesWritten != dataLen) {
 8018ede:	2800      	cmp	r0, #0
 8018ee0:	f47f aef5 	bne.w	8018cce <saveBmp+0xa6>
 8018ee4:	f8da 3000 	ldr.w	r3, [sl]
 8018ee8:	455b      	cmp	r3, fp
 8018eea:	f47f aef0 	bne.w	8018cce <saveBmp+0xa6>
				for (uint32_t j = 0; j < padding; j++) {
 8018eee:	b1e7      	cbz	r7, 8018f2a <saveBmp+0x302>
 8018ef0:	4604      	mov	r4, r0
 8018ef2:	e001      	b.n	8018ef8 <saveBmp+0x2d0>
 8018ef4:	42a7      	cmp	r7, r4
 8018ef6:	d018      	beq.n	8018f2a <saveBmp+0x302>
					if (1 != f_putc(0, &fp)) {
 8018ef8:	a908      	add	r1, sp, #32
 8018efa:	2000      	movs	r0, #0
 8018efc:	f7ff f928 	bl	8018150 <f_putc>
 8018f00:	2801      	cmp	r0, #1
				for (uint32_t j = 0; j < padding; j++) {
 8018f02:	f104 0401 	add.w	r4, r4, #1
					if (1 != f_putc(0, &fp)) {
 8018f06:	d0f5      	beq.n	8018ef4 <saveBmp+0x2cc>
 8018f08:	e6e1      	b.n	8018cce <saveBmp+0xa6>
			f_close(&fp);
 8018f0a:	a808      	add	r0, sp, #32
 8018f0c:	f7fe fbca 	bl	80176a4 <f_close>
			return stm32ipl_err_InvalidParameter;
 8018f10:	f06f 0001 	mvn.w	r0, #1
}
 8018f14:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
 8018f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			for (int32_t i = height - 1; i >= 0; i--) {
 8018f1c:	3e01      	subs	r6, #1
 8018f1e:	eba9 0908 	sub.w	r9, r9, r8
 8018f22:	1c73      	adds	r3, r6, #1
 8018f24:	f47f aeb7 	bne.w	8018c96 <saveBmp+0x6e>
 8018f28:	e741      	b.n	8018dae <saveBmp+0x186>
			for (int32_t i = height - 1; i >= 0; i--) {
 8018f2a:	f109 39ff 	add.w	r9, r9, #4294967295
 8018f2e:	44b0      	add	r8, r6
 8018f30:	f1b9 3fff 	cmp.w	r9, #4294967295
 8018f34:	d1cc      	bne.n	8018ed0 <saveBmp+0x2a8>
 8018f36:	e73a      	b.n	8018dae <saveBmp+0x186>
			for (int32_t i = height - 1; i >= 0; i--) {
 8018f38:	f1b9 0901 	subs.w	r9, r9, #1
 8018f3c:	f53f af37 	bmi.w	8018dae <saveBmp+0x186>
			padding = lineSize - width;
 8018f40:	eba8 0706 	sub.w	r7, r8, r6
 8018f44:	fb06 f809 	mul.w	r8, r6, r9
				res = f_write(&fp, img->data + offset, width, &bytesWritten);
 8018f48:	68e9      	ldr	r1, [r5, #12]
 8018f4a:	4653      	mov	r3, sl
 8018f4c:	4632      	mov	r2, r6
 8018f4e:	a808      	add	r0, sp, #32
 8018f50:	4441      	add	r1, r8
 8018f52:	f7fe fa47 	bl	80173e4 <f_write>
				if (res != FR_OK || bytesWritten != width) {
 8018f56:	2800      	cmp	r0, #0
 8018f58:	f47f aeb9 	bne.w	8018cce <saveBmp+0xa6>
 8018f5c:	f8da 3000 	ldr.w	r3, [sl]
 8018f60:	42b3      	cmp	r3, r6
 8018f62:	f47f aeb4 	bne.w	8018cce <saveBmp+0xa6>
				for (uint32_t j = 0; j < padding; j++) {
 8018f66:	b167      	cbz	r7, 8018f82 <saveBmp+0x35a>
 8018f68:	4604      	mov	r4, r0
 8018f6a:	e001      	b.n	8018f70 <saveBmp+0x348>
 8018f6c:	42a7      	cmp	r7, r4
 8018f6e:	d008      	beq.n	8018f82 <saveBmp+0x35a>
					if (1 != f_putc(0, &fp)) {
 8018f70:	a908      	add	r1, sp, #32
 8018f72:	2000      	movs	r0, #0
 8018f74:	f7ff f8ec 	bl	8018150 <f_putc>
 8018f78:	2801      	cmp	r0, #1
				for (uint32_t j = 0; j < padding; j++) {
 8018f7a:	f104 0401 	add.w	r4, r4, #1
					if (1 != f_putc(0, &fp)) {
 8018f7e:	d0f5      	beq.n	8018f6c <saveBmp+0x344>
 8018f80:	e6a5      	b.n	8018cce <saveBmp+0xa6>
			for (int32_t i = height - 1; i >= 0; i--) {
 8018f82:	f109 39ff 	add.w	r9, r9, #4294967295
 8018f86:	eba8 0806 	sub.w	r8, r8, r6
 8018f8a:	f1b9 3fff 	cmp.w	r9, #4294967295
 8018f8e:	d1db      	bne.n	8018f48 <saveBmp+0x320>
 8018f90:	e70d      	b.n	8018dae <saveBmp+0x186>
		return stm32ipl_err_OpeningFile;
 8018f92:	f06f 0005 	mvn.w	r0, #5
 8018f96:	e69f      	b.n	8018cd8 <saveBmp+0xb0>

08018f98 <savePnm>:
 * filename	Name of the output file.
 * format	Format of the PNM file (6 if the input image is RGB565 or RGB888, 5 if it's Grayscale).
 * return	stm32ipl_err_Ok on success, error otherwise.
 */
static stm32ipl_err_t savePnm(const image_t *img, const char *filename, uint8_t format)
{
 8018f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f9c:	4605      	mov	r5, r0
 8018f9e:	f5ad 7d21 	sub.w	sp, sp, #644	; 0x284
 8018fa2:	460e      	mov	r6, r1
 8018fa4:	4613      	mov	r3, r2
	int32_t height;
	char text[64];
	UINT bytesWritten;
	uint32_t offset;

	width = img->w;
 8018fa6:	682f      	ldr	r7, [r5, #0]
	height = img->h;

	/* Write header. */
	size = snprintf(text, sizeof(text), "P%d\n# Created by STM32IPL\n%ld %ld\n255\n", format, width, height);
 8018fa8:	2140      	movs	r1, #64	; 0x40
	height = img->h;
 8018faa:	f8d5 8004 	ldr.w	r8, [r5, #4]
	size = snprintf(text, sizeof(text), "P%d\n# Created by STM32IPL\n%ld %ld\n255\n", format, width, height);
 8018fae:	a804      	add	r0, sp, #16
 8018fb0:	4a56      	ldr	r2, [pc, #344]	; (801910c <savePnm+0x174>)
 8018fb2:	e9cd 7800 	strd	r7, r8, [sp]
 8018fb6:	f00c fc45 	bl	8025844 <sniprintf>

	if (f_open(&fp, (const TCHAR*)filename, FA_WRITE | FA_CREATE_ALWAYS) != FR_OK)
 8018fba:	4631      	mov	r1, r6
	size = snprintf(text, sizeof(text), "P%d\n# Created by STM32IPL\n%ld %ld\n255\n", format, width, height);
 8018fbc:	4604      	mov	r4, r0
	if (f_open(&fp, (const TCHAR*)filename, FA_WRITE | FA_CREATE_ALWAYS) != FR_OK)
 8018fbe:	220a      	movs	r2, #10
 8018fc0:	a814      	add	r0, sp, #80	; 0x50
 8018fc2:	f7fd fe59 	bl	8016c78 <f_open>
 8018fc6:	2800      	cmp	r0, #0
 8018fc8:	f040 809c 	bne.w	8019104 <savePnm+0x16c>
		return stm32ipl_err_OpeningFile;

	res = f_write(&fp, text, size, &bytesWritten);
 8018fcc:	a904      	add	r1, sp, #16
 8018fce:	4622      	mov	r2, r4
 8018fd0:	a814      	add	r0, sp, #80	; 0x50
 8018fd2:	ab03      	add	r3, sp, #12
 8018fd4:	f7fe fa06 	bl	80173e4 <f_write>
	if (res != FR_OK || bytesWritten != size) {
 8018fd8:	2800      	cmp	r0, #0
 8018fda:	d136      	bne.n	801904a <savePnm+0xb2>
 8018fdc:	9b03      	ldr	r3, [sp, #12]
 8018fde:	42a3      	cmp	r3, r4
 8018fe0:	d133      	bne.n	801904a <savePnm+0xb2>
		f_close(&fp);
		return stm32ipl_err_WritingFile;
	}

	switch (img->bpp) {
 8018fe2:	68ab      	ldr	r3, [r5, #8]
 8018fe4:	2b02      	cmp	r3, #2
 8018fe6:	d04e      	beq.n	8019086 <savePnm+0xee>
 8018fe8:	2b04      	cmp	r3, #4
 8018fea:	d00a      	beq.n	8019002 <savePnm+0x6a>
 8018fec:	2b01      	cmp	r3, #1
 8018fee:	d035      	beq.n	801905c <savePnm+0xc4>

			break;
		}

		default: {
			f_close(&fp);
 8018ff0:	a814      	add	r0, sp, #80	; 0x50
 8018ff2:	f7fe fb57 	bl	80176a4 <f_close>
			return stm32ipl_err_UnsupportedFormat;
 8018ff6:	f06f 0004 	mvn.w	r0, #4
	}

	f_close(&fp);

	return stm32ipl_err_Ok;
}
 8018ffa:	f50d 7d21 	add.w	sp, sp, #644	; 0x284
 8018ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			size = width * height;
 8019002:	fb08 f707 	mul.w	r7, r8, r7
			uint8_t *data = img->data;
 8019006:	68ec      	ldr	r4, [r5, #12]
			for (uint32_t i = 0; i < size; i++) {
 8019008:	2f00      	cmp	r7, #0
 801900a:	d034      	beq.n	8019076 <savePnm+0xde>
 801900c:	3403      	adds	r4, #3
 801900e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8019012:	4427      	add	r7, r4
 8019014:	e004      	b.n	8019020 <savePnm+0x88>
				if (res != FR_OK || bytesWritten != 3) {
 8019016:	9b03      	ldr	r3, [sp, #12]
 8019018:	2b03      	cmp	r3, #3
 801901a:	d116      	bne.n	801904a <savePnm+0xb2>
			for (uint32_t i = 0; i < size; i++) {
 801901c:	42a7      	cmp	r7, r4
 801901e:	d02a      	beq.n	8019076 <savePnm+0xde>
				rgb888.r = *data++;
 8019020:	f814 0c03 	ldrb.w	r0, [r4, #-3]
				res = f_write(&fp, &rgb888, 3, &bytesWritten);
 8019024:	2203      	movs	r2, #3
 8019026:	ab03      	add	r3, sp, #12
 8019028:	a902      	add	r1, sp, #8
				rgb888.r = *data++;
 801902a:	f88d 000a 	strb.w	r0, [sp, #10]
				res = f_write(&fp, &rgb888, 3, &bytesWritten);
 801902e:	a814      	add	r0, sp, #80	; 0x50
				rgb888.g = *data++;
 8019030:	f814 5c02 	ldrb.w	r5, [r4, #-2]
 8019034:	f88d 5009 	strb.w	r5, [sp, #9]
				rgb888.b = *data++;
 8019038:	f814 5c01 	ldrb.w	r5, [r4, #-1]
 801903c:	4414      	add	r4, r2
 801903e:	f88d 5008 	strb.w	r5, [sp, #8]
				res = f_write(&fp, &rgb888, 3, &bytesWritten);
 8019042:	f7fe f9cf 	bl	80173e4 <f_write>
				if (res != FR_OK || bytesWritten != 3) {
 8019046:	2800      	cmp	r0, #0
 8019048:	d0e5      	beq.n	8019016 <savePnm+0x7e>
					f_close(&fp);
 801904a:	a814      	add	r0, sp, #80	; 0x50
 801904c:	f7fe fb2a 	bl	80176a4 <f_close>
					return stm32ipl_err_WritingFile;
 8019050:	f06f 0008 	mvn.w	r0, #8
}
 8019054:	f50d 7d21 	add.w	sp, sp, #644	; 0x284
 8019058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			size = width * height;
 801905c:	fb08 f707 	mul.w	r7, r8, r7
			res = f_write(&fp, img->data, size, &bytesWritten);
 8019060:	68e9      	ldr	r1, [r5, #12]
 8019062:	ab03      	add	r3, sp, #12
 8019064:	a814      	add	r0, sp, #80	; 0x50
 8019066:	463a      	mov	r2, r7
 8019068:	f7fe f9bc 	bl	80173e4 <f_write>
			if (res != FR_OK || bytesWritten != size) {
 801906c:	2800      	cmp	r0, #0
 801906e:	d1ec      	bne.n	801904a <savePnm+0xb2>
 8019070:	9b03      	ldr	r3, [sp, #12]
 8019072:	42bb      	cmp	r3, r7
 8019074:	d1e9      	bne.n	801904a <savePnm+0xb2>
	f_close(&fp);
 8019076:	a814      	add	r0, sp, #80	; 0x50
 8019078:	f7fe fb14 	bl	80176a4 <f_close>
	return stm32ipl_err_Ok;
 801907c:	2000      	movs	r0, #0
}
 801907e:	f50d 7d21 	add.w	sp, sp, #644	; 0x284
 8019082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			for (uint32_t i = 0; i < height; i++) {
 8019086:	f1b8 0f00 	cmp.w	r8, #0
 801908a:	d0f4      	beq.n	8019076 <savePnm+0xde>
				offset = i * width;
 801908c:	4681      	mov	r9, r0
			for (uint32_t i = 0; i < height; i++) {
 801908e:	4682      	mov	sl, r0
				for (uint32_t j = 0; j < width; j++) {
 8019090:	b397      	cbz	r7, 80190f8 <savePnm+0x160>
 8019092:	ea4f 0449 	mov.w	r4, r9, lsl #1
 8019096:	2600      	movs	r6, #0
 8019098:	e004      	b.n	80190a4 <savePnm+0x10c>
					if (res != FR_OK || bytesWritten != 3) {
 801909a:	9b03      	ldr	r3, [sp, #12]
 801909c:	2b03      	cmp	r3, #3
 801909e:	d1d4      	bne.n	801904a <savePnm+0xb2>
				for (uint32_t j = 0; j < width; j++) {
 80190a0:	42b7      	cmp	r7, r6
 80190a2:	d029      	beq.n	80190f8 <savePnm+0x160>
					uint16_t rgb565 = *(((uint16_t*)img->data) + offset + j);
 80190a4:	68e9      	ldr	r1, [r5, #12]
					res = f_write(&fp, &rgb888, 3, &bytesWritten);
 80190a6:	2203      	movs	r2, #3
 80190a8:	ab03      	add	r3, sp, #12
				for (uint32_t j = 0; j < width; j++) {
 80190aa:	3601      	adds	r6, #1
					uint16_t rgb565 = *(((uint16_t*)img->data) + offset + j);
 80190ac:	5b08      	ldrh	r0, [r1, r4]
					rgb888.r = COLOR_RGB565_TO_B8(rgb565);
 80190ae:	3402      	adds	r4, #2
					rgb888.g = COLOR_RGB565_TO_G8(rgb565);
 80190b0:	fa20 f102 	lsr.w	r1, r0, r2
					rgb888.b = COLOR_RGB565_TO_R8(rgb565);
 80190b4:	ea4f 2e10 	mov.w	lr, r0, lsr #8
					rgb888.r = COLOR_RGB565_TO_B8(rgb565);
 80190b8:	f3c0 0c82 	ubfx	ip, r0, #2, #3
					rgb888.g = COLOR_RGB565_TO_G8(rgb565);
 80190bc:	f001 0bfc 	and.w	fp, r1, #252	; 0xfc
 80190c0:	f3c1 1181 	ubfx	r1, r1, #6, #2
					rgb888.r = COLOR_RGB565_TO_B8(rgb565);
 80190c4:	ea4c 00c0 	orr.w	r0, ip, r0, lsl #3
					rgb888.b = COLOR_RGB565_TO_R8(rgb565);
 80190c8:	f00e 0cf8 	and.w	ip, lr, #248	; 0xf8
					rgb888.g = COLOR_RGB565_TO_G8(rgb565);
 80190cc:	ea4b 0b01 	orr.w	fp, fp, r1
					res = f_write(&fp, &rgb888, 3, &bytesWritten);
 80190d0:	a902      	add	r1, sp, #8
					rgb888.b = COLOR_RGB565_TO_R8(rgb565);
 80190d2:	ea4c 1c5e 	orr.w	ip, ip, lr, lsr #5
					rgb888.r = COLOR_RGB565_TO_B8(rgb565);
 80190d6:	f88d 000a 	strb.w	r0, [sp, #10]
					res = f_write(&fp, &rgb888, 3, &bytesWritten);
 80190da:	a814      	add	r0, sp, #80	; 0x50
					rgb888.g = COLOR_RGB565_TO_G8(rgb565);
 80190dc:	f88d b009 	strb.w	fp, [sp, #9]
					rgb888.b = COLOR_RGB565_TO_R8(rgb565);
 80190e0:	f88d c008 	strb.w	ip, [sp, #8]
					res = f_write(&fp, &rgb888, 3, &bytesWritten);
 80190e4:	f7fe f97e 	bl	80173e4 <f_write>
					if (res != FR_OK || bytesWritten != 3) {
 80190e8:	2800      	cmp	r0, #0
 80190ea:	d0d6      	beq.n	801909a <savePnm+0x102>
					f_close(&fp);
 80190ec:	a814      	add	r0, sp, #80	; 0x50
 80190ee:	f7fe fad9 	bl	80176a4 <f_close>
					return stm32ipl_err_WritingFile;
 80190f2:	f06f 0008 	mvn.w	r0, #8
 80190f6:	e7ad      	b.n	8019054 <savePnm+0xbc>
			for (uint32_t i = 0; i < height; i++) {
 80190f8:	f10a 0a01 	add.w	sl, sl, #1
 80190fc:	44b9      	add	r9, r7
 80190fe:	45c2      	cmp	sl, r8
 8019100:	d1c6      	bne.n	8019090 <savePnm+0xf8>
 8019102:	e7b8      	b.n	8019076 <savePnm+0xde>
		return stm32ipl_err_OpeningFile;
 8019104:	f06f 0005 	mvn.w	r0, #5
 8019108:	e777      	b.n	8018ffa <savePnm+0x62>
 801910a:	bf00      	nop
 801910c:	08097f08 	.word	0x08097f08

08019110 <STM32Ipl_ReadImage>:
{
 8019110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const uint8_t p3[2] = { 0x50, 0x33 }; /* P3 */
 8019114:	f243 3250 	movw	r2, #13136	; 0x3350
	uint32_t bytesRead = 0;
 8019118:	2600      	movs	r6, #0
	const uint8_t bmp[2] = { 0x42, 0x4D }; /* BM */
 801911a:	f644 5542 	movw	r5, #19778	; 0x4d42
	const uint8_t p2[2] = { 0x50, 0x32 }; /* P2 */
 801911e:	f243 2450 	movw	r4, #12880	; 0x3250
	if (!img || !filename)
 8019122:	4607      	mov	r7, r0
{
 8019124:	ed2d 8b02 	vpush	{d8}
 8019128:	f2ad 6ddc 	subw	sp, sp, #1756	; 0x6dc
	if (!img || !filename)
 801912c:	9003      	str	r0, [sp, #12]
	const uint8_t p5[2] = { 0x50, 0x35 }; /* P5 */
 801912e:	f243 5050 	movw	r0, #13648	; 0x3550
	const uint8_t p3[2] = { 0x50, 0x33 }; /* P3 */
 8019132:	f8ad 205c 	strh.w	r2, [sp, #92]	; 0x5c
	const uint8_t p6[2] = { 0x50, 0x36 }; /* P6 */
 8019136:	f243 6250 	movw	r2, #13904	; 0x3650
	uint32_t bytesRead = 0;
 801913a:	961a      	str	r6, [sp, #104]	; 0x68
	const uint8_t bmp[2] = { 0x42, 0x4D }; /* BM */
 801913c:	f8ad 5054 	strh.w	r5, [sp, #84]	; 0x54
	const uint8_t p2[2] = { 0x50, 0x32 }; /* P2 */
 8019140:	f8ad 4058 	strh.w	r4, [sp, #88]	; 0x58
	const uint8_t p5[2] = { 0x50, 0x35 }; /* P5 */
 8019144:	f8ad 0060 	strh.w	r0, [sp, #96]	; 0x60
	const uint8_t p6[2] = { 0x50, 0x36 }; /* P6 */
 8019148:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
	if (!img || !filename)
 801914c:	2f00      	cmp	r7, #0
 801914e:	f000 85a0 	beq.w	8019c92 <STM32Ipl_ReadImage+0xb82>
 8019152:	2900      	cmp	r1, #0
 8019154:	f000 859d 	beq.w	8019c92 <STM32Ipl_ReadImage+0xb82>
	if (f_open(&fp, (const TCHAR*)filename, FA_OPEN_EXISTING | FA_READ) != FR_OK)
 8019158:	2201      	movs	r2, #1
 801915a:	a82a      	add	r0, sp, #168	; 0xa8
 801915c:	f7fd fd8c 	bl	8016c78 <f_open>
 8019160:	2800      	cmp	r0, #0
 8019162:	f040 86a1 	bne.w	8019ea8 <STM32Ipl_ReadImage+0xd98>
	if ((f_read(&fp, magic, 2, (UINT*)&bytesRead) != FR_OK) || bytesRead != 2) {
 8019166:	ab1a      	add	r3, sp, #104	; 0x68
 8019168:	2202      	movs	r2, #2
 801916a:	a82a      	add	r0, sp, #168	; 0xa8
 801916c:	a914      	add	r1, sp, #80	; 0x50
 801916e:	f7fe f803 	bl	8017178 <f_read>
 8019172:	4604      	mov	r4, r0
 8019174:	2800      	cmp	r0, #0
 8019176:	f040 8561 	bne.w	8019c3c <STM32Ipl_ReadImage+0xb2c>
 801917a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801917c:	2b02      	cmp	r3, #2
 801917e:	f040 855d 	bne.w	8019c3c <STM32Ipl_ReadImage+0xb2c>
	if (memcmp(bmp, magic, 2) == 0)
 8019182:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8019186:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801918a:	4293      	cmp	r3, r2
 801918c:	d060      	beq.n	8019250 <STM32Ipl_ReadImage+0x140>
		if ((memcmp(p2, magic, 1) == 0)
 801918e:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8019192:	2a50      	cmp	r2, #80	; 0x50
 8019194:	d00b      	beq.n	80191ae <STM32Ipl_ReadImage+0x9e>
				res = stm32ipl_err_UnsupportedFormat;
 8019196:	f06f 0704 	mvn.w	r7, #4
	f_close(&fp);
 801919a:	a82a      	add	r0, sp, #168	; 0xa8
 801919c:	f7fe fa82 	bl	80176a4 <f_close>
}
 80191a0:	4638      	mov	r0, r7
 80191a2:	f20d 6ddc 	addw	sp, sp, #1756	; 0x6dc
 80191a6:	ecbd 8b02 	vpop	{d8}
 80191aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				&& ((memcmp(p2, magic, 2) == 0) || (memcmp(p3, magic, 2) == 0) || (memcmp(p5, magic, 2) == 0)
 80191ae:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
 80191b2:	429a      	cmp	r2, r3
 80191b4:	d008      	beq.n	80191c8 <STM32Ipl_ReadImage+0xb8>
 80191b6:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 80191ba:	429a      	cmp	r2, r3
 80191bc:	d004      	beq.n	80191c8 <STM32Ipl_ReadImage+0xb8>
 80191be:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
 80191c2:	429a      	cmp	r2, r3
 80191c4:	f040 847a 	bne.w	8019abc <STM32Ipl_ReadImage+0x9ac>
	STM32Ipl_Init(img, 0, 0, (image_bpp_t)0, 0);
 80191c8:	2100      	movs	r1, #0
 80191ca:	9803      	ldr	r0, [sp, #12]
 80191cc:	460b      	mov	r3, r1
 80191ce:	460a      	mov	r2, r1
 80191d0:	9100      	str	r1, [sp, #0]
 80191d2:	f7ff fc11 	bl	80189f8 <STM32Ipl_Init>
	if (f_lseek(fp, 0) != FR_OK)
 80191d6:	2100      	movs	r1, #0
 80191d8:	a82a      	add	r0, sp, #168	; 0xa8
 80191da:	f7fe faf3 	bl	80177c4 <f_lseek>
 80191de:	2800      	cmp	r0, #0
 80191e0:	f040 81c1 	bne.w	8019566 <STM32Ipl_ReadImage+0x456>
	if ((f_read(fp, sector, 2, (UINT*)&bytesRead) != FR_OK) || bytesRead != 2)
 80191e4:	ac1c      	add	r4, sp, #112	; 0x70
 80191e6:	adb6      	add	r5, sp, #728	; 0x2d8
 80191e8:	2202      	movs	r2, #2
 80191ea:	a82a      	add	r0, sp, #168	; 0xa8
 80191ec:	4623      	mov	r3, r4
 80191ee:	4629      	mov	r1, r5
 80191f0:	f7fd ffc2 	bl	8017178 <f_read>
 80191f4:	4607      	mov	r7, r0
 80191f6:	2800      	cmp	r0, #0
 80191f8:	f040 81b2 	bne.w	8019560 <STM32Ipl_ReadImage+0x450>
 80191fc:	6823      	ldr	r3, [r4, #0]
 80191fe:	2b02      	cmp	r3, #2
 8019200:	f040 81ae 	bne.w	8019560 <STM32Ipl_ReadImage+0x450>
	number_ppm = sector[1];
 8019204:	786b      	ldrb	r3, [r5, #1]
	if ((number_ppm != '2') && (number_ppm != '3') && (number_ppm != '5') && (number_ppm != '6'))
 8019206:	f1a3 0832 	sub.w	r8, r3, #50	; 0x32
 801920a:	fa5f f288 	uxtb.w	r2, r8
 801920e:	2a01      	cmp	r2, #1
 8019210:	d902      	bls.n	8019218 <STM32Ipl_ReadImage+0x108>
 8019212:	3b35      	subs	r3, #53	; 0x35
 8019214:	2b01      	cmp	r3, #1
 8019216:	d8be      	bhi.n	8019196 <STM32Ipl_ReadImage+0x86>
 8019218:	2600      	movs	r6, #0
		if ((f_read(fp, sector, 1, &bytesRead) != FR_OK) || bytesRead != 1)
 801921a:	4623      	mov	r3, r4
 801921c:	2201      	movs	r2, #1
 801921e:	4629      	mov	r1, r5
 8019220:	a82a      	add	r0, sp, #168	; 0xa8
 8019222:	f7fd ffa9 	bl	8017178 <f_read>
 8019226:	2800      	cmp	r0, #0
 8019228:	f040 819a 	bne.w	8019560 <STM32Ipl_ReadImage+0x450>
 801922c:	6823      	ldr	r3, [r4, #0]
 801922e:	2b01      	cmp	r3, #1
 8019230:	f040 8196 	bne.w	8019560 <STM32Ipl_ReadImage+0x450>
		if (mode == EAT_WHITESPACE) {
 8019234:	2f00      	cmp	r7, #0
 8019236:	f040 81d7 	bne.w	80195e8 <STM32Ipl_ReadImage+0x4d8>
			if (sector[0] == '#') {
 801923a:	782a      	ldrb	r2, [r5, #0]
 801923c:	2a23      	cmp	r2, #35	; 0x23
 801923e:	f000 81e1 	beq.w	8019604 <STM32Ipl_ReadImage+0x4f4>
				if (('0' <= sector[0]) && (sector[0] <= '9')) {
 8019242:	3a30      	subs	r2, #48	; 0x30
 8019244:	b2d3      	uxtb	r3, r2
 8019246:	2b09      	cmp	r3, #9
 8019248:	d8e7      	bhi.n	801921a <STM32Ipl_ReadImage+0x10a>
					number = sector[0] - '0';
 801924a:	4616      	mov	r6, r2
					mode = EAT_NUMBER;
 801924c:	2702      	movs	r7, #2
 801924e:	e7e4      	b.n	801921a <STM32Ipl_ReadImage+0x10a>
	STM32Ipl_Init(img, 0, 0, (image_bpp_t)0, 0);
 8019250:	4601      	mov	r1, r0
 8019252:	4603      	mov	r3, r0
 8019254:	4602      	mov	r2, r0
 8019256:	9000      	str	r0, [sp, #0]
 8019258:	9803      	ldr	r0, [sp, #12]
 801925a:	f7ff fbcd 	bl	80189f8 <STM32Ipl_Init>
	if (f_lseek(fp, 0) != FR_OK)
 801925e:	4621      	mov	r1, r4
 8019260:	a82a      	add	r0, sp, #168	; 0xa8
 8019262:	f7fe faaf 	bl	80177c4 <f_lseek>
 8019266:	2800      	cmp	r0, #0
 8019268:	f040 817d 	bne.w	8019566 <STM32Ipl_ReadImage+0x456>
	if ((f_read(fp, header, sizeof(header), (UINT*)&bytesRead) != FR_OK) || bytesRead != sizeof(header))
 801926c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
 8019270:	ac1c      	add	r4, sp, #112	; 0x70
 8019272:	2236      	movs	r2, #54	; 0x36
 8019274:	a82a      	add	r0, sp, #168	; 0xa8
 8019276:	464b      	mov	r3, r9
 8019278:	4621      	mov	r1, r4
 801927a:	f7fd ff7d 	bl	8017178 <f_read>
 801927e:	2800      	cmp	r0, #0
 8019280:	f040 816e 	bne.w	8019560 <STM32Ipl_ReadImage+0x450>
 8019284:	f8d9 3000 	ldr.w	r3, [r9]
 8019288:	2b36      	cmp	r3, #54	; 0x36
 801928a:	f040 8169 	bne.w	8019560 <STM32Ipl_ReadImage+0x450>
	infoHeaderSize = pHeader[14] + (pHeader[15] << 8) + (pHeader[16] << 16) + (pHeader[17] << 24);
 801928e:	7be2      	ldrb	r2, [r4, #15]
 8019290:	7ba3      	ldrb	r3, [r4, #14]
 8019292:	7c20      	ldrb	r0, [r4, #16]
 8019294:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	dataOffset = pHeader[10] + (pHeader[11] << 8) + (pHeader[12] << 16) + (pHeader[13] << 24);
 8019298:	7ae1      	ldrb	r1, [r4, #11]
 801929a:	7aa2      	ldrb	r2, [r4, #10]
	infoHeaderSize = pHeader[14] + (pHeader[15] << 8) + (pHeader[16] << 16) + (pHeader[17] << 24);
 801929c:	eb03 4300 	add.w	r3, r3, r0, lsl #16
 80192a0:	7c60      	ldrb	r0, [r4, #17]
	dataOffset = pHeader[10] + (pHeader[11] << 8) + (pHeader[12] << 16) + (pHeader[13] << 24);
 80192a2:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 80192a6:	7b21      	ldrb	r1, [r4, #12]
	infoHeaderSize = pHeader[14] + (pHeader[15] << 8) + (pHeader[16] << 16) + (pHeader[17] << 24);
 80192a8:	eb03 6300 	add.w	r3, r3, r0, lsl #24
	dataOffset = pHeader[10] + (pHeader[11] << 8) + (pHeader[12] << 16) + (pHeader[13] << 24);
 80192ac:	7b60      	ldrb	r0, [r4, #13]
 80192ae:	eb02 4201 	add.w	r2, r2, r1, lsl #16
	if ((infoHeaderSize != 40) /* BITMAPINFOHEADER */
 80192b2:	2b34      	cmp	r3, #52	; 0x34
 80192b4:	f023 0110 	bic.w	r1, r3, #16
	dataOffset = pHeader[10] + (pHeader[11] << 8) + (pHeader[12] << 16) + (pHeader[13] << 24);
 80192b8:	eb02 6200 	add.w	r2, r2, r0, lsl #24
 80192bc:	9206      	str	r2, [sp, #24]
	if ((infoHeaderSize != 40) /* BITMAPINFOHEADER */
 80192be:	d004      	beq.n	80192ca <STM32Ipl_ReadImage+0x1ba>
 80192c0:	2928      	cmp	r1, #40	; 0x28
 80192c2:	d002      	beq.n	80192ca <STM32Ipl_ReadImage+0x1ba>
	&& (infoHeaderSize != 124)) /* BITMAPV5HEADER */
 80192c4:	296c      	cmp	r1, #108	; 0x6c
 80192c6:	f47f af66 	bne.w	8019196 <STM32Ipl_ReadImage+0x86>
	width = pHeader[18] + (pHeader[19] << 8) + (pHeader[20] << 16) + (pHeader[21] << 24);
 80192ca:	7ce3      	ldrb	r3, [r4, #19]
 80192cc:	f894 b012 	ldrb.w	fp, [r4, #18]
	height = pHeader[22] + (pHeader[23] << 8) + (pHeader[24] << 16) + (pHeader[25] << 24);
 80192d0:	7de0      	ldrb	r0, [r4, #23]
	width = pHeader[18] + (pHeader[19] << 8) + (pHeader[20] << 16) + (pHeader[21] << 24);
 80192d2:	eb0b 2b03 	add.w	fp, fp, r3, lsl #8
	bitCount = pHeader[28] + (pHeader[29] << 8);
 80192d6:	7f61      	ldrb	r1, [r4, #29]
	height = pHeader[22] + (pHeader[23] << 8) + (pHeader[24] << 16) + (pHeader[25] << 24);
 80192d8:	7da2      	ldrb	r2, [r4, #22]
	bitCount = pHeader[28] + (pHeader[29] << 8);
 80192da:	7f23      	ldrb	r3, [r4, #28]
	height = pHeader[22] + (pHeader[23] << 8) + (pHeader[24] << 16) + (pHeader[25] << 24);
 80192dc:	eb02 2200 	add.w	r2, r2, r0, lsl #8
	width = pHeader[18] + (pHeader[19] << 8) + (pHeader[20] << 16) + (pHeader[21] << 24);
 80192e0:	7d20      	ldrb	r0, [r4, #20]
	bitCount = pHeader[28] + (pHeader[29] << 8);
 80192e2:	eb03 2301 	add.w	r3, r3, r1, lsl #8
	height = pHeader[22] + (pHeader[23] << 8) + (pHeader[24] << 16) + (pHeader[25] << 24);
 80192e6:	7e21      	ldrb	r1, [r4, #24]
	width = pHeader[18] + (pHeader[19] << 8) + (pHeader[20] << 16) + (pHeader[21] << 24);
 80192e8:	eb0b 4b00 	add.w	fp, fp, r0, lsl #16
 80192ec:	7d60      	ldrb	r0, [r4, #21]
	height = pHeader[22] + (pHeader[23] << 8) + (pHeader[24] << 16) + (pHeader[25] << 24);
 80192ee:	eb02 4201 	add.w	r2, r2, r1, lsl #16
 80192f2:	7e61      	ldrb	r1, [r4, #25]
	bitCount = pHeader[28] + (pHeader[29] << 8);
 80192f4:	b29b      	uxth	r3, r3
	height = pHeader[22] + (pHeader[23] << 8) + (pHeader[24] << 16) + (pHeader[25] << 24);
 80192f6:	eb02 6201 	add.w	r2, r2, r1, lsl #24
	if ((bitCount != 1) && (bitCount != 4) && (bitCount != 8) && (bitCount != 16) && (bitCount != 24))
 80192fa:	2b18      	cmp	r3, #24
	width = pHeader[18] + (pHeader[19] << 8) + (pHeader[20] << 16) + (pHeader[21] << 24);
 80192fc:	eb0b 6b00 	add.w	fp, fp, r0, lsl #24
	height = pHeader[22] + (pHeader[23] << 8) + (pHeader[24] << 16) + (pHeader[25] << 24);
 8019300:	9204      	str	r2, [sp, #16]
	if ((bitCount != 1) && (bitCount != 4) && (bitCount != 8) && (bitCount != 16) && (bitCount != 24))
 8019302:	f63f af48 	bhi.w	8019196 <STM32Ipl_ReadImage+0x86>
 8019306:	4ac5      	ldr	r2, [pc, #788]	; (801961c <STM32Ipl_ReadImage+0x50c>)
 8019308:	40da      	lsrs	r2, r3
 801930a:	07d2      	lsls	r2, r2, #31
 801930c:	f57f af43 	bpl.w	8019196 <STM32Ipl_ReadImage+0x86>
	compression = pHeader[30] + (pHeader[31] << 8) + (pHeader[32] << 16) + (pHeader[33] << 24);
 8019310:	7fe1      	ldrb	r1, [r4, #31]
 8019312:	7fa2      	ldrb	r2, [r4, #30]
 8019314:	f894 0020 	ldrb.w	r0, [r4, #32]
 8019318:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 801931c:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
 8019320:	eb02 4200 	add.w	r2, r2, r0, lsl #16
	if (compression != BI_RGB && compression != BI_BITFIELDS)
 8019324:	eb12 6201 	adds.w	r2, r2, r1, lsl #24
 8019328:	bf14      	ite	ne
 801932a:	2701      	movne	r7, #1
 801932c:	2700      	moveq	r7, #0
 801932e:	2a03      	cmp	r2, #3
 8019330:	d002      	beq.n	8019338 <STM32Ipl_ReadImage+0x228>
 8019332:	2f00      	cmp	r7, #0
 8019334:	f47f af2f 	bne.w	8019196 <STM32Ipl_ReadImage+0x86>
	colorUsed = pHeader[46] + (pHeader[47] << 8) + (pHeader[48] << 16) + (pHeader[49] << 24);
 8019338:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 801933c:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
 8019340:	f894 5030 	ldrb.w	r5, [r4, #48]	; 0x30
 8019344:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8019348:	f894 0031 	ldrb.w	r0, [r4, #49]	; 0x31
 801934c:	eb01 4405 	add.w	r4, r1, r5, lsl #16
	if (colorUsed == 0)
 8019350:	eb14 6400 	adds.w	r4, r4, r0, lsl #24
 8019354:	d101      	bne.n	801935a <STM32Ipl_ReadImage+0x24a>
		colorUsed = 1 << bitCount;
 8019356:	2401      	movs	r4, #1
 8019358:	409c      	lsls	r4, r3
	lineSize = (((width * bitCount) + 31) / 32) * 4;
 801935a:	fb03 f00b 	mul.w	r0, r3, fp
 801935e:	f110 011f 	adds.w	r1, r0, #31
 8019362:	bf48      	it	mi
 8019364:	f100 013e 	addmi.w	r1, r0, #62	; 0x3e
	if ((compression == BI_BITFIELDS) && (bitCount == 16)) {
 8019368:	2a03      	cmp	r2, #3
	lineSize = (((width * bitCount) + 31) / 32) * 4;
 801936a:	ea4f 1161 	mov.w	r1, r1, asr #5
 801936e:	ea4f 0a81 	mov.w	sl, r1, lsl #2
	if ((compression == BI_BITFIELDS) && (bitCount == 16)) {
 8019372:	f040 80fb 	bne.w	801956c <STM32Ipl_ReadImage+0x45c>
 8019376:	2b10      	cmp	r3, #16
 8019378:	f040 80f8 	bne.w	801956c <STM32Ipl_ReadImage+0x45c>
		if ((f_read(fp, mask, sizeof(mask), (UINT*)&bytesRead) != FR_OK) || bytesRead != sizeof(mask))
 801937c:	464b      	mov	r3, r9
 801937e:	2204      	movs	r2, #4
 8019380:	a82a      	add	r0, sp, #168	; 0xa8
 8019382:	a9b6      	add	r1, sp, #728	; 0x2d8
 8019384:	f7fd fef8 	bl	8017178 <f_read>
 8019388:	2800      	cmp	r0, #0
 801938a:	f040 80e9 	bne.w	8019560 <STM32Ipl_ReadImage+0x450>
 801938e:	f8d9 2000 	ldr.w	r2, [r9]
 8019392:	2a04      	cmp	r2, #4
 8019394:	f040 80e4 	bne.w	8019560 <STM32Ipl_ReadImage+0x450>
		rMask = mask[0] + (mask[1] << 8) + (mask[2] << 16) + (mask[3] << 24);
 8019398:	f89d 42d9 	ldrb.w	r4, [sp, #729]	; 0x2d9
		if ((f_read(fp, mask, sizeof(mask), (UINT*)&bytesRead) != FR_OK) || bytesRead != sizeof(mask))
 801939c:	464b      	mov	r3, r9
		rMask = mask[0] + (mask[1] << 8) + (mask[2] << 16) + (mask[3] << 24);
 801939e:	f89d 62d8 	ldrb.w	r6, [sp, #728]	; 0x2d8
		if ((f_read(fp, mask, sizeof(mask), (UINT*)&bytesRead) != FR_OK) || bytesRead != sizeof(mask))
 80193a2:	a9b6      	add	r1, sp, #728	; 0x2d8
		rMask = mask[0] + (mask[1] << 8) + (mask[2] << 16) + (mask[3] << 24);
 80193a4:	f89d 02da 	ldrb.w	r0, [sp, #730]	; 0x2da
 80193a8:	eb06 2604 	add.w	r6, r6, r4, lsl #8
 80193ac:	f89d 42db 	ldrb.w	r4, [sp, #731]	; 0x2db
 80193b0:	eb06 4600 	add.w	r6, r6, r0, lsl #16
		if ((f_read(fp, mask, sizeof(mask), (UINT*)&bytesRead) != FR_OK) || bytesRead != sizeof(mask))
 80193b4:	a82a      	add	r0, sp, #168	; 0xa8
		rMask = mask[0] + (mask[1] << 8) + (mask[2] << 16) + (mask[3] << 24);
 80193b6:	eb06 6604 	add.w	r6, r6, r4, lsl #24
		if ((f_read(fp, mask, sizeof(mask), (UINT*)&bytesRead) != FR_OK) || bytesRead != sizeof(mask))
 80193ba:	f7fd fedd 	bl	8017178 <f_read>
 80193be:	2800      	cmp	r0, #0
 80193c0:	f040 80ce 	bne.w	8019560 <STM32Ipl_ReadImage+0x450>
 80193c4:	f8d9 2000 	ldr.w	r2, [r9]
 80193c8:	2a04      	cmp	r2, #4
 80193ca:	f040 80c9 	bne.w	8019560 <STM32Ipl_ReadImage+0x450>
		gMask = mask[0] + (mask[1] << 8) + (mask[2] << 16) + (mask[3] << 24);
 80193ce:	f89d 52d9 	ldrb.w	r5, [sp, #729]	; 0x2d9
		if ((f_read(fp, mask, sizeof(mask), (UINT*)&bytesRead) != FR_OK) || bytesRead != sizeof(mask))
 80193d2:	464b      	mov	r3, r9
		gMask = mask[0] + (mask[1] << 8) + (mask[2] << 16) + (mask[3] << 24);
 80193d4:	f89d 42d8 	ldrb.w	r4, [sp, #728]	; 0x2d8
		if ((f_read(fp, mask, sizeof(mask), (UINT*)&bytesRead) != FR_OK) || bytesRead != sizeof(mask))
 80193d8:	a9b6      	add	r1, sp, #728	; 0x2d8
		gMask = mask[0] + (mask[1] << 8) + (mask[2] << 16) + (mask[3] << 24);
 80193da:	f89d 02da 	ldrb.w	r0, [sp, #730]	; 0x2da
 80193de:	eb04 2405 	add.w	r4, r4, r5, lsl #8
 80193e2:	f89d 52db 	ldrb.w	r5, [sp, #731]	; 0x2db
 80193e6:	eb04 4400 	add.w	r4, r4, r0, lsl #16
		if ((f_read(fp, mask, sizeof(mask), (UINT*)&bytesRead) != FR_OK) || bytesRead != sizeof(mask))
 80193ea:	a82a      	add	r0, sp, #168	; 0xa8
		gMask = mask[0] + (mask[1] << 8) + (mask[2] << 16) + (mask[3] << 24);
 80193ec:	eb04 6405 	add.w	r4, r4, r5, lsl #24
		if ((f_read(fp, mask, sizeof(mask), (UINT*)&bytesRead) != FR_OK) || bytesRead != sizeof(mask))
 80193f0:	f7fd fec2 	bl	8017178 <f_read>
 80193f4:	2800      	cmp	r0, #0
 80193f6:	f040 80b3 	bne.w	8019560 <STM32Ipl_ReadImage+0x450>
 80193fa:	f8d9 3000 	ldr.w	r3, [r9]
 80193fe:	2b04      	cmp	r3, #4
 8019400:	f040 80ae 	bne.w	8019560 <STM32Ipl_ReadImage+0x450>
		bMask = mask[0] + (mask[1] << 8) + (mask[2] << 16) + (mask[3] << 24);
 8019404:	f89d 32d9 	ldrb.w	r3, [sp, #729]	; 0x2d9
 8019408:	f89d 52d8 	ldrb.w	r5, [sp, #728]	; 0x2d8
 801940c:	f89d 22da 	ldrb.w	r2, [sp, #730]	; 0x2da
 8019410:	eb05 2503 	add.w	r5, r5, r3, lsl #8
 8019414:	f89d 32db 	ldrb.w	r3, [sp, #731]	; 0x2db
 8019418:	eb05 4502 	add.w	r5, r5, r2, lsl #16
 801941c:	eb05 6503 	add.w	r5, r5, r3, lsl #24
			if (f_lseek(fp, dataOffset) != FR_OK)
 8019420:	9906      	ldr	r1, [sp, #24]
 8019422:	a82a      	add	r0, sp, #168	; 0xa8
 8019424:	f7fe f9ce 	bl	80177c4 <f_lseek>
 8019428:	2800      	cmp	r0, #0
 801942a:	f040 809c 	bne.w	8019566 <STM32Ipl_ReadImage+0x456>
			outData = xalloc(width * abs(height) * 2);
 801942e:	9b04      	ldr	r3, [sp, #16]
 8019430:	2b00      	cmp	r3, #0
 8019432:	bfb8      	it	lt
 8019434:	425b      	neglt	r3, r3
 8019436:	fb03 f00b 	mul.w	r0, r3, fp
 801943a:	9307      	str	r3, [sp, #28]
 801943c:	0040      	lsls	r0, r0, #1
 801943e:	f001 f837 	bl	801a4b0 <xalloc>
			if (!outData)
 8019442:	9010      	str	r0, [sp, #64]	; 0x40
 8019444:	2800      	cmp	r0, #0
 8019446:	f000 8579 	beq.w	8019f3c <STM32Ipl_ReadImage+0xe2c>
			lineData = xalloc(lineSize);
 801944a:	4650      	mov	r0, sl
 801944c:	f001 f830 	bl	801a4b0 <xalloc>
			if (!lineData) {
 8019450:	4680      	mov	r8, r0
 8019452:	2800      	cmp	r0, #0
 8019454:	f000 877a 	beq.w	801a34c <STM32Ipl_ReadImage+0x123c>
			line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 8019458:	9b04      	ldr	r3, [sp, #16]
 801945a:	2b00      	cmp	r3, #0
 801945c:	f340 8528 	ble.w	8019eb0 <STM32Ipl_ReadImage+0xda0>
 8019460:	3b01      	subs	r3, #1
 8019462:	9a06      	ldr	r2, [sp, #24]
 8019464:	fb0a 2303 	mla	r3, sl, r3, r2
 8019468:	4619      	mov	r1, r3
 801946a:	9305      	str	r3, [sp, #20]
			if (f_lseek(fp, line) != FR_OK) {
 801946c:	a82a      	add	r0, sp, #168	; 0xa8
 801946e:	f7fe f9a9 	bl	80177c4 <f_lseek>
 8019472:	2800      	cmp	r0, #0
 8019474:	f040 8761 	bne.w	801a33a <STM32Ipl_ReadImage+0x122a>
			for (uint32_t i = 0; i < abs(height); i++) {
 8019478:	9b07      	ldr	r3, [sp, #28]
 801947a:	9313      	str	r3, [sp, #76]	; 0x4c
 801947c:	9b04      	ldr	r3, [sp, #16]
 801947e:	2b00      	cmp	r3, #0
 8019480:	f000 871d 	beq.w	801a2be <STM32Ipl_ReadImage+0x11ae>
					if (compression && (rMask == RGB565_RED_MASK) && (gMask == RGB565_GREEN_MASK)
 8019484:	463a      	mov	r2, r7
 8019486:	f02b 0301 	bic.w	r3, fp, #1
						*outPixel++ = ((value & rMask) << 1) | ((value & gMask) << 1) | (value & bMask);
 801948a:	960d      	str	r6, [sp, #52]	; 0x34
					if (compression && (rMask == RGB565_RED_MASK) && (gMask == RGB565_GREEN_MASK)
 801948c:	f5b6 4f78 	cmp.w	r6, #63488	; 0xf800
 8019490:	bf14      	ite	ne
 8019492:	2200      	movne	r2, #0
 8019494:	f002 0201 	andeq.w	r2, r2, #1
							&& (bMask == RGB565_BLUE_MASK))
 8019498:	f5b4 6ffc 	cmp.w	r4, #2016	; 0x7e0
 801949c:	bf08      	it	eq
 801949e:	2d1f      	cmpeq	r5, #31
 80194a0:	9311      	str	r3, [sp, #68]	; 0x44
						*outPixel++ = ((value & rMask) << 1) | ((value & gMask) << 1) | (value & bMask);
 80194a2:	465e      	mov	r6, fp
					if (compression && (rMask == RGB565_RED_MASK) && (gMask == RGB565_GREEN_MASK)
 80194a4:	920a      	str	r2, [sp, #40]	; 0x28
							&& (bMask == RGB565_BLUE_MASK))
 80194a6:	bf0c      	ite	eq
 80194a8:	2201      	moveq	r2, #1
 80194aa:	2200      	movne	r2, #0
 80194ac:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80194ae:	920c      	str	r2, [sp, #48]	; 0x30
 80194b0:	005a      	lsls	r2, r3, #1
 80194b2:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 80194b6:	9208      	str	r2, [sp, #32]
 80194b8:	9309      	str	r3, [sp, #36]	; 0x24
 80194ba:	f108 0303 	add.w	r3, r8, #3
 80194be:	930e      	str	r3, [sp, #56]	; 0x38
 80194c0:	ea4f 035b 	mov.w	r3, fp, lsr #1
 80194c4:	9312      	str	r3, [sp, #72]	; 0x48
 80194c6:	f10b 33ff 	add.w	r3, fp, #4294967295
 80194ca:	930f      	str	r3, [sp, #60]	; 0x3c
 80194cc:	ea4f 034b 	mov.w	r3, fp, lsl #1
						*outPixel++ = ((value & rMask) << 1) | ((value & gMask) << 1) | (value & bMask);
 80194d0:	4683      	mov	fp, r0
 80194d2:	930b      	str	r3, [sp, #44]	; 0x2c
				if ((f_read(fp, lineData, lineSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != lineSize) {
 80194d4:	464b      	mov	r3, r9
 80194d6:	4652      	mov	r2, sl
 80194d8:	4641      	mov	r1, r8
 80194da:	a82a      	add	r0, sp, #168	; 0xa8
 80194dc:	f7fd fe4c 	bl	8017178 <f_read>
 80194e0:	2800      	cmp	r0, #0
 80194e2:	f040 837b 	bne.w	8019bdc <STM32Ipl_ReadImage+0xacc>
 80194e6:	f8d9 3000 	ldr.w	r3, [r9]
 80194ea:	459a      	cmp	sl, r3
 80194ec:	f040 8376 	bne.w	8019bdc <STM32Ipl_ReadImage+0xacc>
				for (uint32_t j = 0; j < width; j++) {
 80194f0:	b1be      	cbz	r6, 8019522 <STM32Ipl_ReadImage+0x412>
 80194f2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80194f4:	2900      	cmp	r1, #0
 80194f6:	f040 82ea 	bne.w	8019ace <STM32Ipl_ReadImage+0x9be>
 80194fa:	f1a8 0c02 	sub.w	ip, r8, #2
 80194fe:	4638      	mov	r0, r7
 8019500:	9a0d      	ldr	r2, [sp, #52]	; 0x34
					uint16_t value = *inPixel;
 8019502:	f83c 3f02 	ldrh.w	r3, [ip, #2]!
						*outPixel++ = ((value & rMask) << 1) | ((value & gMask) << 1) | (value & bMask);
 8019506:	ea42 0e04 	orr.w	lr, r2, r4
				for (uint32_t j = 0; j < width; j++) {
 801950a:	3101      	adds	r1, #1
						*outPixel++ = ((value & rMask) << 1) | ((value & gMask) << 1) | (value & bMask);
 801950c:	ea0e 0e03 	and.w	lr, lr, r3
 8019510:	402b      	ands	r3, r5
				for (uint32_t j = 0; j < width; j++) {
 8019512:	428e      	cmp	r6, r1
						*outPixel++ = ((value & rMask) << 1) | ((value & gMask) << 1) | (value & bMask);
 8019514:	ea43 034e 	orr.w	r3, r3, lr, lsl #1
 8019518:	f820 3b02 	strh.w	r3, [r0], #2
				for (uint32_t j = 0; j < width; j++) {
 801951c:	d1f1      	bne.n	8019502 <STM32Ipl_ReadImage+0x3f2>
 801951e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019520:	441f      	add	r7, r3
				if (height > 0) {
 8019522:	9b04      	ldr	r3, [sp, #16]
 8019524:	2b00      	cmp	r3, #0
					line -= lineSize;
 8019526:	9b05      	ldr	r3, [sp, #20]
				if (height > 0) {
 8019528:	f340 82e9 	ble.w	8019afe <STM32Ipl_ReadImage+0x9ee>
					line -= lineSize;
 801952c:	eba3 030a 	sub.w	r3, r3, sl
					if (line >= dataOffset) {
 8019530:	9a06      	ldr	r2, [sp, #24]
 8019532:	429a      	cmp	r2, r3
					line -= lineSize;
 8019534:	9305      	str	r3, [sp, #20]
					if (line >= dataOffset) {
 8019536:	f240 8302 	bls.w	8019b3e <STM32Ipl_ReadImage+0xa2e>
			for (uint32_t i = 0; i < abs(height); i++) {
 801953a:	f10b 0b01 	add.w	fp, fp, #1
 801953e:	9b07      	ldr	r3, [sp, #28]
 8019540:	459b      	cmp	fp, r3
 8019542:	d1c7      	bne.n	80194d4 <STM32Ipl_ReadImage+0x3c4>
 8019544:	46b3      	mov	fp, r6
			xfree(lineData);
 8019546:	4640      	mov	r0, r8
	return stm32ipl_err_Ok;
 8019548:	2700      	movs	r7, #0
			xfree(lineData);
 801954a:	f000 ffbf 	bl	801a4cc <xfree>
			STM32Ipl_Init(img, width, abs(height), IMAGE_BPP_RGB565, outData);
 801954e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019550:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019552:	4659      	mov	r1, fp
 8019554:	9300      	str	r3, [sp, #0]
 8019556:	2302      	movs	r3, #2
 8019558:	9803      	ldr	r0, [sp, #12]
 801955a:	f7ff fa4d 	bl	80189f8 <STM32Ipl_Init>
			break;
 801955e:	e61c      	b.n	801919a <STM32Ipl_ReadImage+0x8a>
									return stm32ipl_err_ReadingFile;
 8019560:	f06f 0707 	mvn.w	r7, #7
 8019564:	e619      	b.n	801919a <STM32Ipl_ReadImage+0x8a>
		return stm32ipl_err_SeekingFile;
 8019566:	f06f 0709 	mvn.w	r7, #9
 801956a:	e616      	b.n	801919a <STM32Ipl_ReadImage+0x8a>
	switch (bitCount) {
 801956c:	3b01      	subs	r3, #1
 801956e:	2b17      	cmp	r3, #23
 8019570:	f63f ae11 	bhi.w	8019196 <STM32Ipl_ReadImage+0x86>
 8019574:	a201      	add	r2, pc, #4	; (adr r2, 801957c <STM32Ipl_ReadImage+0x46c>)
 8019576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801957a:	bf00      	nop
 801957c:	0801998f 	.word	0x0801998f
 8019580:	08019197 	.word	0x08019197
 8019584:	08019197 	.word	0x08019197
 8019588:	0801987f 	.word	0x0801987f
 801958c:	08019197 	.word	0x08019197
 8019590:	08019197 	.word	0x08019197
 8019594:	08019197 	.word	0x08019197
 8019598:	08019755 	.word	0x08019755
 801959c:	08019197 	.word	0x08019197
 80195a0:	08019197 	.word	0x08019197
 80195a4:	08019197 	.word	0x08019197
 80195a8:	08019197 	.word	0x08019197
 80195ac:	08019197 	.word	0x08019197
 80195b0:	08019197 	.word	0x08019197
 80195b4:	08019197 	.word	0x08019197
 80195b8:	080195dd 	.word	0x080195dd
 80195bc:	08019197 	.word	0x08019197
 80195c0:	08019197 	.word	0x08019197
 80195c4:	08019197 	.word	0x08019197
 80195c8:	08019197 	.word	0x08019197
 80195cc:	08019197 	.word	0x08019197
 80195d0:	08019197 	.word	0x08019197
 80195d4:	08019197 	.word	0x08019197
 80195d8:	08019689 	.word	0x08019689
	if ((compression == BI_BITFIELDS) && (bitCount == 16)) {
 80195dc:	251f      	movs	r5, #31
 80195de:	f44f 7478 	mov.w	r4, #992	; 0x3e0
 80195e2:	f44f 46f8 	mov.w	r6, #31744	; 0x7c00
 80195e6:	e71b      	b.n	8019420 <STM32Ipl_ReadImage+0x310>
			if (mode == EAT_COMMENT) {
 80195e8:	2f01      	cmp	r7, #1
 80195ea:	d00d      	beq.n	8019608 <STM32Ipl_ReadImage+0x4f8>
					if (('0' <= sector[0]) && (sector[0] <= '9')) {
 80195ec:	782b      	ldrb	r3, [r5, #0]
 80195ee:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80195f2:	b2d1      	uxtb	r1, r2
 80195f4:	2909      	cmp	r1, #9
 80195f6:	d813      	bhi.n	8019620 <STM32Ipl_ReadImage+0x510>
						number = (number * 10) + sector[0] - '0';
 80195f8:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80195fc:	2702      	movs	r7, #2
 80195fe:	eb02 0646 	add.w	r6, r2, r6, lsl #1
	} while (!valid);
 8019602:	e60a      	b.n	801921a <STM32Ipl_ReadImage+0x10a>
				mode = EAT_COMMENT;
 8019604:	461f      	mov	r7, r3
 8019606:	e608      	b.n	801921a <STM32Ipl_ReadImage+0x10a>
				if ((sector[0] == '\n') || (sector[0] == '\r')) {
 8019608:	782f      	ldrb	r7, [r5, #0]
 801960a:	2f0d      	cmp	r7, #13
 801960c:	bf18      	it	ne
 801960e:	2f0a      	cmpne	r7, #10
 8019610:	bf0c      	ite	eq
 8019612:	2701      	moveq	r7, #1
 8019614:	2700      	movne	r7, #0
				mode = EAT_COMMENT;
 8019616:	f087 0701 	eor.w	r7, r7, #1
 801961a:	e5fe      	b.n	801921a <STM32Ipl_ReadImage+0x10a>
 801961c:	01010112 	.word	0x01010112
	mode = EAT_WHITESPACE;
 8019620:	4607      	mov	r7, r0
	number = 0;
 8019622:	4683      	mov	fp, r0
 8019624:	461a      	mov	r2, r3
		if (mode == EAT_WHITESPACE) {
 8019626:	b9af      	cbnz	r7, 8019654 <STM32Ipl_ReadImage+0x544>
			if (sector[0] == '#') {
 8019628:	2a23      	cmp	r2, #35	; 0x23
 801962a:	d022      	beq.n	8019672 <STM32Ipl_ReadImage+0x562>
				if (('0' <= sector[0]) && (sector[0] <= '9')) {
 801962c:	3a30      	subs	r2, #48	; 0x30
 801962e:	b2d3      	uxtb	r3, r2
 8019630:	2b09      	cmp	r3, #9
 8019632:	d801      	bhi.n	8019638 <STM32Ipl_ReadImage+0x528>
					number = sector[0] - '0';
 8019634:	4693      	mov	fp, r2
					mode = EAT_NUMBER;
 8019636:	2702      	movs	r7, #2
			if ((f_read(fp, sector, 1, &bytesRead) != FR_OK) || bytesRead != 1)
 8019638:	4623      	mov	r3, r4
 801963a:	2201      	movs	r2, #1
 801963c:	4629      	mov	r1, r5
 801963e:	a82a      	add	r0, sp, #168	; 0xa8
 8019640:	f7fd fd9a 	bl	8017178 <f_read>
 8019644:	2800      	cmp	r0, #0
 8019646:	d18b      	bne.n	8019560 <STM32Ipl_ReadImage+0x450>
 8019648:	6823      	ldr	r3, [r4, #0]
 801964a:	2b01      	cmp	r3, #1
 801964c:	d188      	bne.n	8019560 <STM32Ipl_ReadImage+0x450>
 801964e:	782a      	ldrb	r2, [r5, #0]
		if (mode == EAT_WHITESPACE) {
 8019650:	2f00      	cmp	r7, #0
 8019652:	d0e9      	beq.n	8019628 <STM32Ipl_ReadImage+0x518>
			if (mode == EAT_COMMENT) {
 8019654:	2f01      	cmp	r7, #1
 8019656:	d00e      	beq.n	8019676 <STM32Ipl_ReadImage+0x566>
					if (('0' <= sector[0]) && (sector[0] <= '9')) {
 8019658:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801965c:	2b09      	cmp	r3, #9
 801965e:	f200 827f 	bhi.w	8019b60 <STM32Ipl_ReadImage+0xa50>
						number = (number * 10) + sector[0] - '0';
 8019662:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
 8019666:	2702      	movs	r7, #2
 8019668:	eb02 024b 	add.w	r2, r2, fp, lsl #1
 801966c:	f1a2 0b30 	sub.w	fp, r2, #48	; 0x30
	} while (!valid);
 8019670:	e7e2      	b.n	8019638 <STM32Ipl_ReadImage+0x528>
				mode = EAT_COMMENT;
 8019672:	2701      	movs	r7, #1
 8019674:	e7e0      	b.n	8019638 <STM32Ipl_ReadImage+0x528>
				if ((sector[0] == '\n') || (sector[0] == '\r')) {
 8019676:	2a0d      	cmp	r2, #13
 8019678:	bf18      	it	ne
 801967a:	2a0a      	cmpne	r2, #10
 801967c:	bf0c      	ite	eq
 801967e:	2201      	moveq	r2, #1
 8019680:	2200      	movne	r2, #0
				mode = EAT_COMMENT;
 8019682:	f082 0701 	eor.w	r7, r2, #1
 8019686:	e7d7      	b.n	8019638 <STM32Ipl_ReadImage+0x528>
			if (f_lseek(fp, dataOffset) != FR_OK)
 8019688:	9906      	ldr	r1, [sp, #24]
 801968a:	a82a      	add	r0, sp, #168	; 0xa8
			uint32_t outLineSize = width * 3;
 801968c:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
			if (f_lseek(fp, dataOffset) != FR_OK)
 8019690:	f7fe f898 	bl	80177c4 <f_lseek>
 8019694:	2800      	cmp	r0, #0
 8019696:	f47f af66 	bne.w	8019566 <STM32Ipl_ReadImage+0x456>
			outData = xalloc(outLineSize * abs(height));
 801969a:	9b04      	ldr	r3, [sp, #16]
 801969c:	2b00      	cmp	r3, #0
 801969e:	bfb8      	it	lt
 80196a0:	425b      	neglt	r3, r3
 80196a2:	fb03 f006 	mul.w	r0, r3, r6
 80196a6:	9305      	str	r3, [sp, #20]
 80196a8:	f000 ff02 	bl	801a4b0 <xalloc>
			if (!outData)
 80196ac:	9007      	str	r0, [sp, #28]
 80196ae:	2800      	cmp	r0, #0
 80196b0:	f000 8444 	beq.w	8019f3c <STM32Ipl_ReadImage+0xe2c>
			lineData = xalloc(lineSize);
 80196b4:	4650      	mov	r0, sl
 80196b6:	f000 fefb 	bl	801a4b0 <xalloc>
			if (!lineData) {
 80196ba:	4605      	mov	r5, r0
 80196bc:	2800      	cmp	r0, #0
 80196be:	f000 8631 	beq.w	801a324 <STM32Ipl_ReadImage+0x1214>
			line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 80196c2:	9b04      	ldr	r3, [sp, #16]
 80196c4:	2b00      	cmp	r3, #0
 80196c6:	f340 83f8 	ble.w	8019eba <STM32Ipl_ReadImage+0xdaa>
 80196ca:	1e5f      	subs	r7, r3, #1
 80196cc:	9b06      	ldr	r3, [sp, #24]
 80196ce:	fb0a 3707 	mla	r7, sl, r7, r3
			if (f_lseek(fp, line) != FR_OK) {
 80196d2:	4639      	mov	r1, r7
 80196d4:	a82a      	add	r0, sp, #168	; 0xa8
 80196d6:	f7fe f875 	bl	80177c4 <f_lseek>
 80196da:	bb90      	cbnz	r0, 8019742 <STM32Ipl_ReadImage+0x632>
			for (uint32_t i = 0; i < abs(height); i++) {
 80196dc:	9b04      	ldr	r3, [sp, #16]
 80196de:	2b00      	cmp	r3, #0
 80196e0:	f000 8416 	beq.w	8019f10 <STM32Ipl_ReadImage+0xe00>
 80196e4:	4604      	mov	r4, r0
 80196e6:	f340 83ea 	ble.w	8019ebe <STM32Ipl_ReadImage+0xdae>
 80196ea:	f8cd b010 	str.w	fp, [sp, #16]
 80196ee:	46ab      	mov	fp, r5
 80196f0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80196f4:	9d06      	ldr	r5, [sp, #24]
 80196f6:	e003      	b.n	8019700 <STM32Ipl_ReadImage+0x5f0>
 80196f8:	9b05      	ldr	r3, [sp, #20]
 80196fa:	42a3      	cmp	r3, r4
 80196fc:	f000 8405 	beq.w	8019f0a <STM32Ipl_ReadImage+0xdfa>
				if ((f_read(fp, lineData, lineSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != lineSize) {
 8019700:	464b      	mov	r3, r9
 8019702:	4652      	mov	r2, sl
 8019704:	4659      	mov	r1, fp
 8019706:	a82a      	add	r0, sp, #168	; 0xa8
 8019708:	f7fd fd36 	bl	8017178 <f_read>
 801970c:	4603      	mov	r3, r0
					line -= lineSize;
 801970e:	eba7 070a 	sub.w	r7, r7, sl
				memcpy(outPixel, lineData, outLineSize);
 8019712:	4640      	mov	r0, r8
			for (uint32_t i = 0; i < abs(height); i++) {
 8019714:	3401      	adds	r4, #1
				memcpy(outPixel, lineData, outLineSize);
 8019716:	4632      	mov	r2, r6
 8019718:	4659      	mov	r1, fp
				outPixel += outLineSize;
 801971a:	44b0      	add	r8, r6
				if ((f_read(fp, lineData, lineSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != lineSize) {
 801971c:	2b00      	cmp	r3, #0
 801971e:	f040 83f2 	bne.w	8019f06 <STM32Ipl_ReadImage+0xdf6>
 8019722:	f8d9 3000 	ldr.w	r3, [r9]
 8019726:	459a      	cmp	sl, r3
 8019728:	f040 83ed 	bne.w	8019f06 <STM32Ipl_ReadImage+0xdf6>
				memcpy(outPixel, lineData, outLineSize);
 801972c:	f00b fb5e 	bl	8024dec <memcpy>
					if (line >= dataOffset) {
 8019730:	42bd      	cmp	r5, r7
 8019732:	d8e1      	bhi.n	80196f8 <STM32Ipl_ReadImage+0x5e8>
						if (f_lseek(fp, line) != FR_OK) {
 8019734:	4639      	mov	r1, r7
 8019736:	a82a      	add	r0, sp, #168	; 0xa8
 8019738:	f7fe f844 	bl	80177c4 <f_lseek>
 801973c:	2800      	cmp	r0, #0
 801973e:	d0db      	beq.n	80196f8 <STM32Ipl_ReadImage+0x5e8>
 8019740:	465d      	mov	r5, fp
							xfree(lineData);
 8019742:	4628      	mov	r0, r5
							return stm32ipl_err_SeekingFile;
 8019744:	f06f 0709 	mvn.w	r7, #9
							xfree(lineData);
 8019748:	f000 fec0 	bl	801a4cc <xfree>
							xfree(outData);
 801974c:	9807      	ldr	r0, [sp, #28]
 801974e:	f000 febd 	bl	801a4cc <xfree>
							return stm32ipl_err_SeekingFile;
 8019752:	e522      	b.n	801919a <STM32Ipl_ReadImage+0x8a>
			if (f_lseek(fp, dataOffset - paletteSize) != FR_OK)
 8019754:	9b06      	ldr	r3, [sp, #24]
 8019756:	a82a      	add	r0, sp, #168	; 0xa8
			paletteSize = colorUsed * sizeof(uint32_t);
 8019758:	00a6      	lsls	r6, r4, #2
			if (f_lseek(fp, dataOffset - paletteSize) != FR_OK)
 801975a:	eba3 0184 	sub.w	r1, r3, r4, lsl #2
 801975e:	f7fe f831 	bl	80177c4 <f_lseek>
 8019762:	2800      	cmp	r0, #0
 8019764:	f47f aeff 	bne.w	8019566 <STM32Ipl_ReadImage+0x456>
			if ((f_read(fp, palette, paletteSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != paletteSize)
 8019768:	adb6      	add	r5, sp, #728	; 0x2d8
 801976a:	464b      	mov	r3, r9
 801976c:	4632      	mov	r2, r6
 801976e:	a82a      	add	r0, sp, #168	; 0xa8
 8019770:	4629      	mov	r1, r5
 8019772:	f7fd fd01 	bl	8017178 <f_read>
 8019776:	2800      	cmp	r0, #0
 8019778:	f47f aef2 	bne.w	8019560 <STM32Ipl_ReadImage+0x450>
 801977c:	f8d9 3000 	ldr.w	r3, [r9]
 8019780:	429e      	cmp	r6, r3
 8019782:	f47f aeed 	bne.w	8019560 <STM32Ipl_ReadImage+0x450>
	for (uint32_t i = 0; i < colorUsed; i++) {
 8019786:	4602      	mov	r2, r0
 8019788:	4629      	mov	r1, r5
		uint8_t b = palette[i];
 801978a:	f851 3b04 	ldr.w	r3, [r1], #4
	for (uint32_t i = 0; i < colorUsed; i++) {
 801978e:	3201      	adds	r2, #1
		uint8_t b = palette[i];
 8019790:	b2d8      	uxtb	r0, r3
		if ((b != g) | (b != r))
 8019792:	f3c3 2607 	ubfx	r6, r3, #8, #8
 8019796:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801979a:	4286      	cmp	r6, r0
 801979c:	f040 844d 	bne.w	801a03a <STM32Ipl_ReadImage+0xf2a>
 80197a0:	1a1b      	subs	r3, r3, r0
 80197a2:	bf18      	it	ne
 80197a4:	2301      	movne	r3, #1
 80197a6:	2b00      	cmp	r3, #0
 80197a8:	f040 8447 	bne.w	801a03a <STM32Ipl_ReadImage+0xf2a>
	for (uint32_t i = 0; i < colorUsed; i++) {
 80197ac:	4294      	cmp	r4, r2
 80197ae:	d1ec      	bne.n	801978a <STM32Ipl_ReadImage+0x67a>
				outData = xalloc(width * abs(height));
 80197b0:	461f      	mov	r7, r3
 80197b2:	9b04      	ldr	r3, [sp, #16]
 80197b4:	2b00      	cmp	r3, #0
 80197b6:	bfb8      	it	lt
 80197b8:	425b      	neglt	r3, r3
 80197ba:	fb03 f00b 	mul.w	r0, r3, fp
 80197be:	9305      	str	r3, [sp, #20]
 80197c0:	f000 fe76 	bl	801a4b0 <xalloc>
				if (!outData)
 80197c4:	9007      	str	r0, [sp, #28]
 80197c6:	2800      	cmp	r0, #0
 80197c8:	f000 83b8 	beq.w	8019f3c <STM32Ipl_ReadImage+0xe2c>
				lineData = xalloc(lineSize);
 80197cc:	4650      	mov	r0, sl
 80197ce:	f000 fe6f 	bl	801a4b0 <xalloc>
				if (!lineData) {
 80197d2:	4606      	mov	r6, r0
 80197d4:	2800      	cmp	r0, #0
 80197d6:	f000 85a5 	beq.w	801a324 <STM32Ipl_ReadImage+0x1214>
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 80197da:	9b04      	ldr	r3, [sp, #16]
 80197dc:	2b00      	cmp	r3, #0
 80197de:	dd02      	ble.n	80197e6 <STM32Ipl_ReadImage+0x6d6>
 80197e0:	1e5f      	subs	r7, r3, #1
 80197e2:	fb0a f707 	mul.w	r7, sl, r7
 80197e6:	9b06      	ldr	r3, [sp, #24]
				if (f_lseek(fp, line) != FR_OK) {
 80197e8:	a82a      	add	r0, sp, #168	; 0xa8
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 80197ea:	441f      	add	r7, r3
				if (f_lseek(fp, line) != FR_OK) {
 80197ec:	4639      	mov	r1, r7
 80197ee:	f7fd ffe9 	bl	80177c4 <f_lseek>
 80197f2:	2800      	cmp	r0, #0
 80197f4:	f040 8417 	bne.w	801a026 <STM32Ipl_ReadImage+0xf16>
				for (uint32_t i = 0; i < abs(height); i++) {
 80197f8:	9b05      	ldr	r3, [sp, #20]
 80197fa:	9308      	str	r3, [sp, #32]
 80197fc:	9b04      	ldr	r3, [sp, #16]
 80197fe:	2b00      	cmp	r3, #0
 8019800:	f000 85ad 	beq.w	801a35e <STM32Ipl_ReadImage+0x124e>
					for (uint32_t j = 0; j < width; j++)
 8019804:	464b      	mov	r3, r9
				for (uint32_t i = 0; i < abs(height); i++) {
 8019806:	4680      	mov	r8, r0
					for (uint32_t j = 0; j < width; j++)
 8019808:	46d1      	mov	r9, sl
 801980a:	9c07      	ldr	r4, [sp, #28]
 801980c:	469a      	mov	sl, r3
					if ((f_read(fp, lineData, lineSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != lineSize) {
 801980e:	4653      	mov	r3, sl
 8019810:	464a      	mov	r2, r9
 8019812:	4631      	mov	r1, r6
 8019814:	a82a      	add	r0, sp, #168	; 0xa8
 8019816:	f7fd fcaf 	bl	8017178 <f_read>
 801981a:	2800      	cmp	r0, #0
 801981c:	f040 8552 	bne.w	801a2c4 <STM32Ipl_ReadImage+0x11b4>
 8019820:	f8da 1000 	ldr.w	r1, [sl]
 8019824:	4589      	cmp	r9, r1
 8019826:	f040 854d 	bne.w	801a2c4 <STM32Ipl_ReadImage+0x11b4>
					for (uint32_t j = 0; j < width; j++)
 801982a:	f1bb 0f00 	cmp.w	fp, #0
 801982e:	d00a      	beq.n	8019846 <STM32Ipl_ReadImage+0x736>
 8019830:	eb04 0c0b 	add.w	ip, r4, fp
 8019834:	4631      	mov	r1, r6
						*outPixel++ = palette[*ptr++];
 8019836:	f811 3b01 	ldrb.w	r3, [r1], #1
 801983a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801983e:	f804 3b01 	strb.w	r3, [r4], #1
					for (uint32_t j = 0; j < width; j++)
 8019842:	4564      	cmp	r4, ip
 8019844:	d1f7      	bne.n	8019836 <STM32Ipl_ReadImage+0x726>
					if (height > 0) {
 8019846:	9b04      	ldr	r3, [sp, #16]
 8019848:	2b00      	cmp	r3, #0
 801984a:	f340 8375 	ble.w	8019f38 <STM32Ipl_ReadImage+0xe28>
						line -= lineSize;
 801984e:	eba7 0709 	sub.w	r7, r7, r9
						if (line >= dataOffset) {
 8019852:	9b06      	ldr	r3, [sp, #24]
 8019854:	42bb      	cmp	r3, r7
 8019856:	f240 83df 	bls.w	801a018 <STM32Ipl_ReadImage+0xf08>
				for (uint32_t i = 0; i < abs(height); i++) {
 801985a:	f108 0801 	add.w	r8, r8, #1
 801985e:	9b05      	ldr	r3, [sp, #20]
 8019860:	4598      	cmp	r8, r3
 8019862:	d1d4      	bne.n	801980e <STM32Ipl_ReadImage+0x6fe>
				xfree(lineData);
 8019864:	4630      	mov	r0, r6
 8019866:	f000 fe31 	bl	801a4cc <xfree>
				STM32Ipl_Init(img, width, abs(height), IMAGE_BPP_GRAYSCALE, outData);
 801986a:	9b07      	ldr	r3, [sp, #28]
 801986c:	9a08      	ldr	r2, [sp, #32]
 801986e:	4659      	mov	r1, fp
 8019870:	9300      	str	r3, [sp, #0]
 8019872:	2301      	movs	r3, #1
 8019874:	9803      	ldr	r0, [sp, #12]
 8019876:	f7ff f8bf 	bl	80189f8 <STM32Ipl_Init>
	return stm32ipl_err_Ok;
 801987a:	2700      	movs	r7, #0
 801987c:	e48d      	b.n	801919a <STM32Ipl_ReadImage+0x8a>
			if (f_lseek(fp, dataOffset - paletteSize) != FR_OK)
 801987e:	9b06      	ldr	r3, [sp, #24]
 8019880:	a82a      	add	r0, sp, #168	; 0xa8
 8019882:	eba3 0184 	sub.w	r1, r3, r4, lsl #2
 8019886:	f7fd ff9d 	bl	80177c4 <f_lseek>
			paletteSize = colorUsed * sizeof(uint32_t);
 801988a:	00a4      	lsls	r4, r4, #2
			if (f_lseek(fp, dataOffset - paletteSize) != FR_OK)
 801988c:	2800      	cmp	r0, #0
 801988e:	f47f ae6a 	bne.w	8019566 <STM32Ipl_ReadImage+0x456>
			if ((f_read(fp, palette, paletteSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != paletteSize)
 8019892:	adb6      	add	r5, sp, #728	; 0x2d8
 8019894:	464b      	mov	r3, r9
 8019896:	4622      	mov	r2, r4
 8019898:	a82a      	add	r0, sp, #168	; 0xa8
 801989a:	4629      	mov	r1, r5
 801989c:	f7fd fc6c 	bl	8017178 <f_read>
 80198a0:	2800      	cmp	r0, #0
 80198a2:	f47f ae5d 	bne.w	8019560 <STM32Ipl_ReadImage+0x450>
 80198a6:	f8d9 3000 	ldr.w	r3, [r9]
 80198aa:	429c      	cmp	r4, r3
 80198ac:	f47f ae58 	bne.w	8019560 <STM32Ipl_ReadImage+0x450>
			outData = xalloc(width * abs(height) * 2);
 80198b0:	9b04      	ldr	r3, [sp, #16]
 80198b2:	2b00      	cmp	r3, #0
 80198b4:	bfb8      	it	lt
 80198b6:	425b      	neglt	r3, r3
 80198b8:	fb03 f00b 	mul.w	r0, r3, fp
 80198bc:	9308      	str	r3, [sp, #32]
 80198be:	0040      	lsls	r0, r0, #1
 80198c0:	f000 fdf6 	bl	801a4b0 <xalloc>
			if (!outData)
 80198c4:	9009      	str	r0, [sp, #36]	; 0x24
 80198c6:	2800      	cmp	r0, #0
 80198c8:	f000 8338 	beq.w	8019f3c <STM32Ipl_ReadImage+0xe2c>
			lineData = xalloc(lineSize);
 80198cc:	4650      	mov	r0, sl
 80198ce:	f000 fdef 	bl	801a4b0 <xalloc>
			if (!lineData) {
 80198d2:	4680      	mov	r8, r0
 80198d4:	2800      	cmp	r0, #0
 80198d6:	f000 851e 	beq.w	801a316 <STM32Ipl_ReadImage+0x1206>
			line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 80198da:	9b04      	ldr	r3, [sp, #16]
 80198dc:	2b00      	cmp	r3, #0
 80198de:	f340 84e9 	ble.w	801a2b4 <STM32Ipl_ReadImage+0x11a4>
 80198e2:	3b01      	subs	r3, #1
 80198e4:	9a06      	ldr	r2, [sp, #24]
 80198e6:	fb0a 2303 	mla	r3, sl, r3, r2
 80198ea:	4619      	mov	r1, r3
 80198ec:	9305      	str	r3, [sp, #20]
			if (f_lseek(fp, line) != FR_OK) {
 80198ee:	a82a      	add	r0, sp, #168	; 0xa8
 80198f0:	f7fd ff68 	bl	80177c4 <f_lseek>
 80198f4:	2800      	cmp	r0, #0
 80198f6:	f040 8373 	bne.w	8019fe0 <STM32Ipl_ReadImage+0xed0>
			for (uint32_t i = 0; i < abs(height); i++) {
 80198fa:	9b08      	ldr	r3, [sp, #32]
 80198fc:	930a      	str	r3, [sp, #40]	; 0x28
 80198fe:	9b04      	ldr	r3, [sp, #16]
 8019900:	2b00      	cmp	r3, #0
 8019902:	f000 8521 	beq.w	801a348 <STM32Ipl_ReadImage+0x1238>
				for (uint32_t j = 0; j < width;) {
 8019906:	9c09      	ldr	r4, [sp, #36]	; 0x24
					*outPixel++ = (uint16_t)COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 8019908:	465f      	mov	r7, fp
 801990a:	4eca      	ldr	r6, [pc, #808]	; (8019c34 <STM32Ipl_ReadImage+0xb24>)
			for (uint32_t i = 0; i < abs(height); i++) {
 801990c:	9007      	str	r0, [sp, #28]
				if ((f_read(fp, lineData, lineSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != lineSize) {
 801990e:	464b      	mov	r3, r9
 8019910:	4652      	mov	r2, sl
 8019912:	4641      	mov	r1, r8
 8019914:	a82a      	add	r0, sp, #168	; 0xa8
 8019916:	f7fd fc2f 	bl	8017178 <f_read>
 801991a:	2800      	cmp	r0, #0
 801991c:	f040 84c0 	bne.w	801a2a0 <STM32Ipl_ReadImage+0x1190>
 8019920:	f8d9 3000 	ldr.w	r3, [r9]
 8019924:	459a      	cmp	sl, r3
 8019926:	f040 84bb 	bne.w	801a2a0 <STM32Ipl_ReadImage+0x1190>
				for (uint32_t j = 0; j < width;) {
 801992a:	2f00      	cmp	r7, #0
 801992c:	f000 8160 	beq.w	8019bf0 <STM32Ipl_ReadImage+0xae0>
 8019930:	4603      	mov	r3, r0
 8019932:	46c6      	mov	lr, r8
 8019934:	e004      	b.n	8019940 <STM32Ipl_ReadImage+0x830>
					*outPixel++ = (uint16_t)COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 8019936:	3402      	adds	r4, #2
					j++;
 8019938:	3302      	adds	r3, #2
				for (uint32_t j = 0; j < width;) {
 801993a:	42bb      	cmp	r3, r7
 801993c:	f080 8158 	bcs.w	8019bf0 <STM32Ipl_ReadImage+0xae0>
					uint8_t value = (*ptr++);
 8019940:	f81e 0b01 	ldrb.w	r0, [lr], #1
					if (j < width) {
 8019944:	f103 0c01 	add.w	ip, r3, #1
					uint8_t r = palette[index] >> 16;
 8019948:	0902      	lsrs	r2, r0, #4
					if (j < width) {
 801994a:	45bc      	cmp	ip, r7
						r = palette[index] >> 16;
 801994c:	f000 000f 	and.w	r0, r0, #15
					uint8_t r = palette[index] >> 16;
 8019950:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
					*outPixel++ = (uint16_t)COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 8019954:	ea06 2b11 	and.w	fp, r6, r1, lsr #8
 8019958:	f3c1 02c4 	ubfx	r2, r1, #3, #5
 801995c:	ea4f 1151 	mov.w	r1, r1, lsr #5
 8019960:	ea42 020b 	orr.w	r2, r2, fp
 8019964:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8019968:	ea42 0201 	orr.w	r2, r2, r1
 801996c:	8022      	strh	r2, [r4, #0]
					if (j < width) {
 801996e:	d2e2      	bcs.n	8019936 <STM32Ipl_ReadImage+0x826>
						r = palette[index] >> 16;
 8019970:	f855 2020 	ldr.w	r2, [r5, r0, lsl #2]
						*outPixel++ = (uint16_t)COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 8019974:	3404      	adds	r4, #4
 8019976:	ea06 2012 	and.w	r0, r6, r2, lsr #8
 801997a:	f3c2 01c4 	ubfx	r1, r2, #3, #5
 801997e:	0952      	lsrs	r2, r2, #5
 8019980:	4301      	orrs	r1, r0
 8019982:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8019986:	430a      	orrs	r2, r1
 8019988:	f824 2c02 	strh.w	r2, [r4, #-2]
 801998c:	e7d4      	b.n	8019938 <STM32Ipl_ReadImage+0x828>
			if (f_lseek(fp, dataOffset - paletteSize) != FR_OK)
 801998e:	9b06      	ldr	r3, [sp, #24]
 8019990:	a82a      	add	r0, sp, #168	; 0xa8
 8019992:	eba3 0184 	sub.w	r1, r3, r4, lsl #2
 8019996:	f7fd ff15 	bl	80177c4 <f_lseek>
			paletteSize = colorUsed * sizeof(uint32_t);
 801999a:	00a4      	lsls	r4, r4, #2
			if (f_lseek(fp, dataOffset - paletteSize) != FR_OK)
 801999c:	2800      	cmp	r0, #0
 801999e:	f47f ade2 	bne.w	8019566 <STM32Ipl_ReadImage+0x456>
			if ((f_read(fp, palette, paletteSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != paletteSize)
 80199a2:	adb6      	add	r5, sp, #728	; 0x2d8
 80199a4:	464b      	mov	r3, r9
 80199a6:	4622      	mov	r2, r4
 80199a8:	a82a      	add	r0, sp, #168	; 0xa8
 80199aa:	4629      	mov	r1, r5
 80199ac:	f7fd fbe4 	bl	8017178 <f_read>
 80199b0:	2800      	cmp	r0, #0
 80199b2:	f47f add5 	bne.w	8019560 <STM32Ipl_ReadImage+0x450>
 80199b6:	f8d9 3000 	ldr.w	r3, [r9]
 80199ba:	429c      	cmp	r4, r3
 80199bc:	f47f add0 	bne.w	8019560 <STM32Ipl_ReadImage+0x450>
			if ((palette[0] == 0x0 && palette[1] == 0xFFFFFF) || (palette[0] == 0xFFFFFF && palette[1] == 0x0)) {
 80199c0:	682b      	ldr	r3, [r5, #0]
 80199c2:	2b00      	cmp	r3, #0
 80199c4:	f040 83bd 	bne.w	801a142 <STM32Ipl_ReadImage+0x1032>
 80199c8:	686a      	ldr	r2, [r5, #4]
 80199ca:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80199ce:	429a      	cmp	r2, r3
 80199d0:	f000 83c0 	beq.w	801a154 <STM32Ipl_ReadImage+0x1044>
				outData = xalloc(width * abs(height) * 2);
 80199d4:	9b04      	ldr	r3, [sp, #16]
 80199d6:	2b00      	cmp	r3, #0
 80199d8:	bfb8      	it	lt
 80199da:	425b      	neglt	r3, r3
 80199dc:	fb03 f00b 	mul.w	r0, r3, fp
 80199e0:	9308      	str	r3, [sp, #32]
 80199e2:	0040      	lsls	r0, r0, #1
 80199e4:	f000 fd64 	bl	801a4b0 <xalloc>
				if (!outData)
 80199e8:	900a      	str	r0, [sp, #40]	; 0x28
 80199ea:	2800      	cmp	r0, #0
 80199ec:	f000 82a6 	beq.w	8019f3c <STM32Ipl_ReadImage+0xe2c>
				lineData = xalloc(lineSize);
 80199f0:	4650      	mov	r0, sl
 80199f2:	f000 fd5d 	bl	801a4b0 <xalloc>
				if (!lineData) {
 80199f6:	ee08 0a10 	vmov	s16, r0
 80199fa:	2800      	cmp	r0, #0
 80199fc:	f000 847e 	beq.w	801a2fc <STM32Ipl_ReadImage+0x11ec>
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 8019a00:	9b04      	ldr	r3, [sp, #16]
 8019a02:	2b00      	cmp	r3, #0
 8019a04:	f340 8472 	ble.w	801a2ec <STM32Ipl_ReadImage+0x11dc>
 8019a08:	3b01      	subs	r3, #1
 8019a0a:	9a06      	ldr	r2, [sp, #24]
 8019a0c:	fb0a 2303 	mla	r3, sl, r3, r2
 8019a10:	4619      	mov	r1, r3
 8019a12:	9307      	str	r3, [sp, #28]
				if (f_lseek(fp, line) != FR_OK) {
 8019a14:	a82a      	add	r0, sp, #168	; 0xa8
 8019a16:	f7fd fed5 	bl	80177c4 <f_lseek>
 8019a1a:	2800      	cmp	r0, #0
 8019a1c:	f040 82f1 	bne.w	801a002 <STM32Ipl_ReadImage+0xef2>
				for (uint32_t i = 0; i < abs(height); i++) {
 8019a20:	9b08      	ldr	r3, [sp, #32]
 8019a22:	930b      	str	r3, [sp, #44]	; 0x2c
 8019a24:	9b04      	ldr	r3, [sp, #16]
 8019a26:	2b00      	cmp	r3, #0
 8019a28:	f000 8497 	beq.w	801a35a <STM32Ipl_ReadImage+0x124a>
 8019a2c:	ea4f 034b 	mov.w	r3, fp, lsl #1
						*outPixel++ = (uint16_t)COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 8019a30:	465f      	mov	r7, fp
 8019a32:	f8df 8200 	ldr.w	r8, [pc, #512]	; 8019c34 <STM32Ipl_ReadImage+0xb24>
 8019a36:	4683      	mov	fp, r0
 8019a38:	9309      	str	r3, [sp, #36]	; 0x24
					for (uint32_t j = 0; j < width; k--, j++) {
 8019a3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019a3c:	9305      	str	r3, [sp, #20]
					if ((f_read(fp, lineData, lineSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != lineSize) {
 8019a3e:	464b      	mov	r3, r9
 8019a40:	4652      	mov	r2, sl
 8019a42:	ee18 1a10 	vmov	r1, s16
 8019a46:	a82a      	add	r0, sp, #168	; 0xa8
 8019a48:	f7fd fb96 	bl	8017178 <f_read>
 8019a4c:	2800      	cmp	r0, #0
 8019a4e:	f040 841c 	bne.w	801a28a <STM32Ipl_ReadImage+0x117a>
 8019a52:	f8d9 3000 	ldr.w	r3, [r9]
 8019a56:	459a      	cmp	sl, r3
 8019a58:	f040 8417 	bne.w	801a28a <STM32Ipl_ReadImage+0x117a>
					for (uint32_t j = 0; j < width; k--, j++) {
 8019a5c:	2f00      	cmp	r7, #0
 8019a5e:	f000 80f8 	beq.w	8019c52 <STM32Ipl_ReadImage+0xb42>
					uint8_t value = 0;
 8019a62:	4686      	mov	lr, r0
					for (uint32_t j = 0; j < width; k--, j++) {
 8019a64:	9b05      	ldr	r3, [sp, #20]
 8019a66:	ee18 ca10 	vmov	ip, s16
 8019a6a:	4606      	mov	r6, r0
 8019a6c:	e019      	b.n	8019aa2 <STM32Ipl_ReadImage+0x992>
 8019a6e:	4602      	mov	r2, r0
 8019a70:	b2e0      	uxtb	r0, r4
						index = (value >> k) & 0x1;
 8019a72:	fa4e f202 	asr.w	r2, lr, r2
					for (uint32_t j = 0; j < width; k--, j++) {
 8019a76:	3601      	adds	r6, #1
						r = palette[index] >> 16;
 8019a78:	f002 0201 	and.w	r2, r2, #1
					for (uint32_t j = 0; j < width; k--, j++) {
 8019a7c:	42be      	cmp	r6, r7
						r = palette[index] >> 16;
 8019a7e:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
						*outPixel++ = (uint16_t)COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 8019a82:	ea08 2411 	and.w	r4, r8, r1, lsr #8
 8019a86:	f3c1 02c4 	ubfx	r2, r1, #3, #5
 8019a8a:	ea4f 1151 	mov.w	r1, r1, lsr #5
 8019a8e:	ea42 0204 	orr.w	r2, r2, r4
 8019a92:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8019a96:	ea42 0201 	orr.w	r2, r2, r1
 8019a9a:	f823 2b02 	strh.w	r2, [r3], #2
					for (uint32_t j = 0; j < width; k--, j++) {
 8019a9e:	f000 80d4 	beq.w	8019c4a <STM32Ipl_ReadImage+0xb3a>
						if (!(j % 8)) {
 8019aa2:	f016 0f07 	tst.w	r6, #7
							value = (*ptr++);
 8019aa6:	4661      	mov	r1, ip
 8019aa8:	f100 34ff 	add.w	r4, r0, #4294967295
 8019aac:	f04f 0207 	mov.w	r2, #7
						if (!(j % 8)) {
 8019ab0:	d1dd      	bne.n	8019a6e <STM32Ipl_ReadImage+0x95e>
							value = (*ptr++);
 8019ab2:	f811 eb01 	ldrb.w	lr, [r1], #1
 8019ab6:	2006      	movs	r0, #6
 8019ab8:	468c      	mov	ip, r1
 8019aba:	e7da      	b.n	8019a72 <STM32Ipl_ReadImage+0x962>
						|| (memcmp(p6, magic, 2) == 0)))
 8019abc:	f8bd 2064 	ldrh.w	r2, [sp, #100]	; 0x64
 8019ac0:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8019ac4:	429a      	cmp	r2, r3
 8019ac6:	f47f ab66 	bne.w	8019196 <STM32Ipl_ReadImage+0x86>
 8019aca:	f7ff bb7d 	b.w	80191c8 <STM32Ipl_ReadImage+0xb8>
 8019ace:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019ad0:	b9c2      	cbnz	r2, 8019b04 <STM32Ipl_ReadImage+0x9f4>
 8019ad2:	f1a8 0c02 	sub.w	ip, r8, #2
				for (uint32_t j = 0; j < width; j++) {
 8019ad6:	4638      	mov	r0, r7
					uint16_t value = *inPixel;
 8019ad8:	f83c 1f02 	ldrh.w	r1, [ip, #2]!
				for (uint32_t j = 0; j < width; j++) {
 8019adc:	3201      	adds	r2, #1
						*outPixel++ = ((value & rMask) << 1) | ((value & gMask) << 1) | (value & bMask);
 8019ade:	4b56      	ldr	r3, [pc, #344]	; (8019c38 <STM32Ipl_ReadImage+0xb28>)
 8019ae0:	ea01 0e04 	and.w	lr, r1, r4
				for (uint32_t j = 0; j < width; j++) {
 8019ae4:	4296      	cmp	r6, r2
						*outPixel++ = ((value & rMask) << 1) | ((value & gMask) << 1) | (value & bMask);
 8019ae6:	ea03 0341 	and.w	r3, r3, r1, lsl #1
 8019aea:	ea01 0105 	and.w	r1, r1, r5
 8019aee:	ea43 034e 	orr.w	r3, r3, lr, lsl #1
 8019af2:	ea43 0301 	orr.w	r3, r3, r1
 8019af6:	f820 3b02 	strh.w	r3, [r0], #2
				for (uint32_t j = 0; j < width; j++) {
 8019afa:	d1ed      	bne.n	8019ad8 <STM32Ipl_ReadImage+0x9c8>
 8019afc:	e50f      	b.n	801951e <STM32Ipl_ReadImage+0x40e>
					line += lineSize;
 8019afe:	4453      	add	r3, sl
 8019b00:	9305      	str	r3, [sp, #20]
 8019b02:	e51a      	b.n	801953a <STM32Ipl_ReadImage+0x42a>
 8019b04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019b06:	1bdb      	subs	r3, r3, r7
 8019b08:	2b06      	cmp	r3, #6
 8019b0a:	f240 81c0 	bls.w	8019e8e <STM32Ipl_ReadImage+0xd7e>
 8019b0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019b10:	2b09      	cmp	r3, #9
 8019b12:	f240 81bc 	bls.w	8019e8e <STM32Ipl_ReadImage+0xd7e>
 8019b16:	463a      	mov	r2, r7
 8019b18:	4643      	mov	r3, r8
 8019b1a:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
					uint16_t value = *inPixel;
 8019b1e:	3001      	adds	r0, #1
 8019b20:	f853 1b04 	ldr.w	r1, [r3], #4
						*outPixel++ = value;
 8019b24:	4560      	cmp	r0, ip
 8019b26:	f842 1b04 	str.w	r1, [r2], #4
				for (uint32_t j = 0; j < width; j++) {
 8019b2a:	d1f8      	bne.n	8019b1e <STM32Ipl_ReadImage+0xa0e>
 8019b2c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019b2e:	429e      	cmp	r6, r3
 8019b30:	f43f acf5 	beq.w	801951e <STM32Ipl_ReadImage+0x40e>
					uint16_t value = *inPixel;
 8019b34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019b36:	9a08      	ldr	r2, [sp, #32]
 8019b38:	881b      	ldrh	r3, [r3, #0]
						*outPixel++ = value;
 8019b3a:	52bb      	strh	r3, [r7, r2]
				for (uint32_t j = 0; j < width; j++) {
 8019b3c:	e4ef      	b.n	801951e <STM32Ipl_ReadImage+0x40e>
						if (f_lseek(fp, line) != FR_OK) {
 8019b3e:	4619      	mov	r1, r3
 8019b40:	a82a      	add	r0, sp, #168	; 0xa8
 8019b42:	f7fd fe3f 	bl	80177c4 <f_lseek>
 8019b46:	2800      	cmp	r0, #0
 8019b48:	f43f acf7 	beq.w	801953a <STM32Ipl_ReadImage+0x42a>
							xfree(lineData);
 8019b4c:	4640      	mov	r0, r8
							return stm32ipl_err_SeekingFile;
 8019b4e:	f06f 0709 	mvn.w	r7, #9
							xfree(lineData);
 8019b52:	f000 fcbb 	bl	801a4cc <xfree>
							xfree(outData);
 8019b56:	9810      	ldr	r0, [sp, #64]	; 0x40
 8019b58:	f000 fcb8 	bl	801a4cc <xfree>
							return stm32ipl_err_SeekingFile;
 8019b5c:	f7ff bb1d 	b.w	801919a <STM32Ipl_ReadImage+0x8a>
	if (height == 0 || width == 0)
 8019b60:	f1bb 0f00 	cmp.w	fp, #0
 8019b64:	f000 83d3 	beq.w	801a30e <STM32Ipl_ReadImage+0x11fe>
 8019b68:	fab6 f986 	clz	r9, r6
 8019b6c:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8019b70:	2e00      	cmp	r6, #0
 8019b72:	f000 83cc 	beq.w	801a30e <STM32Ipl_ReadImage+0x11fe>
			if (sector[0] == '#') {
 8019b76:	2a23      	cmp	r2, #35	; 0x23
 8019b78:	d024      	beq.n	8019bc4 <STM32Ipl_ReadImage+0xab4>
				if (('0' <= sector[0]) && (sector[0] <= '9')) {
 8019b7a:	3a30      	subs	r2, #48	; 0x30
 8019b7c:	b2d3      	uxtb	r3, r2
					number = sector[0] - '0';
 8019b7e:	2b09      	cmp	r3, #9
 8019b80:	bf96      	itet	ls
 8019b82:	4691      	movls	r9, r2
 8019b84:	2700      	movhi	r7, #0
 8019b86:	2702      	movls	r7, #2
			if ((f_read(fp, sector, 1, &bytesRead) != FR_OK) || bytesRead != 1)
 8019b88:	4623      	mov	r3, r4
 8019b8a:	2201      	movs	r2, #1
 8019b8c:	4629      	mov	r1, r5
 8019b8e:	a82a      	add	r0, sp, #168	; 0xa8
 8019b90:	f7fd faf2 	bl	8017178 <f_read>
 8019b94:	2800      	cmp	r0, #0
 8019b96:	f47f ace3 	bne.w	8019560 <STM32Ipl_ReadImage+0x450>
 8019b9a:	6823      	ldr	r3, [r4, #0]
 8019b9c:	2b01      	cmp	r3, #1
 8019b9e:	f47f acdf 	bne.w	8019560 <STM32Ipl_ReadImage+0x450>
		if (mode == EAT_WHITESPACE) {
 8019ba2:	b16f      	cbz	r7, 8019bc0 <STM32Ipl_ReadImage+0xab0>
			if (mode == EAT_COMMENT) {
 8019ba4:	2f01      	cmp	r7, #1
						number = (number * 10) + sector[0] - '0';
 8019ba6:	eb09 0389 	add.w	r3, r9, r9, lsl #2
 8019baa:	f04f 0702 	mov.w	r7, #2
			if (mode == EAT_COMMENT) {
 8019bae:	d00b      	beq.n	8019bc8 <STM32Ipl_ReadImage+0xab8>
					if (('0' <= sector[0]) && (sector[0] <= '9')) {
 8019bb0:	782a      	ldrb	r2, [r5, #0]
 8019bb2:	3a30      	subs	r2, #48	; 0x30
 8019bb4:	b2d1      	uxtb	r1, r2
 8019bb6:	2909      	cmp	r1, #9
 8019bb8:	d86f      	bhi.n	8019c9a <STM32Ipl_ReadImage+0xb8a>
						number = (number * 10) + sector[0] - '0';
 8019bba:	eb02 0943 	add.w	r9, r2, r3, lsl #1
	} while (!valid);
 8019bbe:	e7e3      	b.n	8019b88 <STM32Ipl_ReadImage+0xa78>
 8019bc0:	782a      	ldrb	r2, [r5, #0]
 8019bc2:	e7d8      	b.n	8019b76 <STM32Ipl_ReadImage+0xa66>
				mode = EAT_COMMENT;
 8019bc4:	2701      	movs	r7, #1
 8019bc6:	e7df      	b.n	8019b88 <STM32Ipl_ReadImage+0xa78>
				if ((sector[0] == '\n') || (sector[0] == '\r')) {
 8019bc8:	782f      	ldrb	r7, [r5, #0]
 8019bca:	2f0d      	cmp	r7, #13
 8019bcc:	bf18      	it	ne
 8019bce:	2f0a      	cmpne	r7, #10
 8019bd0:	bf0c      	ite	eq
 8019bd2:	2701      	moveq	r7, #1
 8019bd4:	2700      	movne	r7, #0
					mode = EAT_NUMBER;
 8019bd6:	f087 0701 	eor.w	r7, r7, #1
 8019bda:	e7d5      	b.n	8019b88 <STM32Ipl_ReadImage+0xa78>
					xfree(lineData);
 8019bdc:	4640      	mov	r0, r8
					return stm32ipl_err_ReadingFile;
 8019bde:	f06f 0707 	mvn.w	r7, #7
					xfree(lineData);
 8019be2:	f000 fc73 	bl	801a4cc <xfree>
					xfree(outData);
 8019be6:	9810      	ldr	r0, [sp, #64]	; 0x40
 8019be8:	f000 fc70 	bl	801a4cc <xfree>
					return stm32ipl_err_ReadingFile;
 8019bec:	f7ff bad5 	b.w	801919a <STM32Ipl_ReadImage+0x8a>
				if (height > 0) {
 8019bf0:	9b04      	ldr	r3, [sp, #16]
 8019bf2:	2b00      	cmp	r3, #0
					line -= lineSize;
 8019bf4:	9b05      	ldr	r3, [sp, #20]
				if (height > 0) {
 8019bf6:	f340 8199 	ble.w	8019f2c <STM32Ipl_ReadImage+0xe1c>
					line -= lineSize;
 8019bfa:	eba3 030a 	sub.w	r3, r3, sl
					if (line >= dataOffset) {
 8019bfe:	9a06      	ldr	r2, [sp, #24]
 8019c00:	429a      	cmp	r2, r3
					line -= lineSize;
 8019c02:	9305      	str	r3, [sp, #20]
					if (line >= dataOffset) {
 8019c04:	f240 81e5 	bls.w	8019fd2 <STM32Ipl_ReadImage+0xec2>
			for (uint32_t i = 0; i < abs(height); i++) {
 8019c08:	9b07      	ldr	r3, [sp, #28]
 8019c0a:	9a08      	ldr	r2, [sp, #32]
 8019c0c:	3301      	adds	r3, #1
 8019c0e:	4293      	cmp	r3, r2
 8019c10:	9307      	str	r3, [sp, #28]
 8019c12:	f47f ae7c 	bne.w	801990e <STM32Ipl_ReadImage+0x7fe>
 8019c16:	46bb      	mov	fp, r7
			xfree(lineData);
 8019c18:	4640      	mov	r0, r8
	return stm32ipl_err_Ok;
 8019c1a:	2700      	movs	r7, #0
			xfree(lineData);
 8019c1c:	f000 fc56 	bl	801a4cc <xfree>
			STM32Ipl_Init(img, width, abs(height), IMAGE_BPP_RGB565, outData);
 8019c20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019c24:	4659      	mov	r1, fp
 8019c26:	9300      	str	r3, [sp, #0]
 8019c28:	2302      	movs	r3, #2
 8019c2a:	9803      	ldr	r0, [sp, #12]
 8019c2c:	f7fe fee4 	bl	80189f8 <STM32Ipl_Init>
			break;
 8019c30:	f7ff bab3 	b.w	801919a <STM32Ipl_ReadImage+0x8a>
 8019c34:	fffff800 	.word	0xfffff800
 8019c38:	fffff000 	.word	0xfffff000
		f_close(&fp);
 8019c3c:	a82a      	add	r0, sp, #168	; 0xa8
		return stm32ipl_err_ReadingFile;
 8019c3e:	f06f 0707 	mvn.w	r7, #7
		f_close(&fp);
 8019c42:	f7fd fd2f 	bl	80176a4 <f_close>
		return stm32ipl_err_ReadingFile;
 8019c46:	f7ff baab 	b.w	80191a0 <STM32Ipl_ReadImage+0x90>
 8019c4a:	9b05      	ldr	r3, [sp, #20]
 8019c4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019c4e:	4413      	add	r3, r2
 8019c50:	9305      	str	r3, [sp, #20]
					if (height > 0) {
 8019c52:	9b04      	ldr	r3, [sp, #16]
 8019c54:	2b00      	cmp	r3, #0
						line -= lineSize;
 8019c56:	9b07      	ldr	r3, [sp, #28]
					if (height > 0) {
 8019c58:	f340 816b 	ble.w	8019f32 <STM32Ipl_ReadImage+0xe22>
						line -= lineSize;
 8019c5c:	eba3 030a 	sub.w	r3, r3, sl
						if (line >= dataOffset) {
 8019c60:	9a06      	ldr	r2, [sp, #24]
 8019c62:	429a      	cmp	r2, r3
						line -= lineSize;
 8019c64:	9307      	str	r3, [sp, #28]
						if (line >= dataOffset) {
 8019c66:	f240 81c5 	bls.w	8019ff4 <STM32Ipl_ReadImage+0xee4>
				for (uint32_t i = 0; i < abs(height); i++) {
 8019c6a:	f10b 0b01 	add.w	fp, fp, #1
 8019c6e:	9b08      	ldr	r3, [sp, #32]
 8019c70:	459b      	cmp	fp, r3
 8019c72:	f47f aee4 	bne.w	8019a3e <STM32Ipl_ReadImage+0x92e>
 8019c76:	46bb      	mov	fp, r7
				xfree(lineData);
 8019c78:	ee18 0a10 	vmov	r0, s16
				xfree(lineData);
 8019c7c:	f000 fc26 	bl	801a4cc <xfree>
				STM32Ipl_Init(img, width, abs(height), IMAGE_BPP_RGB565, outData);
 8019c80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019c82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019c84:	4659      	mov	r1, fp
 8019c86:	9300      	str	r3, [sp, #0]
 8019c88:	2302      	movs	r3, #2
 8019c8a:	9803      	ldr	r0, [sp, #12]
 8019c8c:	f7fe feb4 	bl	80189f8 <STM32Ipl_Init>
 8019c90:	e5f3      	b.n	801987a <STM32Ipl_ReadImage+0x76a>
		return stm32ipl_err_InvalidParameter;
 8019c92:	f06f 0701 	mvn.w	r7, #1
 8019c96:	f7ff ba83 	b.w	80191a0 <STM32Ipl_ReadImage+0x90>
	if (number > 255)
 8019c9a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8019c9e:	f200 8348 	bhi.w	801a332 <STM32Ipl_ReadImage+0x1222>
	switch (number_ppm) {
 8019ca2:	f1b8 0f04 	cmp.w	r8, #4
 8019ca6:	f63f aa76 	bhi.w	8019196 <STM32Ipl_ReadImage+0x86>
 8019caa:	a301      	add	r3, pc, #4	; (adr r3, 8019cb0 <STM32Ipl_ReadImage+0xba0>)
 8019cac:	f853 f028 	ldr.w	pc, [r3, r8, lsl #2]
 8019cb0:	08019de5 	.word	0x08019de5
 8019cb4:	08019d5d 	.word	0x08019d5d
 8019cb8:	08019197 	.word	0x08019197
 8019cbc:	08019d1d 	.word	0x08019d1d
 8019cc0:	08019cc5 	.word	0x08019cc5
			size = width * height * 3;
 8019cc4:	fb0b f706 	mul.w	r7, fp, r6
 8019cc8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
			outData = xalloc(size);
 8019ccc:	4638      	mov	r0, r7
 8019cce:	f000 fbef 	bl	801a4b0 <xalloc>
			if (!outData)
 8019cd2:	4605      	mov	r5, r0
 8019cd4:	2800      	cmp	r0, #0
 8019cd6:	f000 8131 	beq.w	8019f3c <STM32Ipl_ReadImage+0xe2c>
			if ((f_read(fp, outData, size, &bytesRead) != FR_OK) || bytesRead != size)
 8019cda:	4623      	mov	r3, r4
 8019cdc:	4601      	mov	r1, r0
 8019cde:	463a      	mov	r2, r7
 8019ce0:	a82a      	add	r0, sp, #168	; 0xa8
 8019ce2:	f7fd fa49 	bl	8017178 <f_read>
 8019ce6:	4603      	mov	r3, r0
 8019ce8:	2800      	cmp	r0, #0
 8019cea:	f47f ac39 	bne.w	8019560 <STM32Ipl_ReadImage+0x450>
 8019cee:	6822      	ldr	r2, [r4, #0]
 8019cf0:	4297      	cmp	r7, r2
 8019cf2:	f47f ac35 	bne.w	8019560 <STM32Ipl_ReadImage+0x450>
			for (uint32_t i = 0; i < size; i += 3) {
 8019cf6:	b13f      	cbz	r7, 8019d08 <STM32Ipl_ReadImage+0xbf8>
 8019cf8:	1caa      	adds	r2, r5, #2
				uint8_t tmp = outData[i];
 8019cfa:	5ce9      	ldrb	r1, [r5, r3]
				outData[i] = outData[i + 2];
 8019cfc:	5cd0      	ldrb	r0, [r2, r3]
 8019cfe:	54e8      	strb	r0, [r5, r3]
				outData[i + 2] = tmp;
 8019d00:	54d1      	strb	r1, [r2, r3]
			for (uint32_t i = 0; i < size; i += 3) {
 8019d02:	3303      	adds	r3, #3
 8019d04:	429f      	cmp	r7, r3
 8019d06:	d8f8      	bhi.n	8019cfa <STM32Ipl_ReadImage+0xbea>
			STM32Ipl_Init(img, width, height, IMAGE_BPP_RGB888, outData);
 8019d08:	9500      	str	r5, [sp, #0]
 8019d0a:	465a      	mov	r2, fp
 8019d0c:	4631      	mov	r1, r6
 8019d0e:	9803      	ldr	r0, [sp, #12]
 8019d10:	2304      	movs	r3, #4
	return stm32ipl_err_Ok;
 8019d12:	2700      	movs	r7, #0
			STM32Ipl_Init(img, width, height, IMAGE_BPP_RGB888, outData);
 8019d14:	f7fe fe70 	bl	80189f8 <STM32Ipl_Init>
			break;
 8019d18:	f7ff ba3f 	b.w	801919a <STM32Ipl_ReadImage+0x8a>
			size = width * height;
 8019d1c:	fb0b f806 	mul.w	r8, fp, r6
			outData = xalloc(size);
 8019d20:	4640      	mov	r0, r8
 8019d22:	f000 fbc5 	bl	801a4b0 <xalloc>
			if (!outData)
 8019d26:	4605      	mov	r5, r0
 8019d28:	2800      	cmp	r0, #0
 8019d2a:	f000 8107 	beq.w	8019f3c <STM32Ipl_ReadImage+0xe2c>
			if ((f_read(fp, outData, size, &bytesRead) != FR_OK) || bytesRead != size)
 8019d2e:	4601      	mov	r1, r0
 8019d30:	4623      	mov	r3, r4
 8019d32:	4642      	mov	r2, r8
 8019d34:	a82a      	add	r0, sp, #168	; 0xa8
 8019d36:	f7fd fa1f 	bl	8017178 <f_read>
 8019d3a:	4607      	mov	r7, r0
 8019d3c:	2800      	cmp	r0, #0
 8019d3e:	f47f ac0f 	bne.w	8019560 <STM32Ipl_ReadImage+0x450>
 8019d42:	6823      	ldr	r3, [r4, #0]
 8019d44:	4598      	cmp	r8, r3
 8019d46:	f47f ac0b 	bne.w	8019560 <STM32Ipl_ReadImage+0x450>
			STM32Ipl_Init(img, width, height, IMAGE_BPP_GRAYSCALE, outData);
 8019d4a:	465a      	mov	r2, fp
 8019d4c:	4631      	mov	r1, r6
 8019d4e:	9803      	ldr	r0, [sp, #12]
 8019d50:	2301      	movs	r3, #1
 8019d52:	9500      	str	r5, [sp, #0]
 8019d54:	f7fe fe50 	bl	80189f8 <STM32Ipl_Init>
			break;
 8019d58:	f7ff ba1f 	b.w	801919a <STM32Ipl_ReadImage+0x8a>
			outData = xalloc(width * height * 3);
 8019d5c:	fb0b f006 	mul.w	r0, fp, r6
 8019d60:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8019d64:	f000 fba4 	bl	801a4b0 <xalloc>
			if (!outData)
 8019d68:	9007      	str	r0, [sp, #28]
 8019d6a:	2800      	cmp	r0, #0
 8019d6c:	f000 80e6 	beq.w	8019f3c <STM32Ipl_ReadImage+0xe2c>
			for (uint32_t i = 0; i < height; i++) {
 8019d70:	2200      	movs	r2, #0
 8019d72:	9604      	str	r6, [sp, #16]
 8019d74:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
 8019d78:	4626      	mov	r6, r4
 8019d7a:	9205      	str	r2, [sp, #20]
 8019d7c:	4602      	mov	r2, r0
 8019d7e:	f8cd b018 	str.w	fp, [sp, #24]
				for (uint32_t j = 0; j < width; j++) {
 8019d82:	f102 0a03 	add.w	sl, r2, #3
 8019d86:	2400      	movs	r4, #0
 8019d88:	782b      	ldrb	r3, [r5, #0]
 8019d8a:	46cb      	mov	fp, r9
						number = 0;
 8019d8c:	f04f 0800 	mov.w	r8, #0
								if (sector[0] == '#') {
 8019d90:	2b23      	cmp	r3, #35	; 0x23
 8019d92:	d070      	beq.n	8019e76 <STM32Ipl_ReadImage+0xd66>
									if (('0' <= sector[0]) && (sector[0] <= '9')) {
 8019d94:	3b30      	subs	r3, #48	; 0x30
 8019d96:	b2da      	uxtb	r2, r3
										number = sector[0] - '0';
 8019d98:	2a09      	cmp	r2, #9
 8019d9a:	bf96      	itet	ls
 8019d9c:	4698      	movls	r8, r3
 8019d9e:	2700      	movhi	r7, #0
 8019da0:	2702      	movls	r7, #2
								if ((f_read(fp, sector, 1, &bytesRead) != FR_OK) || bytesRead != 1)
 8019da2:	4633      	mov	r3, r6
 8019da4:	2201      	movs	r2, #1
 8019da6:	4629      	mov	r1, r5
 8019da8:	a82a      	add	r0, sp, #168	; 0xa8
 8019daa:	f7fd f9e5 	bl	8017178 <f_read>
 8019dae:	2800      	cmp	r0, #0
 8019db0:	f47f abd6 	bne.w	8019560 <STM32Ipl_ReadImage+0x450>
 8019db4:	6833      	ldr	r3, [r6, #0]
 8019db6:	2b01      	cmp	r3, #1
 8019db8:	f47f abd2 	bne.w	8019560 <STM32Ipl_ReadImage+0x450>
							if (mode == EAT_WHITESPACE) {
 8019dbc:	2f00      	cmp	r7, #0
 8019dbe:	d04c      	beq.n	8019e5a <STM32Ipl_ReadImage+0xd4a>
								if (mode == EAT_COMMENT) {
 8019dc0:	2f01      	cmp	r7, #1
											number = (number * 10) + sector[0] - '0';
 8019dc2:	eb08 0288 	add.w	r2, r8, r8, lsl #2
 8019dc6:	f04f 0702 	mov.w	r7, #2
								if (mode == EAT_COMMENT) {
 8019dca:	d056      	beq.n	8019e7a <STM32Ipl_ReadImage+0xd6a>
										if (('0' <= sector[0]) && (sector[0] <= '9')) {
 8019dcc:	782b      	ldrb	r3, [r5, #0]
 8019dce:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8019dd2:	fa5f fc81 	uxtb.w	ip, r1
 8019dd6:	f1bc 0f09 	cmp.w	ip, #9
 8019dda:	f200 80d3 	bhi.w	8019f84 <STM32Ipl_ReadImage+0xe74>
											number = (number * 10) + sector[0] - '0';
 8019dde:	eb01 0842 	add.w	r8, r1, r2, lsl #1
						} while (!valid);
 8019de2:	e7de      	b.n	8019da2 <STM32Ipl_ReadImage+0xc92>
			outData = xalloc(width * height);
 8019de4:	fb0b f006 	mul.w	r0, fp, r6
 8019de8:	f000 fb62 	bl	801a4b0 <xalloc>
			if (!outData)
 8019dec:	4682      	mov	sl, r0
 8019dee:	2800      	cmp	r0, #0
 8019df0:	f000 80a4 	beq.w	8019f3c <STM32Ipl_ReadImage+0xe2c>
 8019df4:	2300      	movs	r3, #0
 8019df6:	4242      	negs	r2, r0
 8019df8:	9305      	str	r3, [sp, #20]
 8019dfa:	9204      	str	r2, [sp, #16]
			for (uint32_t i = 0; i < height; i++) {
 8019dfc:	9306      	str	r3, [sp, #24]
				for (uint32_t j = 0; j < width; j++) {
 8019dfe:	9b05      	ldr	r3, [sp, #20]
 8019e00:	eb0a 0903 	add.w	r9, sl, r3
					number = 0;
 8019e04:	f04f 0800 	mov.w	r8, #0
							if (sector[0] == '#') {
 8019e08:	782b      	ldrb	r3, [r5, #0]
 8019e0a:	2b23      	cmp	r3, #35	; 0x23
 8019e0c:	d031      	beq.n	8019e72 <STM32Ipl_ReadImage+0xd62>
								if (('0' <= sector[0]) && (sector[0] <= '9')) {
 8019e0e:	3b30      	subs	r3, #48	; 0x30
 8019e10:	b2da      	uxtb	r2, r3
									number = sector[0] - '0';
 8019e12:	2a09      	cmp	r2, #9
 8019e14:	bf96      	itet	ls
 8019e16:	4698      	movls	r8, r3
 8019e18:	2700      	movhi	r7, #0
 8019e1a:	2702      	movls	r7, #2
							if ((f_read(fp, sector, 1, &bytesRead) != FR_OK) || bytesRead != 1)
 8019e1c:	4623      	mov	r3, r4
 8019e1e:	2201      	movs	r2, #1
 8019e20:	4629      	mov	r1, r5
 8019e22:	a82a      	add	r0, sp, #168	; 0xa8
 8019e24:	f7fd f9a8 	bl	8017178 <f_read>
 8019e28:	2800      	cmp	r0, #0
 8019e2a:	f47f ab99 	bne.w	8019560 <STM32Ipl_ReadImage+0x450>
 8019e2e:	6822      	ldr	r2, [r4, #0]
 8019e30:	2a01      	cmp	r2, #1
 8019e32:	f47f ab95 	bne.w	8019560 <STM32Ipl_ReadImage+0x450>
						if (mode == EAT_WHITESPACE) {
 8019e36:	2f00      	cmp	r7, #0
 8019e38:	d0e6      	beq.n	8019e08 <STM32Ipl_ReadImage+0xcf8>
							if (mode == EAT_COMMENT) {
 8019e3a:	2f01      	cmp	r7, #1
										number = (number * 10) + sector[0] - '0';
 8019e3c:	eb08 0388 	add.w	r3, r8, r8, lsl #2
 8019e40:	f04f 0702 	mov.w	r7, #2
							if (mode == EAT_COMMENT) {
 8019e44:	d00b      	beq.n	8019e5e <STM32Ipl_ReadImage+0xd4e>
									if (('0' <= sector[0]) && (sector[0] <= '9')) {
 8019e46:	7829      	ldrb	r1, [r5, #0]
 8019e48:	3930      	subs	r1, #48	; 0x30
 8019e4a:	fa5f fc81 	uxtb.w	ip, r1
 8019e4e:	f1bc 0f09 	cmp.w	ip, #9
 8019e52:	d877      	bhi.n	8019f44 <STM32Ipl_ReadImage+0xe34>
										number = (number * 10) + sector[0] - '0';
 8019e54:	eb01 0843 	add.w	r8, r1, r3, lsl #1
					} while (!valid);
 8019e58:	e7e0      	b.n	8019e1c <STM32Ipl_ReadImage+0xd0c>
 8019e5a:	782b      	ldrb	r3, [r5, #0]
 8019e5c:	e798      	b.n	8019d90 <STM32Ipl_ReadImage+0xc80>
								if ((sector[0] == '\n') || (sector[0] == '\r')) {
 8019e5e:	782f      	ldrb	r7, [r5, #0]
 8019e60:	2f0d      	cmp	r7, #13
 8019e62:	bf18      	it	ne
 8019e64:	2f0a      	cmpne	r7, #10
 8019e66:	bf0c      	ite	eq
 8019e68:	2701      	moveq	r7, #1
 8019e6a:	2700      	movne	r7, #0
									mode = EAT_NUMBER;
 8019e6c:	f087 0701 	eor.w	r7, r7, #1
 8019e70:	e7d4      	b.n	8019e1c <STM32Ipl_ReadImage+0xd0c>
								mode = EAT_COMMENT;
 8019e72:	2701      	movs	r7, #1
 8019e74:	e7d2      	b.n	8019e1c <STM32Ipl_ReadImage+0xd0c>
									mode = EAT_COMMENT;
 8019e76:	2701      	movs	r7, #1
 8019e78:	e793      	b.n	8019da2 <STM32Ipl_ReadImage+0xc92>
									if ((sector[0] == '\n') || (sector[0] == '\r')) {
 8019e7a:	782f      	ldrb	r7, [r5, #0]
 8019e7c:	2f0d      	cmp	r7, #13
 8019e7e:	bf18      	it	ne
 8019e80:	2f0a      	cmpne	r7, #10
 8019e82:	bf0c      	ite	eq
 8019e84:	2701      	moveq	r7, #1
 8019e86:	2700      	movne	r7, #0
										mode = EAT_NUMBER;
 8019e88:	f087 0701 	eor.w	r7, r7, #1
 8019e8c:	e789      	b.n	8019da2 <STM32Ipl_ReadImage+0xc92>
 8019e8e:	f1a8 0102 	sub.w	r1, r8, #2
				for (uint32_t j = 0; j < width; j++) {
 8019e92:	463a      	mov	r2, r7
 8019e94:	2300      	movs	r3, #0
 8019e96:	3301      	adds	r3, #1
					uint16_t value = *inPixel;
 8019e98:	f831 0f02 	ldrh.w	r0, [r1, #2]!
				for (uint32_t j = 0; j < width; j++) {
 8019e9c:	429e      	cmp	r6, r3
 8019e9e:	f822 0b02 	strh.w	r0, [r2], #2
 8019ea2:	d1f8      	bne.n	8019e96 <STM32Ipl_ReadImage+0xd86>
 8019ea4:	f7ff bb3b 	b.w	801951e <STM32Ipl_ReadImage+0x40e>
		return stm32ipl_err_OpeningFile;
 8019ea8:	f06f 0705 	mvn.w	r7, #5
 8019eac:	f7ff b978 	b.w	80191a0 <STM32Ipl_ReadImage+0x90>
 8019eb0:	9b06      	ldr	r3, [sp, #24]
 8019eb2:	4619      	mov	r1, r3
 8019eb4:	9305      	str	r3, [sp, #20]
 8019eb6:	f7ff bad9 	b.w	801946c <STM32Ipl_ReadImage+0x35c>
 8019eba:	9f06      	ldr	r7, [sp, #24]
 8019ebc:	e409      	b.n	80196d2 <STM32Ipl_ReadImage+0x5c2>
			for (uint32_t i = 0; i < abs(height); i++) {
 8019ebe:	9f07      	ldr	r7, [sp, #28]
 8019ec0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8019ec4:	e007      	b.n	8019ed6 <STM32Ipl_ReadImage+0xdc6>
				if ((f_read(fp, lineData, lineSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != lineSize) {
 8019ec6:	f8d9 3000 	ldr.w	r3, [r9]
 8019eca:	459a      	cmp	sl, r3
 8019ecc:	d111      	bne.n	8019ef2 <STM32Ipl_ReadImage+0xde2>
				memcpy(outPixel, lineData, outLineSize);
 8019ece:	f00a ff8d 	bl	8024dec <memcpy>
			for (uint32_t i = 0; i < abs(height); i++) {
 8019ed2:	45a0      	cmp	r8, r4
 8019ed4:	d01c      	beq.n	8019f10 <STM32Ipl_ReadImage+0xe00>
				if ((f_read(fp, lineData, lineSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != lineSize) {
 8019ed6:	464b      	mov	r3, r9
 8019ed8:	4652      	mov	r2, sl
 8019eda:	4629      	mov	r1, r5
 8019edc:	a82a      	add	r0, sp, #168	; 0xa8
 8019ede:	f7fd f94b 	bl	8017178 <f_read>
 8019ee2:	4603      	mov	r3, r0
			for (uint32_t i = 0; i < abs(height); i++) {
 8019ee4:	3401      	adds	r4, #1
				memcpy(outPixel, lineData, outLineSize);
 8019ee6:	4638      	mov	r0, r7
 8019ee8:	4632      	mov	r2, r6
 8019eea:	4629      	mov	r1, r5
				outPixel += outLineSize;
 8019eec:	4437      	add	r7, r6
				if ((f_read(fp, lineData, lineSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != lineSize) {
 8019eee:	2b00      	cmp	r3, #0
 8019ef0:	d0e9      	beq.n	8019ec6 <STM32Ipl_ReadImage+0xdb6>
					xfree(lineData);
 8019ef2:	4628      	mov	r0, r5
					return stm32ipl_err_ReadingFile;
 8019ef4:	f06f 0707 	mvn.w	r7, #7
					xfree(lineData);
 8019ef8:	f000 fae8 	bl	801a4cc <xfree>
					xfree(outData);
 8019efc:	9807      	ldr	r0, [sp, #28]
 8019efe:	f000 fae5 	bl	801a4cc <xfree>
					return stm32ipl_err_ReadingFile;
 8019f02:	f7ff b94a 	b.w	801919a <STM32Ipl_ReadImage+0x8a>
 8019f06:	465d      	mov	r5, fp
 8019f08:	e7f3      	b.n	8019ef2 <STM32Ipl_ReadImage+0xde2>
 8019f0a:	465d      	mov	r5, fp
 8019f0c:	f8dd b010 	ldr.w	fp, [sp, #16]
			xfree(lineData);
 8019f10:	4628      	mov	r0, r5
	return stm32ipl_err_Ok;
 8019f12:	2700      	movs	r7, #0
			xfree(lineData);
 8019f14:	f000 fada 	bl	801a4cc <xfree>
			STM32Ipl_Init(img, width, abs(height), IMAGE_BPP_RGB888, outData);
 8019f18:	9b07      	ldr	r3, [sp, #28]
 8019f1a:	9a05      	ldr	r2, [sp, #20]
 8019f1c:	4659      	mov	r1, fp
 8019f1e:	9300      	str	r3, [sp, #0]
 8019f20:	2304      	movs	r3, #4
 8019f22:	9803      	ldr	r0, [sp, #12]
 8019f24:	f7fe fd68 	bl	80189f8 <STM32Ipl_Init>
			break;
 8019f28:	f7ff b937 	b.w	801919a <STM32Ipl_ReadImage+0x8a>
					line += lineSize;
 8019f2c:	4453      	add	r3, sl
 8019f2e:	9305      	str	r3, [sp, #20]
 8019f30:	e66a      	b.n	8019c08 <STM32Ipl_ReadImage+0xaf8>
						line += lineSize;
 8019f32:	4453      	add	r3, sl
 8019f34:	9307      	str	r3, [sp, #28]
 8019f36:	e698      	b.n	8019c6a <STM32Ipl_ReadImage+0xb5a>
						line += lineSize;
 8019f38:	444f      	add	r7, r9
 8019f3a:	e48e      	b.n	801985a <STM32Ipl_ReadImage+0x74a>
					return stm32ipl_err_OutOfMemory;
 8019f3c:	f06f 0702 	mvn.w	r7, #2
 8019f40:	f7ff b92b 	b.w	801919a <STM32Ipl_ReadImage+0x8a>
				for (uint32_t j = 0; j < width; j++) {
 8019f44:	9b04      	ldr	r3, [sp, #16]
					outData[offset + j] = (uint8_t)number;
 8019f46:	f809 8b01 	strb.w	r8, [r9], #1
				for (uint32_t j = 0; j < width; j++) {
 8019f4a:	444b      	add	r3, r9
 8019f4c:	429e      	cmp	r6, r3
 8019f4e:	f63f af59 	bhi.w	8019e04 <STM32Ipl_ReadImage+0xcf4>
			for (uint32_t i = 0; i < height; i++) {
 8019f52:	9905      	ldr	r1, [sp, #20]
 8019f54:	9b06      	ldr	r3, [sp, #24]
 8019f56:	4431      	add	r1, r6
 8019f58:	3301      	adds	r3, #1
 8019f5a:	9105      	str	r1, [sp, #20]
 8019f5c:	9904      	ldr	r1, [sp, #16]
 8019f5e:	455b      	cmp	r3, fp
 8019f60:	9306      	str	r3, [sp, #24]
 8019f62:	eba1 0106 	sub.w	r1, r1, r6
 8019f66:	9104      	str	r1, [sp, #16]
 8019f68:	f4ff af49 	bcc.w	8019dfe <STM32Ipl_ReadImage+0xcee>
 8019f6c:	4684      	mov	ip, r0
			STM32Ipl_Init(img, width, height, IMAGE_BPP_GRAYSCALE, outData);
 8019f6e:	4613      	mov	r3, r2
 8019f70:	4631      	mov	r1, r6
 8019f72:	465a      	mov	r2, fp
 8019f74:	9803      	ldr	r0, [sp, #12]
	return stm32ipl_err_Ok;
 8019f76:	4667      	mov	r7, ip
			STM32Ipl_Init(img, width, height, IMAGE_BPP_GRAYSCALE, outData);
 8019f78:	f8cd a000 	str.w	sl, [sp]
 8019f7c:	f7fe fd3c 	bl	80189f8 <STM32Ipl_Init>
			break;
 8019f80:	f7ff b90b 	b.w	801919a <STM32Ipl_ReadImage+0x8a>
					for (uint8_t counter = 0; counter < 3; counter++) {
 8019f84:	f10d 026f 	add.w	r2, sp, #111	; 0x6f
						pixel[counter] = number;
 8019f88:	f80b 8b01 	strb.w	r8, [fp], #1
					for (uint8_t counter = 0; counter < 3; counter++) {
 8019f8c:	455a      	cmp	r2, fp
 8019f8e:	f47f aefd 	bne.w	8019d8c <STM32Ipl_ReadImage+0xc7c>
					*outPixel++ = pixel[2];
 8019f92:	f899 3002 	ldrb.w	r3, [r9, #2]
				for (uint32_t j = 0; j < width; j++) {
 8019f96:	3401      	adds	r4, #1
 8019f98:	4652      	mov	r2, sl
 8019f9a:	f10a 0a03 	add.w	sl, sl, #3
					*outPixel++ = pixel[2];
 8019f9e:	f80a 3c06 	strb.w	r3, [sl, #-6]
					*outPixel++ = pixel[1];
 8019fa2:	f899 3001 	ldrb.w	r3, [r9, #1]
 8019fa6:	f80a 3c05 	strb.w	r3, [sl, #-5]
					*outPixel++ = pixel[0];
 8019faa:	f899 3000 	ldrb.w	r3, [r9]
 8019fae:	f80a 3c04 	strb.w	r3, [sl, #-4]
				for (uint32_t j = 0; j < width; j++) {
 8019fb2:	9b04      	ldr	r3, [sp, #16]
 8019fb4:	42a3      	cmp	r3, r4
 8019fb6:	f63f aee7 	bhi.w	8019d88 <STM32Ipl_ReadImage+0xc78>
			for (uint32_t i = 0; i < height; i++) {
 8019fba:	9b05      	ldr	r3, [sp, #20]
 8019fbc:	9906      	ldr	r1, [sp, #24]
 8019fbe:	3301      	adds	r3, #1
 8019fc0:	428b      	cmp	r3, r1
 8019fc2:	9305      	str	r3, [sp, #20]
 8019fc4:	f4ff aedd 	bcc.w	8019d82 <STM32Ipl_ReadImage+0xc72>
			STM32Ipl_Init(img, width, height, IMAGE_BPP_RGB888, outData);
 8019fc8:	e9dd b306 	ldrd	fp, r3, [sp, #24]
 8019fcc:	9e04      	ldr	r6, [sp, #16]
 8019fce:	9300      	str	r3, [sp, #0]
 8019fd0:	e69b      	b.n	8019d0a <STM32Ipl_ReadImage+0xbfa>
						if (f_lseek(fp, line) != FR_OK) {
 8019fd2:	4619      	mov	r1, r3
 8019fd4:	a82a      	add	r0, sp, #168	; 0xa8
 8019fd6:	f7fd fbf5 	bl	80177c4 <f_lseek>
 8019fda:	2800      	cmp	r0, #0
 8019fdc:	f43f ae14 	beq.w	8019c08 <STM32Ipl_ReadImage+0xaf8>
							xfree(lineData);
 8019fe0:	4640      	mov	r0, r8
							return stm32ipl_err_SeekingFile;
 8019fe2:	f06f 0709 	mvn.w	r7, #9
							xfree(lineData);
 8019fe6:	f000 fa71 	bl	801a4cc <xfree>
							xfree(outData);
 8019fea:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019fec:	f000 fa6e 	bl	801a4cc <xfree>
							return stm32ipl_err_SeekingFile;
 8019ff0:	f7ff b8d3 	b.w	801919a <STM32Ipl_ReadImage+0x8a>
							if (f_lseek(fp, line) != FR_OK) {
 8019ff4:	4619      	mov	r1, r3
 8019ff6:	a82a      	add	r0, sp, #168	; 0xa8
 8019ff8:	f7fd fbe4 	bl	80177c4 <f_lseek>
 8019ffc:	2800      	cmp	r0, #0
 8019ffe:	f43f ae34 	beq.w	8019c6a <STM32Ipl_ReadImage+0xb5a>
								xfree(lineData);
 801a002:	ee18 0a10 	vmov	r0, s16
								return stm32ipl_err_SeekingFile;
 801a006:	f06f 0709 	mvn.w	r7, #9
								xfree(lineData);
 801a00a:	f000 fa5f 	bl	801a4cc <xfree>
								xfree(outData);
 801a00e:	980a      	ldr	r0, [sp, #40]	; 0x28
 801a010:	f000 fa5c 	bl	801a4cc <xfree>
								return stm32ipl_err_SeekingFile;
 801a014:	f7ff b8c1 	b.w	801919a <STM32Ipl_ReadImage+0x8a>
							if (f_lseek(fp, line) != FR_OK) {
 801a018:	4639      	mov	r1, r7
 801a01a:	a82a      	add	r0, sp, #168	; 0xa8
 801a01c:	f7fd fbd2 	bl	80177c4 <f_lseek>
 801a020:	2800      	cmp	r0, #0
 801a022:	f43f ac1a 	beq.w	801985a <STM32Ipl_ReadImage+0x74a>
								xfree(lineData);
 801a026:	4630      	mov	r0, r6
								return stm32ipl_err_SeekingFile;
 801a028:	f06f 0709 	mvn.w	r7, #9
								xfree(lineData);
 801a02c:	f000 fa4e 	bl	801a4cc <xfree>
								xfree(outData);
 801a030:	9807      	ldr	r0, [sp, #28]
 801a032:	f000 fa4b 	bl	801a4cc <xfree>
								return stm32ipl_err_SeekingFile;
 801a036:	f7ff b8b0 	b.w	801919a <STM32Ipl_ReadImage+0x8a>
				outData = xalloc(width * abs(height) * 2);
 801a03a:	9b04      	ldr	r3, [sp, #16]
 801a03c:	2b00      	cmp	r3, #0
 801a03e:	bfb8      	it	lt
 801a040:	425b      	neglt	r3, r3
 801a042:	fb03 f00b 	mul.w	r0, r3, fp
 801a046:	9307      	str	r3, [sp, #28]
 801a048:	0040      	lsls	r0, r0, #1
 801a04a:	f000 fa31 	bl	801a4b0 <xalloc>
				if (!outData)
 801a04e:	900a      	str	r0, [sp, #40]	; 0x28
 801a050:	2800      	cmp	r0, #0
 801a052:	f43f af73 	beq.w	8019f3c <STM32Ipl_ReadImage+0xe2c>
				lineData = xalloc(lineSize);
 801a056:	4650      	mov	r0, sl
 801a058:	f000 fa2a 	bl	801a4b0 <xalloc>
				if (!lineData) {
 801a05c:	4607      	mov	r7, r0
 801a05e:	2800      	cmp	r0, #0
 801a060:	f000 814c 	beq.w	801a2fc <STM32Ipl_ReadImage+0x11ec>
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 801a064:	9b04      	ldr	r3, [sp, #16]
 801a066:	2b00      	cmp	r3, #0
 801a068:	f340 8145 	ble.w	801a2f6 <STM32Ipl_ReadImage+0x11e6>
 801a06c:	f103 38ff 	add.w	r8, r3, #4294967295
 801a070:	fb0a f808 	mul.w	r8, sl, r8
 801a074:	9b06      	ldr	r3, [sp, #24]
				if (f_lseek(fp, line) != FR_OK) {
 801a076:	a82a      	add	r0, sp, #168	; 0xa8
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 801a078:	4498      	add	r8, r3
				if (f_lseek(fp, line) != FR_OK) {
 801a07a:	4641      	mov	r1, r8
 801a07c:	f7fd fba2 	bl	80177c4 <f_lseek>
 801a080:	2800      	cmp	r0, #0
 801a082:	d154      	bne.n	801a12e <STM32Ipl_ReadImage+0x101e>
				for (uint32_t i = 0; i < abs(height); i++) {
 801a084:	9b07      	ldr	r3, [sp, #28]
 801a086:	930b      	str	r3, [sp, #44]	; 0x2c
 801a088:	9b04      	ldr	r3, [sp, #16]
 801a08a:	2b00      	cmp	r3, #0
 801a08c:	f000 816a 	beq.w	801a364 <STM32Ipl_ReadImage+0x1254>
 801a090:	ea4f 034b 	mov.w	r3, fp, lsl #1
					for (uint32_t j = 0; j < width; j++) {
 801a094:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a096:	eb07 040b 	add.w	r4, r7, fp
						*outPixel++ = (uint16_t)COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 801a09a:	f8cd b020 	str.w	fp, [sp, #32]
 801a09e:	9309      	str	r3, [sp, #36]	; 0x24
 801a0a0:	4683      	mov	fp, r0
 801a0a2:	464b      	mov	r3, r9
 801a0a4:	4eb1      	ldr	r6, [pc, #708]	; (801a36c <STM32Ipl_ReadImage+0x125c>)
 801a0a6:	4691      	mov	r9, r2
					if ((f_read(fp, lineData, lineSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != lineSize) {
 801a0a8:	4652      	mov	r2, sl
 801a0aa:	4639      	mov	r1, r7
 801a0ac:	a82a      	add	r0, sp, #168	; 0xa8
 801a0ae:	9305      	str	r3, [sp, #20]
 801a0b0:	f7fd f862 	bl	8017178 <f_read>
 801a0b4:	2800      	cmp	r0, #0
 801a0b6:	f040 810f 	bne.w	801a2d8 <STM32Ipl_ReadImage+0x11c8>
 801a0ba:	9b05      	ldr	r3, [sp, #20]
 801a0bc:	681a      	ldr	r2, [r3, #0]
 801a0be:	4592      	cmp	sl, r2
 801a0c0:	f040 810a 	bne.w	801a2d8 <STM32Ipl_ReadImage+0x11c8>
					for (uint32_t j = 0; j < width; j++) {
 801a0c4:	9a08      	ldr	r2, [sp, #32]
 801a0c6:	b1ba      	cbz	r2, 801a0f8 <STM32Ipl_ReadImage+0xfe8>
 801a0c8:	46cc      	mov	ip, r9
 801a0ca:	4638      	mov	r0, r7
						uint8_t r = palette[index] >> 16;
 801a0cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a0d0:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
					for (uint32_t j = 0; j < width; j++) {
 801a0d4:	42a0      	cmp	r0, r4
						*outPixel++ = (uint16_t)COLOR_R8_G8_B8_TO_RGB565(r, g, b);
 801a0d6:	ea06 2e11 	and.w	lr, r6, r1, lsr #8
 801a0da:	f3c1 02c4 	ubfx	r2, r1, #3, #5
 801a0de:	ea4f 1151 	mov.w	r1, r1, lsr #5
 801a0e2:	ea42 020e 	orr.w	r2, r2, lr
 801a0e6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801a0ea:	ea42 0201 	orr.w	r2, r2, r1
 801a0ee:	f82c 2b02 	strh.w	r2, [ip], #2
					for (uint32_t j = 0; j < width; j++) {
 801a0f2:	d1eb      	bne.n	801a0cc <STM32Ipl_ReadImage+0xfbc>
 801a0f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a0f6:	4491      	add	r9, r2
					if (height > 0) {
 801a0f8:	9a04      	ldr	r2, [sp, #16]
 801a0fa:	2a00      	cmp	r2, #0
 801a0fc:	dd0d      	ble.n	801a11a <STM32Ipl_ReadImage+0x100a>
						line -= lineSize;
 801a0fe:	eba8 080a 	sub.w	r8, r8, sl
						if (line >= dataOffset) {
 801a102:	9a06      	ldr	r2, [sp, #24]
 801a104:	4542      	cmp	r2, r8
 801a106:	d90a      	bls.n	801a11e <STM32Ipl_ReadImage+0x100e>
				for (uint32_t i = 0; i < abs(height); i++) {
 801a108:	f10b 0b01 	add.w	fp, fp, #1
 801a10c:	9a07      	ldr	r2, [sp, #28]
 801a10e:	4593      	cmp	fp, r2
 801a110:	d1ca      	bne.n	801a0a8 <STM32Ipl_ReadImage+0xf98>
 801a112:	f8dd b020 	ldr.w	fp, [sp, #32]
				xfree(lineData);
 801a116:	4638      	mov	r0, r7
 801a118:	e5b0      	b.n	8019c7c <STM32Ipl_ReadImage+0xb6c>
						line += lineSize;
 801a11a:	44d0      	add	r8, sl
 801a11c:	e7f4      	b.n	801a108 <STM32Ipl_ReadImage+0xff8>
							if (f_lseek(fp, line) != FR_OK) {
 801a11e:	4641      	mov	r1, r8
 801a120:	a82a      	add	r0, sp, #168	; 0xa8
 801a122:	9305      	str	r3, [sp, #20]
 801a124:	f7fd fb4e 	bl	80177c4 <f_lseek>
 801a128:	9b05      	ldr	r3, [sp, #20]
 801a12a:	2800      	cmp	r0, #0
 801a12c:	d0ec      	beq.n	801a108 <STM32Ipl_ReadImage+0xff8>
								xfree(lineData);
 801a12e:	4638      	mov	r0, r7
								return stm32ipl_err_SeekingFile;
 801a130:	f06f 0709 	mvn.w	r7, #9
								xfree(lineData);
 801a134:	f000 f9ca 	bl	801a4cc <xfree>
								xfree(outData);
 801a138:	980a      	ldr	r0, [sp, #40]	; 0x28
 801a13a:	f000 f9c7 	bl	801a4cc <xfree>
								return stm32ipl_err_SeekingFile;
 801a13e:	f7ff b82c 	b.w	801919a <STM32Ipl_ReadImage+0x8a>
			if ((palette[0] == 0x0 && palette[1] == 0xFFFFFF) || (palette[0] == 0xFFFFFF && palette[1] == 0x0)) {
 801a142:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 801a146:	4293      	cmp	r3, r2
 801a148:	f47f ac44 	bne.w	80199d4 <STM32Ipl_ReadImage+0x8c4>
 801a14c:	686b      	ldr	r3, [r5, #4]
 801a14e:	2b00      	cmp	r3, #0
 801a150:	f47f ac40 	bne.w	80199d4 <STM32Ipl_ReadImage+0x8c4>
				outData = xalloc0(STM32Ipl_DataSize(width, abs(height), IMAGE_BPP_BINARY));
 801a154:	9b04      	ldr	r3, [sp, #16]
 801a156:	2200      	movs	r2, #0
 801a158:	4658      	mov	r0, fp
 801a15a:	2b00      	cmp	r3, #0
 801a15c:	bfb8      	it	lt
 801a15e:	425b      	neglt	r3, r3
 801a160:	4619      	mov	r1, r3
 801a162:	9309      	str	r3, [sp, #36]	; 0x24
 801a164:	f7fe fc5e 	bl	8018a24 <STM32Ipl_DataSize>
 801a168:	f000 f9a4 	bl	801a4b4 <xalloc0>
				if (!outData)
 801a16c:	900a      	str	r0, [sp, #40]	; 0x28
 801a16e:	2800      	cmp	r0, #0
 801a170:	f43f aee4 	beq.w	8019f3c <STM32Ipl_ReadImage+0xe2c>
				lineData = xalloc(lineSize);
 801a174:	4650      	mov	r0, sl
 801a176:	f000 f99b 	bl	801a4b0 <xalloc>
				if (!lineData) {
 801a17a:	ee08 0a10 	vmov	s16, r0
 801a17e:	2800      	cmp	r0, #0
 801a180:	f000 80bc 	beq.w	801a2fc <STM32Ipl_ReadImage+0x11ec>
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 801a184:	9b04      	ldr	r3, [sp, #16]
 801a186:	2b00      	cmp	r3, #0
 801a188:	f340 80bf 	ble.w	801a30a <STM32Ipl_ReadImage+0x11fa>
 801a18c:	3b01      	subs	r3, #1
 801a18e:	fb0a f303 	mul.w	r3, sl, r3
 801a192:	9a06      	ldr	r2, [sp, #24]
				if (f_lseek(fp, line) != FR_OK) {
 801a194:	a82a      	add	r0, sp, #168	; 0xa8
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 801a196:	18d3      	adds	r3, r2, r3
				if (f_lseek(fp, line) != FR_OK) {
 801a198:	4619      	mov	r1, r3
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 801a19a:	9305      	str	r3, [sp, #20]
				if (f_lseek(fp, line) != FR_OK) {
 801a19c:	f7fd fb12 	bl	80177c4 <f_lseek>
 801a1a0:	2800      	cmp	r0, #0
 801a1a2:	f47f af2e 	bne.w	801a002 <STM32Ipl_ReadImage+0xef2>
				for (uint32_t i = 0; i < abs(height); i++) {
 801a1a6:	9b04      	ldr	r3, [sp, #16]
 801a1a8:	2b00      	cmp	r3, #0
 801a1aa:	d055      	beq.n	801a258 <STM32Ipl_ReadImage+0x1148>
 801a1ac:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 801a1b0:	465f      	mov	r7, fp
 801a1b2:	464e      	mov	r6, r9
 801a1b4:	9007      	str	r0, [sp, #28]
					if ((f_read(fp, lineData, lineSize, (UINT*)&bytesRead) != FR_OK) || bytesRead != lineSize) {
 801a1b6:	4633      	mov	r3, r6
 801a1b8:	4652      	mov	r2, sl
 801a1ba:	ee18 1a10 	vmov	r1, s16
 801a1be:	a82a      	add	r0, sp, #168	; 0xa8
 801a1c0:	f7fc ffda 	bl	8017178 <f_read>
 801a1c4:	2800      	cmp	r0, #0
 801a1c6:	d160      	bne.n	801a28a <STM32Ipl_ReadImage+0x117a>
 801a1c8:	6833      	ldr	r3, [r6, #0]
 801a1ca:	459a      	cmp	sl, r3
 801a1cc:	d15d      	bne.n	801a28a <STM32Ipl_ReadImage+0x117a>
					for (uint32_t j = 0; j < width; k--, j++) {
 801a1ce:	b38f      	cbz	r7, 801a234 <STM32Ipl_ReadImage+0x1124>
					value = 0;
 801a1d0:	4681      	mov	r9, r0
					for (uint32_t j = 0; j < width; k--, j++) {
 801a1d2:	ee18 ea10 	vmov	lr, s16
 801a1d6:	4601      	mov	r1, r0
						IMAGE_PUT_BINARY_PIXEL_FAST(outRow, j, palette[(value >> k) & 1]);
 801a1d8:	f04f 0b01 	mov.w	fp, #1
 801a1dc:	9608      	str	r6, [sp, #32]
 801a1de:	e01b      	b.n	801a218 <STM32Ipl_ReadImage+0x1108>
 801a1e0:	4603      	mov	r3, r0
 801a1e2:	b2e0      	uxtb	r0, r4
 801a1e4:	fa49 f303 	asr.w	r3, r9, r3
 801a1e8:	f001 0c1f 	and.w	ip, r1, #31
 801a1ec:	094c      	lsrs	r4, r1, #5
					for (uint32_t j = 0; j < width; k--, j++) {
 801a1ee:	3101      	adds	r1, #1
						IMAGE_PUT_BINARY_PIXEL_FAST(outRow, j, palette[(value >> k) & 1]);
 801a1f0:	f003 0301 	and.w	r3, r3, #1
 801a1f4:	fa0b f20c 	lsl.w	r2, fp, ip
 801a1f8:	f858 6024 	ldr.w	r6, [r8, r4, lsl #2]
					for (uint32_t j = 0; j < width; k--, j++) {
 801a1fc:	428f      	cmp	r7, r1
						IMAGE_PUT_BINARY_PIXEL_FAST(outRow, j, palette[(value >> k) & 1]);
 801a1fe:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801a202:	ea26 0202 	bic.w	r2, r6, r2
 801a206:	f003 0301 	and.w	r3, r3, #1
 801a20a:	fa03 fc0c 	lsl.w	ip, r3, ip
 801a20e:	ea4c 0202 	orr.w	r2, ip, r2
 801a212:	f848 2024 	str.w	r2, [r8, r4, lsl #2]
					for (uint32_t j = 0; j < width; k--, j++) {
 801a216:	d00c      	beq.n	801a232 <STM32Ipl_ReadImage+0x1122>
						if (!(j % 8)) {
 801a218:	f011 0f07 	tst.w	r1, #7
							value = (*inData++);
 801a21c:	4672      	mov	r2, lr
 801a21e:	f100 34ff 	add.w	r4, r0, #4294967295
 801a222:	f04f 0307 	mov.w	r3, #7
						if (!(j % 8)) {
 801a226:	d1db      	bne.n	801a1e0 <STM32Ipl_ReadImage+0x10d0>
							value = (*inData++);
 801a228:	f812 9b01 	ldrb.w	r9, [r2], #1
 801a22c:	2006      	movs	r0, #6
 801a22e:	4696      	mov	lr, r2
 801a230:	e7d8      	b.n	801a1e4 <STM32Ipl_ReadImage+0x10d4>
 801a232:	9e08      	ldr	r6, [sp, #32]
					if (height > 0) {
 801a234:	9b04      	ldr	r3, [sp, #16]
					outRow += offset;
 801a236:	44d0      	add	r8, sl
					if (height > 0) {
 801a238:	2b00      	cmp	r3, #0
 801a23a:	dd1b      	ble.n	801a274 <STM32Ipl_ReadImage+0x1164>
						line -= lineSize;
 801a23c:	9b05      	ldr	r3, [sp, #20]
						if (line >= dataOffset) {
 801a23e:	9a06      	ldr	r2, [sp, #24]
						line -= lineSize;
 801a240:	eba3 030a 	sub.w	r3, r3, sl
						if (line >= dataOffset) {
 801a244:	429a      	cmp	r2, r3
						line -= lineSize;
 801a246:	9305      	str	r3, [sp, #20]
						if (line >= dataOffset) {
 801a248:	d918      	bls.n	801a27c <STM32Ipl_ReadImage+0x116c>
				for (uint32_t i = 0; i < abs(height); i++) {
 801a24a:	9b07      	ldr	r3, [sp, #28]
 801a24c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a24e:	3301      	adds	r3, #1
 801a250:	429a      	cmp	r2, r3
 801a252:	9307      	str	r3, [sp, #28]
 801a254:	d1af      	bne.n	801a1b6 <STM32Ipl_ReadImage+0x10a6>
 801a256:	46bb      	mov	fp, r7
				xfree(lineData);
 801a258:	ee18 0a10 	vmov	r0, s16
 801a25c:	f000 f936 	bl	801a4cc <xfree>
				STM32Ipl_Init(img, width, abs(height), IMAGE_BPP_BINARY, outData);
 801a260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a262:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a264:	4659      	mov	r1, fp
 801a266:	9300      	str	r3, [sp, #0]
 801a268:	2300      	movs	r3, #0
 801a26a:	9803      	ldr	r0, [sp, #12]
 801a26c:	f7fe fbc4 	bl	80189f8 <STM32Ipl_Init>
			if ((palette[0] == 0x0 && palette[1] == 0xFFFFFF) || (palette[0] == 0xFFFFFF && palette[1] == 0x0)) {
 801a270:	f7ff bb03 	b.w	801987a <STM32Ipl_ReadImage+0x76a>
						line += lineSize;
 801a274:	9b05      	ldr	r3, [sp, #20]
 801a276:	4453      	add	r3, sl
 801a278:	9305      	str	r3, [sp, #20]
 801a27a:	e7e6      	b.n	801a24a <STM32Ipl_ReadImage+0x113a>
							if (f_lseek(fp, line) != FR_OK) {
 801a27c:	4619      	mov	r1, r3
 801a27e:	a82a      	add	r0, sp, #168	; 0xa8
 801a280:	f7fd faa0 	bl	80177c4 <f_lseek>
 801a284:	2800      	cmp	r0, #0
 801a286:	d0e0      	beq.n	801a24a <STM32Ipl_ReadImage+0x113a>
 801a288:	e6bb      	b.n	801a002 <STM32Ipl_ReadImage+0xef2>
						xfree(lineData);
 801a28a:	ee18 0a10 	vmov	r0, s16
						return stm32ipl_err_ReadingFile;
 801a28e:	f06f 0707 	mvn.w	r7, #7
						xfree(lineData);
 801a292:	f000 f91b 	bl	801a4cc <xfree>
						xfree(outData);
 801a296:	980a      	ldr	r0, [sp, #40]	; 0x28
 801a298:	f000 f918 	bl	801a4cc <xfree>
						return stm32ipl_err_ReadingFile;
 801a29c:	f7fe bf7d 	b.w	801919a <STM32Ipl_ReadImage+0x8a>
					xfree(lineData);
 801a2a0:	4640      	mov	r0, r8
					return stm32ipl_err_ReadingFile;
 801a2a2:	f06f 0707 	mvn.w	r7, #7
					xfree(lineData);
 801a2a6:	f000 f911 	bl	801a4cc <xfree>
					xfree(outData);
 801a2aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a2ac:	f000 f90e 	bl	801a4cc <xfree>
					return stm32ipl_err_ReadingFile;
 801a2b0:	f7fe bf73 	b.w	801919a <STM32Ipl_ReadImage+0x8a>
 801a2b4:	9b06      	ldr	r3, [sp, #24]
 801a2b6:	4619      	mov	r1, r3
 801a2b8:	9305      	str	r3, [sp, #20]
 801a2ba:	f7ff bb18 	b.w	80198ee <STM32Ipl_ReadImage+0x7de>
			for (uint32_t i = 0; i < abs(height); i++) {
 801a2be:	9313      	str	r3, [sp, #76]	; 0x4c
 801a2c0:	f7ff b941 	b.w	8019546 <STM32Ipl_ReadImage+0x436>
						xfree(lineData);
 801a2c4:	4630      	mov	r0, r6
						return stm32ipl_err_ReadingFile;
 801a2c6:	f06f 0707 	mvn.w	r7, #7
						xfree(lineData);
 801a2ca:	f000 f8ff 	bl	801a4cc <xfree>
						xfree(outData);
 801a2ce:	9807      	ldr	r0, [sp, #28]
 801a2d0:	f000 f8fc 	bl	801a4cc <xfree>
						return stm32ipl_err_ReadingFile;
 801a2d4:	f7fe bf61 	b.w	801919a <STM32Ipl_ReadImage+0x8a>
						xfree(lineData);
 801a2d8:	4638      	mov	r0, r7
						return stm32ipl_err_ReadingFile;
 801a2da:	f06f 0707 	mvn.w	r7, #7
						xfree(lineData);
 801a2de:	f000 f8f5 	bl	801a4cc <xfree>
						xfree(outData);
 801a2e2:	980a      	ldr	r0, [sp, #40]	; 0x28
 801a2e4:	f000 f8f2 	bl	801a4cc <xfree>
						return stm32ipl_err_ReadingFile;
 801a2e8:	f7fe bf57 	b.w	801919a <STM32Ipl_ReadImage+0x8a>
 801a2ec:	9b06      	ldr	r3, [sp, #24]
 801a2ee:	4619      	mov	r1, r3
 801a2f0:	9307      	str	r3, [sp, #28]
 801a2f2:	f7ff bb8f 	b.w	8019a14 <STM32Ipl_ReadImage+0x904>
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 801a2f6:	f04f 0800 	mov.w	r8, #0
 801a2fa:	e6bb      	b.n	801a074 <STM32Ipl_ReadImage+0xf64>
					xfree(outData);
 801a2fc:	980a      	ldr	r0, [sp, #40]	; 0x28
					return stm32ipl_err_OutOfMemory;
 801a2fe:	f06f 0702 	mvn.w	r7, #2
					xfree(outData);
 801a302:	f000 f8e3 	bl	801a4cc <xfree>
					return stm32ipl_err_OutOfMemory;
 801a306:	f7fe bf48 	b.w	801919a <STM32Ipl_ReadImage+0x8a>
				line = dataOffset + ((height > 0) ? (lineSize * (height - 1)) : 0);
 801a30a:	2300      	movs	r3, #0
 801a30c:	e741      	b.n	801a192 <STM32Ipl_ReadImage+0x1082>
		return stm32ipl_err_InvalidParameter;
 801a30e:	f06f 0701 	mvn.w	r7, #1
 801a312:	f7fe bf42 	b.w	801919a <STM32Ipl_ReadImage+0x8a>
				xfree(outData);
 801a316:	9809      	ldr	r0, [sp, #36]	; 0x24
				return stm32ipl_err_OutOfMemory;
 801a318:	f06f 0702 	mvn.w	r7, #2
				xfree(outData);
 801a31c:	f000 f8d6 	bl	801a4cc <xfree>
				return stm32ipl_err_OutOfMemory;
 801a320:	f7fe bf3b 	b.w	801919a <STM32Ipl_ReadImage+0x8a>
				xfree(outData);
 801a324:	9807      	ldr	r0, [sp, #28]
				return stm32ipl_err_OutOfMemory;
 801a326:	f06f 0702 	mvn.w	r7, #2
				xfree(outData);
 801a32a:	f000 f8cf 	bl	801a4cc <xfree>
				return stm32ipl_err_OutOfMemory;
 801a32e:	f7fe bf34 	b.w	801919a <STM32Ipl_ReadImage+0x8a>
		return stm32ipl_err_Generic;
 801a332:	f04f 37ff 	mov.w	r7, #4294967295
 801a336:	f7fe bf30 	b.w	801919a <STM32Ipl_ReadImage+0x8a>
				xfree(outData);
 801a33a:	9810      	ldr	r0, [sp, #64]	; 0x40
				return stm32ipl_err_SeekingFile;
 801a33c:	f06f 0709 	mvn.w	r7, #9
				xfree(outData);
 801a340:	f000 f8c4 	bl	801a4cc <xfree>
				return stm32ipl_err_SeekingFile;
 801a344:	f7fe bf29 	b.w	801919a <STM32Ipl_ReadImage+0x8a>
			for (uint32_t i = 0; i < abs(height); i++) {
 801a348:	930a      	str	r3, [sp, #40]	; 0x28
 801a34a:	e465      	b.n	8019c18 <STM32Ipl_ReadImage+0xb08>
				xfree(outData);
 801a34c:	9810      	ldr	r0, [sp, #64]	; 0x40
				return stm32ipl_err_OutOfMemory;
 801a34e:	f06f 0702 	mvn.w	r7, #2
				xfree(outData);
 801a352:	f000 f8bb 	bl	801a4cc <xfree>
				return stm32ipl_err_OutOfMemory;
 801a356:	f7fe bf20 	b.w	801919a <STM32Ipl_ReadImage+0x8a>
				for (uint32_t i = 0; i < abs(height); i++) {
 801a35a:	930b      	str	r3, [sp, #44]	; 0x2c
 801a35c:	e48c      	b.n	8019c78 <STM32Ipl_ReadImage+0xb68>
				for (uint32_t i = 0; i < abs(height); i++) {
 801a35e:	9308      	str	r3, [sp, #32]
 801a360:	f7ff ba80 	b.w	8019864 <STM32Ipl_ReadImage+0x754>
				xfree(lineData);
 801a364:	4638      	mov	r0, r7
				for (uint32_t i = 0; i < abs(height); i++) {
 801a366:	930b      	str	r3, [sp, #44]	; 0x2c
				xfree(lineData);
 801a368:	e488      	b.n	8019c7c <STM32Ipl_ReadImage+0xb6c>
 801a36a:	bf00      	nop
 801a36c:	fffff800 	.word	0xfffff800

0801a370 <STM32Ipl_WriteImage>:
 * filename	Name of the output file; if it is not valid, an error is returned.
 * return	stm32ipl_err_Ok on success, error otherwise.
 */
stm32ipl_err_t STM32Ipl_WriteImage(const image_t *img, const char *filename)
{
	if (!img || !img->data || !filename)
 801a370:	2800      	cmp	r0, #0
 801a372:	f000 8098 	beq.w	801a4a6 <STM32Ipl_WriteImage+0x136>
{
 801a376:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!img || !img->data || !filename)
 801a378:	68c3      	ldr	r3, [r0, #12]
 801a37a:	4604      	mov	r4, r0
 801a37c:	2b00      	cmp	r3, #0
 801a37e:	f000 808f 	beq.w	801a4a0 <STM32Ipl_WriteImage+0x130>
 801a382:	460d      	mov	r5, r1
 801a384:	2900      	cmp	r1, #0
 801a386:	f000 808b 	beq.w	801a4a0 <STM32Ipl_WriteImage+0x130>
		return stm32ipl_err_InvalidParameter;

	if (img->bpp != IMAGE_BPP_BINARY && img->bpp != IMAGE_BPP_GRAYSCALE && img->bpp != IMAGE_BPP_RGB565
 801a38a:	6883      	ldr	r3, [r0, #8]
 801a38c:	2b02      	cmp	r3, #2
 801a38e:	d901      	bls.n	801a394 <STM32Ipl_WriteImage+0x24>
 801a390:	2b04      	cmp	r3, #4
 801a392:	d12a      	bne.n	801a3ea <STM32Ipl_WriteImage+0x7a>
	len = strlen(filename);
 801a394:	4628      	mov	r0, r5
 801a396:	f7e5 ffad 	bl	80002f4 <strlen>
 801a39a:	4607      	mov	r7, r0
	upFilename = xalloc(len);
 801a39c:	f000 f888 	bl	801a4b0 <xalloc>
	strcpy(upFilename, filename);
 801a3a0:	4629      	mov	r1, r5
	upFilename = xalloc(len);
 801a3a2:	4606      	mov	r6, r0
	strcpy(upFilename, filename);
 801a3a4:	f00b faab 	bl	80258fe <strcpy>
	for (size_t i = 0; i < len; i++)
 801a3a8:	b1e7      	cbz	r7, 801a3e4 <STM32Ipl_WriteImage+0x74>
 801a3aa:	1e79      	subs	r1, r7, #1
 801a3ac:	1e73      	subs	r3, r6, #1
 801a3ae:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 801a4ac <STM32Ipl_WriteImage+0x13c>
 801a3b2:	4431      	add	r1, r6
		upFilename[i] = toupper(upFilename[i]);
 801a3b4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 801a3b8:	f81c 0002 	ldrb.w	r0, [ip, r2]
 801a3bc:	f000 0003 	and.w	r0, r0, #3
 801a3c0:	2802      	cmp	r0, #2
 801a3c2:	d015      	beq.n	801a3f0 <STM32Ipl_WriteImage+0x80>
	for (size_t i = 0; i < len; i++)
 801a3c4:	4299      	cmp	r1, r3
 801a3c6:	d1f5      	bne.n	801a3b4 <STM32Ipl_WriteImage+0x44>
	if (len >= 5) {
 801a3c8:	2f04      	cmp	r7, #4
	ptr = upFilename + len;
 801a3ca:	eb06 0307 	add.w	r3, r6, r7
	if (len >= 5) {
 801a3ce:	d917      	bls.n	801a400 <STM32Ipl_WriteImage+0x90>
		if ((ptr[-1] == 'G') && (ptr[-2] == 'E') && (ptr[-3] == 'P') && (ptr[-4] == 'J') && (ptr[-5] == '.'))
 801a3d0:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 801a3d4:	2a47      	cmp	r2, #71	; 0x47
 801a3d6:	d036      	beq.n	801a446 <STM32Ipl_WriteImage+0xd6>
			if ((ptr[-1] == 'P') && (ptr[-2] == 'M') && (ptr[-3] == 'B') && (ptr[-4] == '.'))
 801a3d8:	2a50      	cmp	r2, #80	; 0x50
 801a3da:	d117      	bne.n	801a40c <STM32Ipl_WriteImage+0x9c>
 801a3dc:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 801a3e0:	2a4d      	cmp	r2, #77	; 0x4d
 801a3e2:	d035      	beq.n	801a450 <STM32Ipl_WriteImage+0xe0>
	xfree(upFilename);
 801a3e4:	4630      	mov	r0, r6
 801a3e6:	f000 f871 	bl	801a4cc <xfree>

		default:
			break;
	}

	return stm32ipl_err_UnsupportedFormat;
 801a3ea:	f06f 0004 	mvn.w	r0, #4
}
 801a3ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		upFilename[i] = toupper(upFilename[i]);
 801a3f0:	3a20      	subs	r2, #32
	for (size_t i = 0; i < len; i++)
 801a3f2:	4299      	cmp	r1, r3
		upFilename[i] = toupper(upFilename[i]);
 801a3f4:	701a      	strb	r2, [r3, #0]
	for (size_t i = 0; i < len; i++)
 801a3f6:	d1dd      	bne.n	801a3b4 <STM32Ipl_WriteImage+0x44>
	if (len >= 5) {
 801a3f8:	2f04      	cmp	r7, #4
	ptr = upFilename + len;
 801a3fa:	eb06 0307 	add.w	r3, r6, r7
	if (len >= 5) {
 801a3fe:	d8e7      	bhi.n	801a3d0 <STM32Ipl_WriteImage+0x60>
	if (len >= 4) {
 801a400:	d1f0      	bne.n	801a3e4 <STM32Ipl_WriteImage+0x74>
		if ((ptr[-1] == 'G') && (ptr[-2] == 'P') && (ptr[-3] == 'J') && (ptr[-4] == '.'))
 801a402:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 801a406:	2a47      	cmp	r2, #71	; 0x47
 801a408:	d1e6      	bne.n	801a3d8 <STM32Ipl_WriteImage+0x68>
 801a40a:	e7eb      	b.n	801a3e4 <STM32Ipl_WriteImage+0x74>
				if ((ptr[-1] == 'M') && (ptr[-2] == 'P') && (ptr[-3] == 'P') && (ptr[-4] == '.'))
 801a40c:	2a4d      	cmp	r2, #77	; 0x4d
 801a40e:	d1e9      	bne.n	801a3e4 <STM32Ipl_WriteImage+0x74>
 801a410:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 801a414:	2a50      	cmp	r2, #80	; 0x50
 801a416:	d02c      	beq.n	801a472 <STM32Ipl_WriteImage+0x102>
					if ((ptr[-1] == 'M') && (ptr[-2] == 'G') && (ptr[-3] == 'P') && (ptr[-4] == '.'))
 801a418:	2a47      	cmp	r2, #71	; 0x47
 801a41a:	d1e3      	bne.n	801a3e4 <STM32Ipl_WriteImage+0x74>
 801a41c:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 801a420:	2a50      	cmp	r2, #80	; 0x50
 801a422:	d1df      	bne.n	801a3e4 <STM32Ipl_WriteImage+0x74>
 801a424:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 801a428:	2b2e      	cmp	r3, #46	; 0x2e
 801a42a:	d1db      	bne.n	801a3e4 <STM32Ipl_WriteImage+0x74>
	xfree(upFilename);
 801a42c:	4630      	mov	r0, r6
 801a42e:	f000 f84d 	bl	801a4cc <xfree>
	switch (img->bpp) {
 801a432:	68a3      	ldr	r3, [r4, #8]
 801a434:	2b01      	cmp	r3, #1
 801a436:	d1d8      	bne.n	801a3ea <STM32Ipl_WriteImage+0x7a>
	return savePnm(img, filename, format);
 801a438:	4629      	mov	r1, r5
 801a43a:	4620      	mov	r0, r4
 801a43c:	2205      	movs	r2, #5
}
 801a43e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return savePnm(img, filename, format);
 801a442:	f7fe bda9 	b.w	8018f98 <savePnm>
		if ((ptr[-1] == 'G') && (ptr[-2] == 'E') && (ptr[-3] == 'P') && (ptr[-4] == 'J') && (ptr[-5] == '.'))
 801a446:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 801a44a:	2a45      	cmp	r2, #69	; 0x45
 801a44c:	d0ca      	beq.n	801a3e4 <STM32Ipl_WriteImage+0x74>
 801a44e:	e7c9      	b.n	801a3e4 <STM32Ipl_WriteImage+0x74>
			if ((ptr[-1] == 'P') && (ptr[-2] == 'M') && (ptr[-3] == 'B') && (ptr[-4] == '.'))
 801a450:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 801a454:	2a42      	cmp	r2, #66	; 0x42
 801a456:	d1c5      	bne.n	801a3e4 <STM32Ipl_WriteImage+0x74>
 801a458:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 801a45c:	2b2e      	cmp	r3, #46	; 0x2e
 801a45e:	d1c1      	bne.n	801a3e4 <STM32Ipl_WriteImage+0x74>
	xfree(upFilename);
 801a460:	4630      	mov	r0, r6
 801a462:	f000 f833 	bl	801a4cc <xfree>
			return saveBmp(img, filename);
 801a466:	4629      	mov	r1, r5
 801a468:	4620      	mov	r0, r4
}
 801a46a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			return saveBmp(img, filename);
 801a46e:	f7fe bbdb 	b.w	8018c28 <saveBmp>
				if ((ptr[-1] == 'M') && (ptr[-2] == 'P') && (ptr[-3] == 'P') && (ptr[-4] == '.'))
 801a472:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 801a476:	2a50      	cmp	r2, #80	; 0x50
 801a478:	d1b4      	bne.n	801a3e4 <STM32Ipl_WriteImage+0x74>
 801a47a:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 801a47e:	2b2e      	cmp	r3, #46	; 0x2e
 801a480:	d1b0      	bne.n	801a3e4 <STM32Ipl_WriteImage+0x74>
	xfree(upFilename);
 801a482:	4630      	mov	r0, r6
 801a484:	f000 f822 	bl	801a4cc <xfree>
	switch (img->bpp) {
 801a488:	68a3      	ldr	r3, [r4, #8]
 801a48a:	2b02      	cmp	r3, #2
 801a48c:	d001      	beq.n	801a492 <STM32Ipl_WriteImage+0x122>
 801a48e:	2b04      	cmp	r3, #4
 801a490:	d1ab      	bne.n	801a3ea <STM32Ipl_WriteImage+0x7a>
	return savePnm(img, filename, format);
 801a492:	4629      	mov	r1, r5
 801a494:	4620      	mov	r0, r4
 801a496:	2206      	movs	r2, #6
}
 801a498:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return savePnm(img, filename, format);
 801a49c:	f7fe bd7c 	b.w	8018f98 <savePnm>
		return stm32ipl_err_InvalidParameter;
 801a4a0:	f06f 0001 	mvn.w	r0, #1
}
 801a4a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return stm32ipl_err_InvalidParameter;
 801a4a6:	f06f 0001 	mvn.w	r0, #1
}
 801a4aa:	4770      	bx	lr
 801a4ac:	0809ad41 	.word	0x0809ad41

0801a4b0 <xalloc>:
 * @param size	Size of the memory buffer to be allocated (bytes).
 * @return		The allocated memory buffer, null in case of errors.
 */
void* xalloc(uint32_t size)
{
	return umm_malloc(size);
 801a4b0:	f000 baf8 	b.w	801aaa4 <umm_malloc>

0801a4b4 <xalloc0>:
 * Such buffer must be released with xfree().
 * @param size	Size of the memory buffer to be allocated (bytes).
 * @return		The allocated memory buffer, null in case of errors.
 */
void* xalloc0(uint32_t size)
{
 801a4b4:	b538      	push	{r3, r4, r5, lr}
 801a4b6:	4605      	mov	r5, r0
	void *mem = umm_malloc(size);
 801a4b8:	f000 faf4 	bl	801aaa4 <umm_malloc>

	if (mem == NULL)
 801a4bc:	4604      	mov	r4, r0
 801a4be:	b118      	cbz	r0, 801a4c8 <xalloc0+0x14>
		return NULL;

	memset(mem, 0, size);
 801a4c0:	462a      	mov	r2, r5
 801a4c2:	2100      	movs	r1, #0
 801a4c4:	f00a fcba 	bl	8024e3c <memset>

	return mem;
}
 801a4c8:	4620      	mov	r0, r4
 801a4ca:	bd38      	pop	{r3, r4, r5, pc}

0801a4cc <xfree>:
 * @param mem	Pointer to the the memory buffer to be released.
 * @return		void
 */
void xfree(void *mem)
{
	umm_free(mem);
 801a4cc:	f000 ba92 	b.w	801a9f4 <umm_free>

0801a4d0 <fb_init>:
 * hood, uses heap memory .
 * @return		void.
 */
void fb_init(void)
{
	memset(g_fb_alloc_stack, 0, sizeof(uint32_t) * FB_ALLOC_MAX_ENTRY);
 801a4d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 801a4d4:	2100      	movs	r1, #0
 801a4d6:	4805      	ldr	r0, [pc, #20]	; (801a4ec <fb_init+0x1c>)
{
 801a4d8:	b508      	push	{r3, lr}
	memset(g_fb_alloc_stack, 0, sizeof(uint32_t) * FB_ALLOC_MAX_ENTRY);
 801a4da:	f00a fcaf 	bl	8024e3c <memset>
	g_fb_alloc_inext = 0;
 801a4de:	2300      	movs	r3, #0
 801a4e0:	4903      	ldr	r1, [pc, #12]	; (801a4f0 <fb_init+0x20>)
	g_fb_alloc_imark = 0;
 801a4e2:	4a04      	ldr	r2, [pc, #16]	; (801a4f4 <fb_init+0x24>)
	g_fb_alloc_inext = 0;
 801a4e4:	600b      	str	r3, [r1, #0]
	g_fb_alloc_imark = 0;
 801a4e6:	6013      	str	r3, [r2, #0]
}
 801a4e8:	bd08      	pop	{r3, pc}
 801a4ea:	bf00      	nop
 801a4ec:	20009588 	.word	0x20009588
 801a4f0:	20009584 	.word	0x20009584
 801a4f4:	20009580 	.word	0x20009580

0801a4f8 <STM32Ipl_Downscale>:
	int32_t dstW;
	int32_t dstH;
	int32_t wRatio;
	int32_t hRatio;

	STM32IPL_CHECK_VALID_IMAGE(src)
 801a4f8:	2800      	cmp	r0, #0
 801a4fa:	f000 81dd 	beq.w	801a8b8 <STM32Ipl_Downscale+0x3c0>
 801a4fe:	68c3      	ldr	r3, [r0, #12]
{
 801a500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a504:	4681      	mov	r9, r0
 801a506:	b089      	sub	sp, #36	; 0x24
	STM32IPL_CHECK_VALID_IMAGE(dst)
 801a508:	2b00      	cmp	r3, #0
 801a50a:	f000 81d2 	beq.w	801a8b2 <STM32Ipl_Downscale+0x3ba>
 801a50e:	460e      	mov	r6, r1
 801a510:	2900      	cmp	r1, #0
 801a512:	f000 81ce 	beq.w	801a8b2 <STM32Ipl_Downscale+0x3ba>
 801a516:	68cb      	ldr	r3, [r1, #12]
 801a518:	2b00      	cmp	r3, #0
 801a51a:	f000 81ca 	beq.w	801a8b2 <STM32Ipl_Downscale+0x3ba>
	STM32IPL_CHECK_FORMAT(src, STM32IPL_IF_ALL)
 801a51e:	210f      	movs	r1, #15
 801a520:	4617      	mov	r7, r2
 801a522:	f7fe fabb 	bl	8018a9c <STM32Ipl_ImageFormatSupported>
 801a526:	b378      	cbz	r0, 801a588 <STM32Ipl_Downscale+0x90>
	STM32IPL_CHECK_SAME_FORMAT(src, dst)
 801a528:	f8d9 4008 	ldr.w	r4, [r9, #8]
 801a52c:	68b3      	ldr	r3, [r6, #8]
 801a52e:	429c      	cmp	r4, r3
 801a530:	f040 81bf 	bne.w	801a8b2 <STM32Ipl_Downscale+0x3ba>

	if ((dst->w < 1) || (dst->h < 1))
 801a534:	f8d6 8000 	ldr.w	r8, [r6]
 801a538:	f1b8 0f00 	cmp.w	r8, #0
 801a53c:	f340 81b9 	ble.w	801a8b2 <STM32Ipl_Downscale+0x3ba>
 801a540:	6871      	ldr	r1, [r6, #4]
 801a542:	2900      	cmp	r1, #0
 801a544:	9101      	str	r1, [sp, #4]
 801a546:	f340 81b4 	ble.w	801a8b2 <STM32Ipl_Downscale+0x3ba>

	dstW = dst->w;
	dstH = dst->h;

	wRatio = (int32_t) ((src->w << 16) / dst->w) + 1;
	hRatio = (int32_t) ((src->h << 16) / dst->h) + 1;
 801a54a:	e9d9 b200 	ldrd	fp, r2, [r9]
 801a54e:	0412      	lsls	r2, r2, #16
	wRatio = (int32_t) ((src->w << 16) / dst->w) + 1;
 801a550:	ea4f 430b 	mov.w	r3, fp, lsl #16
	hRatio = (int32_t) ((src->h << 16) / dst->h) + 1;
 801a554:	fb92 f2f1 	sdiv	r2, r2, r1
	wRatio = (int32_t) ((src->w << 16) / dst->w) + 1;
 801a558:	fb93 f3f8 	sdiv	r3, r3, r8
	hRatio = (int32_t) ((src->h << 16) / dst->h) + 1;
 801a55c:	1c51      	adds	r1, r2, #1
	wRatio = (int32_t) ((src->w << 16) / dst->w) + 1;
 801a55e:	1c5d      	adds	r5, r3, #1
	hRatio = (int32_t) ((src->h << 16) / dst->h) + 1;
 801a560:	9102      	str	r1, [sp, #8]

	if (reversed) {
 801a562:	b147      	cbz	r7, 801a576 <STM32Ipl_Downscale+0x7e>
		switch (src->bpp) {
 801a564:	2c04      	cmp	r4, #4
 801a566:	d80f      	bhi.n	801a588 <STM32Ipl_Downscale+0x90>
 801a568:	e8df f014 	tbh	[pc, r4, lsl #1]
 801a56c:	00e8011d 	.word	0x00e8011d
 801a570:	000e016c 	.word	0x000e016c
 801a574:	0013      	.short	0x0013

			default:
				return stm32ipl_err_UnsupportedFormat;
		}
	} else {
		switch (src->bpp) {
 801a576:	2c04      	cmp	r4, #4
 801a578:	d806      	bhi.n	801a588 <STM32Ipl_Downscale+0x90>
 801a57a:	e8df f014 	tbh	[pc, r4, lsl #1]
 801a57e:	0049      	.short	0x0049
 801a580:	00ef00bd 	.word	0x00ef00bd
 801a584:	008e0005 	.word	0x008e0005
	if (reversed) {
 801a588:	f06f 0004 	mvn.w	r0, #4
				return stm32ipl_err_UnsupportedFormat;
		}
	}

	return stm32ipl_err_Ok;
}
 801a58c:	b009      	add	sp, #36	; 0x24
 801a58e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				for (int32_t y = dstH - 1; y >= 0; y--) {
 801a592:	9901      	ldr	r1, [sp, #4]
 801a594:	f108 30ff 	add.w	r0, r8, #4294967295
 801a598:	9c02      	ldr	r4, [sp, #8]
 801a59a:	43d2      	mvns	r2, r2
 801a59c:	f101 3eff 	add.w	lr, r1, #4294967295
 801a5a0:	fb05 f000 	mul.w	r0, r5, r0
 801a5a4:	68f1      	ldr	r1, [r6, #12]
 801a5a6:	43db      	mvns	r3, r3
 801a5a8:	fb0e fa08 	mul.w	sl, lr, r8
 801a5ac:	f8d9 600c 	ldr.w	r6, [r9, #12]
 801a5b0:	9002      	str	r0, [sp, #8]
 801a5b2:	eba8 0088 	sub.w	r0, r8, r8, lsl #2
 801a5b6:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 801a5ba:	fb0e f904 	mul.w	r9, lr, r4
 801a5be:	448a      	add	sl, r1
 801a5c0:	eb08 0148 	add.w	r1, r8, r8, lsl #1
 801a5c4:	9101      	str	r1, [sp, #4]
 801a5c6:	0041      	lsls	r1, r0, #1
 801a5c8:	9103      	str	r1, [sp, #12]
					rgb888_t *srcRow = IMAGE_COMPUTE_RGB888_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801a5ca:	9901      	ldr	r1, [sp, #4]
 801a5cc:	ea4f 4c29 	mov.w	ip, r9, asr #16
 801a5d0:	9c02      	ldr	r4, [sp, #8]
 801a5d2:	eb01 080a 	add.w	r8, r1, sl
 801a5d6:	fb0b fc0c 	mul.w	ip, fp, ip
 801a5da:	4640      	mov	r0, r8
						IMAGE_PUT_RGB888_PIXEL_FAST(dstRow, x,
 801a5dc:	eb0c 4124 	add.w	r1, ip, r4, asr #16
 801a5e0:	1ec5      	subs	r5, r0, #3
 801a5e2:	441c      	add	r4, r3
 801a5e4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
					for (int x = dstW - 1; x >= 0; x--)
 801a5e8:	45aa      	cmp	sl, r5
						IMAGE_PUT_RGB888_PIXEL_FAST(dstRow, x,
 801a5ea:	eb06 0701 	add.w	r7, r6, r1
 801a5ee:	5a71      	ldrh	r1, [r6, r1]
 801a5f0:	78bf      	ldrb	r7, [r7, #2]
 801a5f2:	f820 1c03 	strh.w	r1, [r0, #-3]
 801a5f6:	4628      	mov	r0, r5
 801a5f8:	70af      	strb	r7, [r5, #2]
					for (int x = dstW - 1; x >= 0; x--)
 801a5fa:	d1ef      	bne.n	801a5dc <STM32Ipl_Downscale+0xe4>
				for (int32_t y = dstH - 1; y >= 0; y--) {
 801a5fc:	f10e 3eff 	add.w	lr, lr, #4294967295
 801a600:	9903      	ldr	r1, [sp, #12]
 801a602:	4491      	add	r9, r2
 801a604:	f1be 3fff 	cmp.w	lr, #4294967295
 801a608:	eb01 0a08 	add.w	sl, r1, r8
 801a60c:	d1dd      	bne.n	801a5ca <STM32Ipl_Downscale+0xd2>
 801a60e:	e14c      	b.n	801a8aa <STM32Ipl_Downscale+0x3b2>
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801a610:	f10b 021f 	add.w	r2, fp, #31
					uint32_t *dstRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(dst, y);
 801a614:	f108 031f 	add.w	r3, r8, #31
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801a618:	f8d9 100c 	ldr.w	r1, [r9, #12]
					uint32_t *dstRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(dst, y);
 801a61c:	f04f 0a00 	mov.w	sl, #0
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801a620:	0952      	lsrs	r2, r2, #5
						IMAGE_PUT_BINARY_PIXEL_FAST(dstRow, x,
 801a622:	f04f 0b01 	mov.w	fp, #1
					uint32_t *dstRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(dst, y);
 801a626:	095b      	lsrs	r3, r3, #5
						IMAGE_PUT_BINARY_PIXEL_FAST(dstRow, x,
 801a628:	4689      	mov	r9, r1
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801a62a:	9205      	str	r2, [sp, #20]
					uint32_t *dstRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(dst, y);
 801a62c:	68f2      	ldr	r2, [r6, #12]
 801a62e:	9306      	str	r3, [sp, #24]
						IMAGE_PUT_BINARY_PIXEL_FAST(dstRow, x,
 801a630:	9407      	str	r4, [sp, #28]
				for (int32_t y = 0; y < dstH; y++) {
 801a632:	e9cd a403 	strd	sl, r4, [sp, #12]
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801a636:	9b03      	ldr	r3, [sp, #12]
 801a638:	2000      	movs	r0, #0
					for (int32_t x = 0; x < dstW; x++)
 801a63a:	9907      	ldr	r1, [sp, #28]
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801a63c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801a640:	9b05      	ldr	r3, [sp, #20]
 801a642:	fb03 fe0e 	mul.w	lr, r3, lr
						IMAGE_PUT_BINARY_PIXEL_FAST(dstRow, x,
 801a646:	eb0e 5360 	add.w	r3, lr, r0, asr #21
 801a64a:	f3c0 4404 	ubfx	r4, r0, #16, #5
 801a64e:	f001 071f 	and.w	r7, r1, #31
 801a652:	eb0a 1661 	add.w	r6, sl, r1, asr #5
 801a656:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
					for (int32_t x = 0; x < dstW; x++)
 801a65a:	3101      	adds	r1, #1
						IMAGE_PUT_BINARY_PIXEL_FAST(dstRow, x,
 801a65c:	fa0b fc07 	lsl.w	ip, fp, r7
 801a660:	4428      	add	r0, r5
 801a662:	40e3      	lsrs	r3, r4
 801a664:	f852 4026 	ldr.w	r4, [r2, r6, lsl #2]
					for (int32_t x = 0; x < dstW; x++)
 801a668:	4588      	cmp	r8, r1
						IMAGE_PUT_BINARY_PIXEL_FAST(dstRow, x,
 801a66a:	f003 0301 	and.w	r3, r3, #1
 801a66e:	ea24 040c 	bic.w	r4, r4, ip
 801a672:	fa03 f307 	lsl.w	r3, r3, r7
 801a676:	ea43 0304 	orr.w	r3, r3, r4
 801a67a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
					for (int32_t x = 0; x < dstW; x++)
 801a67e:	d1e2      	bne.n	801a646 <STM32Ipl_Downscale+0x14e>
				for (int32_t y = 0; y < dstH; y++) {
 801a680:	9b04      	ldr	r3, [sp, #16]
 801a682:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a686:	3301      	adds	r3, #1
 801a688:	4401      	add	r1, r0
 801a68a:	9304      	str	r3, [sp, #16]
 801a68c:	9103      	str	r1, [sp, #12]
 801a68e:	9906      	ldr	r1, [sp, #24]
 801a690:	448a      	add	sl, r1
 801a692:	9901      	ldr	r1, [sp, #4]
 801a694:	4299      	cmp	r1, r3
 801a696:	d1ce      	bne.n	801a636 <STM32Ipl_Downscale+0x13e>
 801a698:	e107      	b.n	801a8aa <STM32Ipl_Downscale+0x3b2>
 801a69a:	eb08 0348 	add.w	r3, r8, r8, lsl #1
	if (reversed) {
 801a69e:	f04f 0c00 	mov.w	ip, #0
 801a6a2:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 801a6a6:	f8d9 000c 	ldr.w	r0, [r9, #12]
				for (int32_t y = 0; y < dstH; y++) {
 801a6aa:	46e6      	mov	lr, ip
 801a6ac:	eb0a 0703 	add.w	r7, sl, r3
	if (reversed) {
 801a6b0:	46e1      	mov	r9, ip
 801a6b2:	9303      	str	r3, [sp, #12]
					rgb888_t *srcRow = IMAGE_COMPUTE_RGB888_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801a6b4:	ea4f 4629 	mov.w	r6, r9, asr #16
 801a6b8:	2100      	movs	r1, #0
 801a6ba:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 801a6be:	fb0b f606 	mul.w	r6, fp, r6
					for (int32_t x = 0; x < dstW; x++)
 801a6c2:	4452      	add	r2, sl
						IMAGE_PUT_RGB888_PIXEL_FAST(dstRow, x,
 801a6c4:	eb06 4321 	add.w	r3, r6, r1, asr #16
 801a6c8:	3203      	adds	r2, #3
 801a6ca:	4429      	add	r1, r5
 801a6cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a6d0:	18c4      	adds	r4, r0, r3
 801a6d2:	5ac3      	ldrh	r3, [r0, r3]
 801a6d4:	78a4      	ldrb	r4, [r4, #2]
 801a6d6:	f822 3c03 	strh.w	r3, [r2, #-3]
 801a6da:	f802 4c01 	strb.w	r4, [r2, #-1]
					for (int32_t x = 0; x < dstW; x++)
 801a6de:	4297      	cmp	r7, r2
 801a6e0:	d1f0      	bne.n	801a6c4 <STM32Ipl_Downscale+0x1cc>
				for (int32_t y = 0; y < dstH; y++) {
 801a6e2:	9b02      	ldr	r3, [sp, #8]
 801a6e4:	f10e 0e01 	add.w	lr, lr, #1
 801a6e8:	44c4      	add	ip, r8
 801a6ea:	4499      	add	r9, r3
 801a6ec:	9b03      	ldr	r3, [sp, #12]
 801a6ee:	441f      	add	r7, r3
 801a6f0:	9b01      	ldr	r3, [sp, #4]
 801a6f2:	4573      	cmp	r3, lr
 801a6f4:	d1de      	bne.n	801a6b4 <STM32Ipl_Downscale+0x1bc>
 801a6f6:	e0d8      	b.n	801a8aa <STM32Ipl_Downscale+0x3b2>
	if (reversed) {
 801a6f8:	2700      	movs	r7, #0
 801a6fa:	4641      	mov	r1, r8
				for (int32_t y = 0; y < dstH; y++) {
 801a6fc:	463c      	mov	r4, r7
 801a6fe:	e9dd ce01 	ldrd	ip, lr, [sp, #4]
					uint8_t *dstRow = IMAGE_COMPUTE_GRAYSCALE_PIXEL_ROW_PTR(dst, y);
 801a702:	68f3      	ldr	r3, [r6, #12]
 801a704:	fb01 f104 	mul.w	r1, r1, r4
 801a708:	f8d9 200c 	ldr.w	r2, [r9, #12]
					uint8_t *srcRow = IMAGE_COMPUTE_GRAYSCALE_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801a70c:	1438      	asrs	r0, r7, #16
					for (int32_t x = 0; x < dstW; x++)
 801a70e:	eb03 0a08 	add.w	sl, r3, r8
 801a712:	440b      	add	r3, r1
 801a714:	fb0b 2000 	mla	r0, fp, r0, r2
					uint8_t *dstRow = IMAGE_COMPUTE_GRAYSCALE_PIXEL_ROW_PTR(dst, y);
 801a718:	2200      	movs	r2, #0
 801a71a:	448a      	add	sl, r1
						IMAGE_PUT_GRAYSCALE_PIXEL_FAST(dstRow, x,
 801a71c:	1411      	asrs	r1, r2, #16
 801a71e:	442a      	add	r2, r5
 801a720:	5c41      	ldrb	r1, [r0, r1]
 801a722:	f803 1b01 	strb.w	r1, [r3], #1
					for (int32_t x = 0; x < dstW; x++)
 801a726:	459a      	cmp	sl, r3
 801a728:	d1f8      	bne.n	801a71c <STM32Ipl_Downscale+0x224>
				for (int32_t y = 0; y < dstH; y++) {
 801a72a:	3401      	adds	r4, #1
 801a72c:	4477      	add	r7, lr
 801a72e:	45a4      	cmp	ip, r4
 801a730:	f000 80bb 	beq.w	801a8aa <STM32Ipl_Downscale+0x3b2>
 801a734:	f8d9 b000 	ldr.w	fp, [r9]
 801a738:	6831      	ldr	r1, [r6, #0]
 801a73a:	e7e2      	b.n	801a702 <STM32Ipl_Downscale+0x20a>
				for (int32_t y = dstH - 1; y >= 0; y--) {
 801a73c:	9b01      	ldr	r3, [sp, #4]
 801a73e:	4640      	mov	r0, r8
 801a740:	1e5c      	subs	r4, r3, #1
 801a742:	e000      	b.n	801a746 <STM32Ipl_Downscale+0x24e>
 801a744:	6830      	ldr	r0, [r6, #0]
						IMAGE_PUT_GRAYSCALE_PIXEL_FAST(dstRow, x,
 801a746:	68f3      	ldr	r3, [r6, #12]
 801a748:	4642      	mov	r2, r8
 801a74a:	2100      	movs	r1, #0
 801a74c:	fb00 3004 	mla	r0, r0, r4, r3
				for (int32_t y = dstH - 1; y >= 0; y--) {
 801a750:	3c01      	subs	r4, #1
 801a752:	f00a fb73 	bl	8024e3c <memset>
 801a756:	1c63      	adds	r3, r4, #1
 801a758:	d1f4      	bne.n	801a744 <STM32Ipl_Downscale+0x24c>
 801a75a:	e0a6      	b.n	801a8aa <STM32Ipl_Downscale+0x3b2>
 801a75c:	f8d6 e00c 	ldr.w	lr, [r6, #12]
					uint16_t *dstRow = IMAGE_COMPUTE_RGB565_PIXEL_ROW_PTR(dst, y);
 801a760:	2700      	movs	r7, #0
					uint16_t *srcRow = IMAGE_COMPUTE_RGB565_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801a762:	f8d9 600c 	ldr.w	r6, [r9, #12]
 801a766:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 801a76a:	eb0e 0448 	add.w	r4, lr, r8, lsl #1
					uint16_t *dstRow = IMAGE_COMPUTE_RGB565_PIXEL_ROW_PTR(dst, y);
 801a76e:	46b9      	mov	r9, r7
				for (int32_t y = 0; y < dstH; y++) {
 801a770:	46bc      	mov	ip, r7
					uint16_t *srcRow = IMAGE_COMPUTE_RGB565_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801a772:	ea4f 4029 	mov.w	r0, r9, asr #16
 801a776:	2200      	movs	r2, #0
 801a778:	eb0e 0347 	add.w	r3, lr, r7, lsl #1
 801a77c:	fb0b f000 	mul.w	r0, fp, r0
						IMAGE_PUT_RGB565_PIXEL_FAST(dstRow, x,
 801a780:	eb00 4122 	add.w	r1, r0, r2, asr #16
 801a784:	442a      	add	r2, r5
 801a786:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 801a78a:	f823 1b02 	strh.w	r1, [r3], #2
					for (int32_t x = 0; x < dstW; x++)
 801a78e:	429c      	cmp	r4, r3
 801a790:	d1f6      	bne.n	801a780 <STM32Ipl_Downscale+0x288>
				for (int32_t y = 0; y < dstH; y++) {
 801a792:	9b02      	ldr	r3, [sp, #8]
 801a794:	f10c 0c01 	add.w	ip, ip, #1
 801a798:	4447      	add	r7, r8
 801a79a:	4454      	add	r4, sl
 801a79c:	4499      	add	r9, r3
 801a79e:	9b01      	ldr	r3, [sp, #4]
 801a7a0:	4563      	cmp	r3, ip
 801a7a2:	d1e6      	bne.n	801a772 <STM32Ipl_Downscale+0x27a>
 801a7a4:	e081      	b.n	801a8aa <STM32Ipl_Downscale+0x3b2>
				for (int32_t y = dstH - 1; y >= 0; y--) {
 801a7a6:	9901      	ldr	r1, [sp, #4]
 801a7a8:	1c57      	adds	r7, r2, #1
					uint32_t *dstRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(dst, y);
 801a7aa:	f108 001f 	add.w	r0, r8, #31
 801a7ae:	f108 34ff 	add.w	r4, r8, #4294967295
				for (int32_t y = dstH - 1; y >= 0; y--) {
 801a7b2:	f101 3eff 	add.w	lr, r1, #4294967295
 801a7b6:	43d2      	mvns	r2, r2
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801a7b8:	f10b 011f 	add.w	r1, fp, #31
					uint32_t *dstRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(dst, y);
 801a7bc:	0940      	lsrs	r0, r0, #5
 801a7be:	fb0e f707 	mul.w	r7, lr, r7
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801a7c2:	f8d9 c00c 	ldr.w	ip, [r9, #12]
 801a7c6:	0949      	lsrs	r1, r1, #5
 801a7c8:	9205      	str	r2, [sp, #20]
 801a7ca:	9701      	str	r7, [sp, #4]
 801a7cc:	43db      	mvns	r3, r3
 801a7ce:	fb04 f205 	mul.w	r2, r4, r5
					uint32_t *dstRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(dst, y);
 801a7d2:	68f7      	ldr	r7, [r6, #12]
 801a7d4:	fb00 fa0e 	mul.w	sl, r0, lr
						IMAGE_PUT_BINARY_PIXEL_FAST(dstRow, x,
 801a7d8:	f04f 0b01 	mov.w	fp, #1
 801a7dc:	9406      	str	r4, [sp, #24]
					uint32_t *dstRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(dst, y);
 801a7de:	9003      	str	r0, [sp, #12]
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801a7e0:	9102      	str	r1, [sp, #8]
 801a7e2:	9204      	str	r2, [sp, #16]
 801a7e4:	9a01      	ldr	r2, [sp, #4]
 801a7e6:	9804      	ldr	r0, [sp, #16]
 801a7e8:	ea4f 4922 	mov.w	r9, r2, asr #16
 801a7ec:	9a02      	ldr	r2, [sp, #8]
					for (int32_t x = dstW - 1; x >= 0; x--)
 801a7ee:	9906      	ldr	r1, [sp, #24]
					uint32_t *srcRow = IMAGE_COMPUTE_BINARY_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801a7f0:	fb02 f909 	mul.w	r9, r2, r9
						IMAGE_PUT_BINARY_PIXEL_FAST(dstRow, x,
 801a7f4:	eb09 5260 	add.w	r2, r9, r0, asr #21
 801a7f8:	f3c0 4404 	ubfx	r4, r0, #16, #5
 801a7fc:	f001 061f 	and.w	r6, r1, #31
 801a800:	eb0a 1561 	add.w	r5, sl, r1, asr #5
 801a804:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
					for (int32_t x = dstW - 1; x >= 0; x--)
 801a808:	3901      	subs	r1, #1
						IMAGE_PUT_BINARY_PIXEL_FAST(dstRow, x,
 801a80a:	fa0b f806 	lsl.w	r8, fp, r6
 801a80e:	4418      	add	r0, r3
 801a810:	40e2      	lsrs	r2, r4
 801a812:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
 801a816:	f002 0201 	and.w	r2, r2, #1
 801a81a:	ea24 0408 	bic.w	r4, r4, r8
 801a81e:	40b2      	lsls	r2, r6
 801a820:	4322      	orrs	r2, r4
 801a822:	f847 2025 	str.w	r2, [r7, r5, lsl #2]
					for (int32_t x = dstW - 1; x >= 0; x--)
 801a826:	1c4a      	adds	r2, r1, #1
 801a828:	d1e4      	bne.n	801a7f4 <STM32Ipl_Downscale+0x2fc>
				for (int32_t y = dstH - 1; y >= 0; y--) {
 801a82a:	9a01      	ldr	r2, [sp, #4]
 801a82c:	f10e 3eff 	add.w	lr, lr, #4294967295
 801a830:	9905      	ldr	r1, [sp, #20]
 801a832:	f1be 3fff 	cmp.w	lr, #4294967295
 801a836:	440a      	add	r2, r1
 801a838:	9201      	str	r2, [sp, #4]
 801a83a:	9a03      	ldr	r2, [sp, #12]
 801a83c:	ebaa 0a02 	sub.w	sl, sl, r2
 801a840:	d1d0      	bne.n	801a7e4 <STM32Ipl_Downscale+0x2ec>
 801a842:	e032      	b.n	801a8aa <STM32Ipl_Downscale+0x3b2>
				for (int32_t y = dstH - 1; y >= 0; y--) {
 801a844:	9901      	ldr	r1, [sp, #4]
 801a846:	f108 30ff 	add.w	r0, r8, #4294967295
 801a84a:	ebc8 7a88 	rsb	sl, r8, r8, lsl #30
 801a84e:	1c54      	adds	r4, r2, #1
 801a850:	f101 3eff 	add.w	lr, r1, #4294967295
 801a854:	68f6      	ldr	r6, [r6, #12]
					uint16_t *srcRow = IMAGE_COMPUTE_RGB565_PIXEL_ROW_PTR(src, (y * hRatio) >> 16);
 801a856:	f8d9 c00c 	ldr.w	ip, [r9, #12]
 801a85a:	43d7      	mvns	r7, r2
 801a85c:	fb0e f108 	mul.w	r1, lr, r8
 801a860:	43db      	mvns	r3, r3
 801a862:	fb05 f200 	mul.w	r2, r5, r0
 801a866:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 801a86a:	fb0e f904 	mul.w	r9, lr, r4
 801a86e:	eb06 0641 	add.w	r6, r6, r1, lsl #1
 801a872:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801a876:	9201      	str	r2, [sp, #4]
 801a878:	ea4f 4429 	mov.w	r4, r9, asr #16
 801a87c:	eb08 0506 	add.w	r5, r8, r6
 801a880:	9901      	ldr	r1, [sp, #4]
 801a882:	fb0b f404 	mul.w	r4, fp, r4
 801a886:	462a      	mov	r2, r5
						IMAGE_PUT_RGB565_PIXEL_FAST(dstRow, x,
 801a888:	eb04 4021 	add.w	r0, r4, r1, asr #16
 801a88c:	4419      	add	r1, r3
 801a88e:	f83c 0010 	ldrh.w	r0, [ip, r0, lsl #1]
 801a892:	f822 0d02 	strh.w	r0, [r2, #-2]!
					for (int x = dstW - 1; x >= 0; x--)
 801a896:	4296      	cmp	r6, r2
 801a898:	d1f6      	bne.n	801a888 <STM32Ipl_Downscale+0x390>
				for (int32_t y = dstH - 1; y >= 0; y--) {
 801a89a:	f10e 3eff 	add.w	lr, lr, #4294967295
 801a89e:	44b9      	add	r9, r7
 801a8a0:	eb0a 0605 	add.w	r6, sl, r5
 801a8a4:	f1be 3fff 	cmp.w	lr, #4294967295
 801a8a8:	d1e6      	bne.n	801a878 <STM32Ipl_Downscale+0x380>
	return stm32ipl_err_Ok;
 801a8aa:	2000      	movs	r0, #0
}
 801a8ac:	b009      	add	sp, #36	; 0x24
 801a8ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	STM32IPL_CHECK_VALID_IMAGE(src)
 801a8b2:	f06f 0001 	mvn.w	r0, #1
 801a8b6:	e669      	b.n	801a58c <STM32Ipl_Downscale+0x94>
 801a8b8:	f06f 0001 	mvn.w	r0, #1
}
 801a8bc:	4770      	bx	lr
 801a8be:	bf00      	nop

0801a8c0 <umm_malloc_core>:
   * When a block removed from the free list, the space used by the free
   * pointers is available for data. That's what the first calculation
   * of size is doing.
   */

  if( size <= (sizeof(((umm_block *)0)->body)) )
 801a8c0:	287c      	cmp	r0, #124	; 0x7c
/* ------------------------------------------------------------------------
 * Must be called only from within critical sections guarded by
 * UMM_CRITICAL_ENTRY() and UMM_CRITICAL_EXIT().
 */

static void *umm_malloc_core( size_t size ) {
 801a8c2:	b4f0      	push	{r4, r5, r6, r7}
  if( size <= (sizeof(((umm_block *)0)->body)) )
 801a8c4:	d96c      	bls.n	801a9a0 <umm_malloc_core+0xe0>
  size -= ( 1 + (sizeof(((umm_block *)0)->body)) );
 801a8c6:	f1a0 047d 	sub.w	r4, r0, #125	; 0x7d
  return( 2 + size/(sizeof(umm_block)) );
 801a8ca:	09e4      	lsrs	r4, r4, #7
 801a8cc:	3402      	adds	r4, #2
 801a8ce:	b2a4      	uxth	r4, r4
   *
   * This part may be customized to be a best-fit, worst-fit, or first-fit
   * algorithm
   */

  cf = UMM_NFREE(0);
 801a8d0:	4b34      	ldr	r3, [pc, #208]	; (801a9a4 <umm_malloc_core+0xe4>)
 801a8d2:	681f      	ldr	r7, [r3, #0]
 801a8d4:	88b8      	ldrh	r0, [r7, #4]

  bestBlock = UMM_NFREE(0);
  bestSize  = 0x7FFF;

  while( cf ) {
 801a8d6:	2800      	cmp	r0, #0
 801a8d8:	d053      	beq.n	801a982 <umm_malloc_core+0xc2>
 801a8da:	4602      	mov	r2, r0
  bestSize  = 0x7FFF;
 801a8dc:	f647 76ff 	movw	r6, #32767	; 0x7fff
    blockSize = (UMM_NBLOCK(cf) & UMM_BLOCKNO_MASK) - cf;
 801a8e0:	eb07 11c2 	add.w	r1, r7, r2, lsl #7
 801a8e4:	880b      	ldrh	r3, [r1, #0]
 801a8e6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801a8ea:	1a9b      	subs	r3, r3, r2
 801a8ec:	b29b      	uxth	r3, r3

    DBGLOG_TRACE( "Looking at block %6i size %6i\n", cf, blockSize );

#if defined UMM_BEST_FIT
    if( (blockSize >= blocks) && (blockSize < bestSize) ) {
 801a8ee:	429c      	cmp	r4, r3
 801a8f0:	bf8c      	ite	hi
 801a8f2:	2500      	movhi	r5, #0
 801a8f4:	2501      	movls	r5, #1
 801a8f6:	42b3      	cmp	r3, r6
 801a8f8:	d202      	bcs.n	801a900 <umm_malloc_core+0x40>
 801a8fa:	b10d      	cbz	r5, 801a900 <umm_malloc_core+0x40>
 801a8fc:	4610      	mov	r0, r2
 801a8fe:	461e      	mov	r6, r3
      break;
#else
#  error "No UMM_*_FIT is defined - check umm_malloc_cfg.h"
#endif

    cf = UMM_NFREE(cf);
 801a900:	888a      	ldrh	r2, [r1, #4]
  while( cf ) {
 801a902:	2a00      	cmp	r2, #0
 801a904:	d1ec      	bne.n	801a8e0 <umm_malloc_core+0x20>
  }

  if( 0x7FFF != bestSize ) {
 801a906:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801a90a:	4296      	cmp	r6, r2
 801a90c:	d03d      	beq.n	801a98a <umm_malloc_core+0xca>
    cf        = bestBlock;
    blockSize = bestSize;
  }

  if( UMM_NBLOCK(cf) & UMM_BLOCKNO_MASK && blockSize >= blocks ) {
 801a90e:	eb07 12c0 	add.w	r2, r7, r0, lsl #7
 801a912:	42b4      	cmp	r4, r6
 801a914:	8813      	ldrh	r3, [r2, #0]
 801a916:	bf8c      	ite	hi
 801a918:	2500      	movhi	r5, #0
 801a91a:	2501      	movls	r5, #1
 801a91c:	f3c3 010e 	ubfx	r1, r3, #0, #15
 801a920:	2900      	cmp	r1, #0
 801a922:	d03a      	beq.n	801a99a <umm_malloc_core+0xda>
 801a924:	b3cd      	cbz	r5, 801a99a <umm_malloc_core+0xda>
     * what we need, unlink it from the free list and mark it as in use, and
     * link the rest of the block back into the freelist as if it was a new
     * block on the free list...
     */

    if( blockSize == blocks ) {
 801a926:	42a6      	cmp	r6, r4
 801a928:	d01f      	beq.n	801a96a <umm_malloc_core+0xaa>
  UMM_NBLOCK(c+blocks) = (UMM_NBLOCK(c) & UMM_BLOCKNO_MASK) | new_freemask;
 801a92a:	4404      	add	r4, r0
 801a92c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801a930:	eb07 11c4 	add.w	r1, r7, r4, lsl #7
 801a934:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801a938:	01e5      	lsls	r5, r4, #7
 801a93a:	537b      	strh	r3, [r7, r5]
  UMM_PBLOCK(c+blocks) = c;
 801a93c:	8048      	strh	r0, [r1, #2]
  UMM_PBLOCK(UMM_NBLOCK(c) & UMM_BLOCKNO_MASK) = (c+blocks);
 801a93e:	8813      	ldrh	r3, [r2, #0]
 801a940:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801a944:	eb07 13c3 	add.w	r3, r7, r3, lsl #7
 801a948:	805c      	strh	r4, [r3, #2]
       * free block from `cf` to `cf + blocks`. So we have to adjust pointers
       * to and from adjacent free blocks.
       */

      /* previous free block */
      UMM_NFREE( UMM_PFREE(cf) ) = cf + blocks;
 801a94a:	88d0      	ldrh	r0, [r2, #6]
  UMM_NBLOCK(c)                                = (c+blocks);
 801a94c:	8014      	strh	r4, [r2, #0]
      UMM_NFREE( UMM_PFREE(cf) ) = cf + blocks;
 801a94e:	b283      	uxth	r3, r0
 801a950:	eb07 13c3 	add.w	r3, r7, r3, lsl #7
 801a954:	809c      	strh	r4, [r3, #4]
      UMM_PFREE( cf + blocks ) = UMM_PFREE(cf);
 801a956:	80c8      	strh	r0, [r1, #6]

      /* next free block */
      UMM_PFREE( UMM_NFREE(cf) ) = cf + blocks;
 801a958:	8890      	ldrh	r0, [r2, #4]
 801a95a:	b283      	uxth	r3, r0
 801a95c:	eb07 13c3 	add.w	r3, r7, r3, lsl #7
 801a960:	80dc      	strh	r4, [r3, #6]
      UMM_NFREE( cf + blocks ) = UMM_NFREE(cf);
 801a962:	8088      	strh	r0, [r1, #4]
    DBGLOG_DEBUG(  "Can't allocate %5i blocks\n", blocks );

    return( (void *)NULL );
  }

  return( (void *)&UMM_DATA(cf) );
 801a964:	1d10      	adds	r0, r2, #4
}
 801a966:	bcf0      	pop	{r4, r5, r6, r7}
 801a968:	4770      	bx	lr
  UMM_NFREE(UMM_PFREE(c)) = UMM_NFREE(c);
 801a96a:	88d0      	ldrh	r0, [r2, #6]
 801a96c:	8894      	ldrh	r4, [r2, #4]
 801a96e:	b283      	uxth	r3, r0
 801a970:	eb07 13c3 	add.w	r3, r7, r3, lsl #7
 801a974:	809c      	strh	r4, [r3, #4]
  UMM_PFREE(UMM_NFREE(c)) = UMM_PFREE(c);
 801a976:	8893      	ldrh	r3, [r2, #4]
 801a978:	eb07 13c3 	add.w	r3, r7, r3, lsl #7
 801a97c:	80d8      	strh	r0, [r3, #6]
  UMM_NBLOCK(c) &= (~UMM_FREELIST_MASK);
 801a97e:	8011      	strh	r1, [r2, #0]
}
 801a980:	e7f0      	b.n	801a964 <umm_malloc_core+0xa4>
  if( 0x7FFF != bestSize ) {
 801a982:	fab4 f584 	clz	r5, r4
  uint16_t blockSize = 0;
 801a986:	4603      	mov	r3, r0
 801a988:	096d      	lsrs	r5, r5, #5
 801a98a:	463a      	mov	r2, r7
 801a98c:	461e      	mov	r6, r3
 801a98e:	2000      	movs	r0, #0
  if( UMM_NBLOCK(cf) & UMM_BLOCKNO_MASK && blockSize >= blocks ) {
 801a990:	8813      	ldrh	r3, [r2, #0]
 801a992:	f3c3 010e 	ubfx	r1, r3, #0, #15
 801a996:	2900      	cmp	r1, #0
 801a998:	d1c4      	bne.n	801a924 <umm_malloc_core+0x64>
    return( (void *)NULL );
 801a99a:	2000      	movs	r0, #0
}
 801a99c:	bcf0      	pop	{r4, r5, r6, r7}
 801a99e:	4770      	bx	lr
    return( 1 );
 801a9a0:	2401      	movs	r4, #1
 801a9a2:	e795      	b.n	801a8d0 <umm_malloc_core+0x10>
 801a9a4:	20009688 	.word	0x20009688

0801a9a8 <umm_init>:
void umm_init( void *UMM_MALLOC_CFG_HEAP_ADDR, uint32_t UMM_MALLOC_CFG_HEAP_SIZE ) {
 801a9a8:	460a      	mov	r2, r1
  memset(umm_heap, 0x00, UMM_MALLOC_CFG_HEAP_SIZE);
 801a9aa:	2100      	movs	r1, #0
void umm_init( void *UMM_MALLOC_CFG_HEAP_ADDR, uint32_t UMM_MALLOC_CFG_HEAP_SIZE ) {
 801a9ac:	b538      	push	{r3, r4, r5, lr}
  umm_numblocks = (UMM_MALLOC_CFG_HEAP_SIZE / sizeof(umm_block));
 801a9ae:	09d3      	lsrs	r3, r2, #7
 801a9b0:	4d0e      	ldr	r5, [pc, #56]	; (801a9ec <umm_init+0x44>)
  umm_heap = (umm_block *)UMM_MALLOC_CFG_HEAP_ADDR;
 801a9b2:	4c0f      	ldr	r4, [pc, #60]	; (801a9f0 <umm_init+0x48>)
  umm_numblocks = (UMM_MALLOC_CFG_HEAP_SIZE / sizeof(umm_block));
 801a9b4:	802b      	strh	r3, [r5, #0]
  umm_heap = (umm_block *)UMM_MALLOC_CFG_HEAP_ADDR;
 801a9b6:	6020      	str	r0, [r4, #0]
  memset(umm_heap, 0x00, UMM_MALLOC_CFG_HEAP_SIZE);
 801a9b8:	f00a fa40 	bl	8024e3c <memset>
    UMM_NBLOCK(1) = UMM_BLOCK_LAST | UMM_FREELIST_MASK;
 801a9bc:	8828      	ldrh	r0, [r5, #0]
    UMM_PBLOCK(UMM_BLOCK_LAST) = 1;
 801a9be:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
    UMM_NBLOCK(0) = 1;
 801a9c2:	6822      	ldr	r2, [r4, #0]
    UMM_NFREE(0)  = 1;
 801a9c4:	f04f 1501 	mov.w	r5, #65537	; 0x10001
    UMM_NBLOCK(1) = UMM_BLOCK_LAST | UMM_FREELIST_MASK;
 801a9c8:	1e41      	subs	r1, r0, #1
    UMM_PBLOCK(UMM_BLOCK_LAST) = 1;
 801a9ca:	4403      	add	r3, r0
    UMM_NBLOCK(0) = 1;
 801a9cc:	2401      	movs	r4, #1
 801a9ce:	2000      	movs	r0, #0
    UMM_NBLOCK(1) = UMM_BLOCK_LAST | UMM_FREELIST_MASK;
 801a9d0:	ea6f 4141 	mvn.w	r1, r1, lsl #17
    UMM_PBLOCK(UMM_BLOCK_LAST) = 1;
 801a9d4:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    UMM_NFREE(0)  = 1;
 801a9d8:	6055      	str	r5, [r2, #4]
    UMM_NBLOCK(1) = UMM_BLOCK_LAST | UMM_FREELIST_MASK;
 801a9da:	ea6f 4151 	mvn.w	r1, r1, lsr #17
    UMM_NBLOCK(0) = 1;
 801a9de:	7014      	strb	r4, [r2, #0]
 801a9e0:	7050      	strb	r0, [r2, #1]
    UMM_NBLOCK(1) = UMM_BLOCK_LAST | UMM_FREELIST_MASK;
 801a9e2:	f8a2 1080 	strh.w	r1, [r2, #128]	; 0x80
    UMM_PBLOCK(UMM_BLOCK_LAST) = 1;
 801a9e6:	709c      	strb	r4, [r3, #2]
 801a9e8:	70d8      	strb	r0, [r3, #3]
}
 801a9ea:	bd38      	pop	{r3, r4, r5, pc}
 801a9ec:	2000968c 	.word	0x2000968c
 801a9f0:	20009688 	.word	0x20009688

0801a9f4 <umm_free>:
  if (umm_heap == NULL) {
 801a9f4:	4b2a      	ldr	r3, [pc, #168]	; (801aaa0 <umm_free+0xac>)
 801a9f6:	6819      	ldr	r1, [r3, #0]
  if( (void *)0 == ptr ) {
 801a9f8:	2800      	cmp	r0, #0
 801a9fa:	d050      	beq.n	801aa9e <umm_free+0xaa>
 801a9fc:	2900      	cmp	r1, #0
 801a9fe:	d04e      	beq.n	801aa9e <umm_free+0xaa>
  c = (((uint8_t *)ptr)-(uint8_t *)(&(umm_heap[0])))/sizeof(umm_block);
 801aa00:	1a40      	subs	r0, r0, r1
  if( UMM_NBLOCK(UMM_NBLOCK(c)) & UMM_FREELIST_MASK ) {
 801aa02:	f3c0 13cf 	ubfx	r3, r0, #7, #16
void umm_free( void *ptr ) {
 801aa06:	b5f0      	push	{r4, r5, r6, r7, lr}
  if( UMM_NBLOCK(UMM_NBLOCK(c)) & UMM_FREELIST_MASK ) {
 801aa08:	eb01 14c3 	add.w	r4, r1, r3, lsl #7
  c = (((uint8_t *)ptr)-(uint8_t *)(&(umm_heap[0])))/sizeof(umm_block);
 801aa0c:	4618      	mov	r0, r3
  if( UMM_NBLOCK(UMM_NBLOCK(c)) & UMM_FREELIST_MASK ) {
 801aa0e:	01de      	lsls	r6, r3, #7
 801aa10:	8823      	ldrh	r3, [r4, #0]
 801aa12:	eb01 12c3 	add.w	r2, r1, r3, lsl #7
 801aa16:	ea4f 1cc3 	mov.w	ip, r3, lsl #7
 801aa1a:	8815      	ldrh	r5, [r2, #0]
 801aa1c:	b2af      	uxth	r7, r5
 801aa1e:	042d      	lsls	r5, r5, #16
 801aa20:	d422      	bmi.n	801aa68 <umm_free+0x74>
  if( UMM_NBLOCK(UMM_PBLOCK(c)) & UMM_FREELIST_MASK ) {
 801aa22:	8865      	ldrh	r5, [r4, #2]
 801aa24:	b2aa      	uxth	r2, r5
 801aa26:	eb01 17c2 	add.w	r7, r1, r2, lsl #7
 801aa2a:	01d2      	lsls	r2, r2, #7
 801aa2c:	f9b7 7000 	ldrsh.w	r7, [r7]
 801aa30:	2f00      	cmp	r7, #0
 801aa32:	db0f      	blt.n	801aa54 <umm_free+0x60>
    UMM_PFREE(UMM_NFREE(0)) = c;
 801aa34:	888f      	ldrh	r7, [r1, #4]
    UMM_NBLOCK(c)          |= UMM_FREELIST_MASK;
 801aa36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    UMM_PFREE(c)            = 0;
 801aa3a:	2500      	movs	r5, #0
    UMM_PFREE(UMM_NFREE(0)) = c;
 801aa3c:	b2ba      	uxth	r2, r7
    UMM_NBLOCK(c)          |= UMM_FREELIST_MASK;
 801aa3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    UMM_PFREE(UMM_NFREE(0)) = c;
 801aa42:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
 801aa46:	80d0      	strh	r0, [r2, #6]
    UMM_NFREE(c)            = UMM_NFREE(0);
 801aa48:	80a7      	strh	r7, [r4, #4]
    UMM_PFREE(c)            = 0;
 801aa4a:	71a5      	strb	r5, [r4, #6]
 801aa4c:	71e5      	strb	r5, [r4, #7]
    UMM_NFREE(0)            = c;
 801aa4e:	8088      	strh	r0, [r1, #4]
    UMM_NBLOCK(c)          |= UMM_FREELIST_MASK;
 801aa50:	538b      	strh	r3, [r1, r6]
}
 801aa52:	bdf0      	pop	{r4, r5, r6, r7, pc}
  UMM_NBLOCK(UMM_PBLOCK(c)) = UMM_NBLOCK(c) | freemask;
 801aa54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801aa58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801aa5c:	528b      	strh	r3, [r1, r2]
  UMM_PBLOCK(UMM_NBLOCK(c)) = UMM_PBLOCK(c);
 801aa5e:	8823      	ldrh	r3, [r4, #0]
 801aa60:	eb01 11c3 	add.w	r1, r1, r3, lsl #7
 801aa64:	804d      	strh	r5, [r1, #2]
}
 801aa66:	bdf0      	pop	{r4, r5, r6, r7, pc}
  UMM_NFREE(UMM_PFREE(c)) = UMM_NFREE(c);
 801aa68:	88d5      	ldrh	r5, [r2, #6]
  UMM_NBLOCK(c) &= (~UMM_FREELIST_MASK);
 801aa6a:	f3c7 070e 	ubfx	r7, r7, #0, #15
  UMM_NFREE(UMM_PFREE(c)) = UMM_NFREE(c);
 801aa6e:	f8b2 e004 	ldrh.w	lr, [r2, #4]
 801aa72:	b2ab      	uxth	r3, r5
 801aa74:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
 801aa78:	f8a3 e004 	strh.w	lr, [r3, #4]
  UMM_PFREE(UMM_NFREE(c)) = UMM_PFREE(c);
 801aa7c:	8893      	ldrh	r3, [r2, #4]
 801aa7e:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
 801aa82:	80dd      	strh	r5, [r3, #6]
  UMM_NBLOCK(c) &= (~UMM_FREELIST_MASK);
 801aa84:	f821 700c 	strh.w	r7, [r1, ip]
    UMM_PBLOCK(UMM_NBLOCK(UMM_NBLOCK(c)) & UMM_BLOCKNO_MASK) = c;
 801aa88:	8823      	ldrh	r3, [r4, #0]
 801aa8a:	eb01 13c3 	add.w	r3, r1, r3, lsl #7
 801aa8e:	881b      	ldrh	r3, [r3, #0]
 801aa90:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801aa94:	eb01 12c3 	add.w	r2, r1, r3, lsl #7
 801aa98:	8050      	strh	r0, [r2, #2]
    UMM_NBLOCK(c) = UMM_NBLOCK(UMM_NBLOCK(c)) & UMM_BLOCKNO_MASK;
 801aa9a:	538b      	strh	r3, [r1, r6]
 801aa9c:	e7c1      	b.n	801aa22 <umm_free+0x2e>
 801aa9e:	4770      	bx	lr
 801aaa0:	20009688 	.word	0x20009688

0801aaa4 <umm_malloc>:

void *umm_malloc( size_t size ) {

  void *ptr = NULL;

  if (umm_heap == NULL) {
 801aaa4:	4b03      	ldr	r3, [pc, #12]	; (801aab4 <umm_malloc+0x10>)
 801aaa6:	681a      	ldr	r2, [r3, #0]
   * a size of 0 - and if we are we'll simply return a null pointer. if not
   * then reduce the size by 1 byte so that the subsequent calculations on
   * the number of blocks to allocate are easier...
   */

  if( 0 == size ) {
 801aaa8:	b112      	cbz	r2, 801aab0 <umm_malloc+0xc>
 801aaaa:	b108      	cbz	r0, 801aab0 <umm_malloc+0xc>

  /* Allocate the memory withing a protected critical section */

  UMM_CRITICAL_ENTRY();

  ptr = umm_malloc_core( size );
 801aaac:	f7ff bf08 	b.w	801a8c0 <umm_malloc_core>

  UMM_CRITICAL_EXIT();

  return( ptr );
}
 801aab0:	2000      	movs	r0, #0
 801aab2:	4770      	bx	lr
 801aab4:	20009688 	.word	0x20009688

0801aab8 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 801aab8:	4603      	mov	r3, r0
 801aaba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 801aabe:	4c15      	ldr	r4, [pc, #84]	; (801ab14 <UTIL_LCD_SetFuncDriver+0x5c>)
  FuncDriver.GetXSize       = pDrv->GetXSize;
  FuncDriver.GetYSize       = pDrv->GetYSize;
  FuncDriver.SetLayer       = pDrv->SetLayer;
  FuncDriver.GetFormat      = pDrv->GetFormat;

  DrawProp->LcdLayer = 0;
 801aac0:	2500      	movs	r5, #0
 801aac2:	4e15      	ldr	r6, [pc, #84]	; (801ab18 <UTIL_LCD_SetFuncDriver+0x60>)
  DrawProp->LcdDevice = 0;
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 801aac4:	4628      	mov	r0, r5
 801aac6:	f106 0114 	add.w	r1, r6, #20
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 801aaca:	e9d3 7200 	ldrd	r7, r2, [r3]
 801aace:	e9c4 7200 	strd	r7, r2, [r4]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 801aad2:	e9d3 7202 	ldrd	r7, r2, [r3, #8]
  DrawProp->LcdLayer = 0;
 801aad6:	60f5      	str	r5, [r6, #12]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 801aad8:	e9c4 7202 	strd	r7, r2, [r4, #8]
  FuncDriver.FillRect       = pDrv->FillRect;
 801aadc:	691a      	ldr	r2, [r3, #16]
  DrawProp->LcdDevice = 0;
 801aade:	6135      	str	r5, [r6, #16]
  FuncDriver.FillRect       = pDrv->FillRect;
 801aae0:	6122      	str	r2, [r4, #16]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 801aae2:	e9d3 7205 	ldrd	r7, r2, [r3, #20]
 801aae6:	e9c4 7205 	strd	r7, r2, [r4, #20]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 801aaea:	e9d3 7208 	ldrd	r7, r2, [r3, #32]
 801aaee:	e9c4 7208 	strd	r7, r2, [r4, #32]
  FuncDriver.GetFormat      = pDrv->GetFormat;
 801aaf2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  FuncDriver.GetXSize       = pDrv->GetXSize;
 801aaf4:	69db      	ldr	r3, [r3, #28]
  FuncDriver.GetFormat      = pDrv->GetFormat;
 801aaf6:	62a2      	str	r2, [r4, #40]	; 0x28
  FuncDriver.GetXSize       = pDrv->GetXSize;
 801aaf8:	61e3      	str	r3, [r4, #28]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 801aafa:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 801aafc:	6a23      	ldr	r3, [r4, #32]
 801aafe:	f106 0118 	add.w	r1, r6, #24
 801ab02:	4628      	mov	r0, r5
 801ab04:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 801ab06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801ab08:	f106 011c 	add.w	r1, r6, #28
 801ab0c:	4628      	mov	r0, r5
}
 801ab0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 801ab12:	4718      	bx	r3
 801ab14:	200096d0 	.word	0x200096d0
 801ab18:	20009690 	.word	0x20009690

0801ab1c <UTIL_LCD_SetLayer>:
/**
  * @brief  Set the LCD layer.
  * @param  Layer  LCD layer
  */
void UTIL_LCD_SetLayer(uint32_t Layer)
{
 801ab1c:	b538      	push	{r3, r4, r5, lr}
  if(FuncDriver.SetLayer != NULL)
 801ab1e:	4b05      	ldr	r3, [pc, #20]	; (801ab34 <UTIL_LCD_SetLayer+0x18>)
 801ab20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ab22:	b133      	cbz	r3, 801ab32 <UTIL_LCD_SetLayer+0x16>
  {
    if(FuncDriver.SetLayer(DrawProp->LcdDevice, Layer) == 0)
 801ab24:	4d04      	ldr	r5, [pc, #16]	; (801ab38 <UTIL_LCD_SetLayer+0x1c>)
 801ab26:	4604      	mov	r4, r0
 801ab28:	4601      	mov	r1, r0
 801ab2a:	6928      	ldr	r0, [r5, #16]
 801ab2c:	4798      	blx	r3
 801ab2e:	b900      	cbnz	r0, 801ab32 <UTIL_LCD_SetLayer+0x16>
    {
      DrawProp->LcdLayer = Layer;
 801ab30:	60ec      	str	r4, [r5, #12]
    }
  }
}
 801ab32:	bd38      	pop	{r3, r4, r5, pc}
 801ab34:	200096d0 	.word	0x200096d0
 801ab38:	20009690 	.word	0x20009690

0801ab3c <UTIL_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
 801ab3c:	4a02      	ldr	r2, [pc, #8]	; (801ab48 <UTIL_LCD_SetTextColor+0xc>)
 801ab3e:	68d3      	ldr	r3, [r2, #12]
 801ab40:	015b      	lsls	r3, r3, #5
 801ab42:	50d0      	str	r0, [r2, r3]
}
 801ab44:	4770      	bx	lr
 801ab46:	bf00      	nop
 801ab48:	20009690 	.word	0x20009690

0801ab4c <UTIL_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 801ab4c:	4b02      	ldr	r3, [pc, #8]	; (801ab58 <UTIL_LCD_SetBackColor+0xc>)
 801ab4e:	68da      	ldr	r2, [r3, #12]
 801ab50:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801ab54:	6058      	str	r0, [r3, #4]
}
 801ab56:	4770      	bx	lr
 801ab58:	20009690 	.word	0x20009690

0801ab5c <UTIL_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 801ab5c:	4b02      	ldr	r3, [pc, #8]	; (801ab68 <UTIL_LCD_SetFont+0xc>)
 801ab5e:	68da      	ldr	r2, [r3, #12]
 801ab60:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801ab64:	6098      	str	r0, [r3, #8]
}
 801ab66:	4770      	bx	lr
 801ab68:	20009690 	.word	0x20009690

0801ab6c <UTIL_LCD_GetFont>:
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *UTIL_LCD_GetFont(void)
{
  return DrawProp[DrawProp->LcdLayer].pFont;
 801ab6c:	4b02      	ldr	r3, [pc, #8]	; (801ab78 <UTIL_LCD_GetFont+0xc>)
 801ab6e:	68da      	ldr	r2, [r3, #12]
 801ab70:	eb03 1342 	add.w	r3, r3, r2, lsl #5
}
 801ab74:	6898      	ldr	r0, [r3, #8]
 801ab76:	4770      	bx	lr
 801ab78:	20009690 	.word	0x20009690

0801ab7c <UTIL_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
 801ab7c:	b570      	push	{r4, r5, r6, lr}
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 801ab7e:	4c13      	ldr	r4, [pc, #76]	; (801abcc <UTIL_LCD_Clear+0x50>)
{
 801ab80:	b082      	sub	sp, #8
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801ab82:	69e2      	ldr	r2, [r4, #28]
 801ab84:	2a02      	cmp	r2, #2
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 801ab86:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801ab8a:	d009      	beq.n	801aba0 <UTIL_LCD_Clear+0x24>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 801ab8c:	2200      	movs	r2, #0
 801ab8e:	4d10      	ldr	r5, [pc, #64]	; (801abd0 <UTIL_LCD_Clear+0x54>)
 801ab90:	e9cd 1000 	strd	r1, r0, [sp]
 801ab94:	4611      	mov	r1, r2
 801ab96:	6920      	ldr	r0, [r4, #16]
 801ab98:	692c      	ldr	r4, [r5, #16]
 801ab9a:	47a0      	blx	r4
}
 801ab9c:	b002      	add	sp, #8
 801ab9e:	bd70      	pop	{r4, r5, r6, pc}
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 801aba0:	0942      	lsrs	r2, r0, #5
 801aba2:	9100      	str	r1, [sp, #0]
 801aba4:	0a05      	lsrs	r5, r0, #8
 801aba6:	f3c0 01c4 	ubfx	r1, r0, #3, #5
 801abaa:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801abae:	6920      	ldr	r0, [r4, #16]
 801abb0:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801abb4:	4e06      	ldr	r6, [pc, #24]	; (801abd0 <UTIL_LCD_Clear+0x54>)
 801abb6:	ea42 0405 	orr.w	r4, r2, r5
 801abba:	2200      	movs	r2, #0
 801abbc:	6935      	ldr	r5, [r6, #16]
 801abbe:	430c      	orrs	r4, r1
 801abc0:	4611      	mov	r1, r2
 801abc2:	9401      	str	r4, [sp, #4]
 801abc4:	47a8      	blx	r5
}
 801abc6:	b002      	add	sp, #8
 801abc8:	bd70      	pop	{r4, r5, r6, pc}
 801abca:	bf00      	nop
 801abcc:	20009690 	.word	0x20009690
 801abd0:	200096d0 	.word	0x200096d0

0801abd4 <UTIL_LCD_DisplayChar>:
{
 801abd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 801abd8:	f8df 8168 	ldr.w	r8, [pc, #360]	; 801ad44 <UTIL_LCD_DisplayChar+0x170>
{
 801abdc:	4683      	mov	fp, r0
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 801abde:	3a20      	subs	r2, #32
{
 801abe0:	b0ad      	sub	sp, #180	; 0xb4
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 801abe2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801abe6:	eb08 1043 	add.w	r0, r8, r3, lsl #5
 801abea:	ea4f 1c43 	mov.w	ip, r3, lsl #5
 801abee:	6880      	ldr	r0, [r0, #8]
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 801abf0:	8886      	ldrh	r6, [r0, #4]
 801abf2:	88c5      	ldrh	r5, [r0, #6]
 801abf4:	1df7      	adds	r7, r6, #7
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 801abf6:	6804      	ldr	r4, [r0, #0]
 801abf8:	fb05 f202 	mul.w	r2, r5, r2
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 801abfc:	10f8      	asrs	r0, r7, #3
  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
 801abfe:	f027 0307 	bic.w	r3, r7, #7
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 801ac02:	fb00 f202 	mul.w	r2, r0, r2
  offset =  8 *((width + 7)/8) -  width ;
 801ac06:	9302      	str	r3, [sp, #8]

  for(i = 0; i < height; i++)
 801ac08:	2d00      	cmp	r5, #0
 801ac0a:	f000 808d 	beq.w	801ad28 <UTIL_LCD_DisplayChar+0x154>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
 801ac0e:	08fb      	lsrs	r3, r7, #3
 801ac10:	4414      	add	r4, r2
 801ac12:	f8df a134 	ldr.w	sl, [pc, #308]	; 801ad48 <UTIL_LCD_DisplayChar+0x174>

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
    {
      for (j = 0; j < width; j++)
      {
        if(line & (1 << (width- j + offset- 1)))
 801ac16:	f04f 0901 	mov.w	r9, #1
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
 801ac1a:	9303      	str	r3, [sp, #12]
 801ac1c:	194b      	adds	r3, r1, r5
 801ac1e:	1c4d      	adds	r5, r1, #1
    switch(((width + 7)/8))
 801ac20:	9903      	ldr	r1, [sp, #12]
 801ac22:	9307      	str	r3, [sp, #28]
 801ac24:	ab14      	add	r3, sp, #80	; 0x50
 801ac26:	2901      	cmp	r1, #1
 801ac28:	f105 32ff 	add.w	r2, r5, #4294967295
 801ac2c:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 801ac30:	9304      	str	r3, [sp, #16]
 801ac32:	ab08      	add	r3, sp, #32
 801ac34:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 801ac38:	9305      	str	r3, [sp, #20]
        if(line & (1 << (width- j + offset- 1)))
 801ac3a:	4663      	mov	r3, ip
    switch(((width + 7)/8))
 801ac3c:	d038      	beq.n	801acb0 <UTIL_LCD_DisplayChar+0xdc>
 801ac3e:	2902      	cmp	r1, #2
 801ac40:	d075      	beq.n	801ad2e <UTIL_LCD_DisplayChar+0x15a>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 801ac42:	7861      	ldrb	r1, [r4, #1]
 801ac44:	7827      	ldrb	r7, [r4, #0]
 801ac46:	0209      	lsls	r1, r1, #8
 801ac48:	78a0      	ldrb	r0, [r4, #2]
 801ac4a:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 801ac4e:	4301      	orrs	r1, r0
    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801ac50:	4443      	add	r3, r8
 801ac52:	69d8      	ldr	r0, [r3, #28]
 801ac54:	2802      	cmp	r0, #2
 801ac56:	d030      	beq.n	801acba <UTIL_LCD_DisplayChar+0xe6>
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
    }
    else
    {
      for (j = 0; j < width; j++)
 801ac58:	b196      	cbz	r6, 801ac80 <UTIL_LCD_DisplayChar+0xac>
 801ac5a:	9802      	ldr	r0, [sp, #8]
      {
        if(line & (1 << (width- j + offset- 1)))
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
 801ac5c:	f8d3 c000 	ldr.w	ip, [r3]
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
 801ac60:	685f      	ldr	r7, [r3, #4]
 801ac62:	3801      	subs	r0, #1
 801ac64:	ab14      	add	r3, sp, #80	; 0x50
 801ac66:	9106      	str	r1, [sp, #24]
        if(line & (1 << (width- j + offset- 1)))
 801ac68:	fa09 fe00 	lsl.w	lr, r9, r0
 801ac6c:	9906      	ldr	r1, [sp, #24]
 801ac6e:	ea1e 0f01 	tst.w	lr, r1
 801ac72:	d060      	beq.n	801ad36 <UTIL_LCD_DisplayChar+0x162>
      for (j = 0; j < width; j++)
 801ac74:	9904      	ldr	r1, [sp, #16]
 801ac76:	3801      	subs	r0, #1
 801ac78:	f843 cb04 	str.w	ip, [r3], #4
 801ac7c:	4299      	cmp	r1, r3
 801ac7e:	d1f3      	bne.n	801ac68 <UTIL_LCD_DisplayChar+0x94>
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 801ac80:	ab14      	add	r3, sp, #80	; 0x50
 801ac82:	f8da 7004 	ldr.w	r7, [sl, #4]
 801ac86:	4659      	mov	r1, fp
 801ac88:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801ac8c:	e9cd 6900 	strd	r6, r9, [sp]
 801ac90:	47b8      	blx	r7
  for(i = 0; i < height; i++)
 801ac92:	9b03      	ldr	r3, [sp, #12]
 801ac94:	441c      	add	r4, r3
 801ac96:	9b07      	ldr	r3, [sp, #28]
 801ac98:	429d      	cmp	r5, r3
 801ac9a:	d045      	beq.n	801ad28 <UTIL_LCD_DisplayChar+0x154>
    switch(((width + 7)/8))
 801ac9c:	9903      	ldr	r1, [sp, #12]
 801ac9e:	3501      	adds	r5, #1
 801aca0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801aca4:	2901      	cmp	r1, #1
 801aca6:	f105 32ff 	add.w	r2, r5, #4294967295
 801acaa:	ea4f 1343 	mov.w	r3, r3, lsl #5
 801acae:	d1c6      	bne.n	801ac3e <UTIL_LCD_DisplayChar+0x6a>
    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801acb0:	4443      	add	r3, r8
      line =  pchar[0];
 801acb2:	7821      	ldrb	r1, [r4, #0]
    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801acb4:	69d8      	ldr	r0, [r3, #28]
 801acb6:	2802      	cmp	r0, #2
 801acb8:	d1ce      	bne.n	801ac58 <UTIL_LCD_DisplayChar+0x84>
      for (j = 0; j < width; j++)
 801acba:	b33e      	cbz	r6, 801ad0c <UTIL_LCD_DisplayChar+0x138>
 801acbc:	9802      	ldr	r0, [sp, #8]
 801acbe:	af08      	add	r7, sp, #32
 801acc0:	9106      	str	r1, [sp, #24]
 801acc2:	f100 3cff 	add.w	ip, r0, #4294967295
 801acc6:	e015      	b.n	801acf4 <UTIL_LCD_DisplayChar+0x120>
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
 801acc8:	f8d3 e000 	ldr.w	lr, [r3]
 801accc:	f10c 3cff 	add.w	ip, ip, #4294967295
 801acd0:	ea4f 40de 	mov.w	r0, lr, lsr #19
 801acd4:	4601      	mov	r1, r0
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 801acd6:	f3ce 00c4 	ubfx	r0, lr, #3, #5
 801acda:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801acde:	ea40 20c1 	orr.w	r0, r0, r1, lsl #11
 801ace2:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
      for (j = 0; j < width; j++)
 801ace6:	9905      	ldr	r1, [sp, #20]
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 801ace8:	ea40 000e 	orr.w	r0, r0, lr
 801acec:	f827 0b02 	strh.w	r0, [r7], #2
      for (j = 0; j < width; j++)
 801acf0:	428f      	cmp	r7, r1
 801acf2:	d00b      	beq.n	801ad0c <UTIL_LCD_DisplayChar+0x138>
        if(line & (1 << (width- j + offset- 1)))
 801acf4:	fa09 f00c 	lsl.w	r0, r9, ip
 801acf8:	9906      	ldr	r1, [sp, #24]
 801acfa:	4208      	tst	r0, r1
 801acfc:	d1e4      	bne.n	801acc8 <UTIL_LCD_DisplayChar+0xf4>
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 801acfe:	f8d3 e004 	ldr.w	lr, [r3, #4]
 801ad02:	f10c 3cff 	add.w	ip, ip, #4294967295
 801ad06:	ea4f 41de 	mov.w	r1, lr, lsr #19
 801ad0a:	e7e4      	b.n	801acd6 <UTIL_LCD_DisplayChar+0x102>
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 801ad0c:	ab08      	add	r3, sp, #32
 801ad0e:	f8da 7004 	ldr.w	r7, [sl, #4]
 801ad12:	4659      	mov	r1, fp
 801ad14:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801ad18:	e9cd 6900 	strd	r6, r9, [sp]
 801ad1c:	47b8      	blx	r7
  for(i = 0; i < height; i++)
 801ad1e:	9b03      	ldr	r3, [sp, #12]
 801ad20:	441c      	add	r4, r3
 801ad22:	9b07      	ldr	r3, [sp, #28]
 801ad24:	429d      	cmp	r5, r3
 801ad26:	d1b9      	bne.n	801ac9c <UTIL_LCD_DisplayChar+0xc8>
}
 801ad28:	b02d      	add	sp, #180	; 0xb4
 801ad2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      line =  (pchar[0]<< 8) | pchar[1];
 801ad2e:	8821      	ldrh	r1, [r4, #0]
 801ad30:	ba49      	rev16	r1, r1
 801ad32:	b289      	uxth	r1, r1
      break;
 801ad34:	e78c      	b.n	801ac50 <UTIL_LCD_DisplayChar+0x7c>
      for (j = 0; j < width; j++)
 801ad36:	9904      	ldr	r1, [sp, #16]
 801ad38:	3801      	subs	r0, #1
 801ad3a:	f843 7b04 	str.w	r7, [r3], #4
 801ad3e:	428b      	cmp	r3, r1
 801ad40:	d192      	bne.n	801ac68 <UTIL_LCD_DisplayChar+0x94>
 801ad42:	e79d      	b.n	801ac80 <UTIL_LCD_DisplayChar+0xac>
 801ad44:	20009690 	.word	0x20009690
 801ad48:	200096d0 	.word	0x200096d0

0801ad4c <UTIL_LCD_DisplayStringAt>:
{
 801ad4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ad50:	4689      	mov	r9, r1
  while (*ptr++) size ++ ;
 801ad52:	4611      	mov	r1, r2
{
 801ad54:	4616      	mov	r6, r2
 801ad56:	4605      	mov	r5, r0
  while (*ptr++) size ++ ;
 801ad58:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ad5c:	2a00      	cmp	r2, #0
 801ad5e:	d041      	beq.n	801ade4 <UTIL_LCD_DisplayStringAt+0x98>
  uint32_t size = 0, xsize = 0;
 801ad60:	2000      	movs	r0, #0
  while (*ptr++) size ++ ;
 801ad62:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ad66:	3001      	adds	r0, #1
 801ad68:	2c00      	cmp	r4, #0
 801ad6a:	d1fa      	bne.n	801ad62 <UTIL_LCD_DisplayStringAt+0x16>
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 801ad6c:	4f1e      	ldr	r7, [pc, #120]	; (801ade8 <UTIL_LCD_DisplayStringAt+0x9c>)
  switch (Mode)
 801ad6e:	2b01      	cmp	r3, #1
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 801ad70:	68fc      	ldr	r4, [r7, #12]
 801ad72:	6979      	ldr	r1, [r7, #20]
 801ad74:	eb07 1444 	add.w	r4, r7, r4, lsl #5
 801ad78:	68a4      	ldr	r4, [r4, #8]
 801ad7a:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801ad7e:	fbb1 f4fc 	udiv	r4, r1, ip
  switch (Mode)
 801ad82:	d029      	beq.n	801add8 <UTIL_LCD_DisplayStringAt+0x8c>
 801ad84:	2b02      	cmp	r3, #2
 801ad86:	d103      	bne.n	801ad90 <UTIL_LCD_DisplayStringAt+0x44>
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
 801ad88:	1a20      	subs	r0, r4, r0
 801ad8a:	fb0c f000 	mul.w	r0, ip, r0
 801ad8e:	1b45      	subs	r5, r0, r5
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 801ad90:	b289      	uxth	r1, r1
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 801ad92:	1e68      	subs	r0, r5, #1
 801ad94:	f647 73fe 	movw	r3, #32766	; 0x7ffe
    refcolumn = 1;
 801ad98:	4298      	cmp	r0, r3
 801ad9a:	bf88      	it	hi
 801ad9c:	2501      	movhi	r5, #1
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 801ad9e:	458c      	cmp	ip, r1
 801ada0:	d818      	bhi.n	801add4 <UTIL_LCD_DisplayStringAt+0x88>
 801ada2:	b1ba      	cbz	r2, 801add4 <UTIL_LCD_DisplayStringAt+0x88>
 801ada4:	f1c6 0801 	rsb	r8, r6, #1
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
 801ada8:	4628      	mov	r0, r5
 801adaa:	4649      	mov	r1, r9
 801adac:	f7ff ff12 	bl	801abd4 <UTIL_LCD_DisplayChar>
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 801adb0:	68fa      	ldr	r2, [r7, #12]
 801adb2:	eb08 0306 	add.w	r3, r8, r6
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 801adb6:	6979      	ldr	r1, [r7, #20]
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 801adb8:	eb07 1042 	add.w	r0, r7, r2, lsl #5
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 801adbc:	f816 2f01 	ldrb.w	r2, [r6, #1]!
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 801adc0:	6880      	ldr	r0, [r0, #8]
 801adc2:	8884      	ldrh	r4, [r0, #4]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 801adc4:	fb03 1314 	mls	r3, r3, r4, r1
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 801adc8:	4425      	add	r5, r4
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 801adca:	b29b      	uxth	r3, r3
 801adcc:	429c      	cmp	r4, r3
 801adce:	d801      	bhi.n	801add4 <UTIL_LCD_DisplayStringAt+0x88>
 801add0:	2a00      	cmp	r2, #0
 801add2:	d1e9      	bne.n	801ada8 <UTIL_LCD_DisplayStringAt+0x5c>
}
 801add4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
 801add8:	1a20      	subs	r0, r4, r0
 801adda:	fb0c f000 	mul.w	r0, ip, r0
 801adde:	eb05 0550 	add.w	r5, r5, r0, lsr #1
      break;
 801ade2:	e7d5      	b.n	801ad90 <UTIL_LCD_DisplayStringAt+0x44>
  uint32_t size = 0, xsize = 0;
 801ade4:	4610      	mov	r0, r2
 801ade6:	e7c1      	b.n	801ad6c <UTIL_LCD_DisplayStringAt+0x20>
 801ade8:	20009690 	.word	0x20009690

0801adec <UTIL_LCD_DrawLine>:
{
 801adec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (Xpos2 >= Xpos1)                 /* The x-values are increasing */
 801adf0:	f64f 77ff 	movw	r7, #65535	; 0xffff
  x_diff = Xpos2 - Xpos1;
 801adf4:	1a16      	subs	r6, r2, r0
  y_diff = Ypos2 - Ypos1;
 801adf6:	1a5c      	subs	r4, r3, r1
  x = Xpos1;                       /* Start x off at the first pixel */
 801adf8:	b205      	sxth	r5, r0
  if (Xpos2 >= Xpos1)                 /* The x-values are increasing */
 801adfa:	4282      	cmp	r2, r0
 801adfc:	bf34      	ite	cc
 801adfe:	463a      	movcc	r2, r7
 801ae00:	2201      	movcs	r2, #1
  if (Ypos2 >= Ypos1)                 /* The y-values are increasing */
 801ae02:	428b      	cmp	r3, r1
 801ae04:	bf28      	it	cs
 801ae06:	2701      	movcs	r7, #1
  deltax = ABS(x_diff);         /* The absolute difference between the x's */
 801ae08:	2e00      	cmp	r6, #0
  y = Ypos1;                       /* Start y off at the first pixel */
 801ae0a:	b20b      	sxth	r3, r1
{
 801ae0c:	ed2d 8b02 	vpush	{d8}
 801ae10:	b085      	sub	sp, #20
  deltax = ABS(x_diff);         /* The absolute difference between the x's */
 801ae12:	bfb8      	it	lt
 801ae14:	4276      	neglt	r6, r6
  if (Xpos2 >= Xpos1)                 /* The x-values are increasing */
 801ae16:	9200      	str	r2, [sp, #0]
  deltay = ABS(y_diff);         /* The absolute difference between the y's */
 801ae18:	ea84 72e4 	eor.w	r2, r4, r4, asr #31
  deltax = ABS(x_diff);         /* The absolute difference between the x's */
 801ae1c:	b236      	sxth	r6, r6
  if (Ypos2 >= Ypos1)                 /* The y-values are increasing */
 801ae1e:	9701      	str	r7, [sp, #4]
  deltay = ABS(y_diff);         /* The absolute difference between the y's */
 801ae20:	eba2 72e4 	sub.w	r2, r2, r4, asr #31
 801ae24:	b212      	sxth	r2, r2
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 801ae26:	4296      	cmp	r6, r2
 801ae28:	db64      	blt.n	801aef4 <UTIL_LCD_DrawLine+0x108>
    num = deltax / 2;
 801ae2a:	2e00      	cmp	r6, #0
 801ae2c:	46b0      	mov	r8, r6
 801ae2e:	f04f 0100 	mov.w	r1, #0
 801ae32:	9f00      	ldr	r7, [sp, #0]
 801ae34:	bfb8      	it	lt
 801ae36:	f106 0801 	addlt.w	r8, r6, #1
 801ae3a:	468b      	mov	fp, r1
 801ae3c:	9100      	str	r1, [sp, #0]
 801ae3e:	ea4f 0868 	mov.w	r8, r8, asr #1
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 801ae42:	2e00      	cmp	r6, #0
 801ae44:	db41      	blt.n	801aeca <UTIL_LCD_DrawLine+0xde>
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, CONVERTARGB88882RGB565(Color));
 801ae46:	9910      	ldr	r1, [sp, #64]	; 0x40
 801ae48:	b292      	uxth	r2, r2
 801ae4a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801ae4c:	f04f 0900 	mov.w	r9, #0
 801ae50:	0949      	lsrs	r1, r1, #5
 801ae52:	9810      	ldr	r0, [sp, #64]	; 0x40
 801ae54:	0a24      	lsrs	r4, r4, #8
 801ae56:	9202      	str	r2, [sp, #8]
 801ae58:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801ae5c:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801ae60:	f404 4278 	and.w	r2, r4, #63488	; 0xf800
 801ae64:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 801af18 <UTIL_LCD_DrawLine+0x12c>
 801ae68:	9703      	str	r7, [sp, #12]
 801ae6a:	430a      	orrs	r2, r1
 801ae6c:	4302      	orrs	r2, r0
 801ae6e:	ee08 2a10 	vmov	s16, r2
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801ae72:	f8da 201c 	ldr.w	r2, [sl, #28]
    UTIL_LCD_SetPixel(x, y, Color);   /* Draw the current pixel */
 801ae76:	b29c      	uxth	r4, r3
 801ae78:	b2ad      	uxth	r5, r5
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
 801ae7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801ae7c:	2a02      	cmp	r2, #2
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
 801ae7e:	4622      	mov	r2, r4
 801ae80:	4629      	mov	r1, r5
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801ae82:	d02e      	beq.n	801aee2 <UTIL_LCD_DrawLine+0xf6>
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
 801ae84:	4823      	ldr	r0, [pc, #140]	; (801af14 <UTIL_LCD_DrawLine+0x128>)
 801ae86:	6980      	ldr	r0, [r0, #24]
 801ae88:	4607      	mov	r7, r0
 801ae8a:	f8da 0010 	ldr.w	r0, [sl, #16]
 801ae8e:	47b8      	blx	r7
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 801ae90:	9b02      	ldr	r3, [sp, #8]
 801ae92:	f109 0901 	add.w	r9, r9, #1
    x += xinc2;                               /* Change the x as appropriate */
 801ae96:	9f03      	ldr	r7, [sp, #12]
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 801ae98:	eb03 0208 	add.w	r2, r3, r8
      x += xinc1;                             /* Change the x as appropriate */
 801ae9c:	9b00      	ldr	r3, [sp, #0]
    x += xinc2;                               /* Change the x as appropriate */
 801ae9e:	19e9      	adds	r1, r5, r7
      x += xinc1;                             /* Change the x as appropriate */
 801aea0:	18e8      	adds	r0, r5, r3
      y += yinc1;                             /* Change the y as appropriate */
 801aea2:	9b01      	ldr	r3, [sp, #4]
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 801aea4:	fa0f f882 	sxth.w	r8, r2
      y += yinc1;                             /* Change the y as appropriate */
 801aea8:	18e3      	adds	r3, r4, r3
    x += xinc2;                               /* Change the x as appropriate */
 801aeaa:	183d      	adds	r5, r7, r0
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 801aeac:	b292      	uxth	r2, r2
    if (num >= den)                           /* Check if numerator >= denominator */
 801aeae:	4546      	cmp	r6, r8
    y += yinc2;                               /* Change the y as appropriate */
 801aeb0:	445b      	add	r3, fp
 801aeb2:	445c      	add	r4, fp
    x += xinc2;                               /* Change the x as appropriate */
 801aeb4:	b22d      	sxth	r5, r5
      num -= den;                             /* Calculate the new numerator value */
 801aeb6:	eba2 0206 	sub.w	r2, r2, r6
    y += yinc2;                               /* Change the y as appropriate */
 801aeba:	b21b      	sxth	r3, r3
    if (num >= den)                           /* Check if numerator >= denominator */
 801aebc:	dc0a      	bgt.n	801aed4 <UTIL_LCD_DrawLine+0xe8>
      num -= den;                             /* Calculate the new numerator value */
 801aebe:	fa0f f882 	sxth.w	r8, r2
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 801aec2:	fa0f f289 	sxth.w	r2, r9
 801aec6:	42b2      	cmp	r2, r6
 801aec8:	ddd3      	ble.n	801ae72 <UTIL_LCD_DrawLine+0x86>
}
 801aeca:	b005      	add	sp, #20
 801aecc:	ecbd 8b02 	vpop	{d8}
 801aed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 801aed4:	fa0f f289 	sxth.w	r2, r9
    x += xinc2;                               /* Change the x as appropriate */
 801aed8:	b20d      	sxth	r5, r1
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 801aeda:	42b2      	cmp	r2, r6
    y += yinc2;                               /* Change the y as appropriate */
 801aedc:	b223      	sxth	r3, r4
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 801aede:	ddc8      	ble.n	801ae72 <UTIL_LCD_DrawLine+0x86>
 801aee0:	e7f3      	b.n	801aeca <UTIL_LCD_DrawLine+0xde>
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, CONVERTARGB88882RGB565(Color));
 801aee2:	4b0c      	ldr	r3, [pc, #48]	; (801af14 <UTIL_LCD_DrawLine+0x128>)
 801aee4:	f8da 0010 	ldr.w	r0, [sl, #16]
 801aee8:	699b      	ldr	r3, [r3, #24]
 801aeea:	461f      	mov	r7, r3
 801aeec:	ee18 3a10 	vmov	r3, s16
 801aef0:	47b8      	blx	r7
}
 801aef2:	e7cd      	b.n	801ae90 <UTIL_LCD_DrawLine+0xa4>
    num = deltay / 2;
 801aef4:	2a00      	cmp	r2, #0
 801aef6:	4690      	mov	r8, r2
 801aef8:	4631      	mov	r1, r6
 801aefa:	f04f 0700 	mov.w	r7, #0
 801aefe:	bfb8      	it	lt
 801af00:	f102 0801 	addlt.w	r8, r2, #1
 801af04:	f8dd b004 	ldr.w	fp, [sp, #4]
 801af08:	4616      	mov	r6, r2
 801af0a:	9701      	str	r7, [sp, #4]
 801af0c:	f348 084f 	sbfx	r8, r8, #1, #16
 801af10:	460a      	mov	r2, r1
 801af12:	e796      	b.n	801ae42 <UTIL_LCD_DrawLine+0x56>
 801af14:	200096d0 	.word	0x200096d0
 801af18:	20009690 	.word	0x20009690

0801af1c <UTIL_LCD_DrawRect>:
{
 801af1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801af20:	4c52      	ldr	r4, [pc, #328]	; (801b06c <UTIL_LCD_DrawRect+0x150>)
{
 801af22:	4683      	mov	fp, r0
 801af24:	460d      	mov	r5, r1
 801af26:	4692      	mov	sl, r2
 801af28:	ed2d 8b02 	vpush	{d8}
 801af2c:	ee08 3a10 	vmov	s16, r3
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801af30:	69e3      	ldr	r3, [r4, #28]
{
 801af32:	b083      	sub	sp, #12
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801af34:	2b02      	cmp	r3, #2
{
 801af36:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801af38:	d037      	beq.n	801afaa <UTIL_LCD_DrawRect+0x8e>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 801af3a:	f8df 8134 	ldr.w	r8, [pc, #308]	; 801b070 <UTIL_LCD_DrawRect+0x154>
 801af3e:	4613      	mov	r3, r2
 801af40:	9700      	str	r7, [sp, #0]
 801af42:	460a      	mov	r2, r1
 801af44:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801af48:	4601      	mov	r1, r0
 801af4a:	6920      	ldr	r0, [r4, #16]
 801af4c:	47b0      	blx	r6
  UTIL_LCD_DrawHLine(Xpos, (Ypos+ Height - 1U), Width, Color);
 801af4e:	ee18 3a10 	vmov	r3, s16
 801af52:	1e5a      	subs	r2, r3, #1
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801af54:	69e3      	ldr	r3, [r4, #28]
 801af56:	2b02      	cmp	r3, #2
  UTIL_LCD_DrawHLine(Xpos, (Ypos+ Height - 1U), Width, Color);
 801af58:	442a      	add	r2, r5
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801af5a:	d070      	beq.n	801b03e <UTIL_LCD_DrawRect+0x122>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 801af5c:	4653      	mov	r3, sl
 801af5e:	4659      	mov	r1, fp
 801af60:	6920      	ldr	r0, [r4, #16]
 801af62:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801af66:	9700      	str	r7, [sp, #0]
 801af68:	47b0      	blx	r6
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801af6a:	69e3      	ldr	r3, [r4, #28]
 801af6c:	2b02      	cmp	r3, #2
 801af6e:	d04e      	beq.n	801b00e <UTIL_LCD_DrawRect+0xf2>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 801af70:	ee18 3a10 	vmov	r3, s16
 801af74:	462a      	mov	r2, r5
 801af76:	4659      	mov	r1, fp
 801af78:	6920      	ldr	r0, [r4, #16]
 801af7a:	f8d8 600c 	ldr.w	r6, [r8, #12]
 801af7e:	9700      	str	r7, [sp, #0]
 801af80:	47b0      	blx	r6
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801af82:	69e3      	ldr	r3, [r4, #28]
  UTIL_LCD_DrawVLine((Xpos + Width - 1U), Ypos, Height, Color);
 801af84:	f10a 31ff 	add.w	r1, sl, #4294967295
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801af88:	2b02      	cmp	r3, #2
  UTIL_LCD_DrawVLine((Xpos + Width - 1U), Ypos, Height, Color);
 801af8a:	4459      	add	r1, fp
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801af8c:	d026      	beq.n	801afdc <UTIL_LCD_DrawRect+0xc0>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 801af8e:	f8d8 600c 	ldr.w	r6, [r8, #12]
 801af92:	ee18 3a10 	vmov	r3, s16
 801af96:	462a      	mov	r2, r5
 801af98:	6920      	ldr	r0, [r4, #16]
 801af9a:	46b4      	mov	ip, r6
 801af9c:	970e      	str	r7, [sp, #56]	; 0x38
}
 801af9e:	b003      	add	sp, #12
 801afa0:	ecbd 8b02 	vpop	{d8}
 801afa4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 801afa8:	4760      	bx	ip
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 801afaa:	0978      	lsrs	r0, r7, #5
 801afac:	f3c7 0ec4 	ubfx	lr, r7, #3, #5
 801afb0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801afb4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 801b070 <UTIL_LCD_DrawRect+0x154>
 801afb8:	f400 61fc 	and.w	r1, r0, #2016	; 0x7e0
 801afbc:	4613      	mov	r3, r2
 801afbe:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801afc2:	462a      	mov	r2, r5
 801afc4:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801afc8:	ea41 000c 	orr.w	r0, r1, ip
 801afcc:	4659      	mov	r1, fp
 801afce:	ea40 0e0e 	orr.w	lr, r0, lr
 801afd2:	6920      	ldr	r0, [r4, #16]
 801afd4:	f8cd e000 	str.w	lr, [sp]
 801afd8:	47b0      	blx	r6
}
 801afda:	e7b8      	b.n	801af4e <UTIL_LCD_DrawRect+0x32>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 801afdc:	0a3a      	lsrs	r2, r7, #8
 801afde:	f3c7 09c4 	ubfx	r9, r7, #3, #5
 801afe2:	097b      	lsrs	r3, r7, #5
 801afe4:	f8d8 e00c 	ldr.w	lr, [r8, #12]
 801afe8:	f402 4678 	and.w	r6, r2, #63488	; 0xf800
 801afec:	6920      	ldr	r0, [r4, #16]
 801afee:	f403 67fc 	and.w	r7, r3, #2016	; 0x7e0
 801aff2:	462a      	mov	r2, r5
 801aff4:	ee18 3a10 	vmov	r3, s16
 801aff8:	46f4      	mov	ip, lr
 801affa:	4337      	orrs	r7, r6
 801affc:	ea47 0709 	orr.w	r7, r7, r9
 801b000:	970e      	str	r7, [sp, #56]	; 0x38
}
 801b002:	b003      	add	sp, #12
 801b004:	ecbd 8b02 	vpop	{d8}
 801b008:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 801b00c:	4760      	bx	ip
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 801b00e:	0978      	lsrs	r0, r7, #5
 801b010:	f3c7 0ec4 	ubfx	lr, r7, #3, #5
 801b014:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801b018:	ee18 3a10 	vmov	r3, s16
 801b01c:	f400 61fc 	and.w	r1, r0, #2016	; 0x7e0
 801b020:	462a      	mov	r2, r5
 801b022:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b026:	f8d8 600c 	ldr.w	r6, [r8, #12]
 801b02a:	ea41 000c 	orr.w	r0, r1, ip
 801b02e:	4659      	mov	r1, fp
 801b030:	ea40 0e0e 	orr.w	lr, r0, lr
 801b034:	6920      	ldr	r0, [r4, #16]
 801b036:	f8cd e000 	str.w	lr, [sp]
 801b03a:	47b0      	blx	r6
}
 801b03c:	e7a1      	b.n	801af82 <UTIL_LCD_DrawRect+0x66>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 801b03e:	0978      	lsrs	r0, r7, #5
 801b040:	f3c7 0ec4 	ubfx	lr, r7, #3, #5
 801b044:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801b048:	4653      	mov	r3, sl
 801b04a:	f400 61fc 	and.w	r1, r0, #2016	; 0x7e0
 801b04e:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801b052:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b056:	ea41 000c 	orr.w	r0, r1, ip
 801b05a:	4659      	mov	r1, fp
 801b05c:	ea40 0e0e 	orr.w	lr, r0, lr
 801b060:	6920      	ldr	r0, [r4, #16]
 801b062:	f8cd e000 	str.w	lr, [sp]
 801b066:	47b0      	blx	r6
}
 801b068:	e77f      	b.n	801af6a <UTIL_LCD_DrawRect+0x4e>
 801b06a:	bf00      	nop
 801b06c:	20009690 	.word	0x20009690
 801b070:	200096d0 	.word	0x200096d0

0801b074 <ai_buffer_get_size>:
 801b074:	b340      	cbz	r0, 801b0c8 <ai_buffer_get_size+0x54>
 801b076:	4b15      	ldr	r3, [pc, #84]	; (801b0cc <ai_buffer_get_size+0x58>)
 801b078:	b430      	push	{r4, r5}
 801b07a:	6802      	ldr	r2, [r0, #0]
 801b07c:	4d14      	ldr	r5, [pc, #80]	; (801b0d0 <ai_buffer_get_size+0x5c>)
 801b07e:	4013      	ands	r3, r2
 801b080:	6984      	ldr	r4, [r0, #24]
 801b082:	42ab      	cmp	r3, r5
 801b084:	6862      	ldr	r2, [r4, #4]
 801b086:	d103      	bne.n	801b090 <ai_buffer_get_size+0x1c>
 801b088:	b111      	cbz	r1, 801b090 <ai_buffer_get_size+0x1c>
 801b08a:	321f      	adds	r2, #31
 801b08c:	f022 021f 	bic.w	r2, r2, #31
 801b090:	7d03      	ldrb	r3, [r0, #20]
 801b092:	6941      	ldr	r1, [r0, #20]
 801b094:	f1a3 0301 	sub.w	r3, r3, #1
 801b098:	f3c1 2117 	ubfx	r1, r1, #8, #24
 801b09c:	fab3 f383 	clz	r3, r3
 801b0a0:	095b      	lsrs	r3, r3, #5
 801b0a2:	428b      	cmp	r3, r1
 801b0a4:	da0c      	bge.n	801b0c0 <ai_buffer_get_size+0x4c>
 801b0a6:	2b01      	cmp	r3, #1
 801b0a8:	d103      	bne.n	801b0b2 <ai_buffer_get_size+0x3e>
 801b0aa:	2902      	cmp	r1, #2
 801b0ac:	f04f 0302 	mov.w	r3, #2
 801b0b0:	d006      	beq.n	801b0c0 <ai_buffer_get_size+0x4c>
 801b0b2:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 801b0b6:	3301      	adds	r3, #1
 801b0b8:	428b      	cmp	r3, r1
 801b0ba:	fb00 f202 	mul.w	r2, r0, r2
 801b0be:	d1f2      	bne.n	801b0a6 <ai_buffer_get_size+0x32>
 801b0c0:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 801b0c4:	bc30      	pop	{r4, r5}
 801b0c6:	4770      	bx	lr
 801b0c8:	4770      	bx	lr
 801b0ca:	bf00      	nop
 801b0cc:	017fffff 	.word	0x017fffff
 801b0d0:	000400c0 	.word	0x000400c0

0801b0d4 <ai_buffer_array_sane>:
 801b0d4:	b138      	cbz	r0, 801b0e6 <ai_buffer_array_sane+0x12>
 801b0d6:	6843      	ldr	r3, [r0, #4]
 801b0d8:	b123      	cbz	r3, 801b0e4 <ai_buffer_array_sane+0x10>
 801b0da:	8840      	ldrh	r0, [r0, #2]
 801b0dc:	3000      	adds	r0, #0
 801b0de:	bf18      	it	ne
 801b0e0:	2001      	movne	r0, #1
 801b0e2:	4770      	bx	lr
 801b0e4:	4618      	mov	r0, r3
 801b0e6:	4770      	bx	lr

0801b0e8 <_ai_platform_acquire_crc>:
 801b0e8:	2001      	movs	r0, #1
 801b0ea:	4770      	bx	lr

0801b0ec <_ai_platform_release_crc>:
 801b0ec:	4770      	bx	lr
 801b0ee:	bf00      	nop

0801b0f0 <ai_platform_get_weights_map>:
 801b0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b0f2:	fab1 f381 	clz	r3, r1
 801b0f6:	095b      	lsrs	r3, r3, #5
 801b0f8:	2800      	cmp	r0, #0
 801b0fa:	bf08      	it	eq
 801b0fc:	2301      	moveq	r3, #1
 801b0fe:	2a00      	cmp	r2, #0
 801b100:	bf14      	ite	ne
 801b102:	461c      	movne	r4, r3
 801b104:	2401      	moveq	r4, #1
 801b106:	b114      	cbz	r4, 801b10e <ai_platform_get_weights_map+0x1e>
 801b108:	2400      	movs	r4, #0
 801b10a:	4620      	mov	r0, r4
 801b10c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b10e:	4b22      	ldr	r3, [pc, #136]	; (801b198 <ai_platform_get_weights_map+0xa8>)
 801b110:	6815      	ldr	r5, [r2, #0]
 801b112:	429d      	cmp	r5, r3
 801b114:	d00c      	beq.n	801b130 <ai_platform_get_weights_map+0x40>
 801b116:	6855      	ldr	r5, [r2, #4]
 801b118:	2d00      	cmp	r5, #0
 801b11a:	d0f5      	beq.n	801b108 <ai_platform_get_weights_map+0x18>
 801b11c:	682e      	ldr	r6, [r5, #0]
 801b11e:	429e      	cmp	r6, r3
 801b120:	d022      	beq.n	801b168 <ai_platform_get_weights_map+0x78>
 801b122:	f1a1 0401 	sub.w	r4, r1, #1
 801b126:	6005      	str	r5, [r0, #0]
 801b128:	fab4 f484 	clz	r4, r4
 801b12c:	0964      	lsrs	r4, r4, #5
 801b12e:	e7ec      	b.n	801b10a <ai_platform_get_weights_map+0x1a>
 801b130:	4606      	mov	r6, r0
 801b132:	1d10      	adds	r0, r2, #4
 801b134:	4615      	mov	r5, r2
 801b136:	460f      	mov	r7, r1
 801b138:	f7ff ffcc 	bl	801b0d4 <ai_buffer_array_sane>
 801b13c:	2800      	cmp	r0, #0
 801b13e:	d0e3      	beq.n	801b108 <ai_platform_get_weights_map+0x18>
 801b140:	88eb      	ldrh	r3, [r5, #6]
 801b142:	429f      	cmp	r7, r3
 801b144:	d1e0      	bne.n	801b108 <ai_platform_get_weights_map+0x18>
 801b146:	1f33      	subs	r3, r6, #4
 801b148:	4620      	mov	r0, r4
 801b14a:	68aa      	ldr	r2, [r5, #8]
 801b14c:	4422      	add	r2, r4
 801b14e:	341c      	adds	r4, #28
 801b150:	6852      	ldr	r2, [r2, #4]
 801b152:	b122      	cbz	r2, 801b15e <ai_platform_get_weights_map+0x6e>
 801b154:	3001      	adds	r0, #1
 801b156:	f843 2f04 	str.w	r2, [r3, #4]!
 801b15a:	4287      	cmp	r7, r0
 801b15c:	d8f5      	bhi.n	801b14a <ai_platform_get_weights_map+0x5a>
 801b15e:	1a3c      	subs	r4, r7, r0
 801b160:	fab4 f484 	clz	r4, r4
 801b164:	0964      	lsrs	r4, r4, #5
 801b166:	e7d0      	b.n	801b10a <ai_platform_get_weights_map+0x1a>
 801b168:	686b      	ldr	r3, [r5, #4]
 801b16a:	3504      	adds	r5, #4
 801b16c:	42b3      	cmp	r3, r6
 801b16e:	d0cc      	beq.n	801b10a <ai_platform_get_weights_map+0x1a>
 801b170:	3804      	subs	r0, #4
 801b172:	462f      	mov	r7, r5
 801b174:	4622      	mov	r2, r4
 801b176:	e003      	b.n	801b180 <ai_platform_get_weights_map+0x90>
 801b178:	f857 3f04 	ldr.w	r3, [r7, #4]!
 801b17c:	42b3      	cmp	r3, r6
 801b17e:	d0c4      	beq.n	801b10a <ai_platform_get_weights_map+0x1a>
 801b180:	3201      	adds	r2, #1
 801b182:	f840 3f04 	str.w	r3, [r0, #4]!
 801b186:	4291      	cmp	r1, r2
 801b188:	d1f6      	bne.n	801b178 <ai_platform_get_weights_map+0x88>
 801b18a:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
 801b18e:	4b02      	ldr	r3, [pc, #8]	; (801b198 <ai_platform_get_weights_map+0xa8>)
 801b190:	429a      	cmp	r2, r3
 801b192:	bf08      	it	eq
 801b194:	2401      	moveq	r4, #1
 801b196:	e7b8      	b.n	801b10a <ai_platform_get_weights_map+0x1a>
 801b198:	a1facade 	.word	0xa1facade

0801b19c <ai_platform_get_activations_map>:
 801b19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b19e:	fab1 f381 	clz	r3, r1
 801b1a2:	095b      	lsrs	r3, r3, #5
 801b1a4:	2800      	cmp	r0, #0
 801b1a6:	bf08      	it	eq
 801b1a8:	2301      	moveq	r3, #1
 801b1aa:	2a00      	cmp	r2, #0
 801b1ac:	bf14      	ite	ne
 801b1ae:	461c      	movne	r4, r3
 801b1b0:	2401      	moveq	r4, #1
 801b1b2:	b114      	cbz	r4, 801b1ba <ai_platform_get_activations_map+0x1e>
 801b1b4:	2400      	movs	r4, #0
 801b1b6:	4620      	mov	r0, r4
 801b1b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b1ba:	4b23      	ldr	r3, [pc, #140]	; (801b248 <ai_platform_get_activations_map+0xac>)
 801b1bc:	6815      	ldr	r5, [r2, #0]
 801b1be:	429d      	cmp	r5, r3
 801b1c0:	d00c      	beq.n	801b1dc <ai_platform_get_activations_map+0x40>
 801b1c2:	6a15      	ldr	r5, [r2, #32]
 801b1c4:	2d00      	cmp	r5, #0
 801b1c6:	d0f5      	beq.n	801b1b4 <ai_platform_get_activations_map+0x18>
 801b1c8:	682e      	ldr	r6, [r5, #0]
 801b1ca:	429e      	cmp	r6, r3
 801b1cc:	d023      	beq.n	801b216 <ai_platform_get_activations_map+0x7a>
 801b1ce:	f1a1 0401 	sub.w	r4, r1, #1
 801b1d2:	6005      	str	r5, [r0, #0]
 801b1d4:	fab4 f484 	clz	r4, r4
 801b1d8:	0964      	lsrs	r4, r4, #5
 801b1da:	e7ec      	b.n	801b1b6 <ai_platform_get_activations_map+0x1a>
 801b1dc:	4606      	mov	r6, r0
 801b1de:	f102 000c 	add.w	r0, r2, #12
 801b1e2:	4615      	mov	r5, r2
 801b1e4:	460f      	mov	r7, r1
 801b1e6:	f7ff ff75 	bl	801b0d4 <ai_buffer_array_sane>
 801b1ea:	2800      	cmp	r0, #0
 801b1ec:	d0e2      	beq.n	801b1b4 <ai_platform_get_activations_map+0x18>
 801b1ee:	89eb      	ldrh	r3, [r5, #14]
 801b1f0:	429f      	cmp	r7, r3
 801b1f2:	d1df      	bne.n	801b1b4 <ai_platform_get_activations_map+0x18>
 801b1f4:	1f33      	subs	r3, r6, #4
 801b1f6:	4620      	mov	r0, r4
 801b1f8:	692a      	ldr	r2, [r5, #16]
 801b1fa:	4422      	add	r2, r4
 801b1fc:	341c      	adds	r4, #28
 801b1fe:	6852      	ldr	r2, [r2, #4]
 801b200:	b122      	cbz	r2, 801b20c <ai_platform_get_activations_map+0x70>
 801b202:	3001      	adds	r0, #1
 801b204:	f843 2f04 	str.w	r2, [r3, #4]!
 801b208:	4287      	cmp	r7, r0
 801b20a:	d8f5      	bhi.n	801b1f8 <ai_platform_get_activations_map+0x5c>
 801b20c:	1a3c      	subs	r4, r7, r0
 801b20e:	fab4 f484 	clz	r4, r4
 801b212:	0964      	lsrs	r4, r4, #5
 801b214:	e7cf      	b.n	801b1b6 <ai_platform_get_activations_map+0x1a>
 801b216:	686b      	ldr	r3, [r5, #4]
 801b218:	3504      	adds	r5, #4
 801b21a:	42b3      	cmp	r3, r6
 801b21c:	d0cb      	beq.n	801b1b6 <ai_platform_get_activations_map+0x1a>
 801b21e:	3804      	subs	r0, #4
 801b220:	462f      	mov	r7, r5
 801b222:	4622      	mov	r2, r4
 801b224:	e003      	b.n	801b22e <ai_platform_get_activations_map+0x92>
 801b226:	f857 3f04 	ldr.w	r3, [r7, #4]!
 801b22a:	42b3      	cmp	r3, r6
 801b22c:	d0c3      	beq.n	801b1b6 <ai_platform_get_activations_map+0x1a>
 801b22e:	3201      	adds	r2, #1
 801b230:	f840 3f04 	str.w	r3, [r0, #4]!
 801b234:	4291      	cmp	r1, r2
 801b236:	d1f6      	bne.n	801b226 <ai_platform_get_activations_map+0x8a>
 801b238:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
 801b23c:	4b02      	ldr	r3, [pc, #8]	; (801b248 <ai_platform_get_activations_map+0xac>)
 801b23e:	429a      	cmp	r2, r3
 801b240:	bf08      	it	eq
 801b242:	2401      	moveq	r4, #1
 801b244:	e7b7      	b.n	801b1b6 <ai_platform_get_activations_map+0x1a>
 801b246:	bf00      	nop
 801b248:	a1facade 	.word	0xa1facade

0801b24c <ai_platform_runtime_get_revision>:
 801b24c:	4a34      	ldr	r2, [pc, #208]	; (801b320 <ai_platform_runtime_get_revision+0xd4>)
 801b24e:	b508      	push	{r3, lr}
 801b250:	6813      	ldr	r3, [r2, #0]
 801b252:	f023 0301 	bic.w	r3, r3, #1
 801b256:	6013      	str	r3, [r2, #0]
 801b258:	f7ff ff46 	bl	801b0e8 <_ai_platform_acquire_crc>
 801b25c:	4b31      	ldr	r3, [pc, #196]	; (801b324 <ai_platform_runtime_get_revision+0xd8>)
 801b25e:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801b262:	681b      	ldr	r3, [r3, #0]
 801b264:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b268:	189a      	adds	r2, r3, r2
 801b26a:	2a01      	cmp	r2, #1
 801b26c:	d91b      	bls.n	801b2a6 <ai_platform_runtime_get_revision+0x5a>
 801b26e:	f240 4249 	movw	r2, #1097	; 0x449
 801b272:	4293      	cmp	r3, r2
 801b274:	d017      	beq.n	801b2a6 <ai_platform_runtime_get_revision+0x5a>
 801b276:	4b2c      	ldr	r3, [pc, #176]	; (801b328 <ai_platform_runtime_get_revision+0xdc>)
 801b278:	681a      	ldr	r2, [r3, #0]
 801b27a:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801b27e:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801b282:	d01f      	beq.n	801b2c4 <ai_platform_runtime_get_revision+0x78>
 801b284:	681a      	ldr	r2, [r3, #0]
 801b286:	f240 4183 	movw	r1, #1155	; 0x483
 801b28a:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801b28e:	428a      	cmp	r2, r1
 801b290:	d036      	beq.n	801b300 <ai_platform_runtime_get_revision+0xb4>
 801b292:	681b      	ldr	r3, [r3, #0]
 801b294:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b298:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801b29c:	d021      	beq.n	801b2e2 <ai_platform_runtime_get_revision+0x96>
 801b29e:	f7ff ff25 	bl	801b0ec <_ai_platform_release_crc>
 801b2a2:	4822      	ldr	r0, [pc, #136]	; (801b32c <ai_platform_runtime_get_revision+0xe0>)
 801b2a4:	bd08      	pop	{r3, pc}
 801b2a6:	4b22      	ldr	r3, [pc, #136]	; (801b330 <ai_platform_runtime_get_revision+0xe4>)
 801b2a8:	2201      	movs	r2, #1
 801b2aa:	4619      	mov	r1, r3
 801b2ac:	601a      	str	r2, [r3, #0]
 801b2ae:	680b      	ldr	r3, [r1, #0]
 801b2b0:	2b00      	cmp	r3, #0
 801b2b2:	d1fc      	bne.n	801b2ae <ai_platform_runtime_get_revision+0x62>
 801b2b4:	4b1f      	ldr	r3, [pc, #124]	; (801b334 <ai_platform_runtime_get_revision+0xe8>)
 801b2b6:	4920      	ldr	r1, [pc, #128]	; (801b338 <ai_platform_runtime_get_revision+0xec>)
 801b2b8:	4a20      	ldr	r2, [pc, #128]	; (801b33c <ai_platform_runtime_get_revision+0xf0>)
 801b2ba:	6019      	str	r1, [r3, #0]
 801b2bc:	681b      	ldr	r3, [r3, #0]
 801b2be:	4293      	cmp	r3, r2
 801b2c0:	d0ed      	beq.n	801b29e <ai_platform_runtime_get_revision+0x52>
 801b2c2:	e7fe      	b.n	801b2c2 <ai_platform_runtime_get_revision+0x76>
 801b2c4:	4b1e      	ldr	r3, [pc, #120]	; (801b340 <ai_platform_runtime_get_revision+0xf4>)
 801b2c6:	2201      	movs	r2, #1
 801b2c8:	4619      	mov	r1, r3
 801b2ca:	601a      	str	r2, [r3, #0]
 801b2cc:	680b      	ldr	r3, [r1, #0]
 801b2ce:	2b00      	cmp	r3, #0
 801b2d0:	d1fc      	bne.n	801b2cc <ai_platform_runtime_get_revision+0x80>
 801b2d2:	4b1c      	ldr	r3, [pc, #112]	; (801b344 <ai_platform_runtime_get_revision+0xf8>)
 801b2d4:	4918      	ldr	r1, [pc, #96]	; (801b338 <ai_platform_runtime_get_revision+0xec>)
 801b2d6:	4a19      	ldr	r2, [pc, #100]	; (801b33c <ai_platform_runtime_get_revision+0xf0>)
 801b2d8:	6019      	str	r1, [r3, #0]
 801b2da:	681b      	ldr	r3, [r3, #0]
 801b2dc:	4293      	cmp	r3, r2
 801b2de:	d0de      	beq.n	801b29e <ai_platform_runtime_get_revision+0x52>
 801b2e0:	e7fe      	b.n	801b2e0 <ai_platform_runtime_get_revision+0x94>
 801b2e2:	4b13      	ldr	r3, [pc, #76]	; (801b330 <ai_platform_runtime_get_revision+0xe4>)
 801b2e4:	2201      	movs	r2, #1
 801b2e6:	4619      	mov	r1, r3
 801b2e8:	601a      	str	r2, [r3, #0]
 801b2ea:	680b      	ldr	r3, [r1, #0]
 801b2ec:	2b00      	cmp	r3, #0
 801b2ee:	d1fc      	bne.n	801b2ea <ai_platform_runtime_get_revision+0x9e>
 801b2f0:	4b10      	ldr	r3, [pc, #64]	; (801b334 <ai_platform_runtime_get_revision+0xe8>)
 801b2f2:	4911      	ldr	r1, [pc, #68]	; (801b338 <ai_platform_runtime_get_revision+0xec>)
 801b2f4:	4a11      	ldr	r2, [pc, #68]	; (801b33c <ai_platform_runtime_get_revision+0xf0>)
 801b2f6:	6019      	str	r1, [r3, #0]
 801b2f8:	681b      	ldr	r3, [r3, #0]
 801b2fa:	4293      	cmp	r3, r2
 801b2fc:	d0cf      	beq.n	801b29e <ai_platform_runtime_get_revision+0x52>
 801b2fe:	e7fe      	b.n	801b2fe <ai_platform_runtime_get_revision+0xb2>
 801b300:	4b0f      	ldr	r3, [pc, #60]	; (801b340 <ai_platform_runtime_get_revision+0xf4>)
 801b302:	2201      	movs	r2, #1
 801b304:	4619      	mov	r1, r3
 801b306:	601a      	str	r2, [r3, #0]
 801b308:	680b      	ldr	r3, [r1, #0]
 801b30a:	2b00      	cmp	r3, #0
 801b30c:	d1fc      	bne.n	801b308 <ai_platform_runtime_get_revision+0xbc>
 801b30e:	4b0d      	ldr	r3, [pc, #52]	; (801b344 <ai_platform_runtime_get_revision+0xf8>)
 801b310:	4909      	ldr	r1, [pc, #36]	; (801b338 <ai_platform_runtime_get_revision+0xec>)
 801b312:	4a0a      	ldr	r2, [pc, #40]	; (801b33c <ai_platform_runtime_get_revision+0xf0>)
 801b314:	6019      	str	r1, [r3, #0]
 801b316:	681b      	ldr	r3, [r3, #0]
 801b318:	4293      	cmp	r3, r2
 801b31a:	d0c0      	beq.n	801b29e <ai_platform_runtime_get_revision+0x52>
 801b31c:	e7fe      	b.n	801b31c <ai_platform_runtime_get_revision+0xd0>
 801b31e:	bf00      	nop
 801b320:	e0002000 	.word	0xe0002000
 801b324:	e0042000 	.word	0xe0042000
 801b328:	5c001000 	.word	0x5c001000
 801b32c:	08028934 	.word	0x08028934
 801b330:	40023008 	.word	0x40023008
 801b334:	40023000 	.word	0x40023000
 801b338:	f407a5c2 	.word	0xf407a5c2
 801b33c:	b5e8b5cd 	.word	0xb5e8b5cd
 801b340:	58024c08 	.word	0x58024c08
 801b344:	58024c00 	.word	0x58024c00

0801b348 <ai_platform_runtime_get_version>:
 801b348:	4a3d      	ldr	r2, [pc, #244]	; (801b440 <ai_platform_runtime_get_version+0xf8>)
 801b34a:	b510      	push	{r4, lr}
 801b34c:	6813      	ldr	r3, [r2, #0]
 801b34e:	b082      	sub	sp, #8
 801b350:	f023 0301 	bic.w	r3, r3, #1
 801b354:	6013      	str	r3, [r2, #0]
 801b356:	f7ff fec7 	bl	801b0e8 <_ai_platform_acquire_crc>
 801b35a:	4b3a      	ldr	r3, [pc, #232]	; (801b444 <ai_platform_runtime_get_version+0xfc>)
 801b35c:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801b360:	681b      	ldr	r3, [r3, #0]
 801b362:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b366:	189a      	adds	r2, r3, r2
 801b368:	2a01      	cmp	r2, #1
 801b36a:	d92c      	bls.n	801b3c6 <ai_platform_runtime_get_version+0x7e>
 801b36c:	f240 4249 	movw	r2, #1097	; 0x449
 801b370:	4293      	cmp	r3, r2
 801b372:	d028      	beq.n	801b3c6 <ai_platform_runtime_get_version+0x7e>
 801b374:	4b34      	ldr	r3, [pc, #208]	; (801b448 <ai_platform_runtime_get_version+0x100>)
 801b376:	681a      	ldr	r2, [r3, #0]
 801b378:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801b37c:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801b380:	d030      	beq.n	801b3e4 <ai_platform_runtime_get_version+0x9c>
 801b382:	681a      	ldr	r2, [r3, #0]
 801b384:	f240 4183 	movw	r1, #1155	; 0x483
 801b388:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801b38c:	428a      	cmp	r2, r1
 801b38e:	d047      	beq.n	801b420 <ai_platform_runtime_get_version+0xd8>
 801b390:	681b      	ldr	r3, [r3, #0]
 801b392:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b396:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801b39a:	d032      	beq.n	801b402 <ai_platform_runtime_get_version+0xba>
 801b39c:	f7ff fea6 	bl	801b0ec <_ai_platform_release_crc>
 801b3a0:	4b2a      	ldr	r3, [pc, #168]	; (801b44c <ai_platform_runtime_get_version+0x104>)
 801b3a2:	2000      	movs	r0, #0
 801b3a4:	681b      	ldr	r3, [r3, #0]
 801b3a6:	b2dc      	uxtb	r4, r3
 801b3a8:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801b3ac:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801b3b0:	0e1b      	lsrs	r3, r3, #24
 801b3b2:	f364 0007 	bfi	r0, r4, #0, #8
 801b3b6:	f361 200f 	bfi	r0, r1, #8, #8
 801b3ba:	f362 4017 	bfi	r0, r2, #16, #8
 801b3be:	f363 601f 	bfi	r0, r3, #24, #8
 801b3c2:	b002      	add	sp, #8
 801b3c4:	bd10      	pop	{r4, pc}
 801b3c6:	4b22      	ldr	r3, [pc, #136]	; (801b450 <ai_platform_runtime_get_version+0x108>)
 801b3c8:	2201      	movs	r2, #1
 801b3ca:	4619      	mov	r1, r3
 801b3cc:	601a      	str	r2, [r3, #0]
 801b3ce:	680b      	ldr	r3, [r1, #0]
 801b3d0:	2b00      	cmp	r3, #0
 801b3d2:	d1fc      	bne.n	801b3ce <ai_platform_runtime_get_version+0x86>
 801b3d4:	4b1f      	ldr	r3, [pc, #124]	; (801b454 <ai_platform_runtime_get_version+0x10c>)
 801b3d6:	4920      	ldr	r1, [pc, #128]	; (801b458 <ai_platform_runtime_get_version+0x110>)
 801b3d8:	4a20      	ldr	r2, [pc, #128]	; (801b45c <ai_platform_runtime_get_version+0x114>)
 801b3da:	6019      	str	r1, [r3, #0]
 801b3dc:	681b      	ldr	r3, [r3, #0]
 801b3de:	4293      	cmp	r3, r2
 801b3e0:	d0dc      	beq.n	801b39c <ai_platform_runtime_get_version+0x54>
 801b3e2:	e7fe      	b.n	801b3e2 <ai_platform_runtime_get_version+0x9a>
 801b3e4:	4b1e      	ldr	r3, [pc, #120]	; (801b460 <ai_platform_runtime_get_version+0x118>)
 801b3e6:	2201      	movs	r2, #1
 801b3e8:	4619      	mov	r1, r3
 801b3ea:	601a      	str	r2, [r3, #0]
 801b3ec:	680b      	ldr	r3, [r1, #0]
 801b3ee:	2b00      	cmp	r3, #0
 801b3f0:	d1fc      	bne.n	801b3ec <ai_platform_runtime_get_version+0xa4>
 801b3f2:	4b1c      	ldr	r3, [pc, #112]	; (801b464 <ai_platform_runtime_get_version+0x11c>)
 801b3f4:	4918      	ldr	r1, [pc, #96]	; (801b458 <ai_platform_runtime_get_version+0x110>)
 801b3f6:	4a19      	ldr	r2, [pc, #100]	; (801b45c <ai_platform_runtime_get_version+0x114>)
 801b3f8:	6019      	str	r1, [r3, #0]
 801b3fa:	681b      	ldr	r3, [r3, #0]
 801b3fc:	4293      	cmp	r3, r2
 801b3fe:	d0cd      	beq.n	801b39c <ai_platform_runtime_get_version+0x54>
 801b400:	e7fe      	b.n	801b400 <ai_platform_runtime_get_version+0xb8>
 801b402:	4b13      	ldr	r3, [pc, #76]	; (801b450 <ai_platform_runtime_get_version+0x108>)
 801b404:	2201      	movs	r2, #1
 801b406:	4619      	mov	r1, r3
 801b408:	601a      	str	r2, [r3, #0]
 801b40a:	680b      	ldr	r3, [r1, #0]
 801b40c:	2b00      	cmp	r3, #0
 801b40e:	d1fc      	bne.n	801b40a <ai_platform_runtime_get_version+0xc2>
 801b410:	4b10      	ldr	r3, [pc, #64]	; (801b454 <ai_platform_runtime_get_version+0x10c>)
 801b412:	4911      	ldr	r1, [pc, #68]	; (801b458 <ai_platform_runtime_get_version+0x110>)
 801b414:	4a11      	ldr	r2, [pc, #68]	; (801b45c <ai_platform_runtime_get_version+0x114>)
 801b416:	6019      	str	r1, [r3, #0]
 801b418:	681b      	ldr	r3, [r3, #0]
 801b41a:	4293      	cmp	r3, r2
 801b41c:	d0be      	beq.n	801b39c <ai_platform_runtime_get_version+0x54>
 801b41e:	e7fe      	b.n	801b41e <ai_platform_runtime_get_version+0xd6>
 801b420:	4b0f      	ldr	r3, [pc, #60]	; (801b460 <ai_platform_runtime_get_version+0x118>)
 801b422:	2201      	movs	r2, #1
 801b424:	4619      	mov	r1, r3
 801b426:	601a      	str	r2, [r3, #0]
 801b428:	680b      	ldr	r3, [r1, #0]
 801b42a:	2b00      	cmp	r3, #0
 801b42c:	d1fc      	bne.n	801b428 <ai_platform_runtime_get_version+0xe0>
 801b42e:	4b0d      	ldr	r3, [pc, #52]	; (801b464 <ai_platform_runtime_get_version+0x11c>)
 801b430:	4909      	ldr	r1, [pc, #36]	; (801b458 <ai_platform_runtime_get_version+0x110>)
 801b432:	4a0a      	ldr	r2, [pc, #40]	; (801b45c <ai_platform_runtime_get_version+0x114>)
 801b434:	6019      	str	r1, [r3, #0]
 801b436:	681b      	ldr	r3, [r3, #0]
 801b438:	4293      	cmp	r3, r2
 801b43a:	d0af      	beq.n	801b39c <ai_platform_runtime_get_version+0x54>
 801b43c:	e7fe      	b.n	801b43c <ai_platform_runtime_get_version+0xf4>
 801b43e:	bf00      	nop
 801b440:	e0002000 	.word	0xe0002000
 801b444:	e0042000 	.word	0xe0042000
 801b448:	5c001000 	.word	0x5c001000
 801b44c:	0809ad34 	.word	0x0809ad34
 801b450:	40023008 	.word	0x40023008
 801b454:	40023000 	.word	0x40023000
 801b458:	f407a5c2 	.word	0xf407a5c2
 801b45c:	b5e8b5cd 	.word	0xb5e8b5cd
 801b460:	58024c08 	.word	0x58024c08
 801b464:	58024c00 	.word	0x58024c00

0801b468 <ai_platform_api_get_version>:
 801b468:	4a3d      	ldr	r2, [pc, #244]	; (801b560 <ai_platform_api_get_version+0xf8>)
 801b46a:	b510      	push	{r4, lr}
 801b46c:	6813      	ldr	r3, [r2, #0]
 801b46e:	b082      	sub	sp, #8
 801b470:	f023 0301 	bic.w	r3, r3, #1
 801b474:	6013      	str	r3, [r2, #0]
 801b476:	f7ff fe37 	bl	801b0e8 <_ai_platform_acquire_crc>
 801b47a:	4b3a      	ldr	r3, [pc, #232]	; (801b564 <ai_platform_api_get_version+0xfc>)
 801b47c:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801b480:	681b      	ldr	r3, [r3, #0]
 801b482:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b486:	189a      	adds	r2, r3, r2
 801b488:	2a01      	cmp	r2, #1
 801b48a:	d92c      	bls.n	801b4e6 <ai_platform_api_get_version+0x7e>
 801b48c:	f240 4249 	movw	r2, #1097	; 0x449
 801b490:	4293      	cmp	r3, r2
 801b492:	d028      	beq.n	801b4e6 <ai_platform_api_get_version+0x7e>
 801b494:	4b34      	ldr	r3, [pc, #208]	; (801b568 <ai_platform_api_get_version+0x100>)
 801b496:	681a      	ldr	r2, [r3, #0]
 801b498:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801b49c:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801b4a0:	d030      	beq.n	801b504 <ai_platform_api_get_version+0x9c>
 801b4a2:	681a      	ldr	r2, [r3, #0]
 801b4a4:	f240 4183 	movw	r1, #1155	; 0x483
 801b4a8:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801b4ac:	428a      	cmp	r2, r1
 801b4ae:	d047      	beq.n	801b540 <ai_platform_api_get_version+0xd8>
 801b4b0:	681b      	ldr	r3, [r3, #0]
 801b4b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b4b6:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801b4ba:	d032      	beq.n	801b522 <ai_platform_api_get_version+0xba>
 801b4bc:	f7ff fe16 	bl	801b0ec <_ai_platform_release_crc>
 801b4c0:	4b2a      	ldr	r3, [pc, #168]	; (801b56c <ai_platform_api_get_version+0x104>)
 801b4c2:	2000      	movs	r0, #0
 801b4c4:	681b      	ldr	r3, [r3, #0]
 801b4c6:	b2dc      	uxtb	r4, r3
 801b4c8:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801b4cc:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801b4d0:	0e1b      	lsrs	r3, r3, #24
 801b4d2:	f364 0007 	bfi	r0, r4, #0, #8
 801b4d6:	f361 200f 	bfi	r0, r1, #8, #8
 801b4da:	f362 4017 	bfi	r0, r2, #16, #8
 801b4de:	f363 601f 	bfi	r0, r3, #24, #8
 801b4e2:	b002      	add	sp, #8
 801b4e4:	bd10      	pop	{r4, pc}
 801b4e6:	4b22      	ldr	r3, [pc, #136]	; (801b570 <ai_platform_api_get_version+0x108>)
 801b4e8:	2201      	movs	r2, #1
 801b4ea:	4619      	mov	r1, r3
 801b4ec:	601a      	str	r2, [r3, #0]
 801b4ee:	680b      	ldr	r3, [r1, #0]
 801b4f0:	2b00      	cmp	r3, #0
 801b4f2:	d1fc      	bne.n	801b4ee <ai_platform_api_get_version+0x86>
 801b4f4:	4b1f      	ldr	r3, [pc, #124]	; (801b574 <ai_platform_api_get_version+0x10c>)
 801b4f6:	4920      	ldr	r1, [pc, #128]	; (801b578 <ai_platform_api_get_version+0x110>)
 801b4f8:	4a20      	ldr	r2, [pc, #128]	; (801b57c <ai_platform_api_get_version+0x114>)
 801b4fa:	6019      	str	r1, [r3, #0]
 801b4fc:	681b      	ldr	r3, [r3, #0]
 801b4fe:	4293      	cmp	r3, r2
 801b500:	d0dc      	beq.n	801b4bc <ai_platform_api_get_version+0x54>
 801b502:	e7fe      	b.n	801b502 <ai_platform_api_get_version+0x9a>
 801b504:	4b1e      	ldr	r3, [pc, #120]	; (801b580 <ai_platform_api_get_version+0x118>)
 801b506:	2201      	movs	r2, #1
 801b508:	4619      	mov	r1, r3
 801b50a:	601a      	str	r2, [r3, #0]
 801b50c:	680b      	ldr	r3, [r1, #0]
 801b50e:	2b00      	cmp	r3, #0
 801b510:	d1fc      	bne.n	801b50c <ai_platform_api_get_version+0xa4>
 801b512:	4b1c      	ldr	r3, [pc, #112]	; (801b584 <ai_platform_api_get_version+0x11c>)
 801b514:	4918      	ldr	r1, [pc, #96]	; (801b578 <ai_platform_api_get_version+0x110>)
 801b516:	4a19      	ldr	r2, [pc, #100]	; (801b57c <ai_platform_api_get_version+0x114>)
 801b518:	6019      	str	r1, [r3, #0]
 801b51a:	681b      	ldr	r3, [r3, #0]
 801b51c:	4293      	cmp	r3, r2
 801b51e:	d0cd      	beq.n	801b4bc <ai_platform_api_get_version+0x54>
 801b520:	e7fe      	b.n	801b520 <ai_platform_api_get_version+0xb8>
 801b522:	4b13      	ldr	r3, [pc, #76]	; (801b570 <ai_platform_api_get_version+0x108>)
 801b524:	2201      	movs	r2, #1
 801b526:	4619      	mov	r1, r3
 801b528:	601a      	str	r2, [r3, #0]
 801b52a:	680b      	ldr	r3, [r1, #0]
 801b52c:	2b00      	cmp	r3, #0
 801b52e:	d1fc      	bne.n	801b52a <ai_platform_api_get_version+0xc2>
 801b530:	4b10      	ldr	r3, [pc, #64]	; (801b574 <ai_platform_api_get_version+0x10c>)
 801b532:	4911      	ldr	r1, [pc, #68]	; (801b578 <ai_platform_api_get_version+0x110>)
 801b534:	4a11      	ldr	r2, [pc, #68]	; (801b57c <ai_platform_api_get_version+0x114>)
 801b536:	6019      	str	r1, [r3, #0]
 801b538:	681b      	ldr	r3, [r3, #0]
 801b53a:	4293      	cmp	r3, r2
 801b53c:	d0be      	beq.n	801b4bc <ai_platform_api_get_version+0x54>
 801b53e:	e7fe      	b.n	801b53e <ai_platform_api_get_version+0xd6>
 801b540:	4b0f      	ldr	r3, [pc, #60]	; (801b580 <ai_platform_api_get_version+0x118>)
 801b542:	2201      	movs	r2, #1
 801b544:	4619      	mov	r1, r3
 801b546:	601a      	str	r2, [r3, #0]
 801b548:	680b      	ldr	r3, [r1, #0]
 801b54a:	2b00      	cmp	r3, #0
 801b54c:	d1fc      	bne.n	801b548 <ai_platform_api_get_version+0xe0>
 801b54e:	4b0d      	ldr	r3, [pc, #52]	; (801b584 <ai_platform_api_get_version+0x11c>)
 801b550:	4909      	ldr	r1, [pc, #36]	; (801b578 <ai_platform_api_get_version+0x110>)
 801b552:	4a0a      	ldr	r2, [pc, #40]	; (801b57c <ai_platform_api_get_version+0x114>)
 801b554:	6019      	str	r1, [r3, #0]
 801b556:	681b      	ldr	r3, [r3, #0]
 801b558:	4293      	cmp	r3, r2
 801b55a:	d0af      	beq.n	801b4bc <ai_platform_api_get_version+0x54>
 801b55c:	e7fe      	b.n	801b55c <ai_platform_api_get_version+0xf4>
 801b55e:	bf00      	nop
 801b560:	e0002000 	.word	0xe0002000
 801b564:	e0042000 	.word	0xe0042000
 801b568:	5c001000 	.word	0x5c001000
 801b56c:	0809ad38 	.word	0x0809ad38
 801b570:	40023008 	.word	0x40023008
 801b574:	40023000 	.word	0x40023000
 801b578:	f407a5c2 	.word	0xf407a5c2
 801b57c:	b5e8b5cd 	.word	0xb5e8b5cd
 801b580:	58024c08 	.word	0x58024c08
 801b584:	58024c00 	.word	0x58024c00

0801b588 <ai_platform_interface_api_get_version>:
 801b588:	4a3d      	ldr	r2, [pc, #244]	; (801b680 <ai_platform_interface_api_get_version+0xf8>)
 801b58a:	b510      	push	{r4, lr}
 801b58c:	6813      	ldr	r3, [r2, #0]
 801b58e:	b082      	sub	sp, #8
 801b590:	f023 0301 	bic.w	r3, r3, #1
 801b594:	6013      	str	r3, [r2, #0]
 801b596:	f7ff fda7 	bl	801b0e8 <_ai_platform_acquire_crc>
 801b59a:	4b3a      	ldr	r3, [pc, #232]	; (801b684 <ai_platform_interface_api_get_version+0xfc>)
 801b59c:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801b5a0:	681b      	ldr	r3, [r3, #0]
 801b5a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b5a6:	189a      	adds	r2, r3, r2
 801b5a8:	2a01      	cmp	r2, #1
 801b5aa:	d92c      	bls.n	801b606 <ai_platform_interface_api_get_version+0x7e>
 801b5ac:	f240 4249 	movw	r2, #1097	; 0x449
 801b5b0:	4293      	cmp	r3, r2
 801b5b2:	d028      	beq.n	801b606 <ai_platform_interface_api_get_version+0x7e>
 801b5b4:	4b34      	ldr	r3, [pc, #208]	; (801b688 <ai_platform_interface_api_get_version+0x100>)
 801b5b6:	681a      	ldr	r2, [r3, #0]
 801b5b8:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801b5bc:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801b5c0:	d030      	beq.n	801b624 <ai_platform_interface_api_get_version+0x9c>
 801b5c2:	681a      	ldr	r2, [r3, #0]
 801b5c4:	f240 4183 	movw	r1, #1155	; 0x483
 801b5c8:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801b5cc:	428a      	cmp	r2, r1
 801b5ce:	d047      	beq.n	801b660 <ai_platform_interface_api_get_version+0xd8>
 801b5d0:	681b      	ldr	r3, [r3, #0]
 801b5d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b5d6:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801b5da:	d032      	beq.n	801b642 <ai_platform_interface_api_get_version+0xba>
 801b5dc:	f7ff fd86 	bl	801b0ec <_ai_platform_release_crc>
 801b5e0:	4b2a      	ldr	r3, [pc, #168]	; (801b68c <ai_platform_interface_api_get_version+0x104>)
 801b5e2:	2000      	movs	r0, #0
 801b5e4:	681b      	ldr	r3, [r3, #0]
 801b5e6:	b2dc      	uxtb	r4, r3
 801b5e8:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801b5ec:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801b5f0:	0e1b      	lsrs	r3, r3, #24
 801b5f2:	f364 0007 	bfi	r0, r4, #0, #8
 801b5f6:	f361 200f 	bfi	r0, r1, #8, #8
 801b5fa:	f362 4017 	bfi	r0, r2, #16, #8
 801b5fe:	f363 601f 	bfi	r0, r3, #24, #8
 801b602:	b002      	add	sp, #8
 801b604:	bd10      	pop	{r4, pc}
 801b606:	4b22      	ldr	r3, [pc, #136]	; (801b690 <ai_platform_interface_api_get_version+0x108>)
 801b608:	2201      	movs	r2, #1
 801b60a:	4619      	mov	r1, r3
 801b60c:	601a      	str	r2, [r3, #0]
 801b60e:	680b      	ldr	r3, [r1, #0]
 801b610:	2b00      	cmp	r3, #0
 801b612:	d1fc      	bne.n	801b60e <ai_platform_interface_api_get_version+0x86>
 801b614:	4b1f      	ldr	r3, [pc, #124]	; (801b694 <ai_platform_interface_api_get_version+0x10c>)
 801b616:	4920      	ldr	r1, [pc, #128]	; (801b698 <ai_platform_interface_api_get_version+0x110>)
 801b618:	4a20      	ldr	r2, [pc, #128]	; (801b69c <ai_platform_interface_api_get_version+0x114>)
 801b61a:	6019      	str	r1, [r3, #0]
 801b61c:	681b      	ldr	r3, [r3, #0]
 801b61e:	4293      	cmp	r3, r2
 801b620:	d0dc      	beq.n	801b5dc <ai_platform_interface_api_get_version+0x54>
 801b622:	e7fe      	b.n	801b622 <ai_platform_interface_api_get_version+0x9a>
 801b624:	4b1e      	ldr	r3, [pc, #120]	; (801b6a0 <ai_platform_interface_api_get_version+0x118>)
 801b626:	2201      	movs	r2, #1
 801b628:	4619      	mov	r1, r3
 801b62a:	601a      	str	r2, [r3, #0]
 801b62c:	680b      	ldr	r3, [r1, #0]
 801b62e:	2b00      	cmp	r3, #0
 801b630:	d1fc      	bne.n	801b62c <ai_platform_interface_api_get_version+0xa4>
 801b632:	4b1c      	ldr	r3, [pc, #112]	; (801b6a4 <ai_platform_interface_api_get_version+0x11c>)
 801b634:	4918      	ldr	r1, [pc, #96]	; (801b698 <ai_platform_interface_api_get_version+0x110>)
 801b636:	4a19      	ldr	r2, [pc, #100]	; (801b69c <ai_platform_interface_api_get_version+0x114>)
 801b638:	6019      	str	r1, [r3, #0]
 801b63a:	681b      	ldr	r3, [r3, #0]
 801b63c:	4293      	cmp	r3, r2
 801b63e:	d0cd      	beq.n	801b5dc <ai_platform_interface_api_get_version+0x54>
 801b640:	e7fe      	b.n	801b640 <ai_platform_interface_api_get_version+0xb8>
 801b642:	4b13      	ldr	r3, [pc, #76]	; (801b690 <ai_platform_interface_api_get_version+0x108>)
 801b644:	2201      	movs	r2, #1
 801b646:	4619      	mov	r1, r3
 801b648:	601a      	str	r2, [r3, #0]
 801b64a:	680b      	ldr	r3, [r1, #0]
 801b64c:	2b00      	cmp	r3, #0
 801b64e:	d1fc      	bne.n	801b64a <ai_platform_interface_api_get_version+0xc2>
 801b650:	4b10      	ldr	r3, [pc, #64]	; (801b694 <ai_platform_interface_api_get_version+0x10c>)
 801b652:	4911      	ldr	r1, [pc, #68]	; (801b698 <ai_platform_interface_api_get_version+0x110>)
 801b654:	4a11      	ldr	r2, [pc, #68]	; (801b69c <ai_platform_interface_api_get_version+0x114>)
 801b656:	6019      	str	r1, [r3, #0]
 801b658:	681b      	ldr	r3, [r3, #0]
 801b65a:	4293      	cmp	r3, r2
 801b65c:	d0be      	beq.n	801b5dc <ai_platform_interface_api_get_version+0x54>
 801b65e:	e7fe      	b.n	801b65e <ai_platform_interface_api_get_version+0xd6>
 801b660:	4b0f      	ldr	r3, [pc, #60]	; (801b6a0 <ai_platform_interface_api_get_version+0x118>)
 801b662:	2201      	movs	r2, #1
 801b664:	4619      	mov	r1, r3
 801b666:	601a      	str	r2, [r3, #0]
 801b668:	680b      	ldr	r3, [r1, #0]
 801b66a:	2b00      	cmp	r3, #0
 801b66c:	d1fc      	bne.n	801b668 <ai_platform_interface_api_get_version+0xe0>
 801b66e:	4b0d      	ldr	r3, [pc, #52]	; (801b6a4 <ai_platform_interface_api_get_version+0x11c>)
 801b670:	4909      	ldr	r1, [pc, #36]	; (801b698 <ai_platform_interface_api_get_version+0x110>)
 801b672:	4a0a      	ldr	r2, [pc, #40]	; (801b69c <ai_platform_interface_api_get_version+0x114>)
 801b674:	6019      	str	r1, [r3, #0]
 801b676:	681b      	ldr	r3, [r3, #0]
 801b678:	4293      	cmp	r3, r2
 801b67a:	d0af      	beq.n	801b5dc <ai_platform_interface_api_get_version+0x54>
 801b67c:	e7fe      	b.n	801b67c <ai_platform_interface_api_get_version+0xf4>
 801b67e:	bf00      	nop
 801b680:	e0002000 	.word	0xe0002000
 801b684:	e0042000 	.word	0xe0042000
 801b688:	5c001000 	.word	0x5c001000
 801b68c:	0809ad3c 	.word	0x0809ad3c
 801b690:	40023008 	.word	0x40023008
 801b694:	40023000 	.word	0x40023000
 801b698:	f407a5c2 	.word	0xf407a5c2
 801b69c:	b5e8b5cd 	.word	0xb5e8b5cd
 801b6a0:	58024c08 	.word	0x58024c08
 801b6a4:	58024c00 	.word	0x58024c00

0801b6a8 <ai_platform_context_acquire>:
 801b6a8:	b510      	push	{r4, lr}
 801b6aa:	4604      	mov	r4, r0
 801b6ac:	b120      	cbz	r0, 801b6b8 <ai_platform_context_acquire+0x10>
 801b6ae:	4b36      	ldr	r3, [pc, #216]	; (801b788 <ai_platform_context_acquire+0xe0>)
 801b6b0:	6802      	ldr	r2, [r0, #0]
 801b6b2:	429a      	cmp	r2, r3
 801b6b4:	bf18      	it	ne
 801b6b6:	2400      	movne	r4, #0
 801b6b8:	4a34      	ldr	r2, [pc, #208]	; (801b78c <ai_platform_context_acquire+0xe4>)
 801b6ba:	6813      	ldr	r3, [r2, #0]
 801b6bc:	f023 0301 	bic.w	r3, r3, #1
 801b6c0:	6013      	str	r3, [r2, #0]
 801b6c2:	f7ff fd11 	bl	801b0e8 <_ai_platform_acquire_crc>
 801b6c6:	4b32      	ldr	r3, [pc, #200]	; (801b790 <ai_platform_context_acquire+0xe8>)
 801b6c8:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801b6cc:	681b      	ldr	r3, [r3, #0]
 801b6ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b6d2:	189a      	adds	r2, r3, r2
 801b6d4:	2a01      	cmp	r2, #1
 801b6d6:	d91b      	bls.n	801b710 <ai_platform_context_acquire+0x68>
 801b6d8:	f240 4249 	movw	r2, #1097	; 0x449
 801b6dc:	4293      	cmp	r3, r2
 801b6de:	d017      	beq.n	801b710 <ai_platform_context_acquire+0x68>
 801b6e0:	4b2c      	ldr	r3, [pc, #176]	; (801b794 <ai_platform_context_acquire+0xec>)
 801b6e2:	681a      	ldr	r2, [r3, #0]
 801b6e4:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801b6e8:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801b6ec:	d01f      	beq.n	801b72e <ai_platform_context_acquire+0x86>
 801b6ee:	681a      	ldr	r2, [r3, #0]
 801b6f0:	f240 4183 	movw	r1, #1155	; 0x483
 801b6f4:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801b6f8:	428a      	cmp	r2, r1
 801b6fa:	d036      	beq.n	801b76a <ai_platform_context_acquire+0xc2>
 801b6fc:	681b      	ldr	r3, [r3, #0]
 801b6fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b702:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801b706:	d021      	beq.n	801b74c <ai_platform_context_acquire+0xa4>
 801b708:	f7ff fcf0 	bl	801b0ec <_ai_platform_release_crc>
 801b70c:	4620      	mov	r0, r4
 801b70e:	bd10      	pop	{r4, pc}
 801b710:	4b21      	ldr	r3, [pc, #132]	; (801b798 <ai_platform_context_acquire+0xf0>)
 801b712:	2201      	movs	r2, #1
 801b714:	4619      	mov	r1, r3
 801b716:	601a      	str	r2, [r3, #0]
 801b718:	680b      	ldr	r3, [r1, #0]
 801b71a:	2b00      	cmp	r3, #0
 801b71c:	d1fc      	bne.n	801b718 <ai_platform_context_acquire+0x70>
 801b71e:	4b1f      	ldr	r3, [pc, #124]	; (801b79c <ai_platform_context_acquire+0xf4>)
 801b720:	491f      	ldr	r1, [pc, #124]	; (801b7a0 <ai_platform_context_acquire+0xf8>)
 801b722:	4a20      	ldr	r2, [pc, #128]	; (801b7a4 <ai_platform_context_acquire+0xfc>)
 801b724:	6019      	str	r1, [r3, #0]
 801b726:	681b      	ldr	r3, [r3, #0]
 801b728:	4293      	cmp	r3, r2
 801b72a:	d0ed      	beq.n	801b708 <ai_platform_context_acquire+0x60>
 801b72c:	e7fe      	b.n	801b72c <ai_platform_context_acquire+0x84>
 801b72e:	4b1e      	ldr	r3, [pc, #120]	; (801b7a8 <ai_platform_context_acquire+0x100>)
 801b730:	2201      	movs	r2, #1
 801b732:	4619      	mov	r1, r3
 801b734:	601a      	str	r2, [r3, #0]
 801b736:	680b      	ldr	r3, [r1, #0]
 801b738:	2b00      	cmp	r3, #0
 801b73a:	d1fc      	bne.n	801b736 <ai_platform_context_acquire+0x8e>
 801b73c:	4b1b      	ldr	r3, [pc, #108]	; (801b7ac <ai_platform_context_acquire+0x104>)
 801b73e:	4918      	ldr	r1, [pc, #96]	; (801b7a0 <ai_platform_context_acquire+0xf8>)
 801b740:	4a18      	ldr	r2, [pc, #96]	; (801b7a4 <ai_platform_context_acquire+0xfc>)
 801b742:	6019      	str	r1, [r3, #0]
 801b744:	681b      	ldr	r3, [r3, #0]
 801b746:	4293      	cmp	r3, r2
 801b748:	d0de      	beq.n	801b708 <ai_platform_context_acquire+0x60>
 801b74a:	e7fe      	b.n	801b74a <ai_platform_context_acquire+0xa2>
 801b74c:	4b12      	ldr	r3, [pc, #72]	; (801b798 <ai_platform_context_acquire+0xf0>)
 801b74e:	2201      	movs	r2, #1
 801b750:	4619      	mov	r1, r3
 801b752:	601a      	str	r2, [r3, #0]
 801b754:	680b      	ldr	r3, [r1, #0]
 801b756:	2b00      	cmp	r3, #0
 801b758:	d1fc      	bne.n	801b754 <ai_platform_context_acquire+0xac>
 801b75a:	4b10      	ldr	r3, [pc, #64]	; (801b79c <ai_platform_context_acquire+0xf4>)
 801b75c:	4910      	ldr	r1, [pc, #64]	; (801b7a0 <ai_platform_context_acquire+0xf8>)
 801b75e:	4a11      	ldr	r2, [pc, #68]	; (801b7a4 <ai_platform_context_acquire+0xfc>)
 801b760:	6019      	str	r1, [r3, #0]
 801b762:	681b      	ldr	r3, [r3, #0]
 801b764:	4293      	cmp	r3, r2
 801b766:	d0cf      	beq.n	801b708 <ai_platform_context_acquire+0x60>
 801b768:	e7fe      	b.n	801b768 <ai_platform_context_acquire+0xc0>
 801b76a:	4b0f      	ldr	r3, [pc, #60]	; (801b7a8 <ai_platform_context_acquire+0x100>)
 801b76c:	2201      	movs	r2, #1
 801b76e:	4619      	mov	r1, r3
 801b770:	601a      	str	r2, [r3, #0]
 801b772:	680b      	ldr	r3, [r1, #0]
 801b774:	2b00      	cmp	r3, #0
 801b776:	d1fc      	bne.n	801b772 <ai_platform_context_acquire+0xca>
 801b778:	4b0c      	ldr	r3, [pc, #48]	; (801b7ac <ai_platform_context_acquire+0x104>)
 801b77a:	4909      	ldr	r1, [pc, #36]	; (801b7a0 <ai_platform_context_acquire+0xf8>)
 801b77c:	4a09      	ldr	r2, [pc, #36]	; (801b7a4 <ai_platform_context_acquire+0xfc>)
 801b77e:	6019      	str	r1, [r3, #0]
 801b780:	681b      	ldr	r3, [r3, #0]
 801b782:	4293      	cmp	r3, r2
 801b784:	d0c0      	beq.n	801b708 <ai_platform_context_acquire+0x60>
 801b786:	e7fe      	b.n	801b786 <ai_platform_context_acquire+0xde>
 801b788:	a1c00100 	.word	0xa1c00100
 801b78c:	e0002000 	.word	0xe0002000
 801b790:	e0042000 	.word	0xe0042000
 801b794:	5c001000 	.word	0x5c001000
 801b798:	40023008 	.word	0x40023008
 801b79c:	40023000 	.word	0x40023000
 801b7a0:	f407a5c2 	.word	0xf407a5c2
 801b7a4:	b5e8b5cd 	.word	0xb5e8b5cd
 801b7a8:	58024c08 	.word	0x58024c08
 801b7ac:	58024c00 	.word	0x58024c00

0801b7b0 <ai_platform_network_set_error>:
 801b7b0:	b110      	cbz	r0, 801b7b8 <ai_platform_network_set_error+0x8>
 801b7b2:	3010      	adds	r0, #16
 801b7b4:	f001 bfb4 	b.w	801d720 <core_set_error>
 801b7b8:	4770      	bx	lr
 801b7ba:	bf00      	nop

0801b7bc <ai_platform_api_get_network_report>:
 801b7bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b7c0:	460c      	mov	r4, r1
 801b7c2:	b089      	sub	sp, #36	; 0x24
 801b7c4:	4605      	mov	r5, r0
 801b7c6:	b120      	cbz	r0, 801b7d2 <ai_platform_api_get_network_report+0x16>
 801b7c8:	4bae      	ldr	r3, [pc, #696]	; (801ba84 <ai_platform_api_get_network_report+0x2c8>)
 801b7ca:	6802      	ldr	r2, [r0, #0]
 801b7cc:	429a      	cmp	r2, r3
 801b7ce:	bf18      	it	ne
 801b7d0:	2500      	movne	r5, #0
 801b7d2:	4aad      	ldr	r2, [pc, #692]	; (801ba88 <ai_platform_api_get_network_report+0x2cc>)
 801b7d4:	6813      	ldr	r3, [r2, #0]
 801b7d6:	f023 0301 	bic.w	r3, r3, #1
 801b7da:	6013      	str	r3, [r2, #0]
 801b7dc:	f7ff fc84 	bl	801b0e8 <_ai_platform_acquire_crc>
 801b7e0:	4baa      	ldr	r3, [pc, #680]	; (801ba8c <ai_platform_api_get_network_report+0x2d0>)
 801b7e2:	f46f 6e8a 	mvn.w	lr, #1104	; 0x450
 801b7e6:	681b      	ldr	r3, [r3, #0]
 801b7e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b7ec:	eb03 020e 	add.w	r2, r3, lr
 801b7f0:	2a01      	cmp	r2, #1
 801b7f2:	f240 80a6 	bls.w	801b942 <ai_platform_api_get_network_report+0x186>
 801b7f6:	f240 4249 	movw	r2, #1097	; 0x449
 801b7fa:	4293      	cmp	r3, r2
 801b7fc:	f000 80a1 	beq.w	801b942 <ai_platform_api_get_network_report+0x186>
 801b800:	4ba3      	ldr	r3, [pc, #652]	; (801ba90 <ai_platform_api_get_network_report+0x2d4>)
 801b802:	681a      	ldr	r2, [r3, #0]
 801b804:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801b808:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801b80c:	f000 80a9 	beq.w	801b962 <ai_platform_api_get_network_report+0x1a6>
 801b810:	681a      	ldr	r2, [r3, #0]
 801b812:	f240 4183 	movw	r1, #1155	; 0x483
 801b816:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801b81a:	428a      	cmp	r2, r1
 801b81c:	f000 83e0 	beq.w	801bfe0 <ai_platform_api_get_network_report+0x824>
 801b820:	681b      	ldr	r3, [r3, #0]
 801b822:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b826:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801b82a:	f000 83c9 	beq.w	801bfc0 <ai_platform_api_get_network_report+0x804>
 801b82e:	f7ff fc5d 	bl	801b0ec <_ai_platform_release_crc>
 801b832:	2d00      	cmp	r5, #0
 801b834:	f000 83c2 	beq.w	801bfbc <ai_platform_api_get_network_report+0x800>
 801b838:	fab4 f384 	clz	r3, r4
 801b83c:	095b      	lsrs	r3, r3, #5
 801b83e:	2b00      	cmp	r3, #0
 801b840:	f040 83bc 	bne.w	801bfbc <ai_platform_api_get_network_report+0x800>
 801b844:	6763      	str	r3, [r4, #116]	; 0x74
 801b846:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 801b848:	2a00      	cmp	r2, #0
 801b84a:	f000 83af 	beq.w	801bfac <ai_platform_api_get_network_report+0x7f0>
 801b84e:	2301      	movs	r3, #1
 801b850:	6763      	str	r3, [r4, #116]	; 0x74
 801b852:	6913      	ldr	r3, [r2, #16]
 801b854:	b183      	cbz	r3, 801b878 <ai_platform_api_get_network_report+0xbc>
 801b856:	429a      	cmp	r2, r3
 801b858:	d00e      	beq.n	801b878 <ai_platform_api_get_network_report+0xbc>
 801b85a:	2202      	movs	r2, #2
 801b85c:	e003      	b.n	801b866 <ai_platform_api_get_network_report+0xaa>
 801b85e:	4299      	cmp	r1, r3
 801b860:	d006      	beq.n	801b870 <ai_platform_api_get_network_report+0xb4>
 801b862:	460b      	mov	r3, r1
 801b864:	b121      	cbz	r1, 801b870 <ai_platform_api_get_network_report+0xb4>
 801b866:	6762      	str	r2, [r4, #116]	; 0x74
 801b868:	3201      	adds	r2, #1
 801b86a:	6919      	ldr	r1, [r3, #16]
 801b86c:	2900      	cmp	r1, #0
 801b86e:	d1f6      	bne.n	801b85e <ai_platform_api_get_network_report+0xa2>
 801b870:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801b872:	2b00      	cmp	r3, #0
 801b874:	f000 839a 	beq.w	801bfac <ai_platform_api_get_network_report+0x7f0>
 801b878:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 801b87a:	2b00      	cmp	r3, #0
 801b87c:	f000 8081 	beq.w	801b982 <ai_platform_api_get_network_report+0x1c6>
 801b880:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 801b884:	f1b8 0f00 	cmp.w	r8, #0
 801b888:	d07b      	beq.n	801b982 <ai_platform_api_get_network_report+0x1c6>
 801b88a:	f8b8 3000 	ldrh.w	r3, [r8]
 801b88e:	2b00      	cmp	r3, #0
 801b890:	d077      	beq.n	801b982 <ai_platform_api_get_network_report+0x1c6>
 801b892:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b896:	2b00      	cmp	r3, #0
 801b898:	d073      	beq.n	801b982 <ai_platform_api_get_network_report+0x1c6>
 801b89a:	681f      	ldr	r7, [r3, #0]
 801b89c:	2f00      	cmp	r7, #0
 801b89e:	d070      	beq.n	801b982 <ai_platform_api_get_network_report+0x1c6>
 801b8a0:	f04f 0b00 	mov.w	fp, #0
 801b8a4:	e9cd 5402 	strd	r5, r4, [sp, #8]
 801b8a8:	46d9      	mov	r9, fp
 801b8aa:	e029      	b.n	801b900 <ai_platform_api_get_network_report+0x144>
 801b8ac:	885b      	ldrh	r3, [r3, #2]
 801b8ae:	2b00      	cmp	r3, #0
 801b8b0:	d044      	beq.n	801b93c <ai_platform_api_get_network_report+0x180>
 801b8b2:	2301      	movs	r3, #1
 801b8b4:	f84a 3005 	str.w	r3, [sl, r5]
 801b8b8:	69bb      	ldr	r3, [r7, #24]
 801b8ba:	685d      	ldr	r5, [r3, #4]
 801b8bc:	f04f 0301 	mov.w	r3, #1
 801b8c0:	9900      	ldr	r1, [sp, #0]
 801b8c2:	f109 0701 	add.w	r7, r9, #1
 801b8c6:	7533      	strb	r3, [r6, #20]
 801b8c8:	6973      	ldr	r3, [r6, #20]
 801b8ca:	46b9      	mov	r9, r7
 801b8cc:	6135      	str	r5, [r6, #16]
 801b8ce:	f361 231f 	bfi	r3, r1, #8, #24
 801b8d2:	60b4      	str	r4, [r6, #8]
 801b8d4:	e9c6 0200 	strd	r0, r2, [r6]
 801b8d8:	2200      	movs	r2, #0
 801b8da:	b2b8      	uxth	r0, r7
 801b8dc:	60f2      	str	r2, [r6, #12]
 801b8de:	9a01      	ldr	r2, [sp, #4]
 801b8e0:	e9c6 3205 	strd	r3, r2, [r6, #20]
 801b8e4:	f8b8 3000 	ldrh.w	r3, [r8]
 801b8e8:	429f      	cmp	r7, r3
 801b8ea:	d256      	bcs.n	801b99a <ai_platform_api_get_network_report+0x1de>
 801b8ec:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b8f0:	2b00      	cmp	r3, #0
 801b8f2:	d052      	beq.n	801b99a <ai_platform_api_get_network_report+0x1de>
 801b8f4:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 801b8f8:	f10b 0b1c 	add.w	fp, fp, #28
 801b8fc:	2f00      	cmp	r7, #0
 801b8fe:	d04c      	beq.n	801b99a <ai_platform_api_get_network_report+0x1de>
 801b900:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801b904:	ea4f 05c9 	mov.w	r5, r9, lsl #3
 801b908:	69b8      	ldr	r0, [r7, #24]
 801b90a:	e9d3 6a01 	ldrd	r6, sl, [r3, #4]
 801b90e:	68bb      	ldr	r3, [r7, #8]
 801b910:	6800      	ldr	r0, [r0, #0]
 801b912:	eb0a 0405 	add.w	r4, sl, r5
 801b916:	f3c3 2317 	ubfx	r3, r3, #8, #24
 801b91a:	445e      	add	r6, fp
 801b91c:	9300      	str	r3, [sp, #0]
 801b91e:	68fb      	ldr	r3, [r7, #12]
 801b920:	9301      	str	r3, [sp, #4]
 801b922:	f009 f8bb 	bl	8024a9c <ai_array_to_buffer_fmt>
 801b926:	69bb      	ldr	r3, [r7, #24]
 801b928:	689a      	ldr	r2, [r3, #8]
 801b92a:	2c00      	cmp	r4, #0
 801b92c:	d0c5      	beq.n	801b8ba <ai_platform_api_get_network_report+0xfe>
 801b92e:	2300      	movs	r3, #0
 801b930:	f84a 3039 	str.w	r3, [sl, r9, lsl #3]
 801b934:	683b      	ldr	r3, [r7, #0]
 801b936:	6063      	str	r3, [r4, #4]
 801b938:	2b00      	cmp	r3, #0
 801b93a:	d1b7      	bne.n	801b8ac <ai_platform_api_get_network_report+0xf0>
 801b93c:	69bb      	ldr	r3, [r7, #24]
 801b93e:	2400      	movs	r4, #0
 801b940:	e7bb      	b.n	801b8ba <ai_platform_api_get_network_report+0xfe>
 801b942:	4b54      	ldr	r3, [pc, #336]	; (801ba94 <ai_platform_api_get_network_report+0x2d8>)
 801b944:	2201      	movs	r2, #1
 801b946:	4619      	mov	r1, r3
 801b948:	601a      	str	r2, [r3, #0]
 801b94a:	680b      	ldr	r3, [r1, #0]
 801b94c:	2b00      	cmp	r3, #0
 801b94e:	d1fc      	bne.n	801b94a <ai_platform_api_get_network_report+0x18e>
 801b950:	4b51      	ldr	r3, [pc, #324]	; (801ba98 <ai_platform_api_get_network_report+0x2dc>)
 801b952:	4952      	ldr	r1, [pc, #328]	; (801ba9c <ai_platform_api_get_network_report+0x2e0>)
 801b954:	4a52      	ldr	r2, [pc, #328]	; (801baa0 <ai_platform_api_get_network_report+0x2e4>)
 801b956:	6019      	str	r1, [r3, #0]
 801b958:	681b      	ldr	r3, [r3, #0]
 801b95a:	4293      	cmp	r3, r2
 801b95c:	f43f af67 	beq.w	801b82e <ai_platform_api_get_network_report+0x72>
 801b960:	e7fe      	b.n	801b960 <ai_platform_api_get_network_report+0x1a4>
 801b962:	4b50      	ldr	r3, [pc, #320]	; (801baa4 <ai_platform_api_get_network_report+0x2e8>)
 801b964:	2201      	movs	r2, #1
 801b966:	4619      	mov	r1, r3
 801b968:	601a      	str	r2, [r3, #0]
 801b96a:	680b      	ldr	r3, [r1, #0]
 801b96c:	2b00      	cmp	r3, #0
 801b96e:	d1fc      	bne.n	801b96a <ai_platform_api_get_network_report+0x1ae>
 801b970:	4b4d      	ldr	r3, [pc, #308]	; (801baa8 <ai_platform_api_get_network_report+0x2ec>)
 801b972:	494a      	ldr	r1, [pc, #296]	; (801ba9c <ai_platform_api_get_network_report+0x2e0>)
 801b974:	4a4a      	ldr	r2, [pc, #296]	; (801baa0 <ai_platform_api_get_network_report+0x2e4>)
 801b976:	6019      	str	r1, [r3, #0]
 801b978:	681b      	ldr	r3, [r3, #0]
 801b97a:	4293      	cmp	r3, r2
 801b97c:	f43f af57 	beq.w	801b82e <ai_platform_api_get_network_report+0x72>
 801b980:	e7fe      	b.n	801b980 <ai_platform_api_get_network_report+0x1c4>
 801b982:	2600      	movs	r6, #0
 801b984:	f105 0010 	add.w	r0, r5, #16
 801b988:	2218      	movs	r2, #24
 801b98a:	2112      	movs	r1, #18
 801b98c:	8626      	strh	r6, [r4, #48]	; 0x30
 801b98e:	f001 fec7 	bl	801d720 <core_set_error>
 801b992:	4630      	mov	r0, r6
 801b994:	b009      	add	sp, #36	; 0x24
 801b996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b99a:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 801b99e:	2800      	cmp	r0, #0
 801b9a0:	d0ef      	beq.n	801b982 <ai_platform_api_get_network_report+0x1c6>
 801b9a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801b9a6:	685b      	ldr	r3, [r3, #4]
 801b9a8:	8620      	strh	r0, [r4, #48]	; 0x30
 801b9aa:	6363      	str	r3, [r4, #52]	; 0x34
 801b9ac:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 801b9ae:	2b01      	cmp	r3, #1
 801b9b0:	d95e      	bls.n	801ba70 <ai_platform_api_get_network_report+0x2b4>
 801b9b2:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 801b9b6:	f118 0f0c 	cmn.w	r8, #12
 801b9ba:	d059      	beq.n	801ba70 <ai_platform_api_get_network_report+0x2b4>
 801b9bc:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 801b9c0:	2b00      	cmp	r3, #0
 801b9c2:	d055      	beq.n	801ba70 <ai_platform_api_get_network_report+0x2b4>
 801b9c4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801b9c8:	2b00      	cmp	r3, #0
 801b9ca:	d051      	beq.n	801ba70 <ai_platform_api_get_network_report+0x2b4>
 801b9cc:	681f      	ldr	r7, [r3, #0]
 801b9ce:	2f00      	cmp	r7, #0
 801b9d0:	d04e      	beq.n	801ba70 <ai_platform_api_get_network_report+0x2b4>
 801b9d2:	f04f 0b00 	mov.w	fp, #0
 801b9d6:	46d9      	mov	r9, fp
 801b9d8:	e027      	b.n	801ba2a <ai_platform_api_get_network_report+0x26e>
 801b9da:	2301      	movs	r3, #1
 801b9dc:	f84a 3005 	str.w	r3, [sl, r5]
 801b9e0:	69bb      	ldr	r3, [r7, #24]
 801b9e2:	685d      	ldr	r5, [r3, #4]
 801b9e4:	f04f 0301 	mov.w	r3, #1
 801b9e8:	9900      	ldr	r1, [sp, #0]
 801b9ea:	f109 0701 	add.w	r7, r9, #1
 801b9ee:	7533      	strb	r3, [r6, #20]
 801b9f0:	6973      	ldr	r3, [r6, #20]
 801b9f2:	46b9      	mov	r9, r7
 801b9f4:	6135      	str	r5, [r6, #16]
 801b9f6:	fa1f fc87 	uxth.w	ip, r7
 801b9fa:	f361 231f 	bfi	r3, r1, #8, #24
 801b9fe:	60b4      	str	r4, [r6, #8]
 801ba00:	e9c6 0200 	strd	r0, r2, [r6]
 801ba04:	2200      	movs	r2, #0
 801ba06:	60f2      	str	r2, [r6, #12]
 801ba08:	9a01      	ldr	r2, [sp, #4]
 801ba0a:	e9c6 3205 	strd	r3, r2, [r6, #20]
 801ba0e:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 801ba12:	429f      	cmp	r7, r3
 801ba14:	d24a      	bcs.n	801baac <ai_platform_api_get_network_report+0x2f0>
 801ba16:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801ba1a:	2b00      	cmp	r3, #0
 801ba1c:	d046      	beq.n	801baac <ai_platform_api_get_network_report+0x2f0>
 801ba1e:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 801ba22:	f10b 0b1c 	add.w	fp, fp, #28
 801ba26:	2f00      	cmp	r7, #0
 801ba28:	d040      	beq.n	801baac <ai_platform_api_get_network_report+0x2f0>
 801ba2a:	f8d8 3014 	ldr.w	r3, [r8, #20]
 801ba2e:	ea4f 05c9 	mov.w	r5, r9, lsl #3
 801ba32:	69b8      	ldr	r0, [r7, #24]
 801ba34:	e9d3 6a01 	ldrd	r6, sl, [r3, #4]
 801ba38:	68bb      	ldr	r3, [r7, #8]
 801ba3a:	6800      	ldr	r0, [r0, #0]
 801ba3c:	eb0a 0405 	add.w	r4, sl, r5
 801ba40:	f3c3 2317 	ubfx	r3, r3, #8, #24
 801ba44:	445e      	add	r6, fp
 801ba46:	9300      	str	r3, [sp, #0]
 801ba48:	68fb      	ldr	r3, [r7, #12]
 801ba4a:	9301      	str	r3, [sp, #4]
 801ba4c:	f009 f826 	bl	8024a9c <ai_array_to_buffer_fmt>
 801ba50:	69bb      	ldr	r3, [r7, #24]
 801ba52:	689a      	ldr	r2, [r3, #8]
 801ba54:	2c00      	cmp	r4, #0
 801ba56:	d0c4      	beq.n	801b9e2 <ai_platform_api_get_network_report+0x226>
 801ba58:	2300      	movs	r3, #0
 801ba5a:	f84a 3039 	str.w	r3, [sl, r9, lsl #3]
 801ba5e:	683b      	ldr	r3, [r7, #0]
 801ba60:	6063      	str	r3, [r4, #4]
 801ba62:	b113      	cbz	r3, 801ba6a <ai_platform_api_get_network_report+0x2ae>
 801ba64:	885b      	ldrh	r3, [r3, #2]
 801ba66:	2b00      	cmp	r3, #0
 801ba68:	d1b7      	bne.n	801b9da <ai_platform_api_get_network_report+0x21e>
 801ba6a:	69bb      	ldr	r3, [r7, #24]
 801ba6c:	2400      	movs	r4, #0
 801ba6e:	e7b8      	b.n	801b9e2 <ai_platform_api_get_network_report+0x226>
 801ba70:	2600      	movs	r6, #0
 801ba72:	f105 0010 	add.w	r0, r5, #16
 801ba76:	2218      	movs	r2, #24
 801ba78:	2113      	movs	r1, #19
 801ba7a:	8666      	strh	r6, [r4, #50]	; 0x32
 801ba7c:	f001 fe50 	bl	801d720 <core_set_error>
 801ba80:	e787      	b.n	801b992 <ai_platform_api_get_network_report+0x1d6>
 801ba82:	bf00      	nop
 801ba84:	a1c00100 	.word	0xa1c00100
 801ba88:	e0002000 	.word	0xe0002000
 801ba8c:	e0042000 	.word	0xe0042000
 801ba90:	5c001000 	.word	0x5c001000
 801ba94:	40023008 	.word	0x40023008
 801ba98:	40023000 	.word	0x40023000
 801ba9c:	f407a5c2 	.word	0xf407a5c2
 801baa0:	b5e8b5cd 	.word	0xb5e8b5cd
 801baa4:	58024c08 	.word	0x58024c08
 801baa8:	58024c00 	.word	0x58024c00
 801baac:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 801bab0:	f1bc 0f00 	cmp.w	ip, #0
 801bab4:	d0dc      	beq.n	801ba70 <ai_platform_api_get_network_report+0x2b4>
 801bab6:	f8d8 3014 	ldr.w	r3, [r8, #20]
 801baba:	f105 0724 	add.w	r7, r5, #36	; 0x24
 801babe:	685b      	ldr	r3, [r3, #4]
 801bac0:	4638      	mov	r0, r7
 801bac2:	f8a4 c032 	strh.w	ip, [r4, #50]	; 0x32
 801bac6:	63a3      	str	r3, [r4, #56]	; 0x38
 801bac8:	f7ff fb04 	bl	801b0d4 <ai_buffer_array_sane>
 801bacc:	4606      	mov	r6, r0
 801bace:	b938      	cbnz	r0, 801bae0 <ai_platform_api_get_network_report+0x324>
 801bad0:	4638      	mov	r0, r7
 801bad2:	f7ff faff 	bl	801b0d4 <ai_buffer_array_sane>
 801bad6:	b118      	cbz	r0, 801bae0 <ai_platform_api_get_network_report+0x324>
 801bad8:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 801bada:	2b00      	cmp	r3, #0
 801badc:	f040 8109 	bne.w	801bcf2 <ai_platform_api_get_network_report+0x536>
 801bae0:	f105 081c 	add.w	r8, r5, #28
 801bae4:	4640      	mov	r0, r8
 801bae6:	f7ff faf5 	bl	801b0d4 <ai_buffer_array_sane>
 801baea:	4606      	mov	r6, r0
 801baec:	b938      	cbnz	r0, 801bafe <ai_platform_api_get_network_report+0x342>
 801baee:	4640      	mov	r0, r8
 801baf0:	f7ff faf0 	bl	801b0d4 <ai_buffer_array_sane>
 801baf4:	b118      	cbz	r0, 801bafe <ai_platform_api_get_network_report+0x342>
 801baf6:	8beb      	ldrh	r3, [r5, #30]
 801baf8:	2b00      	cmp	r3, #0
 801bafa:	f040 8101 	bne.w	801bd00 <ai_platform_api_get_network_report+0x544>
 801bafe:	686b      	ldr	r3, [r5, #4]
 801bb00:	4abd      	ldr	r2, [pc, #756]	; (801bdf8 <ai_platform_api_get_network_report+0x63c>)
 801bb02:	67a3      	str	r3, [r4, #120]	; 0x78
 801bb04:	6813      	ldr	r3, [r2, #0]
 801bb06:	f023 0301 	bic.w	r3, r3, #1
 801bb0a:	6013      	str	r3, [r2, #0]
 801bb0c:	f7ff faec 	bl	801b0e8 <_ai_platform_acquire_crc>
 801bb10:	4bba      	ldr	r3, [pc, #744]	; (801bdfc <ai_platform_api_get_network_report+0x640>)
 801bb12:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 801bb16:	681b      	ldr	r3, [r3, #0]
 801bb18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801bb1c:	eb03 020c 	add.w	r2, r3, ip
 801bb20:	2a01      	cmp	r2, #1
 801bb22:	f240 8233 	bls.w	801bf8c <ai_platform_api_get_network_report+0x7d0>
 801bb26:	f240 4249 	movw	r2, #1097	; 0x449
 801bb2a:	4293      	cmp	r3, r2
 801bb2c:	f000 822e 	beq.w	801bf8c <ai_platform_api_get_network_report+0x7d0>
 801bb30:	4bb3      	ldr	r3, [pc, #716]	; (801be00 <ai_platform_api_get_network_report+0x644>)
 801bb32:	681a      	ldr	r2, [r3, #0]
 801bb34:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801bb38:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801bb3c:	f000 8216 	beq.w	801bf6c <ai_platform_api_get_network_report+0x7b0>
 801bb40:	681a      	ldr	r2, [r3, #0]
 801bb42:	f240 4183 	movw	r1, #1155	; 0x483
 801bb46:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801bb4a:	428a      	cmp	r2, r1
 801bb4c:	f000 81fe 	beq.w	801bf4c <ai_platform_api_get_network_report+0x790>
 801bb50:	681b      	ldr	r3, [r3, #0]
 801bb52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801bb56:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801bb5a:	f000 81e7 	beq.w	801bf2c <ai_platform_api_get_network_report+0x770>
 801bb5e:	f7ff fac5 	bl	801b0ec <_ai_platform_release_crc>
 801bb62:	4aa5      	ldr	r2, [pc, #660]	; (801bdf8 <ai_platform_api_get_network_report+0x63c>)
 801bb64:	4ba7      	ldr	r3, [pc, #668]	; (801be04 <ai_platform_api_get_network_report+0x648>)
 801bb66:	f46f 668a 	mvn.w	r6, #1104	; 0x450
 801bb6a:	6123      	str	r3, [r4, #16]
 801bb6c:	6813      	ldr	r3, [r2, #0]
 801bb6e:	f023 0301 	bic.w	r3, r3, #1
 801bb72:	6013      	str	r3, [r2, #0]
 801bb74:	f7ff fab8 	bl	801b0e8 <_ai_platform_acquire_crc>
 801bb78:	4ba0      	ldr	r3, [pc, #640]	; (801bdfc <ai_platform_api_get_network_report+0x640>)
 801bb7a:	681b      	ldr	r3, [r3, #0]
 801bb7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801bb80:	199a      	adds	r2, r3, r6
 801bb82:	2a01      	cmp	r2, #1
 801bb84:	f240 81c2 	bls.w	801bf0c <ai_platform_api_get_network_report+0x750>
 801bb88:	f240 4249 	movw	r2, #1097	; 0x449
 801bb8c:	4293      	cmp	r3, r2
 801bb8e:	f000 81bd 	beq.w	801bf0c <ai_platform_api_get_network_report+0x750>
 801bb92:	4b9b      	ldr	r3, [pc, #620]	; (801be00 <ai_platform_api_get_network_report+0x644>)
 801bb94:	681a      	ldr	r2, [r3, #0]
 801bb96:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801bb9a:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801bb9e:	f000 81a5 	beq.w	801beec <ai_platform_api_get_network_report+0x730>
 801bba2:	681a      	ldr	r2, [r3, #0]
 801bba4:	f240 4183 	movw	r1, #1155	; 0x483
 801bba8:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801bbac:	428a      	cmp	r2, r1
 801bbae:	f000 818d 	beq.w	801becc <ai_platform_api_get_network_report+0x710>
 801bbb2:	681b      	ldr	r3, [r3, #0]
 801bbb4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801bbb8:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801bbbc:	f000 8176 	beq.w	801beac <ai_platform_api_get_network_report+0x6f0>
 801bbc0:	f7ff fa94 	bl	801b0ec <_ai_platform_release_crc>
 801bbc4:	4a8c      	ldr	r2, [pc, #560]	; (801bdf8 <ai_platform_api_get_network_report+0x63c>)
 801bbc6:	f240 1307 	movw	r3, #263	; 0x107
 801bbca:	6163      	str	r3, [r4, #20]
 801bbcc:	6813      	ldr	r3, [r2, #0]
 801bbce:	f023 0301 	bic.w	r3, r3, #1
 801bbd2:	6013      	str	r3, [r2, #0]
 801bbd4:	f7ff fa88 	bl	801b0e8 <_ai_platform_acquire_crc>
 801bbd8:	4b88      	ldr	r3, [pc, #544]	; (801bdfc <ai_platform_api_get_network_report+0x640>)
 801bbda:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 801bbde:	681b      	ldr	r3, [r3, #0]
 801bbe0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801bbe4:	185a      	adds	r2, r3, r1
 801bbe6:	2a01      	cmp	r2, #1
 801bbe8:	f240 8150 	bls.w	801be8c <ai_platform_api_get_network_report+0x6d0>
 801bbec:	f240 4249 	movw	r2, #1097	; 0x449
 801bbf0:	4293      	cmp	r3, r2
 801bbf2:	f000 814b 	beq.w	801be8c <ai_platform_api_get_network_report+0x6d0>
 801bbf6:	4b82      	ldr	r3, [pc, #520]	; (801be00 <ai_platform_api_get_network_report+0x644>)
 801bbf8:	681a      	ldr	r2, [r3, #0]
 801bbfa:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801bbfe:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801bc02:	f000 8133 	beq.w	801be6c <ai_platform_api_get_network_report+0x6b0>
 801bc06:	681a      	ldr	r2, [r3, #0]
 801bc08:	f240 4183 	movw	r1, #1155	; 0x483
 801bc0c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801bc10:	428a      	cmp	r2, r1
 801bc12:	f000 811b 	beq.w	801be4c <ai_platform_api_get_network_report+0x690>
 801bc16:	681b      	ldr	r3, [r3, #0]
 801bc18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801bc1c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801bc20:	f000 8104 	beq.w	801be2c <ai_platform_api_get_network_report+0x670>
 801bc24:	f7ff fa62 	bl	801b0ec <_ai_platform_release_crc>
 801bc28:	4a73      	ldr	r2, [pc, #460]	; (801bdf8 <ai_platform_api_get_network_report+0x63c>)
 801bc2a:	f240 2301 	movw	r3, #513	; 0x201
 801bc2e:	6263      	str	r3, [r4, #36]	; 0x24
 801bc30:	6813      	ldr	r3, [r2, #0]
 801bc32:	f023 0301 	bic.w	r3, r3, #1
 801bc36:	6013      	str	r3, [r2, #0]
 801bc38:	f7ff fa56 	bl	801b0e8 <_ai_platform_acquire_crc>
 801bc3c:	4b6f      	ldr	r3, [pc, #444]	; (801bdfc <ai_platform_api_get_network_report+0x640>)
 801bc3e:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801bc42:	681b      	ldr	r3, [r3, #0]
 801bc44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801bc48:	189a      	adds	r2, r3, r2
 801bc4a:	2a01      	cmp	r2, #1
 801bc4c:	f240 80c3 	bls.w	801bdd6 <ai_platform_api_get_network_report+0x61a>
 801bc50:	f240 4249 	movw	r2, #1097	; 0x449
 801bc54:	4293      	cmp	r3, r2
 801bc56:	f000 80be 	beq.w	801bdd6 <ai_platform_api_get_network_report+0x61a>
 801bc5a:	4b69      	ldr	r3, [pc, #420]	; (801be00 <ai_platform_api_get_network_report+0x644>)
 801bc5c:	681a      	ldr	r2, [r3, #0]
 801bc5e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801bc62:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801bc66:	f000 80a6 	beq.w	801bdb6 <ai_platform_api_get_network_report+0x5fa>
 801bc6a:	681a      	ldr	r2, [r3, #0]
 801bc6c:	f240 4183 	movw	r1, #1155	; 0x483
 801bc70:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801bc74:	428a      	cmp	r2, r1
 801bc76:	f000 808e 	beq.w	801bd96 <ai_platform_api_get_network_report+0x5da>
 801bc7a:	681b      	ldr	r3, [r3, #0]
 801bc7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801bc80:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801bc84:	d077      	beq.n	801bd76 <ai_platform_api_get_network_report+0x5ba>
 801bc86:	f7ff fa31 	bl	801b0ec <_ai_platform_release_crc>
 801bc8a:	f240 5301 	movw	r3, #1281	; 0x501
 801bc8e:	62a3      	str	r3, [r4, #40]	; 0x28
 801bc90:	6c68      	ldr	r0, [r5, #68]	; 0x44
 801bc92:	f008 fed9 	bl	8024a48 <ai_platform_version_get>
 801bc96:	4b5c      	ldr	r3, [pc, #368]	; (801be08 <ai_platform_api_get_network_report+0x64c>)
 801bc98:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801bc9a:	6220      	str	r0, [r4, #32]
 801bc9c:	429a      	cmp	r2, r3
 801bc9e:	d051      	beq.n	801bd44 <ai_platform_api_get_network_report+0x588>
 801bca0:	495a      	ldr	r1, [pc, #360]	; (801be0c <ai_platform_api_get_network_report+0x650>)
 801bca2:	2200      	movs	r2, #0
 801bca4:	f104 063c 	add.w	r6, r4, #60	; 0x3c
 801bca8:	4b59      	ldr	r3, [pc, #356]	; (801be10 <ai_platform_api_get_network_report+0x654>)
 801bcaa:	63e1      	str	r1, [r4, #60]	; 0x3c
 801bcac:	f240 4101 	movw	r1, #1025	; 0x401
 801bcb0:	f10d 0e10 	add.w	lr, sp, #16
 801bcb4:	46b4      	mov	ip, r6
 801bcb6:	6521      	str	r1, [r4, #80]	; 0x50
 801bcb8:	f104 0958 	add.w	r9, r4, #88	; 0x58
 801bcbc:	f8c4 e054 	str.w	lr, [r4, #84]	; 0x54
 801bcc0:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
 801bcc4:	e9c4 2212 	strd	r2, r2, [r4, #72]	; 0x48
 801bcc8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801bcca:	464c      	mov	r4, r9
 801bccc:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 801bcd0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801bcd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801bcd6:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 801bcda:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801bcde:	4638      	mov	r0, r7
 801bce0:	f7ff f9f8 	bl	801b0d4 <ai_buffer_array_sane>
 801bce4:	bb08      	cbnz	r0, 801bd2a <ai_platform_api_get_network_report+0x56e>
 801bce6:	4640      	mov	r0, r8
 801bce8:	f7ff f9f4 	bl	801b0d4 <ai_buffer_array_sane>
 801bcec:	b978      	cbnz	r0, 801bd0e <ai_platform_api_get_network_report+0x552>
 801bcee:	2601      	movs	r6, #1
 801bcf0:	e64f      	b.n	801b992 <ai_platform_api_get_network_report+0x1d6>
 801bcf2:	f105 0010 	add.w	r0, r5, #16
 801bcf6:	2213      	movs	r2, #19
 801bcf8:	2111      	movs	r1, #17
 801bcfa:	f001 fd11 	bl	801d720 <core_set_error>
 801bcfe:	e648      	b.n	801b992 <ai_platform_api_get_network_report+0x1d6>
 801bd00:	f105 0010 	add.w	r0, r5, #16
 801bd04:	2212      	movs	r2, #18
 801bd06:	2111      	movs	r1, #17
 801bd08:	f001 fd0a 	bl	801d720 <core_set_error>
 801bd0c:	e641      	b.n	801b992 <ai_platform_api_get_network_report+0x1d6>
 801bd0e:	4640      	mov	r0, r8
 801bd10:	f7ff f9e0 	bl	801b0d4 <ai_buffer_array_sane>
 801bd14:	b318      	cbz	r0, 801bd5e <ai_platform_api_get_network_report+0x5a2>
 801bd16:	6a2f      	ldr	r7, [r5, #32]
 801bd18:	4634      	mov	r4, r6
 801bd1a:	2601      	movs	r6, #1
 801bd1c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801bd1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801bd20:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801bd24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801bd28:	e633      	b.n	801b992 <ai_platform_api_get_network_report+0x1d6>
 801bd2a:	4638      	mov	r0, r7
 801bd2c:	f7ff f9d2 	bl	801b0d4 <ai_buffer_array_sane>
 801bd30:	b1f0      	cbz	r0, 801bd70 <ai_platform_api_get_network_report+0x5b4>
 801bd32:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 801bd34:	464c      	mov	r4, r9
 801bd36:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801bd38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801bd3a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801bd3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801bd42:	e7d0      	b.n	801bce6 <ai_platform_api_get_network_report+0x52a>
 801bd44:	e897 0003 	ldmia.w	r7, {r0, r1}
 801bd48:	f104 0348 	add.w	r3, r4, #72	; 0x48
 801bd4c:	3440      	adds	r4, #64	; 0x40
 801bd4e:	2601      	movs	r6, #1
 801bd50:	e883 0003 	stmia.w	r3, {r0, r1}
 801bd54:	e898 0003 	ldmia.w	r8, {r0, r1}
 801bd58:	e884 0003 	stmia.w	r4, {r0, r1}
 801bd5c:	e619      	b.n	801b992 <ai_platform_api_get_network_report+0x1d6>
 801bd5e:	4605      	mov	r5, r0
 801bd60:	4634      	mov	r4, r6
 801bd62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801bd64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801bd66:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801bd6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801bd6e:	deff      	udf	#255	; 0xff
 801bd70:	4605      	mov	r5, r0
 801bd72:	464c      	mov	r4, r9
 801bd74:	e7f5      	b.n	801bd62 <ai_platform_api_get_network_report+0x5a6>
 801bd76:	4b27      	ldr	r3, [pc, #156]	; (801be14 <ai_platform_api_get_network_report+0x658>)
 801bd78:	2201      	movs	r2, #1
 801bd7a:	4619      	mov	r1, r3
 801bd7c:	601a      	str	r2, [r3, #0]
 801bd7e:	680b      	ldr	r3, [r1, #0]
 801bd80:	2b00      	cmp	r3, #0
 801bd82:	d1fc      	bne.n	801bd7e <ai_platform_api_get_network_report+0x5c2>
 801bd84:	4b24      	ldr	r3, [pc, #144]	; (801be18 <ai_platform_api_get_network_report+0x65c>)
 801bd86:	4925      	ldr	r1, [pc, #148]	; (801be1c <ai_platform_api_get_network_report+0x660>)
 801bd88:	4a25      	ldr	r2, [pc, #148]	; (801be20 <ai_platform_api_get_network_report+0x664>)
 801bd8a:	6019      	str	r1, [r3, #0]
 801bd8c:	681b      	ldr	r3, [r3, #0]
 801bd8e:	4293      	cmp	r3, r2
 801bd90:	f43f af79 	beq.w	801bc86 <ai_platform_api_get_network_report+0x4ca>
 801bd94:	e7fe      	b.n	801bd94 <ai_platform_api_get_network_report+0x5d8>
 801bd96:	4b23      	ldr	r3, [pc, #140]	; (801be24 <ai_platform_api_get_network_report+0x668>)
 801bd98:	2201      	movs	r2, #1
 801bd9a:	4619      	mov	r1, r3
 801bd9c:	601a      	str	r2, [r3, #0]
 801bd9e:	680b      	ldr	r3, [r1, #0]
 801bda0:	2b00      	cmp	r3, #0
 801bda2:	d1fc      	bne.n	801bd9e <ai_platform_api_get_network_report+0x5e2>
 801bda4:	4b20      	ldr	r3, [pc, #128]	; (801be28 <ai_platform_api_get_network_report+0x66c>)
 801bda6:	491d      	ldr	r1, [pc, #116]	; (801be1c <ai_platform_api_get_network_report+0x660>)
 801bda8:	4a1d      	ldr	r2, [pc, #116]	; (801be20 <ai_platform_api_get_network_report+0x664>)
 801bdaa:	6019      	str	r1, [r3, #0]
 801bdac:	681b      	ldr	r3, [r3, #0]
 801bdae:	4293      	cmp	r3, r2
 801bdb0:	f43f af69 	beq.w	801bc86 <ai_platform_api_get_network_report+0x4ca>
 801bdb4:	e7fe      	b.n	801bdb4 <ai_platform_api_get_network_report+0x5f8>
 801bdb6:	4b1b      	ldr	r3, [pc, #108]	; (801be24 <ai_platform_api_get_network_report+0x668>)
 801bdb8:	2201      	movs	r2, #1
 801bdba:	4619      	mov	r1, r3
 801bdbc:	601a      	str	r2, [r3, #0]
 801bdbe:	680b      	ldr	r3, [r1, #0]
 801bdc0:	2b00      	cmp	r3, #0
 801bdc2:	d1fc      	bne.n	801bdbe <ai_platform_api_get_network_report+0x602>
 801bdc4:	4b18      	ldr	r3, [pc, #96]	; (801be28 <ai_platform_api_get_network_report+0x66c>)
 801bdc6:	4915      	ldr	r1, [pc, #84]	; (801be1c <ai_platform_api_get_network_report+0x660>)
 801bdc8:	4a15      	ldr	r2, [pc, #84]	; (801be20 <ai_platform_api_get_network_report+0x664>)
 801bdca:	6019      	str	r1, [r3, #0]
 801bdcc:	681b      	ldr	r3, [r3, #0]
 801bdce:	4293      	cmp	r3, r2
 801bdd0:	f43f af59 	beq.w	801bc86 <ai_platform_api_get_network_report+0x4ca>
 801bdd4:	e7fe      	b.n	801bdd4 <ai_platform_api_get_network_report+0x618>
 801bdd6:	4b0f      	ldr	r3, [pc, #60]	; (801be14 <ai_platform_api_get_network_report+0x658>)
 801bdd8:	2201      	movs	r2, #1
 801bdda:	4619      	mov	r1, r3
 801bddc:	601a      	str	r2, [r3, #0]
 801bdde:	680b      	ldr	r3, [r1, #0]
 801bde0:	2b00      	cmp	r3, #0
 801bde2:	d1fc      	bne.n	801bdde <ai_platform_api_get_network_report+0x622>
 801bde4:	4b0c      	ldr	r3, [pc, #48]	; (801be18 <ai_platform_api_get_network_report+0x65c>)
 801bde6:	490d      	ldr	r1, [pc, #52]	; (801be1c <ai_platform_api_get_network_report+0x660>)
 801bde8:	4a0d      	ldr	r2, [pc, #52]	; (801be20 <ai_platform_api_get_network_report+0x664>)
 801bdea:	6019      	str	r1, [r3, #0]
 801bdec:	681b      	ldr	r3, [r3, #0]
 801bdee:	4293      	cmp	r3, r2
 801bdf0:	f43f af49 	beq.w	801bc86 <ai_platform_api_get_network_report+0x4ca>
 801bdf4:	e7fe      	b.n	801bdf4 <ai_platform_api_get_network_report+0x638>
 801bdf6:	bf00      	nop
 801bdf8:	e0002000 	.word	0xe0002000
 801bdfc:	e0042000 	.word	0xe0042000
 801be00:	5c001000 	.word	0x5c001000
 801be04:	08028934 	.word	0x08028934
 801be08:	a1facade 	.word	0xa1facade
 801be0c:	00040440 	.word	0x00040440
 801be10:	0802831c 	.word	0x0802831c
 801be14:	40023008 	.word	0x40023008
 801be18:	40023000 	.word	0x40023000
 801be1c:	f407a5c2 	.word	0xf407a5c2
 801be20:	b5e8b5cd 	.word	0xb5e8b5cd
 801be24:	58024c08 	.word	0x58024c08
 801be28:	58024c00 	.word	0x58024c00
 801be2c:	4b74      	ldr	r3, [pc, #464]	; (801c000 <ai_platform_api_get_network_report+0x844>)
 801be2e:	2201      	movs	r2, #1
 801be30:	4619      	mov	r1, r3
 801be32:	601a      	str	r2, [r3, #0]
 801be34:	680b      	ldr	r3, [r1, #0]
 801be36:	2b00      	cmp	r3, #0
 801be38:	d1fc      	bne.n	801be34 <ai_platform_api_get_network_report+0x678>
 801be3a:	4b72      	ldr	r3, [pc, #456]	; (801c004 <ai_platform_api_get_network_report+0x848>)
 801be3c:	4972      	ldr	r1, [pc, #456]	; (801c008 <ai_platform_api_get_network_report+0x84c>)
 801be3e:	4a73      	ldr	r2, [pc, #460]	; (801c00c <ai_platform_api_get_network_report+0x850>)
 801be40:	6019      	str	r1, [r3, #0]
 801be42:	681b      	ldr	r3, [r3, #0]
 801be44:	4293      	cmp	r3, r2
 801be46:	f43f aeed 	beq.w	801bc24 <ai_platform_api_get_network_report+0x468>
 801be4a:	e7fe      	b.n	801be4a <ai_platform_api_get_network_report+0x68e>
 801be4c:	4b70      	ldr	r3, [pc, #448]	; (801c010 <ai_platform_api_get_network_report+0x854>)
 801be4e:	2201      	movs	r2, #1
 801be50:	4619      	mov	r1, r3
 801be52:	601a      	str	r2, [r3, #0]
 801be54:	680b      	ldr	r3, [r1, #0]
 801be56:	2b00      	cmp	r3, #0
 801be58:	d1fc      	bne.n	801be54 <ai_platform_api_get_network_report+0x698>
 801be5a:	4b6e      	ldr	r3, [pc, #440]	; (801c014 <ai_platform_api_get_network_report+0x858>)
 801be5c:	496a      	ldr	r1, [pc, #424]	; (801c008 <ai_platform_api_get_network_report+0x84c>)
 801be5e:	4a6b      	ldr	r2, [pc, #428]	; (801c00c <ai_platform_api_get_network_report+0x850>)
 801be60:	6019      	str	r1, [r3, #0]
 801be62:	681b      	ldr	r3, [r3, #0]
 801be64:	4293      	cmp	r3, r2
 801be66:	f43f aedd 	beq.w	801bc24 <ai_platform_api_get_network_report+0x468>
 801be6a:	e7fe      	b.n	801be6a <ai_platform_api_get_network_report+0x6ae>
 801be6c:	4b68      	ldr	r3, [pc, #416]	; (801c010 <ai_platform_api_get_network_report+0x854>)
 801be6e:	2201      	movs	r2, #1
 801be70:	4619      	mov	r1, r3
 801be72:	601a      	str	r2, [r3, #0]
 801be74:	680b      	ldr	r3, [r1, #0]
 801be76:	2b00      	cmp	r3, #0
 801be78:	d1fc      	bne.n	801be74 <ai_platform_api_get_network_report+0x6b8>
 801be7a:	4b66      	ldr	r3, [pc, #408]	; (801c014 <ai_platform_api_get_network_report+0x858>)
 801be7c:	4962      	ldr	r1, [pc, #392]	; (801c008 <ai_platform_api_get_network_report+0x84c>)
 801be7e:	4a63      	ldr	r2, [pc, #396]	; (801c00c <ai_platform_api_get_network_report+0x850>)
 801be80:	6019      	str	r1, [r3, #0]
 801be82:	681b      	ldr	r3, [r3, #0]
 801be84:	4293      	cmp	r3, r2
 801be86:	f43f aecd 	beq.w	801bc24 <ai_platform_api_get_network_report+0x468>
 801be8a:	e7fe      	b.n	801be8a <ai_platform_api_get_network_report+0x6ce>
 801be8c:	4b5c      	ldr	r3, [pc, #368]	; (801c000 <ai_platform_api_get_network_report+0x844>)
 801be8e:	2201      	movs	r2, #1
 801be90:	4619      	mov	r1, r3
 801be92:	601a      	str	r2, [r3, #0]
 801be94:	680b      	ldr	r3, [r1, #0]
 801be96:	2b00      	cmp	r3, #0
 801be98:	d1fc      	bne.n	801be94 <ai_platform_api_get_network_report+0x6d8>
 801be9a:	4b5a      	ldr	r3, [pc, #360]	; (801c004 <ai_platform_api_get_network_report+0x848>)
 801be9c:	495a      	ldr	r1, [pc, #360]	; (801c008 <ai_platform_api_get_network_report+0x84c>)
 801be9e:	4a5b      	ldr	r2, [pc, #364]	; (801c00c <ai_platform_api_get_network_report+0x850>)
 801bea0:	6019      	str	r1, [r3, #0]
 801bea2:	681b      	ldr	r3, [r3, #0]
 801bea4:	4293      	cmp	r3, r2
 801bea6:	f43f aebd 	beq.w	801bc24 <ai_platform_api_get_network_report+0x468>
 801beaa:	e7fe      	b.n	801beaa <ai_platform_api_get_network_report+0x6ee>
 801beac:	4b54      	ldr	r3, [pc, #336]	; (801c000 <ai_platform_api_get_network_report+0x844>)
 801beae:	2201      	movs	r2, #1
 801beb0:	4619      	mov	r1, r3
 801beb2:	601a      	str	r2, [r3, #0]
 801beb4:	680b      	ldr	r3, [r1, #0]
 801beb6:	2b00      	cmp	r3, #0
 801beb8:	d1fc      	bne.n	801beb4 <ai_platform_api_get_network_report+0x6f8>
 801beba:	4b52      	ldr	r3, [pc, #328]	; (801c004 <ai_platform_api_get_network_report+0x848>)
 801bebc:	4952      	ldr	r1, [pc, #328]	; (801c008 <ai_platform_api_get_network_report+0x84c>)
 801bebe:	4a53      	ldr	r2, [pc, #332]	; (801c00c <ai_platform_api_get_network_report+0x850>)
 801bec0:	6019      	str	r1, [r3, #0]
 801bec2:	681b      	ldr	r3, [r3, #0]
 801bec4:	4293      	cmp	r3, r2
 801bec6:	f43f ae7b 	beq.w	801bbc0 <ai_platform_api_get_network_report+0x404>
 801beca:	e7fe      	b.n	801beca <ai_platform_api_get_network_report+0x70e>
 801becc:	4b50      	ldr	r3, [pc, #320]	; (801c010 <ai_platform_api_get_network_report+0x854>)
 801bece:	2201      	movs	r2, #1
 801bed0:	4619      	mov	r1, r3
 801bed2:	601a      	str	r2, [r3, #0]
 801bed4:	680b      	ldr	r3, [r1, #0]
 801bed6:	2b00      	cmp	r3, #0
 801bed8:	d1fc      	bne.n	801bed4 <ai_platform_api_get_network_report+0x718>
 801beda:	4b4e      	ldr	r3, [pc, #312]	; (801c014 <ai_platform_api_get_network_report+0x858>)
 801bedc:	494a      	ldr	r1, [pc, #296]	; (801c008 <ai_platform_api_get_network_report+0x84c>)
 801bede:	4a4b      	ldr	r2, [pc, #300]	; (801c00c <ai_platform_api_get_network_report+0x850>)
 801bee0:	6019      	str	r1, [r3, #0]
 801bee2:	681b      	ldr	r3, [r3, #0]
 801bee4:	4293      	cmp	r3, r2
 801bee6:	f43f ae6b 	beq.w	801bbc0 <ai_platform_api_get_network_report+0x404>
 801beea:	e7fe      	b.n	801beea <ai_platform_api_get_network_report+0x72e>
 801beec:	4b48      	ldr	r3, [pc, #288]	; (801c010 <ai_platform_api_get_network_report+0x854>)
 801beee:	2201      	movs	r2, #1
 801bef0:	4619      	mov	r1, r3
 801bef2:	601a      	str	r2, [r3, #0]
 801bef4:	680b      	ldr	r3, [r1, #0]
 801bef6:	2b00      	cmp	r3, #0
 801bef8:	d1fc      	bne.n	801bef4 <ai_platform_api_get_network_report+0x738>
 801befa:	4b46      	ldr	r3, [pc, #280]	; (801c014 <ai_platform_api_get_network_report+0x858>)
 801befc:	4942      	ldr	r1, [pc, #264]	; (801c008 <ai_platform_api_get_network_report+0x84c>)
 801befe:	4a43      	ldr	r2, [pc, #268]	; (801c00c <ai_platform_api_get_network_report+0x850>)
 801bf00:	6019      	str	r1, [r3, #0]
 801bf02:	681b      	ldr	r3, [r3, #0]
 801bf04:	4293      	cmp	r3, r2
 801bf06:	f43f ae5b 	beq.w	801bbc0 <ai_platform_api_get_network_report+0x404>
 801bf0a:	e7fe      	b.n	801bf0a <ai_platform_api_get_network_report+0x74e>
 801bf0c:	4b3c      	ldr	r3, [pc, #240]	; (801c000 <ai_platform_api_get_network_report+0x844>)
 801bf0e:	2201      	movs	r2, #1
 801bf10:	4619      	mov	r1, r3
 801bf12:	601a      	str	r2, [r3, #0]
 801bf14:	680b      	ldr	r3, [r1, #0]
 801bf16:	2b00      	cmp	r3, #0
 801bf18:	d1fc      	bne.n	801bf14 <ai_platform_api_get_network_report+0x758>
 801bf1a:	4b3a      	ldr	r3, [pc, #232]	; (801c004 <ai_platform_api_get_network_report+0x848>)
 801bf1c:	493a      	ldr	r1, [pc, #232]	; (801c008 <ai_platform_api_get_network_report+0x84c>)
 801bf1e:	4a3b      	ldr	r2, [pc, #236]	; (801c00c <ai_platform_api_get_network_report+0x850>)
 801bf20:	6019      	str	r1, [r3, #0]
 801bf22:	681b      	ldr	r3, [r3, #0]
 801bf24:	4293      	cmp	r3, r2
 801bf26:	f43f ae4b 	beq.w	801bbc0 <ai_platform_api_get_network_report+0x404>
 801bf2a:	e7fe      	b.n	801bf2a <ai_platform_api_get_network_report+0x76e>
 801bf2c:	4b34      	ldr	r3, [pc, #208]	; (801c000 <ai_platform_api_get_network_report+0x844>)
 801bf2e:	2201      	movs	r2, #1
 801bf30:	4619      	mov	r1, r3
 801bf32:	601a      	str	r2, [r3, #0]
 801bf34:	680b      	ldr	r3, [r1, #0]
 801bf36:	2b00      	cmp	r3, #0
 801bf38:	d1fc      	bne.n	801bf34 <ai_platform_api_get_network_report+0x778>
 801bf3a:	4b32      	ldr	r3, [pc, #200]	; (801c004 <ai_platform_api_get_network_report+0x848>)
 801bf3c:	4932      	ldr	r1, [pc, #200]	; (801c008 <ai_platform_api_get_network_report+0x84c>)
 801bf3e:	4a33      	ldr	r2, [pc, #204]	; (801c00c <ai_platform_api_get_network_report+0x850>)
 801bf40:	6019      	str	r1, [r3, #0]
 801bf42:	681b      	ldr	r3, [r3, #0]
 801bf44:	4293      	cmp	r3, r2
 801bf46:	f43f ae0a 	beq.w	801bb5e <ai_platform_api_get_network_report+0x3a2>
 801bf4a:	e7fe      	b.n	801bf4a <ai_platform_api_get_network_report+0x78e>
 801bf4c:	4b30      	ldr	r3, [pc, #192]	; (801c010 <ai_platform_api_get_network_report+0x854>)
 801bf4e:	2201      	movs	r2, #1
 801bf50:	4619      	mov	r1, r3
 801bf52:	601a      	str	r2, [r3, #0]
 801bf54:	680b      	ldr	r3, [r1, #0]
 801bf56:	2b00      	cmp	r3, #0
 801bf58:	d1fc      	bne.n	801bf54 <ai_platform_api_get_network_report+0x798>
 801bf5a:	4b2e      	ldr	r3, [pc, #184]	; (801c014 <ai_platform_api_get_network_report+0x858>)
 801bf5c:	492a      	ldr	r1, [pc, #168]	; (801c008 <ai_platform_api_get_network_report+0x84c>)
 801bf5e:	4a2b      	ldr	r2, [pc, #172]	; (801c00c <ai_platform_api_get_network_report+0x850>)
 801bf60:	6019      	str	r1, [r3, #0]
 801bf62:	681b      	ldr	r3, [r3, #0]
 801bf64:	4293      	cmp	r3, r2
 801bf66:	f43f adfa 	beq.w	801bb5e <ai_platform_api_get_network_report+0x3a2>
 801bf6a:	e7fe      	b.n	801bf6a <ai_platform_api_get_network_report+0x7ae>
 801bf6c:	4b28      	ldr	r3, [pc, #160]	; (801c010 <ai_platform_api_get_network_report+0x854>)
 801bf6e:	2201      	movs	r2, #1
 801bf70:	4619      	mov	r1, r3
 801bf72:	601a      	str	r2, [r3, #0]
 801bf74:	680b      	ldr	r3, [r1, #0]
 801bf76:	2b00      	cmp	r3, #0
 801bf78:	d1fc      	bne.n	801bf74 <ai_platform_api_get_network_report+0x7b8>
 801bf7a:	4b26      	ldr	r3, [pc, #152]	; (801c014 <ai_platform_api_get_network_report+0x858>)
 801bf7c:	4922      	ldr	r1, [pc, #136]	; (801c008 <ai_platform_api_get_network_report+0x84c>)
 801bf7e:	4a23      	ldr	r2, [pc, #140]	; (801c00c <ai_platform_api_get_network_report+0x850>)
 801bf80:	6019      	str	r1, [r3, #0]
 801bf82:	681b      	ldr	r3, [r3, #0]
 801bf84:	4293      	cmp	r3, r2
 801bf86:	f43f adea 	beq.w	801bb5e <ai_platform_api_get_network_report+0x3a2>
 801bf8a:	e7fe      	b.n	801bf8a <ai_platform_api_get_network_report+0x7ce>
 801bf8c:	4b1c      	ldr	r3, [pc, #112]	; (801c000 <ai_platform_api_get_network_report+0x844>)
 801bf8e:	2201      	movs	r2, #1
 801bf90:	4619      	mov	r1, r3
 801bf92:	601a      	str	r2, [r3, #0]
 801bf94:	680b      	ldr	r3, [r1, #0]
 801bf96:	2b00      	cmp	r3, #0
 801bf98:	d1fc      	bne.n	801bf94 <ai_platform_api_get_network_report+0x7d8>
 801bf9a:	4b1a      	ldr	r3, [pc, #104]	; (801c004 <ai_platform_api_get_network_report+0x848>)
 801bf9c:	491a      	ldr	r1, [pc, #104]	; (801c008 <ai_platform_api_get_network_report+0x84c>)
 801bf9e:	4a1b      	ldr	r2, [pc, #108]	; (801c00c <ai_platform_api_get_network_report+0x850>)
 801bfa0:	6019      	str	r1, [r3, #0]
 801bfa2:	681b      	ldr	r3, [r3, #0]
 801bfa4:	4293      	cmp	r3, r2
 801bfa6:	f43f adda 	beq.w	801bb5e <ai_platform_api_get_network_report+0x3a2>
 801bfaa:	e7fe      	b.n	801bfaa <ai_platform_api_get_network_report+0x7ee>
 801bfac:	f105 0010 	add.w	r0, r5, #16
 801bfb0:	2218      	movs	r2, #24
 801bfb2:	2111      	movs	r1, #17
 801bfb4:	2600      	movs	r6, #0
 801bfb6:	f001 fbb3 	bl	801d720 <core_set_error>
 801bfba:	e4ea      	b.n	801b992 <ai_platform_api_get_network_report+0x1d6>
 801bfbc:	2600      	movs	r6, #0
 801bfbe:	e4e8      	b.n	801b992 <ai_platform_api_get_network_report+0x1d6>
 801bfc0:	4b0f      	ldr	r3, [pc, #60]	; (801c000 <ai_platform_api_get_network_report+0x844>)
 801bfc2:	2201      	movs	r2, #1
 801bfc4:	4619      	mov	r1, r3
 801bfc6:	601a      	str	r2, [r3, #0]
 801bfc8:	680b      	ldr	r3, [r1, #0]
 801bfca:	2b00      	cmp	r3, #0
 801bfcc:	d1fc      	bne.n	801bfc8 <ai_platform_api_get_network_report+0x80c>
 801bfce:	4b0d      	ldr	r3, [pc, #52]	; (801c004 <ai_platform_api_get_network_report+0x848>)
 801bfd0:	490d      	ldr	r1, [pc, #52]	; (801c008 <ai_platform_api_get_network_report+0x84c>)
 801bfd2:	4a0e      	ldr	r2, [pc, #56]	; (801c00c <ai_platform_api_get_network_report+0x850>)
 801bfd4:	6019      	str	r1, [r3, #0]
 801bfd6:	681b      	ldr	r3, [r3, #0]
 801bfd8:	4293      	cmp	r3, r2
 801bfda:	f43f ac28 	beq.w	801b82e <ai_platform_api_get_network_report+0x72>
 801bfde:	e7fe      	b.n	801bfde <ai_platform_api_get_network_report+0x822>
 801bfe0:	4b0b      	ldr	r3, [pc, #44]	; (801c010 <ai_platform_api_get_network_report+0x854>)
 801bfe2:	2201      	movs	r2, #1
 801bfe4:	4619      	mov	r1, r3
 801bfe6:	601a      	str	r2, [r3, #0]
 801bfe8:	680b      	ldr	r3, [r1, #0]
 801bfea:	2b00      	cmp	r3, #0
 801bfec:	d1fc      	bne.n	801bfe8 <ai_platform_api_get_network_report+0x82c>
 801bfee:	4b09      	ldr	r3, [pc, #36]	; (801c014 <ai_platform_api_get_network_report+0x858>)
 801bff0:	4905      	ldr	r1, [pc, #20]	; (801c008 <ai_platform_api_get_network_report+0x84c>)
 801bff2:	4a06      	ldr	r2, [pc, #24]	; (801c00c <ai_platform_api_get_network_report+0x850>)
 801bff4:	6019      	str	r1, [r3, #0]
 801bff6:	681b      	ldr	r3, [r3, #0]
 801bff8:	4293      	cmp	r3, r2
 801bffa:	f43f ac18 	beq.w	801b82e <ai_platform_api_get_network_report+0x72>
 801bffe:	e7fe      	b.n	801bffe <ai_platform_api_get_network_report+0x842>
 801c000:	40023008 	.word	0x40023008
 801c004:	40023000 	.word	0x40023000
 801c008:	f407a5c2 	.word	0xf407a5c2
 801c00c:	b5e8b5cd 	.word	0xb5e8b5cd
 801c010:	58024c08 	.word	0x58024c08
 801c014:	58024c00 	.word	0x58024c00

0801c018 <ai_platform_network_create>:
 801c018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c01c:	b082      	sub	sp, #8
 801c01e:	4606      	mov	r6, r0
 801c020:	4615      	mov	r5, r2
 801c022:	461f      	mov	r7, r3
 801c024:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 801c028:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 801c02c:	f7ff f85c 	bl	801b0e8 <_ai_platform_acquire_crc>
 801c030:	b328      	cbz	r0, 801c07e <ai_platform_network_create+0x66>
 801c032:	4baa      	ldr	r3, [pc, #680]	; (801c2dc <ai_platform_network_create+0x2c4>)
 801c034:	f46f 648a 	mvn.w	r4, #1104	; 0x450
 801c038:	4602      	mov	r2, r0
 801c03a:	681b      	ldr	r3, [r3, #0]
 801c03c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801c040:	1919      	adds	r1, r3, r4
 801c042:	2901      	cmp	r1, #1
 801c044:	d921      	bls.n	801c08a <ai_platform_network_create+0x72>
 801c046:	f240 4149 	movw	r1, #1097	; 0x449
 801c04a:	428b      	cmp	r3, r1
 801c04c:	d01d      	beq.n	801c08a <ai_platform_network_create+0x72>
 801c04e:	4ba4      	ldr	r3, [pc, #656]	; (801c2e0 <ai_platform_network_create+0x2c8>)
 801c050:	6819      	ldr	r1, [r3, #0]
 801c052:	f3c1 010a 	ubfx	r1, r1, #0, #11
 801c056:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 801c05a:	d01e      	beq.n	801c09a <ai_platform_network_create+0x82>
 801c05c:	6819      	ldr	r1, [r3, #0]
 801c05e:	f240 4483 	movw	r4, #1155	; 0x483
 801c062:	f3c1 010a 	ubfx	r1, r1, #0, #11
 801c066:	42a1      	cmp	r1, r4
 801c068:	f000 8085 	beq.w	801c176 <ai_platform_network_create+0x15e>
 801c06c:	681b      	ldr	r3, [r3, #0]
 801c06e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801c072:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801c076:	f000 8157 	beq.w	801c328 <ai_platform_network_create+0x310>
 801c07a:	f7ff f837 	bl	801b0ec <_ai_platform_release_crc>
 801c07e:	f244 1333 	movw	r3, #16691	; 0x4133
 801c082:	4618      	mov	r0, r3
 801c084:	b002      	add	sp, #8
 801c086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c08a:	4b96      	ldr	r3, [pc, #600]	; (801c2e4 <ai_platform_network_create+0x2cc>)
 801c08c:	2118      	movs	r1, #24
 801c08e:	6019      	str	r1, [r3, #0]
 801c090:	6819      	ldr	r1, [r3, #0]
 801c092:	2918      	cmp	r1, #24
 801c094:	d059      	beq.n	801c14a <ai_platform_network_create+0x132>
 801c096:	4610      	mov	r0, r2
 801c098:	e7ef      	b.n	801c07a <ai_platform_network_create+0x62>
 801c09a:	4b93      	ldr	r3, [pc, #588]	; (801c2e8 <ai_platform_network_create+0x2d0>)
 801c09c:	2118      	movs	r1, #24
 801c09e:	6019      	str	r1, [r3, #0]
 801c0a0:	6819      	ldr	r1, [r3, #0]
 801c0a2:	2918      	cmp	r1, #24
 801c0a4:	d1e9      	bne.n	801c07a <ai_platform_network_create+0x62>
 801c0a6:	2101      	movs	r1, #1
 801c0a8:	4618      	mov	r0, r3
 801c0aa:	6019      	str	r1, [r3, #0]
 801c0ac:	6803      	ldr	r3, [r0, #0]
 801c0ae:	2b00      	cmp	r3, #0
 801c0b0:	d1fc      	bne.n	801c0ac <ai_platform_network_create+0x94>
 801c0b2:	4610      	mov	r0, r2
 801c0b4:	f7ff f81a 	bl	801b0ec <_ai_platform_release_crc>
 801c0b8:	4a8c      	ldr	r2, [pc, #560]	; (801c2ec <ai_platform_network_create+0x2d4>)
 801c0ba:	6813      	ldr	r3, [r2, #0]
 801c0bc:	f023 0301 	bic.w	r3, r3, #1
 801c0c0:	6013      	str	r3, [r2, #0]
 801c0c2:	f7ff f811 	bl	801b0e8 <_ai_platform_acquire_crc>
 801c0c6:	4b85      	ldr	r3, [pc, #532]	; (801c2dc <ai_platform_network_create+0x2c4>)
 801c0c8:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 801c0cc:	681b      	ldr	r3, [r3, #0]
 801c0ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801c0d2:	185a      	adds	r2, r3, r1
 801c0d4:	2a01      	cmp	r2, #1
 801c0d6:	d93f      	bls.n	801c158 <ai_platform_network_create+0x140>
 801c0d8:	f240 4249 	movw	r2, #1097	; 0x449
 801c0dc:	4293      	cmp	r3, r2
 801c0de:	d03b      	beq.n	801c158 <ai_platform_network_create+0x140>
 801c0e0:	4b7f      	ldr	r3, [pc, #508]	; (801c2e0 <ai_platform_network_create+0x2c8>)
 801c0e2:	681a      	ldr	r2, [r3, #0]
 801c0e4:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801c0e8:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801c0ec:	f000 810c 	beq.w	801c308 <ai_platform_network_create+0x2f0>
 801c0f0:	681a      	ldr	r2, [r3, #0]
 801c0f2:	f240 4183 	movw	r1, #1155	; 0x483
 801c0f6:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801c0fa:	428a      	cmp	r2, r1
 801c0fc:	f000 80de 	beq.w	801c2bc <ai_platform_network_create+0x2a4>
 801c100:	681b      	ldr	r3, [r3, #0]
 801c102:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801c106:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801c10a:	d07e      	beq.n	801c20a <ai_platform_network_create+0x1f2>
 801c10c:	f7fe ffee 	bl	801b0ec <_ai_platform_release_crc>
 801c110:	2e00      	cmp	r6, #0
 801c112:	d077      	beq.n	801c204 <ai_platform_network_create+0x1ec>
 801c114:	4b76      	ldr	r3, [pc, #472]	; (801c2f0 <ai_platform_network_create+0x2d8>)
 801c116:	602b      	str	r3, [r5, #0]
 801c118:	6035      	str	r5, [r6, #0]
 801c11a:	f001 faff 	bl	801d71c <core_init>
 801c11e:	2800      	cmp	r0, #0
 801c120:	d137      	bne.n	801c192 <ai_platform_network_create+0x17a>
 801c122:	2430      	movs	r4, #48	; 0x30
 801c124:	2300      	movs	r3, #0
 801c126:	f04f 0a10 	mov.w	sl, #16
 801c12a:	6033      	str	r3, [r6, #0]
 801c12c:	464a      	mov	r2, r9
 801c12e:	4641      	mov	r1, r8
 801c130:	4638      	mov	r0, r7
 801c132:	f008 fc83 	bl	8024a3c <ai_version_get>
 801c136:	2300      	movs	r3, #0
 801c138:	6468      	str	r0, [r5, #68]	; 0x44
 801c13a:	f364 0307 	bfi	r3, r4, #0, #8
 801c13e:	f36a 231f 	bfi	r3, sl, #8, #24
 801c142:	4618      	mov	r0, r3
 801c144:	b002      	add	sp, #8
 801c146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c14a:	2101      	movs	r1, #1
 801c14c:	4618      	mov	r0, r3
 801c14e:	6019      	str	r1, [r3, #0]
 801c150:	6803      	ldr	r3, [r0, #0]
 801c152:	2b00      	cmp	r3, #0
 801c154:	d1fc      	bne.n	801c150 <ai_platform_network_create+0x138>
 801c156:	e7ac      	b.n	801c0b2 <ai_platform_network_create+0x9a>
 801c158:	4b62      	ldr	r3, [pc, #392]	; (801c2e4 <ai_platform_network_create+0x2cc>)
 801c15a:	2201      	movs	r2, #1
 801c15c:	4619      	mov	r1, r3
 801c15e:	601a      	str	r2, [r3, #0]
 801c160:	680b      	ldr	r3, [r1, #0]
 801c162:	2b00      	cmp	r3, #0
 801c164:	d1fc      	bne.n	801c160 <ai_platform_network_create+0x148>
 801c166:	4b63      	ldr	r3, [pc, #396]	; (801c2f4 <ai_platform_network_create+0x2dc>)
 801c168:	4963      	ldr	r1, [pc, #396]	; (801c2f8 <ai_platform_network_create+0x2e0>)
 801c16a:	4a64      	ldr	r2, [pc, #400]	; (801c2fc <ai_platform_network_create+0x2e4>)
 801c16c:	6019      	str	r1, [r3, #0]
 801c16e:	681b      	ldr	r3, [r3, #0]
 801c170:	4293      	cmp	r3, r2
 801c172:	d0cb      	beq.n	801c10c <ai_platform_network_create+0xf4>
 801c174:	e7fe      	b.n	801c174 <ai_platform_network_create+0x15c>
 801c176:	4b5c      	ldr	r3, [pc, #368]	; (801c2e8 <ai_platform_network_create+0x2d0>)
 801c178:	2118      	movs	r1, #24
 801c17a:	6019      	str	r1, [r3, #0]
 801c17c:	6819      	ldr	r1, [r3, #0]
 801c17e:	2918      	cmp	r1, #24
 801c180:	f47f af7b 	bne.w	801c07a <ai_platform_network_create+0x62>
 801c184:	2101      	movs	r1, #1
 801c186:	4618      	mov	r0, r3
 801c188:	6019      	str	r1, [r3, #0]
 801c18a:	6803      	ldr	r3, [r0, #0]
 801c18c:	2b00      	cmp	r3, #0
 801c18e:	d1fc      	bne.n	801c18a <ai_platform_network_create+0x172>
 801c190:	e78f      	b.n	801c0b2 <ai_platform_network_create+0x9a>
 801c192:	4a56      	ldr	r2, [pc, #344]	; (801c2ec <ai_platform_network_create+0x2d4>)
 801c194:	6813      	ldr	r3, [r2, #0]
 801c196:	f023 0301 	bic.w	r3, r3, #1
 801c19a:	6013      	str	r3, [r2, #0]
 801c19c:	f7fe ffa4 	bl	801b0e8 <_ai_platform_acquire_crc>
 801c1a0:	4b4e      	ldr	r3, [pc, #312]	; (801c2dc <ai_platform_network_create+0x2c4>)
 801c1a2:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801c1a6:	681b      	ldr	r3, [r3, #0]
 801c1a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801c1ac:	189a      	adds	r2, r3, r2
 801c1ae:	2a01      	cmp	r2, #1
 801c1b0:	d975      	bls.n	801c29e <ai_platform_network_create+0x286>
 801c1b2:	f240 4249 	movw	r2, #1097	; 0x449
 801c1b6:	4293      	cmp	r3, r2
 801c1b8:	d071      	beq.n	801c29e <ai_platform_network_create+0x286>
 801c1ba:	4b49      	ldr	r3, [pc, #292]	; (801c2e0 <ai_platform_network_create+0x2c8>)
 801c1bc:	681a      	ldr	r2, [r3, #0]
 801c1be:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801c1c2:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801c1c6:	d05b      	beq.n	801c280 <ai_platform_network_create+0x268>
 801c1c8:	681a      	ldr	r2, [r3, #0]
 801c1ca:	f240 4183 	movw	r1, #1155	; 0x483
 801c1ce:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801c1d2:	428a      	cmp	r2, r1
 801c1d4:	d045      	beq.n	801c262 <ai_platform_network_create+0x24a>
 801c1d6:	681b      	ldr	r3, [r3, #0]
 801c1d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801c1dc:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801c1e0:	d030      	beq.n	801c244 <ai_platform_network_create+0x22c>
 801c1e2:	f7fe ff83 	bl	801b0ec <_ai_platform_release_crc>
 801c1e6:	2200      	movs	r2, #0
 801c1e8:	4641      	mov	r1, r8
 801c1ea:	4638      	mov	r0, r7
 801c1ec:	f008 fc26 	bl	8024a3c <ai_version_get>
 801c1f0:	4604      	mov	r4, r0
 801c1f2:	2200      	movs	r2, #0
 801c1f4:	2105      	movs	r1, #5
 801c1f6:	2001      	movs	r0, #1
 801c1f8:	f008 fc20 	bl	8024a3c <ai_version_get>
 801c1fc:	4284      	cmp	r4, r0
 801c1fe:	d014      	beq.n	801c22a <ai_platform_network_create+0x212>
 801c200:	2401      	movs	r4, #1
 801c202:	e78f      	b.n	801c124 <ai_platform_network_create+0x10c>
 801c204:	f241 0310 	movw	r3, #4112	; 0x1010
 801c208:	e73b      	b.n	801c082 <ai_platform_network_create+0x6a>
 801c20a:	4b36      	ldr	r3, [pc, #216]	; (801c2e4 <ai_platform_network_create+0x2cc>)
 801c20c:	2201      	movs	r2, #1
 801c20e:	4619      	mov	r1, r3
 801c210:	601a      	str	r2, [r3, #0]
 801c212:	680b      	ldr	r3, [r1, #0]
 801c214:	2b00      	cmp	r3, #0
 801c216:	d1fc      	bne.n	801c212 <ai_platform_network_create+0x1fa>
 801c218:	4b36      	ldr	r3, [pc, #216]	; (801c2f4 <ai_platform_network_create+0x2dc>)
 801c21a:	4937      	ldr	r1, [pc, #220]	; (801c2f8 <ai_platform_network_create+0x2e0>)
 801c21c:	4a37      	ldr	r2, [pc, #220]	; (801c2fc <ai_platform_network_create+0x2e4>)
 801c21e:	6019      	str	r1, [r3, #0]
 801c220:	681b      	ldr	r3, [r3, #0]
 801c222:	4293      	cmp	r3, r2
 801c224:	f43f af72 	beq.w	801c10c <ai_platform_network_create+0xf4>
 801c228:	e7fe      	b.n	801c228 <ai_platform_network_create+0x210>
 801c22a:	4b35      	ldr	r3, [pc, #212]	; (801c300 <ai_platform_network_create+0x2e8>)
 801c22c:	a802      	add	r0, sp, #8
 801c22e:	f840 3d04 	str.w	r3, [r0, #-4]!
 801c232:	f003 f87b 	bl	801f32c <ai_check_custom_types>
 801c236:	b118      	cbz	r0, 801c240 <ai_platform_network_create+0x228>
 801c238:	f04f 0a00 	mov.w	sl, #0
 801c23c:	4654      	mov	r4, sl
 801c23e:	e775      	b.n	801c12c <ai_platform_network_create+0x114>
 801c240:	2402      	movs	r4, #2
 801c242:	e76f      	b.n	801c124 <ai_platform_network_create+0x10c>
 801c244:	4b27      	ldr	r3, [pc, #156]	; (801c2e4 <ai_platform_network_create+0x2cc>)
 801c246:	2201      	movs	r2, #1
 801c248:	4619      	mov	r1, r3
 801c24a:	601a      	str	r2, [r3, #0]
 801c24c:	680b      	ldr	r3, [r1, #0]
 801c24e:	2b00      	cmp	r3, #0
 801c250:	d1fc      	bne.n	801c24c <ai_platform_network_create+0x234>
 801c252:	4b28      	ldr	r3, [pc, #160]	; (801c2f4 <ai_platform_network_create+0x2dc>)
 801c254:	4928      	ldr	r1, [pc, #160]	; (801c2f8 <ai_platform_network_create+0x2e0>)
 801c256:	4a29      	ldr	r2, [pc, #164]	; (801c2fc <ai_platform_network_create+0x2e4>)
 801c258:	6019      	str	r1, [r3, #0]
 801c25a:	681b      	ldr	r3, [r3, #0]
 801c25c:	4293      	cmp	r3, r2
 801c25e:	d0c0      	beq.n	801c1e2 <ai_platform_network_create+0x1ca>
 801c260:	e7fe      	b.n	801c260 <ai_platform_network_create+0x248>
 801c262:	4b21      	ldr	r3, [pc, #132]	; (801c2e8 <ai_platform_network_create+0x2d0>)
 801c264:	2201      	movs	r2, #1
 801c266:	4619      	mov	r1, r3
 801c268:	601a      	str	r2, [r3, #0]
 801c26a:	680b      	ldr	r3, [r1, #0]
 801c26c:	2b00      	cmp	r3, #0
 801c26e:	d1fc      	bne.n	801c26a <ai_platform_network_create+0x252>
 801c270:	4b24      	ldr	r3, [pc, #144]	; (801c304 <ai_platform_network_create+0x2ec>)
 801c272:	4921      	ldr	r1, [pc, #132]	; (801c2f8 <ai_platform_network_create+0x2e0>)
 801c274:	4a21      	ldr	r2, [pc, #132]	; (801c2fc <ai_platform_network_create+0x2e4>)
 801c276:	6019      	str	r1, [r3, #0]
 801c278:	681b      	ldr	r3, [r3, #0]
 801c27a:	4293      	cmp	r3, r2
 801c27c:	d0b1      	beq.n	801c1e2 <ai_platform_network_create+0x1ca>
 801c27e:	e7fe      	b.n	801c27e <ai_platform_network_create+0x266>
 801c280:	4b19      	ldr	r3, [pc, #100]	; (801c2e8 <ai_platform_network_create+0x2d0>)
 801c282:	2201      	movs	r2, #1
 801c284:	4619      	mov	r1, r3
 801c286:	601a      	str	r2, [r3, #0]
 801c288:	680b      	ldr	r3, [r1, #0]
 801c28a:	2b00      	cmp	r3, #0
 801c28c:	d1fc      	bne.n	801c288 <ai_platform_network_create+0x270>
 801c28e:	4b1d      	ldr	r3, [pc, #116]	; (801c304 <ai_platform_network_create+0x2ec>)
 801c290:	4919      	ldr	r1, [pc, #100]	; (801c2f8 <ai_platform_network_create+0x2e0>)
 801c292:	4a1a      	ldr	r2, [pc, #104]	; (801c2fc <ai_platform_network_create+0x2e4>)
 801c294:	6019      	str	r1, [r3, #0]
 801c296:	681b      	ldr	r3, [r3, #0]
 801c298:	4293      	cmp	r3, r2
 801c29a:	d0a2      	beq.n	801c1e2 <ai_platform_network_create+0x1ca>
 801c29c:	e7fe      	b.n	801c29c <ai_platform_network_create+0x284>
 801c29e:	4b11      	ldr	r3, [pc, #68]	; (801c2e4 <ai_platform_network_create+0x2cc>)
 801c2a0:	2201      	movs	r2, #1
 801c2a2:	4619      	mov	r1, r3
 801c2a4:	601a      	str	r2, [r3, #0]
 801c2a6:	680b      	ldr	r3, [r1, #0]
 801c2a8:	2b00      	cmp	r3, #0
 801c2aa:	d1fc      	bne.n	801c2a6 <ai_platform_network_create+0x28e>
 801c2ac:	4b11      	ldr	r3, [pc, #68]	; (801c2f4 <ai_platform_network_create+0x2dc>)
 801c2ae:	4912      	ldr	r1, [pc, #72]	; (801c2f8 <ai_platform_network_create+0x2e0>)
 801c2b0:	4a12      	ldr	r2, [pc, #72]	; (801c2fc <ai_platform_network_create+0x2e4>)
 801c2b2:	6019      	str	r1, [r3, #0]
 801c2b4:	681b      	ldr	r3, [r3, #0]
 801c2b6:	4293      	cmp	r3, r2
 801c2b8:	d093      	beq.n	801c1e2 <ai_platform_network_create+0x1ca>
 801c2ba:	e7fe      	b.n	801c2ba <ai_platform_network_create+0x2a2>
 801c2bc:	4b0a      	ldr	r3, [pc, #40]	; (801c2e8 <ai_platform_network_create+0x2d0>)
 801c2be:	2201      	movs	r2, #1
 801c2c0:	4619      	mov	r1, r3
 801c2c2:	601a      	str	r2, [r3, #0]
 801c2c4:	680b      	ldr	r3, [r1, #0]
 801c2c6:	2b00      	cmp	r3, #0
 801c2c8:	d1fc      	bne.n	801c2c4 <ai_platform_network_create+0x2ac>
 801c2ca:	4b0e      	ldr	r3, [pc, #56]	; (801c304 <ai_platform_network_create+0x2ec>)
 801c2cc:	490a      	ldr	r1, [pc, #40]	; (801c2f8 <ai_platform_network_create+0x2e0>)
 801c2ce:	4a0b      	ldr	r2, [pc, #44]	; (801c2fc <ai_platform_network_create+0x2e4>)
 801c2d0:	6019      	str	r1, [r3, #0]
 801c2d2:	681b      	ldr	r3, [r3, #0]
 801c2d4:	4293      	cmp	r3, r2
 801c2d6:	f43f af19 	beq.w	801c10c <ai_platform_network_create+0xf4>
 801c2da:	e7fe      	b.n	801c2da <ai_platform_network_create+0x2c2>
 801c2dc:	e0042000 	.word	0xe0042000
 801c2e0:	5c001000 	.word	0x5c001000
 801c2e4:	40023008 	.word	0x40023008
 801c2e8:	58024c08 	.word	0x58024c08
 801c2ec:	e0002000 	.word	0xe0002000
 801c2f0:	a1c00100 	.word	0xa1c00100
 801c2f4:	40023000 	.word	0x40023000
 801c2f8:	f407a5c2 	.word	0xf407a5c2
 801c2fc:	b5e8b5cd 	.word	0xb5e8b5cd
 801c300:	84048403 	.word	0x84048403
 801c304:	58024c00 	.word	0x58024c00
 801c308:	4b0e      	ldr	r3, [pc, #56]	; (801c344 <ai_platform_network_create+0x32c>)
 801c30a:	2201      	movs	r2, #1
 801c30c:	4619      	mov	r1, r3
 801c30e:	601a      	str	r2, [r3, #0]
 801c310:	680b      	ldr	r3, [r1, #0]
 801c312:	2b00      	cmp	r3, #0
 801c314:	d1fc      	bne.n	801c310 <ai_platform_network_create+0x2f8>
 801c316:	4b0c      	ldr	r3, [pc, #48]	; (801c348 <ai_platform_network_create+0x330>)
 801c318:	490c      	ldr	r1, [pc, #48]	; (801c34c <ai_platform_network_create+0x334>)
 801c31a:	4a0d      	ldr	r2, [pc, #52]	; (801c350 <ai_platform_network_create+0x338>)
 801c31c:	6019      	str	r1, [r3, #0]
 801c31e:	681b      	ldr	r3, [r3, #0]
 801c320:	4293      	cmp	r3, r2
 801c322:	f43f aef3 	beq.w	801c10c <ai_platform_network_create+0xf4>
 801c326:	e7fe      	b.n	801c326 <ai_platform_network_create+0x30e>
 801c328:	4b0a      	ldr	r3, [pc, #40]	; (801c354 <ai_platform_network_create+0x33c>)
 801c32a:	2118      	movs	r1, #24
 801c32c:	6019      	str	r1, [r3, #0]
 801c32e:	6819      	ldr	r1, [r3, #0]
 801c330:	2918      	cmp	r1, #24
 801c332:	f47f aea2 	bne.w	801c07a <ai_platform_network_create+0x62>
 801c336:	2101      	movs	r1, #1
 801c338:	4618      	mov	r0, r3
 801c33a:	6019      	str	r1, [r3, #0]
 801c33c:	6803      	ldr	r3, [r0, #0]
 801c33e:	2b00      	cmp	r3, #0
 801c340:	d1fc      	bne.n	801c33c <ai_platform_network_create+0x324>
 801c342:	e6b6      	b.n	801c0b2 <ai_platform_network_create+0x9a>
 801c344:	58024c08 	.word	0x58024c08
 801c348:	58024c00 	.word	0x58024c00
 801c34c:	f407a5c2 	.word	0xf407a5c2
 801c350:	b5e8b5cd 	.word	0xb5e8b5cd
 801c354:	40023008 	.word	0x40023008

0801c358 <ai_platform_network_destroy>:
 801c358:	b510      	push	{r4, lr}
 801c35a:	4604      	mov	r4, r0
 801c35c:	b118      	cbz	r0, 801c366 <ai_platform_network_destroy+0xe>
 801c35e:	4b6d      	ldr	r3, [pc, #436]	; (801c514 <ai_platform_network_destroy+0x1bc>)
 801c360:	6802      	ldr	r2, [r0, #0]
 801c362:	429a      	cmp	r2, r3
 801c364:	d03c      	beq.n	801c3e0 <ai_platform_network_destroy+0x88>
 801c366:	4a6c      	ldr	r2, [pc, #432]	; (801c518 <ai_platform_network_destroy+0x1c0>)
 801c368:	6813      	ldr	r3, [r2, #0]
 801c36a:	f023 0301 	bic.w	r3, r3, #1
 801c36e:	6013      	str	r3, [r2, #0]
 801c370:	f7fe feba 	bl	801b0e8 <_ai_platform_acquire_crc>
 801c374:	4b69      	ldr	r3, [pc, #420]	; (801c51c <ai_platform_network_destroy+0x1c4>)
 801c376:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 801c37a:	681b      	ldr	r3, [r3, #0]
 801c37c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801c380:	185a      	adds	r2, r3, r1
 801c382:	2a01      	cmp	r2, #1
 801c384:	d91d      	bls.n	801c3c2 <ai_platform_network_destroy+0x6a>
 801c386:	f240 4249 	movw	r2, #1097	; 0x449
 801c38a:	4293      	cmp	r3, r2
 801c38c:	d019      	beq.n	801c3c2 <ai_platform_network_destroy+0x6a>
 801c38e:	4b64      	ldr	r3, [pc, #400]	; (801c520 <ai_platform_network_destroy+0x1c8>)
 801c390:	681a      	ldr	r2, [r3, #0]
 801c392:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801c396:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801c39a:	f000 80ab 	beq.w	801c4f4 <ai_platform_network_destroy+0x19c>
 801c39e:	681a      	ldr	r2, [r3, #0]
 801c3a0:	f240 4183 	movw	r1, #1155	; 0x483
 801c3a4:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801c3a8:	428a      	cmp	r2, r1
 801c3aa:	f000 8093 	beq.w	801c4d4 <ai_platform_network_destroy+0x17c>
 801c3ae:	681b      	ldr	r3, [r3, #0]
 801c3b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801c3b4:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801c3b8:	d041      	beq.n	801c43e <ai_platform_network_destroy+0xe6>
 801c3ba:	f7fe fe97 	bl	801b0ec <_ai_platform_release_crc>
 801c3be:	4620      	mov	r0, r4
 801c3c0:	bd10      	pop	{r4, pc}
 801c3c2:	4b58      	ldr	r3, [pc, #352]	; (801c524 <ai_platform_network_destroy+0x1cc>)
 801c3c4:	2201      	movs	r2, #1
 801c3c6:	4619      	mov	r1, r3
 801c3c8:	601a      	str	r2, [r3, #0]
 801c3ca:	680b      	ldr	r3, [r1, #0]
 801c3cc:	2b00      	cmp	r3, #0
 801c3ce:	d1fc      	bne.n	801c3ca <ai_platform_network_destroy+0x72>
 801c3d0:	4b55      	ldr	r3, [pc, #340]	; (801c528 <ai_platform_network_destroy+0x1d0>)
 801c3d2:	4956      	ldr	r1, [pc, #344]	; (801c52c <ai_platform_network_destroy+0x1d4>)
 801c3d4:	4a56      	ldr	r2, [pc, #344]	; (801c530 <ai_platform_network_destroy+0x1d8>)
 801c3d6:	6019      	str	r1, [r3, #0]
 801c3d8:	681b      	ldr	r3, [r3, #0]
 801c3da:	4293      	cmp	r3, r2
 801c3dc:	d0ed      	beq.n	801c3ba <ai_platform_network_destroy+0x62>
 801c3de:	e7fe      	b.n	801c3de <ai_platform_network_destroy+0x86>
 801c3e0:	4a4d      	ldr	r2, [pc, #308]	; (801c518 <ai_platform_network_destroy+0x1c0>)
 801c3e2:	6813      	ldr	r3, [r2, #0]
 801c3e4:	f023 0301 	bic.w	r3, r3, #1
 801c3e8:	6013      	str	r3, [r2, #0]
 801c3ea:	f7fe fe7d 	bl	801b0e8 <_ai_platform_acquire_crc>
 801c3ee:	4b4b      	ldr	r3, [pc, #300]	; (801c51c <ai_platform_network_destroy+0x1c4>)
 801c3f0:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801c3f4:	681b      	ldr	r3, [r3, #0]
 801c3f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801c3fa:	189a      	adds	r2, r3, r2
 801c3fc:	2a01      	cmp	r2, #1
 801c3fe:	d95a      	bls.n	801c4b6 <ai_platform_network_destroy+0x15e>
 801c400:	f240 4249 	movw	r2, #1097	; 0x449
 801c404:	4293      	cmp	r3, r2
 801c406:	d056      	beq.n	801c4b6 <ai_platform_network_destroy+0x15e>
 801c408:	4b45      	ldr	r3, [pc, #276]	; (801c520 <ai_platform_network_destroy+0x1c8>)
 801c40a:	681a      	ldr	r2, [r3, #0]
 801c40c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801c410:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801c414:	d040      	beq.n	801c498 <ai_platform_network_destroy+0x140>
 801c416:	681a      	ldr	r2, [r3, #0]
 801c418:	f240 4183 	movw	r1, #1155	; 0x483
 801c41c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801c420:	428a      	cmp	r2, r1
 801c422:	d02a      	beq.n	801c47a <ai_platform_network_destroy+0x122>
 801c424:	681b      	ldr	r3, [r3, #0]
 801c426:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801c42a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801c42e:	d015      	beq.n	801c45c <ai_platform_network_destroy+0x104>
 801c430:	f7fe fe5c 	bl	801b0ec <_ai_platform_release_crc>
 801c434:	4620      	mov	r0, r4
 801c436:	2400      	movs	r4, #0
 801c438:	f003 f818 	bl	801f46c <ai_layers_destroy_all>
 801c43c:	e7bf      	b.n	801c3be <ai_platform_network_destroy+0x66>
 801c43e:	4b39      	ldr	r3, [pc, #228]	; (801c524 <ai_platform_network_destroy+0x1cc>)
 801c440:	2201      	movs	r2, #1
 801c442:	4619      	mov	r1, r3
 801c444:	601a      	str	r2, [r3, #0]
 801c446:	680b      	ldr	r3, [r1, #0]
 801c448:	2b00      	cmp	r3, #0
 801c44a:	d1fc      	bne.n	801c446 <ai_platform_network_destroy+0xee>
 801c44c:	4b36      	ldr	r3, [pc, #216]	; (801c528 <ai_platform_network_destroy+0x1d0>)
 801c44e:	4937      	ldr	r1, [pc, #220]	; (801c52c <ai_platform_network_destroy+0x1d4>)
 801c450:	4a37      	ldr	r2, [pc, #220]	; (801c530 <ai_platform_network_destroy+0x1d8>)
 801c452:	6019      	str	r1, [r3, #0]
 801c454:	681b      	ldr	r3, [r3, #0]
 801c456:	4293      	cmp	r3, r2
 801c458:	d0af      	beq.n	801c3ba <ai_platform_network_destroy+0x62>
 801c45a:	e7fe      	b.n	801c45a <ai_platform_network_destroy+0x102>
 801c45c:	4b31      	ldr	r3, [pc, #196]	; (801c524 <ai_platform_network_destroy+0x1cc>)
 801c45e:	2201      	movs	r2, #1
 801c460:	4619      	mov	r1, r3
 801c462:	601a      	str	r2, [r3, #0]
 801c464:	680b      	ldr	r3, [r1, #0]
 801c466:	2b00      	cmp	r3, #0
 801c468:	d1fc      	bne.n	801c464 <ai_platform_network_destroy+0x10c>
 801c46a:	4b2f      	ldr	r3, [pc, #188]	; (801c528 <ai_platform_network_destroy+0x1d0>)
 801c46c:	492f      	ldr	r1, [pc, #188]	; (801c52c <ai_platform_network_destroy+0x1d4>)
 801c46e:	4a30      	ldr	r2, [pc, #192]	; (801c530 <ai_platform_network_destroy+0x1d8>)
 801c470:	6019      	str	r1, [r3, #0]
 801c472:	681b      	ldr	r3, [r3, #0]
 801c474:	4293      	cmp	r3, r2
 801c476:	d0db      	beq.n	801c430 <ai_platform_network_destroy+0xd8>
 801c478:	e7fe      	b.n	801c478 <ai_platform_network_destroy+0x120>
 801c47a:	4b2e      	ldr	r3, [pc, #184]	; (801c534 <ai_platform_network_destroy+0x1dc>)
 801c47c:	2201      	movs	r2, #1
 801c47e:	4619      	mov	r1, r3
 801c480:	601a      	str	r2, [r3, #0]
 801c482:	680b      	ldr	r3, [r1, #0]
 801c484:	2b00      	cmp	r3, #0
 801c486:	d1fc      	bne.n	801c482 <ai_platform_network_destroy+0x12a>
 801c488:	4b2b      	ldr	r3, [pc, #172]	; (801c538 <ai_platform_network_destroy+0x1e0>)
 801c48a:	4928      	ldr	r1, [pc, #160]	; (801c52c <ai_platform_network_destroy+0x1d4>)
 801c48c:	4a28      	ldr	r2, [pc, #160]	; (801c530 <ai_platform_network_destroy+0x1d8>)
 801c48e:	6019      	str	r1, [r3, #0]
 801c490:	681b      	ldr	r3, [r3, #0]
 801c492:	4293      	cmp	r3, r2
 801c494:	d0cc      	beq.n	801c430 <ai_platform_network_destroy+0xd8>
 801c496:	e7fe      	b.n	801c496 <ai_platform_network_destroy+0x13e>
 801c498:	4b26      	ldr	r3, [pc, #152]	; (801c534 <ai_platform_network_destroy+0x1dc>)
 801c49a:	2201      	movs	r2, #1
 801c49c:	4619      	mov	r1, r3
 801c49e:	601a      	str	r2, [r3, #0]
 801c4a0:	680b      	ldr	r3, [r1, #0]
 801c4a2:	2b00      	cmp	r3, #0
 801c4a4:	d1fc      	bne.n	801c4a0 <ai_platform_network_destroy+0x148>
 801c4a6:	4b24      	ldr	r3, [pc, #144]	; (801c538 <ai_platform_network_destroy+0x1e0>)
 801c4a8:	4920      	ldr	r1, [pc, #128]	; (801c52c <ai_platform_network_destroy+0x1d4>)
 801c4aa:	4a21      	ldr	r2, [pc, #132]	; (801c530 <ai_platform_network_destroy+0x1d8>)
 801c4ac:	6019      	str	r1, [r3, #0]
 801c4ae:	681b      	ldr	r3, [r3, #0]
 801c4b0:	4293      	cmp	r3, r2
 801c4b2:	d0bd      	beq.n	801c430 <ai_platform_network_destroy+0xd8>
 801c4b4:	e7fe      	b.n	801c4b4 <ai_platform_network_destroy+0x15c>
 801c4b6:	4b1b      	ldr	r3, [pc, #108]	; (801c524 <ai_platform_network_destroy+0x1cc>)
 801c4b8:	2201      	movs	r2, #1
 801c4ba:	4619      	mov	r1, r3
 801c4bc:	601a      	str	r2, [r3, #0]
 801c4be:	680b      	ldr	r3, [r1, #0]
 801c4c0:	2b00      	cmp	r3, #0
 801c4c2:	d1fc      	bne.n	801c4be <ai_platform_network_destroy+0x166>
 801c4c4:	4b18      	ldr	r3, [pc, #96]	; (801c528 <ai_platform_network_destroy+0x1d0>)
 801c4c6:	4919      	ldr	r1, [pc, #100]	; (801c52c <ai_platform_network_destroy+0x1d4>)
 801c4c8:	4a19      	ldr	r2, [pc, #100]	; (801c530 <ai_platform_network_destroy+0x1d8>)
 801c4ca:	6019      	str	r1, [r3, #0]
 801c4cc:	681b      	ldr	r3, [r3, #0]
 801c4ce:	4293      	cmp	r3, r2
 801c4d0:	d0ae      	beq.n	801c430 <ai_platform_network_destroy+0xd8>
 801c4d2:	e7fe      	b.n	801c4d2 <ai_platform_network_destroy+0x17a>
 801c4d4:	4b17      	ldr	r3, [pc, #92]	; (801c534 <ai_platform_network_destroy+0x1dc>)
 801c4d6:	2201      	movs	r2, #1
 801c4d8:	4619      	mov	r1, r3
 801c4da:	601a      	str	r2, [r3, #0]
 801c4dc:	680b      	ldr	r3, [r1, #0]
 801c4de:	2b00      	cmp	r3, #0
 801c4e0:	d1fc      	bne.n	801c4dc <ai_platform_network_destroy+0x184>
 801c4e2:	4b15      	ldr	r3, [pc, #84]	; (801c538 <ai_platform_network_destroy+0x1e0>)
 801c4e4:	4911      	ldr	r1, [pc, #68]	; (801c52c <ai_platform_network_destroy+0x1d4>)
 801c4e6:	4a12      	ldr	r2, [pc, #72]	; (801c530 <ai_platform_network_destroy+0x1d8>)
 801c4e8:	6019      	str	r1, [r3, #0]
 801c4ea:	681b      	ldr	r3, [r3, #0]
 801c4ec:	4293      	cmp	r3, r2
 801c4ee:	f43f af64 	beq.w	801c3ba <ai_platform_network_destroy+0x62>
 801c4f2:	e7fe      	b.n	801c4f2 <ai_platform_network_destroy+0x19a>
 801c4f4:	4b0f      	ldr	r3, [pc, #60]	; (801c534 <ai_platform_network_destroy+0x1dc>)
 801c4f6:	2201      	movs	r2, #1
 801c4f8:	4619      	mov	r1, r3
 801c4fa:	601a      	str	r2, [r3, #0]
 801c4fc:	680b      	ldr	r3, [r1, #0]
 801c4fe:	2b00      	cmp	r3, #0
 801c500:	d1fc      	bne.n	801c4fc <ai_platform_network_destroy+0x1a4>
 801c502:	4b0d      	ldr	r3, [pc, #52]	; (801c538 <ai_platform_network_destroy+0x1e0>)
 801c504:	4909      	ldr	r1, [pc, #36]	; (801c52c <ai_platform_network_destroy+0x1d4>)
 801c506:	4a0a      	ldr	r2, [pc, #40]	; (801c530 <ai_platform_network_destroy+0x1d8>)
 801c508:	6019      	str	r1, [r3, #0]
 801c50a:	681b      	ldr	r3, [r3, #0]
 801c50c:	4293      	cmp	r3, r2
 801c50e:	f43f af54 	beq.w	801c3ba <ai_platform_network_destroy+0x62>
 801c512:	e7fe      	b.n	801c512 <ai_platform_network_destroy+0x1ba>
 801c514:	a1c00100 	.word	0xa1c00100
 801c518:	e0002000 	.word	0xe0002000
 801c51c:	e0042000 	.word	0xe0042000
 801c520:	5c001000 	.word	0x5c001000
 801c524:	40023008 	.word	0x40023008
 801c528:	40023000 	.word	0x40023000
 801c52c:	f407a5c2 	.word	0xf407a5c2
 801c530:	b5e8b5cd 	.word	0xb5e8b5cd
 801c534:	58024c08 	.word	0x58024c08
 801c538:	58024c00 	.word	0x58024c00

0801c53c <ai_platform_network_init>:
 801c53c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c540:	2800      	cmp	r0, #0
 801c542:	d05a      	beq.n	801c5fa <ai_platform_network_init+0xbe>
 801c544:	4ba7      	ldr	r3, [pc, #668]	; (801c7e4 <ai_platform_network_init+0x2a8>)
 801c546:	4604      	mov	r4, r0
 801c548:	6802      	ldr	r2, [r0, #0]
 801c54a:	429a      	cmp	r2, r3
 801c54c:	d155      	bne.n	801c5fa <ai_platform_network_init+0xbe>
 801c54e:	4aa6      	ldr	r2, [pc, #664]	; (801c7e8 <ai_platform_network_init+0x2ac>)
 801c550:	460d      	mov	r5, r1
 801c552:	6813      	ldr	r3, [r2, #0]
 801c554:	f023 0301 	bic.w	r3, r3, #1
 801c558:	6013      	str	r3, [r2, #0]
 801c55a:	f7fe fdc5 	bl	801b0e8 <_ai_platform_acquire_crc>
 801c55e:	4ba3      	ldr	r3, [pc, #652]	; (801c7ec <ai_platform_network_init+0x2b0>)
 801c560:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801c564:	681b      	ldr	r3, [r3, #0]
 801c566:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801c56a:	189a      	adds	r2, r3, r2
 801c56c:	2a01      	cmp	r2, #1
 801c56e:	d935      	bls.n	801c5dc <ai_platform_network_init+0xa0>
 801c570:	f240 4249 	movw	r2, #1097	; 0x449
 801c574:	4293      	cmp	r3, r2
 801c576:	d031      	beq.n	801c5dc <ai_platform_network_init+0xa0>
 801c578:	4b9d      	ldr	r3, [pc, #628]	; (801c7f0 <ai_platform_network_init+0x2b4>)
 801c57a:	681a      	ldr	r2, [r3, #0]
 801c57c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801c580:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801c584:	f000 8154 	beq.w	801c830 <ai_platform_network_init+0x2f4>
 801c588:	681a      	ldr	r2, [r3, #0]
 801c58a:	f240 4183 	movw	r1, #1155	; 0x483
 801c58e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801c592:	428a      	cmp	r2, r1
 801c594:	f000 813c 	beq.w	801c810 <ai_platform_network_init+0x2d4>
 801c598:	681b      	ldr	r3, [r3, #0]
 801c59a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801c59e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801c5a2:	f000 8107 	beq.w	801c7b4 <ai_platform_network_init+0x278>
 801c5a6:	f7fe fda1 	bl	801b0ec <_ai_platform_release_crc>
 801c5aa:	2d00      	cmp	r5, #0
 801c5ac:	f000 8112 	beq.w	801c7d4 <ai_platform_network_init+0x298>
 801c5b0:	4b90      	ldr	r3, [pc, #576]	; (801c7f4 <ai_platform_network_init+0x2b8>)
 801c5b2:	682a      	ldr	r2, [r5, #0]
 801c5b4:	429a      	cmp	r2, r3
 801c5b6:	d14e      	bne.n	801c656 <ai_platform_network_init+0x11a>
 801c5b8:	6928      	ldr	r0, [r5, #16]
 801c5ba:	89ab      	ldrh	r3, [r5, #12]
 801c5bc:	89ee      	ldrh	r6, [r5, #14]
 801c5be:	e9d5 2101 	ldrd	r2, r1, [r5, #4]
 801c5c2:	62a0      	str	r0, [r4, #40]	; 0x28
 801c5c4:	e9c4 2107 	strd	r2, r1, [r4, #28]
 801c5c8:	2203      	movs	r2, #3
 801c5ca:	84e6      	strh	r6, [r4, #38]	; 0x26
 801c5cc:	84a3      	strh	r3, [r4, #36]	; 0x24
 801c5ce:	4620      	mov	r0, r4
 801c5d0:	60e2      	str	r2, [r4, #12]
 801c5d2:	f002 fed5 	bl	801f380 <ai_layers_init_all>
 801c5d6:	4620      	mov	r0, r4
 801c5d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c5dc:	4b86      	ldr	r3, [pc, #536]	; (801c7f8 <ai_platform_network_init+0x2bc>)
 801c5de:	2201      	movs	r2, #1
 801c5e0:	4619      	mov	r1, r3
 801c5e2:	601a      	str	r2, [r3, #0]
 801c5e4:	680b      	ldr	r3, [r1, #0]
 801c5e6:	2b00      	cmp	r3, #0
 801c5e8:	d1fc      	bne.n	801c5e4 <ai_platform_network_init+0xa8>
 801c5ea:	4b84      	ldr	r3, [pc, #528]	; (801c7fc <ai_platform_network_init+0x2c0>)
 801c5ec:	4984      	ldr	r1, [pc, #528]	; (801c800 <ai_platform_network_init+0x2c4>)
 801c5ee:	4a85      	ldr	r2, [pc, #532]	; (801c804 <ai_platform_network_init+0x2c8>)
 801c5f0:	6019      	str	r1, [r3, #0]
 801c5f2:	681b      	ldr	r3, [r3, #0]
 801c5f4:	4293      	cmp	r3, r2
 801c5f6:	d0d6      	beq.n	801c5a6 <ai_platform_network_init+0x6a>
 801c5f8:	e7fe      	b.n	801c5f8 <ai_platform_network_init+0xbc>
 801c5fa:	4a7b      	ldr	r2, [pc, #492]	; (801c7e8 <ai_platform_network_init+0x2ac>)
 801c5fc:	6813      	ldr	r3, [r2, #0]
 801c5fe:	f023 0301 	bic.w	r3, r3, #1
 801c602:	6013      	str	r3, [r2, #0]
 801c604:	f7fe fd70 	bl	801b0e8 <_ai_platform_acquire_crc>
 801c608:	4b78      	ldr	r3, [pc, #480]	; (801c7ec <ai_platform_network_init+0x2b0>)
 801c60a:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 801c60e:	681b      	ldr	r3, [r3, #0]
 801c610:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801c614:	185a      	adds	r2, r3, r1
 801c616:	2a01      	cmp	r2, #1
 801c618:	d93f      	bls.n	801c69a <ai_platform_network_init+0x15e>
 801c61a:	f240 4249 	movw	r2, #1097	; 0x449
 801c61e:	4293      	cmp	r3, r2
 801c620:	d03b      	beq.n	801c69a <ai_platform_network_init+0x15e>
 801c622:	4b73      	ldr	r3, [pc, #460]	; (801c7f0 <ai_platform_network_init+0x2b4>)
 801c624:	681a      	ldr	r2, [r3, #0]
 801c626:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801c62a:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801c62e:	f000 80a5 	beq.w	801c77c <ai_platform_network_init+0x240>
 801c632:	681a      	ldr	r2, [r3, #0]
 801c634:	f240 4183 	movw	r1, #1155	; 0x483
 801c638:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801c63c:	428a      	cmp	r2, r1
 801c63e:	f000 808d 	beq.w	801c75c <ai_platform_network_init+0x220>
 801c642:	681b      	ldr	r3, [r3, #0]
 801c644:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801c648:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801c64c:	d076      	beq.n	801c73c <ai_platform_network_init+0x200>
 801c64e:	f7fe fd4d 	bl	801b0ec <_ai_platform_release_crc>
 801c652:	2000      	movs	r0, #0
 801c654:	e7c0      	b.n	801c5d8 <ai_platform_network_init+0x9c>
 801c656:	2101      	movs	r1, #1
 801c658:	4628      	mov	r0, r5
 801c65a:	f105 081c 	add.w	r8, r5, #28
 801c65e:	686f      	ldr	r7, [r5, #4]
 801c660:	f7fe fd08 	bl	801b074 <ai_buffer_get_size>
 801c664:	4681      	mov	r9, r0
 801c666:	2101      	movs	r1, #1
 801c668:	4640      	mov	r0, r8
 801c66a:	6a2e      	ldr	r6, [r5, #32]
 801c66c:	f7fe fd02 	bl	801b074 <ai_buffer_get_size>
 801c670:	f1b9 0f00 	cmp.w	r9, #0
 801c674:	d020      	beq.n	801c6b8 <ai_platform_network_init+0x17c>
 801c676:	2800      	cmp	r0, #0
 801c678:	f040 8090 	bne.w	801c79c <ai_platform_network_init+0x260>
 801c67c:	4680      	mov	r8, r0
 801c67e:	4606      	mov	r6, r0
 801c680:	2f00      	cmp	r7, #0
 801c682:	f000 808f 	beq.w	801c7a4 <ai_platform_network_init+0x268>
 801c686:	8be7      	ldrh	r7, [r4, #30]
 801c688:	bb7f      	cbnz	r7, 801c6ea <ai_platform_network_init+0x1ae>
 801c68a:	f104 0010 	add.w	r0, r4, #16
 801c68e:	2212      	movs	r2, #18
 801c690:	2116      	movs	r1, #22
 801c692:	f001 f845 	bl	801d720 <core_set_error>
 801c696:	4638      	mov	r0, r7
 801c698:	e79e      	b.n	801c5d8 <ai_platform_network_init+0x9c>
 801c69a:	4b57      	ldr	r3, [pc, #348]	; (801c7f8 <ai_platform_network_init+0x2bc>)
 801c69c:	2201      	movs	r2, #1
 801c69e:	4619      	mov	r1, r3
 801c6a0:	601a      	str	r2, [r3, #0]
 801c6a2:	680b      	ldr	r3, [r1, #0]
 801c6a4:	2b00      	cmp	r3, #0
 801c6a6:	d1fc      	bne.n	801c6a2 <ai_platform_network_init+0x166>
 801c6a8:	4b54      	ldr	r3, [pc, #336]	; (801c7fc <ai_platform_network_init+0x2c0>)
 801c6aa:	4955      	ldr	r1, [pc, #340]	; (801c800 <ai_platform_network_init+0x2c4>)
 801c6ac:	4a55      	ldr	r2, [pc, #340]	; (801c804 <ai_platform_network_init+0x2c8>)
 801c6ae:	6019      	str	r1, [r3, #0]
 801c6b0:	681b      	ldr	r3, [r3, #0]
 801c6b2:	4293      	cmp	r3, r2
 801c6b4:	d0cb      	beq.n	801c64e <ai_platform_network_init+0x112>
 801c6b6:	e7fe      	b.n	801c6b6 <ai_platform_network_init+0x17a>
 801c6b8:	b970      	cbnz	r0, 801c6d8 <ai_platform_network_init+0x19c>
 801c6ba:	4680      	mov	r8, r0
 801c6bc:	4606      	mov	r6, r0
 801c6be:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 801c6c0:	2200      	movs	r2, #0
 801c6c2:	42b3      	cmp	r3, r6
 801c6c4:	61e2      	str	r2, [r4, #28]
 801c6c6:	d21e      	bcs.n	801c706 <ai_platform_network_init+0x1ca>
 801c6c8:	f104 0010 	add.w	r0, r4, #16
 801c6cc:	2213      	movs	r2, #19
 801c6ce:	2116      	movs	r1, #22
 801c6d0:	f001 f826 	bl	801d720 <core_set_error>
 801c6d4:	2000      	movs	r0, #0
 801c6d6:	e77f      	b.n	801c5d8 <ai_platform_network_init+0x9c>
 801c6d8:	bb66      	cbnz	r6, 801c734 <ai_platform_network_init+0x1f8>
 801c6da:	f104 0010 	add.w	r0, r4, #16
 801c6de:	2213      	movs	r2, #19
 801c6e0:	2110      	movs	r1, #16
 801c6e2:	f001 f81d 	bl	801d720 <core_set_error>
 801c6e6:	2000      	movs	r0, #0
 801c6e8:	e776      	b.n	801c5d8 <ai_platform_network_init+0x9c>
 801c6ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c6ec:	6a27      	ldr	r7, [r4, #32]
 801c6ee:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 801c6f2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801c6f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801c6f8:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 801c6fc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 801c6fe:	f8c4 c01c 	str.w	ip, [r4, #28]
 801c702:	42b3      	cmp	r3, r6
 801c704:	d3e0      	bcc.n	801c6c8 <ai_platform_network_init+0x18c>
 801c706:	b1be      	cbz	r6, 801c738 <ai_platform_network_init+0x1fc>
 801c708:	ebc6 0cc6 	rsb	ip, r6, r6, lsl #3
 801c70c:	f04f 0e00 	mov.w	lr, #0
 801c710:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801c714:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 801c716:	eb08 070e 	add.w	r7, r8, lr
 801c71a:	4475      	add	r5, lr
 801c71c:	f10e 0e1c 	add.w	lr, lr, #28
 801c720:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801c722:	45f4      	cmp	ip, lr
 801c724:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801c726:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801c72a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 801c72e:	d1f1      	bne.n	801c714 <ai_platform_network_init+0x1d8>
 801c730:	2300      	movs	r3, #0
 801c732:	e749      	b.n	801c5c8 <ai_platform_network_init+0x8c>
 801c734:	2601      	movs	r6, #1
 801c736:	e7c2      	b.n	801c6be <ai_platform_network_init+0x182>
 801c738:	4633      	mov	r3, r6
 801c73a:	e745      	b.n	801c5c8 <ai_platform_network_init+0x8c>
 801c73c:	4b2e      	ldr	r3, [pc, #184]	; (801c7f8 <ai_platform_network_init+0x2bc>)
 801c73e:	2201      	movs	r2, #1
 801c740:	4619      	mov	r1, r3
 801c742:	601a      	str	r2, [r3, #0]
 801c744:	680b      	ldr	r3, [r1, #0]
 801c746:	2b00      	cmp	r3, #0
 801c748:	d1fc      	bne.n	801c744 <ai_platform_network_init+0x208>
 801c74a:	4b2c      	ldr	r3, [pc, #176]	; (801c7fc <ai_platform_network_init+0x2c0>)
 801c74c:	492c      	ldr	r1, [pc, #176]	; (801c800 <ai_platform_network_init+0x2c4>)
 801c74e:	4a2d      	ldr	r2, [pc, #180]	; (801c804 <ai_platform_network_init+0x2c8>)
 801c750:	6019      	str	r1, [r3, #0]
 801c752:	681b      	ldr	r3, [r3, #0]
 801c754:	4293      	cmp	r3, r2
 801c756:	f43f af7a 	beq.w	801c64e <ai_platform_network_init+0x112>
 801c75a:	e7fe      	b.n	801c75a <ai_platform_network_init+0x21e>
 801c75c:	4b2a      	ldr	r3, [pc, #168]	; (801c808 <ai_platform_network_init+0x2cc>)
 801c75e:	2201      	movs	r2, #1
 801c760:	4619      	mov	r1, r3
 801c762:	601a      	str	r2, [r3, #0]
 801c764:	680b      	ldr	r3, [r1, #0]
 801c766:	2b00      	cmp	r3, #0
 801c768:	d1fc      	bne.n	801c764 <ai_platform_network_init+0x228>
 801c76a:	4b28      	ldr	r3, [pc, #160]	; (801c80c <ai_platform_network_init+0x2d0>)
 801c76c:	4924      	ldr	r1, [pc, #144]	; (801c800 <ai_platform_network_init+0x2c4>)
 801c76e:	4a25      	ldr	r2, [pc, #148]	; (801c804 <ai_platform_network_init+0x2c8>)
 801c770:	6019      	str	r1, [r3, #0]
 801c772:	681b      	ldr	r3, [r3, #0]
 801c774:	4293      	cmp	r3, r2
 801c776:	f43f af6a 	beq.w	801c64e <ai_platform_network_init+0x112>
 801c77a:	e7fe      	b.n	801c77a <ai_platform_network_init+0x23e>
 801c77c:	4b22      	ldr	r3, [pc, #136]	; (801c808 <ai_platform_network_init+0x2cc>)
 801c77e:	2201      	movs	r2, #1
 801c780:	4619      	mov	r1, r3
 801c782:	601a      	str	r2, [r3, #0]
 801c784:	680b      	ldr	r3, [r1, #0]
 801c786:	2b00      	cmp	r3, #0
 801c788:	d1fc      	bne.n	801c784 <ai_platform_network_init+0x248>
 801c78a:	4b20      	ldr	r3, [pc, #128]	; (801c80c <ai_platform_network_init+0x2d0>)
 801c78c:	491c      	ldr	r1, [pc, #112]	; (801c800 <ai_platform_network_init+0x2c4>)
 801c78e:	4a1d      	ldr	r2, [pc, #116]	; (801c804 <ai_platform_network_init+0x2c8>)
 801c790:	6019      	str	r1, [r3, #0]
 801c792:	681b      	ldr	r3, [r3, #0]
 801c794:	4293      	cmp	r3, r2
 801c796:	f43f af5a 	beq.w	801c64e <ai_platform_network_init+0x112>
 801c79a:	e7fe      	b.n	801c79a <ai_platform_network_init+0x25e>
 801c79c:	2e00      	cmp	r6, #0
 801c79e:	d09c      	beq.n	801c6da <ai_platform_network_init+0x19e>
 801c7a0:	2601      	movs	r6, #1
 801c7a2:	e76d      	b.n	801c680 <ai_platform_network_init+0x144>
 801c7a4:	f104 0010 	add.w	r0, r4, #16
 801c7a8:	2212      	movs	r2, #18
 801c7aa:	2110      	movs	r1, #16
 801c7ac:	f000 ffb8 	bl	801d720 <core_set_error>
 801c7b0:	4638      	mov	r0, r7
 801c7b2:	e711      	b.n	801c5d8 <ai_platform_network_init+0x9c>
 801c7b4:	4b10      	ldr	r3, [pc, #64]	; (801c7f8 <ai_platform_network_init+0x2bc>)
 801c7b6:	2201      	movs	r2, #1
 801c7b8:	4619      	mov	r1, r3
 801c7ba:	601a      	str	r2, [r3, #0]
 801c7bc:	680b      	ldr	r3, [r1, #0]
 801c7be:	2b00      	cmp	r3, #0
 801c7c0:	d1fc      	bne.n	801c7bc <ai_platform_network_init+0x280>
 801c7c2:	4b0e      	ldr	r3, [pc, #56]	; (801c7fc <ai_platform_network_init+0x2c0>)
 801c7c4:	490e      	ldr	r1, [pc, #56]	; (801c800 <ai_platform_network_init+0x2c4>)
 801c7c6:	4a0f      	ldr	r2, [pc, #60]	; (801c804 <ai_platform_network_init+0x2c8>)
 801c7c8:	6019      	str	r1, [r3, #0]
 801c7ca:	681b      	ldr	r3, [r3, #0]
 801c7cc:	4293      	cmp	r3, r2
 801c7ce:	f43f aeea 	beq.w	801c5a6 <ai_platform_network_init+0x6a>
 801c7d2:	e7fe      	b.n	801c7d2 <ai_platform_network_init+0x296>
 801c7d4:	f104 0010 	add.w	r0, r4, #16
 801c7d8:	2211      	movs	r2, #17
 801c7da:	2110      	movs	r1, #16
 801c7dc:	f000 ffa0 	bl	801d720 <core_set_error>
 801c7e0:	4628      	mov	r0, r5
 801c7e2:	e6f9      	b.n	801c5d8 <ai_platform_network_init+0x9c>
 801c7e4:	a1c00100 	.word	0xa1c00100
 801c7e8:	e0002000 	.word	0xe0002000
 801c7ec:	e0042000 	.word	0xe0042000
 801c7f0:	5c001000 	.word	0x5c001000
 801c7f4:	a1facade 	.word	0xa1facade
 801c7f8:	40023008 	.word	0x40023008
 801c7fc:	40023000 	.word	0x40023000
 801c800:	f407a5c2 	.word	0xf407a5c2
 801c804:	b5e8b5cd 	.word	0xb5e8b5cd
 801c808:	58024c08 	.word	0x58024c08
 801c80c:	58024c00 	.word	0x58024c00
 801c810:	4b0f      	ldr	r3, [pc, #60]	; (801c850 <ai_platform_network_init+0x314>)
 801c812:	2201      	movs	r2, #1
 801c814:	4619      	mov	r1, r3
 801c816:	601a      	str	r2, [r3, #0]
 801c818:	680b      	ldr	r3, [r1, #0]
 801c81a:	2b00      	cmp	r3, #0
 801c81c:	d1fc      	bne.n	801c818 <ai_platform_network_init+0x2dc>
 801c81e:	4b0d      	ldr	r3, [pc, #52]	; (801c854 <ai_platform_network_init+0x318>)
 801c820:	490d      	ldr	r1, [pc, #52]	; (801c858 <ai_platform_network_init+0x31c>)
 801c822:	4a0e      	ldr	r2, [pc, #56]	; (801c85c <ai_platform_network_init+0x320>)
 801c824:	6019      	str	r1, [r3, #0]
 801c826:	681b      	ldr	r3, [r3, #0]
 801c828:	4293      	cmp	r3, r2
 801c82a:	f43f aebc 	beq.w	801c5a6 <ai_platform_network_init+0x6a>
 801c82e:	e7fe      	b.n	801c82e <ai_platform_network_init+0x2f2>
 801c830:	4b07      	ldr	r3, [pc, #28]	; (801c850 <ai_platform_network_init+0x314>)
 801c832:	2201      	movs	r2, #1
 801c834:	4619      	mov	r1, r3
 801c836:	601a      	str	r2, [r3, #0]
 801c838:	680b      	ldr	r3, [r1, #0]
 801c83a:	2b00      	cmp	r3, #0
 801c83c:	d1fc      	bne.n	801c838 <ai_platform_network_init+0x2fc>
 801c83e:	4b05      	ldr	r3, [pc, #20]	; (801c854 <ai_platform_network_init+0x318>)
 801c840:	4905      	ldr	r1, [pc, #20]	; (801c858 <ai_platform_network_init+0x31c>)
 801c842:	4a06      	ldr	r2, [pc, #24]	; (801c85c <ai_platform_network_init+0x320>)
 801c844:	6019      	str	r1, [r3, #0]
 801c846:	681b      	ldr	r3, [r3, #0]
 801c848:	4293      	cmp	r3, r2
 801c84a:	f43f aeac 	beq.w	801c5a6 <ai_platform_network_init+0x6a>
 801c84e:	e7fe      	b.n	801c84e <ai_platform_network_init+0x312>
 801c850:	58024c08 	.word	0x58024c08
 801c854:	58024c00 	.word	0x58024c00
 801c858:	f407a5c2 	.word	0xf407a5c2
 801c85c:	b5e8b5cd 	.word	0xb5e8b5cd

0801c860 <ai_platform_network_post_init>:
 801c860:	b538      	push	{r3, r4, r5, lr}
 801c862:	b120      	cbz	r0, 801c86e <ai_platform_network_post_init+0xe>
 801c864:	4b7f      	ldr	r3, [pc, #508]	; (801ca64 <ai_platform_network_post_init+0x204>)
 801c866:	4604      	mov	r4, r0
 801c868:	6802      	ldr	r2, [r0, #0]
 801c86a:	429a      	cmp	r2, r3
 801c86c:	d03c      	beq.n	801c8e8 <ai_platform_network_post_init+0x88>
 801c86e:	4a7e      	ldr	r2, [pc, #504]	; (801ca68 <ai_platform_network_post_init+0x208>)
 801c870:	6813      	ldr	r3, [r2, #0]
 801c872:	f023 0301 	bic.w	r3, r3, #1
 801c876:	6013      	str	r3, [r2, #0]
 801c878:	f7fe fc36 	bl	801b0e8 <_ai_platform_acquire_crc>
 801c87c:	4b7b      	ldr	r3, [pc, #492]	; (801ca6c <ai_platform_network_post_init+0x20c>)
 801c87e:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 801c882:	681b      	ldr	r3, [r3, #0]
 801c884:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801c888:	185a      	adds	r2, r3, r1
 801c88a:	2a01      	cmp	r2, #1
 801c88c:	d91d      	bls.n	801c8ca <ai_platform_network_post_init+0x6a>
 801c88e:	f240 4249 	movw	r2, #1097	; 0x449
 801c892:	4293      	cmp	r3, r2
 801c894:	d019      	beq.n	801c8ca <ai_platform_network_post_init+0x6a>
 801c896:	4b76      	ldr	r3, [pc, #472]	; (801ca70 <ai_platform_network_post_init+0x210>)
 801c898:	681a      	ldr	r2, [r3, #0]
 801c89a:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801c89e:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801c8a2:	f000 80a7 	beq.w	801c9f4 <ai_platform_network_post_init+0x194>
 801c8a6:	681a      	ldr	r2, [r3, #0]
 801c8a8:	f240 4183 	movw	r1, #1155	; 0x483
 801c8ac:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801c8b0:	428a      	cmp	r2, r1
 801c8b2:	f000 808f 	beq.w	801c9d4 <ai_platform_network_post_init+0x174>
 801c8b6:	681b      	ldr	r3, [r3, #0]
 801c8b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801c8bc:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801c8c0:	d05b      	beq.n	801c97a <ai_platform_network_post_init+0x11a>
 801c8c2:	f7fe fc13 	bl	801b0ec <_ai_platform_release_crc>
 801c8c6:	2000      	movs	r0, #0
 801c8c8:	bd38      	pop	{r3, r4, r5, pc}
 801c8ca:	4b6a      	ldr	r3, [pc, #424]	; (801ca74 <ai_platform_network_post_init+0x214>)
 801c8cc:	2201      	movs	r2, #1
 801c8ce:	4619      	mov	r1, r3
 801c8d0:	601a      	str	r2, [r3, #0]
 801c8d2:	680b      	ldr	r3, [r1, #0]
 801c8d4:	2b00      	cmp	r3, #0
 801c8d6:	d1fc      	bne.n	801c8d2 <ai_platform_network_post_init+0x72>
 801c8d8:	4b67      	ldr	r3, [pc, #412]	; (801ca78 <ai_platform_network_post_init+0x218>)
 801c8da:	4968      	ldr	r1, [pc, #416]	; (801ca7c <ai_platform_network_post_init+0x21c>)
 801c8dc:	4a68      	ldr	r2, [pc, #416]	; (801ca80 <ai_platform_network_post_init+0x220>)
 801c8de:	6019      	str	r1, [r3, #0]
 801c8e0:	681b      	ldr	r3, [r3, #0]
 801c8e2:	4293      	cmp	r3, r2
 801c8e4:	d0ed      	beq.n	801c8c2 <ai_platform_network_post_init+0x62>
 801c8e6:	e7fe      	b.n	801c8e6 <ai_platform_network_post_init+0x86>
 801c8e8:	4a5f      	ldr	r2, [pc, #380]	; (801ca68 <ai_platform_network_post_init+0x208>)
 801c8ea:	6813      	ldr	r3, [r2, #0]
 801c8ec:	f023 0301 	bic.w	r3, r3, #1
 801c8f0:	6013      	str	r3, [r2, #0]
 801c8f2:	f7fe fbf9 	bl	801b0e8 <_ai_platform_acquire_crc>
 801c8f6:	4b5d      	ldr	r3, [pc, #372]	; (801ca6c <ai_platform_network_post_init+0x20c>)
 801c8f8:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801c8fc:	681b      	ldr	r3, [r3, #0]
 801c8fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801c902:	189a      	adds	r2, r3, r2
 801c904:	2a01      	cmp	r2, #1
 801c906:	d956      	bls.n	801c9b6 <ai_platform_network_post_init+0x156>
 801c908:	f240 4249 	movw	r2, #1097	; 0x449
 801c90c:	4293      	cmp	r3, r2
 801c90e:	d052      	beq.n	801c9b6 <ai_platform_network_post_init+0x156>
 801c910:	4b57      	ldr	r3, [pc, #348]	; (801ca70 <ai_platform_network_post_init+0x210>)
 801c912:	681a      	ldr	r2, [r3, #0]
 801c914:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801c918:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801c91c:	d03c      	beq.n	801c998 <ai_platform_network_post_init+0x138>
 801c91e:	681a      	ldr	r2, [r3, #0]
 801c920:	f240 4183 	movw	r1, #1155	; 0x483
 801c924:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801c928:	428a      	cmp	r2, r1
 801c92a:	f000 8082 	beq.w	801ca32 <ai_platform_network_post_init+0x1d2>
 801c92e:	681b      	ldr	r3, [r3, #0]
 801c930:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801c934:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801c938:	d06c      	beq.n	801ca14 <ai_platform_network_post_init+0x1b4>
 801c93a:	f7fe fbd7 	bl	801b0ec <_ai_platform_release_crc>
 801c93e:	68e3      	ldr	r3, [r4, #12]
 801c940:	f013 0502 	ands.w	r5, r3, #2
 801c944:	f000 8085 	beq.w	801ca52 <ai_platform_network_post_init+0x1f2>
 801c948:	4620      	mov	r0, r4
 801c94a:	f002 fd2d 	bl	801f3a8 <ai_layers_post_init_all>
 801c94e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801c950:	b18b      	cbz	r3, 801c976 <ai_platform_network_post_init+0x116>
 801c952:	6b65      	ldr	r5, [r4, #52]	; 0x34
 801c954:	b90d      	cbnz	r5, 801c95a <ai_platform_network_post_init+0xfa>
 801c956:	e00e      	b.n	801c976 <ai_platform_network_post_init+0x116>
 801c958:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801c95a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801c95c:	4629      	mov	r1, r5
 801c95e:	2000      	movs	r0, #0
 801c960:	4798      	blx	r3
 801c962:	692a      	ldr	r2, [r5, #16]
 801c964:	1b53      	subs	r3, r2, r5
 801c966:	4615      	mov	r5, r2
 801c968:	bf18      	it	ne
 801c96a:	2301      	movne	r3, #1
 801c96c:	2a00      	cmp	r2, #0
 801c96e:	bf08      	it	eq
 801c970:	2300      	moveq	r3, #0
 801c972:	2b00      	cmp	r3, #0
 801c974:	d1f0      	bne.n	801c958 <ai_platform_network_post_init+0xf8>
 801c976:	2001      	movs	r0, #1
 801c978:	bd38      	pop	{r3, r4, r5, pc}
 801c97a:	4b3e      	ldr	r3, [pc, #248]	; (801ca74 <ai_platform_network_post_init+0x214>)
 801c97c:	2201      	movs	r2, #1
 801c97e:	4619      	mov	r1, r3
 801c980:	601a      	str	r2, [r3, #0]
 801c982:	680b      	ldr	r3, [r1, #0]
 801c984:	2b00      	cmp	r3, #0
 801c986:	d1fc      	bne.n	801c982 <ai_platform_network_post_init+0x122>
 801c988:	4b3b      	ldr	r3, [pc, #236]	; (801ca78 <ai_platform_network_post_init+0x218>)
 801c98a:	493c      	ldr	r1, [pc, #240]	; (801ca7c <ai_platform_network_post_init+0x21c>)
 801c98c:	4a3c      	ldr	r2, [pc, #240]	; (801ca80 <ai_platform_network_post_init+0x220>)
 801c98e:	6019      	str	r1, [r3, #0]
 801c990:	681b      	ldr	r3, [r3, #0]
 801c992:	4293      	cmp	r3, r2
 801c994:	d095      	beq.n	801c8c2 <ai_platform_network_post_init+0x62>
 801c996:	e7fe      	b.n	801c996 <ai_platform_network_post_init+0x136>
 801c998:	4b3a      	ldr	r3, [pc, #232]	; (801ca84 <ai_platform_network_post_init+0x224>)
 801c99a:	2201      	movs	r2, #1
 801c99c:	4619      	mov	r1, r3
 801c99e:	601a      	str	r2, [r3, #0]
 801c9a0:	680b      	ldr	r3, [r1, #0]
 801c9a2:	2b00      	cmp	r3, #0
 801c9a4:	d1fc      	bne.n	801c9a0 <ai_platform_network_post_init+0x140>
 801c9a6:	4b38      	ldr	r3, [pc, #224]	; (801ca88 <ai_platform_network_post_init+0x228>)
 801c9a8:	4934      	ldr	r1, [pc, #208]	; (801ca7c <ai_platform_network_post_init+0x21c>)
 801c9aa:	4a35      	ldr	r2, [pc, #212]	; (801ca80 <ai_platform_network_post_init+0x220>)
 801c9ac:	6019      	str	r1, [r3, #0]
 801c9ae:	681b      	ldr	r3, [r3, #0]
 801c9b0:	4293      	cmp	r3, r2
 801c9b2:	d0c2      	beq.n	801c93a <ai_platform_network_post_init+0xda>
 801c9b4:	e7fe      	b.n	801c9b4 <ai_platform_network_post_init+0x154>
 801c9b6:	4b2f      	ldr	r3, [pc, #188]	; (801ca74 <ai_platform_network_post_init+0x214>)
 801c9b8:	2201      	movs	r2, #1
 801c9ba:	4619      	mov	r1, r3
 801c9bc:	601a      	str	r2, [r3, #0]
 801c9be:	680b      	ldr	r3, [r1, #0]
 801c9c0:	2b00      	cmp	r3, #0
 801c9c2:	d1fc      	bne.n	801c9be <ai_platform_network_post_init+0x15e>
 801c9c4:	4b2c      	ldr	r3, [pc, #176]	; (801ca78 <ai_platform_network_post_init+0x218>)
 801c9c6:	492d      	ldr	r1, [pc, #180]	; (801ca7c <ai_platform_network_post_init+0x21c>)
 801c9c8:	4a2d      	ldr	r2, [pc, #180]	; (801ca80 <ai_platform_network_post_init+0x220>)
 801c9ca:	6019      	str	r1, [r3, #0]
 801c9cc:	681b      	ldr	r3, [r3, #0]
 801c9ce:	4293      	cmp	r3, r2
 801c9d0:	d0b3      	beq.n	801c93a <ai_platform_network_post_init+0xda>
 801c9d2:	e7fe      	b.n	801c9d2 <ai_platform_network_post_init+0x172>
 801c9d4:	4b2b      	ldr	r3, [pc, #172]	; (801ca84 <ai_platform_network_post_init+0x224>)
 801c9d6:	2201      	movs	r2, #1
 801c9d8:	4619      	mov	r1, r3
 801c9da:	601a      	str	r2, [r3, #0]
 801c9dc:	680b      	ldr	r3, [r1, #0]
 801c9de:	2b00      	cmp	r3, #0
 801c9e0:	d1fc      	bne.n	801c9dc <ai_platform_network_post_init+0x17c>
 801c9e2:	4b29      	ldr	r3, [pc, #164]	; (801ca88 <ai_platform_network_post_init+0x228>)
 801c9e4:	4925      	ldr	r1, [pc, #148]	; (801ca7c <ai_platform_network_post_init+0x21c>)
 801c9e6:	4a26      	ldr	r2, [pc, #152]	; (801ca80 <ai_platform_network_post_init+0x220>)
 801c9e8:	6019      	str	r1, [r3, #0]
 801c9ea:	681b      	ldr	r3, [r3, #0]
 801c9ec:	4293      	cmp	r3, r2
 801c9ee:	f43f af68 	beq.w	801c8c2 <ai_platform_network_post_init+0x62>
 801c9f2:	e7fe      	b.n	801c9f2 <ai_platform_network_post_init+0x192>
 801c9f4:	4b23      	ldr	r3, [pc, #140]	; (801ca84 <ai_platform_network_post_init+0x224>)
 801c9f6:	2201      	movs	r2, #1
 801c9f8:	4619      	mov	r1, r3
 801c9fa:	601a      	str	r2, [r3, #0]
 801c9fc:	680b      	ldr	r3, [r1, #0]
 801c9fe:	2b00      	cmp	r3, #0
 801ca00:	d1fc      	bne.n	801c9fc <ai_platform_network_post_init+0x19c>
 801ca02:	4b21      	ldr	r3, [pc, #132]	; (801ca88 <ai_platform_network_post_init+0x228>)
 801ca04:	491d      	ldr	r1, [pc, #116]	; (801ca7c <ai_platform_network_post_init+0x21c>)
 801ca06:	4a1e      	ldr	r2, [pc, #120]	; (801ca80 <ai_platform_network_post_init+0x220>)
 801ca08:	6019      	str	r1, [r3, #0]
 801ca0a:	681b      	ldr	r3, [r3, #0]
 801ca0c:	4293      	cmp	r3, r2
 801ca0e:	f43f af58 	beq.w	801c8c2 <ai_platform_network_post_init+0x62>
 801ca12:	e7fe      	b.n	801ca12 <ai_platform_network_post_init+0x1b2>
 801ca14:	4b17      	ldr	r3, [pc, #92]	; (801ca74 <ai_platform_network_post_init+0x214>)
 801ca16:	2201      	movs	r2, #1
 801ca18:	4619      	mov	r1, r3
 801ca1a:	601a      	str	r2, [r3, #0]
 801ca1c:	680b      	ldr	r3, [r1, #0]
 801ca1e:	2b00      	cmp	r3, #0
 801ca20:	d1fc      	bne.n	801ca1c <ai_platform_network_post_init+0x1bc>
 801ca22:	4b15      	ldr	r3, [pc, #84]	; (801ca78 <ai_platform_network_post_init+0x218>)
 801ca24:	4915      	ldr	r1, [pc, #84]	; (801ca7c <ai_platform_network_post_init+0x21c>)
 801ca26:	4a16      	ldr	r2, [pc, #88]	; (801ca80 <ai_platform_network_post_init+0x220>)
 801ca28:	6019      	str	r1, [r3, #0]
 801ca2a:	681b      	ldr	r3, [r3, #0]
 801ca2c:	4293      	cmp	r3, r2
 801ca2e:	d084      	beq.n	801c93a <ai_platform_network_post_init+0xda>
 801ca30:	e7fe      	b.n	801ca30 <ai_platform_network_post_init+0x1d0>
 801ca32:	4b14      	ldr	r3, [pc, #80]	; (801ca84 <ai_platform_network_post_init+0x224>)
 801ca34:	2201      	movs	r2, #1
 801ca36:	4619      	mov	r1, r3
 801ca38:	601a      	str	r2, [r3, #0]
 801ca3a:	680b      	ldr	r3, [r1, #0]
 801ca3c:	2b00      	cmp	r3, #0
 801ca3e:	d1fc      	bne.n	801ca3a <ai_platform_network_post_init+0x1da>
 801ca40:	4b11      	ldr	r3, [pc, #68]	; (801ca88 <ai_platform_network_post_init+0x228>)
 801ca42:	490e      	ldr	r1, [pc, #56]	; (801ca7c <ai_platform_network_post_init+0x21c>)
 801ca44:	4a0e      	ldr	r2, [pc, #56]	; (801ca80 <ai_platform_network_post_init+0x220>)
 801ca46:	6019      	str	r1, [r3, #0]
 801ca48:	681b      	ldr	r3, [r3, #0]
 801ca4a:	4293      	cmp	r3, r2
 801ca4c:	f43f af75 	beq.w	801c93a <ai_platform_network_post_init+0xda>
 801ca50:	e7fe      	b.n	801ca50 <ai_platform_network_post_init+0x1f0>
 801ca52:	f104 0010 	add.w	r0, r4, #16
 801ca56:	2210      	movs	r2, #16
 801ca58:	2111      	movs	r1, #17
 801ca5a:	f000 fe61 	bl	801d720 <core_set_error>
 801ca5e:	4628      	mov	r0, r5
 801ca60:	bd38      	pop	{r3, r4, r5, pc}
 801ca62:	bf00      	nop
 801ca64:	a1c00100 	.word	0xa1c00100
 801ca68:	e0002000 	.word	0xe0002000
 801ca6c:	e0042000 	.word	0xe0042000
 801ca70:	5c001000 	.word	0x5c001000
 801ca74:	40023008 	.word	0x40023008
 801ca78:	40023000 	.word	0x40023000
 801ca7c:	f407a5c2 	.word	0xf407a5c2
 801ca80:	b5e8b5cd 	.word	0xb5e8b5cd
 801ca84:	58024c08 	.word	0x58024c08
 801ca88:	58024c00 	.word	0x58024c00

0801ca8c <ai_platform_network_process>:
 801ca8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca90:	460f      	mov	r7, r1
 801ca92:	b083      	sub	sp, #12
 801ca94:	4615      	mov	r5, r2
 801ca96:	4604      	mov	r4, r0
 801ca98:	b120      	cbz	r0, 801caa4 <ai_platform_network_process+0x18>
 801ca9a:	4ba8      	ldr	r3, [pc, #672]	; (801cd3c <ai_platform_network_process+0x2b0>)
 801ca9c:	6802      	ldr	r2, [r0, #0]
 801ca9e:	429a      	cmp	r2, r3
 801caa0:	bf18      	it	ne
 801caa2:	2400      	movne	r4, #0
 801caa4:	4aa6      	ldr	r2, [pc, #664]	; (801cd40 <ai_platform_network_process+0x2b4>)
 801caa6:	6813      	ldr	r3, [r2, #0]
 801caa8:	f023 0301 	bic.w	r3, r3, #1
 801caac:	6013      	str	r3, [r2, #0]
 801caae:	f7fe fb1b 	bl	801b0e8 <_ai_platform_acquire_crc>
 801cab2:	4ba4      	ldr	r3, [pc, #656]	; (801cd44 <ai_platform_network_process+0x2b8>)
 801cab4:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 801cab8:	681b      	ldr	r3, [r3, #0]
 801caba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801cabe:	185a      	adds	r2, r3, r1
 801cac0:	2a01      	cmp	r2, #1
 801cac2:	f240 80d3 	bls.w	801cc6c <ai_platform_network_process+0x1e0>
 801cac6:	f240 4249 	movw	r2, #1097	; 0x449
 801caca:	4293      	cmp	r3, r2
 801cacc:	f000 80ce 	beq.w	801cc6c <ai_platform_network_process+0x1e0>
 801cad0:	4b9d      	ldr	r3, [pc, #628]	; (801cd48 <ai_platform_network_process+0x2bc>)
 801cad2:	681a      	ldr	r2, [r3, #0]
 801cad4:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801cad8:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801cadc:	f000 80e4 	beq.w	801cca8 <ai_platform_network_process+0x21c>
 801cae0:	681a      	ldr	r2, [r3, #0]
 801cae2:	f240 4183 	movw	r1, #1155	; 0x483
 801cae6:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801caea:	428a      	cmp	r2, r1
 801caec:	f000 8104 	beq.w	801ccf8 <ai_platform_network_process+0x26c>
 801caf0:	681b      	ldr	r3, [r3, #0]
 801caf2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801caf6:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 801cafa:	f000 80ed 	beq.w	801ccd8 <ai_platform_network_process+0x24c>
 801cafe:	f7fe faf5 	bl	801b0ec <_ai_platform_release_crc>
 801cb02:	2c00      	cmp	r4, #0
 801cb04:	f000 80cb 	beq.w	801cc9e <ai_platform_network_process+0x212>
 801cb08:	68e2      	ldr	r2, [r4, #12]
 801cb0a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 801cb0c:	f002 0203 	and.w	r2, r2, #3
 801cb10:	2b00      	cmp	r3, #0
 801cb12:	f000 80bb 	beq.w	801cc8c <ai_platform_network_process+0x200>
 801cb16:	2100      	movs	r1, #0
 801cb18:	2a03      	cmp	r2, #3
 801cb1a:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801cb1e:	6161      	str	r1, [r4, #20]
 801cb20:	f040 80b7 	bne.w	801cc92 <ai_platform_network_process+0x206>
 801cb24:	2f00      	cmp	r7, #0
 801cb26:	f000 80cf 	beq.w	801ccc8 <ai_platform_network_process+0x23c>
 801cb2a:	faba f28a 	clz	r2, sl
 801cb2e:	0952      	lsrs	r2, r2, #5
 801cb30:	2a00      	cmp	r2, #0
 801cb32:	f040 80c9 	bne.w	801ccc8 <ai_platform_network_process+0x23c>
 801cb36:	f8ba 1000 	ldrh.w	r1, [sl]
 801cb3a:	2900      	cmp	r1, #0
 801cb3c:	f000 80c4 	beq.w	801ccc8 <ai_platform_network_process+0x23c>
 801cb40:	69b8      	ldr	r0, [r7, #24]
 801cb42:	f8da 1004 	ldr.w	r1, [sl, #4]
 801cb46:	6806      	ldr	r6, [r0, #0]
 801cb48:	2900      	cmp	r1, #0
 801cb4a:	f000 810c 	beq.w	801cd66 <ai_platform_network_process+0x2da>
 801cb4e:	f8d1 9000 	ldr.w	r9, [r1]
 801cb52:	f1b9 0f00 	cmp.w	r9, #0
 801cb56:	f000 8106 	beq.w	801cd66 <ai_platform_network_process+0x2da>
 801cb5a:	f8da 3008 	ldr.w	r3, [sl, #8]
 801cb5e:	4690      	mov	r8, r2
 801cb60:	f8d3 b000 	ldr.w	fp, [r3]
 801cb64:	f1bb 0f00 	cmp.w	fp, #0
 801cb68:	d16d      	bne.n	801cc46 <ai_platform_network_process+0x1ba>
 801cb6a:	e0ad      	b.n	801ccc8 <ai_platform_network_process+0x23c>
 801cb6c:	f8d9 000c 	ldr.w	r0, [r9, #12]
 801cb70:	69b9      	ldr	r1, [r7, #24]
 801cb72:	68c2      	ldr	r2, [r0, #12]
 801cb74:	68cb      	ldr	r3, [r1, #12]
 801cb76:	429a      	cmp	r2, r3
 801cb78:	d170      	bne.n	801cc5c <ai_platform_network_process+0x1d0>
 801cb7a:	6882      	ldr	r2, [r0, #8]
 801cb7c:	688b      	ldr	r3, [r1, #8]
 801cb7e:	429a      	cmp	r2, r3
 801cb80:	d16c      	bne.n	801cc5c <ai_platform_network_process+0x1d0>
 801cb82:	6842      	ldr	r2, [r0, #4]
 801cb84:	684b      	ldr	r3, [r1, #4]
 801cb86:	429a      	cmp	r2, r3
 801cb88:	d168      	bne.n	801cc5c <ai_platform_network_process+0x1d0>
 801cb8a:	f8d9 3018 	ldr.w	r3, [r9, #24]
 801cb8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801cb92:	f007 ffd9 	bl	8024b48 <ai_array_get_data_byte_size>
 801cb96:	9000      	str	r0, [sp, #0]
 801cb98:	4648      	mov	r0, r9
 801cb9a:	f007 ff67 	bl	8024a6c <get_tensor_byte_size>
 801cb9e:	9b00      	ldr	r3, [sp, #0]
 801cba0:	4283      	cmp	r3, r0
 801cba2:	d35b      	bcc.n	801cc5c <ai_platform_network_process+0x1d0>
 801cba4:	f8d9 3018 	ldr.w	r3, [r9, #24]
 801cba8:	6818      	ldr	r0, [r3, #0]
 801cbaa:	f007 ff77 	bl	8024a9c <ai_array_to_buffer_fmt>
 801cbae:	683b      	ldr	r3, [r7, #0]
 801cbb0:	4043      	eors	r3, r0
 801cbb2:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 801cbb6:	f040 823c 	bne.w	801d032 <ai_platform_network_process+0x5a6>
 801cbba:	687b      	ldr	r3, [r7, #4]
 801cbbc:	2b00      	cmp	r3, #0
 801cbbe:	f000 80b4 	beq.w	801cd2a <ai_platform_network_process+0x29e>
 801cbc2:	69bb      	ldr	r3, [r7, #24]
 801cbc4:	681b      	ldr	r3, [r3, #0]
 801cbc6:	2b00      	cmp	r3, #0
 801cbc8:	f000 80a6 	beq.w	801cd18 <ai_platform_network_process+0x28c>
 801cbcc:	429e      	cmp	r6, r3
 801cbce:	4648      	mov	r0, r9
 801cbd0:	bf38      	it	cc
 801cbd2:	461e      	movcc	r6, r3
 801cbd4:	f007 ff4a 	bl	8024a6c <get_tensor_byte_size>
 801cbd8:	f8cb 0008 	str.w	r0, [fp, #8]
 801cbdc:	69bb      	ldr	r3, [r7, #24]
 801cbde:	681a      	ldr	r2, [r3, #0]
 801cbe0:	fb02 f200 	mul.w	r2, r2, r0
 801cbe4:	f8cb 200c 	str.w	r2, [fp, #12]
 801cbe8:	6878      	ldr	r0, [r7, #4]
 801cbea:	f8cb 0004 	str.w	r0, [fp, #4]
 801cbee:	687b      	ldr	r3, [r7, #4]
 801cbf0:	4413      	add	r3, r2
 801cbf2:	f8cb 3000 	str.w	r3, [fp]
 801cbf6:	f8d9 1018 	ldr.w	r1, [r9, #24]
 801cbfa:	680b      	ldr	r3, [r1, #0]
 801cbfc:	009a      	lsls	r2, r3, #2
 801cbfe:	d409      	bmi.n	801cc14 <ai_platform_network_process+0x188>
 801cc00:	e9d1 3202 	ldrd	r3, r2, [r1, #8]
 801cc04:	1a9b      	subs	r3, r3, r2
 801cc06:	4418      	add	r0, r3
 801cc08:	6088      	str	r0, [r1, #8]
 801cc0a:	f8d9 3018 	ldr.w	r3, [r9, #24]
 801cc0e:	f8db 2004 	ldr.w	r2, [fp, #4]
 801cc12:	60da      	str	r2, [r3, #12]
 801cc14:	f108 0801 	add.w	r8, r8, #1
 801cc18:	f8ba 3000 	ldrh.w	r3, [sl]
 801cc1c:	4598      	cmp	r8, r3
 801cc1e:	f080 80a1 	bcs.w	801cd64 <ai_platform_network_process+0x2d8>
 801cc22:	f8da 3004 	ldr.w	r3, [sl, #4]
 801cc26:	2b00      	cmp	r3, #0
 801cc28:	f000 809c 	beq.w	801cd64 <ai_platform_network_process+0x2d8>
 801cc2c:	f853 9028 	ldr.w	r9, [r3, r8, lsl #2]
 801cc30:	f1b9 0f00 	cmp.w	r9, #0
 801cc34:	f000 8096 	beq.w	801cd64 <ai_platform_network_process+0x2d8>
 801cc38:	f8da 3008 	ldr.w	r3, [sl, #8]
 801cc3c:	371c      	adds	r7, #28
 801cc3e:	681b      	ldr	r3, [r3, #0]
 801cc40:	eb13 1b08 	adds.w	fp, r3, r8, lsl #4
 801cc44:	d040      	beq.n	801ccc8 <ai_platform_network_process+0x23c>
 801cc46:	f8d9 3018 	ldr.w	r3, [r9, #24]
 801cc4a:	2101      	movs	r1, #1
 801cc4c:	4638      	mov	r0, r7
 801cc4e:	685b      	ldr	r3, [r3, #4]
 801cc50:	9300      	str	r3, [sp, #0]
 801cc52:	f7fe fa0f 	bl	801b074 <ai_buffer_get_size>
 801cc56:	9b00      	ldr	r3, [sp, #0]
 801cc58:	4283      	cmp	r3, r0
 801cc5a:	d287      	bcs.n	801cb6c <ai_platform_network_process+0xe0>
 801cc5c:	f104 0010 	add.w	r0, r4, #16
 801cc60:	2218      	movs	r2, #24
 801cc62:	2112      	movs	r1, #18
 801cc64:	f000 fd5c 	bl	801d720 <core_set_error>
 801cc68:	2300      	movs	r3, #0
 801cc6a:	e019      	b.n	801cca0 <ai_platform_network_process+0x214>
 801cc6c:	4b37      	ldr	r3, [pc, #220]	; (801cd4c <ai_platform_network_process+0x2c0>)
 801cc6e:	2201      	movs	r2, #1
 801cc70:	4619      	mov	r1, r3
 801cc72:	601a      	str	r2, [r3, #0]
 801cc74:	680b      	ldr	r3, [r1, #0]
 801cc76:	2b00      	cmp	r3, #0
 801cc78:	d1fc      	bne.n	801cc74 <ai_platform_network_process+0x1e8>
 801cc7a:	4b35      	ldr	r3, [pc, #212]	; (801cd50 <ai_platform_network_process+0x2c4>)
 801cc7c:	4935      	ldr	r1, [pc, #212]	; (801cd54 <ai_platform_network_process+0x2c8>)
 801cc7e:	4a36      	ldr	r2, [pc, #216]	; (801cd58 <ai_platform_network_process+0x2cc>)
 801cc80:	6019      	str	r1, [r3, #0]
 801cc82:	681b      	ldr	r3, [r3, #0]
 801cc84:	4293      	cmp	r3, r2
 801cc86:	f43f af3a 	beq.w	801cafe <ai_platform_network_process+0x72>
 801cc8a:	e7fe      	b.n	801cc8a <ai_platform_network_process+0x1fe>
 801cc8c:	2a03      	cmp	r2, #3
 801cc8e:	6163      	str	r3, [r4, #20]
 801cc90:	d01a      	beq.n	801ccc8 <ai_platform_network_process+0x23c>
 801cc92:	f104 0010 	add.w	r0, r4, #16
 801cc96:	2230      	movs	r2, #48	; 0x30
 801cc98:	2111      	movs	r1, #17
 801cc9a:	f000 fd41 	bl	801d720 <core_set_error>
 801cc9e:	2300      	movs	r3, #0
 801cca0:	4618      	mov	r0, r3
 801cca2:	b003      	add	sp, #12
 801cca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cca8:	4b2c      	ldr	r3, [pc, #176]	; (801cd5c <ai_platform_network_process+0x2d0>)
 801ccaa:	2201      	movs	r2, #1
 801ccac:	4619      	mov	r1, r3
 801ccae:	601a      	str	r2, [r3, #0]
 801ccb0:	680b      	ldr	r3, [r1, #0]
 801ccb2:	2b00      	cmp	r3, #0
 801ccb4:	d1fc      	bne.n	801ccb0 <ai_platform_network_process+0x224>
 801ccb6:	4b2a      	ldr	r3, [pc, #168]	; (801cd60 <ai_platform_network_process+0x2d4>)
 801ccb8:	4926      	ldr	r1, [pc, #152]	; (801cd54 <ai_platform_network_process+0x2c8>)
 801ccba:	4a27      	ldr	r2, [pc, #156]	; (801cd58 <ai_platform_network_process+0x2cc>)
 801ccbc:	6019      	str	r1, [r3, #0]
 801ccbe:	681b      	ldr	r3, [r3, #0]
 801ccc0:	4293      	cmp	r3, r2
 801ccc2:	f43f af1c 	beq.w	801cafe <ai_platform_network_process+0x72>
 801ccc6:	e7fe      	b.n	801ccc6 <ai_platform_network_process+0x23a>
 801ccc8:	f104 0010 	add.w	r0, r4, #16
 801cccc:	2217      	movs	r2, #23
 801ccce:	2112      	movs	r1, #18
 801ccd0:	f000 fd26 	bl	801d720 <core_set_error>
 801ccd4:	2300      	movs	r3, #0
 801ccd6:	e7e3      	b.n	801cca0 <ai_platform_network_process+0x214>
 801ccd8:	4b1c      	ldr	r3, [pc, #112]	; (801cd4c <ai_platform_network_process+0x2c0>)
 801ccda:	2201      	movs	r2, #1
 801ccdc:	4619      	mov	r1, r3
 801ccde:	601a      	str	r2, [r3, #0]
 801cce0:	680b      	ldr	r3, [r1, #0]
 801cce2:	2b00      	cmp	r3, #0
 801cce4:	d1fc      	bne.n	801cce0 <ai_platform_network_process+0x254>
 801cce6:	4b1a      	ldr	r3, [pc, #104]	; (801cd50 <ai_platform_network_process+0x2c4>)
 801cce8:	491a      	ldr	r1, [pc, #104]	; (801cd54 <ai_platform_network_process+0x2c8>)
 801ccea:	4a1b      	ldr	r2, [pc, #108]	; (801cd58 <ai_platform_network_process+0x2cc>)
 801ccec:	6019      	str	r1, [r3, #0]
 801ccee:	681b      	ldr	r3, [r3, #0]
 801ccf0:	4293      	cmp	r3, r2
 801ccf2:	f43f af04 	beq.w	801cafe <ai_platform_network_process+0x72>
 801ccf6:	e7fe      	b.n	801ccf6 <ai_platform_network_process+0x26a>
 801ccf8:	4b18      	ldr	r3, [pc, #96]	; (801cd5c <ai_platform_network_process+0x2d0>)
 801ccfa:	2201      	movs	r2, #1
 801ccfc:	4619      	mov	r1, r3
 801ccfe:	601a      	str	r2, [r3, #0]
 801cd00:	680b      	ldr	r3, [r1, #0]
 801cd02:	2b00      	cmp	r3, #0
 801cd04:	d1fc      	bne.n	801cd00 <ai_platform_network_process+0x274>
 801cd06:	4b16      	ldr	r3, [pc, #88]	; (801cd60 <ai_platform_network_process+0x2d4>)
 801cd08:	4912      	ldr	r1, [pc, #72]	; (801cd54 <ai_platform_network_process+0x2c8>)
 801cd0a:	4a13      	ldr	r2, [pc, #76]	; (801cd58 <ai_platform_network_process+0x2cc>)
 801cd0c:	6019      	str	r1, [r3, #0]
 801cd0e:	681b      	ldr	r3, [r3, #0]
 801cd10:	4293      	cmp	r3, r2
 801cd12:	f43f aef4 	beq.w	801cafe <ai_platform_network_process+0x72>
 801cd16:	e7fe      	b.n	801cd16 <ai_platform_network_process+0x28a>
 801cd18:	f104 0010 	add.w	r0, r4, #16
 801cd1c:	2221      	movs	r2, #33	; 0x21
 801cd1e:	2112      	movs	r1, #18
 801cd20:	9300      	str	r3, [sp, #0]
 801cd22:	f000 fcfd 	bl	801d720 <core_set_error>
 801cd26:	9b00      	ldr	r3, [sp, #0]
 801cd28:	e7ba      	b.n	801cca0 <ai_platform_network_process+0x214>
 801cd2a:	f104 0010 	add.w	r0, r4, #16
 801cd2e:	2217      	movs	r2, #23
 801cd30:	2112      	movs	r1, #18
 801cd32:	9300      	str	r3, [sp, #0]
 801cd34:	f000 fcf4 	bl	801d720 <core_set_error>
 801cd38:	9b00      	ldr	r3, [sp, #0]
 801cd3a:	e7b1      	b.n	801cca0 <ai_platform_network_process+0x214>
 801cd3c:	a1c00100 	.word	0xa1c00100
 801cd40:	e0002000 	.word	0xe0002000
 801cd44:	e0042000 	.word	0xe0042000
 801cd48:	5c001000 	.word	0x5c001000
 801cd4c:	40023008 	.word	0x40023008
 801cd50:	40023000 	.word	0x40023000
 801cd54:	f407a5c2 	.word	0xf407a5c2
 801cd58:	b5e8b5cd 	.word	0xb5e8b5cd
 801cd5c:	58024c08 	.word	0x58024c08
 801cd60:	58024c00 	.word	0x58024c00
 801cd64:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 801cd66:	2d00      	cmp	r5, #0
 801cd68:	f000 80ad 	beq.w	801cec6 <ai_platform_network_process+0x43a>
 801cd6c:	2b01      	cmp	r3, #1
 801cd6e:	f240 8158 	bls.w	801d022 <ai_platform_network_process+0x596>
 801cd72:	f8d4 9030 	ldr.w	r9, [r4, #48]	; 0x30
 801cd76:	f119 0f0c 	cmn.w	r9, #12
 801cd7a:	f000 8152 	beq.w	801d022 <ai_platform_network_process+0x596>
 801cd7e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801cd82:	2b00      	cmp	r3, #0
 801cd84:	f000 814d 	beq.w	801d022 <ai_platform_network_process+0x596>
 801cd88:	f04f 0800 	mov.w	r8, #0
 801cd8c:	4598      	cmp	r8, r3
 801cd8e:	f080 8099 	bcs.w	801cec4 <ai_platform_network_process+0x438>
 801cd92:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801cd96:	2b00      	cmp	r3, #0
 801cd98:	f000 8094 	beq.w	801cec4 <ai_platform_network_process+0x438>
 801cd9c:	f853 b028 	ldr.w	fp, [r3, r8, lsl #2]
 801cda0:	f1bb 0f00 	cmp.w	fp, #0
 801cda4:	f000 808e 	beq.w	801cec4 <ai_platform_network_process+0x438>
 801cda8:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801cdac:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 801cdb0:	681b      	ldr	r3, [r3, #0]
 801cdb2:	eb13 070a 	adds.w	r7, r3, sl
 801cdb6:	9300      	str	r3, [sp, #0]
 801cdb8:	d07c      	beq.n	801ceb4 <ai_platform_network_process+0x428>
 801cdba:	f8db 3018 	ldr.w	r3, [fp, #24]
 801cdbe:	2101      	movs	r1, #1
 801cdc0:	4628      	mov	r0, r5
 801cdc2:	685b      	ldr	r3, [r3, #4]
 801cdc4:	9301      	str	r3, [sp, #4]
 801cdc6:	f7fe f955 	bl	801b074 <ai_buffer_get_size>
 801cdca:	9b01      	ldr	r3, [sp, #4]
 801cdcc:	4283      	cmp	r3, r0
 801cdce:	f0c0 8128 	bcc.w	801d022 <ai_platform_network_process+0x596>
 801cdd2:	f8db 000c 	ldr.w	r0, [fp, #12]
 801cdd6:	69a9      	ldr	r1, [r5, #24]
 801cdd8:	68c2      	ldr	r2, [r0, #12]
 801cdda:	68cb      	ldr	r3, [r1, #12]
 801cddc:	429a      	cmp	r2, r3
 801cdde:	f040 8120 	bne.w	801d022 <ai_platform_network_process+0x596>
 801cde2:	6882      	ldr	r2, [r0, #8]
 801cde4:	688b      	ldr	r3, [r1, #8]
 801cde6:	429a      	cmp	r2, r3
 801cde8:	f040 811b 	bne.w	801d022 <ai_platform_network_process+0x596>
 801cdec:	6842      	ldr	r2, [r0, #4]
 801cdee:	684b      	ldr	r3, [r1, #4]
 801cdf0:	429a      	cmp	r2, r3
 801cdf2:	f040 8116 	bne.w	801d022 <ai_platform_network_process+0x596>
 801cdf6:	f8db 3018 	ldr.w	r3, [fp, #24]
 801cdfa:	e9d3 0100 	ldrd	r0, r1, [r3]
 801cdfe:	f007 fea3 	bl	8024b48 <ai_array_get_data_byte_size>
 801ce02:	9001      	str	r0, [sp, #4]
 801ce04:	4658      	mov	r0, fp
 801ce06:	f007 fe31 	bl	8024a6c <get_tensor_byte_size>
 801ce0a:	9b01      	ldr	r3, [sp, #4]
 801ce0c:	4283      	cmp	r3, r0
 801ce0e:	f0c0 8108 	bcc.w	801d022 <ai_platform_network_process+0x596>
 801ce12:	f8db 3018 	ldr.w	r3, [fp, #24]
 801ce16:	6818      	ldr	r0, [r3, #0]
 801ce18:	f007 fe40 	bl	8024a9c <ai_array_to_buffer_fmt>
 801ce1c:	682b      	ldr	r3, [r5, #0]
 801ce1e:	4043      	eors	r3, r0
 801ce20:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 801ce24:	d13e      	bne.n	801cea4 <ai_platform_network_process+0x418>
 801ce26:	686b      	ldr	r3, [r5, #4]
 801ce28:	2b00      	cmp	r3, #0
 801ce2a:	d032      	beq.n	801ce92 <ai_platform_network_process+0x406>
 801ce2c:	69ab      	ldr	r3, [r5, #24]
 801ce2e:	681b      	ldr	r3, [r3, #0]
 801ce30:	b333      	cbz	r3, 801ce80 <ai_platform_network_process+0x3f4>
 801ce32:	429e      	cmp	r6, r3
 801ce34:	4658      	mov	r0, fp
 801ce36:	bf38      	it	cc
 801ce38:	461e      	movcc	r6, r3
 801ce3a:	f007 fe17 	bl	8024a6c <get_tensor_byte_size>
 801ce3e:	60b8      	str	r0, [r7, #8]
 801ce40:	69ab      	ldr	r3, [r5, #24]
 801ce42:	681a      	ldr	r2, [r3, #0]
 801ce44:	fb02 f200 	mul.w	r2, r2, r0
 801ce48:	60fa      	str	r2, [r7, #12]
 801ce4a:	6868      	ldr	r0, [r5, #4]
 801ce4c:	6078      	str	r0, [r7, #4]
 801ce4e:	686b      	ldr	r3, [r5, #4]
 801ce50:	4413      	add	r3, r2
 801ce52:	9a00      	ldr	r2, [sp, #0]
 801ce54:	f842 300a 	str.w	r3, [r2, sl]
 801ce58:	f8db 1018 	ldr.w	r1, [fp, #24]
 801ce5c:	680b      	ldr	r3, [r1, #0]
 801ce5e:	009b      	lsls	r3, r3, #2
 801ce60:	d408      	bmi.n	801ce74 <ai_platform_network_process+0x3e8>
 801ce62:	e9d1 3202 	ldrd	r3, r2, [r1, #8]
 801ce66:	1a9b      	subs	r3, r3, r2
 801ce68:	4418      	add	r0, r3
 801ce6a:	6088      	str	r0, [r1, #8]
 801ce6c:	687a      	ldr	r2, [r7, #4]
 801ce6e:	f8db 3018 	ldr.w	r3, [fp, #24]
 801ce72:	60da      	str	r2, [r3, #12]
 801ce74:	f108 0801 	add.w	r8, r8, #1
 801ce78:	351c      	adds	r5, #28
 801ce7a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801ce7e:	e785      	b.n	801cd8c <ai_platform_network_process+0x300>
 801ce80:	f104 0010 	add.w	r0, r4, #16
 801ce84:	2221      	movs	r2, #33	; 0x21
 801ce86:	2113      	movs	r1, #19
 801ce88:	9300      	str	r3, [sp, #0]
 801ce8a:	f000 fc49 	bl	801d720 <core_set_error>
 801ce8e:	9b00      	ldr	r3, [sp, #0]
 801ce90:	e706      	b.n	801cca0 <ai_platform_network_process+0x214>
 801ce92:	f104 0010 	add.w	r0, r4, #16
 801ce96:	2217      	movs	r2, #23
 801ce98:	2113      	movs	r1, #19
 801ce9a:	9300      	str	r3, [sp, #0]
 801ce9c:	f000 fc40 	bl	801d720 <core_set_error>
 801cea0:	9b00      	ldr	r3, [sp, #0]
 801cea2:	e6fd      	b.n	801cca0 <ai_platform_network_process+0x214>
 801cea4:	f104 0010 	add.w	r0, r4, #16
 801cea8:	2219      	movs	r2, #25
 801ceaa:	2113      	movs	r1, #19
 801ceac:	f000 fc38 	bl	801d720 <core_set_error>
 801ceb0:	2300      	movs	r3, #0
 801ceb2:	e6f5      	b.n	801cca0 <ai_platform_network_process+0x214>
 801ceb4:	f104 0010 	add.w	r0, r4, #16
 801ceb8:	2217      	movs	r2, #23
 801ceba:	2113      	movs	r1, #19
 801cebc:	f000 fc30 	bl	801d720 <core_set_error>
 801cec0:	463b      	mov	r3, r7
 801cec2:	e6ed      	b.n	801cca0 <ai_platform_network_process+0x214>
 801cec4:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 801cec6:	82a6      	strh	r6, [r4, #20]
 801cec8:	2b00      	cmp	r3, #0
 801ceca:	f000 80a5 	beq.w	801d018 <ai_platform_network_process+0x58c>
 801cece:	2b01      	cmp	r3, #1
 801ced0:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801ced2:	f240 80a4 	bls.w	801d01e <ai_platform_network_process+0x592>
 801ced6:	f105 070c 	add.w	r7, r5, #12
 801ceda:	8ae3      	ldrh	r3, [r4, #22]
 801cedc:	8aa2      	ldrh	r2, [r4, #20]
 801cede:	429a      	cmp	r2, r3
 801cee0:	f67f aede 	bls.w	801cca0 <ai_platform_network_process+0x214>
 801cee4:	2d00      	cmp	r5, #0
 801cee6:	d03a      	beq.n	801cf5e <ai_platform_network_process+0x4d2>
 801cee8:	882b      	ldrh	r3, [r5, #0]
 801ceea:	2b00      	cmp	r3, #0
 801ceec:	d037      	beq.n	801cf5e <ai_platform_network_process+0x4d2>
 801ceee:	686b      	ldr	r3, [r5, #4]
 801cef0:	2b00      	cmp	r3, #0
 801cef2:	d034      	beq.n	801cf5e <ai_platform_network_process+0x4d2>
 801cef4:	681a      	ldr	r2, [r3, #0]
 801cef6:	2a00      	cmp	r2, #0
 801cef8:	d031      	beq.n	801cf5e <ai_platform_network_process+0x4d2>
 801cefa:	f04f 0800 	mov.w	r8, #0
 801cefe:	e01b      	b.n	801cf38 <ai_platform_network_process+0x4ac>
 801cf00:	68d9      	ldr	r1, [r3, #12]
 801cf02:	1a40      	subs	r0, r0, r1
 801cf04:	eb0c 0100 	add.w	r1, ip, r0
 801cf08:	6099      	str	r1, [r3, #8]
 801cf0a:	6993      	ldr	r3, [r2, #24]
 801cf0c:	6872      	ldr	r2, [r6, #4]
 801cf0e:	60da      	str	r2, [r3, #12]
 801cf10:	6873      	ldr	r3, [r6, #4]
 801cf12:	f108 0801 	add.w	r8, r8, #1
 801cf16:	68b1      	ldr	r1, [r6, #8]
 801cf18:	f85a 2009 	ldr.w	r2, [sl, r9]
 801cf1c:	440b      	add	r3, r1
 801cf1e:	4293      	cmp	r3, r2
 801cf20:	d301      	bcc.n	801cf26 <ai_platform_network_process+0x49a>
 801cf22:	68f3      	ldr	r3, [r6, #12]
 801cf24:	1ad3      	subs	r3, r2, r3
 801cf26:	6073      	str	r3, [r6, #4]
 801cf28:	882b      	ldrh	r3, [r5, #0]
 801cf2a:	4598      	cmp	r8, r3
 801cf2c:	d217      	bcs.n	801cf5e <ai_platform_network_process+0x4d2>
 801cf2e:	686b      	ldr	r3, [r5, #4]
 801cf30:	b1ab      	cbz	r3, 801cf5e <ai_platform_network_process+0x4d2>
 801cf32:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
 801cf36:	b192      	cbz	r2, 801cf5e <ai_platform_network_process+0x4d2>
 801cf38:	68a9      	ldr	r1, [r5, #8]
 801cf3a:	ea4f 1908 	mov.w	r9, r8, lsl #4
 801cf3e:	6993      	ldr	r3, [r2, #24]
 801cf40:	f8d1 a000 	ldr.w	sl, [r1]
 801cf44:	6819      	ldr	r1, [r3, #0]
 801cf46:	eb0a 0609 	add.w	r6, sl, r9
 801cf4a:	6898      	ldr	r0, [r3, #8]
 801cf4c:	0089      	lsls	r1, r1, #2
 801cf4e:	f8d6 c004 	ldr.w	ip, [r6, #4]
 801cf52:	d5d5      	bpl.n	801cf00 <ai_platform_network_process+0x474>
 801cf54:	4661      	mov	r1, ip
 801cf56:	68b2      	ldr	r2, [r6, #8]
 801cf58:	f007 ff48 	bl	8024dec <memcpy>
 801cf5c:	e7d8      	b.n	801cf10 <ai_platform_network_process+0x484>
 801cf5e:	4620      	mov	r0, r4
 801cf60:	f002 fa38 	bl	801f3d4 <ai_layers_forward_all>
 801cf64:	2f00      	cmp	r7, #0
 801cf66:	d04b      	beq.n	801d000 <ai_platform_network_process+0x574>
 801cf68:	883b      	ldrh	r3, [r7, #0]
 801cf6a:	2b00      	cmp	r3, #0
 801cf6c:	d048      	beq.n	801d000 <ai_platform_network_process+0x574>
 801cf6e:	687b      	ldr	r3, [r7, #4]
 801cf70:	2b00      	cmp	r3, #0
 801cf72:	d045      	beq.n	801d000 <ai_platform_network_process+0x574>
 801cf74:	6818      	ldr	r0, [r3, #0]
 801cf76:	2800      	cmp	r0, #0
 801cf78:	d042      	beq.n	801d000 <ai_platform_network_process+0x574>
 801cf7a:	f04f 0800 	mov.w	r8, #0
 801cf7e:	e01c      	b.n	801cfba <ai_platform_network_process+0x52e>
 801cf80:	f85a 2009 	ldr.w	r2, [sl, r9]
 801cf84:	4596      	cmp	lr, r2
 801cf86:	d302      	bcc.n	801cf8e <ai_platform_network_process+0x502>
 801cf88:	68f3      	ldr	r3, [r6, #12]
 801cf8a:	eba2 0e03 	sub.w	lr, r2, r3
 801cf8e:	f8c6 e004 	str.w	lr, [r6, #4]
 801cf92:	f108 0801 	add.w	r8, r8, #1
 801cf96:	6981      	ldr	r1, [r0, #24]
 801cf98:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 801cf9c:	1ad2      	subs	r2, r2, r3
 801cf9e:	eb0e 0302 	add.w	r3, lr, r2
 801cfa2:	608b      	str	r3, [r1, #8]
 801cfa4:	6983      	ldr	r3, [r0, #24]
 801cfa6:	6872      	ldr	r2, [r6, #4]
 801cfa8:	60da      	str	r2, [r3, #12]
 801cfaa:	883b      	ldrh	r3, [r7, #0]
 801cfac:	4598      	cmp	r8, r3
 801cfae:	d227      	bcs.n	801d000 <ai_platform_network_process+0x574>
 801cfb0:	687b      	ldr	r3, [r7, #4]
 801cfb2:	b32b      	cbz	r3, 801d000 <ai_platform_network_process+0x574>
 801cfb4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801cfb8:	b310      	cbz	r0, 801d000 <ai_platform_network_process+0x574>
 801cfba:	68bb      	ldr	r3, [r7, #8]
 801cfbc:	ea4f 1908 	mov.w	r9, r8, lsl #4
 801cfc0:	6981      	ldr	r1, [r0, #24]
 801cfc2:	f8d3 a000 	ldr.w	sl, [r3]
 801cfc6:	680b      	ldr	r3, [r1, #0]
 801cfc8:	eb0a 0609 	add.w	r6, sl, r9
 801cfcc:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 801cfd0:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 801cfd4:	eb0c 0e02 	add.w	lr, ip, r2
 801cfd8:	d0d2      	beq.n	801cf80 <ai_platform_network_process+0x4f4>
 801cfda:	6889      	ldr	r1, [r1, #8]
 801cfdc:	4660      	mov	r0, ip
 801cfde:	f007 ff05 	bl	8024dec <memcpy>
 801cfe2:	f85a 2009 	ldr.w	r2, [sl, r9]
 801cfe6:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 801cfea:	440b      	add	r3, r1
 801cfec:	4293      	cmp	r3, r2
 801cfee:	d301      	bcc.n	801cff4 <ai_platform_network_process+0x568>
 801cff0:	68f3      	ldr	r3, [r6, #12]
 801cff2:	1ad3      	subs	r3, r2, r3
 801cff4:	6073      	str	r3, [r6, #4]
 801cff6:	f108 0801 	add.w	r8, r8, #1
 801cffa:	883b      	ldrh	r3, [r7, #0]
 801cffc:	4598      	cmp	r8, r3
 801cffe:	d3d7      	bcc.n	801cfb0 <ai_platform_network_process+0x524>
 801d000:	8ae3      	ldrh	r3, [r4, #22]
 801d002:	8aa2      	ldrh	r2, [r4, #20]
 801d004:	3301      	adds	r3, #1
 801d006:	b29b      	uxth	r3, r3
 801d008:	429a      	cmp	r2, r3
 801d00a:	82e3      	strh	r3, [r4, #22]
 801d00c:	f63f af6a 	bhi.w	801cee4 <ai_platform_network_process+0x458>
 801d010:	4618      	mov	r0, r3
 801d012:	b003      	add	sp, #12
 801d014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d018:	461d      	mov	r5, r3
 801d01a:	461f      	mov	r7, r3
 801d01c:	e75d      	b.n	801ceda <ai_platform_network_process+0x44e>
 801d01e:	2700      	movs	r7, #0
 801d020:	e75b      	b.n	801ceda <ai_platform_network_process+0x44e>
 801d022:	f104 0010 	add.w	r0, r4, #16
 801d026:	2218      	movs	r2, #24
 801d028:	2113      	movs	r1, #19
 801d02a:	f000 fb79 	bl	801d720 <core_set_error>
 801d02e:	2300      	movs	r3, #0
 801d030:	e636      	b.n	801cca0 <ai_platform_network_process+0x214>
 801d032:	f104 0010 	add.w	r0, r4, #16
 801d036:	2219      	movs	r2, #25
 801d038:	2112      	movs	r1, #18
 801d03a:	f000 fb71 	bl	801d720 <core_set_error>
 801d03e:	2300      	movs	r3, #0
 801d040:	e62e      	b.n	801cca0 <ai_platform_network_process+0x214>
 801d042:	bf00      	nop

0801d044 <node_convert>:
 801d044:	6982      	ldr	r2, [r0, #24]
 801d046:	8813      	ldrh	r3, [r2, #0]
 801d048:	2b00      	cmp	r3, #0
 801d04a:	d04b      	beq.n	801d0e4 <node_convert+0xa0>
 801d04c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d04e:	6852      	ldr	r2, [r2, #4]
 801d050:	b083      	sub	sp, #12
 801d052:	6855      	ldr	r5, [r2, #4]
 801d054:	b105      	cbz	r5, 801d058 <node_convert+0x14>
 801d056:	682d      	ldr	r5, [r5, #0]
 801d058:	2b01      	cmp	r3, #1
 801d05a:	d940      	bls.n	801d0de <node_convert+0x9a>
 801d05c:	6916      	ldr	r6, [r2, #16]
 801d05e:	b106      	cbz	r6, 801d062 <node_convert+0x1e>
 801d060:	6836      	ldr	r6, [r6, #0]
 801d062:	68ab      	ldr	r3, [r5, #8]
 801d064:	0a1b      	lsrs	r3, r3, #8
 801d066:	f000 80e3 	beq.w	801d230 <node_convert+0x1ec>
 801d06a:	68e9      	ldr	r1, [r5, #12]
 801d06c:	2401      	movs	r4, #1
 801d06e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801d072:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801d076:	428b      	cmp	r3, r1
 801d078:	fb02 f404 	mul.w	r4, r2, r4
 801d07c:	d1f9      	bne.n	801d072 <node_convert+0x2e>
 801d07e:	69aa      	ldr	r2, [r5, #24]
 801d080:	69b7      	ldr	r7, [r6, #24]
 801d082:	6813      	ldr	r3, [r2, #0]
 801d084:	6890      	ldr	r0, [r2, #8]
 801d086:	f3c3 4243 	ubfx	r2, r3, #17, #4
 801d08a:	2a01      	cmp	r2, #1
 801d08c:	d055      	beq.n	801d13a <node_convert+0xf6>
 801d08e:	6829      	ldr	r1, [r5, #0]
 801d090:	15da      	asrs	r2, r3, #23
 801d092:	68bd      	ldr	r5, [r7, #8]
 801d094:	b341      	cbz	r1, 801d0e8 <node_convert+0xa4>
 801d096:	684e      	ldr	r6, [r1, #4]
 801d098:	f002 0201 	and.w	r2, r2, #1
 801d09c:	2e00      	cmp	r6, #0
 801d09e:	f000 80c9 	beq.w	801d234 <node_convert+0x1f0>
 801d0a2:	884b      	ldrh	r3, [r1, #2]
 801d0a4:	2b00      	cmp	r3, #0
 801d0a6:	f000 8087 	beq.w	801d1b8 <node_convert+0x174>
 801d0aa:	6833      	ldr	r3, [r6, #0]
 801d0ac:	ed93 7a00 	vldr	s14, [r3]
 801d0b0:	6873      	ldr	r3, [r6, #4]
 801d0b2:	2a00      	cmp	r2, #0
 801d0b4:	f000 80d5 	beq.w	801d262 <node_convert+0x21e>
 801d0b8:	f993 2000 	ldrsb.w	r2, [r3]
 801d0bc:	b16c      	cbz	r4, 801d0da <node_convert+0x96>
 801d0be:	4404      	add	r4, r0
 801d0c0:	f910 3b01 	ldrsb.w	r3, [r0], #1
 801d0c4:	1a9b      	subs	r3, r3, r2
 801d0c6:	42a0      	cmp	r0, r4
 801d0c8:	ee07 3a90 	vmov	s15, r3
 801d0cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d0d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 801d0d4:	ece5 7a01 	vstmia	r5!, {s15}
 801d0d8:	d1f2      	bne.n	801d0c0 <node_convert+0x7c>
 801d0da:	b003      	add	sp, #12
 801d0dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d0de:	2300      	movs	r3, #0
 801d0e0:	685b      	ldr	r3, [r3, #4]
 801d0e2:	deff      	udf	#255	; 0xff
 801d0e4:	685b      	ldr	r3, [r3, #4]
 801d0e6:	deff      	udf	#255	; 0xff
 801d0e8:	f3c3 11c6 	ubfx	r1, r3, #7, #7
 801d0ec:	f003 067f 	and.w	r6, r3, #127	; 0x7f
 801d0f0:	f002 0201 	and.w	r2, r2, #1
 801d0f4:	1b8e      	subs	r6, r1, r6
 801d0f6:	2908      	cmp	r1, #8
 801d0f8:	4629      	mov	r1, r5
 801d0fa:	f106 0640 	add.w	r6, r6, #64	; 0x40
 801d0fe:	eba6 0602 	sub.w	r6, r6, r2
 801d102:	4622      	mov	r2, r4
 801d104:	d05e      	beq.n	801d1c4 <node_convert+0x180>
 801d106:	f007 fbcb 	bl	80248a0 <st_dsp_arm_q15_to_float>
 801d10a:	2e00      	cmp	r6, #0
 801d10c:	d0e5      	beq.n	801d0da <node_convert+0x96>
 801d10e:	ee07 6a90 	vmov	s15, r6
 801d112:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801d116:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801d11a:	f00a fed5 	bl	8027ec8 <powf>
 801d11e:	2c00      	cmp	r4, #0
 801d120:	d0db      	beq.n	801d0da <node_convert+0x96>
 801d122:	2300      	movs	r3, #0
 801d124:	ecf5 7a01 	vldmia	r5!, {s15}
 801d128:	3301      	adds	r3, #1
 801d12a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801d12e:	429c      	cmp	r4, r3
 801d130:	ed45 7a01 	vstr	s15, [r5, #-4]
 801d134:	d1f6      	bne.n	801d124 <node_convert+0xe0>
 801d136:	b003      	add	sp, #12
 801d138:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d13a:	683b      	ldr	r3, [r7, #0]
 801d13c:	6835      	ldr	r5, [r6, #0]
 801d13e:	15da      	asrs	r2, r3, #23
 801d140:	2d00      	cmp	r5, #0
 801d142:	f000 8090 	beq.w	801d266 <node_convert+0x222>
 801d146:	6869      	ldr	r1, [r5, #4]
 801d148:	f002 0301 	and.w	r3, r2, #1
 801d14c:	68ba      	ldr	r2, [r7, #8]
 801d14e:	2900      	cmp	r1, #0
 801d150:	d03b      	beq.n	801d1ca <node_convert+0x186>
 801d152:	886d      	ldrh	r5, [r5, #2]
 801d154:	2d00      	cmp	r5, #0
 801d156:	d03e      	beq.n	801d1d6 <node_convert+0x192>
 801d158:	680d      	ldr	r5, [r1, #0]
 801d15a:	edd5 7a00 	vldr	s15, [r5]
 801d15e:	2b00      	cmp	r3, #0
 801d160:	f000 80b3 	beq.w	801d2ca <node_convert+0x286>
 801d164:	684b      	ldr	r3, [r1, #4]
 801d166:	f993 3000 	ldrsb.w	r3, [r3]
 801d16a:	ee07 3a10 	vmov	s14, r3
 801d16e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d172:	2c00      	cmp	r4, #0
 801d174:	d0b1      	beq.n	801d0da <node_convert+0x96>
 801d176:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 801d17a:	4414      	add	r4, r2
 801d17c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801d180:	eddf 5a57 	vldr	s11, [pc, #348]	; 801d2e0 <node_convert+0x29c>
 801d184:	eec5 6a27 	vdiv.f32	s13, s10, s15
 801d188:	ecf0 7a01 	vldmia	r0!, {s15}
 801d18c:	eeb0 5a47 	vmov.f32	s10, s14
 801d190:	eea7 5aa6 	vfma.f32	s10, s15, s13
 801d194:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 801d198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d19c:	db3b      	blt.n	801d216 <node_convert+0x1d2>
 801d19e:	ee75 7a06 	vadd.f32	s15, s10, s12
 801d1a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d1a6:	ee17 3a90 	vmov	r3, s15
 801d1aa:	f303 0307 	ssat	r3, #8, r3
 801d1ae:	f802 3b01 	strb.w	r3, [r2], #1
 801d1b2:	42a2      	cmp	r2, r4
 801d1b4:	d1e8      	bne.n	801d188 <node_convert+0x144>
 801d1b6:	e790      	b.n	801d0da <node_convert+0x96>
 801d1b8:	2a00      	cmp	r2, #0
 801d1ba:	d03d      	beq.n	801d238 <node_convert+0x1f4>
 801d1bc:	461a      	mov	r2, r3
 801d1be:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801d2e4 <node_convert+0x2a0>
 801d1c2:	e77b      	b.n	801d0bc <node_convert+0x78>
 801d1c4:	f007 fbd4 	bl	8024970 <st_dsp_arm_q7_to_float>
 801d1c8:	e79f      	b.n	801d10a <node_convert+0xc6>
 801d1ca:	b133      	cbz	r3, 801d1da <node_convert+0x196>
 801d1cc:	ed9f 7a45 	vldr	s14, [pc, #276]	; 801d2e4 <node_convert+0x2a0>
 801d1d0:	eef0 7a47 	vmov.f32	s15, s14
 801d1d4:	e7cd      	b.n	801d172 <node_convert+0x12e>
 801d1d6:	2b00      	cmp	r3, #0
 801d1d8:	d1f8      	bne.n	801d1cc <node_convert+0x188>
 801d1da:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801d1de:	eddf 7a41 	vldr	s15, [pc, #260]	; 801d2e4 <node_convert+0x2a0>
 801d1e2:	2c00      	cmp	r4, #0
 801d1e4:	f43f af79 	beq.w	801d0da <node_convert+0x96>
 801d1e8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801d1ec:	4414      	add	r4, r2
 801d1ee:	eec6 6a27 	vdiv.f32	s13, s12, s15
 801d1f2:	ecf0 7a01 	vldmia	r0!, {s15}
 801d1f6:	eeb0 6a47 	vmov.f32	s12, s14
 801d1fa:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801d1fe:	eefd 7ac6 	vcvt.s32.f32	s15, s12
 801d202:	ee17 3a90 	vmov	r3, s15
 801d206:	f383 0308 	usat	r3, #8, r3
 801d20a:	f802 3b01 	strb.w	r3, [r2], #1
 801d20e:	42a2      	cmp	r2, r4
 801d210:	d1ef      	bne.n	801d1f2 <node_convert+0x1ae>
 801d212:	b003      	add	sp, #12
 801d214:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d216:	ee75 7a65 	vsub.f32	s15, s10, s11
 801d21a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d21e:	ee17 3a90 	vmov	r3, s15
 801d222:	f303 0307 	ssat	r3, #8, r3
 801d226:	f802 3b01 	strb.w	r3, [r2], #1
 801d22a:	4294      	cmp	r4, r2
 801d22c:	d1ac      	bne.n	801d188 <node_convert+0x144>
 801d22e:	e754      	b.n	801d0da <node_convert+0x96>
 801d230:	2401      	movs	r4, #1
 801d232:	e724      	b.n	801d07e <node_convert+0x3a>
 801d234:	2a00      	cmp	r2, #0
 801d236:	d13f      	bne.n	801d2b8 <node_convert+0x274>
 801d238:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 801d2e4 <node_convert+0x2a0>
 801d23c:	2c00      	cmp	r4, #0
 801d23e:	f43f af4c 	beq.w	801d0da <node_convert+0x96>
 801d242:	4404      	add	r4, r0
 801d244:	f810 3b01 	ldrb.w	r3, [r0], #1
 801d248:	1a9b      	subs	r3, r3, r2
 801d24a:	42a0      	cmp	r0, r4
 801d24c:	ee07 3a90 	vmov	s15, r3
 801d250:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d254:	ee67 7a87 	vmul.f32	s15, s15, s14
 801d258:	ece5 7a01 	vstmia	r5!, {s15}
 801d25c:	d1f2      	bne.n	801d244 <node_convert+0x200>
 801d25e:	b003      	add	sp, #12
 801d260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d262:	781a      	ldrb	r2, [r3, #0]
 801d264:	e7ea      	b.n	801d23c <node_convert+0x1f8>
 801d266:	f3c3 16c6 	ubfx	r6, r3, #7, #7
 801d26a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801d26e:	f002 0201 	and.w	r2, r2, #1
 801d272:	1af3      	subs	r3, r6, r3
 801d274:	3340      	adds	r3, #64	; 0x40
 801d276:	1a9b      	subs	r3, r3, r2
 801d278:	d015      	beq.n	801d2a6 <node_convert+0x262>
 801d27a:	425b      	negs	r3, r3
 801d27c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801d280:	9001      	str	r0, [sp, #4]
 801d282:	ee00 3a90 	vmov	s1, r3
 801d286:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801d28a:	f00a fe1d 	bl	8027ec8 <powf>
 801d28e:	9801      	ldr	r0, [sp, #4]
 801d290:	b14c      	cbz	r4, 801d2a6 <node_convert+0x262>
 801d292:	4603      	mov	r3, r0
 801d294:	ecf3 7a01 	vldmia	r3!, {s15}
 801d298:	3501      	adds	r5, #1
 801d29a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801d29e:	42ac      	cmp	r4, r5
 801d2a0:	ed43 7a01 	vstr	s15, [r3, #-4]
 801d2a4:	d1f6      	bne.n	801d294 <node_convert+0x250>
 801d2a6:	2e08      	cmp	r6, #8
 801d2a8:	68b9      	ldr	r1, [r7, #8]
 801d2aa:	4622      	mov	r2, r4
 801d2ac:	d008      	beq.n	801d2c0 <node_convert+0x27c>
 801d2ae:	b003      	add	sp, #12
 801d2b0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801d2b4:	f007 b972 	b.w	802459c <st_dsp_arm_float_to_q15>
 801d2b8:	4632      	mov	r2, r6
 801d2ba:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 801d2e4 <node_convert+0x2a0>
 801d2be:	e6fd      	b.n	801d0bc <node_convert+0x78>
 801d2c0:	b003      	add	sp, #12
 801d2c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801d2c6:	f007 ba23 	b.w	8024710 <st_dsp_arm_float_to_q7>
 801d2ca:	684b      	ldr	r3, [r1, #4]
 801d2cc:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801d2d0:	781b      	ldrb	r3, [r3, #0]
 801d2d2:	ee07 3a10 	vmov	s14, r3
 801d2d6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801d2da:	ee37 7a26 	vadd.f32	s14, s14, s13
 801d2de:	e780      	b.n	801d1e2 <node_convert+0x19e>
 801d2e0:	3efffffc 	.word	0x3efffffc
 801d2e4:	00000000 	.word	0x00000000

0801d2e8 <node_convert_integer>:
 801d2e8:	6982      	ldr	r2, [r0, #24]
 801d2ea:	8813      	ldrh	r3, [r2, #0]
 801d2ec:	2b00      	cmp	r3, #0
 801d2ee:	f000 8084 	beq.w	801d3fa <node_convert_integer+0x112>
 801d2f2:	b4f0      	push	{r4, r5, r6, r7}
 801d2f4:	6852      	ldr	r2, [r2, #4]
 801d2f6:	6855      	ldr	r5, [r2, #4]
 801d2f8:	b105      	cbz	r5, 801d2fc <node_convert_integer+0x14>
 801d2fa:	682d      	ldr	r5, [r5, #0]
 801d2fc:	2b01      	cmp	r3, #1
 801d2fe:	d979      	bls.n	801d3f4 <node_convert_integer+0x10c>
 801d300:	6916      	ldr	r6, [r2, #16]
 801d302:	b106      	cbz	r6, 801d306 <node_convert_integer+0x1e>
 801d304:	6836      	ldr	r6, [r6, #0]
 801d306:	68ab      	ldr	r3, [r5, #8]
 801d308:	0a1b      	lsrs	r3, r3, #8
 801d30a:	f000 817c 	beq.w	801d606 <node_convert_integer+0x31e>
 801d30e:	68e8      	ldr	r0, [r5, #12]
 801d310:	2201      	movs	r2, #1
 801d312:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801d316:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d31a:	4298      	cmp	r0, r3
 801d31c:	fb01 f202 	mul.w	r2, r1, r2
 801d320:	d1f9      	bne.n	801d316 <node_convert_integer+0x2e>
 801d322:	0893      	lsrs	r3, r2, #2
 801d324:	682c      	ldr	r4, [r5, #0]
 801d326:	f8d6 c000 	ldr.w	ip, [r6]
 801d32a:	b19c      	cbz	r4, 801d354 <node_convert_integer+0x6c>
 801d32c:	6861      	ldr	r1, [r4, #4]
 801d32e:	b189      	cbz	r1, 801d354 <node_convert_integer+0x6c>
 801d330:	8860      	ldrh	r0, [r4, #2]
 801d332:	b178      	cbz	r0, 801d354 <node_convert_integer+0x6c>
 801d334:	6809      	ldr	r1, [r1, #0]
 801d336:	edd1 6a00 	vldr	s13, [r1]
 801d33a:	f1bc 0f00 	cmp.w	ip, #0
 801d33e:	d00e      	beq.n	801d35e <node_convert_integer+0x76>
 801d340:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801d344:	b159      	cbz	r1, 801d35e <node_convert_integer+0x76>
 801d346:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 801d34a:	b140      	cbz	r0, 801d35e <node_convert_integer+0x76>
 801d34c:	6809      	ldr	r1, [r1, #0]
 801d34e:	ed91 7a00 	vldr	s14, [r1]
 801d352:	e006      	b.n	801d362 <node_convert_integer+0x7a>
 801d354:	eddf 6abf 	vldr	s13, [pc, #764]	; 801d654 <node_convert_integer+0x36c>
 801d358:	f1bc 0f00 	cmp.w	ip, #0
 801d35c:	d1f0      	bne.n	801d340 <node_convert_integer+0x58>
 801d35e:	ed9f 7abd 	vldr	s14, [pc, #756]	; 801d654 <node_convert_integer+0x36c>
 801d362:	69a8      	ldr	r0, [r5, #24]
 801d364:	69b7      	ldr	r7, [r6, #24]
 801d366:	6805      	ldr	r5, [r0, #0]
 801d368:	6839      	ldr	r1, [r7, #0]
 801d36a:	022d      	lsls	r5, r5, #8
 801d36c:	6880      	ldr	r0, [r0, #8]
 801d36e:	f3c1 56c0 	ubfx	r6, r1, #23, #1
 801d372:	68b9      	ldr	r1, [r7, #8]
 801d374:	d443      	bmi.n	801d3fe <node_convert_integer+0x116>
 801d376:	2e00      	cmp	r6, #0
 801d378:	f040 80d6 	bne.w	801d528 <node_convert_integer+0x240>
 801d37c:	b13c      	cbz	r4, 801d38e <node_convert_integer+0xa6>
 801d37e:	6863      	ldr	r3, [r4, #4]
 801d380:	2b00      	cmp	r3, #0
 801d382:	f000 815f 	beq.w	801d644 <node_convert_integer+0x35c>
 801d386:	8864      	ldrh	r4, [r4, #2]
 801d388:	b10c      	cbz	r4, 801d38e <node_convert_integer+0xa6>
 801d38a:	685b      	ldr	r3, [r3, #4]
 801d38c:	781c      	ldrb	r4, [r3, #0]
 801d38e:	f1bc 0f00 	cmp.w	ip, #0
 801d392:	f000 8130 	beq.w	801d5f6 <node_convert_integer+0x30e>
 801d396:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801d39a:	2b00      	cmp	r3, #0
 801d39c:	f000 812b 	beq.w	801d5f6 <node_convert_integer+0x30e>
 801d3a0:	f8bc 5002 	ldrh.w	r5, [ip, #2]
 801d3a4:	2d00      	cmp	r5, #0
 801d3a6:	f000 8126 	beq.w	801d5f6 <node_convert_integer+0x30e>
 801d3aa:	685b      	ldr	r3, [r3, #4]
 801d3ac:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801d3b0:	781b      	ldrb	r3, [r3, #0]
 801d3b2:	ee06 3a10 	vmov	s12, r3
 801d3b6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801d3ba:	ee36 6a27 	vadd.f32	s12, s12, s15
 801d3be:	eec6 5a87 	vdiv.f32	s11, s13, s14
 801d3c2:	b1aa      	cbz	r2, 801d3f0 <node_convert_integer+0x108>
 801d3c4:	440a      	add	r2, r1
 801d3c6:	f810 3b01 	ldrb.w	r3, [r0], #1
 801d3ca:	1b1b      	subs	r3, r3, r4
 801d3cc:	eeb0 7a46 	vmov.f32	s14, s12
 801d3d0:	ee07 3a90 	vmov	s15, r3
 801d3d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d3d8:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801d3dc:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801d3e0:	ee17 3a90 	vmov	r3, s15
 801d3e4:	f383 0308 	usat	r3, #8, r3
 801d3e8:	f801 3b01 	strb.w	r3, [r1], #1
 801d3ec:	4291      	cmp	r1, r2
 801d3ee:	d1ea      	bne.n	801d3c6 <node_convert_integer+0xde>
 801d3f0:	bcf0      	pop	{r4, r5, r6, r7}
 801d3f2:	4770      	bx	lr
 801d3f4:	2300      	movs	r3, #0
 801d3f6:	685b      	ldr	r3, [r3, #4]
 801d3f8:	deff      	udf	#255	; 0xff
 801d3fa:	685b      	ldr	r3, [r3, #4]
 801d3fc:	deff      	udf	#255	; 0xff
 801d3fe:	2e00      	cmp	r6, #0
 801d400:	d049      	beq.n	801d496 <node_convert_integer+0x1ae>
 801d402:	b144      	cbz	r4, 801d416 <node_convert_integer+0x12e>
 801d404:	6863      	ldr	r3, [r4, #4]
 801d406:	2b00      	cmp	r3, #0
 801d408:	f000 8114 	beq.w	801d634 <node_convert_integer+0x34c>
 801d40c:	8864      	ldrh	r4, [r4, #2]
 801d40e:	b114      	cbz	r4, 801d416 <node_convert_integer+0x12e>
 801d410:	685b      	ldr	r3, [r3, #4]
 801d412:	f993 4000 	ldrsb.w	r4, [r3]
 801d416:	f1bc 0f00 	cmp.w	ip, #0
 801d41a:	f000 80ef 	beq.w	801d5fc <node_convert_integer+0x314>
 801d41e:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801d422:	2d00      	cmp	r5, #0
 801d424:	f000 80fd 	beq.w	801d622 <node_convert_integer+0x33a>
 801d428:	f8bc 3002 	ldrh.w	r3, [ip, #2]
 801d42c:	2b00      	cmp	r3, #0
 801d42e:	f000 80f3 	beq.w	801d618 <node_convert_integer+0x330>
 801d432:	686b      	ldr	r3, [r5, #4]
 801d434:	f993 3000 	ldrsb.w	r3, [r3]
 801d438:	ee07 3a90 	vmov	s15, r3
 801d43c:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801d440:	2a00      	cmp	r2, #0
 801d442:	d0d5      	beq.n	801d3f0 <node_convert_integer+0x108>
 801d444:	440a      	add	r2, r1
 801d446:	eddf 5a84 	vldr	s11, [pc, #528]	; 801d658 <node_convert_integer+0x370>
 801d44a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801d44e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801d452:	f910 3b01 	ldrsb.w	r3, [r0], #1
 801d456:	eeb0 5a47 	vmov.f32	s10, s14
 801d45a:	1b1b      	subs	r3, r3, r4
 801d45c:	ee07 3a90 	vmov	s15, r3
 801d460:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d464:	eea7 5a86 	vfma.f32	s10, s15, s12
 801d468:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 801d46c:	eef0 7a45 	vmov.f32	s15, s10
 801d470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d474:	bfd4      	ite	le
 801d476:	ee75 7a65 	vsuble.f32	s15, s10, s11
 801d47a:	ee77 7aa6 	vaddgt.f32	s15, s15, s13
 801d47e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d482:	ee17 3a90 	vmov	r3, s15
 801d486:	f303 0307 	ssat	r3, #8, r3
 801d48a:	f801 3b01 	strb.w	r3, [r1], #1
 801d48e:	4291      	cmp	r1, r2
 801d490:	d1df      	bne.n	801d452 <node_convert_integer+0x16a>
 801d492:	bcf0      	pop	{r4, r5, r6, r7}
 801d494:	4770      	bx	lr
 801d496:	b144      	cbz	r4, 801d4aa <node_convert_integer+0x1c2>
 801d498:	6865      	ldr	r5, [r4, #4]
 801d49a:	2d00      	cmp	r5, #0
 801d49c:	f000 80c4 	beq.w	801d628 <node_convert_integer+0x340>
 801d4a0:	8864      	ldrh	r4, [r4, #2]
 801d4a2:	b114      	cbz	r4, 801d4aa <node_convert_integer+0x1c2>
 801d4a4:	686c      	ldr	r4, [r5, #4]
 801d4a6:	f994 4000 	ldrsb.w	r4, [r4]
 801d4aa:	f1bc 0f00 	cmp.w	ip, #0
 801d4ae:	d00c      	beq.n	801d4ca <node_convert_integer+0x1e2>
 801d4b0:	f8dc 6004 	ldr.w	r6, [ip, #4]
 801d4b4:	2e00      	cmp	r6, #0
 801d4b6:	f000 80b2 	beq.w	801d61e <node_convert_integer+0x336>
 801d4ba:	f8bc 5002 	ldrh.w	r5, [ip, #2]
 801d4be:	2d00      	cmp	r5, #0
 801d4c0:	f000 80a8 	beq.w	801d614 <node_convert_integer+0x32c>
 801d4c4:	6875      	ldr	r5, [r6, #4]
 801d4c6:	f895 c000 	ldrb.w	ip, [r5]
 801d4ca:	eef4 6a47 	vcmp.f32	s13, s14
 801d4ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d4d2:	d104      	bne.n	801d4de <node_convert_integer+0x1f6>
 801d4d4:	f104 0680 	add.w	r6, r4, #128	; 0x80
 801d4d8:	4566      	cmp	r6, ip
 801d4da:	f000 80fb 	beq.w	801d6d4 <node_convert_integer+0x3ec>
 801d4de:	ee07 ca90 	vmov	s15, ip
 801d4e2:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801d4e6:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801d4ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d4ee:	ee77 7aa5 	vadd.f32	s15, s15, s11
 801d4f2:	2a00      	cmp	r2, #0
 801d4f4:	f43f af7c 	beq.w	801d3f0 <node_convert_integer+0x108>
 801d4f8:	4402      	add	r2, r0
 801d4fa:	f910 3b01 	ldrsb.w	r3, [r0], #1
 801d4fe:	eef0 6a67 	vmov.f32	s13, s15
 801d502:	1b1b      	subs	r3, r3, r4
 801d504:	ee07 3a10 	vmov	s14, r3
 801d508:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d50c:	eee7 6a06 	vfma.f32	s13, s14, s12
 801d510:	eebd 7ae6 	vcvt.s32.f32	s14, s13
 801d514:	ee17 3a10 	vmov	r3, s14
 801d518:	f383 0308 	usat	r3, #8, r3
 801d51c:	4290      	cmp	r0, r2
 801d51e:	f801 3b01 	strb.w	r3, [r1], #1
 801d522:	d1ea      	bne.n	801d4fa <node_convert_integer+0x212>
 801d524:	bcf0      	pop	{r4, r5, r6, r7}
 801d526:	4770      	bx	lr
 801d528:	2c00      	cmp	r4, #0
 801d52a:	d06a      	beq.n	801d602 <node_convert_integer+0x31a>
 801d52c:	6866      	ldr	r6, [r4, #4]
 801d52e:	2e00      	cmp	r6, #0
 801d530:	f000 808e 	beq.w	801d650 <node_convert_integer+0x368>
 801d534:	8865      	ldrh	r5, [r4, #2]
 801d536:	b10d      	cbz	r5, 801d53c <node_convert_integer+0x254>
 801d538:	6875      	ldr	r5, [r6, #4]
 801d53a:	782d      	ldrb	r5, [r5, #0]
 801d53c:	f1bc 0f00 	cmp.w	ip, #0
 801d540:	d063      	beq.n	801d60a <node_convert_integer+0x322>
 801d542:	f8dc 7004 	ldr.w	r7, [ip, #4]
 801d546:	2f00      	cmp	r7, #0
 801d548:	d07a      	beq.n	801d640 <node_convert_integer+0x358>
 801d54a:	f8bc 6002 	ldrh.w	r6, [ip, #2]
 801d54e:	b116      	cbz	r6, 801d556 <node_convert_integer+0x26e>
 801d550:	687e      	ldr	r6, [r7, #4]
 801d552:	f996 6000 	ldrsb.w	r6, [r6]
 801d556:	eef4 6a47 	vcmp.f32	s13, s14
 801d55a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d55e:	d102      	bne.n	801d566 <node_convert_integer+0x27e>
 801d560:	3d80      	subs	r5, #128	; 0x80
 801d562:	42b5      	cmp	r5, r6
 801d564:	d07d      	beq.n	801d662 <node_convert_integer+0x37a>
 801d566:	b13c      	cbz	r4, 801d578 <node_convert_integer+0x290>
 801d568:	6863      	ldr	r3, [r4, #4]
 801d56a:	2b00      	cmp	r3, #0
 801d56c:	f000 80d1 	beq.w	801d712 <node_convert_integer+0x42a>
 801d570:	8864      	ldrh	r4, [r4, #2]
 801d572:	b10c      	cbz	r4, 801d578 <node_convert_integer+0x290>
 801d574:	685b      	ldr	r3, [r3, #4]
 801d576:	781c      	ldrb	r4, [r3, #0]
 801d578:	f1bc 0f00 	cmp.w	ip, #0
 801d57c:	d047      	beq.n	801d60e <node_convert_integer+0x326>
 801d57e:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801d582:	2d00      	cmp	r5, #0
 801d584:	f000 80c2 	beq.w	801d70c <node_convert_integer+0x424>
 801d588:	f8bc 3002 	ldrh.w	r3, [ip, #2]
 801d58c:	2b00      	cmp	r3, #0
 801d58e:	d065      	beq.n	801d65c <node_convert_integer+0x374>
 801d590:	686b      	ldr	r3, [r5, #4]
 801d592:	f993 3000 	ldrsb.w	r3, [r3]
 801d596:	ee07 3a90 	vmov	s15, r3
 801d59a:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801d59e:	2a00      	cmp	r2, #0
 801d5a0:	f43f af26 	beq.w	801d3f0 <node_convert_integer+0x108>
 801d5a4:	440a      	add	r2, r1
 801d5a6:	eddf 5a2c 	vldr	s11, [pc, #176]	; 801d658 <node_convert_integer+0x370>
 801d5aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801d5ae:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801d5b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 801d5b6:	eeb0 5a47 	vmov.f32	s10, s14
 801d5ba:	1b1b      	subs	r3, r3, r4
 801d5bc:	ee07 3a90 	vmov	s15, r3
 801d5c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d5c4:	eea7 5a86 	vfma.f32	s10, s15, s12
 801d5c8:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 801d5cc:	eef0 7a45 	vmov.f32	s15, s10
 801d5d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d5d4:	bfd4      	ite	le
 801d5d6:	ee75 7a65 	vsuble.f32	s15, s10, s11
 801d5da:	ee77 7aa6 	vaddgt.f32	s15, s15, s13
 801d5de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d5e2:	ee17 3a90 	vmov	r3, s15
 801d5e6:	f303 0307 	ssat	r3, #8, r3
 801d5ea:	f801 3b01 	strb.w	r3, [r1], #1
 801d5ee:	4291      	cmp	r1, r2
 801d5f0:	d1df      	bne.n	801d5b2 <node_convert_integer+0x2ca>
 801d5f2:	bcf0      	pop	{r4, r5, r6, r7}
 801d5f4:	4770      	bx	lr
 801d5f6:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801d5fa:	e6e0      	b.n	801d3be <node_convert_integer+0xd6>
 801d5fc:	ee07 ca90 	vmov	s15, ip
 801d600:	e71c      	b.n	801d43c <node_convert_integer+0x154>
 801d602:	4625      	mov	r5, r4
 801d604:	e79a      	b.n	801d53c <node_convert_integer+0x254>
 801d606:	2201      	movs	r2, #1
 801d608:	e68c      	b.n	801d324 <node_convert_integer+0x3c>
 801d60a:	4666      	mov	r6, ip
 801d60c:	e7a3      	b.n	801d556 <node_convert_integer+0x26e>
 801d60e:	ee07 ca90 	vmov	s15, ip
 801d612:	e7c2      	b.n	801d59a <node_convert_integer+0x2b2>
 801d614:	46ac      	mov	ip, r5
 801d616:	e758      	b.n	801d4ca <node_convert_integer+0x1e2>
 801d618:	ee07 3a90 	vmov	s15, r3
 801d61c:	e70e      	b.n	801d43c <node_convert_integer+0x154>
 801d61e:	46b4      	mov	ip, r6
 801d620:	e753      	b.n	801d4ca <node_convert_integer+0x1e2>
 801d622:	ee07 5a90 	vmov	s15, r5
 801d626:	e709      	b.n	801d43c <node_convert_integer+0x154>
 801d628:	462c      	mov	r4, r5
 801d62a:	f1bc 0f00 	cmp.w	ip, #0
 801d62e:	f47f af3f 	bne.w	801d4b0 <node_convert_integer+0x1c8>
 801d632:	e74a      	b.n	801d4ca <node_convert_integer+0x1e2>
 801d634:	461c      	mov	r4, r3
 801d636:	f1bc 0f00 	cmp.w	ip, #0
 801d63a:	f47f aef0 	bne.w	801d41e <node_convert_integer+0x136>
 801d63e:	e7dd      	b.n	801d5fc <node_convert_integer+0x314>
 801d640:	463e      	mov	r6, r7
 801d642:	e788      	b.n	801d556 <node_convert_integer+0x26e>
 801d644:	461c      	mov	r4, r3
 801d646:	f1bc 0f00 	cmp.w	ip, #0
 801d64a:	f47f aea4 	bne.w	801d396 <node_convert_integer+0xae>
 801d64e:	e7d2      	b.n	801d5f6 <node_convert_integer+0x30e>
 801d650:	4635      	mov	r5, r6
 801d652:	e773      	b.n	801d53c <node_convert_integer+0x254>
 801d654:	00000000 	.word	0x00000000
 801d658:	3efffffc 	.word	0x3efffffc
 801d65c:	ee07 3a90 	vmov	s15, r3
 801d660:	e79b      	b.n	801d59a <node_convert_integer+0x2b2>
 801d662:	2b00      	cmp	r3, #0
 801d664:	d057      	beq.n	801d716 <node_convert_integer+0x42e>
 801d666:	009b      	lsls	r3, r3, #2
 801d668:	460f      	mov	r7, r1
 801d66a:	f04f 1680 	mov.w	r6, #8388736	; 0x800080
 801d66e:	eb00 0c03 	add.w	ip, r0, r3
 801d672:	f850 4b04 	ldr.w	r4, [r0], #4
 801d676:	ea4f 2534 	mov.w	r5, r4, ror #8
 801d67a:	fa3f f585 	uxtb16	r5, r5
 801d67e:	fad5 f506 	ssub16	r5, r5, r6
 801d682:	fa3f f484 	uxtb16	r4, r4
 801d686:	fad4 f406 	ssub16	r4, r4, r6
 801d68a:	022d      	lsls	r5, r5, #8
 801d68c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801d690:	4560      	cmp	r0, ip
 801d692:	f005 25ff 	and.w	r5, r5, #4278255360	; 0xff00ff00
 801d696:	ea44 0405 	orr.w	r4, r4, r5
 801d69a:	f847 4b04 	str.w	r4, [r7], #4
 801d69e:	d1e8      	bne.n	801d672 <node_convert_integer+0x38a>
 801d6a0:	4419      	add	r1, r3
 801d6a2:	f012 0203 	ands.w	r2, r2, #3
 801d6a6:	f43f aea3 	beq.w	801d3f0 <node_convert_integer+0x108>
 801d6aa:	f89c 3000 	ldrb.w	r3, [ip]
 801d6ae:	2a01      	cmp	r2, #1
 801d6b0:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 801d6b4:	700b      	strb	r3, [r1, #0]
 801d6b6:	f43f ae9b 	beq.w	801d3f0 <node_convert_integer+0x108>
 801d6ba:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801d6be:	2a03      	cmp	r2, #3
 801d6c0:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 801d6c4:	704b      	strb	r3, [r1, #1]
 801d6c6:	f47f ae93 	bne.w	801d3f0 <node_convert_integer+0x108>
 801d6ca:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801d6ce:	3b80      	subs	r3, #128	; 0x80
 801d6d0:	708b      	strb	r3, [r1, #2]
 801d6d2:	e68d      	b.n	801d3f0 <node_convert_integer+0x108>
 801d6d4:	b1fb      	cbz	r3, 801d716 <node_convert_integer+0x42e>
 801d6d6:	009b      	lsls	r3, r3, #2
 801d6d8:	460f      	mov	r7, r1
 801d6da:	f04f 1680 	mov.w	r6, #8388736	; 0x800080
 801d6de:	eb00 0c03 	add.w	ip, r0, r3
 801d6e2:	f850 4b04 	ldr.w	r4, [r0], #4
 801d6e6:	ea4f 2534 	mov.w	r5, r4, ror #8
 801d6ea:	fa2f f585 	sxtb16	r5, r5
 801d6ee:	fa95 f506 	sadd16	r5, r5, r6
 801d6f2:	fa2f f484 	sxtb16	r4, r4
 801d6f6:	fa94 f406 	sadd16	r4, r4, r6
 801d6fa:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801d6fe:	4560      	cmp	r0, ip
 801d700:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 801d704:	f847 4b04 	str.w	r4, [r7], #4
 801d708:	d1eb      	bne.n	801d6e2 <node_convert_integer+0x3fa>
 801d70a:	e7c9      	b.n	801d6a0 <node_convert_integer+0x3b8>
 801d70c:	ee07 5a90 	vmov	s15, r5
 801d710:	e743      	b.n	801d59a <node_convert_integer+0x2b2>
 801d712:	461c      	mov	r4, r3
 801d714:	e730      	b.n	801d578 <node_convert_integer+0x290>
 801d716:	4684      	mov	ip, r0
 801d718:	e7c3      	b.n	801d6a2 <node_convert_integer+0x3ba>
 801d71a:	bf00      	nop

0801d71c <core_init>:
 801d71c:	2001      	movs	r0, #1
 801d71e:	4770      	bx	lr

0801d720 <core_set_error>:
 801d720:	4603      	mov	r3, r0
 801d722:	7800      	ldrb	r0, [r0, #0]
 801d724:	b930      	cbnz	r0, 801d734 <core_set_error+0x14>
 801d726:	7019      	strb	r1, [r3, #0]
 801d728:	2001      	movs	r0, #1
 801d72a:	6819      	ldr	r1, [r3, #0]
 801d72c:	f362 211f 	bfi	r1, r2, #8, #24
 801d730:	6019      	str	r1, [r3, #0]
 801d732:	4770      	bx	lr
 801d734:	2000      	movs	r0, #0
 801d736:	4770      	bx	lr

0801d738 <ai_sum_f32>:
 801d738:	edd1 7a00 	vldr	s15, [r1]
 801d73c:	ed92 7a00 	vldr	s14, [r2]
 801d740:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d744:	edc0 7a00 	vstr	s15, [r0]
 801d748:	4770      	bx	lr
 801d74a:	bf00      	nop

0801d74c <ai_sum_buffer_INT8>:
 801d74c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d750:	b085      	sub	sp, #20
 801d752:	461e      	mov	r6, r3
 801d754:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801d756:	08b6      	lsrs	r6, r6, #2
 801d758:	9300      	str	r3, [sp, #0]
 801d75a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d75c:	f994 e000 	ldrsb.w	lr, [r4]
 801d760:	f993 9000 	ldrsb.w	r9, [r3]
 801d764:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801d766:	fa1f f78e 	uxth.w	r7, lr
 801d76a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801d76c:	fa1f fc89 	uxth.w	ip, r9
 801d770:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801d772:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
 801d776:	edd5 7a00 	vldr	s15, [r5]
 801d77a:	ea4c 4c09 	orr.w	ip, ip, r9, lsl #16
 801d77e:	ed94 7a00 	vldr	s14, [r4]
 801d782:	f993 5000 	ldrsb.w	r5, [r3]
 801d786:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801d788:	ee87 6a27 	vdiv.f32	s12, s14, s15
 801d78c:	ee06 5a90 	vmov	s13, r5
 801d790:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d792:	ed94 5a00 	vldr	s10, [r4]
 801d796:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801d79a:	eec5 5a27 	vdiv.f32	s11, s10, s15
 801d79e:	bb23      	cbnz	r3, 801d7ea <ai_sum_buffer_INT8+0x9e>
 801d7a0:	eeb4 7a67 	vcmp.f32	s14, s15
 801d7a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d7a8:	f040 8126 	bne.w	801d9f8 <ai_sum_buffer_INT8+0x2ac>
 801d7ac:	45ae      	cmp	lr, r5
 801d7ae:	f040 8123 	bne.w	801d9f8 <ai_sum_buffer_INT8+0x2ac>
 801d7b2:	eeb4 5a67 	vcmp.f32	s10, s15
 801d7b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d7ba:	f040 811d 	bne.w	801d9f8 <ai_sum_buffer_INT8+0x2ac>
 801d7be:	45a9      	cmp	r9, r5
 801d7c0:	f040 811a 	bne.w	801d9f8 <ai_sum_buffer_INT8+0x2ac>
 801d7c4:	9b00      	ldr	r3, [sp, #0]
 801d7c6:	b16b      	cbz	r3, 801d7e4 <ai_sum_buffer_INT8+0x98>
 801d7c8:	440b      	add	r3, r1
 801d7ca:	461e      	mov	r6, r3
 801d7cc:	f911 3b01 	ldrsb.w	r3, [r1], #1
 801d7d0:	f912 4b01 	ldrsb.w	r4, [r2], #1
 801d7d4:	4423      	add	r3, r4
 801d7d6:	1b5b      	subs	r3, r3, r5
 801d7d8:	f303 0307 	ssat	r3, #8, r3
 801d7dc:	42b1      	cmp	r1, r6
 801d7de:	f800 3b01 	strb.w	r3, [r0], #1
 801d7e2:	d1f3      	bne.n	801d7cc <ai_sum_buffer_INT8+0x80>
 801d7e4:	b005      	add	sp, #20
 801d7e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d7ea:	2b01      	cmp	r3, #1
 801d7ec:	f000 8240 	beq.w	801dc70 <ai_sum_buffer_INT8+0x524>
 801d7f0:	f992 3000 	ldrsb.w	r3, [r2]
 801d7f4:	eba3 0909 	sub.w	r9, r3, r9
 801d7f8:	ee07 9a90 	vmov	s15, r9
 801d7fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d800:	eee7 6aa5 	vfma.f32	s13, s15, s11
 801d804:	2e00      	cmp	r6, #0
 801d806:	f000 8328 	beq.w	801de5a <ai_sum_buffer_INT8+0x70e>
 801d80a:	ea4f 0c86 	mov.w	ip, r6, lsl #2
 801d80e:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 801d812:	4606      	mov	r6, r0
 801d814:	eddf 5a77 	vldr	s11, [pc, #476]	; 801d9f4 <ai_sum_buffer_INT8+0x2a8>
 801d818:	eb01 080c 	add.w	r8, r1, ip
 801d81c:	f851 3b04 	ldr.w	r3, [r1], #4
 801d820:	fa2f f283 	sxtb16	r2, r3
 801d824:	ea4f 2333 	mov.w	r3, r3, ror #8
 801d828:	fa2f f383 	sxtb16	r3, r3
 801d82c:	fad3 f407 	ssub16	r4, r3, r7
 801d830:	fad2 f207 	ssub16	r2, r2, r7
 801d834:	b213      	sxth	r3, r2
 801d836:	eeb0 7a66 	vmov.f32	s14, s13
 801d83a:	ee07 3a90 	vmov	s15, r3
 801d83e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d842:	eea7 7a86 	vfma.f32	s14, s15, s12
 801d846:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801d84a:	eef0 7a47 	vmov.f32	s15, s14
 801d84e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d852:	fe35 7a25 	vselgt.f32	s14, s10, s11
 801d856:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d85a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d85e:	ee17 9a90 	vmov	r9, s15
 801d862:	f309 0907 	ssat	r9, #8, r9
 801d866:	1412      	asrs	r2, r2, #16
 801d868:	eeb0 7a66 	vmov.f32	s14, s13
 801d86c:	fa4f f989 	sxtb.w	r9, r9
 801d870:	ee07 2a90 	vmov	s15, r2
 801d874:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d878:	eea7 7a86 	vfma.f32	s14, s15, s12
 801d87c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801d880:	eef0 7a47 	vmov.f32	s15, s14
 801d884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d888:	fe35 7a25 	vselgt.f32	s14, s10, s11
 801d88c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d890:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d894:	ee17 3a90 	vmov	r3, s15
 801d898:	f303 0307 	ssat	r3, #8, r3
 801d89c:	b222      	sxth	r2, r4
 801d89e:	eeb0 7a66 	vmov.f32	s14, s13
 801d8a2:	ee07 2a90 	vmov	s15, r2
 801d8a6:	b25a      	sxtb	r2, r3
 801d8a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d8ac:	eea7 7a86 	vfma.f32	s14, s15, s12
 801d8b0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801d8b4:	eef0 7a47 	vmov.f32	s15, s14
 801d8b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d8bc:	fe35 7a25 	vselgt.f32	s14, s10, s11
 801d8c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d8c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d8c8:	ee17 5a90 	vmov	r5, s15
 801d8cc:	f305 0507 	ssat	r5, #8, r5
 801d8d0:	1423      	asrs	r3, r4, #16
 801d8d2:	eeb0 7a66 	vmov.f32	s14, s13
 801d8d6:	b26d      	sxtb	r5, r5
 801d8d8:	ee07 3a90 	vmov	s15, r3
 801d8dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d8e0:	eea7 7a86 	vfma.f32	s14, s15, s12
 801d8e4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801d8e8:	eef0 7a47 	vmov.f32	s15, s14
 801d8ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d8f0:	fe35 7a25 	vselgt.f32	s14, s10, s11
 801d8f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d8f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d8fc:	ee17 3a90 	vmov	r3, s15
 801d900:	f303 0407 	ssat	r4, #8, r3
 801d904:	0413      	lsls	r3, r2, #16
 801d906:	4541      	cmp	r1, r8
 801d908:	fa5f f989 	uxtb.w	r9, r9
 801d90c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801d910:	ea4f 2205 	mov.w	r2, r5, lsl #8
 801d914:	ea43 0309 	orr.w	r3, r3, r9
 801d918:	b292      	uxth	r2, r2
 801d91a:	ea43 0302 	orr.w	r3, r3, r2
 801d91e:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 801d922:	f846 3b04 	str.w	r3, [r6], #4
 801d926:	f47f af79 	bne.w	801d81c <ai_sum_buffer_INT8+0xd0>
 801d92a:	4460      	add	r0, ip
 801d92c:	9b00      	ldr	r3, [sp, #0]
 801d92e:	f013 0303 	ands.w	r3, r3, #3
 801d932:	f43f af57 	beq.w	801d7e4 <ai_sum_buffer_INT8+0x98>
 801d936:	f998 2000 	ldrsb.w	r2, [r8]
 801d93a:	eeb0 5a66 	vmov.f32	s10, s13
 801d93e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801d942:	eddf 5a2c 	vldr	s11, [pc, #176]	; 801d9f4 <ai_sum_buffer_INT8+0x2a8>
 801d946:	eba2 020e 	sub.w	r2, r2, lr
 801d94a:	ee07 2a90 	vmov	s15, r2
 801d94e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d952:	eea7 5a86 	vfma.f32	s10, s15, s12
 801d956:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 801d95a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d95e:	fe77 7a25 	vselgt.f32	s15, s14, s11
 801d962:	ee77 7a85 	vadd.f32	s15, s15, s10
 801d966:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d96a:	ee17 2a90 	vmov	r2, s15
 801d96e:	f302 0207 	ssat	r2, #8, r2
 801d972:	2b01      	cmp	r3, #1
 801d974:	7002      	strb	r2, [r0, #0]
 801d976:	f43f af35 	beq.w	801d7e4 <ai_sum_buffer_INT8+0x98>
 801d97a:	f998 2001 	ldrsb.w	r2, [r8, #1]
 801d97e:	eeb0 5a66 	vmov.f32	s10, s13
 801d982:	eba2 020e 	sub.w	r2, r2, lr
 801d986:	ee07 2a90 	vmov	s15, r2
 801d98a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d98e:	eea6 5a27 	vfma.f32	s10, s12, s15
 801d992:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 801d996:	eef0 7a45 	vmov.f32	s15, s10
 801d99a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d99e:	fe37 5a25 	vselgt.f32	s10, s14, s11
 801d9a2:	ee77 7a85 	vadd.f32	s15, s15, s10
 801d9a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d9aa:	ee17 2a90 	vmov	r2, s15
 801d9ae:	f302 0207 	ssat	r2, #8, r2
 801d9b2:	2b02      	cmp	r3, #2
 801d9b4:	7042      	strb	r2, [r0, #1]
 801d9b6:	f43f af15 	beq.w	801d7e4 <ai_sum_buffer_INT8+0x98>
 801d9ba:	f998 3002 	ldrsb.w	r3, [r8, #2]
 801d9be:	eba3 0e0e 	sub.w	lr, r3, lr
 801d9c2:	ee07 ea90 	vmov	s15, lr
 801d9c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d9ca:	eee7 6a86 	vfma.f32	s13, s15, s12
 801d9ce:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801d9d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d9d6:	fe37 7a25 	vselgt.f32	s14, s14, s11
 801d9da:	ee77 6a26 	vadd.f32	s13, s14, s13
 801d9de:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 801d9e2:	ee16 3a90 	vmov	r3, s13
 801d9e6:	f303 0307 	ssat	r3, #8, r3
 801d9ea:	7083      	strb	r3, [r0, #2]
 801d9ec:	b005      	add	sp, #20
 801d9ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d9f2:	bf00      	nop
 801d9f4:	befffffc 	.word	0xbefffffc
 801d9f8:	2e00      	cmp	r6, #0
 801d9fa:	f000 822c 	beq.w	801de56 <ai_sum_buffer_INT8+0x70a>
 801d9fe:	00b3      	lsls	r3, r6, #2
 801da00:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 801da04:	4690      	mov	r8, r2
 801da06:	9203      	str	r2, [sp, #12]
 801da08:	9302      	str	r3, [sp, #8]
 801da0a:	18cb      	adds	r3, r1, r3
 801da0c:	4682      	mov	sl, r0
 801da0e:	ed1f 5a07 	vldr	s10, [pc, #-28]	; 801d9f4 <ai_sum_buffer_INT8+0x2a8>
 801da12:	461a      	mov	r2, r3
 801da14:	9301      	str	r3, [sp, #4]
 801da16:	f851 3b04 	ldr.w	r3, [r1], #4
 801da1a:	f858 4b04 	ldr.w	r4, [r8], #4
 801da1e:	ea4f 2633 	mov.w	r6, r3, ror #8
 801da22:	ea4f 2b34 	mov.w	fp, r4, ror #8
 801da26:	fa2f f383 	sxtb16	r3, r3
 801da2a:	fa2f f686 	sxtb16	r6, r6
 801da2e:	fa2f f484 	sxtb16	r4, r4
 801da32:	fa2f fb8b 	sxtb16	fp, fp
 801da36:	fad6 f607 	ssub16	r6, r6, r7
 801da3a:	fad3 f307 	ssub16	r3, r3, r7
 801da3e:	fadb fb0c 	ssub16	fp, fp, ip
 801da42:	fad4 f40c 	ssub16	r4, r4, ip
 801da46:	b225      	sxth	r5, r4
 801da48:	ee07 5a90 	vmov	s15, r5
 801da4c:	b21d      	sxth	r5, r3
 801da4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801da52:	ee07 5a10 	vmov	s14, r5
 801da56:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801da5a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801da5e:	eee7 7a06 	vfma.f32	s15, s14, s12
 801da62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801da66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801da6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801da6e:	fe34 7a85 	vselgt.f32	s14, s9, s10
 801da72:	ee77 7a27 	vadd.f32	s15, s14, s15
 801da76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801da7a:	ee17 5a90 	vmov	r5, s15
 801da7e:	f305 0507 	ssat	r5, #8, r5
 801da82:	1424      	asrs	r4, r4, #16
 801da84:	141b      	asrs	r3, r3, #16
 801da86:	ee07 4a90 	vmov	s15, r4
 801da8a:	b26d      	sxtb	r5, r5
 801da8c:	ee07 3a10 	vmov	s14, r3
 801da90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801da94:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801da98:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801da9c:	eee7 7a06 	vfma.f32	s15, s14, s12
 801daa0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801daa4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801daa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801daac:	fe34 7a85 	vselgt.f32	s14, s9, s10
 801dab0:	ee77 7a27 	vadd.f32	s15, s14, s15
 801dab4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801dab8:	ee17 3a90 	vmov	r3, s15
 801dabc:	f303 0307 	ssat	r3, #8, r3
 801dac0:	fa0f f48b 	sxth.w	r4, fp
 801dac4:	b25b      	sxtb	r3, r3
 801dac6:	ee07 4a90 	vmov	s15, r4
 801daca:	b234      	sxth	r4, r6
 801dacc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801dad0:	ee07 4a10 	vmov	s14, r4
 801dad4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dad8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801dadc:	eee7 7a06 	vfma.f32	s15, s14, s12
 801dae0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801dae4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801dae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801daec:	fe34 7a85 	vselgt.f32	s14, s9, s10
 801daf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 801daf4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801daf8:	ee17 4a90 	vmov	r4, s15
 801dafc:	f304 0407 	ssat	r4, #8, r4
 801db00:	ea4f 4b2b 	mov.w	fp, fp, asr #16
 801db04:	1436      	asrs	r6, r6, #16
 801db06:	ee07 ba90 	vmov	s15, fp
 801db0a:	b264      	sxtb	r4, r4
 801db0c:	ee07 6a10 	vmov	s14, r6
 801db10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801db14:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801db18:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801db1c:	eee7 7a06 	vfma.f32	s15, s14, s12
 801db20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801db24:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801db28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801db2c:	fe34 7a85 	vselgt.f32	s14, s9, s10
 801db30:	ee77 7a27 	vadd.f32	s15, s14, s15
 801db34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801db38:	ee17 6a90 	vmov	r6, s15
 801db3c:	f306 0607 	ssat	r6, #8, r6
 801db40:	041b      	lsls	r3, r3, #16
 801db42:	4291      	cmp	r1, r2
 801db44:	b2ed      	uxtb	r5, r5
 801db46:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801db4a:	ea4f 2404 	mov.w	r4, r4, lsl #8
 801db4e:	ea45 0503 	orr.w	r5, r5, r3
 801db52:	b2a4      	uxth	r4, r4
 801db54:	ea45 0504 	orr.w	r5, r5, r4
 801db58:	ea45 6506 	orr.w	r5, r5, r6, lsl #24
 801db5c:	f84a 5b04 	str.w	r5, [sl], #4
 801db60:	f47f af59 	bne.w	801da16 <ai_sum_buffer_INT8+0x2ca>
 801db64:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801db68:	441a      	add	r2, r3
 801db6a:	4418      	add	r0, r3
 801db6c:	9b00      	ldr	r3, [sp, #0]
 801db6e:	f013 0303 	ands.w	r3, r3, #3
 801db72:	f43f ae37 	beq.w	801d7e4 <ai_sum_buffer_INT8+0x98>
 801db76:	f992 1000 	ldrsb.w	r1, [r2]
 801db7a:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 801db7e:	9d01      	ldr	r5, [sp, #4]
 801db80:	eba1 0109 	sub.w	r1, r1, r9
 801db84:	ed5f 4a65 	vldr	s9, [pc, #-404]	; 801d9f4 <ai_sum_buffer_INT8+0x2a8>
 801db88:	ee07 1a90 	vmov	s15, r1
 801db8c:	f995 1000 	ldrsb.w	r1, [r5]
 801db90:	eba1 010e 	sub.w	r1, r1, lr
 801db94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801db98:	ee07 1a10 	vmov	s14, r1
 801db9c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801dba0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dba4:	eee6 7a07 	vfma.f32	s15, s12, s14
 801dba8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801dbac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801dbb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dbb4:	fe35 7a24 	vselgt.f32	s14, s10, s9
 801dbb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 801dbbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801dbc0:	ee17 1a90 	vmov	r1, s15
 801dbc4:	f301 0107 	ssat	r1, #8, r1
 801dbc8:	2b01      	cmp	r3, #1
 801dbca:	7001      	strb	r1, [r0, #0]
 801dbcc:	f43f ae0a 	beq.w	801d7e4 <ai_sum_buffer_INT8+0x98>
 801dbd0:	f992 1001 	ldrsb.w	r1, [r2, #1]
 801dbd4:	f995 4001 	ldrsb.w	r4, [r5, #1]
 801dbd8:	eba1 0109 	sub.w	r1, r1, r9
 801dbdc:	eba4 040e 	sub.w	r4, r4, lr
 801dbe0:	ee07 1a90 	vmov	s15, r1
 801dbe4:	ee07 4a10 	vmov	s14, r4
 801dbe8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801dbec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dbf0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801dbf4:	eee6 7a07 	vfma.f32	s15, s12, s14
 801dbf8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801dbfc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801dc00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dc04:	fe35 7a24 	vselgt.f32	s14, s10, s9
 801dc08:	ee77 7a27 	vadd.f32	s15, s14, s15
 801dc0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801dc10:	ee17 1a90 	vmov	r1, s15
 801dc14:	f301 0107 	ssat	r1, #8, r1
 801dc18:	2b02      	cmp	r3, #2
 801dc1a:	7041      	strb	r1, [r0, #1]
 801dc1c:	f43f ade2 	beq.w	801d7e4 <ai_sum_buffer_INT8+0x98>
 801dc20:	f992 3002 	ldrsb.w	r3, [r2, #2]
 801dc24:	f995 2002 	ldrsb.w	r2, [r5, #2]
 801dc28:	eba3 0909 	sub.w	r9, r3, r9
 801dc2c:	eba2 0e0e 	sub.w	lr, r2, lr
 801dc30:	ee07 9a90 	vmov	s15, r9
 801dc34:	ee07 ea10 	vmov	s14, lr
 801dc38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801dc3c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dc40:	ee67 5aa5 	vmul.f32	s11, s15, s11
 801dc44:	eee7 5a06 	vfma.f32	s11, s14, s12
 801dc48:	ee75 6aa6 	vadd.f32	s13, s11, s13
 801dc4c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801dc50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dc54:	fe35 5a24 	vselgt.f32	s10, s10, s9
 801dc58:	ee75 6a26 	vadd.f32	s13, s10, s13
 801dc5c:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 801dc60:	ee16 3a90 	vmov	r3, s13
 801dc64:	f303 0307 	ssat	r3, #8, r3
 801dc68:	7083      	strb	r3, [r0, #2]
 801dc6a:	b005      	add	sp, #20
 801dc6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc70:	f991 3000 	ldrsb.w	r3, [r1]
 801dc74:	eba3 0e0e 	sub.w	lr, r3, lr
 801dc78:	ee07 ea90 	vmov	s15, lr
 801dc7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801dc80:	eee7 6a86 	vfma.f32	s13, s15, s12
 801dc84:	2e00      	cmp	r6, #0
 801dc86:	f000 80ea 	beq.w	801de5e <ai_sum_buffer_INT8+0x712>
 801dc8a:	00b6      	lsls	r6, r6, #2
 801dc8c:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 801dc90:	4607      	mov	r7, r0
 801dc92:	ed1f 6aa8 	vldr	s12, [pc, #-672]	; 801d9f4 <ai_sum_buffer_INT8+0x2a8>
 801dc96:	eb02 0e06 	add.w	lr, r2, r6
 801dc9a:	f852 3b04 	ldr.w	r3, [r2], #4
 801dc9e:	fa2f f183 	sxtb16	r1, r3
 801dca2:	ea4f 2333 	mov.w	r3, r3, ror #8
 801dca6:	fa2f f383 	sxtb16	r3, r3
 801dcaa:	fad3 f40c 	ssub16	r4, r3, ip
 801dcae:	fad1 f10c 	ssub16	r1, r1, ip
 801dcb2:	b20b      	sxth	r3, r1
 801dcb4:	eeb0 7a66 	vmov.f32	s14, s13
 801dcb8:	ee07 3a90 	vmov	s15, r3
 801dcbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801dcc0:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801dcc4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801dcc8:	eef0 7a47 	vmov.f32	s15, s14
 801dccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dcd0:	fe35 7a06 	vselgt.f32	s14, s10, s12
 801dcd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 801dcd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801dcdc:	ee17 8a90 	vmov	r8, s15
 801dce0:	f308 0807 	ssat	r8, #8, r8
 801dce4:	1409      	asrs	r1, r1, #16
 801dce6:	eeb0 7a66 	vmov.f32	s14, s13
 801dcea:	fa4f f888 	sxtb.w	r8, r8
 801dcee:	ee07 1a90 	vmov	s15, r1
 801dcf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801dcf6:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801dcfa:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801dcfe:	eef0 7a47 	vmov.f32	s15, s14
 801dd02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd06:	fe35 7a06 	vselgt.f32	s14, s10, s12
 801dd0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801dd0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801dd12:	ee17 3a90 	vmov	r3, s15
 801dd16:	f303 0307 	ssat	r3, #8, r3
 801dd1a:	b221      	sxth	r1, r4
 801dd1c:	eeb0 7a66 	vmov.f32	s14, s13
 801dd20:	ee07 1a90 	vmov	s15, r1
 801dd24:	b259      	sxtb	r1, r3
 801dd26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801dd2a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801dd2e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801dd32:	eef0 7a47 	vmov.f32	s15, s14
 801dd36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd3a:	fe35 7a06 	vselgt.f32	s14, s10, s12
 801dd3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 801dd42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801dd46:	ee17 5a90 	vmov	r5, s15
 801dd4a:	f305 0507 	ssat	r5, #8, r5
 801dd4e:	1423      	asrs	r3, r4, #16
 801dd50:	eeb0 7a66 	vmov.f32	s14, s13
 801dd54:	b26d      	sxtb	r5, r5
 801dd56:	ee07 3a90 	vmov	s15, r3
 801dd5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801dd5e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801dd62:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801dd66:	eef0 7a47 	vmov.f32	s15, s14
 801dd6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd6e:	fe35 7a06 	vselgt.f32	s14, s10, s12
 801dd72:	ee77 7a27 	vadd.f32	s15, s14, s15
 801dd76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801dd7a:	ee17 3a90 	vmov	r3, s15
 801dd7e:	f303 0407 	ssat	r4, #8, r3
 801dd82:	040b      	lsls	r3, r1, #16
 801dd84:	4572      	cmp	r2, lr
 801dd86:	fa5f f888 	uxtb.w	r8, r8
 801dd8a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801dd8e:	ea4f 2105 	mov.w	r1, r5, lsl #8
 801dd92:	ea43 0308 	orr.w	r3, r3, r8
 801dd96:	b289      	uxth	r1, r1
 801dd98:	ea43 0301 	orr.w	r3, r3, r1
 801dd9c:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 801dda0:	f847 3b04 	str.w	r3, [r7], #4
 801dda4:	f47f af79 	bne.w	801dc9a <ai_sum_buffer_INT8+0x54e>
 801dda8:	4430      	add	r0, r6
 801ddaa:	9b00      	ldr	r3, [sp, #0]
 801ddac:	f013 0303 	ands.w	r3, r3, #3
 801ddb0:	f43f ad18 	beq.w	801d7e4 <ai_sum_buffer_INT8+0x98>
 801ddb4:	f99e 2000 	ldrsb.w	r2, [lr]
 801ddb8:	eeb0 5a66 	vmov.f32	s10, s13
 801ddbc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801ddc0:	ed9f 6a28 	vldr	s12, [pc, #160]	; 801de64 <ai_sum_buffer_INT8+0x718>
 801ddc4:	eba2 0209 	sub.w	r2, r2, r9
 801ddc8:	ee07 2a90 	vmov	s15, r2
 801ddcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ddd0:	eea5 5aa7 	vfma.f32	s10, s11, s15
 801ddd4:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 801ddd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dddc:	fe77 7a06 	vselgt.f32	s15, s14, s12
 801dde0:	ee77 7a85 	vadd.f32	s15, s15, s10
 801dde4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801dde8:	ee17 2a90 	vmov	r2, s15
 801ddec:	f302 0207 	ssat	r2, #8, r2
 801ddf0:	2b01      	cmp	r3, #1
 801ddf2:	7002      	strb	r2, [r0, #0]
 801ddf4:	f43f acf6 	beq.w	801d7e4 <ai_sum_buffer_INT8+0x98>
 801ddf8:	f99e 2001 	ldrsb.w	r2, [lr, #1]
 801ddfc:	eeb0 5a66 	vmov.f32	s10, s13
 801de00:	eba2 0209 	sub.w	r2, r2, r9
 801de04:	ee07 2a90 	vmov	s15, r2
 801de08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801de0c:	eea7 5aa5 	vfma.f32	s10, s15, s11
 801de10:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 801de14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801de18:	fe77 7a06 	vselgt.f32	s15, s14, s12
 801de1c:	ee77 7a85 	vadd.f32	s15, s15, s10
 801de20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801de24:	ee17 2a90 	vmov	r2, s15
 801de28:	f302 0207 	ssat	r2, #8, r2
 801de2c:	2b02      	cmp	r3, #2
 801de2e:	7042      	strb	r2, [r0, #1]
 801de30:	f43f acd8 	beq.w	801d7e4 <ai_sum_buffer_INT8+0x98>
 801de34:	f99e 3002 	ldrsb.w	r3, [lr, #2]
 801de38:	eba3 0909 	sub.w	r9, r3, r9
 801de3c:	ee07 9a90 	vmov	s15, r9
 801de40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801de44:	eee7 6aa5 	vfma.f32	s13, s15, s11
 801de48:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801de4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801de50:	fe37 7a06 	vselgt.f32	s14, s14, s12
 801de54:	e5c1      	b.n	801d9da <ai_sum_buffer_INT8+0x28e>
 801de56:	9101      	str	r1, [sp, #4]
 801de58:	e688      	b.n	801db6c <ai_sum_buffer_INT8+0x420>
 801de5a:	4688      	mov	r8, r1
 801de5c:	e566      	b.n	801d92c <ai_sum_buffer_INT8+0x1e0>
 801de5e:	4696      	mov	lr, r2
 801de60:	e7a3      	b.n	801ddaa <ai_sum_buffer_INT8+0x65e>
 801de62:	bf00      	nop
 801de64:	befffffc 	.word	0xbefffffc

0801de68 <func_dummy>:
 801de68:	4770      	bx	lr
 801de6a:	bf00      	nop

0801de6c <forward_conv2d_integer_SSSA_ch>:
 801de6c:	6983      	ldr	r3, [r0, #24]
 801de6e:	8819      	ldrh	r1, [r3, #0]
 801de70:	2900      	cmp	r1, #0
 801de72:	f000 8163 	beq.w	801e13c <forward_conv2d_integer_SSSA_ch+0x2d0>
 801de76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de7a:	685a      	ldr	r2, [r3, #4]
 801de7c:	b0ad      	sub	sp, #180	; 0xb4
 801de7e:	6853      	ldr	r3, [r2, #4]
 801de80:	2b00      	cmp	r3, #0
 801de82:	f000 8296 	beq.w	801e3b2 <forward_conv2d_integer_SSSA_ch+0x546>
 801de86:	f8d3 e000 	ldr.w	lr, [r3]
 801de8a:	2901      	cmp	r1, #1
 801de8c:	f240 8144 	bls.w	801e118 <forward_conv2d_integer_SSSA_ch+0x2ac>
 801de90:	6913      	ldr	r3, [r2, #16]
 801de92:	2b00      	cmp	r3, #0
 801de94:	f000 8163 	beq.w	801e15e <forward_conv2d_integer_SSSA_ch+0x2f2>
 801de98:	681b      	ldr	r3, [r3, #0]
 801de9a:	9327      	str	r3, [sp, #156]	; 0x9c
 801de9c:	2902      	cmp	r1, #2
 801de9e:	f000 814f 	beq.w	801e140 <forward_conv2d_integer_SSSA_ch+0x2d4>
 801dea2:	69d3      	ldr	r3, [r2, #28]
 801dea4:	2b00      	cmp	r3, #0
 801dea6:	f040 813d 	bne.w	801e124 <forward_conv2d_integer_SSSA_ch+0x2b8>
 801deaa:	469c      	mov	ip, r3
 801deac:	f112 0418 	adds.w	r4, r2, #24
 801deb0:	d007      	beq.n	801dec2 <forward_conv2d_integer_SSSA_ch+0x56>
 801deb2:	8b14      	ldrh	r4, [r2, #24]
 801deb4:	2c01      	cmp	r4, #1
 801deb6:	f240 816b 	bls.w	801e190 <forward_conv2d_integer_SSSA_ch+0x324>
 801deba:	2b00      	cmp	r3, #0
 801debc:	f000 8292 	beq.w	801e3e4 <forward_conv2d_integer_SSSA_ch+0x578>
 801dec0:	685c      	ldr	r4, [r3, #4]
 801dec2:	2903      	cmp	r1, #3
 801dec4:	f000 812b 	beq.w	801e11e <forward_conv2d_integer_SSSA_ch+0x2b2>
 801dec8:	6a41      	ldr	r1, [r0, #36]	; 0x24
 801deca:	6a92      	ldr	r2, [r2, #40]	; 0x28
 801decc:	9124      	str	r1, [sp, #144]	; 0x90
 801dece:	2a00      	cmp	r2, #0
 801ded0:	f000 8147 	beq.w	801e162 <forward_conv2d_integer_SSSA_ch+0x2f6>
 801ded4:	6816      	ldr	r6, [r2, #0]
 801ded6:	2900      	cmp	r1, #0
 801ded8:	f000 826f 	beq.w	801e3ba <forward_conv2d_integer_SSSA_ch+0x54e>
 801dedc:	f8d2 b004 	ldr.w	fp, [r2, #4]
 801dee0:	f8db 100c 	ldr.w	r1, [fp, #12]
 801dee4:	f8de 200c 	ldr.w	r2, [lr, #12]
 801dee8:	69a5      	ldr	r5, [r4, #24]
 801deea:	69b4      	ldr	r4, [r6, #24]
 801deec:	684e      	ldr	r6, [r1, #4]
 801deee:	6857      	ldr	r7, [r2, #4]
 801def0:	961d      	str	r6, [sp, #116]	; 0x74
 801def2:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 801def4:	fa1f f987 	uxth.w	r9, r7
 801def8:	f8dc a00c 	ldr.w	sl, [ip, #12]
 801defc:	68ad      	ldr	r5, [r5, #8]
 801defe:	9723      	str	r7, [sp, #140]	; 0x8c
 801df00:	9522      	str	r5, [sp, #136]	; 0x88
 801df02:	f8bd 7074 	ldrh.w	r7, [sp, #116]	; 0x74
 801df06:	68a5      	ldr	r5, [r4, #8]
 801df08:	68cc      	ldr	r4, [r1, #12]
 801df0a:	6889      	ldr	r1, [r1, #8]
 801df0c:	9713      	str	r7, [sp, #76]	; 0x4c
 801df0e:	9418      	str	r4, [sp, #96]	; 0x60
 801df10:	911e      	str	r1, [sp, #120]	; 0x78
 801df12:	e9d2 2802 	ldrd	r2, r8, [r2, #8]
 801df16:	921f      	str	r2, [sp, #124]	; 0x7c
 801df18:	8832      	ldrh	r2, [r6, #0]
 801df1a:	9221      	str	r2, [sp, #132]	; 0x84
 801df1c:	88b2      	ldrh	r2, [r6, #4]
 801df1e:	921a      	str	r2, [sp, #104]	; 0x68
 801df20:	f8da 2008 	ldr.w	r2, [sl, #8]
 801df24:	f8da a004 	ldr.w	sl, [sl, #4]
 801df28:	921c      	str	r2, [sp, #112]	; 0x70
 801df2a:	8d02      	ldrh	r2, [r0, #40]	; 0x28
 801df2c:	9219      	str	r2, [sp, #100]	; 0x64
 801df2e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801df30:	9220      	str	r2, [sp, #128]	; 0x80
 801df32:	69c2      	ldr	r2, [r0, #28]
 801df34:	9225      	str	r2, [sp, #148]	; 0x94
 801df36:	2b00      	cmp	r3, #0
 801df38:	f000 80f7 	beq.w	801e12a <forward_conv2d_integer_SSSA_ch+0x2be>
 801df3c:	689e      	ldr	r6, [r3, #8]
 801df3e:	2e00      	cmp	r6, #0
 801df40:	f000 80f3 	beq.w	801e12a <forward_conv2d_integer_SSSA_ch+0x2be>
 801df44:	69b3      	ldr	r3, [r6, #24]
 801df46:	2b00      	cmp	r3, #0
 801df48:	bf08      	it	eq
 801df4a:	2600      	moveq	r6, #0
 801df4c:	f8dc 1000 	ldr.w	r1, [ip]
 801df50:	f8de 2000 	ldr.w	r2, [lr]
 801df54:	f8db 3000 	ldr.w	r3, [fp]
 801df58:	9128      	str	r1, [sp, #160]	; 0xa0
 801df5a:	2a00      	cmp	r2, #0
 801df5c:	f000 80be 	beq.w	801e0dc <forward_conv2d_integer_SSSA_ch+0x270>
 801df60:	6851      	ldr	r1, [r2, #4]
 801df62:	2900      	cmp	r1, #0
 801df64:	f000 80ba 	beq.w	801e0dc <forward_conv2d_integer_SSSA_ch+0x270>
 801df68:	8850      	ldrh	r0, [r2, #2]
 801df6a:	2800      	cmp	r0, #0
 801df6c:	f000 80b6 	beq.w	801e0dc <forward_conv2d_integer_SSSA_ch+0x270>
 801df70:	6809      	ldr	r1, [r1, #0]
 801df72:	ed91 0a00 	vldr	s0, [r1]
 801df76:	b12b      	cbz	r3, 801df84 <forward_conv2d_integer_SSSA_ch+0x118>
 801df78:	6859      	ldr	r1, [r3, #4]
 801df7a:	b119      	cbz	r1, 801df84 <forward_conv2d_integer_SSSA_ch+0x118>
 801df7c:	8858      	ldrh	r0, [r3, #2]
 801df7e:	2800      	cmp	r0, #0
 801df80:	f040 8213 	bne.w	801e3aa <forward_conv2d_integer_SSSA_ch+0x53e>
 801df84:	eddf 0a83 	vldr	s1, [pc, #524]	; 801e194 <forward_conv2d_integer_SSSA_ch+0x328>
 801df88:	991c      	ldr	r1, [sp, #112]	; 0x70
 801df8a:	4551      	cmp	r1, sl
 801df8c:	f040 80a9 	bne.w	801e0e2 <forward_conv2d_integer_SSSA_ch+0x276>
 801df90:	9919      	ldr	r1, [sp, #100]	; 0x64
 801df92:	9820      	ldr	r0, [sp, #128]	; 0x80
 801df94:	4281      	cmp	r1, r0
 801df96:	f040 80a4 	bne.w	801e0e2 <forward_conv2d_integer_SSSA_ch+0x276>
 801df9a:	9921      	ldr	r1, [sp, #132]	; 0x84
 801df9c:	981a      	ldr	r0, [sp, #104]	; 0x68
 801df9e:	4281      	cmp	r1, r0
 801dfa0:	f040 809f 	bne.w	801e0e2 <forward_conv2d_integer_SSSA_ch+0x276>
 801dfa4:	991f      	ldr	r1, [sp, #124]	; 0x7c
 801dfa6:	4588      	cmp	r8, r1
 801dfa8:	f040 809b 	bne.w	801e0e2 <forward_conv2d_integer_SSSA_ch+0x276>
 801dfac:	9918      	ldr	r1, [sp, #96]	; 0x60
 801dfae:	981e      	ldr	r0, [sp, #120]	; 0x78
 801dfb0:	4281      	cmp	r1, r0
 801dfb2:	bf08      	it	eq
 801dfb4:	f1b9 0f03 	cmpeq.w	r9, #3
 801dfb8:	bf0c      	ite	eq
 801dfba:	2401      	moveq	r4, #1
 801dfbc:	2400      	movne	r4, #0
 801dfbe:	f1ba 0f01 	cmp.w	sl, #1
 801dfc2:	9414      	str	r4, [sp, #80]	; 0x50
 801dfc4:	f000 8093 	beq.w	801e0ee <forward_conv2d_integer_SSSA_ch+0x282>
 801dfc8:	2100      	movs	r1, #0
 801dfca:	9114      	str	r1, [sp, #80]	; 0x50
 801dfcc:	f8dc 0018 	ldr.w	r0, [ip, #24]
 801dfd0:	f8de e018 	ldr.w	lr, [lr, #24]
 801dfd4:	6880      	ldr	r0, [r0, #8]
 801dfd6:	f8de 7008 	ldr.w	r7, [lr, #8]
 801dfda:	9014      	str	r0, [sp, #80]	; 0x50
 801dfdc:	f8db 0018 	ldr.w	r0, [fp, #24]
 801dfe0:	971b      	str	r7, [sp, #108]	; 0x6c
 801dfe2:	6880      	ldr	r0, [r0, #8]
 801dfe4:	9017      	str	r0, [sp, #92]	; 0x5c
 801dfe6:	2a00      	cmp	r2, #0
 801dfe8:	f000 8094 	beq.w	801e114 <forward_conv2d_integer_SSSA_ch+0x2a8>
 801dfec:	6850      	ldr	r0, [r2, #4]
 801dfee:	2800      	cmp	r0, #0
 801dff0:	f000 81e1 	beq.w	801e3b6 <forward_conv2d_integer_SSSA_ch+0x54a>
 801dff4:	8852      	ldrh	r2, [r2, #2]
 801dff6:	2a00      	cmp	r2, #0
 801dff8:	f000 808c 	beq.w	801e114 <forward_conv2d_integer_SSSA_ch+0x2a8>
 801dffc:	6842      	ldr	r2, [r0, #4]
 801dffe:	f992 2000 	ldrsb.w	r2, [r2]
 801e002:	9215      	str	r2, [sp, #84]	; 0x54
 801e004:	b13b      	cbz	r3, 801e016 <forward_conv2d_integer_SSSA_ch+0x1aa>
 801e006:	685a      	ldr	r2, [r3, #4]
 801e008:	2a00      	cmp	r2, #0
 801e00a:	f000 81db 	beq.w	801e3c4 <forward_conv2d_integer_SSSA_ch+0x558>
 801e00e:	885b      	ldrh	r3, [r3, #2]
 801e010:	2b00      	cmp	r3, #0
 801e012:	f040 81c5 	bne.w	801e3a0 <forward_conv2d_integer_SSSA_ch+0x534>
 801e016:	9316      	str	r3, [sp, #88]	; 0x58
 801e018:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e01a:	2b00      	cmp	r3, #0
 801e01c:	f000 8093 	beq.w	801e146 <forward_conv2d_integer_SSSA_ch+0x2da>
 801e020:	6858      	ldr	r0, [r3, #4]
 801e022:	b100      	cbz	r0, 801e026 <forward_conv2d_integer_SSSA_ch+0x1ba>
 801e024:	6800      	ldr	r0, [r0, #0]
 801e026:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 801e02a:	9323      	str	r3, [sp, #140]	; 0x8c
 801e02c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801e02e:	2b01      	cmp	r3, #1
 801e030:	f000 8091 	beq.w	801e156 <forward_conv2d_integer_SSSA_ch+0x2ea>
 801e034:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801e036:	4293      	cmp	r3, r2
 801e038:	bf0c      	ite	eq
 801e03a:	2317      	moveq	r3, #23
 801e03c:	2300      	movne	r3, #0
 801e03e:	9329      	str	r3, [sp, #164]	; 0xa4
 801e040:	9f18      	ldr	r7, [sp, #96]	; 0x60
 801e042:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801e044:	f8bd 2074 	ldrh.w	r2, [sp, #116]	; 0x74
 801e048:	fb03 f307 	mul.w	r3, r3, r7
 801e04c:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801e04e:	921d      	str	r2, [sp, #116]	; 0x74
 801e050:	fb02 7303 	mla	r3, r2, r3, r7
 801e054:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 801e056:	429f      	cmp	r7, r3
 801e058:	d26d      	bcs.n	801e136 <forward_conv2d_integer_SSSA_ch+0x2ca>
 801e05a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801e05c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801e05e:	fb03 f308 	mul.w	r3, r3, r8
 801e062:	fb02 7303 	mla	r3, r2, r3, r7
 801e066:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801e068:	429a      	cmp	r2, r3
 801e06a:	bf2c      	ite	cs
 801e06c:	2300      	movcs	r3, #0
 801e06e:	2301      	movcc	r3, #1
 801e070:	9326      	str	r3, [sp, #152]	; 0x98
 801e072:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
 801e076:	fa1f fa8a 	uxth.w	sl, sl
 801e07a:	9f25      	ldr	r7, [sp, #148]	; 0x94
 801e07c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e07e:	921c      	str	r2, [sp, #112]	; 0x70
 801e080:	2f01      	cmp	r7, #1
 801e082:	fb1a f202 	smulbb	r2, sl, r2
 801e086:	885b      	ldrh	r3, [r3, #2]
 801e088:	b292      	uxth	r2, r2
 801e08a:	d003      	beq.n	801e094 <forward_conv2d_integer_SSSA_ch+0x228>
 801e08c:	46bc      	mov	ip, r7
 801e08e:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 801e090:	45bc      	cmp	ip, r7
 801e092:	d06f      	beq.n	801e174 <forward_conv2d_integer_SSSA_ch+0x308>
 801e094:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 801e096:	fb02 f207 	mul.w	r2, r2, r7
 801e09a:	2c00      	cmp	r4, #0
 801e09c:	f040 8194 	bne.w	801e3c8 <forward_conv2d_integer_SSSA_ch+0x55c>
 801e0a0:	2900      	cmp	r1, #0
 801e0a2:	f000 8191 	beq.w	801e3c8 <forward_conv2d_integer_SSSA_ch+0x55c>
 801e0a6:	0094      	lsls	r4, r2, #2
 801e0a8:	2b01      	cmp	r3, #1
 801e0aa:	d960      	bls.n	801e16e <forward_conv2d_integer_SSSA_ch+0x302>
 801e0ac:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801e0ae:	0093      	lsls	r3, r2, #2
 801e0b0:	189a      	adds	r2, r3, r2
 801e0b2:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 801e0b6:	18eb      	adds	r3, r5, r3
 801e0b8:	462a      	mov	r2, r5
 801e0ba:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801e0bc:	9325      	str	r3, [sp, #148]	; 0x94
 801e0be:	f001 faff 	bl	801f6c0 <align_factor_ch>
 801e0c2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801e0c4:	3b15      	subs	r3, #21
 801e0c6:	e9cd 542a 	strd	r5, r4, [sp, #168]	; 0xa8
 801e0ca:	2b03      	cmp	r3, #3
 801e0cc:	f200 818c 	bhi.w	801e3e8 <forward_conv2d_integer_SSSA_ch+0x57c>
 801e0d0:	e8df f013 	tbh	[pc, r3, lsl #1]
 801e0d4:	00e4013d 	.word	0x00e4013d
 801e0d8:	006200ae 	.word	0x006200ae
 801e0dc:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 801e194 <forward_conv2d_integer_SSSA_ch+0x328>
 801e0e0:	e749      	b.n	801df76 <forward_conv2d_integer_SSSA_ch+0x10a>
 801e0e2:	2400      	movs	r4, #0
 801e0e4:	f1ba 0f01 	cmp.w	sl, #1
 801e0e8:	9414      	str	r4, [sp, #80]	; 0x50
 801e0ea:	f47f af6d 	bne.w	801dfc8 <forward_conv2d_integer_SSSA_ch+0x15c>
 801e0ee:	991c      	ldr	r1, [sp, #112]	; 0x70
 801e0f0:	2901      	cmp	r1, #1
 801e0f2:	f47f af69 	bne.w	801dfc8 <forward_conv2d_integer_SSSA_ch+0x15c>
 801e0f6:	9921      	ldr	r1, [sp, #132]	; 0x84
 801e0f8:	981a      	ldr	r0, [sp, #104]	; 0x68
 801e0fa:	4301      	orrs	r1, r0
 801e0fc:	f47f af64 	bne.w	801dfc8 <forward_conv2d_integer_SSSA_ch+0x15c>
 801e100:	9919      	ldr	r1, [sp, #100]	; 0x64
 801e102:	9820      	ldr	r0, [sp, #128]	; 0x80
 801e104:	2901      	cmp	r1, #1
 801e106:	bf08      	it	eq
 801e108:	2801      	cmpeq	r0, #1
 801e10a:	bf0c      	ite	eq
 801e10c:	2101      	moveq	r1, #1
 801e10e:	2100      	movne	r1, #0
 801e110:	9114      	str	r1, [sp, #80]	; 0x50
 801e112:	e75b      	b.n	801dfcc <forward_conv2d_integer_SSSA_ch+0x160>
 801e114:	9215      	str	r2, [sp, #84]	; 0x54
 801e116:	e775      	b.n	801e004 <forward_conv2d_integer_SSSA_ch+0x198>
 801e118:	2300      	movs	r3, #0
 801e11a:	685b      	ldr	r3, [r3, #4]
 801e11c:	deff      	udf	#255	; 0xff
 801e11e:	2300      	movs	r3, #0
 801e120:	685b      	ldr	r3, [r3, #4]
 801e122:	deff      	udf	#255	; 0xff
 801e124:	f8d3 c000 	ldr.w	ip, [r3]
 801e128:	e6c0      	b.n	801deac <forward_conv2d_integer_SSSA_ch+0x40>
 801e12a:	6a06      	ldr	r6, [r0, #32]
 801e12c:	2e00      	cmp	r6, #0
 801e12e:	f43f af0d 	beq.w	801df4c <forward_conv2d_integer_SSSA_ch+0xe0>
 801e132:	68b6      	ldr	r6, [r6, #8]
 801e134:	e70a      	b.n	801df4c <forward_conv2d_integer_SSSA_ch+0xe0>
 801e136:	2300      	movs	r3, #0
 801e138:	9326      	str	r3, [sp, #152]	; 0x98
 801e13a:	e79a      	b.n	801e072 <forward_conv2d_integer_SSSA_ch+0x206>
 801e13c:	684b      	ldr	r3, [r1, #4]
 801e13e:	deff      	udf	#255	; 0xff
 801e140:	2300      	movs	r3, #0
 801e142:	685b      	ldr	r3, [r3, #4]
 801e144:	deff      	udf	#255	; 0xff
 801e146:	4618      	mov	r0, r3
 801e148:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 801e14c:	9323      	str	r3, [sp, #140]	; 0x8c
 801e14e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801e150:	2b01      	cmp	r3, #1
 801e152:	f47f af6f 	bne.w	801e034 <forward_conv2d_integer_SSSA_ch+0x1c8>
 801e156:	b1a4      	cbz	r4, 801e182 <forward_conv2d_integer_SSSA_ch+0x316>
 801e158:	2315      	movs	r3, #21
 801e15a:	9329      	str	r3, [sp, #164]	; 0xa4
 801e15c:	e770      	b.n	801e040 <forward_conv2d_integer_SSSA_ch+0x1d4>
 801e15e:	9327      	str	r3, [sp, #156]	; 0x9c
 801e160:	e69c      	b.n	801de9c <forward_conv2d_integer_SSSA_ch+0x30>
 801e162:	460b      	mov	r3, r1
 801e164:	b909      	cbnz	r1, 801e16a <forward_conv2d_integer_SSSA_ch+0x2fe>
 801e166:	699b      	ldr	r3, [r3, #24]
 801e168:	deff      	udf	#255	; 0xff
 801e16a:	68d3      	ldr	r3, [r2, #12]
 801e16c:	deff      	udf	#255	; 0xff
 801e16e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e170:	009b      	lsls	r3, r3, #2
 801e172:	e7a0      	b.n	801e0b6 <forward_conv2d_integer_SSSA_ch+0x24a>
 801e174:	991d      	ldr	r1, [sp, #116]	; 0x74
 801e176:	fb01 f202 	mul.w	r2, r1, r2
 801e17a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e17e:	1c54      	adds	r4, r2, #1
 801e180:	e792      	b.n	801e0a8 <forward_conv2d_integer_SSSA_ch+0x23c>
 801e182:	2900      	cmp	r1, #0
 801e184:	460b      	mov	r3, r1
 801e186:	bf0c      	ite	eq
 801e188:	2318      	moveq	r3, #24
 801e18a:	2316      	movne	r3, #22
 801e18c:	9329      	str	r3, [sp, #164]	; 0xa4
 801e18e:	e757      	b.n	801e040 <forward_conv2d_integer_SSSA_ch+0x1d4>
 801e190:	2400      	movs	r4, #0
 801e192:	e696      	b.n	801dec2 <forward_conv2d_integer_SSSA_ch+0x56>
 801e194:	00000000 	.word	0x00000000
 801e198:	9f15      	ldr	r7, [sp, #84]	; 0x54
 801e19a:	4653      	mov	r3, sl
 801e19c:	9922      	ldr	r1, [sp, #136]	; 0x88
 801e19e:	4648      	mov	r0, r9
 801e1a0:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801e1a2:	9702      	str	r7, [sp, #8]
 801e1a4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e1a6:	9101      	str	r1, [sp, #4]
 801e1a8:	9400      	str	r4, [sp, #0]
 801e1aa:	9914      	ldr	r1, [sp, #80]	; 0x50
 801e1ac:	9503      	str	r5, [sp, #12]
 801e1ae:	f002 f923 	bl	80203f8 <st_sssa8_ch_convolve_rank1upd>
 801e1b2:	970b      	str	r7, [sp, #44]	; 0x2c
 801e1b4:	9f20      	ldr	r7, [sp, #128]	; 0x80
 801e1b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801e1b8:	9707      	str	r7, [sp, #28]
 801e1ba:	9f19      	ldr	r7, [sp, #100]	; 0x64
 801e1bc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801e1be:	9706      	str	r7, [sp, #24]
 801e1c0:	9f21      	ldr	r7, [sp, #132]	; 0x84
 801e1c2:	9822      	ldr	r0, [sp, #136]	; 0x88
 801e1c4:	9705      	str	r7, [sp, #20]
 801e1c6:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801e1c8:	930d      	str	r3, [sp, #52]	; 0x34
 801e1ca:	9704      	str	r7, [sp, #16]
 801e1cc:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 801e1ce:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
 801e1d2:	920c      	str	r2, [sp, #48]	; 0x30
 801e1d4:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801e1d6:	f8bd 4060 	ldrh.w	r4, [sp, #96]	; 0x60
 801e1da:	930e      	str	r3, [sp, #56]	; 0x38
 801e1dc:	464b      	mov	r3, r9
 801e1de:	920a      	str	r2, [sp, #40]	; 0x28
 801e1e0:	fa1f f288 	uxth.w	r2, r8
 801e1e4:	9008      	str	r0, [sp, #32]
 801e1e6:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
 801e1ea:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801e1ec:	9509      	str	r5, [sp, #36]	; 0x24
 801e1ee:	e9cd a702 	strd	sl, r7, [sp, #8]
 801e1f2:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801e1f4:	9701      	str	r7, [sp, #4]
 801e1f6:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801e1f8:	e9cd 450f 	strd	r4, r5, [sp, #60]	; 0x3c
 801e1fc:	9700      	str	r7, [sp, #0]
 801e1fe:	f002 f983 	bl	8020508 <st_sssa8_ch_convolve>
 801e202:	f8db 3008 	ldr.w	r3, [fp, #8]
 801e206:	0a1b      	lsrs	r3, r3, #8
 801e208:	d046      	beq.n	801e298 <forward_conv2d_integer_SSSA_ch+0x42c>
 801e20a:	f8db 100c 	ldr.w	r1, [fp, #12]
 801e20e:	2201      	movs	r2, #1
 801e210:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801e214:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 801e218:	4299      	cmp	r1, r3
 801e21a:	fb00 f202 	mul.w	r2, r0, r2
 801e21e:	d1f9      	bne.n	801e214 <forward_conv2d_integer_SSSA_ch+0x3a8>
 801e220:	4633      	mov	r3, r6
 801e222:	4659      	mov	r1, fp
 801e224:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801e226:	9c24      	ldr	r4, [sp, #144]	; 0x90
 801e228:	47a0      	blx	r4
 801e22a:	b02d      	add	sp, #180	; 0xb4
 801e22c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e230:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 801e234:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801e236:	4652      	mov	r2, sl
 801e238:	9500      	str	r5, [sp, #0]
 801e23a:	f001 fab7 	bl	801f7ac <st_sssa8_ch_conv_dw_Wadapt>
 801e23e:	9f20      	ldr	r7, [sp, #128]	; 0x80
 801e240:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801e242:	9707      	str	r7, [sp, #28]
 801e244:	9f19      	ldr	r7, [sp, #100]	; 0x64
 801e246:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801e248:	9706      	str	r7, [sp, #24]
 801e24a:	9f21      	ldr	r7, [sp, #132]	; 0x84
 801e24c:	920c      	str	r2, [sp, #48]	; 0x30
 801e24e:	9705      	str	r7, [sp, #20]
 801e250:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801e252:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801e254:	9704      	str	r7, [sp, #16]
 801e256:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 801e258:	9822      	ldr	r0, [sp, #136]	; 0x88
 801e25a:	930d      	str	r3, [sp, #52]	; 0x34
 801e25c:	920b      	str	r2, [sp, #44]	; 0x2c
 801e25e:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
 801e262:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801e264:	f8bd 4060 	ldrh.w	r4, [sp, #96]	; 0x60
 801e268:	930e      	str	r3, [sp, #56]	; 0x38
 801e26a:	464b      	mov	r3, r9
 801e26c:	920a      	str	r2, [sp, #40]	; 0x28
 801e26e:	fa1f f288 	uxth.w	r2, r8
 801e272:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
 801e276:	9008      	str	r0, [sp, #32]
 801e278:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801e27a:	9509      	str	r5, [sp, #36]	; 0x24
 801e27c:	e9cd a702 	strd	sl, r7, [sp, #8]
 801e280:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801e282:	9701      	str	r7, [sp, #4]
 801e284:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801e286:	9700      	str	r7, [sp, #0]
 801e288:	e9cd 450f 	strd	r4, r5, [sp, #60]	; 0x3c
 801e28c:	f001 fb4c 	bl	801f928 <st_sssa8_ch_convolve_dw>
 801e290:	f8db 3008 	ldr.w	r3, [fp, #8]
 801e294:	0a1b      	lsrs	r3, r3, #8
 801e296:	d1b8      	bne.n	801e20a <forward_conv2d_integer_SSSA_ch+0x39e>
 801e298:	2201      	movs	r2, #1
 801e29a:	e7c1      	b.n	801e220 <forward_conv2d_integer_SSSA_ch+0x3b4>
 801e29c:	ab2a      	add	r3, sp, #168	; 0xa8
 801e29e:	464a      	mov	r2, r9
 801e2a0:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 801e2a4:	f003 faa2 	bl	80217ec <st_sssa8_ch_convolve_1x1_WeightsPrefetch>
 801e2a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e2aa:	2b00      	cmp	r3, #0
 801e2ac:	f040 809d 	bne.w	801e3ea <forward_conv2d_integer_SSSA_ch+0x57e>
 801e2b0:	fa1f f388 	uxth.w	r3, r8
 801e2b4:	f8bd 4060 	ldrh.w	r4, [sp, #96]	; 0x60
 801e2b8:	f04f 0801 	mov.w	r8, #1
 801e2bc:	9326      	str	r3, [sp, #152]	; 0x98
 801e2be:	991f      	ldr	r1, [sp, #124]	; 0x7c
 801e2c0:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801e2c2:	9513      	str	r5, [sp, #76]	; 0x4c
 801e2c4:	e9dd 321d 	ldrd	r3, r2, [sp, #116]	; 0x74
 801e2c8:	fb02 f303 	mul.w	r3, r2, r3
 801e2cc:	931d      	str	r3, [sp, #116]	; 0x74
 801e2ce:	b28b      	uxth	r3, r1
 801e2d0:	9328      	str	r3, [sp, #160]	; 0xa0
 801e2d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e2d4:	9423      	str	r4, [sp, #140]	; 0x8c
 801e2d6:	fb03 f301 	mul.w	r3, r3, r1
 801e2da:	931e      	str	r3, [sp, #120]	; 0x78
 801e2dc:	b293      	uxth	r3, r2
 801e2de:	931f      	str	r3, [sp, #124]	; 0x7c
 801e2e0:	2300      	movs	r3, #0
 801e2e2:	9318      	str	r3, [sp, #96]	; 0x60
 801e2e4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801e2e6:	3301      	adds	r3, #1
 801e2e8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801e2ea:	9509      	str	r5, [sp, #36]	; 0x24
 801e2ec:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801e2ee:	940d      	str	r4, [sp, #52]	; 0x34
 801e2f0:	442c      	add	r4, r5
 801e2f2:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
 801e2f6:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 801e2f8:	9417      	str	r4, [sp, #92]	; 0x5c
 801e2fa:	9c22      	ldr	r4, [sp, #136]	; 0x88
 801e2fc:	9916      	ldr	r1, [sp, #88]	; 0x58
 801e2fe:	9408      	str	r4, [sp, #32]
 801e300:	4664      	mov	r4, ip
 801e302:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801e304:	442c      	add	r4, r5
 801e306:	9825      	ldr	r0, [sp, #148]	; 0x94
 801e308:	910c      	str	r1, [sp, #48]	; 0x30
 801e30a:	941b      	str	r4, [sp, #108]	; 0x6c
 801e30c:	9c20      	ldr	r4, [sp, #128]	; 0x80
 801e30e:	9915      	ldr	r1, [sp, #84]	; 0x54
 801e310:	9407      	str	r4, [sp, #28]
 801e312:	9c19      	ldr	r4, [sp, #100]	; 0x64
 801e314:	9318      	str	r3, [sp, #96]	; 0x60
 801e316:	464b      	mov	r3, r9
 801e318:	9406      	str	r4, [sp, #24]
 801e31a:	9c21      	ldr	r4, [sp, #132]	; 0x84
 801e31c:	920e      	str	r2, [sp, #56]	; 0x38
 801e31e:	9405      	str	r4, [sp, #20]
 801e320:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801e322:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801e324:	9404      	str	r4, [sp, #16]
 801e326:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801e328:	910b      	str	r1, [sp, #44]	; 0x2c
 801e32a:	900a      	str	r0, [sp, #40]	; 0x28
 801e32c:	4660      	mov	r0, ip
 801e32e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801e330:	e9cd a402 	strd	sl, r4, [sp, #8]
 801e334:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e336:	9701      	str	r7, [sp, #4]
 801e338:	9400      	str	r4, [sp, #0]
 801e33a:	ac2a      	add	r4, sp, #168	; 0xa8
 801e33c:	9410      	str	r4, [sp, #64]	; 0x40
 801e33e:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 801e340:	940f      	str	r4, [sp, #60]	; 0x3c
 801e342:	f003 fa67 	bl	8021814 <st_sssa8_ch_convolve_1x1>
 801e346:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801e348:	4543      	cmp	r3, r8
 801e34a:	d3cb      	bcc.n	801e2e4 <forward_conv2d_integer_SSSA_ch+0x478>
 801e34c:	e759      	b.n	801e202 <forward_conv2d_integer_SSSA_ch+0x396>
 801e34e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801e350:	4653      	mov	r3, sl
 801e352:	9f22      	ldr	r7, [sp, #136]	; 0x88
 801e354:	4648      	mov	r0, r9
 801e356:	9402      	str	r4, [sp, #8]
 801e358:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e35a:	9914      	ldr	r1, [sp, #80]	; 0x50
 801e35c:	9503      	str	r5, [sp, #12]
 801e35e:	9701      	str	r7, [sp, #4]
 801e360:	f8cd a000 	str.w	sl, [sp]
 801e364:	f002 f848 	bl	80203f8 <st_sssa8_ch_convolve_rank1upd>
 801e368:	9407      	str	r4, [sp, #28]
 801e36a:	9c19      	ldr	r4, [sp, #100]	; 0x64
 801e36c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801e36e:	9403      	str	r4, [sp, #12]
 801e370:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801e372:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
 801e376:	9825      	ldr	r0, [sp, #148]	; 0x94
 801e378:	9109      	str	r1, [sp, #36]	; 0x24
 801e37a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801e37c:	920a      	str	r2, [sp, #40]	; 0x28
 801e37e:	464a      	mov	r2, r9
 801e380:	9108      	str	r1, [sp, #32]
 801e382:	fa1f f188 	uxth.w	r1, r8
 801e386:	9006      	str	r0, [sp, #24]
 801e388:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e38a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801e38c:	950b      	str	r5, [sp, #44]	; 0x2c
 801e38e:	e9cd a401 	strd	sl, r4, [sp, #4]
 801e392:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e394:	e9cd 7504 	strd	r7, r5, [sp, #16]
 801e398:	9400      	str	r4, [sp, #0]
 801e39a:	f002 fe17 	bl	8020fcc <st_sssa8_ch_convolve_rgb>
 801e39e:	e730      	b.n	801e202 <forward_conv2d_integer_SSSA_ch+0x396>
 801e3a0:	6853      	ldr	r3, [r2, #4]
 801e3a2:	f993 3000 	ldrsb.w	r3, [r3]
 801e3a6:	9316      	str	r3, [sp, #88]	; 0x58
 801e3a8:	e636      	b.n	801e018 <forward_conv2d_integer_SSSA_ch+0x1ac>
 801e3aa:	6809      	ldr	r1, [r1, #0]
 801e3ac:	edd1 0a00 	vldr	s1, [r1]
 801e3b0:	e5ea      	b.n	801df88 <forward_conv2d_integer_SSSA_ch+0x11c>
 801e3b2:	469e      	mov	lr, r3
 801e3b4:	e569      	b.n	801de8a <forward_conv2d_integer_SSSA_ch+0x1e>
 801e3b6:	9015      	str	r0, [sp, #84]	; 0x54
 801e3b8:	e624      	b.n	801e004 <forward_conv2d_integer_SSSA_ch+0x198>
 801e3ba:	4a0f      	ldr	r2, [pc, #60]	; (801e3f8 <forward_conv2d_integer_SSSA_ch+0x58c>)
 801e3bc:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 801e3c0:	9224      	str	r2, [sp, #144]	; 0x90
 801e3c2:	e58d      	b.n	801dee0 <forward_conv2d_integer_SSSA_ch+0x74>
 801e3c4:	9216      	str	r2, [sp, #88]	; 0x58
 801e3c6:	e627      	b.n	801e018 <forward_conv2d_integer_SSSA_ch+0x1ac>
 801e3c8:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 801e3ca:	4621      	mov	r1, r4
 801e3cc:	4414      	add	r4, r2
 801e3ce:	fb02 f101 	mul.w	r1, r2, r1
 801e3d2:	00a4      	lsls	r4, r4, #2
 801e3d4:	004a      	lsls	r2, r1, #1
 801e3d6:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 801e3da:	bfd4      	ite	le
 801e3dc:	18a4      	addle	r4, r4, r2
 801e3de:	f504 54a0 	addgt.w	r4, r4, #5120	; 0x1400
 801e3e2:	e661      	b.n	801e0a8 <forward_conv2d_integer_SSSA_ch+0x23c>
 801e3e4:	461c      	mov	r4, r3
 801e3e6:	e56c      	b.n	801dec2 <forward_conv2d_integer_SSSA_ch+0x56>
 801e3e8:	e7fe      	b.n	801e3e8 <forward_conv2d_integer_SSSA_ch+0x57c>
 801e3ea:	f1b8 0f00 	cmp.w	r8, #0
 801e3ee:	f43f af08 	beq.w	801e202 <forward_conv2d_integer_SSSA_ch+0x396>
 801e3f2:	9c26      	ldr	r4, [sp, #152]	; 0x98
 801e3f4:	e763      	b.n	801e2be <forward_conv2d_integer_SSSA_ch+0x452>
 801e3f6:	bf00      	nop
 801e3f8:	0801de69 	.word	0x0801de69

0801e3fc <forward_conv2d_nl_pool_integer_SSSA_ch>:
 801e3fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e400:	6983      	ldr	r3, [r0, #24]
 801e402:	b0d5      	sub	sp, #340	; 0x154
 801e404:	881e      	ldrh	r6, [r3, #0]
 801e406:	2e00      	cmp	r6, #0
 801e408:	f000 81b9 	beq.w	801e77e <forward_conv2d_nl_pool_integer_SSSA_ch+0x382>
 801e40c:	6859      	ldr	r1, [r3, #4]
 801e40e:	684d      	ldr	r5, [r1, #4]
 801e410:	2d00      	cmp	r5, #0
 801e412:	f000 8360 	beq.w	801ead6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x6da>
 801e416:	682b      	ldr	r3, [r5, #0]
 801e418:	9313      	str	r3, [sp, #76]	; 0x4c
 801e41a:	2e01      	cmp	r6, #1
 801e41c:	f240 81ac 	bls.w	801e778 <forward_conv2d_nl_pool_integer_SSSA_ch+0x37c>
 801e420:	690b      	ldr	r3, [r1, #16]
 801e422:	2b00      	cmp	r3, #0
 801e424:	f000 82b2 	beq.w	801e98c <forward_conv2d_nl_pool_integer_SSSA_ch+0x590>
 801e428:	681b      	ldr	r3, [r3, #0]
 801e42a:	931b      	str	r3, [sp, #108]	; 0x6c
 801e42c:	2e02      	cmp	r6, #2
 801e42e:	f000 81a3 	beq.w	801e778 <forward_conv2d_nl_pool_integer_SSSA_ch+0x37c>
 801e432:	69cc      	ldr	r4, [r1, #28]
 801e434:	2c00      	cmp	r4, #0
 801e436:	f040 82a7 	bne.w	801e988 <forward_conv2d_nl_pool_integer_SSSA_ch+0x58c>
 801e43a:	4623      	mov	r3, r4
 801e43c:	f111 0218 	adds.w	r2, r1, #24
 801e440:	d007      	beq.n	801e452 <forward_conv2d_nl_pool_integer_SSSA_ch+0x56>
 801e442:	8b0a      	ldrh	r2, [r1, #24]
 801e444:	2a01      	cmp	r2, #1
 801e446:	f240 8375 	bls.w	801eb34 <forward_conv2d_nl_pool_integer_SSSA_ch+0x738>
 801e44a:	2c00      	cmp	r4, #0
 801e44c:	f000 8370 	beq.w	801eb30 <forward_conv2d_nl_pool_integer_SSSA_ch+0x734>
 801e450:	6862      	ldr	r2, [r4, #4]
 801e452:	2e03      	cmp	r6, #3
 801e454:	f000 8190 	beq.w	801e778 <forward_conv2d_nl_pool_integer_SSSA_ch+0x37c>
 801e458:	6a89      	ldr	r1, [r1, #40]	; 0x28
 801e45a:	2900      	cmp	r1, #0
 801e45c:	f000 8191 	beq.w	801e782 <forward_conv2d_nl_pool_integer_SSSA_ch+0x386>
 801e460:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801e462:	680d      	ldr	r5, [r1, #0]
 801e464:	9630      	str	r6, [sp, #192]	; 0xc0
 801e466:	9516      	str	r5, [sp, #88]	; 0x58
 801e468:	f8d1 b004 	ldr.w	fp, [r1, #4]
 801e46c:	2e00      	cmp	r6, #0
 801e46e:	f000 835a 	beq.w	801eb26 <forward_conv2d_nl_pool_integer_SSSA_ch+0x72a>
 801e472:	6889      	ldr	r1, [r1, #8]
 801e474:	911e      	str	r1, [sp, #120]	; 0x78
 801e476:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801e478:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
 801e47c:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 801e480:	f8db 100c 	ldr.w	r1, [fp, #12]
 801e484:	f8dc 7004 	ldr.w	r7, [ip, #4]
 801e488:	6849      	ldr	r1, [r1, #4]
 801e48a:	b2bd      	uxth	r5, r7
 801e48c:	f8de 6000 	ldr.w	r6, [lr]
 801e490:	9117      	str	r1, [sp, #92]	; 0x5c
 801e492:	951d      	str	r5, [sp, #116]	; 0x74
 801e494:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801e496:	9725      	str	r7, [sp, #148]	; 0x94
 801e498:	68e9      	ldr	r1, [r5, #12]
 801e49a:	f8bd 505c 	ldrh.w	r5, [sp, #92]	; 0x5c
 801e49e:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 801e4a0:	9515      	str	r5, [sp, #84]	; 0x54
 801e4a2:	b2b5      	uxth	r5, r6
 801e4a4:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 801e4a8:	9514      	str	r5, [sp, #80]	; 0x50
 801e4aa:	b2bd      	uxth	r5, r7
 801e4ac:	9521      	str	r5, [sp, #132]	; 0x84
 801e4ae:	e9dc 5902 	ldrd	r5, r9, [ip, #8]
 801e4b2:	f8de c008 	ldr.w	ip, [lr, #8]
 801e4b6:	952d      	str	r5, [sp, #180]	; 0xb4
 801e4b8:	f8be 5004 	ldrh.w	r5, [lr, #4]
 801e4bc:	9522      	str	r5, [sp, #136]	; 0x88
 801e4be:	68cd      	ldr	r5, [r1, #12]
 801e4c0:	6889      	ldr	r1, [r1, #8]
 801e4c2:	9532      	str	r5, [sp, #200]	; 0xc8
 801e4c4:	9138      	str	r1, [sp, #224]	; 0xe0
 801e4c6:	e9da 1801 	ldrd	r1, r8, [sl, #4]
 801e4ca:	911a      	str	r1, [sp, #104]	; 0x68
 801e4cc:	6d41      	ldr	r1, [r0, #84]	; 0x54
 801e4ce:	6809      	ldr	r1, [r1, #0]
 801e4d0:	9123      	str	r1, [sp, #140]	; 0x8c
 801e4d2:	6d41      	ldr	r1, [r0, #84]	; 0x54
 801e4d4:	6849      	ldr	r1, [r1, #4]
 801e4d6:	913b      	str	r1, [sp, #236]	; 0xec
 801e4d8:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 801e4da:	9120      	str	r1, [sp, #128]	; 0x80
 801e4dc:	69c1      	ldr	r1, [r0, #28]
 801e4de:	9126      	str	r1, [sp, #152]	; 0x98
 801e4e0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 801e4e2:	9139      	str	r1, [sp, #228]	; 0xe4
 801e4e4:	6c81      	ldr	r1, [r0, #72]	; 0x48
 801e4e6:	913a      	str	r1, [sp, #232]	; 0xe8
 801e4e8:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 801e4ea:	9129      	str	r1, [sp, #164]	; 0xa4
 801e4ec:	2c00      	cmp	r4, #0
 801e4ee:	f000 8242 	beq.w	801e976 <forward_conv2d_nl_pool_integer_SSSA_ch+0x57a>
 801e4f2:	f8d4 a008 	ldr.w	sl, [r4, #8]
 801e4f6:	f1ba 0f00 	cmp.w	sl, #0
 801e4fa:	f000 823c 	beq.w	801e976 <forward_conv2d_nl_pool_integer_SSSA_ch+0x57a>
 801e4fe:	f8da 1018 	ldr.w	r1, [sl, #24]
 801e502:	2900      	cmp	r1, #0
 801e504:	bf08      	it	eq
 801e506:	f04f 0a00 	moveq.w	sl, #0
 801e50a:	fa1f fe86 	uxth.w	lr, r6
 801e50e:	902e      	str	r0, [sp, #184]	; 0xb8
 801e510:	9219      	str	r2, [sp, #100]	; 0x64
 801e512:	a941      	add	r1, sp, #260	; 0x104
 801e514:	fa1e f08c 	uxtah	r0, lr, ip
 801e518:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801e51a:	9150      	str	r1, [sp, #320]	; 0x140
 801e51c:	2400      	movs	r4, #0
 801e51e:	6996      	ldr	r6, [r2, #24]
 801e520:	4448      	add	r0, r9
 801e522:	4611      	mov	r1, r2
 801e524:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801e528:	eba0 0508 	sub.w	r5, r0, r8
 801e52c:	931c      	str	r3, [sp, #112]	; 0x70
 801e52e:	924e      	str	r2, [sp, #312]	; 0x138
 801e530:	f240 4201 	movw	r2, #1025	; 0x401
 801e534:	9518      	str	r5, [sp, #96]	; 0x60
 801e536:	b2bb      	uxth	r3, r7
 801e538:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801e53a:	eb0e 0709 	add.w	r7, lr, r9
 801e53e:	924f      	str	r2, [sp, #316]	; 0x13c
 801e540:	f240 4202 	movw	r2, #1026	; 0x402
 801e544:	69ad      	ldr	r5, [r5, #24]
 801e546:	f50d 7c8a 	add.w	ip, sp, #276	; 0x114
 801e54a:	9251      	str	r2, [sp, #324]	; 0x144
 801e54c:	f50d 7992 	add.w	r9, sp, #292	; 0x124
 801e550:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801e552:	a84d      	add	r0, sp, #308	; 0x134
 801e554:	9533      	str	r5, [sp, #204]	; 0xcc
 801e556:	6c55      	ldr	r5, [r2, #68]	; 0x44
 801e558:	6d92      	ldr	r2, [r2, #88]	; 0x58
 801e55a:	931f      	str	r3, [sp, #124]	; 0x7c
 801e55c:	944d      	str	r4, [sp, #308]	; 0x134
 801e55e:	9727      	str	r7, [sp, #156]	; 0x9c
 801e560:	9441      	str	r4, [sp, #260]	; 0x104
 801e562:	f8db 7018 	ldr.w	r7, [fp, #24]
 801e566:	9445      	str	r4, [sp, #276]	; 0x114
 801e568:	9442      	str	r4, [sp, #264]	; 0x108
 801e56a:	9443      	str	r4, [sp, #268]	; 0x10c
 801e56c:	9446      	str	r4, [sp, #280]	; 0x118
 801e56e:	9444      	str	r4, [sp, #272]	; 0x110
 801e570:	9453      	str	r4, [sp, #332]	; 0x14c
 801e572:	9447      	str	r4, [sp, #284]	; 0x11c
 801e574:	9448      	str	r4, [sp, #288]	; 0x120
 801e576:	f8cd c148 	str.w	ip, [sp, #328]	; 0x148
 801e57a:	952a      	str	r5, [sp, #168]	; 0xa8
 801e57c:	f9bd 408c 	ldrsh.w	r4, [sp, #140]	; 0x8c
 801e580:	923c      	str	r2, [sp, #240]	; 0xf0
 801e582:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801e584:	fbb5 fcf3 	udiv	ip, r5, r3
 801e588:	f10c 0301 	add.w	r3, ip, #1
 801e58c:	9328      	str	r3, [sp, #160]	; 0xa0
 801e58e:	f006 fbbf 	bl	8024d10 <core_tensor_clone>
 801e592:	4648      	mov	r0, r9
 801e594:	4631      	mov	r1, r6
 801e596:	f006 fbed 	bl	8024d74 <core_array_clone>
 801e59a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801e59c:	f8cd 914c 	str.w	r9, [sp, #332]	; 0x14c
 801e5a0:	6999      	ldr	r1, [r3, #24]
 801e5a2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e5a4:	f8d1 9008 	ldr.w	r9, [r1, #8]
 801e5a8:	6818      	ldr	r0, [r3, #0]
 801e5aa:	f8db 300c 	ldr.w	r3, [fp, #12]
 801e5ae:	f8db 1000 	ldr.w	r1, [fp]
 801e5b2:	689b      	ldr	r3, [r3, #8]
 801e5b4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801e5b6:	932f      	str	r3, [sp, #188]	; 0xbc
 801e5b8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801e5ba:	f8d3 e000 	ldr.w	lr, [r3]
 801e5be:	2800      	cmp	r0, #0
 801e5c0:	f000 80e1 	beq.w	801e786 <forward_conv2d_nl_pool_integer_SSSA_ch+0x38a>
 801e5c4:	f8d0 c004 	ldr.w	ip, [r0, #4]
 801e5c8:	f1bc 0f00 	cmp.w	ip, #0
 801e5cc:	f000 80db 	beq.w	801e786 <forward_conv2d_nl_pool_integer_SSSA_ch+0x38a>
 801e5d0:	8845      	ldrh	r5, [r0, #2]
 801e5d2:	2d00      	cmp	r5, #0
 801e5d4:	f000 80d7 	beq.w	801e786 <forward_conv2d_nl_pool_integer_SSSA_ch+0x38a>
 801e5d8:	f8dc c000 	ldr.w	ip, [ip]
 801e5dc:	ed9c 0a00 	vldr	s0, [ip]
 801e5e0:	2900      	cmp	r1, #0
 801e5e2:	f000 80d5 	beq.w	801e790 <forward_conv2d_nl_pool_integer_SSSA_ch+0x394>
 801e5e6:	f8d1 c004 	ldr.w	ip, [r1, #4]
 801e5ea:	f1bc 0f00 	cmp.w	ip, #0
 801e5ee:	f000 80cf 	beq.w	801e790 <forward_conv2d_nl_pool_integer_SSSA_ch+0x394>
 801e5f2:	884d      	ldrh	r5, [r1, #2]
 801e5f4:	2d00      	cmp	r5, #0
 801e5f6:	f000 80cb 	beq.w	801e790 <forward_conv2d_nl_pool_integer_SSSA_ch+0x394>
 801e5fa:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801e5fc:	f8dc c000 	ldr.w	ip, [ip]
 801e600:	2d01      	cmp	r5, #1
 801e602:	eddc 0a00 	vldr	s1, [ip]
 801e606:	f040 80c9 	bne.w	801e79c <forward_conv2d_nl_pool_integer_SSSA_ch+0x3a0>
 801e60a:	f1b8 0f01 	cmp.w	r8, #1
 801e60e:	f040 80c5 	bne.w	801e79c <forward_conv2d_nl_pool_integer_SSSA_ch+0x3a0>
 801e612:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801e614:	46ac      	mov	ip, r5
 801e616:	9d22      	ldr	r5, [sp, #136]	; 0x88
 801e618:	ea5c 0505 	orrs.w	r5, ip, r5
 801e61c:	f040 80be 	bne.w	801e79c <forward_conv2d_nl_pool_integer_SSSA_ch+0x3a0>
 801e620:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801e622:	46ac      	mov	ip, r5
 801e624:	9d21      	ldr	r5, [sp, #132]	; 0x84
 801e626:	f1bc 0f01 	cmp.w	ip, #1
 801e62a:	bf08      	it	eq
 801e62c:	2d01      	cmpeq	r5, #1
 801e62e:	bf0c      	ite	eq
 801e630:	f04f 0c01 	moveq.w	ip, #1
 801e634:	f04f 0c00 	movne.w	ip, #0
 801e638:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801e63a:	699b      	ldr	r3, [r3, #24]
 801e63c:	69ad      	ldr	r5, [r5, #24]
 801e63e:	689b      	ldr	r3, [r3, #8]
 801e640:	6992      	ldr	r2, [r2, #24]
 801e642:	68ad      	ldr	r5, [r5, #8]
 801e644:	9319      	str	r3, [sp, #100]	; 0x64
 801e646:	6893      	ldr	r3, [r2, #8]
 801e648:	9537      	str	r5, [sp, #220]	; 0xdc
 801e64a:	9324      	str	r3, [sp, #144]	; 0x90
 801e64c:	2800      	cmp	r0, #0
 801e64e:	f000 81a1 	beq.w	801e994 <forward_conv2d_nl_pool_integer_SSSA_ch+0x598>
 801e652:	6843      	ldr	r3, [r0, #4]
 801e654:	2b00      	cmp	r3, #0
 801e656:	f000 8264 	beq.w	801eb22 <forward_conv2d_nl_pool_integer_SSSA_ch+0x726>
 801e65a:	8842      	ldrh	r2, [r0, #2]
 801e65c:	2a00      	cmp	r2, #0
 801e65e:	f000 8197 	beq.w	801e990 <forward_conv2d_nl_pool_integer_SSSA_ch+0x594>
 801e662:	685b      	ldr	r3, [r3, #4]
 801e664:	f993 3000 	ldrsb.w	r3, [r3]
 801e668:	9316      	str	r3, [sp, #88]	; 0x58
 801e66a:	2900      	cmp	r1, #0
 801e66c:	f000 8181 	beq.w	801e972 <forward_conv2d_nl_pool_integer_SSSA_ch+0x576>
 801e670:	684b      	ldr	r3, [r1, #4]
 801e672:	2b00      	cmp	r3, #0
 801e674:	f000 8253 	beq.w	801eb1e <forward_conv2d_nl_pool_integer_SSSA_ch+0x722>
 801e678:	884a      	ldrh	r2, [r1, #2]
 801e67a:	2a00      	cmp	r2, #0
 801e67c:	f000 8177 	beq.w	801e96e <forward_conv2d_nl_pool_integer_SSSA_ch+0x572>
 801e680:	685b      	ldr	r3, [r3, #4]
 801e682:	f993 3000 	ldrsb.w	r3, [r3]
 801e686:	9318      	str	r3, [sp, #96]	; 0x60
 801e688:	f1be 0f00 	cmp.w	lr, #0
 801e68c:	f000 816d 	beq.w	801e96a <forward_conv2d_nl_pool_integer_SSSA_ch+0x56e>
 801e690:	f8de 0004 	ldr.w	r0, [lr, #4]
 801e694:	b100      	cbz	r0, 801e698 <forward_conv2d_nl_pool_integer_SSSA_ch+0x29c>
 801e696:	6800      	ldr	r0, [r0, #0]
 801e698:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 801e69c:	fa1f f188 	uxth.w	r1, r8
 801e6a0:	f8bd 5094 	ldrh.w	r5, [sp, #148]	; 0x94
 801e6a4:	931c      	str	r3, [sp, #112]	; 0x70
 801e6a6:	fb11 f303 	smulbb	r3, r1, r3
 801e6aa:	9525      	str	r5, [sp, #148]	; 0x94
 801e6ac:	b29d      	uxth	r5, r3
 801e6ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e6b0:	911a      	str	r1, [sp, #104]	; 0x68
 801e6b2:	2b01      	cmp	r3, #1
 801e6b4:	f8bd 105c 	ldrh.w	r1, [sp, #92]	; 0x5c
 801e6b8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801e6bc:	9113      	str	r1, [sp, #76]	; 0x4c
 801e6be:	f000 8177 	beq.w	801e9b0 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5b4>
 801e6c2:	9925      	ldr	r1, [sp, #148]	; 0x94
 801e6c4:	428b      	cmp	r3, r1
 801e6c6:	f000 816a 	beq.w	801e99e <forward_conv2d_nl_pool_integer_SSSA_ch+0x5a2>
 801e6ca:	460b      	mov	r3, r1
 801e6cc:	2100      	movs	r1, #0
 801e6ce:	fb05 f303 	mul.w	r3, r5, r3
 801e6d2:	912c      	str	r1, [sp, #176]	; 0xb0
 801e6d4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801e6d6:	fb03 f101 	mul.w	r1, r3, r1
 801e6da:	0049      	lsls	r1, r1, #1
 801e6dc:	f5b1 5fa0 	cmp.w	r1, #5120	; 0x1400
 801e6e0:	bfa8      	it	ge
 801e6e2:	f44f 51a0 	movge.w	r1, #5120	; 0x1400
 801e6e6:	f1bc 0f00 	cmp.w	ip, #0
 801e6ea:	f000 8176 	beq.w	801e9da <forward_conv2d_nl_pool_integer_SSSA_ch+0x5de>
 801e6ee:	009d      	lsls	r5, r3, #2
 801e6f0:	2a01      	cmp	r2, #1
 801e6f2:	f240 8151 	bls.w	801e998 <forward_conv2d_nl_pool_integer_SSSA_ch+0x59c>
 801e6f6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e6f8:	0093      	lsls	r3, r2, #2
 801e6fa:	189a      	adds	r2, r3, r2
 801e6fc:	eb05 0542 	add.w	r5, r5, r2, lsl #1
 801e700:	444b      	add	r3, r9
 801e702:	464a      	mov	r2, r9
 801e704:	9915      	ldr	r1, [sp, #84]	; 0x54
 801e706:	932b      	str	r3, [sp, #172]	; 0xac
 801e708:	f000 ffda 	bl	801f6c0 <align_factor_ch>
 801e70c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801e70e:	f8cd 90fc 	str.w	r9, [sp, #252]	; 0xfc
 801e712:	9540      	str	r5, [sp, #256]	; 0x100
 801e714:	2b00      	cmp	r3, #0
 801e716:	f000 80f5 	beq.w	801e904 <forward_conv2d_nl_pool_integer_SSSA_ch+0x508>
 801e71a:	9d2f      	ldr	r5, [sp, #188]	; 0xbc
 801e71c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e71e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801e720:	fb00 f005 	mul.w	r0, r0, r5
 801e724:	991f      	ldr	r1, [sp, #124]	; 0x7c
 801e726:	4613      	mov	r3, r2
 801e728:	f8cd a0f4 	str.w	sl, [sp, #244]	; 0xf4
 801e72c:	902f      	str	r0, [sp, #188]	; 0xbc
 801e72e:	b2a8      	uxth	r0, r5
 801e730:	fb03 f301 	mul.w	r3, r3, r1
 801e734:	f8dd a0dc 	ldr.w	sl, [sp, #220]	; 0xdc
 801e738:	9026      	str	r0, [sp, #152]	; 0x98
 801e73a:	2100      	movs	r1, #0
 801e73c:	9825      	ldr	r0, [sp, #148]	; 0x94
 801e73e:	9117      	str	r1, [sp, #92]	; 0x5c
 801e740:	fb00 f303 	mul.w	r3, r0, r3
 801e744:	9125      	str	r1, [sp, #148]	; 0x94
 801e746:	9335      	str	r3, [sp, #212]	; 0xd4
 801e748:	b293      	uxth	r3, r2
 801e74a:	9431      	str	r4, [sp, #196]	; 0xc4
 801e74c:	932d      	str	r3, [sp, #180]	; 0xb4
 801e74e:	fb00 f302 	mul.w	r3, r0, r2
 801e752:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801e756:	9336      	str	r3, [sp, #216]	; 0xd8
 801e758:	f9bd 30a8 	ldrsh.w	r3, [sp, #168]	; 0xa8
 801e75c:	9334      	str	r3, [sp, #208]	; 0xd0
 801e75e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e760:	2b00      	cmp	r3, #0
 801e762:	dd6a      	ble.n	801e83a <forward_conv2d_nl_pool_integer_SSSA_ch+0x43e>
 801e764:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e766:	2b17      	cmp	r3, #23
 801e768:	f000 8186 	beq.w	801ea78 <forward_conv2d_nl_pool_integer_SSSA_ch+0x67c>
 801e76c:	2b18      	cmp	r3, #24
 801e76e:	f000 813b 	beq.w	801e9e8 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5ec>
 801e772:	2b16      	cmp	r3, #22
 801e774:	d015      	beq.n	801e7a2 <forward_conv2d_nl_pool_integer_SSSA_ch+0x3a6>
 801e776:	e7fe      	b.n	801e776 <forward_conv2d_nl_pool_integer_SSSA_ch+0x37a>
 801e778:	2300      	movs	r3, #0
 801e77a:	685b      	ldr	r3, [r3, #4]
 801e77c:	deff      	udf	#255	; 0xff
 801e77e:	6873      	ldr	r3, [r6, #4]
 801e780:	deff      	udf	#255	; 0xff
 801e782:	68cb      	ldr	r3, [r1, #12]
 801e784:	deff      	udf	#255	; 0xff
 801e786:	ed9f 0a97 	vldr	s0, [pc, #604]	; 801e9e4 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5e8>
 801e78a:	2900      	cmp	r1, #0
 801e78c:	f47f af2b 	bne.w	801e5e6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x1ea>
 801e790:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801e792:	eddf 0a94 	vldr	s1, [pc, #592]	; 801e9e4 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5e8>
 801e796:	2d01      	cmp	r5, #1
 801e798:	f43f af37 	beq.w	801e60a <forward_conv2d_nl_pool_integer_SSSA_ch+0x20e>
 801e79c:	f04f 0c00 	mov.w	ip, #0
 801e7a0:	e74a      	b.n	801e638 <forward_conv2d_nl_pool_integer_SSSA_ch+0x23c>
 801e7a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801e7a4:	2b00      	cmp	r3, #0
 801e7a6:	f040 81b7 	bne.w	801eb18 <forward_conv2d_nl_pool_integer_SSSA_ch+0x71c>
 801e7aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e7ac:	f10d 09fc 	add.w	r9, sp, #252	; 0xfc
 801e7b0:	429c      	cmp	r4, r3
 801e7b2:	f000 81aa 	beq.w	801eb0a <forward_conv2d_nl_pool_integer_SSSA_ch+0x70e>
 801e7b6:	9926      	ldr	r1, [sp, #152]	; 0x98
 801e7b8:	2201      	movs	r2, #1
 801e7ba:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801e7bc:	920f      	str	r2, [sp, #60]	; 0x3c
 801e7be:	fa1f f288 	uxth.w	r2, r8
 801e7c2:	910e      	str	r1, [sp, #56]	; 0x38
 801e7c4:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 801e7c8:	68b8      	ldr	r0, [r7, #8]
 801e7ca:	950c      	str	r5, [sp, #48]	; 0x30
 801e7cc:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801e7ce:	900d      	str	r0, [sp, #52]	; 0x34
 801e7d0:	4650      	mov	r0, sl
 801e7d2:	950b      	str	r5, [sp, #44]	; 0x2c
 801e7d4:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 801e7d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e7d8:	950a      	str	r5, [sp, #40]	; 0x28
 801e7da:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801e7dc:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801e7de:	9509      	str	r5, [sp, #36]	; 0x24
 801e7e0:	9d24      	ldr	r5, [sp, #144]	; 0x90
 801e7e2:	9508      	str	r5, [sp, #32]
 801e7e4:	9d21      	ldr	r5, [sp, #132]	; 0x84
 801e7e6:	9507      	str	r5, [sp, #28]
 801e7e8:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801e7ea:	9506      	str	r5, [sp, #24]
 801e7ec:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801e7ee:	9505      	str	r5, [sp, #20]
 801e7f0:	9d22      	ldr	r5, [sp, #136]	; 0x88
 801e7f2:	9504      	str	r5, [sp, #16]
 801e7f4:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801e7f6:	9503      	str	r5, [sp, #12]
 801e7f8:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801e7fa:	9502      	str	r5, [sp, #8]
 801e7fc:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801e7fe:	9501      	str	r5, [sp, #4]
 801e800:	9d19      	ldr	r5, [sp, #100]	; 0x64
 801e802:	9500      	str	r5, [sp, #0]
 801e804:	f003 f806 	bl	8021814 <st_sssa8_ch_convolve_1x1>
 801e808:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801e80a:	991f      	ldr	r1, [sp, #124]	; 0x7c
 801e80c:	428b      	cmp	r3, r1
 801e80e:	f000 811e 	beq.w	801ea4e <forward_conv2d_nl_pool_integer_SSSA_ch+0x652>
 801e812:	1a5b      	subs	r3, r3, r1
 801e814:	4598      	cmp	r8, r3
 801e816:	9327      	str	r3, [sp, #156]	; 0x9c
 801e818:	bf28      	it	cs
 801e81a:	4698      	movcs	r8, r3
 801e81c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e81e:	2b00      	cmp	r3, #0
 801e820:	f040 811d 	bne.w	801ea5e <forward_conv2d_nl_pool_integer_SSSA_ch+0x662>
 801e824:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 801e826:	449a      	add	sl, r3
 801e828:	3401      	adds	r4, #1
 801e82a:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 801e82c:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801e82e:	4659      	mov	r1, fp
 801e830:	981e      	ldr	r0, [sp, #120]	; 0x78
 801e832:	b224      	sxth	r4, r4
 801e834:	9d30      	ldr	r5, [sp, #192]	; 0xc0
 801e836:	47a8      	blx	r5
 801e838:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e83a:	3b01      	subs	r3, #1
 801e83c:	9328      	str	r3, [sp, #160]	; 0xa0
 801e83e:	d46b      	bmi.n	801e918 <forward_conv2d_nl_pool_integer_SSSA_ch+0x51c>
 801e840:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801e842:	429c      	cmp	r4, r3
 801e844:	db36      	blt.n	801e8b4 <forward_conv2d_nl_pool_integer_SSSA_ch+0x4b8>
 801e846:	2001      	movs	r0, #1
 801e848:	f8bd 30a8 	ldrh.w	r3, [sp, #168]	; 0xa8
 801e84c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801e84e:	9007      	str	r0, [sp, #28]
 801e850:	9825      	ldr	r0, [sp, #148]	; 0x94
 801e852:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	; 0xa4
 801e856:	f8dd 90c4 	ldr.w	r9, [sp, #196]	; 0xc4
 801e85a:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 801e85c:	1a64      	subs	r4, r4, r1
 801e85e:	9208      	str	r2, [sp, #32]
 801e860:	1a1a      	subs	r2, r3, r0
 801e862:	f8bd 00e0 	ldrh.w	r0, [sp, #224]	; 0xe0
 801e866:	3501      	adds	r5, #1
 801e868:	f8bd c0e8 	ldrh.w	ip, [sp, #232]	; 0xe8
 801e86c:	b292      	uxth	r2, r2
 801e86e:	9301      	str	r3, [sp, #4]
 801e870:	fa1f f389 	uxth.w	r3, r9
 801e874:	9105      	str	r1, [sp, #20]
 801e876:	b224      	sxth	r4, r4
 801e878:	f8bd 10ec 	ldrh.w	r1, [sp, #236]	; 0xec
 801e87c:	9006      	str	r0, [sp, #24]
 801e87e:	f8bd 00e4 	ldrh.w	r0, [sp, #228]	; 0xe4
 801e882:	9102      	str	r1, [sp, #8]
 801e884:	9000      	str	r0, [sp, #0]
 801e886:	a84d      	add	r0, sp, #308	; 0x134
 801e888:	9926      	ldr	r1, [sp, #152]	; 0x98
 801e88a:	9517      	str	r5, [sp, #92]	; 0x5c
 801e88c:	9d3c      	ldr	r5, [sp, #240]	; 0xf0
 801e88e:	e9cd 3c03 	strd	r3, ip, [sp, #12]
 801e892:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e894:	47a8      	blx	r5
 801e896:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801e898:	f9bd 30a4 	ldrsh.w	r3, [sp, #164]	; 0xa4
 801e89c:	464d      	mov	r5, r9
 801e89e:	6951      	ldr	r1, [r2, #20]
 801e8a0:	9833      	ldr	r0, [sp, #204]	; 0xcc
 801e8a2:	1aeb      	subs	r3, r5, r3
 801e8a4:	68c9      	ldr	r1, [r1, #12]
 801e8a6:	6882      	ldr	r2, [r0, #8]
 801e8a8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e8ac:	440a      	add	r2, r1
 801e8ae:	b21b      	sxth	r3, r3
 801e8b0:	6082      	str	r2, [r0, #8]
 801e8b2:	9331      	str	r3, [sp, #196]	; 0xc4
 801e8b4:	f8db 3014 	ldr.w	r3, [fp, #20]
 801e8b8:	68ba      	ldr	r2, [r7, #8]
 801e8ba:	68db      	ldr	r3, [r3, #12]
 801e8bc:	eb02 0903 	add.w	r9, r2, r3
 801e8c0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801e8c2:	f8c7 9008 	str.w	r9, [r7, #8]
 801e8c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e8c8:	b13b      	cbz	r3, 801e8da <forward_conv2d_nl_pool_integer_SSSA_ch+0x4de>
 801e8ca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801e8cc:	695a      	ldr	r2, [r3, #20]
 801e8ce:	68b3      	ldr	r3, [r6, #8]
 801e8d0:	68d2      	ldr	r2, [r2, #12]
 801e8d2:	4413      	add	r3, r2
 801e8d4:	60b3      	str	r3, [r6, #8]
 801e8d6:	f8d7 9008 	ldr.w	r9, [r7, #8]
 801e8da:	68fb      	ldr	r3, [r7, #12]
 801e8dc:	4658      	mov	r0, fp
 801e8de:	9337      	str	r3, [sp, #220]	; 0xdc
 801e8e0:	f006 f8c4 	bl	8024a6c <get_tensor_byte_size>
 801e8e4:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 801e8e6:	4403      	add	r3, r0
 801e8e8:	4599      	cmp	r9, r3
 801e8ea:	d306      	bcc.n	801e8fa <forward_conv2d_nl_pool_integer_SSSA_ch+0x4fe>
 801e8ec:	68fb      	ldr	r3, [r7, #12]
 801e8ee:	60bb      	str	r3, [r7, #8]
 801e8f0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801e8f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e8f4:	b10b      	cbz	r3, 801e8fa <forward_conv2d_nl_pool_integer_SSSA_ch+0x4fe>
 801e8f6:	68f3      	ldr	r3, [r6, #12]
 801e8f8:	60b3      	str	r3, [r6, #8]
 801e8fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801e8fc:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 801e8fe:	4293      	cmp	r3, r2
 801e900:	f4ff af2d 	bcc.w	801e75e <forward_conv2d_nl_pool_integer_SSSA_ch+0x362>
 801e904:	68fb      	ldr	r3, [r7, #12]
 801e906:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 801e908:	60bb      	str	r3, [r7, #8]
 801e90a:	68f3      	ldr	r3, [r6, #12]
 801e90c:	60b3      	str	r3, [r6, #8]
 801e90e:	68d3      	ldr	r3, [r2, #12]
 801e910:	6093      	str	r3, [r2, #8]
 801e912:	b055      	add	sp, #340	; 0x154
 801e914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e918:	e9d6 2102 	ldrd	r2, r1, [r6, #8]
 801e91c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801e91e:	fb03 2314 	mls	r3, r3, r4, r2
 801e922:	4299      	cmp	r1, r3
 801e924:	d901      	bls.n	801e92a <forward_conv2d_nl_pool_integer_SSSA_ch+0x52e>
 801e926:	6870      	ldr	r0, [r6, #4]
 801e928:	4403      	add	r3, r0
 801e92a:	4299      	cmp	r1, r3
 801e92c:	d212      	bcs.n	801e954 <forward_conv2d_nl_pool_integer_SSSA_ch+0x558>
 801e92e:	9834      	ldr	r0, [sp, #208]	; 0xd0
 801e930:	4284      	cmp	r4, r0
 801e932:	d00f      	beq.n	801e954 <forward_conv2d_nl_pool_integer_SSSA_ch+0x558>
 801e934:	6870      	ldr	r0, [r6, #4]
 801e936:	4401      	add	r1, r0
 801e938:	428b      	cmp	r3, r1
 801e93a:	d20b      	bcs.n	801e954 <forward_conv2d_nl_pool_integer_SSSA_ch+0x558>
 801e93c:	3a01      	subs	r2, #1
 801e93e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801e940:	f813 1b01 	ldrb.w	r1, [r3], #1
 801e944:	f802 1f01 	strb.w	r1, [r2, #1]!
 801e948:	68f1      	ldr	r1, [r6, #12]
 801e94a:	6870      	ldr	r0, [r6, #4]
 801e94c:	4401      	add	r1, r0
 801e94e:	428b      	cmp	r3, r1
 801e950:	d3f6      	bcc.n	801e940 <forward_conv2d_nl_pool_integer_SSSA_ch+0x544>
 801e952:	9513      	str	r5, [sp, #76]	; 0x4c
 801e954:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801e956:	b2a4      	uxth	r4, r4
 801e958:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801e95a:	4413      	add	r3, r2
 801e95c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801e95e:	1b1b      	subs	r3, r3, r4
 801e960:	4414      	add	r4, r2
 801e962:	b21b      	sxth	r3, r3
 801e964:	b224      	sxth	r4, r4
 801e966:	9325      	str	r3, [sp, #148]	; 0x94
 801e968:	e76a      	b.n	801e840 <forward_conv2d_nl_pool_integer_SSSA_ch+0x444>
 801e96a:	4670      	mov	r0, lr
 801e96c:	e694      	b.n	801e698 <forward_conv2d_nl_pool_integer_SSSA_ch+0x29c>
 801e96e:	9218      	str	r2, [sp, #96]	; 0x60
 801e970:	e68a      	b.n	801e688 <forward_conv2d_nl_pool_integer_SSSA_ch+0x28c>
 801e972:	9118      	str	r1, [sp, #96]	; 0x60
 801e974:	e688      	b.n	801e688 <forward_conv2d_nl_pool_integer_SSSA_ch+0x28c>
 801e976:	f8d0 a020 	ldr.w	sl, [r0, #32]
 801e97a:	f1ba 0f00 	cmp.w	sl, #0
 801e97e:	f43f adc4 	beq.w	801e50a <forward_conv2d_nl_pool_integer_SSSA_ch+0x10e>
 801e982:	f8da a008 	ldr.w	sl, [sl, #8]
 801e986:	e5c0      	b.n	801e50a <forward_conv2d_nl_pool_integer_SSSA_ch+0x10e>
 801e988:	6823      	ldr	r3, [r4, #0]
 801e98a:	e557      	b.n	801e43c <forward_conv2d_nl_pool_integer_SSSA_ch+0x40>
 801e98c:	931b      	str	r3, [sp, #108]	; 0x6c
 801e98e:	e54d      	b.n	801e42c <forward_conv2d_nl_pool_integer_SSSA_ch+0x30>
 801e990:	9216      	str	r2, [sp, #88]	; 0x58
 801e992:	e66a      	b.n	801e66a <forward_conv2d_nl_pool_integer_SSSA_ch+0x26e>
 801e994:	9016      	str	r0, [sp, #88]	; 0x58
 801e996:	e668      	b.n	801e66a <forward_conv2d_nl_pool_integer_SSSA_ch+0x26e>
 801e998:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e99a:	009b      	lsls	r3, r3, #2
 801e99c:	e6b0      	b.n	801e700 <forward_conv2d_nl_pool_integer_SSSA_ch+0x304>
 801e99e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e9a0:	fb05 f503 	mul.w	r5, r5, r3
 801e9a4:	2317      	movs	r3, #23
 801e9a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e9aa:	932c      	str	r3, [sp, #176]	; 0xb0
 801e9ac:	3501      	adds	r5, #1
 801e9ae:	e69f      	b.n	801e6f0 <forward_conv2d_nl_pool_integer_SSSA_ch+0x2f4>
 801e9b0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801e9b2:	f1bc 0f00 	cmp.w	ip, #0
 801e9b6:	fb05 f303 	mul.w	r3, r5, r3
 801e9ba:	bf14      	ite	ne
 801e9bc:	2516      	movne	r5, #22
 801e9be:	2518      	moveq	r5, #24
 801e9c0:	fb01 f103 	mul.w	r1, r1, r3
 801e9c4:	952c      	str	r5, [sp, #176]	; 0xb0
 801e9c6:	0049      	lsls	r1, r1, #1
 801e9c8:	f5b1 5fa0 	cmp.w	r1, #5120	; 0x1400
 801e9cc:	bfa8      	it	ge
 801e9ce:	f44f 51a0 	movge.w	r1, #5120	; 0x1400
 801e9d2:	f1bc 0f00 	cmp.w	ip, #0
 801e9d6:	f47f ae8a 	bne.w	801e6ee <forward_conv2d_nl_pool_integer_SSSA_ch+0x2f2>
 801e9da:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801e9dc:	195d      	adds	r5, r3, r5
 801e9de:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 801e9e2:	e685      	b.n	801e6f0 <forward_conv2d_nl_pool_integer_SSSA_ch+0x2f4>
 801e9e4:	00000000 	.word	0x00000000
 801e9e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801e9ea:	b913      	cbnz	r3, 801e9f2 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5f6>
 801e9ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e9ee:	429c      	cmp	r4, r3
 801e9f0:	d07c      	beq.n	801eaec <forward_conv2d_nl_pool_integer_SSSA_ch+0x6f0>
 801e9f2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801e9f4:	2201      	movs	r2, #1
 801e9f6:	9926      	ldr	r1, [sp, #152]	; 0x98
 801e9f8:	9510      	str	r5, [sp, #64]	; 0x40
 801e9fa:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801e9fc:	920f      	str	r2, [sp, #60]	; 0x3c
 801e9fe:	fa1f f288 	uxth.w	r2, r8
 801ea02:	910e      	str	r1, [sp, #56]	; 0x38
 801ea04:	68b8      	ldr	r0, [r7, #8]
 801ea06:	950c      	str	r5, [sp, #48]	; 0x30
 801ea08:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801ea0a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ea0c:	950b      	str	r5, [sp, #44]	; 0x2c
 801ea0e:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 801ea10:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801ea12:	950a      	str	r5, [sp, #40]	; 0x28
 801ea14:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801ea16:	900d      	str	r0, [sp, #52]	; 0x34
 801ea18:	4650      	mov	r0, sl
 801ea1a:	9509      	str	r5, [sp, #36]	; 0x24
 801ea1c:	9d24      	ldr	r5, [sp, #144]	; 0x90
 801ea1e:	9508      	str	r5, [sp, #32]
 801ea20:	9d21      	ldr	r5, [sp, #132]	; 0x84
 801ea22:	9507      	str	r5, [sp, #28]
 801ea24:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801ea26:	9506      	str	r5, [sp, #24]
 801ea28:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801ea2a:	9505      	str	r5, [sp, #20]
 801ea2c:	9d22      	ldr	r5, [sp, #136]	; 0x88
 801ea2e:	9504      	str	r5, [sp, #16]
 801ea30:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801ea32:	9503      	str	r5, [sp, #12]
 801ea34:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801ea36:	9502      	str	r5, [sp, #8]
 801ea38:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801ea3a:	9501      	str	r5, [sp, #4]
 801ea3c:	9d19      	ldr	r5, [sp, #100]	; 0x64
 801ea3e:	9500      	str	r5, [sp, #0]
 801ea40:	f001 fd62 	bl	8020508 <st_sssa8_ch_convolve>
 801ea44:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ea46:	991f      	ldr	r1, [sp, #124]	; 0x7c
 801ea48:	428b      	cmp	r3, r1
 801ea4a:	f47f aee2 	bne.w	801e812 <forward_conv2d_nl_pool_integer_SSSA_ch+0x416>
 801ea4e:	f04f 0800 	mov.w	r8, #0
 801ea52:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ea54:	f8cd 809c 	str.w	r8, [sp, #156]	; 0x9c
 801ea58:	2b00      	cmp	r3, #0
 801ea5a:	f43f aee3 	beq.w	801e824 <forward_conv2d_nl_pool_integer_SSSA_ch+0x428>
 801ea5e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801ea60:	1a9b      	subs	r3, r3, r2
 801ea62:	d504      	bpl.n	801ea6e <forward_conv2d_nl_pool_integer_SSSA_ch+0x672>
 801ea64:	9914      	ldr	r1, [sp, #80]	; 0x50
 801ea66:	1a52      	subs	r2, r2, r1
 801ea68:	9936      	ldr	r1, [sp, #216]	; 0xd8
 801ea6a:	fb01 aa02 	mla	sl, r1, r2, sl
 801ea6e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ea72:	b29b      	uxth	r3, r3
 801ea74:	9314      	str	r3, [sp, #80]	; 0x50
 801ea76:	e6d7      	b.n	801e828 <forward_conv2d_nl_pool_integer_SSSA_ch+0x42c>
 801ea78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ea7a:	b913      	cbnz	r3, 801ea82 <forward_conv2d_nl_pool_integer_SSSA_ch+0x686>
 801ea7c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801ea7e:	429c      	cmp	r4, r3
 801ea80:	d02b      	beq.n	801eada <forward_conv2d_nl_pool_integer_SSSA_ch+0x6de>
 801ea82:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801ea84:	2201      	movs	r2, #1
 801ea86:	9926      	ldr	r1, [sp, #152]	; 0x98
 801ea88:	9510      	str	r5, [sp, #64]	; 0x40
 801ea8a:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801ea8c:	920f      	str	r2, [sp, #60]	; 0x3c
 801ea8e:	fa1f f288 	uxth.w	r2, r8
 801ea92:	910e      	str	r1, [sp, #56]	; 0x38
 801ea94:	68b8      	ldr	r0, [r7, #8]
 801ea96:	950c      	str	r5, [sp, #48]	; 0x30
 801ea98:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801ea9a:	900d      	str	r0, [sp, #52]	; 0x34
 801ea9c:	4650      	mov	r0, sl
 801ea9e:	950b      	str	r5, [sp, #44]	; 0x2c
 801eaa0:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 801eaa2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801eaa4:	950a      	str	r5, [sp, #40]	; 0x28
 801eaa6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801eaa8:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801eaaa:	9509      	str	r5, [sp, #36]	; 0x24
 801eaac:	9d24      	ldr	r5, [sp, #144]	; 0x90
 801eaae:	9508      	str	r5, [sp, #32]
 801eab0:	9d21      	ldr	r5, [sp, #132]	; 0x84
 801eab2:	9507      	str	r5, [sp, #28]
 801eab4:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801eab6:	9506      	str	r5, [sp, #24]
 801eab8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801eaba:	9505      	str	r5, [sp, #20]
 801eabc:	9d22      	ldr	r5, [sp, #136]	; 0x88
 801eabe:	9504      	str	r5, [sp, #16]
 801eac0:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801eac2:	9503      	str	r5, [sp, #12]
 801eac4:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801eac6:	9502      	str	r5, [sp, #8]
 801eac8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801eaca:	9501      	str	r5, [sp, #4]
 801eacc:	9d19      	ldr	r5, [sp, #100]	; 0x64
 801eace:	9500      	str	r5, [sp, #0]
 801ead0:	f000 ff2a 	bl	801f928 <st_sssa8_ch_convolve_dw>
 801ead4:	e698      	b.n	801e808 <forward_conv2d_nl_pool_integer_SSSA_ch+0x40c>
 801ead6:	9513      	str	r5, [sp, #76]	; 0x4c
 801ead8:	e49f      	b.n	801e41a <forward_conv2d_nl_pool_integer_SSSA_ch+0x1e>
 801eada:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801eadc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801eade:	9300      	str	r3, [sp, #0]
 801eae0:	9915      	ldr	r1, [sp, #84]	; 0x54
 801eae2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801eae4:	9819      	ldr	r0, [sp, #100]	; 0x64
 801eae6:	f000 fe61 	bl	801f7ac <st_sssa8_ch_conv_dw_Wadapt>
 801eaea:	e7ca      	b.n	801ea82 <forward_conv2d_nl_pool_integer_SSSA_ch+0x686>
 801eaec:	9924      	ldr	r1, [sp, #144]	; 0x90
 801eaee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801eaf0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801eaf2:	9101      	str	r1, [sp, #4]
 801eaf4:	9303      	str	r3, [sp, #12]
 801eaf6:	9202      	str	r2, [sp, #8]
 801eaf8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801eafa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801eafc:	e9dd 1019 	ldrd	r1, r0, [sp, #100]	; 0x64
 801eb00:	9000      	str	r0, [sp, #0]
 801eb02:	981d      	ldr	r0, [sp, #116]	; 0x74
 801eb04:	f001 fc78 	bl	80203f8 <st_sssa8_ch_convolve_rank1upd>
 801eb08:	e773      	b.n	801e9f2 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5f6>
 801eb0a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801eb0c:	464b      	mov	r3, r9
 801eb0e:	9915      	ldr	r1, [sp, #84]	; 0x54
 801eb10:	9819      	ldr	r0, [sp, #100]	; 0x64
 801eb12:	f002 fe6b 	bl	80217ec <st_sssa8_ch_convolve_1x1_WeightsPrefetch>
 801eb16:	e64e      	b.n	801e7b6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x3ba>
 801eb18:	f10d 09fc 	add.w	r9, sp, #252	; 0xfc
 801eb1c:	e64b      	b.n	801e7b6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x3ba>
 801eb1e:	9318      	str	r3, [sp, #96]	; 0x60
 801eb20:	e5b2      	b.n	801e688 <forward_conv2d_nl_pool_integer_SSSA_ch+0x28c>
 801eb22:	9316      	str	r3, [sp, #88]	; 0x58
 801eb24:	e5a1      	b.n	801e66a <forward_conv2d_nl_pool_integer_SSSA_ch+0x26e>
 801eb26:	4904      	ldr	r1, [pc, #16]	; (801eb38 <forward_conv2d_nl_pool_integer_SSSA_ch+0x73c>)
 801eb28:	f8cd b078 	str.w	fp, [sp, #120]	; 0x78
 801eb2c:	9130      	str	r1, [sp, #192]	; 0xc0
 801eb2e:	e4a2      	b.n	801e476 <forward_conv2d_nl_pool_integer_SSSA_ch+0x7a>
 801eb30:	4622      	mov	r2, r4
 801eb32:	e48e      	b.n	801e452 <forward_conv2d_nl_pool_integer_SSSA_ch+0x56>
 801eb34:	2200      	movs	r2, #0
 801eb36:	e48c      	b.n	801e452 <forward_conv2d_nl_pool_integer_SSSA_ch+0x56>
 801eb38:	0801de69 	.word	0x0801de69

0801eb3c <forward_dense_integer_SSSA>:
 801eb3c:	6983      	ldr	r3, [r0, #24]
 801eb3e:	8818      	ldrh	r0, [r3, #0]
 801eb40:	2800      	cmp	r0, #0
 801eb42:	f000 80b2 	beq.w	801ecaa <forward_dense_integer_SSSA+0x16e>
 801eb46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb4a:	685c      	ldr	r4, [r3, #4]
 801eb4c:	b093      	sub	sp, #76	; 0x4c
 801eb4e:	6863      	ldr	r3, [r4, #4]
 801eb50:	b103      	cbz	r3, 801eb54 <forward_dense_integer_SSSA+0x18>
 801eb52:	681b      	ldr	r3, [r3, #0]
 801eb54:	2801      	cmp	r0, #1
 801eb56:	f240 809f 	bls.w	801ec98 <forward_dense_integer_SSSA+0x15c>
 801eb5a:	6922      	ldr	r2, [r4, #16]
 801eb5c:	b102      	cbz	r2, 801eb60 <forward_dense_integer_SSSA+0x24>
 801eb5e:	6812      	ldr	r2, [r2, #0]
 801eb60:	2802      	cmp	r0, #2
 801eb62:	f000 809f 	beq.w	801eca4 <forward_dense_integer_SSSA+0x168>
 801eb66:	69e5      	ldr	r5, [r4, #28]
 801eb68:	2d00      	cmp	r5, #0
 801eb6a:	f000 80ed 	beq.w	801ed48 <forward_dense_integer_SSSA+0x20c>
 801eb6e:	6829      	ldr	r1, [r5, #0]
 801eb70:	f114 0618 	adds.w	r6, r4, #24
 801eb74:	d007      	beq.n	801eb86 <forward_dense_integer_SSSA+0x4a>
 801eb76:	8b26      	ldrh	r6, [r4, #24]
 801eb78:	2e01      	cmp	r6, #1
 801eb7a:	f240 80d8 	bls.w	801ed2e <forward_dense_integer_SSSA+0x1f2>
 801eb7e:	2d00      	cmp	r5, #0
 801eb80:	f000 80cc 	beq.w	801ed1c <forward_dense_integer_SSSA+0x1e0>
 801eb84:	686e      	ldr	r6, [r5, #4]
 801eb86:	2803      	cmp	r0, #3
 801eb88:	f000 8089 	beq.w	801ec9e <forward_dense_integer_SSSA+0x162>
 801eb8c:	68d0      	ldr	r0, [r2, #12]
 801eb8e:	68dd      	ldr	r5, [r3, #12]
 801eb90:	f8d0 a004 	ldr.w	sl, [r0, #4]
 801eb94:	9509      	str	r5, [sp, #36]	; 0x24
 801eb96:	fa1f f58a 	uxth.w	r5, sl
 801eb9a:	69b7      	ldr	r7, [r6, #24]
 801eb9c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801eb9e:	950f      	str	r5, [sp, #60]	; 0x3c
 801eba0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801eba2:	e9d0 0402 	ldrd	r0, r4, [r0, #8]
 801eba6:	f8d5 b004 	ldr.w	fp, [r5, #4]
 801ebaa:	fb00 f904 	mul.w	r9, r0, r4
 801ebae:	68bd      	ldr	r5, [r7, #8]
 801ebb0:	fa1f f08b 	uxth.w	r0, fp
 801ebb4:	699c      	ldr	r4, [r3, #24]
 801ebb6:	950e      	str	r5, [sp, #56]	; 0x38
 801ebb8:	900d      	str	r0, [sp, #52]	; 0x34
 801ebba:	6990      	ldr	r0, [r2, #24]
 801ebbc:	2e00      	cmp	r6, #0
 801ebbe:	f000 80c5 	beq.w	801ed4c <forward_dense_integer_SSSA+0x210>
 801ebc2:	6835      	ldr	r5, [r6, #0]
 801ebc4:	2d00      	cmp	r5, #0
 801ebc6:	f000 809d 	beq.w	801ed04 <forward_dense_integer_SSSA+0x1c8>
 801ebca:	69ad      	ldr	r5, [r5, #24]
 801ebcc:	68ad      	ldr	r5, [r5, #8]
 801ebce:	9509      	str	r5, [sp, #36]	; 0x24
 801ebd0:	681f      	ldr	r7, [r3, #0]
 801ebd2:	698b      	ldr	r3, [r1, #24]
 801ebd4:	6812      	ldr	r2, [r2, #0]
 801ebd6:	689b      	ldr	r3, [r3, #8]
 801ebd8:	68a5      	ldr	r5, [r4, #8]
 801ebda:	6886      	ldr	r6, [r0, #8]
 801ebdc:	930a      	str	r3, [sp, #40]	; 0x28
 801ebde:	6809      	ldr	r1, [r1, #0]
 801ebe0:	2f00      	cmp	r7, #0
 801ebe2:	d071      	beq.n	801ecc8 <forward_dense_integer_SSSA+0x18c>
 801ebe4:	6878      	ldr	r0, [r7, #4]
 801ebe6:	4604      	mov	r4, r0
 801ebe8:	2800      	cmp	r0, #0
 801ebea:	d060      	beq.n	801ecae <forward_dense_integer_SSSA+0x172>
 801ebec:	f8b7 c002 	ldrh.w	ip, [r7, #2]
 801ebf0:	f1bc 0f00 	cmp.w	ip, #0
 801ebf4:	f000 8088 	beq.w	801ed08 <forward_dense_integer_SSSA+0x1cc>
 801ebf8:	6803      	ldr	r3, [r0, #0]
 801ebfa:	edd3 7a00 	vldr	s15, [r3]
 801ebfe:	2a00      	cmp	r2, #0
 801ec00:	f000 80ac 	beq.w	801ed5c <forward_dense_integer_SSSA+0x220>
 801ec04:	6853      	ldr	r3, [r2, #4]
 801ec06:	2b00      	cmp	r3, #0
 801ec08:	f000 8081 	beq.w	801ed0e <forward_dense_integer_SSSA+0x1d2>
 801ec0c:	8850      	ldrh	r0, [r2, #2]
 801ec0e:	2800      	cmp	r0, #0
 801ec10:	d063      	beq.n	801ecda <forward_dense_integer_SSSA+0x19e>
 801ec12:	681c      	ldr	r4, [r3, #0]
 801ec14:	ed94 0a00 	vldr	s0, [r4]
 801ec18:	2f00      	cmp	r7, #0
 801ec1a:	f040 808a 	bne.w	801ed32 <forward_dense_integer_SSSA+0x1f6>
 801ec1e:	685b      	ldr	r3, [r3, #4]
 801ec20:	f993 3000 	ldrsb.w	r3, [r3]
 801ec24:	930b      	str	r3, [sp, #44]	; 0x2c
 801ec26:	2900      	cmp	r1, #0
 801ec28:	d048      	beq.n	801ecbc <forward_dense_integer_SSSA+0x180>
 801ec2a:	684b      	ldr	r3, [r1, #4]
 801ec2c:	2b00      	cmp	r3, #0
 801ec2e:	d045      	beq.n	801ecbc <forward_dense_integer_SSSA+0x180>
 801ec30:	681b      	ldr	r3, [r3, #0]
 801ec32:	2400      	movs	r4, #0
 801ec34:	f10d 0842 	add.w	r8, sp, #66	; 0x42
 801ec38:	f8ad 4042 	strh.w	r4, [sp, #66]	; 0x42
 801ec3c:	9411      	str	r4, [sp, #68]	; 0x44
 801ec3e:	4640      	mov	r0, r8
 801ec40:	ed93 7a00 	vldr	s14, [r3]
 801ec44:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ec48:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801ec4c:	f000 fcd4 	bl	801f5f8 <align_factor>
 801ec50:	9011      	str	r0, [sp, #68]	; 0x44
 801ec52:	f1b9 0f00 	cmp.w	r9, #0
 801ec56:	d01c      	beq.n	801ec92 <forward_dense_integer_SSSA+0x156>
 801ec58:	fa1f fb8b 	uxth.w	fp, fp
 801ec5c:	970c      	str	r7, [sp, #48]	; 0x30
 801ec5e:	fa1f fa8a 	uxth.w	sl, sl
 801ec62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ec64:	af11      	add	r7, sp, #68	; 0x44
 801ec66:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801ec68:	3401      	adds	r4, #1
 801ec6a:	980c      	ldr	r0, [sp, #48]	; 0x30
 801ec6c:	9103      	str	r1, [sp, #12]
 801ec6e:	9002      	str	r0, [sp, #8]
 801ec70:	4628      	mov	r0, r5
 801ec72:	990a      	ldr	r1, [sp, #40]	; 0x28
 801ec74:	445d      	add	r5, fp
 801ec76:	f8cd 8004 	str.w	r8, [sp, #4]
 801ec7a:	9700      	str	r7, [sp, #0]
 801ec7c:	e9cd 6305 	strd	r6, r3, [sp, #20]
 801ec80:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801ec84:	4456      	add	r6, sl
 801ec86:	9204      	str	r2, [sp, #16]
 801ec88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ec8a:	f002 fe4b 	bl	8021924 <st_sssa8_fully_connected>
 801ec8e:	454c      	cmp	r4, r9
 801ec90:	d1e7      	bne.n	801ec62 <forward_dense_integer_SSSA+0x126>
 801ec92:	b013      	add	sp, #76	; 0x4c
 801ec94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ec98:	2300      	movs	r3, #0
 801ec9a:	685b      	ldr	r3, [r3, #4]
 801ec9c:	deff      	udf	#255	; 0xff
 801ec9e:	2300      	movs	r3, #0
 801eca0:	685b      	ldr	r3, [r3, #4]
 801eca2:	deff      	udf	#255	; 0xff
 801eca4:	2300      	movs	r3, #0
 801eca6:	685b      	ldr	r3, [r3, #4]
 801eca8:	deff      	udf	#255	; 0xff
 801ecaa:	6843      	ldr	r3, [r0, #4]
 801ecac:	deff      	udf	#255	; 0xff
 801ecae:	2a00      	cmp	r2, #0
 801ecb0:	d036      	beq.n	801ed20 <forward_dense_integer_SSSA+0x1e4>
 801ecb2:	6853      	ldr	r3, [r2, #4]
 801ecb4:	b963      	cbnz	r3, 801ecd0 <forward_dense_integer_SSSA+0x194>
 801ecb6:	eddf 7a2c 	vldr	s15, [pc, #176]	; 801ed68 <forward_dense_integer_SSSA+0x22c>
 801ecba:	e011      	b.n	801ece0 <forward_dense_integer_SSSA+0x1a4>
 801ecbc:	2300      	movs	r3, #0
 801ecbe:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801ecc2:	9311      	str	r3, [sp, #68]	; 0x44
 801ecc4:	681b      	ldr	r3, [r3, #0]
 801ecc6:	deff      	udf	#255	; 0xff
 801ecc8:	b352      	cbz	r2, 801ed20 <forward_dense_integer_SSSA+0x1e4>
 801ecca:	6853      	ldr	r3, [r2, #4]
 801eccc:	2b00      	cmp	r3, #0
 801ecce:	d03f      	beq.n	801ed50 <forward_dense_integer_SSSA+0x214>
 801ecd0:	8850      	ldrh	r0, [r2, #2]
 801ecd2:	eddf 7a25 	vldr	s15, [pc, #148]	; 801ed68 <forward_dense_integer_SSSA+0x22c>
 801ecd6:	2800      	cmp	r0, #0
 801ecd8:	d19b      	bne.n	801ec12 <forward_dense_integer_SSSA+0xd6>
 801ecda:	2f00      	cmp	r7, #0
 801ecdc:	d03b      	beq.n	801ed56 <forward_dense_integer_SSSA+0x21a>
 801ecde:	6878      	ldr	r0, [r7, #4]
 801ece0:	4604      	mov	r4, r0
 801ece2:	b358      	cbz	r0, 801ed3c <forward_dense_integer_SSSA+0x200>
 801ece4:	ed9f 0a20 	vldr	s0, [pc, #128]	; 801ed68 <forward_dense_integer_SSSA+0x22c>
 801ece8:	887f      	ldrh	r7, [r7, #2]
 801ecea:	b127      	cbz	r7, 801ecf6 <forward_dense_integer_SSSA+0x1ba>
 801ecec:	6863      	ldr	r3, [r4, #4]
 801ecee:	f993 7000 	ldrsb.w	r7, [r3]
 801ecf2:	b33a      	cbz	r2, 801ed44 <forward_dense_integer_SSSA+0x208>
 801ecf4:	6853      	ldr	r3, [r2, #4]
 801ecf6:	b11b      	cbz	r3, 801ed00 <forward_dense_integer_SSSA+0x1c4>
 801ecf8:	8850      	ldrh	r0, [r2, #2]
 801ecfa:	2800      	cmp	r0, #0
 801ecfc:	d18f      	bne.n	801ec1e <forward_dense_integer_SSSA+0xe2>
 801ecfe:	2300      	movs	r3, #0
 801ed00:	930b      	str	r3, [sp, #44]	; 0x2c
 801ed02:	e790      	b.n	801ec26 <forward_dense_integer_SSSA+0xea>
 801ed04:	9509      	str	r5, [sp, #36]	; 0x24
 801ed06:	e763      	b.n	801ebd0 <forward_dense_integer_SSSA+0x94>
 801ed08:	eddf 7a17 	vldr	s15, [pc, #92]	; 801ed68 <forward_dense_integer_SSSA+0x22c>
 801ed0c:	e777      	b.n	801ebfe <forward_dense_integer_SSSA+0xc2>
 801ed0e:	2f00      	cmp	r7, #0
 801ed10:	d1e6      	bne.n	801ece0 <forward_dense_integer_SSSA+0x1a4>
 801ed12:	2700      	movs	r7, #0
 801ed14:	ed9f 0a14 	vldr	s0, [pc, #80]	; 801ed68 <forward_dense_integer_SSSA+0x22c>
 801ed18:	970b      	str	r7, [sp, #44]	; 0x2c
 801ed1a:	e784      	b.n	801ec26 <forward_dense_integer_SSSA+0xea>
 801ed1c:	462e      	mov	r6, r5
 801ed1e:	e732      	b.n	801eb86 <forward_dense_integer_SSSA+0x4a>
 801ed20:	eddf 7a11 	vldr	s15, [pc, #68]	; 801ed68 <forward_dense_integer_SSSA+0x22c>
 801ed24:	4617      	mov	r7, r2
 801ed26:	920b      	str	r2, [sp, #44]	; 0x2c
 801ed28:	eeb0 0a67 	vmov.f32	s0, s15
 801ed2c:	e77b      	b.n	801ec26 <forward_dense_integer_SSSA+0xea>
 801ed2e:	2600      	movs	r6, #0
 801ed30:	e729      	b.n	801eb86 <forward_dense_integer_SSSA+0x4a>
 801ed32:	687c      	ldr	r4, [r7, #4]
 801ed34:	2c00      	cmp	r4, #0
 801ed36:	d1d7      	bne.n	801ece8 <forward_dense_integer_SSSA+0x1ac>
 801ed38:	4627      	mov	r7, r4
 801ed3a:	e7de      	b.n	801ecfa <forward_dense_integer_SSSA+0x1be>
 801ed3c:	4607      	mov	r7, r0
 801ed3e:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 801ed68 <forward_dense_integer_SSSA+0x22c>
 801ed42:	e7d8      	b.n	801ecf6 <forward_dense_integer_SSSA+0x1ba>
 801ed44:	920b      	str	r2, [sp, #44]	; 0x2c
 801ed46:	e76e      	b.n	801ec26 <forward_dense_integer_SSSA+0xea>
 801ed48:	4629      	mov	r1, r5
 801ed4a:	e711      	b.n	801eb70 <forward_dense_integer_SSSA+0x34>
 801ed4c:	9609      	str	r6, [sp, #36]	; 0x24
 801ed4e:	e73f      	b.n	801ebd0 <forward_dense_integer_SSSA+0x94>
 801ed50:	eddf 7a05 	vldr	s15, [pc, #20]	; 801ed68 <forward_dense_integer_SSSA+0x22c>
 801ed54:	e7dd      	b.n	801ed12 <forward_dense_integer_SSSA+0x1d6>
 801ed56:	ed9f 0a04 	vldr	s0, [pc, #16]	; 801ed68 <forward_dense_integer_SSSA+0x22c>
 801ed5a:	e7d0      	b.n	801ecfe <forward_dense_integer_SSSA+0x1c2>
 801ed5c:	f1bc 0f00 	cmp.w	ip, #0
 801ed60:	d0d7      	beq.n	801ed12 <forward_dense_integer_SSSA+0x1d6>
 801ed62:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801ed68 <forward_dense_integer_SSSA+0x22c>
 801ed66:	e7c1      	b.n	801ecec <forward_dense_integer_SSSA+0x1b0>
 801ed68:	00000000 	.word	0x00000000

0801ed6c <nl_func_sm_array_f32>:
 801ed6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed70:	ed2d 8b04 	vpush	{d8-d9}
 801ed74:	b089      	sub	sp, #36	; 0x24
 801ed76:	698f      	ldr	r7, [r1, #24]
 801ed78:	6986      	ldr	r6, [r0, #24]
 801ed7a:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801ed7e:	68bd      	ldr	r5, [r7, #8]
 801ed80:	eba2 040e 	sub.w	r4, r2, lr
 801ed84:	f8dd c05c 	ldr.w	ip, [sp, #92]	; 0x5c
 801ed88:	9602      	str	r6, [sp, #8]
 801ed8a:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 801ed8e:	68fc      	ldr	r4, [r7, #12]
 801ed90:	68b6      	ldr	r6, [r6, #8]
 801ed92:	eba2 020c 	sub.w	r2, r2, ip
 801ed96:	42a5      	cmp	r5, r4
 801ed98:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 801ed9c:	d351      	bcc.n	801ee42 <nl_func_sm_array_f32+0xd6>
 801ed9e:	9303      	str	r3, [sp, #12]
 801eda0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801eda4:	009b      	lsls	r3, r3, #2
 801eda6:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 801edaa:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801edae:	f1ce 0200 	rsb	r2, lr, #0
 801edb2:	9301      	str	r3, [sp, #4]
 801edb4:	f1cc 0300 	rsb	r3, ip, #0
 801edb8:	9204      	str	r2, [sp, #16]
 801edba:	e9cd 1006 	strd	r1, r0, [sp, #24]
 801edbe:	9305      	str	r3, [sp, #20]
 801edc0:	9b02      	ldr	r3, [sp, #8]
 801edc2:	9a07      	ldr	r2, [sp, #28]
 801edc4:	60bd      	str	r5, [r7, #8]
 801edc6:	609e      	str	r6, [r3, #8]
 801edc8:	9b06      	ldr	r3, [sp, #24]
 801edca:	6992      	ldr	r2, [r2, #24]
 801edcc:	699b      	ldr	r3, [r3, #24]
 801edce:	6894      	ldr	r4, [r2, #8]
 801edd0:	9a03      	ldr	r2, [sp, #12]
 801edd2:	689b      	ldr	r3, [r3, #8]
 801edd4:	2a01      	cmp	r2, #1
 801edd6:	ed93 8a00 	vldr	s16, [r3]
 801edda:	d93b      	bls.n	801ee54 <nl_func_sm_array_f32+0xe8>
 801eddc:	9901      	ldr	r1, [sp, #4]
 801edde:	1d1a      	adds	r2, r3, #4
 801ede0:	eb03 0b01 	add.w	fp, r3, r1
 801ede4:	ecf2 7a01 	vldmia	r2!, {s15}
 801ede8:	4593      	cmp	fp, r2
 801edea:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
 801edee:	d1f9      	bne.n	801ede4 <nl_func_sm_array_f32+0x78>
 801edf0:	469a      	mov	sl, r3
 801edf2:	46a1      	mov	r9, r4
 801edf4:	46a0      	mov	r8, r4
 801edf6:	eddf 8a1a 	vldr	s17, [pc, #104]	; 801ee60 <nl_func_sm_array_f32+0xf4>
 801edfa:	ecba 0a01 	vldmia	sl!, {s0}
 801edfe:	ee30 0a48 	vsub.f32	s0, s0, s16
 801ee02:	f008 ffd1 	bl	8027da8 <expf>
 801ee06:	45d3      	cmp	fp, sl
 801ee08:	eca8 0a01 	vstmia	r8!, {s0}
 801ee0c:	ee78 8a80 	vadd.f32	s17, s17, s0
 801ee10:	d1f3      	bne.n	801edfa <nl_func_sm_array_f32+0x8e>
 801ee12:	eef5 8a40 	vcmp.f32	s17, #0.0
 801ee16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ee1a:	d00b      	beq.n	801ee34 <nl_func_sm_array_f32+0xc8>
 801ee1c:	ee89 7a28 	vdiv.f32	s14, s18, s17
 801ee20:	9b01      	ldr	r3, [sp, #4]
 801ee22:	441c      	add	r4, r3
 801ee24:	edd9 7a00 	vldr	s15, [r9]
 801ee28:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ee2c:	ece9 7a01 	vstmia	r9!, {s15}
 801ee30:	454c      	cmp	r4, r9
 801ee32:	d1f7      	bne.n	801ee24 <nl_func_sm_array_f32+0xb8>
 801ee34:	9b04      	ldr	r3, [sp, #16]
 801ee36:	68fc      	ldr	r4, [r7, #12]
 801ee38:	441d      	add	r5, r3
 801ee3a:	9b05      	ldr	r3, [sp, #20]
 801ee3c:	42ac      	cmp	r4, r5
 801ee3e:	441e      	add	r6, r3
 801ee40:	d9be      	bls.n	801edc0 <nl_func_sm_array_f32+0x54>
 801ee42:	9a02      	ldr	r2, [sp, #8]
 801ee44:	60bc      	str	r4, [r7, #8]
 801ee46:	68d3      	ldr	r3, [r2, #12]
 801ee48:	6093      	str	r3, [r2, #8]
 801ee4a:	b009      	add	sp, #36	; 0x24
 801ee4c:	ecbd 8b04 	vpop	{d8-d9}
 801ee50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee54:	2a00      	cmp	r2, #0
 801ee56:	d0ed      	beq.n	801ee34 <nl_func_sm_array_f32+0xc8>
 801ee58:	9a01      	ldr	r2, [sp, #4]
 801ee5a:	eb03 0b02 	add.w	fp, r3, r2
 801ee5e:	e7c7      	b.n	801edf0 <nl_func_sm_array_f32+0x84>
 801ee60:	00000000 	.word	0x00000000

0801ee64 <forward_sm>:
 801ee64:	6982      	ldr	r2, [r0, #24]
 801ee66:	8813      	ldrh	r3, [r2, #0]
 801ee68:	b333      	cbz	r3, 801eeb8 <forward_sm+0x54>
 801ee6a:	6852      	ldr	r2, [r2, #4]
 801ee6c:	6851      	ldr	r1, [r2, #4]
 801ee6e:	b101      	cbz	r1, 801ee72 <forward_sm+0xe>
 801ee70:	6809      	ldr	r1, [r1, #0]
 801ee72:	2b01      	cmp	r3, #1
 801ee74:	d91d      	bls.n	801eeb2 <forward_sm+0x4e>
 801ee76:	6913      	ldr	r3, [r2, #16]
 801ee78:	b1cb      	cbz	r3, 801eeae <forward_sm+0x4a>
 801ee7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ee7c:	6818      	ldr	r0, [r3, #0]
 801ee7e:	b083      	sub	sp, #12
 801ee80:	688b      	ldr	r3, [r1, #8]
 801ee82:	68cd      	ldr	r5, [r1, #12]
 801ee84:	68c2      	ldr	r2, [r0, #12]
 801ee86:	0a1b      	lsrs	r3, r3, #8
 801ee88:	686e      	ldr	r6, [r5, #4]
 801ee8a:	6857      	ldr	r7, [r2, #4]
 801ee8c:	d016      	beq.n	801eebc <forward_sm+0x58>
 801ee8e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801ee92:	2201      	movs	r2, #1
 801ee94:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 801ee98:	429d      	cmp	r5, r3
 801ee9a:	fb04 f202 	mul.w	r2, r4, r2
 801ee9e:	d1f9      	bne.n	801ee94 <forward_sm+0x30>
 801eea0:	4633      	mov	r3, r6
 801eea2:	9701      	str	r7, [sp, #4]
 801eea4:	9600      	str	r6, [sp, #0]
 801eea6:	f7ff ff61 	bl	801ed6c <nl_func_sm_array_f32>
 801eeaa:	b003      	add	sp, #12
 801eeac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801eeae:	68db      	ldr	r3, [r3, #12]
 801eeb0:	deff      	udf	#255	; 0xff
 801eeb2:	2300      	movs	r3, #0
 801eeb4:	685b      	ldr	r3, [r3, #4]
 801eeb6:	deff      	udf	#255	; 0xff
 801eeb8:	685b      	ldr	r3, [r3, #4]
 801eeba:	deff      	udf	#255	; 0xff
 801eebc:	2201      	movs	r2, #1
 801eebe:	e7ef      	b.n	801eea0 <forward_sm+0x3c>

0801eec0 <forward_eltwise_integer_INT8>:
 801eec0:	6982      	ldr	r2, [r0, #24]
 801eec2:	8813      	ldrh	r3, [r2, #0]
 801eec4:	2b00      	cmp	r3, #0
 801eec6:	d05a      	beq.n	801ef7e <forward_eltwise_integer_INT8+0xbe>
 801eec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eecc:	ed2d 8b02 	vpush	{d8}
 801eed0:	6851      	ldr	r1, [r2, #4]
 801eed2:	b0ab      	sub	sp, #172	; 0xac
 801eed4:	684a      	ldr	r2, [r1, #4]
 801eed6:	2a00      	cmp	r2, #0
 801eed8:	f000 821a 	beq.w	801f310 <forward_eltwise_integer_INT8+0x450>
 801eedc:	e9d2 7900 	ldrd	r7, r9, [r2]
 801eee0:	2b01      	cmp	r3, #1
 801eee2:	d949      	bls.n	801ef78 <forward_eltwise_integer_INT8+0xb8>
 801eee4:	690b      	ldr	r3, [r1, #16]
 801eee6:	2b00      	cmp	r3, #0
 801eee8:	f000 81fb 	beq.w	801f2e2 <forward_eltwise_integer_INT8+0x422>
 801eeec:	f8d3 8000 	ldr.w	r8, [r3]
 801eef0:	68bb      	ldr	r3, [r7, #8]
 801eef2:	f107 0208 	add.w	r2, r7, #8
 801eef6:	f8d9 5008 	ldr.w	r5, [r9, #8]
 801eefa:	9209      	str	r2, [sp, #36]	; 0x24
 801eefc:	f3c3 2617 	ubfx	r6, r3, #8, #24
 801ef00:	ea83 0b05 	eor.w	fp, r3, r5
 801ef04:	f109 0208 	add.w	r2, r9, #8
 801ef08:	6a03      	ldr	r3, [r0, #32]
 801ef0a:	f03b 0bff 	bics.w	fp, fp, #255	; 0xff
 801ef0e:	920a      	str	r2, [sp, #40]	; 0x28
 801ef10:	69c4      	ldr	r4, [r0, #28]
 801ef12:	930c      	str	r3, [sp, #48]	; 0x30
 801ef14:	d135      	bne.n	801ef82 <forward_eltwise_integer_INT8+0xc2>
 801ef16:	2e00      	cmp	r6, #0
 801ef18:	f000 81fd 	beq.w	801f316 <forward_eltwise_integer_INT8+0x456>
 801ef1c:	1e73      	subs	r3, r6, #1
 801ef1e:	68fa      	ldr	r2, [r7, #12]
 801ef20:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 801ef24:	f852 c023 	ldr.w	ip, [r2, r3, lsl #2]
 801ef28:	f85e 1023 	ldr.w	r1, [lr, r3, lsl #2]
 801ef2c:	458c      	cmp	ip, r1
 801ef2e:	d131      	bne.n	801ef94 <forward_eltwise_integer_INT8+0xd4>
 801ef30:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 801ef34:	4618      	mov	r0, r3
 801ef36:	469a      	mov	sl, r3
 801ef38:	4431      	add	r1, r6
 801ef3a:	0089      	lsls	r1, r1, #2
 801ef3c:	eb0e 0601 	add.w	r6, lr, r1
 801ef40:	4411      	add	r1, r2
 801ef42:	4696      	mov	lr, r2
 801ef44:	2800      	cmp	r0, #0
 801ef46:	f000 81d2 	beq.w	801f2ee <forward_eltwise_integer_INT8+0x42e>
 801ef4a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801ef4e:	3801      	subs	r0, #1
 801ef50:	f856 3d04 	ldr.w	r3, [r6, #-4]!
 801ef54:	429a      	cmp	r2, r3
 801ef56:	d0f5      	beq.n	801ef44 <forward_eltwise_integer_INT8+0x84>
 801ef58:	f1bc 0f01 	cmp.w	ip, #1
 801ef5c:	4672      	mov	r2, lr
 801ef5e:	4653      	mov	r3, sl
 801ef60:	f04f 0b00 	mov.w	fp, #0
 801ef64:	d019      	beq.n	801ef9a <forward_eltwise_integer_INT8+0xda>
 801ef66:	0a2d      	lsrs	r5, r5, #8
 801ef68:	f04f 0601 	mov.w	r6, #1
 801ef6c:	f04f 0a00 	mov.w	sl, #0
 801ef70:	d121      	bne.n	801efb6 <forward_eltwise_integer_INT8+0xf6>
 801ef72:	2301      	movs	r3, #1
 801ef74:	930b      	str	r3, [sp, #44]	; 0x2c
 801ef76:	e034      	b.n	801efe2 <forward_eltwise_integer_INT8+0x122>
 801ef78:	2300      	movs	r3, #0
 801ef7a:	685b      	ldr	r3, [r3, #4]
 801ef7c:	deff      	udf	#255	; 0xff
 801ef7e:	685b      	ldr	r3, [r3, #4]
 801ef80:	deff      	udf	#255	; 0xff
 801ef82:	2e00      	cmp	r6, #0
 801ef84:	f000 81cb 	beq.w	801f31e <forward_eltwise_integer_INT8+0x45e>
 801ef88:	1e73      	subs	r3, r6, #1
 801ef8a:	68fa      	ldr	r2, [r7, #12]
 801ef8c:	f04f 0b00 	mov.w	fp, #0
 801ef90:	f852 c023 	ldr.w	ip, [r2, r3, lsl #2]
 801ef94:	f1bc 0f01 	cmp.w	ip, #1
 801ef98:	d1e5      	bne.n	801ef66 <forward_eltwise_integer_INT8+0xa6>
 801ef9a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801ef9e:	e003      	b.n	801efa8 <forward_eltwise_integer_INT8+0xe8>
 801efa0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801efa4:	2901      	cmp	r1, #1
 801efa6:	d1de      	bne.n	801ef66 <forward_eltwise_integer_INT8+0xa6>
 801efa8:	429a      	cmp	r2, r3
 801efaa:	d1f9      	bne.n	801efa0 <forward_eltwise_integer_INT8+0xe0>
 801efac:	2600      	movs	r6, #0
 801efae:	f04f 0a01 	mov.w	sl, #1
 801efb2:	0a2d      	lsrs	r5, r5, #8
 801efb4:	d0dd      	beq.n	801ef72 <forward_eltwise_integer_INT8+0xb2>
 801efb6:	1e6b      	subs	r3, r5, #1
 801efb8:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801efbc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801efc0:	2901      	cmp	r1, #1
 801efc2:	d10b      	bne.n	801efdc <forward_eltwise_integer_INT8+0x11c>
 801efc4:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 801efc8:	4429      	add	r1, r5
 801efca:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801efce:	2b00      	cmp	r3, #0
 801efd0:	d0cf      	beq.n	801ef72 <forward_eltwise_integer_INT8+0xb2>
 801efd2:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801efd6:	3b01      	subs	r3, #1
 801efd8:	2901      	cmp	r1, #1
 801efda:	d0f8      	beq.n	801efce <forward_eltwise_integer_INT8+0x10e>
 801efdc:	2300      	movs	r3, #0
 801efde:	4656      	mov	r6, sl
 801efe0:	930b      	str	r3, [sp, #44]	; 0x2c
 801efe2:	697d      	ldr	r5, [r7, #20]
 801efe4:	f240 5101 	movw	r1, #1281	; 0x501
 801efe8:	f8d8 2014 	ldr.w	r2, [r8, #20]
 801efec:	f04f 0c00 	mov.w	ip, #0
 801eff0:	686d      	ldr	r5, [r5, #4]
 801eff2:	ab1b      	add	r3, sp, #108	; 0x6c
 801eff4:	9115      	str	r1, [sp, #84]	; 0x54
 801eff6:	a815      	add	r0, sp, #84	; 0x54
 801eff8:	950d      	str	r5, [sp, #52]	; 0x34
 801effa:	9909      	ldr	r1, [sp, #36]	; 0x24
 801effc:	6855      	ldr	r5, [r2, #4]
 801effe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f000:	9316      	str	r3, [sp, #88]	; 0x58
 801f002:	f8cd c07c 	str.w	ip, [sp, #124]	; 0x7c
 801f006:	e9cd cc1b 	strd	ip, ip, [sp, #108]	; 0x6c
 801f00a:	e9cd cc1d 	strd	ip, ip, [sp, #116]	; 0x74
 801f00e:	f005 fdab 	bl	8024b68 <core_get_broadcasted_shape>
 801f012:	6839      	ldr	r1, [r7, #0]
 801f014:	f8d7 c018 	ldr.w	ip, [r7, #24]
 801f018:	f8d8 3000 	ldr.w	r3, [r8]
 801f01c:	f8d9 2000 	ldr.w	r2, [r9]
 801f020:	2900      	cmp	r1, #0
 801f022:	f000 812d 	beq.w	801f280 <forward_eltwise_integer_INT8+0x3c0>
 801f026:	6848      	ldr	r0, [r1, #4]
 801f028:	2800      	cmp	r0, #0
 801f02a:	f000 8129 	beq.w	801f280 <forward_eltwise_integer_INT8+0x3c0>
 801f02e:	884f      	ldrh	r7, [r1, #2]
 801f030:	2f00      	cmp	r7, #0
 801f032:	f000 8125 	beq.w	801f280 <forward_eltwise_integer_INT8+0x3c0>
 801f036:	6800      	ldr	r0, [r0, #0]
 801f038:	6800      	ldr	r0, [r0, #0]
 801f03a:	900f      	str	r0, [sp, #60]	; 0x3c
 801f03c:	2a00      	cmp	r2, #0
 801f03e:	f000 811d 	beq.w	801f27c <forward_eltwise_integer_INT8+0x3bc>
 801f042:	6850      	ldr	r0, [r2, #4]
 801f044:	2800      	cmp	r0, #0
 801f046:	f000 8119 	beq.w	801f27c <forward_eltwise_integer_INT8+0x3bc>
 801f04a:	8857      	ldrh	r7, [r2, #2]
 801f04c:	2f00      	cmp	r7, #0
 801f04e:	f000 8115 	beq.w	801f27c <forward_eltwise_integer_INT8+0x3bc>
 801f052:	6800      	ldr	r0, [r0, #0]
 801f054:	6800      	ldr	r0, [r0, #0]
 801f056:	9010      	str	r0, [sp, #64]	; 0x40
 801f058:	2b00      	cmp	r3, #0
 801f05a:	f000 810c 	beq.w	801f276 <forward_eltwise_integer_INT8+0x3b6>
 801f05e:	6858      	ldr	r0, [r3, #4]
 801f060:	2800      	cmp	r0, #0
 801f062:	f000 8108 	beq.w	801f276 <forward_eltwise_integer_INT8+0x3b6>
 801f066:	885f      	ldrh	r7, [r3, #2]
 801f068:	2f00      	cmp	r7, #0
 801f06a:	f000 8104 	beq.w	801f276 <forward_eltwise_integer_INT8+0x3b6>
 801f06e:	6800      	ldr	r0, [r0, #0]
 801f070:	f8d0 e000 	ldr.w	lr, [r0]
 801f074:	f8d9 7018 	ldr.w	r7, [r9, #24]
 801f078:	f8d8 0018 	ldr.w	r0, [r8, #24]
 801f07c:	68bf      	ldr	r7, [r7, #8]
 801f07e:	f8d0 9008 	ldr.w	r9, [r0, #8]
 801f082:	f8cd e044 	str.w	lr, [sp, #68]	; 0x44
 801f086:	f8dc 8008 	ldr.w	r8, [ip, #8]
 801f08a:	b141      	cbz	r1, 801f09e <forward_eltwise_integer_INT8+0x1de>
 801f08c:	6848      	ldr	r0, [r1, #4]
 801f08e:	2800      	cmp	r0, #0
 801f090:	f000 8138 	beq.w	801f304 <forward_eltwise_integer_INT8+0x444>
 801f094:	8849      	ldrh	r1, [r1, #2]
 801f096:	b111      	cbz	r1, 801f09e <forward_eltwise_integer_INT8+0x1de>
 801f098:	6841      	ldr	r1, [r0, #4]
 801f09a:	f991 1000 	ldrsb.w	r1, [r1]
 801f09e:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
 801f0a2:	b142      	cbz	r2, 801f0b6 <forward_eltwise_integer_INT8+0x1f6>
 801f0a4:	6851      	ldr	r1, [r2, #4]
 801f0a6:	2900      	cmp	r1, #0
 801f0a8:	f000 812e 	beq.w	801f308 <forward_eltwise_integer_INT8+0x448>
 801f0ac:	8852      	ldrh	r2, [r2, #2]
 801f0ae:	b112      	cbz	r2, 801f0b6 <forward_eltwise_integer_INT8+0x1f6>
 801f0b0:	684a      	ldr	r2, [r1, #4]
 801f0b2:	f992 2000 	ldrsb.w	r2, [r2]
 801f0b6:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 801f0ba:	b143      	cbz	r3, 801f0ce <forward_eltwise_integer_INT8+0x20e>
 801f0bc:	685a      	ldr	r2, [r3, #4]
 801f0be:	2a00      	cmp	r2, #0
 801f0c0:	f000 8124 	beq.w	801f30c <forward_eltwise_integer_INT8+0x44c>
 801f0c4:	885b      	ldrh	r3, [r3, #2]
 801f0c6:	b113      	cbz	r3, 801f0ce <forward_eltwise_integer_INT8+0x20e>
 801f0c8:	6853      	ldr	r3, [r2, #4]
 801f0ca:	f993 3000 	ldrsb.w	r3, [r3]
 801f0ce:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 801f0d2:	f1bb 0f00 	cmp.w	fp, #0
 801f0d6:	f040 80d5 	bne.w	801f284 <forward_eltwise_integer_INT8+0x3c4>
 801f0da:	2e00      	cmp	r6, #0
 801f0dc:	f040 80d2 	bne.w	801f284 <forward_eltwise_integer_INT8+0x3c4>
 801f0e0:	f240 5002 	movw	r0, #1282	; 0x502
 801f0e4:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 801f0e8:	f10d 0e80 	add.w	lr, sp, #128	; 0x80
 801f0ec:	f10d 0c94 	add.w	ip, sp, #148	; 0x94
 801f0f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f0f2:	4653      	mov	r3, sl
 801f0f4:	aa15      	add	r2, sp, #84	; 0x54
 801f0f6:	9017      	str	r0, [sp, #92]	; 0x5c
 801f0f8:	9019      	str	r0, [sp, #100]	; 0x64
 801f0fa:	a817      	add	r0, sp, #92	; 0x5c
 801f0fc:	f8cd e060 	str.w	lr, [sp, #96]	; 0x60
 801f100:	f8cd c068 	str.w	ip, [sp, #104]	; 0x68
 801f104:	9620      	str	r6, [sp, #128]	; 0x80
 801f106:	9625      	str	r6, [sp, #148]	; 0x94
 801f108:	e9cd 6621 	strd	r6, r6, [sp, #132]	; 0x84
 801f10c:	e9cd 6623 	strd	r6, r6, [sp, #140]	; 0x8c
 801f110:	e9cd 6626 	strd	r6, r6, [sp, #152]	; 0x98
 801f114:	e9cd 6628 	strd	r6, r6, [sp, #160]	; 0xa0
 801f118:	f005 fd50 	bl	8024bbc <core_compute_offsets_in_bytes>
 801f11c:	4653      	mov	r3, sl
 801f11e:	aa15      	add	r2, sp, #84	; 0x54
 801f120:	990a      	ldr	r1, [sp, #40]	; 0x28
 801f122:	a819      	add	r0, sp, #100	; 0x64
 801f124:	f005 fd4a 	bl	8024bbc <core_compute_offsets_in_bytes>
 801f128:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801f12a:	68d3      	ldr	r3, [r2, #12]
 801f12c:	2b00      	cmp	r3, #0
 801f12e:	f000 809d 	beq.w	801f26c <forward_eltwise_integer_INT8+0x3ac>
 801f132:	f8d2 c008 	ldr.w	ip, [r2, #8]
 801f136:	4619      	mov	r1, r3
 801f138:	eddf 8a7b 	vldr	s17, [pc, #492]	; 801f328 <forward_eltwise_integer_INT8+0x468>
 801f13c:	4663      	mov	r3, ip
 801f13e:	960a      	str	r6, [sp, #40]	; 0x28
 801f140:	2b00      	cmp	r3, #0
 801f142:	f000 80d0 	beq.w	801f2e6 <forward_eltwise_integer_INT8+0x426>
 801f146:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801f148:	f04f 0b00 	mov.w	fp, #0
 801f14c:	f3c6 2617 	ubfx	r6, r6, #8, #24
 801f150:	f04f 0a00 	mov.w	sl, #0
 801f154:	2e04      	cmp	r6, #4
 801f156:	bf8c      	ite	hi
 801f158:	6911      	ldrhi	r1, [r2, #16]
 801f15a:	2101      	movls	r1, #1
 801f15c:	458a      	cmp	sl, r1
 801f15e:	d269      	bcs.n	801f234 <forward_eltwise_integer_INT8+0x374>
 801f160:	6851      	ldr	r1, [r2, #4]
 801f162:	2900      	cmp	r1, #0
 801f164:	d055      	beq.n	801f212 <forward_eltwise_integer_INT8+0x352>
 801f166:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 801f16a:	2600      	movs	r6, #0
 801f16c:	f998 0000 	ldrsb.w	r0, [r8]
 801f170:	aa13      	add	r2, sp, #76	; 0x4c
 801f172:	f99d c039 	ldrsb.w	ip, [sp, #57]	; 0x39
 801f176:	a912      	add	r1, sp, #72	; 0x48
 801f178:	eddd 6a0f 	vldr	s13, [sp, #60]	; 0x3c
 801f17c:	eba0 030c 	sub.w	r3, r0, ip
 801f180:	f99d e03a 	ldrsb.w	lr, [sp, #58]	; 0x3a
 801f184:	ed9d 7a10 	vldr	s14, [sp, #64]	; 0x40
 801f188:	a814      	add	r0, sp, #80	; 0x50
 801f18a:	ee07 3a90 	vmov	s15, r3
 801f18e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f192:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801f196:	edcd 7a12 	vstr	s15, [sp, #72]	; 0x48
 801f19a:	f997 c000 	ldrsb.w	ip, [r7]
 801f19e:	ebac 030e 	sub.w	r3, ip, lr
 801f1a2:	ee07 3a90 	vmov	s15, r3
 801f1a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f1aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 801f1ae:	edcd 7a13 	vstr	s15, [sp, #76]	; 0x4c
 801f1b2:	47a0      	blx	r4
 801f1b4:	ed9d 6a14 	vldr	s12, [sp, #80]	; 0x50
 801f1b8:	eddd 6a11 	vldr	s13, [sp, #68]	; 0x44
 801f1bc:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
 801f1c0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801f1c4:	ee07 3a90 	vmov	s15, r3
 801f1c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f1cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f1d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801f1d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f1d8:	fe38 7a28 	vselgt.f32	s14, s16, s17
 801f1dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f1e0:	edcd 7a14 	vstr	s15, [sp, #80]	; 0x50
 801f1e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f1e8:	ee17 2a90 	vmov	r2, s15
 801f1ec:	f302 0207 	ssat	r2, #8, r2
 801f1f0:	f889 2000 	strb.w	r2, [r9]
 801f1f4:	3601      	adds	r6, #1
 801f1f6:	9818      	ldr	r0, [sp, #96]	; 0x60
 801f1f8:	44a9      	add	r9, r5
 801f1fa:	991a      	ldr	r1, [sp, #104]	; 0x68
 801f1fc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801f1fe:	6843      	ldr	r3, [r0, #4]
 801f200:	6848      	ldr	r0, [r1, #4]
 801f202:	6851      	ldr	r1, [r2, #4]
 801f204:	4498      	add	r8, r3
 801f206:	4407      	add	r7, r0
 801f208:	42b1      	cmp	r1, r6
 801f20a:	d8af      	bhi.n	801f16c <forward_eltwise_integer_INT8+0x2ac>
 801f20c:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801f20e:	f3c6 2617 	ubfx	r6, r6, #8, #24
 801f212:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801f214:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 801f218:	d302      	bcc.n	801f220 <forward_eltwise_integer_INT8+0x360>
 801f21a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801f21c:	6909      	ldr	r1, [r1, #16]
 801f21e:	4488      	add	r8, r1
 801f220:	9919      	ldr	r1, [sp, #100]	; 0x64
 801f222:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 801f226:	d302      	bcc.n	801f22e <forward_eltwise_integer_INT8+0x36e>
 801f228:	991a      	ldr	r1, [sp, #104]	; 0x68
 801f22a:	6909      	ldr	r1, [r1, #16]
 801f22c:	440f      	add	r7, r1
 801f22e:	f10a 0a01 	add.w	sl, sl, #1
 801f232:	e78f      	b.n	801f154 <forward_eltwise_integer_INT8+0x294>
 801f234:	981a      	ldr	r0, [sp, #104]	; 0x68
 801f236:	f10b 0b01 	add.w	fp, fp, #1
 801f23a:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
 801f23e:	6881      	ldr	r1, [r0, #8]
 801f240:	6893      	ldr	r3, [r2, #8]
 801f242:	9109      	str	r1, [sp, #36]	; 0x24
 801f244:	f8da 1008 	ldr.w	r1, [sl, #8]
 801f248:	455b      	cmp	r3, fp
 801f24a:	4488      	add	r8, r1
 801f24c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f24e:	440f      	add	r7, r1
 801f250:	f63f af7e 	bhi.w	801f150 <forward_eltwise_integer_INT8+0x290>
 801f254:	68d1      	ldr	r1, [r2, #12]
 801f256:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801f258:	f8da c00c 	ldr.w	ip, [sl, #12]
 801f25c:	3601      	adds	r6, #1
 801f25e:	68c0      	ldr	r0, [r0, #12]
 801f260:	44e0      	add	r8, ip
 801f262:	428e      	cmp	r6, r1
 801f264:	960a      	str	r6, [sp, #40]	; 0x28
 801f266:	4407      	add	r7, r0
 801f268:	f4ff af6a 	bcc.w	801f140 <forward_eltwise_integer_INT8+0x280>
 801f26c:	b02b      	add	sp, #172	; 0xac
 801f26e:	ecbd 8b02 	vpop	{d8}
 801f272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f276:	f04f 0e00 	mov.w	lr, #0
 801f27a:	e6fb      	b.n	801f074 <forward_eltwise_integer_INT8+0x1b4>
 801f27c:	2000      	movs	r0, #0
 801f27e:	e6ea      	b.n	801f056 <forward_eltwise_integer_INT8+0x196>
 801f280:	2000      	movs	r0, #0
 801f282:	e6da      	b.n	801f03a <forward_eltwise_integer_INT8+0x17a>
 801f284:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f286:	4553      	cmp	r3, sl
 801f288:	d036      	beq.n	801f2f8 <forward_eltwise_integer_INT8+0x438>
 801f28a:	f1ba 0f00 	cmp.w	sl, #0
 801f28e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f290:	bf0c      	ite	eq
 801f292:	2402      	moveq	r4, #2
 801f294:	2401      	movne	r4, #1
 801f296:	0a1a      	lsrs	r2, r3, #8
 801f298:	d032      	beq.n	801f300 <forward_eltwise_integer_INT8+0x440>
 801f29a:	9816      	ldr	r0, [sp, #88]	; 0x58
 801f29c:	2301      	movs	r3, #1
 801f29e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801f2a2:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801f2a6:	4290      	cmp	r0, r2
 801f2a8:	fb01 f303 	mul.w	r3, r1, r3
 801f2ac:	d1f9      	bne.n	801f2a2 <forward_eltwise_integer_INT8+0x3e2>
 801f2ae:	9406      	str	r4, [sp, #24]
 801f2b0:	f10d 043a 	add.w	r4, sp, #58	; 0x3a
 801f2b4:	f10d 063b 	add.w	r6, sp, #59	; 0x3b
 801f2b8:	ad11      	add	r5, sp, #68	; 0x44
 801f2ba:	9403      	str	r4, [sp, #12]
 801f2bc:	ac0f      	add	r4, sp, #60	; 0x3c
 801f2be:	9605      	str	r6, [sp, #20]
 801f2c0:	ae10      	add	r6, sp, #64	; 0x40
 801f2c2:	9504      	str	r5, [sp, #16]
 801f2c4:	f10d 0539 	add.w	r5, sp, #57	; 0x39
 801f2c8:	9400      	str	r4, [sp, #0]
 801f2ca:	463a      	mov	r2, r7
 801f2cc:	4641      	mov	r1, r8
 801f2ce:	4648      	mov	r0, r9
 801f2d0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801f2d2:	e9cd 5601 	strd	r5, r6, [sp, #4]
 801f2d6:	47a0      	blx	r4
 801f2d8:	b02b      	add	sp, #172	; 0xac
 801f2da:	ecbd 8b02 	vpop	{d8}
 801f2de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f2e2:	4698      	mov	r8, r3
 801f2e4:	e604      	b.n	801eef0 <forward_eltwise_integer_INT8+0x30>
 801f2e6:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
 801f2ea:	981a      	ldr	r0, [sp, #104]	; 0x68
 801f2ec:	e7b3      	b.n	801f256 <forward_eltwise_integer_INT8+0x396>
 801f2ee:	4672      	mov	r2, lr
 801f2f0:	4653      	mov	r3, sl
 801f2f2:	f04f 0b01 	mov.w	fp, #1
 801f2f6:	e64d      	b.n	801ef94 <forward_eltwise_integer_INT8+0xd4>
 801f2f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f2fa:	2400      	movs	r4, #0
 801f2fc:	0a1a      	lsrs	r2, r3, #8
 801f2fe:	d1cc      	bne.n	801f29a <forward_eltwise_integer_INT8+0x3da>
 801f300:	2301      	movs	r3, #1
 801f302:	e7d4      	b.n	801f2ae <forward_eltwise_integer_INT8+0x3ee>
 801f304:	4601      	mov	r1, r0
 801f306:	e6ca      	b.n	801f09e <forward_eltwise_integer_INT8+0x1de>
 801f308:	460a      	mov	r2, r1
 801f30a:	e6d4      	b.n	801f0b6 <forward_eltwise_integer_INT8+0x1f6>
 801f30c:	4613      	mov	r3, r2
 801f30e:	e6de      	b.n	801f0ce <forward_eltwise_integer_INT8+0x20e>
 801f310:	4617      	mov	r7, r2
 801f312:	4691      	mov	r9, r2
 801f314:	e5e4      	b.n	801eee0 <forward_eltwise_integer_INT8+0x20>
 801f316:	f04f 0b01 	mov.w	fp, #1
 801f31a:	46da      	mov	sl, fp
 801f31c:	e649      	b.n	801efb2 <forward_eltwise_integer_INT8+0xf2>
 801f31e:	f04f 0a01 	mov.w	sl, #1
 801f322:	46b3      	mov	fp, r6
 801f324:	e645      	b.n	801efb2 <forward_eltwise_integer_INT8+0xf2>
 801f326:	bf00      	nop
 801f328:	befffffc 	.word	0xbefffffc

0801f32c <ai_check_custom_types>:
 801f32c:	4b13      	ldr	r3, [pc, #76]	; (801f37c <ai_check_custom_types+0x50>)
 801f32e:	b082      	sub	sp, #8
 801f330:	681b      	ldr	r3, [r3, #0]
 801f332:	9301      	str	r3, [sp, #4]
 801f334:	b118      	cbz	r0, 801f33e <ai_check_custom_types+0x12>
 801f336:	7803      	ldrb	r3, [r0, #0]
 801f338:	2b03      	cmp	r3, #3
 801f33a:	d002      	beq.n	801f342 <ai_check_custom_types+0x16>
 801f33c:	2000      	movs	r0, #0
 801f33e:	b002      	add	sp, #8
 801f340:	4770      	bx	lr
 801f342:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801f346:	4293      	cmp	r3, r2
 801f348:	d004      	beq.n	801f354 <ai_check_custom_types+0x28>
 801f34a:	2001      	movs	r0, #1
 801f34c:	f080 0001 	eor.w	r0, r0, #1
 801f350:	b002      	add	sp, #8
 801f352:	4770      	bx	lr
 801f354:	7842      	ldrb	r2, [r0, #1]
 801f356:	3001      	adds	r0, #1
 801f358:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801f35c:	429a      	cmp	r2, r3
 801f35e:	d1f4      	bne.n	801f34a <ai_check_custom_types+0x1e>
 801f360:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 801f364:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801f368:	429a      	cmp	r2, r3
 801f36a:	d1ee      	bne.n	801f34a <ai_check_custom_types+0x1e>
 801f36c:	7842      	ldrb	r2, [r0, #1]
 801f36e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801f372:	429a      	cmp	r2, r3
 801f374:	d1e9      	bne.n	801f34a <ai_check_custom_types+0x1e>
 801f376:	2000      	movs	r0, #0
 801f378:	e7e8      	b.n	801f34c <ai_check_custom_types+0x20>
 801f37a:	bf00      	nop
 801f37c:	0802832c 	.word	0x0802832c

0801f380 <ai_layers_init_all>:
 801f380:	6b42      	ldr	r2, [r0, #52]	; 0x34
 801f382:	b16a      	cbz	r2, 801f3a0 <ai_layers_init_all+0x20>
 801f384:	6913      	ldr	r3, [r2, #16]
 801f386:	60d0      	str	r0, [r2, #12]
 801f388:	429a      	cmp	r2, r3
 801f38a:	f04f 0201 	mov.w	r2, #1
 801f38e:	d007      	beq.n	801f3a0 <ai_layers_init_all+0x20>
 801f390:	b133      	cbz	r3, 801f3a0 <ai_layers_init_all+0x20>
 801f392:	6919      	ldr	r1, [r3, #16]
 801f394:	3201      	adds	r2, #1
 801f396:	60d8      	str	r0, [r3, #12]
 801f398:	4299      	cmp	r1, r3
 801f39a:	bf18      	it	ne
 801f39c:	2900      	cmpne	r1, #0
 801f39e:	d101      	bne.n	801f3a4 <ai_layers_init_all+0x24>
 801f3a0:	4610      	mov	r0, r2
 801f3a2:	4770      	bx	lr
 801f3a4:	460b      	mov	r3, r1
 801f3a6:	e7f4      	b.n	801f392 <ai_layers_init_all+0x12>

0801f3a8 <ai_layers_post_init_all>:
 801f3a8:	b538      	push	{r3, r4, r5, lr}
 801f3aa:	6b44      	ldr	r4, [r0, #52]	; 0x34
 801f3ac:	b184      	cbz	r4, 801f3d0 <ai_layers_post_init_all+0x28>
 801f3ae:	2500      	movs	r5, #0
 801f3b0:	6863      	ldr	r3, [r4, #4]
 801f3b2:	4620      	mov	r0, r4
 801f3b4:	07db      	lsls	r3, r3, #31
 801f3b6:	d503      	bpl.n	801f3c0 <ai_layers_post_init_all+0x18>
 801f3b8:	6a23      	ldr	r3, [r4, #32]
 801f3ba:	b10b      	cbz	r3, 801f3c0 <ai_layers_post_init_all+0x18>
 801f3bc:	3501      	adds	r5, #1
 801f3be:	4798      	blx	r3
 801f3c0:	6923      	ldr	r3, [r4, #16]
 801f3c2:	429c      	cmp	r4, r3
 801f3c4:	bf18      	it	ne
 801f3c6:	2b00      	cmpne	r3, #0
 801f3c8:	461c      	mov	r4, r3
 801f3ca:	d1f1      	bne.n	801f3b0 <ai_layers_post_init_all+0x8>
 801f3cc:	4628      	mov	r0, r5
 801f3ce:	bd38      	pop	{r3, r4, r5, pc}
 801f3d0:	4625      	mov	r5, r4
 801f3d2:	e7fb      	b.n	801f3cc <ai_layers_post_init_all+0x24>

0801f3d4 <ai_layers_forward_all>:
 801f3d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f3d8:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 801f3da:	4604      	mov	r4, r0
 801f3dc:	6b45      	ldr	r5, [r0, #52]	; 0x34
 801f3de:	2f00      	cmp	r7, #0
 801f3e0:	d02b      	beq.n	801f43a <ai_layers_forward_all+0x66>
 801f3e2:	2d00      	cmp	r5, #0
 801f3e4:	d03d      	beq.n	801f462 <ai_layers_forward_all+0x8e>
 801f3e6:	2600      	movs	r6, #0
 801f3e8:	6385      	str	r5, [r0, #56]	; 0x38
 801f3ea:	4629      	mov	r1, r5
 801f3ec:	6c02      	ldr	r2, [r0, #64]	; 0x40
 801f3ee:	2001      	movs	r0, #1
 801f3f0:	46b0      	mov	r8, r6
 801f3f2:	47b8      	blx	r7
 801f3f4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801f3f6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801f3f8:	2002      	movs	r0, #2
 801f3fa:	47b8      	blx	r7
 801f3fc:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 801f3fe:	696b      	ldr	r3, [r5, #20]
 801f400:	4628      	mov	r0, r5
 801f402:	4798      	blx	r3
 801f404:	692b      	ldr	r3, [r5, #16]
 801f406:	2003      	movs	r0, #3
 801f408:	429d      	cmp	r5, r3
 801f40a:	4619      	mov	r1, r3
 801f40c:	d009      	beq.n	801f422 <ai_layers_forward_all+0x4e>
 801f40e:	63a3      	str	r3, [r4, #56]	; 0x38
 801f410:	3601      	adds	r6, #1
 801f412:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801f414:	47b8      	blx	r7
 801f416:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801f418:	2900      	cmp	r1, #0
 801f41a:	d1ec      	bne.n	801f3f6 <ai_layers_forward_all+0x22>
 801f41c:	4630      	mov	r0, r6
 801f41e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f422:	2100      	movs	r1, #0
 801f424:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 801f428:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801f42a:	3601      	adds	r6, #1
 801f42c:	47b8      	blx	r7
 801f42e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801f430:	2900      	cmp	r1, #0
 801f432:	d1e0      	bne.n	801f3f6 <ai_layers_forward_all+0x22>
 801f434:	4630      	mov	r0, r6
 801f436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f43a:	b195      	cbz	r5, 801f462 <ai_layers_forward_all+0x8e>
 801f43c:	463e      	mov	r6, r7
 801f43e:	6385      	str	r5, [r0, #56]	; 0x38
 801f440:	696b      	ldr	r3, [r5, #20]
 801f442:	4628      	mov	r0, r5
 801f444:	4798      	blx	r3
 801f446:	692b      	ldr	r3, [r5, #16]
 801f448:	3601      	adds	r6, #1
 801f44a:	42ab      	cmp	r3, r5
 801f44c:	461d      	mov	r5, r3
 801f44e:	d003      	beq.n	801f458 <ai_layers_forward_all+0x84>
 801f450:	63a3      	str	r3, [r4, #56]	; 0x38
 801f452:	2b00      	cmp	r3, #0
 801f454:	d1f4      	bne.n	801f440 <ai_layers_forward_all+0x6c>
 801f456:	e7e1      	b.n	801f41c <ai_layers_forward_all+0x48>
 801f458:	2300      	movs	r3, #0
 801f45a:	4630      	mov	r0, r6
 801f45c:	63a3      	str	r3, [r4, #56]	; 0x38
 801f45e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f462:	462e      	mov	r6, r5
 801f464:	4630      	mov	r0, r6
 801f466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f46a:	bf00      	nop

0801f46c <ai_layers_destroy_all>:
 801f46c:	b538      	push	{r3, r4, r5, lr}
 801f46e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 801f470:	b184      	cbz	r4, 801f494 <ai_layers_destroy_all+0x28>
 801f472:	2500      	movs	r5, #0
 801f474:	6863      	ldr	r3, [r4, #4]
 801f476:	4620      	mov	r0, r4
 801f478:	075b      	lsls	r3, r3, #29
 801f47a:	d503      	bpl.n	801f484 <ai_layers_destroy_all+0x18>
 801f47c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801f47e:	b10b      	cbz	r3, 801f484 <ai_layers_destroy_all+0x18>
 801f480:	3501      	adds	r5, #1
 801f482:	4798      	blx	r3
 801f484:	6923      	ldr	r3, [r4, #16]
 801f486:	429c      	cmp	r4, r3
 801f488:	bf18      	it	ne
 801f48a:	2b00      	cmpne	r3, #0
 801f48c:	461c      	mov	r4, r3
 801f48e:	d1f1      	bne.n	801f474 <ai_layers_destroy_all+0x8>
 801f490:	4628      	mov	r0, r5
 801f492:	bd38      	pop	{r3, r4, r5, pc}
 801f494:	4625      	mov	r5, r4
 801f496:	e7fb      	b.n	801f490 <ai_layers_destroy_all+0x24>

0801f498 <pool_func_ap_array_integer_INT8>:
 801f498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f49c:	b093      	sub	sp, #76	; 0x4c
 801f49e:	6985      	ldr	r5, [r0, #24]
 801f4a0:	460f      	mov	r7, r1
 801f4a2:	469c      	mov	ip, r3
 801f4a4:	9c24      	ldr	r4, [sp, #144]	; 0x90
 801f4a6:	6803      	ldr	r3, [r0, #0]
 801f4a8:	69a1      	ldr	r1, [r4, #24]
 801f4aa:	68a8      	ldr	r0, [r5, #8]
 801f4ac:	6825      	ldr	r5, [r4, #0]
 801f4ae:	f8bd 4074 	ldrh.w	r4, [sp, #116]	; 0x74
 801f4b2:	6889      	ldr	r1, [r1, #8]
 801f4b4:	940d      	str	r4, [sp, #52]	; 0x34
 801f4b6:	f8bd 4078 	ldrh.w	r4, [sp, #120]	; 0x78
 801f4ba:	f8bd a070 	ldrh.w	sl, [sp, #112]	; 0x70
 801f4be:	940e      	str	r4, [sp, #56]	; 0x38
 801f4c0:	f8bd 407c 	ldrh.w	r4, [sp, #124]	; 0x7c
 801f4c4:	f8bd e084 	ldrh.w	lr, [sp, #132]	; 0x84
 801f4c8:	940f      	str	r4, [sp, #60]	; 0x3c
 801f4ca:	f8bd 4080 	ldrh.w	r4, [sp, #128]	; 0x80
 801f4ce:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 801f4d2:	9410      	str	r4, [sp, #64]	; 0x40
 801f4d4:	f8bd 908c 	ldrh.w	r9, [sp, #140]	; 0x8c
 801f4d8:	2b00      	cmp	r3, #0
 801f4da:	d03c      	beq.n	801f556 <pool_func_ap_array_integer_INT8+0xbe>
 801f4dc:	685e      	ldr	r6, [r3, #4]
 801f4de:	46b3      	mov	fp, r6
 801f4e0:	2e00      	cmp	r6, #0
 801f4e2:	d031      	beq.n	801f548 <pool_func_ap_array_integer_INT8+0xb0>
 801f4e4:	885c      	ldrh	r4, [r3, #2]
 801f4e6:	9411      	str	r4, [sp, #68]	; 0x44
 801f4e8:	2c00      	cmp	r4, #0
 801f4ea:	d051      	beq.n	801f590 <pool_func_ap_array_integer_INT8+0xf8>
 801f4ec:	6834      	ldr	r4, [r6, #0]
 801f4ee:	ed94 0a00 	vldr	s0, [r4]
 801f4f2:	2d00      	cmp	r5, #0
 801f4f4:	d069      	beq.n	801f5ca <pool_func_ap_array_integer_INT8+0x132>
 801f4f6:	686c      	ldr	r4, [r5, #4]
 801f4f8:	2c00      	cmp	r4, #0
 801f4fa:	d054      	beq.n	801f5a6 <pool_func_ap_array_integer_INT8+0x10e>
 801f4fc:	886e      	ldrh	r6, [r5, #2]
 801f4fe:	9611      	str	r6, [sp, #68]	; 0x44
 801f500:	2e00      	cmp	r6, #0
 801f502:	d033      	beq.n	801f56c <pool_func_ap_array_integer_INT8+0xd4>
 801f504:	6826      	ldr	r6, [r4, #0]
 801f506:	edd6 0a00 	vldr	s1, [r6]
 801f50a:	2b00      	cmp	r3, #0
 801f50c:	d155      	bne.n	801f5ba <pool_func_ap_array_integer_INT8+0x122>
 801f50e:	6864      	ldr	r4, [r4, #4]
 801f510:	f994 4000 	ldrsb.w	r4, [r4]
 801f514:	f8cd 9020 	str.w	r9, [sp, #32]
 801f518:	f8cd 801c 	str.w	r8, [sp, #28]
 801f51c:	f8cd e018 	str.w	lr, [sp, #24]
 801f520:	f8cd c000 	str.w	ip, [sp]
 801f524:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
 801f528:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f52a:	4613      	mov	r3, r2
 801f52c:	463a      	mov	r2, r7
 801f52e:	9405      	str	r4, [sp, #20]
 801f530:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801f532:	9404      	str	r4, [sp, #16]
 801f534:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f536:	9403      	str	r4, [sp, #12]
 801f538:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f53a:	e9cd a401 	strd	sl, r4, [sp, #4]
 801f53e:	f004 fec9 	bl	80242d4 <st_int8_avepool>
 801f542:	b013      	add	sp, #76	; 0x4c
 801f544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f548:	2d00      	cmp	r5, #0
 801f54a:	d02f      	beq.n	801f5ac <pool_func_ap_array_integer_INT8+0x114>
 801f54c:	686c      	ldr	r4, [r5, #4]
 801f54e:	b93c      	cbnz	r4, 801f560 <pool_func_ap_array_integer_INT8+0xc8>
 801f550:	ed9f 0a28 	vldr	s0, [pc, #160]	; 801f5f4 <pool_func_ap_array_integer_INT8+0x15c>
 801f554:	e00d      	b.n	801f572 <pool_func_ap_array_integer_INT8+0xda>
 801f556:	2d00      	cmp	r5, #0
 801f558:	d028      	beq.n	801f5ac <pool_func_ap_array_integer_INT8+0x114>
 801f55a:	686c      	ldr	r4, [r5, #4]
 801f55c:	2c00      	cmp	r4, #0
 801f55e:	d03f      	beq.n	801f5e0 <pool_func_ap_array_integer_INT8+0x148>
 801f560:	886e      	ldrh	r6, [r5, #2]
 801f562:	ed9f 0a24 	vldr	s0, [pc, #144]	; 801f5f4 <pool_func_ap_array_integer_INT8+0x15c>
 801f566:	9611      	str	r6, [sp, #68]	; 0x44
 801f568:	2e00      	cmp	r6, #0
 801f56a:	d1cb      	bne.n	801f504 <pool_func_ap_array_integer_INT8+0x6c>
 801f56c:	2b00      	cmp	r3, #0
 801f56e:	d03e      	beq.n	801f5ee <pool_func_ap_array_integer_INT8+0x156>
 801f570:	685e      	ldr	r6, [r3, #4]
 801f572:	46b3      	mov	fp, r6
 801f574:	2e00      	cmp	r6, #0
 801f576:	d02f      	beq.n	801f5d8 <pool_func_ap_array_integer_INT8+0x140>
 801f578:	eddf 0a1e 	vldr	s1, [pc, #120]	; 801f5f4 <pool_func_ap_array_integer_INT8+0x15c>
 801f57c:	885b      	ldrh	r3, [r3, #2]
 801f57e:	b953      	cbnz	r3, 801f596 <pool_func_ap_array_integer_INT8+0xfe>
 801f580:	2c00      	cmp	r4, #0
 801f582:	d0c7      	beq.n	801f514 <pool_func_ap_array_integer_INT8+0x7c>
 801f584:	886d      	ldrh	r5, [r5, #2]
 801f586:	9511      	str	r5, [sp, #68]	; 0x44
 801f588:	2d00      	cmp	r5, #0
 801f58a:	d1c0      	bne.n	801f50e <pool_func_ap_array_integer_INT8+0x76>
 801f58c:	2400      	movs	r4, #0
 801f58e:	e7c1      	b.n	801f514 <pool_func_ap_array_integer_INT8+0x7c>
 801f590:	ed9f 0a18 	vldr	s0, [pc, #96]	; 801f5f4 <pool_func_ap_array_integer_INT8+0x15c>
 801f594:	e7ad      	b.n	801f4f2 <pool_func_ap_array_integer_INT8+0x5a>
 801f596:	f8db 3004 	ldr.w	r3, [fp, #4]
 801f59a:	f993 3000 	ldrsb.w	r3, [r3]
 801f59e:	2d00      	cmp	r5, #0
 801f5a0:	d0f4      	beq.n	801f58c <pool_func_ap_array_integer_INT8+0xf4>
 801f5a2:	686c      	ldr	r4, [r5, #4]
 801f5a4:	e7ec      	b.n	801f580 <pool_func_ap_array_integer_INT8+0xe8>
 801f5a6:	2b00      	cmp	r3, #0
 801f5a8:	d1e3      	bne.n	801f572 <pool_func_ap_array_integer_INT8+0xda>
 801f5aa:	e01b      	b.n	801f5e4 <pool_func_ap_array_integer_INT8+0x14c>
 801f5ac:	ed9f 0a11 	vldr	s0, [pc, #68]	; 801f5f4 <pool_func_ap_array_integer_INT8+0x15c>
 801f5b0:	462b      	mov	r3, r5
 801f5b2:	462c      	mov	r4, r5
 801f5b4:	eef0 0a40 	vmov.f32	s1, s0
 801f5b8:	e7ac      	b.n	801f514 <pool_func_ap_array_integer_INT8+0x7c>
 801f5ba:	f8d3 b004 	ldr.w	fp, [r3, #4]
 801f5be:	f1bb 0f00 	cmp.w	fp, #0
 801f5c2:	d1db      	bne.n	801f57c <pool_func_ap_array_integer_INT8+0xe4>
 801f5c4:	465b      	mov	r3, fp
 801f5c6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f5c8:	e7de      	b.n	801f588 <pool_func_ap_array_integer_INT8+0xf0>
 801f5ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f5cc:	eddf 0a09 	vldr	s1, [pc, #36]	; 801f5f4 <pool_func_ap_array_integer_INT8+0x15c>
 801f5d0:	2b00      	cmp	r3, #0
 801f5d2:	d1e0      	bne.n	801f596 <pool_func_ap_array_integer_INT8+0xfe>
 801f5d4:	461c      	mov	r4, r3
 801f5d6:	e79d      	b.n	801f514 <pool_func_ap_array_integer_INT8+0x7c>
 801f5d8:	4633      	mov	r3, r6
 801f5da:	eddf 0a06 	vldr	s1, [pc, #24]	; 801f5f4 <pool_func_ap_array_integer_INT8+0x15c>
 801f5de:	e7cf      	b.n	801f580 <pool_func_ap_array_integer_INT8+0xe8>
 801f5e0:	ed9f 0a04 	vldr	s0, [pc, #16]	; 801f5f4 <pool_func_ap_array_integer_INT8+0x15c>
 801f5e4:	2300      	movs	r3, #0
 801f5e6:	eddf 0a03 	vldr	s1, [pc, #12]	; 801f5f4 <pool_func_ap_array_integer_INT8+0x15c>
 801f5ea:	461c      	mov	r4, r3
 801f5ec:	e792      	b.n	801f514 <pool_func_ap_array_integer_INT8+0x7c>
 801f5ee:	eddf 0a01 	vldr	s1, [pc, #4]	; 801f5f4 <pool_func_ap_array_integer_INT8+0x15c>
 801f5f2:	e7cb      	b.n	801f58c <pool_func_ap_array_integer_INT8+0xf4>
 801f5f4:	00000000 	.word	0x00000000

0801f5f8 <align_factor>:
 801f5f8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801f5fc:	b508      	push	{r3, lr}
 801f5fe:	eeb4 0a67 	vcmp.f32	s0, s15
 801f602:	2300      	movs	r3, #0
 801f604:	8003      	strh	r3, [r0, #0]
 801f606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f60a:	d52d      	bpl.n	801f668 <align_factor+0x70>
 801f60c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801f610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f614:	dd28      	ble.n	801f668 <align_factor+0x70>
 801f616:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801f61a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801f61e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f622:	d511      	bpl.n	801f648 <align_factor+0x50>
 801f624:	2201      	movs	r2, #1
 801f626:	ee30 0a00 	vadd.f32	s0, s0, s0
 801f62a:	2302      	movs	r3, #2
 801f62c:	8002      	strh	r2, [r0, #0]
 801f62e:	e005      	b.n	801f63c <align_factor+0x44>
 801f630:	8003      	strh	r3, [r0, #0]
 801f632:	b293      	uxth	r3, r2
 801f634:	ee30 0a00 	vadd.f32	s0, s0, s0
 801f638:	2b21      	cmp	r3, #33	; 0x21
 801f63a:	d035      	beq.n	801f6a8 <align_factor+0xb0>
 801f63c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801f640:	1c5a      	adds	r2, r3, #1
 801f642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f646:	d4f3      	bmi.n	801f630 <align_factor+0x38>
 801f648:	eddf 7a1c 	vldr	s15, [pc, #112]	; 801f6bc <align_factor+0xc4>
 801f64c:	ee60 7a27 	vmul.f32	s15, s0, s15
 801f650:	ee17 0a90 	vmov	r0, s15
 801f654:	f7e0 fec4 	bl	80003e0 <__aeabi_f2lz>
 801f658:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 801f65c:	d003      	beq.n	801f666 <align_factor+0x6e>
 801f65e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801f662:	ea80 70e1 	eor.w	r0, r0, r1, asr #31
 801f666:	bd08      	pop	{r3, pc}
 801f668:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801f66c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801f670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f674:	dde8      	ble.n	801f648 <align_factor+0x50>
 801f676:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801f67a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801f67e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 801f682:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 801f686:	8002      	strh	r2, [r0, #0]
 801f688:	ee20 0a07 	vmul.f32	s0, s0, s14
 801f68c:	e005      	b.n	801f69a <align_factor+0xa2>
 801f68e:	8003      	strh	r3, [r0, #0]
 801f690:	b293      	uxth	r3, r2
 801f692:	ee20 0a07 	vmul.f32	s0, s0, s14
 801f696:	428b      	cmp	r3, r1
 801f698:	d00a      	beq.n	801f6b0 <align_factor+0xb8>
 801f69a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801f69e:	1e5a      	subs	r2, r3, #1
 801f6a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f6a4:	dcf3      	bgt.n	801f68e <align_factor+0x96>
 801f6a6:	e7cf      	b.n	801f648 <align_factor+0x50>
 801f6a8:	2300      	movs	r3, #0
 801f6aa:	8003      	strh	r3, [r0, #0]
 801f6ac:	4618      	mov	r0, r3
 801f6ae:	bd08      	pop	{r3, pc}
 801f6b0:	f64f 73e2 	movw	r3, #65506	; 0xffe2
 801f6b4:	ee30 0a00 	vadd.f32	s0, s0, s0
 801f6b8:	8003      	strh	r3, [r0, #0]
 801f6ba:	e7c5      	b.n	801f648 <align_factor+0x50>
 801f6bc:	4f000000 	.word	0x4f000000

0801f6c0 <align_factor_ch>:
 801f6c0:	2900      	cmp	r1, #0
 801f6c2:	d06f      	beq.n	801f7a4 <align_factor_ch+0xe4>
 801f6c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f6c8:	ed2d 8b04 	vpush	{d8-d9}
 801f6cc:	ee80 9a20 	vdiv.f32	s18, s0, s1
 801f6d0:	4604      	mov	r4, r0
 801f6d2:	4691      	mov	r9, r2
 801f6d4:	4698      	mov	r8, r3
 801f6d6:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 801f6da:	eddf 9a33 	vldr	s19, [pc, #204]	; 801f7a8 <align_factor_ch+0xe8>
 801f6de:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
 801f6e2:	2700      	movs	r7, #0
 801f6e4:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801f6e8:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 801f6ec:	ecf4 7a01 	vldmia	r4!, {s15}
 801f6f0:	ee69 7a27 	vmul.f32	s15, s18, s15
 801f6f4:	eef4 7a68 	vcmp.f32	s15, s17
 801f6f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f6fc:	d530      	bpl.n	801f760 <align_factor_ch+0xa0>
 801f6fe:	eef5 7a40 	vcmp.f32	s15, #0.0
 801f702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f706:	dd2b      	ble.n	801f760 <align_factor_ch+0xa0>
 801f708:	eef4 7ac8 	vcmpe.f32	s15, s16
 801f70c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f710:	d546      	bpl.n	801f7a0 <align_factor_ch+0xe0>
 801f712:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801f716:	2301      	movs	r3, #1
 801f718:	e004      	b.n	801f724 <align_factor_ch+0x64>
 801f71a:	2a20      	cmp	r2, #32
 801f71c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801f720:	b213      	sxth	r3, r2
 801f722:	d039      	beq.n	801f798 <align_factor_ch+0xd8>
 801f724:	eef4 7ac8 	vcmpe.f32	s15, s16
 801f728:	1c5a      	adds	r2, r3, #1
 801f72a:	b292      	uxth	r2, r2
 801f72c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f730:	d4f3      	bmi.n	801f71a <align_factor_ch+0x5a>
 801f732:	ee67 7aa9 	vmul.f32	s15, s15, s19
 801f736:	f8a8 3000 	strh.w	r3, [r8]
 801f73a:	ee17 0a90 	vmov	r0, s15
 801f73e:	f7e0 fe4f 	bl	80003e0 <__aeabi_f2lz>
 801f742:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 801f746:	bf18      	it	ne
 801f748:	ea86 70e1 	eorne.w	r0, r6, r1, asr #31
 801f74c:	42a5      	cmp	r5, r4
 801f74e:	f849 0b04 	str.w	r0, [r9], #4
 801f752:	f108 0802 	add.w	r8, r8, #2
 801f756:	d1c9      	bne.n	801f6ec <align_factor_ch+0x2c>
 801f758:	ecbd 8b04 	vpop	{d8-d9}
 801f75c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f760:	eef4 7ae8 	vcmpe.f32	s15, s17
 801f764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f768:	dd1a      	ble.n	801f7a0 <align_factor_ch+0xe0>
 801f76a:	ee67 7a88 	vmul.f32	s15, s15, s16
 801f76e:	f04f 33ff 	mov.w	r3, #4294967295
 801f772:	e005      	b.n	801f780 <align_factor_ch+0xc0>
 801f774:	b213      	sxth	r3, r2
 801f776:	ee67 7a88 	vmul.f32	s15, s15, s16
 801f77a:	f113 0f1f 	cmn.w	r3, #31
 801f77e:	d006      	beq.n	801f78e <align_factor_ch+0xce>
 801f780:	eef4 7ae8 	vcmpe.f32	s15, s17
 801f784:	1e5a      	subs	r2, r3, #1
 801f786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f78a:	dcf3      	bgt.n	801f774 <align_factor_ch+0xb4>
 801f78c:	e7d1      	b.n	801f732 <align_factor_ch+0x72>
 801f78e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801f792:	f06f 031d 	mvn.w	r3, #29
 801f796:	e7cc      	b.n	801f732 <align_factor_ch+0x72>
 801f798:	f8a8 7000 	strh.w	r7, [r8]
 801f79c:	2000      	movs	r0, #0
 801f79e:	e7d5      	b.n	801f74c <align_factor_ch+0x8c>
 801f7a0:	2300      	movs	r3, #0
 801f7a2:	e7c6      	b.n	801f732 <align_factor_ch+0x72>
 801f7a4:	4770      	bx	lr
 801f7a6:	bf00      	nop
 801f7a8:	4f000000 	.word	0x4f000000

0801f7ac <st_sssa8_ch_conv_dw_Wadapt>:
 801f7ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f7b0:	b089      	sub	sp, #36	; 0x24
 801f7b2:	4606      	mov	r6, r0
 801f7b4:	ea5f 0991 	movs.w	r9, r1, lsr #2
 801f7b8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f7ba:	9005      	str	r0, [sp, #20]
 801f7bc:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 801f7c0:	9202      	str	r2, [sp, #8]
 801f7c2:	9303      	str	r3, [sp, #12]
 801f7c4:	eb04 0040 	add.w	r0, r4, r0, lsl #1
 801f7c8:	f000 8081 	beq.w	801f8ce <st_sssa8_ch_conv_dw_Wadapt+0x122>
 801f7cc:	fb03 fa02 	mul.w	sl, r3, r2
 801f7d0:	461d      	mov	r5, r3
 801f7d2:	f109 33ff 	add.w	r3, r9, #4294967295
 801f7d6:	1d34      	adds	r4, r6, #4
 801f7d8:	fb12 f505 	smulbb	r5, r2, r5
 801f7dc:	f3ca 0a4f 	ubfx	sl, sl, #1, #16
 801f7e0:	b29b      	uxth	r3, r3
 801f7e2:	f8cd 9010 	str.w	r9, [sp, #16]
 801f7e6:	f10a 32ff 	add.w	r2, sl, #4294967295
 801f7ea:	ea4f 0e41 	mov.w	lr, r1, lsl #1
 801f7ee:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801f7f2:	f005 0301 	and.w	r3, r5, #1
 801f7f6:	46b0      	mov	r8, r6
 801f7f8:	f8df c128 	ldr.w	ip, [pc, #296]	; 801f924 <st_sssa8_ch_conv_dw_Wadapt+0x178>
 801f7fc:	9300      	str	r3, [sp, #0]
 801f7fe:	b293      	uxth	r3, r2
 801f800:	46a1      	mov	r9, r4
 801f802:	fb03 e30e 	mla	r3, r3, lr, lr
 801f806:	9301      	str	r3, [sp, #4]
 801f808:	9007      	str	r0, [sp, #28]
 801f80a:	4644      	mov	r4, r8
 801f80c:	f1ba 0f00 	cmp.w	sl, #0
 801f810:	d030      	beq.n	801f874 <st_sssa8_ch_conv_dw_Wadapt+0xc8>
 801f812:	4650      	mov	r0, sl
 801f814:	468b      	mov	fp, r1
 801f816:	9907      	ldr	r1, [sp, #28]
 801f818:	3801      	subs	r0, #1
 801f81a:	6822      	ldr	r2, [r4, #0]
 801f81c:	1d0d      	adds	r5, r1, #4
 801f81e:	f854 300b 	ldr.w	r3, [r4, fp]
 801f822:	b296      	uxth	r6, r2
 801f824:	4474      	add	r4, lr
 801f826:	9507      	str	r5, [sp, #28]
 801f828:	ea03 050c 	and.w	r5, r3, ip
 801f82c:	9f07      	ldr	r7, [sp, #28]
 801f82e:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
 801f832:	ea45 4212 	orr.w	r2, r5, r2, lsr #16
 801f836:	1d3e      	adds	r6, r7, #4
 801f838:	b280      	uxth	r0, r0
 801f83a:	fa2f f583 	sxtb16	r5, r3
 801f83e:	9607      	str	r6, [sp, #28]
 801f840:	ea4f 2333 	mov.w	r3, r3, ror #8
 801f844:	9e07      	ldr	r6, [sp, #28]
 801f846:	600d      	str	r5, [r1, #0]
 801f848:	ea4f 2532 	mov.w	r5, r2, ror #8
 801f84c:	1d31      	adds	r1, r6, #4
 801f84e:	fa2f f383 	sxtb16	r3, r3
 801f852:	9107      	str	r1, [sp, #28]
 801f854:	9907      	ldr	r1, [sp, #28]
 801f856:	603b      	str	r3, [r7, #0]
 801f858:	1d0b      	adds	r3, r1, #4
 801f85a:	fa2f f282 	sxtb16	r2, r2
 801f85e:	fa2f f585 	sxtb16	r5, r5
 801f862:	6032      	str	r2, [r6, #0]
 801f864:	9307      	str	r3, [sp, #28]
 801f866:	600d      	str	r5, [r1, #0]
 801f868:	2800      	cmp	r0, #0
 801f86a:	d1d4      	bne.n	801f816 <st_sssa8_ch_conv_dw_Wadapt+0x6a>
 801f86c:	9b01      	ldr	r3, [sp, #4]
 801f86e:	4659      	mov	r1, fp
 801f870:	eb03 0408 	add.w	r4, r3, r8
 801f874:	9b00      	ldr	r3, [sp, #0]
 801f876:	9807      	ldr	r0, [sp, #28]
 801f878:	b1fb      	cbz	r3, 801f8ba <st_sssa8_ch_conv_dw_Wadapt+0x10e>
 801f87a:	6823      	ldr	r3, [r4, #0]
 801f87c:	2500      	movs	r5, #0
 801f87e:	3008      	adds	r0, #8
 801f880:	ea03 020c 	and.w	r2, r3, ip
 801f884:	462c      	mov	r4, r5
 801f886:	ea0c 2603 	and.w	r6, ip, r3, lsl #8
 801f88a:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 801f88e:	b29b      	uxth	r3, r3
 801f890:	ea4f 4232 	mov.w	r2, r2, ror #16
 801f894:	4333      	orrs	r3, r6
 801f896:	fa2f f282 	sxtb16	r2, r2
 801f89a:	fa2f f383 	sxtb16	r3, r3
 801f89e:	f362 050f 	bfi	r5, r2, #0, #16
 801f8a2:	f363 040f 	bfi	r4, r3, #0, #16
 801f8a6:	0c12      	lsrs	r2, r2, #16
 801f8a8:	0c1b      	lsrs	r3, r3, #16
 801f8aa:	f362 451f 	bfi	r5, r2, #16, #16
 801f8ae:	f363 441f 	bfi	r4, r3, #16, #16
 801f8b2:	f840 5c04 	str.w	r5, [r0, #-4]
 801f8b6:	f840 4c08 	str.w	r4, [r0, #-8]
 801f8ba:	f108 0804 	add.w	r8, r8, #4
 801f8be:	45c1      	cmp	r9, r8
 801f8c0:	d1a2      	bne.n	801f808 <st_sssa8_ch_conv_dw_Wadapt+0x5c>
 801f8c2:	f8dd 9010 	ldr.w	r9, [sp, #16]
 801f8c6:	ea4f 0989 	mov.w	r9, r9, lsl #2
 801f8ca:	fa1f f989 	uxth.w	r9, r9
 801f8ce:	f011 0703 	ands.w	r7, r1, #3
 801f8d2:	d023      	beq.n	801f91c <st_sssa8_ch_conv_dw_Wadapt+0x170>
 801f8d4:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801f8d8:	fb13 f302 	smulbb	r3, r3, r2
 801f8dc:	b29b      	uxth	r3, r3
 801f8de:	b1eb      	cbz	r3, 801f91c <st_sssa8_ch_conv_dw_Wadapt+0x170>
 801f8e0:	3b01      	subs	r3, #1
 801f8e2:	444f      	add	r7, r9
 801f8e4:	f8dd e014 	ldr.w	lr, [sp, #20]
 801f8e8:	b29b      	uxth	r3, r3
 801f8ea:	b2bf      	uxth	r7, r7
 801f8ec:	f103 0c01 	add.w	ip, r3, #1
 801f8f0:	005b      	lsls	r3, r3, #1
 801f8f2:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 801f8f6:	1c9e      	adds	r6, r3, #2
 801f8f8:	f109 0401 	add.w	r4, r9, #1
 801f8fc:	eb0e 0209 	add.w	r2, lr, r9
 801f900:	1985      	adds	r5, r0, r6
 801f902:	4603      	mov	r3, r0
 801f904:	fa1f f984 	uxth.w	r9, r4
 801f908:	f992 4000 	ldrsb.w	r4, [r2]
 801f90c:	440a      	add	r2, r1
 801f90e:	f823 4b02 	strh.w	r4, [r3], #2
 801f912:	42ab      	cmp	r3, r5
 801f914:	d1f8      	bne.n	801f908 <st_sssa8_ch_conv_dw_Wadapt+0x15c>
 801f916:	45b9      	cmp	r9, r7
 801f918:	4460      	add	r0, ip
 801f91a:	d1ed      	bne.n	801f8f8 <st_sssa8_ch_conv_dw_Wadapt+0x14c>
 801f91c:	b009      	add	sp, #36	; 0x24
 801f91e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f922:	bf00      	nop
 801f924:	ffff0000 	.word	0xffff0000

0801f928 <st_sssa8_ch_convolve_dw>:
 801f928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f92c:	b0dd      	sub	sp, #372	; 0x174
 801f92e:	f8bd 719c 	ldrh.w	r7, [sp, #412]	; 0x19c
 801f932:	f8bd 41a4 	ldrh.w	r4, [sp, #420]	; 0x1a4
 801f936:	901f      	str	r0, [sp, #124]	; 0x7c
 801f938:	ea4f 0887 	mov.w	r8, r7, lsl #2
 801f93c:	f8bd 01a0 	ldrh.w	r0, [sp, #416]	; 0x1a0
 801f940:	007e      	lsls	r6, r7, #1
 801f942:	9108      	str	r1, [sp, #32]
 801f944:	eb08 0107 	add.w	r1, r8, r7
 801f948:	fb04 f900 	mul.w	r9, r4, r0
 801f94c:	f99d 51c8 	ldrsb.w	r5, [sp, #456]	; 0x1c8
 801f950:	9219      	str	r2, [sp, #100]	; 0x64
 801f952:	fb07 1109 	mla	r1, r7, r9, r1
 801f956:	9a76      	ldr	r2, [sp, #472]	; 0x1d8
 801f958:	9033      	str	r0, [sp, #204]	; 0xcc
 801f95a:	19f0      	adds	r0, r6, r7
 801f95c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 801f960:	931e      	str	r3, [sp, #120]	; 0x78
 801f962:	9b76      	ldr	r3, [sp, #472]	; 0x1d8
 801f964:	9218      	str	r2, [sp, #96]	; 0x60
 801f966:	f8bd 21a8 	ldrh.w	r2, [sp, #424]	; 0x1a8
 801f96a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 801f96e:	9438      	str	r4, [sp, #224]	; 0xe0
 801f970:	9232      	str	r2, [sp, #200]	; 0xc8
 801f972:	f8bd 21ac 	ldrh.w	r2, [sp, #428]	; 0x1ac
 801f976:	9614      	str	r6, [sp, #80]	; 0x50
 801f978:	9239      	str	r2, [sp, #228]	; 0xe4
 801f97a:	f8bd 21b0 	ldrh.w	r2, [sp, #432]	; 0x1b0
 801f97e:	9326      	str	r3, [sp, #152]	; 0x98
 801f980:	9222      	str	r2, [sp, #136]	; 0x88
 801f982:	f8bd 21b4 	ldrh.w	r2, [sp, #436]	; 0x1b4
 801f986:	9237      	str	r2, [sp, #220]	; 0xdc
 801f988:	f99d 21c4 	ldrsb.w	r2, [sp, #452]	; 0x1c4
 801f98c:	9209      	str	r2, [sp, #36]	; 0x24
 801f98e:	f8bd 21d0 	ldrh.w	r2, [sp, #464]	; 0x1d0
 801f992:	9225      	str	r2, [sp, #148]	; 0x94
 801f994:	f8bd 21d4 	ldrh.w	r2, [sp, #468]	; 0x1d4
 801f998:	923a      	str	r2, [sp, #232]	; 0xe8
 801f99a:	b1af      	cbz	r7, 801f9c8 <st_sssa8_ch_convolve_dw+0xa0>
 801f99c:	9970      	ldr	r1, [sp, #448]	; 0x1c0
 801f99e:	1f1c      	subs	r4, r3, #4
 801f9a0:	f04f 0c01 	mov.w	ip, #1
 801f9a4:	198e      	adds	r6, r1, r6
 801f9a6:	f931 3b02 	ldrsh.w	r3, [r1], #2
 801f9aa:	1e5a      	subs	r2, r3, #1
 801f9ac:	fa0c f003 	lsl.w	r0, ip, r3
 801f9b0:	fa05 f303 	lsl.w	r3, r5, r3
 801f9b4:	b292      	uxth	r2, r2
 801f9b6:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 801f9ba:	2a14      	cmp	r2, #20
 801f9bc:	f200 8512 	bhi.w	80203e4 <st_sssa8_ch_convolve_dw+0xabc>
 801f9c0:	428e      	cmp	r6, r1
 801f9c2:	f844 3f04 	str.w	r3, [r4, #4]!
 801f9c6:	d1ee      	bne.n	801f9a6 <st_sssa8_ch_convolve_dw+0x7e>
 801f9c8:	9c08      	ldr	r4, [sp, #32]
 801f9ca:	a944      	add	r1, sp, #272	; 0x110
 801f9cc:	ab40      	add	r3, sp, #256	; 0x100
 801f9ce:	aa3c      	add	r2, sp, #240	; 0xf0
 801f9d0:	943e      	str	r4, [sp, #248]	; 0xf8
 801f9d2:	a848      	add	r0, sp, #288	; 0x120
 801f9d4:	9c19      	ldr	r4, [sp, #100]	; 0x64
 801f9d6:	9100      	str	r1, [sp, #0]
 801f9d8:	a952      	add	r1, sp, #328	; 0x148
 801f9da:	943d      	str	r4, [sp, #244]	; 0xf4
 801f9dc:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801f9de:	9442      	str	r4, [sp, #264]	; 0x108
 801f9e0:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 801f9e2:	9441      	str	r4, [sp, #260]	; 0x104
 801f9e4:	9c33      	ldr	r4, [sp, #204]	; 0xcc
 801f9e6:	9446      	str	r4, [sp, #280]	; 0x118
 801f9e8:	9c38      	ldr	r4, [sp, #224]	; 0xe0
 801f9ea:	9445      	str	r4, [sp, #276]	; 0x114
 801f9ec:	9c22      	ldr	r4, [sp, #136]	; 0x88
 801f9ee:	9454      	str	r4, [sp, #336]	; 0x150
 801f9f0:	9c37      	ldr	r4, [sp, #220]	; 0xdc
 801f9f2:	9455      	str	r4, [sp, #340]	; 0x154
 801f9f4:	9c32      	ldr	r4, [sp, #200]	; 0xc8
 801f9f6:	9456      	str	r4, [sp, #344]	; 0x158
 801f9f8:	9c39      	ldr	r4, [sp, #228]	; 0xe4
 801f9fa:	9457      	str	r4, [sp, #348]	; 0x15c
 801f9fc:	f002 fa84 	bl	8021f08 <ai_padding_opt_init>
 801fa00:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801fa02:	fbb7 f3f3 	udiv	r3, r7, r3
 801fa06:	079a      	lsls	r2, r3, #30
 801fa08:	931a      	str	r3, [sp, #104]	; 0x68
 801fa0a:	f040 84f2 	bne.w	80203f2 <st_sssa8_ch_convolve_dw+0xaca>
 801fa0e:	109c      	asrs	r4, r3, #2
 801fa10:	2304      	movs	r3, #4
 801fa12:	931a      	str	r3, [sp, #104]	; 0x68
 801fa14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fa16:	425b      	negs	r3, r3
 801fa18:	b29a      	uxth	r2, r3
 801fa1a:	ea42 4b03 	orr.w	fp, r2, r3, lsl #16
 801fa1e:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 801fa20:	2b00      	cmp	r3, #0
 801fa22:	f000 8254 	beq.w	801fece <st_sssa8_ch_convolve_dw+0x5a6>
 801fa26:	f3c9 014f 	ubfx	r1, r9, #1, #16
 801fa2a:	08ba      	lsrs	r2, r7, #2
 801fa2c:	9838      	ldr	r0, [sp, #224]	; 0xe0
 801fa2e:	1e4d      	subs	r5, r1, #1
 801fa30:	910f      	str	r1, [sp, #60]	; 0x3c
 801fa32:	996e      	ldr	r1, [sp, #440]	; 0x1b8
 801fa34:	fa1f fa85 	uxth.w	sl, r5
 801fa38:	2500      	movs	r5, #0
 801fa3a:	f101 0e20 	add.w	lr, r1, #32
 801fa3e:	9939      	ldr	r1, [sp, #228]	; 0xe4
 801fa40:	9536      	str	r5, [sp, #216]	; 0xd8
 801fa42:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 801fa44:	f1c1 0c00 	rsb	ip, r1, #0
 801fa48:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801fa4a:	9224      	str	r2, [sp, #144]	; 0x90
 801fa4c:	4629      	mov	r1, r5
 801fa4e:	fb13 f300 	smulbb	r3, r3, r0
 801fa52:	3a01      	subs	r2, #1
 801fa54:	fb01 f104 	mul.w	r1, r1, r4
 801fa58:	9826      	ldr	r0, [sp, #152]	; 0x98
 801fa5a:	b292      	uxth	r2, r2
 801fa5c:	9c26      	ldr	r4, [sp, #152]	; 0x98
 801fa5e:	4440      	add	r0, r8
 801fa60:	9135      	str	r1, [sp, #212]	; 0xd4
 801fa62:	f102 0901 	add.w	r9, r2, #1
 801fa66:	eb0e 1102 	add.w	r1, lr, r2, lsl #4
 801fa6a:	eba7 0808 	sub.w	r8, r7, r8
 801fa6e:	9029      	str	r0, [sp, #164]	; 0xa4
 801fa70:	9111      	str	r1, [sp, #68]	; 0x44
 801fa72:	b29b      	uxth	r3, r3
 801fa74:	eb00 0648 	add.w	r6, r0, r8, lsl #1
 801fa78:	9976      	ldr	r1, [sp, #472]	; 0x1d8
 801fa7a:	ea4f 1009 	mov.w	r0, r9, lsl #4
 801fa7e:	931b      	str	r3, [sp, #108]	; 0x6c
 801fa80:	3b01      	subs	r3, #1
 801fa82:	9628      	str	r6, [sp, #160]	; 0xa0
 801fa84:	4401      	add	r1, r0
 801fa86:	f10a 0601 	add.w	r6, sl, #1
 801fa8a:	b29b      	uxth	r3, r3
 801fa8c:	46b8      	mov	r8, r7
 801fa8e:	9130      	str	r1, [sp, #192]	; 0xc0
 801fa90:	1821      	adds	r1, r4, r0
 801fa92:	3301      	adds	r3, #1
 801fa94:	2400      	movs	r4, #0
 801fa96:	912d      	str	r1, [sp, #180]	; 0xb4
 801fa98:	996e      	ldr	r1, [sp, #440]	; 0x1b8
 801fa9a:	4401      	add	r1, r0
 801fa9c:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801fa9e:	912c      	str	r1, [sp, #176]	; 0xb0
 801faa0:	0059      	lsls	r1, r3, #1
 801faa2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801faa4:	911d      	str	r1, [sp, #116]	; 0x74
 801faa6:	eb00 01c9 	add.w	r1, r0, r9, lsl #3
 801faaa:	912f      	str	r1, [sp, #188]	; 0xbc
 801faac:	9914      	ldr	r1, [sp, #80]	; 0x50
 801faae:	fb06 f101 	mul.w	r1, r6, r1
 801fab2:	9115      	str	r1, [sp, #84]	; 0x54
 801fab4:	ea4f 0189 	mov.w	r1, r9, lsl #2
 801fab8:	912b      	str	r1, [sp, #172]	; 0xac
 801faba:	f003 0101 	and.w	r1, r3, #1
 801fabe:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801fac0:	9110      	str	r1, [sp, #64]	; 0x40
 801fac2:	ea4f 110a 	mov.w	r1, sl, lsl #4
 801fac6:	fb05 f303 	mul.w	r3, r5, r3
 801faca:	912a      	str	r1, [sp, #168]	; 0xa8
 801facc:	0131      	lsls	r1, r6, #4
 801face:	933b      	str	r3, [sp, #236]	; 0xec
 801fad0:	9116      	str	r1, [sp, #88]	; 0x58
 801fad2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801fad4:	f8cd b0c4 	str.w	fp, [sp, #196]	; 0xc4
 801fad8:	0093      	lsls	r3, r2, #2
 801fada:	932e      	str	r3, [sp, #184]	; 0xb8
 801fadc:	f007 0303 	and.w	r3, r7, #3
 801fae0:	9321      	str	r3, [sp, #132]	; 0x84
 801fae2:	fa1f f38c 	uxth.w	r3, ip
 801fae6:	9334      	str	r3, [sp, #208]	; 0xd0
 801fae8:	a848      	add	r0, sp, #288	; 0x120
 801faea:	f002 fa67 	bl	8021fbc <ai_padding_opt_phase1>
 801faee:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801faf0:	2b00      	cmp	r3, #0
 801faf2:	f000 81de 	beq.w	801feb2 <st_sssa8_ch_convolve_dw+0x58a>
 801faf6:	f9bd 00d0 	ldrsh.w	r0, [sp, #208]	; 0xd0
 801fafa:	2100      	movs	r1, #0
 801fafc:	46c3      	mov	fp, r8
 801fafe:	9027      	str	r0, [sp, #156]	; 0x9c
 801fb00:	9837      	ldr	r0, [sp, #220]	; 0xdc
 801fb02:	9120      	str	r1, [sp, #128]	; 0x80
 801fb04:	e9dd 3238 	ldrd	r3, r2, [sp, #224]	; 0xe0
 801fb08:	1a9a      	subs	r2, r3, r2
 801fb0a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801fb0c:	425b      	negs	r3, r3
 801fb0e:	fb04 2200 	mla	r2, r4, r0, r2
 801fb12:	b29b      	uxth	r3, r3
 801fb14:	9217      	str	r2, [sp, #92]	; 0x5c
 801fb16:	460a      	mov	r2, r1
 801fb18:	931c      	str	r3, [sp, #112]	; 0x70
 801fb1a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801fb1c:	3b01      	subs	r3, #1
 801fb1e:	9313      	str	r3, [sp, #76]	; 0x4c
 801fb20:	9b48      	ldr	r3, [sp, #288]	; 0x120
 801fb22:	2b00      	cmp	r3, #0
 801fb24:	f000 830e 	beq.w	8020144 <st_sssa8_ch_convolve_dw+0x81c>
 801fb28:	3b01      	subs	r3, #1
 801fb2a:	2101      	movs	r1, #1
 801fb2c:	9348      	str	r3, [sp, #288]	; 0x120
 801fb2e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801fb30:	f8ad 1146 	strh.w	r1, [sp, #326]	; 0x146
 801fb34:	2b01      	cmp	r3, #1
 801fb36:	f000 8354 	beq.w	80201e2 <st_sssa8_ch_convolve_dw+0x8ba>
 801fb3a:	2b04      	cmp	r3, #4
 801fb3c:	f000 83ed 	beq.w	802031a <st_sssa8_ch_convolve_dw+0x9f2>
 801fb40:	2b02      	cmp	r3, #2
 801fb42:	f000 8391 	beq.w	8020268 <st_sssa8_ch_convolve_dw+0x940>
 801fb46:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801fb48:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801fb4a:	4283      	cmp	r3, r0
 801fb4c:	da45      	bge.n	801fbda <st_sssa8_ch_convolve_dw+0x2b2>
 801fb4e:	9922      	ldr	r1, [sp, #136]	; 0x88
 801fb50:	9833      	ldr	r0, [sp, #204]	; 0xcc
 801fb52:	fb02 0201 	mla	r2, r2, r1, r0
 801fb56:	9832      	ldr	r0, [sp, #200]	; 0xc8
 801fb58:	f9bd 1070 	ldrsh.w	r1, [sp, #112]	; 0x70
 801fb5c:	1a12      	subs	r2, r2, r0
 801fb5e:	910b      	str	r1, [sp, #44]	; 0x2c
 801fb60:	4291      	cmp	r1, r2
 801fb62:	9203      	str	r2, [sp, #12]
 801fb64:	da39      	bge.n	801fbda <st_sssa8_ch_convolve_dw+0x2b2>
 801fb66:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
 801fb6a:	46d9      	mov	r9, fp
 801fb6c:	461a      	mov	r2, r3
 801fb6e:	9305      	str	r3, [sp, #20]
 801fb70:	9908      	ldr	r1, [sp, #32]
 801fb72:	0fd2      	lsrs	r2, r2, #31
 801fb74:	9819      	ldr	r0, [sp, #100]	; 0x64
 801fb76:	f1ca 0b00 	rsb	fp, sl, #0
 801fb7a:	fb01 f103 	mul.w	r1, r1, r3
 801fb7e:	4298      	cmp	r0, r3
 801fb80:	bfd8      	it	le
 801fb82:	f042 0201 	orrle.w	r2, r2, #1
 801fb86:	9107      	str	r1, [sp, #28]
 801fb88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801fb8a:	9204      	str	r2, [sp, #16]
 801fb8c:	4688      	mov	r8, r1
 801fb8e:	9b08      	ldr	r3, [sp, #32]
 801fb90:	428b      	cmp	r3, r1
 801fb92:	bfcc      	ite	gt
 801fb94:	2300      	movgt	r3, #0
 801fb96:	2301      	movle	r3, #1
 801fb98:	ea53 73d8 	orrs.w	r3, r3, r8, lsr #31
 801fb9c:	d103      	bne.n	801fba6 <st_sssa8_ch_convolve_dw+0x27e>
 801fb9e:	9b04      	ldr	r3, [sp, #16]
 801fba0:	2b00      	cmp	r3, #0
 801fba2:	f000 822e 	beq.w	8020002 <st_sssa8_ch_convolve_dw+0x6da>
 801fba6:	464a      	mov	r2, r9
 801fba8:	4651      	mov	r1, sl
 801fbaa:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 801fbae:	f002 fa21 	bl	8021ff4 <st_uint8_fill>
 801fbb2:	f108 0801 	add.w	r8, r8, #1
 801fbb6:	9b03      	ldr	r3, [sp, #12]
 801fbb8:	44ca      	add	sl, r9
 801fbba:	ebab 0b09 	sub.w	fp, fp, r9
 801fbbe:	fa0f f888 	sxth.w	r8, r8
 801fbc2:	4598      	cmp	r8, r3
 801fbc4:	4641      	mov	r1, r8
 801fbc6:	dbe2      	blt.n	801fb8e <st_sssa8_ch_convolve_dw+0x266>
 801fbc8:	9b05      	ldr	r3, [sp, #20]
 801fbca:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801fbcc:	3301      	adds	r3, #1
 801fbce:	b21b      	sxth	r3, r3
 801fbd0:	428b      	cmp	r3, r1
 801fbd2:	461a      	mov	r2, r3
 801fbd4:	9305      	str	r3, [sp, #20]
 801fbd6:	dbcb      	blt.n	801fb70 <st_sssa8_ch_convolve_dw+0x248>
 801fbd8:	46cb      	mov	fp, r9
 801fbda:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fbdc:	2b00      	cmp	r3, #0
 801fbde:	f000 82e9 	beq.w	80201b4 <st_sssa8_ch_convolve_dw+0x88c>
 801fbe2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801fbe4:	9b6e      	ldr	r3, [sp, #440]	; 0x1b8
 801fbe6:	f102 0810 	add.w	r8, r2, #16
 801fbea:	9a73      	ldr	r2, [sp, #460]	; 0x1cc
 801fbec:	3310      	adds	r3, #16
 801fbee:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 801fbf2:	3204      	adds	r2, #4
 801fbf4:	9307      	str	r3, [sp, #28]
 801fbf6:	9204      	str	r2, [sp, #16]
 801fbf8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fbfa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801fbfc:	3308      	adds	r3, #8
 801fbfe:	9206      	str	r2, [sp, #24]
 801fc00:	9305      	str	r3, [sp, #20]
 801fc02:	9b76      	ldr	r3, [sp, #472]	; 0x1d8
 801fc04:	e9dd c229 	ldrd	ip, r2, [sp, #164]	; 0xa4
 801fc08:	3310      	adds	r3, #16
 801fc0a:	3220      	adds	r2, #32
 801fc0c:	4666      	mov	r6, ip
 801fc0e:	469e      	mov	lr, r3
 801fc10:	9b07      	ldr	r3, [sp, #28]
 801fc12:	9212      	str	r2, [sp, #72]	; 0x48
 801fc14:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
 801fc18:	920d      	str	r2, [sp, #52]	; 0x34
 801fc1a:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801fc1c:	9203      	str	r2, [sp, #12]
 801fc1e:	f853 cc10 	ldr.w	ip, [r3, #-16]
 801fc22:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801fc26:	9906      	ldr	r1, [sp, #24]
 801fc28:	e953 5403 	ldrd	r5, r4, [r3, #-12]
 801fc2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fc2e:	2b00      	cmp	r3, #0
 801fc30:	d043      	beq.n	801fcba <st_sssa8_ch_convolve_dw+0x392>
 801fc32:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801fc34:	f106 0210 	add.w	r2, r6, #16
 801fc38:	9f03      	ldr	r7, [sp, #12]
 801fc3a:	18f3      	adds	r3, r6, r3
 801fc3c:	960a      	str	r6, [sp, #40]	; 0x28
 801fc3e:	e9cd 8e0b 	strd	r8, lr, [sp, #44]	; 0x2c
 801fc42:	4698      	mov	r8, r3
 801fc44:	f8dd e050 	ldr.w	lr, [sp, #80]	; 0x50
 801fc48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fc4a:	9303      	str	r3, [sp, #12]
 801fc4c:	9b03      	ldr	r3, [sp, #12]
 801fc4e:	f8d1 a000 	ldr.w	sl, [r1]
 801fc52:	f851 b003 	ldr.w	fp, [r1, r3]
 801fc56:	4bcf      	ldr	r3, [pc, #828]	; (801ff94 <st_sssa8_ch_convolve_dw+0x66c>)
 801fc58:	fa1f f98a 	uxth.w	r9, sl
 801fc5c:	f852 6c10 	ldr.w	r6, [r2, #-16]
 801fc60:	ea0b 0303 	and.w	r3, fp, r3
 801fc64:	ea49 490b 	orr.w	r9, r9, fp, lsl #16
 801fc68:	ea43 431a 	orr.w	r3, r3, sl, lsr #16
 801fc6c:	fa27 fa89 	sxtab16	sl, r7, r9
 801fc70:	fb26 cc0a 	smlad	ip, r6, sl, ip
 801fc74:	ea4f 2939 	mov.w	r9, r9, ror #8
 801fc78:	f852 6c0c 	ldr.w	r6, [r2, #-12]
 801fc7c:	fa27 f989 	sxtab16	r9, r7, r9
 801fc80:	fb26 5509 	smlad	r5, r6, r9, r5
 801fc84:	fa27 f983 	sxtab16	r9, r7, r3
 801fc88:	f852 6c08 	ldr.w	r6, [r2, #-8]
 801fc8c:	fb26 4409 	smlad	r4, r6, r9, r4
 801fc90:	ea4f 2333 	mov.w	r3, r3, ror #8
 801fc94:	f852 6c04 	ldr.w	r6, [r2, #-4]
 801fc98:	fa27 f383 	sxtab16	r3, r7, r3
 801fc9c:	fb26 0003 	smlad	r0, r6, r3, r0
 801fca0:	3210      	adds	r2, #16
 801fca2:	4471      	add	r1, lr
 801fca4:	4590      	cmp	r8, r2
 801fca6:	d1d1      	bne.n	801fc4c <st_sssa8_ch_convolve_dw+0x324>
 801fca8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801fcaa:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801fcac:	9a06      	ldr	r2, [sp, #24]
 801fcae:	441e      	add	r6, r3
 801fcb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801fcb2:	9703      	str	r7, [sp, #12]
 801fcb4:	1899      	adds	r1, r3, r2
 801fcb6:	e9dd 8e0b 	ldrd	r8, lr, [sp, #44]	; 0x2c
 801fcba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fcbc:	b1f3      	cbz	r3, 801fcfc <st_sssa8_ch_convolve_dw+0x3d4>
 801fcbe:	680b      	ldr	r3, [r1, #0]
 801fcc0:	3608      	adds	r6, #8
 801fcc2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801fcc4:	fa4f f983 	sxtb.w	r9, r3
 801fcc8:	f836 ac08 	ldrh.w	sl, [r6, #-8]
 801fccc:	f343 2107 	sbfx	r1, r3, #8, #8
 801fcd0:	f343 4207 	sbfx	r2, r3, #16, #8
 801fcd4:	eba9 0907 	sub.w	r9, r9, r7
 801fcd8:	ebc7 6323 	rsb	r3, r7, r3, asr #24
 801fcdc:	1bc9      	subs	r1, r1, r7
 801fcde:	1bd2      	subs	r2, r2, r7
 801fce0:	fb1a cc09 	smlabb	ip, sl, r9, ip
 801fce4:	f836 ac06 	ldrh.w	sl, [r6, #-6]
 801fce8:	f836 9c04 	ldrh.w	r9, [r6, #-4]
 801fcec:	fb1a 5501 	smlabb	r5, sl, r1, r5
 801fcf0:	f836 1c02 	ldrh.w	r1, [r6, #-2]
 801fcf4:	fb19 4402 	smlabb	r4, r9, r2, r4
 801fcf8:	fb11 0003 	smlabb	r0, r1, r3, r0
 801fcfc:	9b05      	ldr	r3, [sp, #20]
 801fcfe:	f85e 9c10 	ldr.w	r9, [lr, #-16]
 801fd02:	f933 2c08 	ldrsh.w	r2, [r3, #-8]
 801fd06:	f858 1c10 	ldr.w	r1, [r8, #-16]
 801fd0a:	2a15      	cmp	r2, #21
 801fd0c:	f340 8113 	ble.w	801ff36 <st_sssa8_ch_convolve_dw+0x60e>
 801fd10:	1e93      	subs	r3, r2, #2
 801fd12:	2701      	movs	r7, #1
 801fd14:	3a01      	subs	r2, #1
 801fd16:	fa07 f303 	lsl.w	r3, r7, r3
 801fd1a:	fb5c 3c09 	smmla	ip, ip, r9, r3
 801fd1e:	fa4c fc02 	asr.w	ip, ip, r2
 801fd22:	448c      	add	ip, r1
 801fd24:	f30c 0c07 	ssat	ip, #8, ip
 801fd28:	9b04      	ldr	r3, [sp, #16]
 801fd2a:	f803 cc04 	strb.w	ip, [r3, #-4]
 801fd2e:	9b05      	ldr	r3, [sp, #20]
 801fd30:	f933 1c06 	ldrsh.w	r1, [r3, #-6]
 801fd34:	2915      	cmp	r1, #21
 801fd36:	f340 80ee 	ble.w	801ff16 <st_sssa8_ch_convolve_dw+0x5ee>
 801fd3a:	1e8a      	subs	r2, r1, #2
 801fd3c:	2301      	movs	r3, #1
 801fd3e:	3901      	subs	r1, #1
 801fd40:	f85e 7c0c 	ldr.w	r7, [lr, #-12]
 801fd44:	fa03 f202 	lsl.w	r2, r3, r2
 801fd48:	f858 3c0c 	ldr.w	r3, [r8, #-12]
 801fd4c:	fb55 2507 	smmla	r5, r5, r7, r2
 801fd50:	fa45 f101 	asr.w	r1, r5, r1
 801fd54:	4419      	add	r1, r3
 801fd56:	f301 0107 	ssat	r1, #8, r1
 801fd5a:	9b04      	ldr	r3, [sp, #16]
 801fd5c:	f803 1c03 	strb.w	r1, [r3, #-3]
 801fd60:	9b05      	ldr	r3, [sp, #20]
 801fd62:	f933 1c04 	ldrsh.w	r1, [r3, #-4]
 801fd66:	2915      	cmp	r1, #21
 801fd68:	f340 80c5 	ble.w	801fef6 <st_sssa8_ch_convolve_dw+0x5ce>
 801fd6c:	1e8a      	subs	r2, r1, #2
 801fd6e:	2301      	movs	r3, #1
 801fd70:	3901      	subs	r1, #1
 801fd72:	f85e 5c08 	ldr.w	r5, [lr, #-8]
 801fd76:	fa03 f202 	lsl.w	r2, r3, r2
 801fd7a:	f858 3c08 	ldr.w	r3, [r8, #-8]
 801fd7e:	fb54 2405 	smmla	r4, r4, r5, r2
 801fd82:	fa44 f101 	asr.w	r1, r4, r1
 801fd86:	4419      	add	r1, r3
 801fd88:	f301 0107 	ssat	r1, #8, r1
 801fd8c:	9b04      	ldr	r3, [sp, #16]
 801fd8e:	f803 1c02 	strb.w	r1, [r3, #-2]
 801fd92:	9b05      	ldr	r3, [sp, #20]
 801fd94:	f933 1c02 	ldrsh.w	r1, [r3, #-2]
 801fd98:	2915      	cmp	r1, #21
 801fd9a:	f340 809c 	ble.w	801fed6 <st_sssa8_ch_convolve_dw+0x5ae>
 801fd9e:	1e8a      	subs	r2, r1, #2
 801fda0:	2301      	movs	r3, #1
 801fda2:	3901      	subs	r1, #1
 801fda4:	f85e 4c04 	ldr.w	r4, [lr, #-4]
 801fda8:	fa03 f202 	lsl.w	r2, r3, r2
 801fdac:	f858 3c04 	ldr.w	r3, [r8, #-4]
 801fdb0:	fb50 2004 	smmla	r0, r0, r4, r2
 801fdb4:	fa40 f101 	asr.w	r1, r0, r1
 801fdb8:	4419      	add	r1, r3
 801fdba:	f301 0107 	ssat	r1, #8, r1
 801fdbe:	9b04      	ldr	r3, [sp, #16]
 801fdc0:	f803 1c01 	strb.w	r1, [r3, #-1]
 801fdc4:	9a05      	ldr	r2, [sp, #20]
 801fdc6:	f10e 0e10 	add.w	lr, lr, #16
 801fdca:	9b07      	ldr	r3, [sp, #28]
 801fdcc:	f108 0810 	add.w	r8, r8, #16
 801fdd0:	3208      	adds	r2, #8
 801fdd2:	3310      	adds	r3, #16
 801fdd4:	9205      	str	r2, [sp, #20]
 801fdd6:	9a04      	ldr	r2, [sp, #16]
 801fdd8:	9307      	str	r3, [sp, #28]
 801fdda:	3204      	adds	r2, #4
 801fddc:	9204      	str	r2, [sp, #16]
 801fdde:	9a06      	ldr	r2, [sp, #24]
 801fde0:	3204      	adds	r2, #4
 801fde2:	9206      	str	r2, [sp, #24]
 801fde4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fde6:	429a      	cmp	r2, r3
 801fde8:	f47f af19 	bne.w	801fc1e <st_sssa8_ch_convolve_dw+0x2f6>
 801fdec:	9b73      	ldr	r3, [sp, #460]	; 0x1cc
 801fdee:	46b4      	mov	ip, r6
 801fdf0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801fdf2:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 801fdf6:	4413      	add	r3, r2
 801fdf8:	f8dd 80c0 	ldr.w	r8, [sp, #192]	; 0xc0
 801fdfc:	e9dd ae2c 	ldrd	sl, lr, [sp, #176]	; 0xb0
 801fe00:	e9dd 692e 	ldrd	r6, r9, [sp, #184]	; 0xb8
 801fe04:	9373      	str	r3, [sp, #460]	; 0x1cc
 801fe06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801fe08:	2b00      	cmp	r3, #0
 801fe0a:	d044      	beq.n	801fe96 <st_sssa8_ch_convolve_dw+0x56e>
 801fe0c:	4433      	add	r3, r6
 801fe0e:	f1ae 0704 	sub.w	r7, lr, #4
 801fe12:	f1a9 0902 	sub.w	r9, r9, #2
 801fe16:	f1a8 0804 	sub.w	r8, r8, #4
 801fe1a:	b29b      	uxth	r3, r3
 801fe1c:	f8dd e1cc 	ldr.w	lr, [sp, #460]	; 0x1cc
 801fe20:	f9bd 5024 	ldrsh.w	r5, [sp, #36]	; 0x24
 801fe24:	9303      	str	r3, [sp, #12]
 801fe26:	1c73      	adds	r3, r6, #1
 801fe28:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801fe2a:	f85a 1b04 	ldr.w	r1, [sl], #4
 801fe2e:	4432      	add	r2, r6
 801fe30:	b29e      	uxth	r6, r3
 801fe32:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801fe34:	b163      	cbz	r3, 801fe50 <st_sssa8_ch_convolve_dw+0x528>
 801fe36:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801fe38:	eb0c 0403 	add.w	r4, ip, r3
 801fe3c:	f992 3000 	ldrsb.w	r3, [r2]
 801fe40:	445a      	add	r2, fp
 801fe42:	f83c 0b02 	ldrh.w	r0, [ip], #2
 801fe46:	1b5b      	subs	r3, r3, r5
 801fe48:	45a4      	cmp	ip, r4
 801fe4a:	fb10 1103 	smlabb	r1, r0, r3, r1
 801fe4e:	d1f5      	bne.n	801fe3c <st_sssa8_ch_convolve_dw+0x514>
 801fe50:	f939 2f02 	ldrsh.w	r2, [r9, #2]!
 801fe54:	f858 4f04 	ldr.w	r4, [r8, #4]!
 801fe58:	2a15      	cmp	r2, #21
 801fe5a:	f857 0f04 	ldr.w	r0, [r7, #4]!
 801fe5e:	dd78      	ble.n	801ff52 <st_sssa8_ch_convolve_dw+0x62a>
 801fe60:	1e93      	subs	r3, r2, #2
 801fe62:	3a01      	subs	r2, #1
 801fe64:	9204      	str	r2, [sp, #16]
 801fe66:	2201      	movs	r2, #1
 801fe68:	fa02 f303 	lsl.w	r3, r2, r3
 801fe6c:	fb51 3104 	smmla	r1, r1, r4, r3
 801fe70:	9b04      	ldr	r3, [sp, #16]
 801fe72:	4119      	asrs	r1, r3
 801fe74:	4401      	add	r1, r0
 801fe76:	f301 0107 	ssat	r1, #8, r1
 801fe7a:	f88e 1000 	strb.w	r1, [lr]
 801fe7e:	9b03      	ldr	r3, [sp, #12]
 801fe80:	f10e 0e01 	add.w	lr, lr, #1
 801fe84:	429e      	cmp	r6, r3
 801fe86:	d1ce      	bne.n	801fe26 <st_sssa8_ch_convolve_dw+0x4fe>
 801fe88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801fe8a:	9a73      	ldr	r2, [sp, #460]	; 0x1cc
 801fe8c:	3b01      	subs	r3, #1
 801fe8e:	b29b      	uxth	r3, r3
 801fe90:	3301      	adds	r3, #1
 801fe92:	441a      	add	r2, r3
 801fe94:	9273      	str	r2, [sp, #460]	; 0x1cc
 801fe96:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801fe98:	9922      	ldr	r1, [sp, #136]	; 0x88
 801fe9a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801fe9c:	440b      	add	r3, r1
 801fe9e:	3201      	adds	r2, #1
 801fea0:	b29b      	uxth	r3, r3
 801fea2:	b212      	sxth	r2, r2
 801fea4:	931c      	str	r3, [sp, #112]	; 0x70
 801fea6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801fea8:	9220      	str	r2, [sp, #128]	; 0x80
 801feaa:	4293      	cmp	r3, r2
 801feac:	f73f ae38 	bgt.w	801fb20 <st_sssa8_ch_convolve_dw+0x1f8>
 801feb0:	46d8      	mov	r8, fp
 801feb2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801feb4:	9937      	ldr	r1, [sp, #220]	; 0xdc
 801feb6:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 801feb8:	440b      	add	r3, r1
 801feba:	3201      	adds	r2, #1
 801febc:	b29b      	uxth	r3, r3
 801febe:	b212      	sxth	r2, r2
 801fec0:	9334      	str	r3, [sp, #208]	; 0xd0
 801fec2:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 801fec4:	4614      	mov	r4, r2
 801fec6:	9236      	str	r2, [sp, #216]	; 0xd8
 801fec8:	4293      	cmp	r3, r2
 801feca:	f73f ae0d 	bgt.w	801fae8 <st_sssa8_ch_convolve_dw+0x1c0>
 801fece:	2000      	movs	r0, #0
 801fed0:	b05d      	add	sp, #372	; 0x174
 801fed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fed6:	2900      	cmp	r1, #0
 801fed8:	dd48      	ble.n	801ff6c <st_sssa8_ch_convolve_dw+0x644>
 801feda:	f85e 3c04 	ldr.w	r3, [lr, #-4]
 801fede:	0040      	lsls	r0, r0, #1
 801fee0:	f858 2c04 	ldr.w	r2, [r8, #-4]
 801fee4:	fb50 2003 	smmla	r0, r0, r3, r2
 801fee8:	4108      	asrs	r0, r1
 801feea:	f300 0007 	ssat	r0, #8, r0
 801feee:	9b04      	ldr	r3, [sp, #16]
 801fef0:	f803 0c01 	strb.w	r0, [r3, #-1]
 801fef4:	e766      	b.n	801fdc4 <st_sssa8_ch_convolve_dw+0x49c>
 801fef6:	2900      	cmp	r1, #0
 801fef8:	dd5d      	ble.n	801ffb6 <st_sssa8_ch_convolve_dw+0x68e>
 801fefa:	f85e 3c08 	ldr.w	r3, [lr, #-8]
 801fefe:	0064      	lsls	r4, r4, #1
 801ff00:	f858 2c08 	ldr.w	r2, [r8, #-8]
 801ff04:	fb54 2403 	smmla	r4, r4, r3, r2
 801ff08:	410c      	asrs	r4, r1
 801ff0a:	f304 0407 	ssat	r4, #8, r4
 801ff0e:	9b04      	ldr	r3, [sp, #16]
 801ff10:	f803 4c02 	strb.w	r4, [r3, #-2]
 801ff14:	e73d      	b.n	801fd92 <st_sssa8_ch_convolve_dw+0x46a>
 801ff16:	2900      	cmp	r1, #0
 801ff18:	dd60      	ble.n	801ffdc <st_sssa8_ch_convolve_dw+0x6b4>
 801ff1a:	f85e 3c0c 	ldr.w	r3, [lr, #-12]
 801ff1e:	006d      	lsls	r5, r5, #1
 801ff20:	f858 2c0c 	ldr.w	r2, [r8, #-12]
 801ff24:	fb55 2503 	smmla	r5, r5, r3, r2
 801ff28:	410d      	asrs	r5, r1
 801ff2a:	f305 0507 	ssat	r5, #8, r5
 801ff2e:	9b04      	ldr	r3, [sp, #16]
 801ff30:	f803 5c03 	strb.w	r5, [r3, #-3]
 801ff34:	e714      	b.n	801fd60 <st_sssa8_ch_convolve_dw+0x438>
 801ff36:	2a00      	cmp	r2, #0
 801ff38:	dd2e      	ble.n	801ff98 <st_sssa8_ch_convolve_dw+0x670>
 801ff3a:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 801ff3e:	fb5c 1c09 	smmla	ip, ip, r9, r1
 801ff42:	fa4c f202 	asr.w	r2, ip, r2
 801ff46:	f302 0207 	ssat	r2, #8, r2
 801ff4a:	9b04      	ldr	r3, [sp, #16]
 801ff4c:	f803 2c04 	strb.w	r2, [r3, #-4]
 801ff50:	e6ed      	b.n	801fd2e <st_sssa8_ch_convolve_dw+0x406>
 801ff52:	2a00      	cmp	r2, #0
 801ff54:	f340 80e8 	ble.w	8020128 <st_sssa8_ch_convolve_dw+0x800>
 801ff58:	0049      	lsls	r1, r1, #1
 801ff5a:	fb51 0104 	smmla	r1, r1, r4, r0
 801ff5e:	fa41 f202 	asr.w	r2, r1, r2
 801ff62:	f302 0207 	ssat	r2, #8, r2
 801ff66:	f88e 2000 	strb.w	r2, [lr]
 801ff6a:	e788      	b.n	801fe7e <st_sssa8_ch_convolve_dw+0x556>
 801ff6c:	f1c1 0101 	rsb	r1, r1, #1
 801ff70:	fa00 f201 	lsl.w	r2, r0, r1
 801ff74:	f302 021f 	ssat	r2, #32, r2
 801ff78:	f85e 3c04 	ldr.w	r3, [lr, #-4]
 801ff7c:	fb52 f213 	smmulr	r2, r2, r3
 801ff80:	f858 3c04 	ldr.w	r3, [r8, #-4]
 801ff84:	4413      	add	r3, r2
 801ff86:	f303 0307 	ssat	r3, #8, r3
 801ff8a:	9a04      	ldr	r2, [sp, #16]
 801ff8c:	f802 3c01 	strb.w	r3, [r2, #-1]
 801ff90:	e718      	b.n	801fdc4 <st_sssa8_ch_convolve_dw+0x49c>
 801ff92:	bf00      	nop
 801ff94:	ffff0000 	.word	0xffff0000
 801ff98:	f1c2 0201 	rsb	r2, r2, #1
 801ff9c:	fa0c f202 	lsl.w	r2, ip, r2
 801ffa0:	f302 021f 	ssat	r2, #32, r2
 801ffa4:	fb52 f219 	smmulr	r2, r2, r9
 801ffa8:	440a      	add	r2, r1
 801ffaa:	f302 0207 	ssat	r2, #8, r2
 801ffae:	9b04      	ldr	r3, [sp, #16]
 801ffb0:	f803 2c04 	strb.w	r2, [r3, #-4]
 801ffb4:	e6bb      	b.n	801fd2e <st_sssa8_ch_convolve_dw+0x406>
 801ffb6:	f1c1 0101 	rsb	r1, r1, #1
 801ffba:	fa04 f201 	lsl.w	r2, r4, r1
 801ffbe:	f302 021f 	ssat	r2, #32, r2
 801ffc2:	f85e 3c08 	ldr.w	r3, [lr, #-8]
 801ffc6:	fb52 f213 	smmulr	r2, r2, r3
 801ffca:	f858 3c08 	ldr.w	r3, [r8, #-8]
 801ffce:	4413      	add	r3, r2
 801ffd0:	f303 0307 	ssat	r3, #8, r3
 801ffd4:	9a04      	ldr	r2, [sp, #16]
 801ffd6:	f802 3c02 	strb.w	r3, [r2, #-2]
 801ffda:	e6da      	b.n	801fd92 <st_sssa8_ch_convolve_dw+0x46a>
 801ffdc:	f1c1 0101 	rsb	r1, r1, #1
 801ffe0:	fa05 f201 	lsl.w	r2, r5, r1
 801ffe4:	f302 021f 	ssat	r2, #32, r2
 801ffe8:	f85e 3c0c 	ldr.w	r3, [lr, #-12]
 801ffec:	fb52 f213 	smmulr	r2, r2, r3
 801fff0:	f858 3c0c 	ldr.w	r3, [r8, #-12]
 801fff4:	4413      	add	r3, r2
 801fff6:	f303 0307 	ssat	r3, #8, r3
 801fffa:	9a04      	ldr	r2, [sp, #16]
 801fffc:	f802 3c03 	strb.w	r3, [r2, #-3]
 8020000:	e6ae      	b.n	801fd60 <st_sssa8_ch_convolve_dw+0x438>
 8020002:	9b07      	ldr	r3, [sp, #28]
 8020004:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8020006:	4419      	add	r1, r3
 8020008:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802000a:	fb03 0101 	mla	r1, r3, r1, r0
 802000e:	2b00      	cmp	r3, #0
 8020010:	f43f adcf 	beq.w	801fbb2 <st_sssa8_ch_convolve_dw+0x28a>
 8020014:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8020016:	2f00      	cmp	r7, #0
 8020018:	f43f adcb 	beq.w	801fbb2 <st_sssa8_ch_convolve_dw+0x28a>
 802001c:	18ca      	adds	r2, r1, r3
 802001e:	1ebb      	subs	r3, r7, #2
 8020020:	465c      	mov	r4, fp
 8020022:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 8020026:	9306      	str	r3, [sp, #24]
 8020028:	1efb      	subs	r3, r7, #3
 802002a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 802002e:	4650      	mov	r0, sl
 8020030:	930a      	str	r3, [sp, #40]	; 0x28
 8020032:	4693      	mov	fp, r2
 8020034:	1f3b      	subs	r3, r7, #4
 8020036:	46a1      	mov	r9, r4
 8020038:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 802003c:	e9cd 3a0c 	strd	r3, sl, [sp, #48]	; 0x30
 8020040:	19c6      	adds	r6, r0, r7
 8020042:	f101 0e01 	add.w	lr, r1, #1
 8020046:	42b1      	cmp	r1, r6
 8020048:	bf38      	it	cc
 802004a:	4570      	cmpcc	r0, lr
 802004c:	d362      	bcc.n	8020114 <st_sssa8_ch_convolve_dw+0x7ec>
 802004e:	2f0b      	cmp	r7, #11
 8020050:	d960      	bls.n	8020114 <st_sssa8_ch_convolve_dw+0x7ec>
 8020052:	f009 0303 	and.w	r3, r9, #3
 8020056:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020058:	1cda      	adds	r2, r3, #3
 802005a:	42a2      	cmp	r2, r4
 802005c:	f200 80b4 	bhi.w	80201c8 <st_sssa8_ch_convolve_dw+0x8a0>
 8020060:	2b00      	cmp	r3, #0
 8020062:	d05e      	beq.n	8020122 <st_sssa8_ch_convolve_dw+0x7fa>
 8020064:	780a      	ldrb	r2, [r1, #0]
 8020066:	2b01      	cmp	r3, #1
 8020068:	f100 0a01 	add.w	sl, r0, #1
 802006c:	9d06      	ldr	r5, [sp, #24]
 802006e:	7002      	strb	r2, [r0, #0]
 8020070:	d00b      	beq.n	802008a <st_sssa8_ch_convolve_dw+0x762>
 8020072:	780a      	ldrb	r2, [r1, #0]
 8020074:	2b03      	cmp	r3, #3
 8020076:	f100 0a02 	add.w	sl, r0, #2
 802007a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802007c:	7042      	strb	r2, [r0, #1]
 802007e:	d104      	bne.n	802008a <st_sssa8_ch_convolve_dw+0x762>
 8020080:	780a      	ldrb	r2, [r1, #0]
 8020082:	f100 0a03 	add.w	sl, r0, #3
 8020086:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8020088:	7082      	strb	r2, [r0, #2]
 802008a:	f891 c000 	ldrb.w	ip, [r1]
 802008e:	2400      	movs	r4, #0
 8020090:	eba7 0803 	sub.w	r8, r7, r3
 8020094:	2200      	movs	r2, #0
 8020096:	f36c 0407 	bfi	r4, ip, #0, #8
 802009a:	4403      	add	r3, r0
 802009c:	ea4f 0098 	mov.w	r0, r8, lsr #2
 80200a0:	f36c 240f 	bfi	r4, ip, #8, #8
 80200a4:	f36c 4417 	bfi	r4, ip, #16, #8
 80200a8:	f36c 641f 	bfi	r4, ip, #24, #8
 80200ac:	3201      	adds	r2, #1
 80200ae:	f843 4b04 	str.w	r4, [r3], #4
 80200b2:	4282      	cmp	r2, r0
 80200b4:	d3fa      	bcc.n	80200ac <st_sssa8_ch_convolve_dw+0x784>
 80200b6:	f028 0203 	bic.w	r2, r8, #3
 80200ba:	4542      	cmp	r2, r8
 80200bc:	4492      	add	sl, r2
 80200be:	eba5 0502 	sub.w	r5, r5, r2
 80200c2:	d01a      	beq.n	80200fa <st_sssa8_ch_convolve_dw+0x7d2>
 80200c4:	780b      	ldrb	r3, [r1, #0]
 80200c6:	f88a 3000 	strb.w	r3, [sl]
 80200ca:	b1b5      	cbz	r5, 80200fa <st_sssa8_ch_convolve_dw+0x7d2>
 80200cc:	780b      	ldrb	r3, [r1, #0]
 80200ce:	2d01      	cmp	r5, #1
 80200d0:	f88a 3001 	strb.w	r3, [sl, #1]
 80200d4:	d011      	beq.n	80200fa <st_sssa8_ch_convolve_dw+0x7d2>
 80200d6:	780b      	ldrb	r3, [r1, #0]
 80200d8:	2d02      	cmp	r5, #2
 80200da:	f88a 3002 	strb.w	r3, [sl, #2]
 80200de:	d00c      	beq.n	80200fa <st_sssa8_ch_convolve_dw+0x7d2>
 80200e0:	780b      	ldrb	r3, [r1, #0]
 80200e2:	2d03      	cmp	r5, #3
 80200e4:	f88a 3003 	strb.w	r3, [sl, #3]
 80200e8:	d007      	beq.n	80200fa <st_sssa8_ch_convolve_dw+0x7d2>
 80200ea:	780b      	ldrb	r3, [r1, #0]
 80200ec:	2d04      	cmp	r5, #4
 80200ee:	f88a 3004 	strb.w	r3, [sl, #4]
 80200f2:	d002      	beq.n	80200fa <st_sssa8_ch_convolve_dw+0x7d2>
 80200f4:	780b      	ldrb	r3, [r1, #0]
 80200f6:	f88a 3005 	strb.w	r3, [sl, #5]
 80200fa:	45de      	cmp	lr, fp
 80200fc:	4671      	mov	r1, lr
 80200fe:	4630      	mov	r0, r6
 8020100:	eba9 0907 	sub.w	r9, r9, r7
 8020104:	d19c      	bne.n	8020040 <st_sssa8_ch_convolve_dw+0x718>
 8020106:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 802010a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 802010e:	e9dd a80d 	ldrd	sl, r8, [sp, #52]	; 0x34
 8020112:	e54e      	b.n	801fbb2 <st_sssa8_ch_convolve_dw+0x28a>
 8020114:	4603      	mov	r3, r0
 8020116:	780a      	ldrb	r2, [r1, #0]
 8020118:	f803 2b01 	strb.w	r2, [r3], #1
 802011c:	429e      	cmp	r6, r3
 802011e:	d1fa      	bne.n	8020116 <st_sssa8_ch_convolve_dw+0x7ee>
 8020120:	e7eb      	b.n	80200fa <st_sssa8_ch_convolve_dw+0x7d2>
 8020122:	4625      	mov	r5, r4
 8020124:	4682      	mov	sl, r0
 8020126:	e7b0      	b.n	802008a <st_sssa8_ch_convolve_dw+0x762>
 8020128:	f1c2 0201 	rsb	r2, r2, #1
 802012c:	fa01 f202 	lsl.w	r2, r1, r2
 8020130:	f302 031f 	ssat	r3, #32, r2
 8020134:	fb53 f314 	smmulr	r3, r3, r4
 8020138:	4403      	add	r3, r0
 802013a:	f303 0307 	ssat	r3, #8, r3
 802013e:	f88e 3000 	strb.w	r3, [lr]
 8020142:	e69c      	b.n	801fe7e <st_sssa8_ch_convolve_dw+0x556>
 8020144:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8020146:	2b00      	cmp	r3, #0
 8020148:	d041      	beq.n	80201ce <st_sssa8_ch_convolve_dw+0x8a6>
 802014a:	3b01      	subs	r3, #1
 802014c:	f8bd 1144 	ldrh.w	r1, [sp, #324]	; 0x144
 8020150:	9349      	str	r3, [sp, #292]	; 0x124
 8020152:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8020154:	f8ad 1146 	strh.w	r1, [sp, #326]	; 0x146
 8020158:	2b01      	cmp	r3, #1
 802015a:	f47f acee 	bne.w	801fb3a <st_sssa8_ch_convolve_dw+0x212>
 802015e:	2901      	cmp	r1, #1
 8020160:	d03f      	beq.n	80201e2 <st_sssa8_ch_convolve_dw+0x8ba>
 8020162:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020164:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8020166:	f9bd 5070 	ldrsh.w	r5, [sp, #112]	; 0x70
 802016a:	428b      	cmp	r3, r1
 802016c:	f6bf ad35 	bge.w	801fbda <st_sssa8_ch_convolve_dw+0x2b2>
 8020170:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8020172:	461c      	mov	r4, r3
 8020174:	f8cd b00c 	str.w	fp, [sp, #12]
 8020178:	4618      	mov	r0, r3
 802017a:	4637      	mov	r7, r6
 802017c:	f8dd 80ec 	ldr.w	r8, [sp, #236]	; 0xec
 8020180:	f8dd 907c 	ldr.w	r9, [sp, #124]	; 0x7c
 8020184:	468b      	mov	fp, r1
 8020186:	f8dd a020 	ldr.w	sl, [sp, #32]
 802018a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 802018c:	3401      	adds	r4, #1
 802018e:	fb00 500a 	mla	r0, r0, sl, r5
 8020192:	4639      	mov	r1, r7
 8020194:	4642      	mov	r2, r8
 8020196:	b224      	sxth	r4, r4
 8020198:	fb06 9000 	mla	r0, r6, r0, r9
 802019c:	f004 f9c0 	bl	8024520 <st_dsp_arm_copy_q7>
 80201a0:	4447      	add	r7, r8
 80201a2:	455c      	cmp	r4, fp
 80201a4:	4620      	mov	r0, r4
 80201a6:	dbf1      	blt.n	802018c <st_sssa8_ch_convolve_dw+0x864>
 80201a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80201aa:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80201ae:	2b00      	cmp	r3, #0
 80201b0:	f47f ad17 	bne.w	801fbe2 <st_sssa8_ch_convolve_dw+0x2ba>
 80201b4:	461e      	mov	r6, r3
 80201b6:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 80201ba:	f8dd e098 	ldr.w	lr, [sp, #152]	; 0x98
 80201be:	f8dd 81d8 	ldr.w	r8, [sp, #472]	; 0x1d8
 80201c2:	e9dd 9c28 	ldrd	r9, ip, [sp, #160]	; 0xa0
 80201c6:	e61e      	b.n	801fe06 <st_sssa8_ch_convolve_dw+0x4de>
 80201c8:	4625      	mov	r5, r4
 80201ca:	4682      	mov	sl, r0
 80201cc:	e77a      	b.n	80200c4 <st_sssa8_ch_convolve_dw+0x79c>
 80201ce:	9b4a      	ldr	r3, [sp, #296]	; 0x128
 80201d0:	2101      	movs	r1, #1
 80201d2:	3b01      	subs	r3, #1
 80201d4:	f8ad 1146 	strh.w	r1, [sp, #326]	; 0x146
 80201d8:	934a      	str	r3, [sp, #296]	; 0x128
 80201da:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80201dc:	2b01      	cmp	r3, #1
 80201de:	f47f acac 	bne.w	801fb3a <st_sssa8_ch_convolve_dw+0x212>
 80201e2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80201e4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80201e6:	4283      	cmp	r3, r0
 80201e8:	f6bf acf7 	bge.w	801fbda <st_sssa8_ch_convolve_dw+0x2b2>
 80201ec:	9922      	ldr	r1, [sp, #136]	; 0x88
 80201ee:	9833      	ldr	r0, [sp, #204]	; 0xcc
 80201f0:	fb02 0201 	mla	r2, r2, r1, r0
 80201f4:	9832      	ldr	r0, [sp, #200]	; 0xc8
 80201f6:	f9bd 1070 	ldrsh.w	r1, [sp, #112]	; 0x70
 80201fa:	1a15      	subs	r5, r2, r0
 80201fc:	9104      	str	r1, [sp, #16]
 80201fe:	428d      	cmp	r5, r1
 8020200:	f77f aceb 	ble.w	801fbda <st_sssa8_ch_convolve_dw+0x2b2>
 8020204:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
 8020208:	4698      	mov	r8, r3
 802020a:	461a      	mov	r2, r3
 802020c:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 8020210:	9e08      	ldr	r6, [sp, #32]
 8020212:	fb06 f302 	mul.w	r3, r6, r2
 8020216:	ea4f 77d8 	mov.w	r7, r8, lsr #31
 802021a:	f8dd c010 	ldr.w	ip, [sp, #16]
 802021e:	9303      	str	r3, [sp, #12]
 8020220:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020222:	4664      	mov	r4, ip
 8020224:	4293      	cmp	r3, r2
 8020226:	bfd8      	it	le
 8020228:	f047 0701 	orrle.w	r7, r7, #1
 802022c:	4566      	cmp	r6, ip
 802022e:	465a      	mov	r2, fp
 8020230:	4651      	mov	r1, sl
 8020232:	4648      	mov	r0, r9
 8020234:	bfcc      	ite	gt
 8020236:	2300      	movgt	r3, #0
 8020238:	2301      	movle	r3, #1
 802023a:	ea53 73d4 	orrs.w	r3, r3, r4, lsr #31
 802023e:	d102      	bne.n	8020246 <st_sssa8_ch_convolve_dw+0x91e>
 8020240:	2f00      	cmp	r7, #0
 8020242:	f000 80c4 	beq.w	80203ce <st_sssa8_ch_convolve_dw+0xaa6>
 8020246:	f001 fed5 	bl	8021ff4 <st_uint8_fill>
 802024a:	3401      	adds	r4, #1
 802024c:	44da      	add	sl, fp
 802024e:	b224      	sxth	r4, r4
 8020250:	42ac      	cmp	r4, r5
 8020252:	46a4      	mov	ip, r4
 8020254:	dbea      	blt.n	802022c <st_sssa8_ch_convolve_dw+0x904>
 8020256:	f108 0801 	add.w	r8, r8, #1
 802025a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802025c:	fa0f f888 	sxth.w	r8, r8
 8020260:	4598      	cmp	r8, r3
 8020262:	4642      	mov	r2, r8
 8020264:	dbd5      	blt.n	8020212 <st_sssa8_ch_convolve_dw+0x8ea>
 8020266:	e4b8      	b.n	801fbda <st_sssa8_ch_convolve_dw+0x2b2>
 8020268:	9927      	ldr	r1, [sp, #156]	; 0x9c
 802026a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 802026c:	4281      	cmp	r1, r0
 802026e:	f6bf acb4 	bge.w	801fbda <st_sssa8_ch_convolve_dw+0x2b2>
 8020272:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8020274:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8020276:	fb02 0203 	mla	r2, r2, r3, r0
 802027a:	9832      	ldr	r0, [sp, #200]	; 0xc8
 802027c:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
 8020280:	1a15      	subs	r5, r2, r0
 8020282:	9304      	str	r3, [sp, #16]
 8020284:	42ab      	cmp	r3, r5
 8020286:	f6bf aca8 	bge.w	801fbda <st_sssa8_ch_convolve_dw+0x2b2>
 802028a:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
 802028e:	460e      	mov	r6, r1
 8020290:	4689      	mov	r9, r1
 8020292:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
 8020296:	9f08      	ldr	r7, [sp, #32]
 8020298:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802029a:	9a04      	ldr	r2, [sp, #16]
 802029c:	454b      	cmp	r3, r9
 802029e:	fb09 f307 	mul.w	r3, r9, r7
 80202a2:	4614      	mov	r4, r2
 80202a4:	bfcc      	ite	gt
 80202a6:	2100      	movgt	r1, #0
 80202a8:	2101      	movle	r1, #1
 80202aa:	9303      	str	r3, [sp, #12]
 80202ac:	ea41 79d6 	orr.w	r9, r1, r6, lsr #31
 80202b0:	464b      	mov	r3, r9
 80202b2:	46b1      	mov	r9, r6
 80202b4:	461e      	mov	r6, r3
 80202b6:	4297      	cmp	r7, r2
 80202b8:	bfcc      	ite	gt
 80202ba:	2300      	movgt	r3, #0
 80202bc:	2301      	movle	r3, #1
 80202be:	ea53 73d4 	orrs.w	r3, r3, r4, lsr #31
 80202c2:	d100      	bne.n	80202c6 <st_sssa8_ch_convolve_dw+0x99e>
 80202c4:	b196      	cbz	r6, 80202ec <st_sssa8_ch_convolve_dw+0x9c4>
 80202c6:	465a      	mov	r2, fp
 80202c8:	4651      	mov	r1, sl
 80202ca:	4640      	mov	r0, r8
 80202cc:	f001 fe92 	bl	8021ff4 <st_uint8_fill>
 80202d0:	3401      	adds	r4, #1
 80202d2:	44da      	add	sl, fp
 80202d4:	b224      	sxth	r4, r4
 80202d6:	42ac      	cmp	r4, r5
 80202d8:	4622      	mov	r2, r4
 80202da:	dbec      	blt.n	80202b6 <st_sssa8_ch_convolve_dw+0x98e>
 80202dc:	464e      	mov	r6, r9
 80202de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80202e0:	3601      	adds	r6, #1
 80202e2:	b236      	sxth	r6, r6
 80202e4:	429e      	cmp	r6, r3
 80202e6:	46b1      	mov	r9, r6
 80202e8:	dbd6      	blt.n	8020298 <st_sssa8_ch_convolve_dw+0x970>
 80202ea:	e476      	b.n	801fbda <st_sssa8_ch_convolve_dw+0x2b2>
 80202ec:	9b03      	ldr	r3, [sp, #12]
 80202ee:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80202f0:	441a      	add	r2, r3
 80202f2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80202f4:	fb03 0102 	mla	r1, r3, r2, r0
 80202f8:	2b00      	cmp	r3, #0
 80202fa:	d0e9      	beq.n	80202d0 <st_sssa8_ch_convolve_dw+0x9a8>
 80202fc:	eb01 0c03 	add.w	ip, r1, r3
 8020300:	4650      	mov	r0, sl
 8020302:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020306:	021b      	lsls	r3, r3, #8
 8020308:	4561      	cmp	r1, ip
 802030a:	ea4f 2233 	mov.w	r2, r3, ror #8
 802030e:	fa33 f382 	uxtab16	r3, r3, r2
 8020312:	f820 3b02 	strh.w	r3, [r0], #2
 8020316:	d1f4      	bne.n	8020302 <st_sssa8_ch_convolve_dw+0x9da>
 8020318:	e7da      	b.n	80202d0 <st_sssa8_ch_convolve_dw+0x9a8>
 802031a:	9927      	ldr	r1, [sp, #156]	; 0x9c
 802031c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 802031e:	4281      	cmp	r1, r0
 8020320:	f6bf ac5b 	bge.w	801fbda <st_sssa8_ch_convolve_dw+0x2b2>
 8020324:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8020326:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8020328:	fb02 0203 	mla	r2, r2, r3, r0
 802032c:	9832      	ldr	r0, [sp, #200]	; 0xc8
 802032e:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
 8020332:	1a15      	subs	r5, r2, r0
 8020334:	9304      	str	r3, [sp, #16]
 8020336:	429d      	cmp	r5, r3
 8020338:	f77f ac4f 	ble.w	801fbda <st_sssa8_ch_convolve_dw+0x2b2>
 802033c:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
 8020340:	4689      	mov	r9, r1
 8020342:	460a      	mov	r2, r1
 8020344:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
 8020348:	9e08      	ldr	r6, [sp, #32]
 802034a:	fb06 f302 	mul.w	r3, r6, r2
 802034e:	ea4f 77d9 	mov.w	r7, r9, lsr #31
 8020352:	9904      	ldr	r1, [sp, #16]
 8020354:	9303      	str	r3, [sp, #12]
 8020356:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020358:	460c      	mov	r4, r1
 802035a:	4293      	cmp	r3, r2
 802035c:	bfd8      	it	le
 802035e:	f047 0701 	orrle.w	r7, r7, #1
 8020362:	428e      	cmp	r6, r1
 8020364:	bfcc      	ite	gt
 8020366:	2300      	movgt	r3, #0
 8020368:	2301      	movle	r3, #1
 802036a:	ea53 73d4 	orrs.w	r3, r3, r4, lsr #31
 802036e:	d100      	bne.n	8020372 <st_sssa8_ch_convolve_dw+0xa4a>
 8020370:	b19f      	cbz	r7, 802039a <st_sssa8_ch_convolve_dw+0xa72>
 8020372:	465a      	mov	r2, fp
 8020374:	4651      	mov	r1, sl
 8020376:	4640      	mov	r0, r8
 8020378:	f001 fe3c 	bl	8021ff4 <st_uint8_fill>
 802037c:	3401      	adds	r4, #1
 802037e:	44da      	add	sl, fp
 8020380:	b224      	sxth	r4, r4
 8020382:	42ac      	cmp	r4, r5
 8020384:	4621      	mov	r1, r4
 8020386:	dbec      	blt.n	8020362 <st_sssa8_ch_convolve_dw+0xa3a>
 8020388:	f109 0901 	add.w	r9, r9, #1
 802038c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802038e:	fa0f f989 	sxth.w	r9, r9
 8020392:	4599      	cmp	r9, r3
 8020394:	464a      	mov	r2, r9
 8020396:	dbd8      	blt.n	802034a <st_sssa8_ch_convolve_dw+0xa22>
 8020398:	e41f      	b.n	801fbda <st_sssa8_ch_convolve_dw+0x2b2>
 802039a:	9b03      	ldr	r3, [sp, #12]
 802039c:	185a      	adds	r2, r3, r1
 802039e:	e9dd 311e 	ldrd	r3, r1, [sp, #120]	; 0x78
 80203a2:	fb03 1202 	mla	r2, r3, r2, r1
 80203a6:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80203a8:	2b00      	cmp	r3, #0
 80203aa:	d0e7      	beq.n	802037c <st_sssa8_ch_convolve_dw+0xa54>
 80203ac:	18d0      	adds	r0, r2, r3
 80203ae:	4651      	mov	r1, sl
 80203b0:	f812 cb01 	ldrb.w	ip, [r2], #1
 80203b4:	ea4f 630c 	mov.w	r3, ip, lsl #24
 80203b8:	4282      	cmp	r2, r0
 80203ba:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 80203be:	ea4f 2c33 	mov.w	ip, r3, ror #8
 80203c2:	fa33 f38c 	uxtab16	r3, r3, ip
 80203c6:	f841 3b04 	str.w	r3, [r1], #4
 80203ca:	d1f1      	bne.n	80203b0 <st_sssa8_ch_convolve_dw+0xa88>
 80203cc:	e7d6      	b.n	802037c <st_sssa8_ch_convolve_dw+0xa54>
 80203ce:	9b03      	ldr	r3, [sp, #12]
 80203d0:	eb03 000c 	add.w	r0, r3, ip
 80203d4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80203d6:	461a      	mov	r2, r3
 80203d8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80203da:	fb02 3000 	mla	r0, r2, r0, r3
 80203de:	f004 f89f 	bl	8024520 <st_dsp_arm_copy_q7>
 80203e2:	e732      	b.n	802024a <st_sssa8_ch_convolve_dw+0x922>
 80203e4:	428e      	cmp	r6, r1
 80203e6:	f844 5f04 	str.w	r5, [r4, #4]!
 80203ea:	f47f aadc 	bne.w	801f9a6 <st_sssa8_ch_convolve_dw+0x7e>
 80203ee:	f7ff baeb 	b.w	801f9c8 <st_sssa8_ch_convolve_dw+0xa0>
 80203f2:	2401      	movs	r4, #1
 80203f4:	f7ff bb0e 	b.w	801fa14 <st_sssa8_ch_convolve_dw+0xec>

080203f8 <st_sssa8_ch_convolve_rank1upd>:
 80203f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80203fc:	b083      	sub	sp, #12
 80203fe:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8020402:	f99d a038 	ldrsb.w	sl, [sp, #56]	; 0x38
 8020406:	fb13 f304 	smulbb	r3, r3, r4
 802040a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802040c:	eb02 0442 	add.w	r4, r2, r2, lsl #1
 8020410:	fb13 f600 	smulbb	r6, r3, r0
 8020414:	2a00      	cmp	r2, #0
 8020416:	d06c      	beq.n	80204f2 <st_sssa8_ch_convolve_rank1upd+0xfa>
 8020418:	b2b6      	uxth	r6, r6
 802041a:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 802041e:	ea4f 0944 	mov.w	r9, r4, lsl #1
 8020422:	ea4f 0b96 	mov.w	fp, r6, lsr #2
 8020426:	f006 0603 	and.w	r6, r6, #3
 802042a:	eb08 0e82 	add.w	lr, r8, r2, lsl #2
 802042e:	f1a9 0904 	sub.w	r9, r9, #4
 8020432:	f1ab 0381 	sub.w	r3, fp, #129	; 0x81
 8020436:	f1ab 0080 	sub.w	r0, fp, #128	; 0x80
 802043a:	44a9      	add	r9, r5
 802043c:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 8020440:	ebc3 2243 	rsb	r2, r3, r3, lsl #9
 8020444:	3301      	adds	r3, #1
 8020446:	eb00 12c2 	add.w	r2, r0, r2, lsl #7
 802044a:	ea4f 2c43 	mov.w	ip, r3, lsl #9
 802044e:	b293      	uxth	r3, r2
 8020450:	9301      	str	r3, [sp, #4]
 8020452:	f1bb 0f80 	cmp.w	fp, #128	; 0x80
 8020456:	d94f      	bls.n	80204f8 <st_sssa8_ch_convolve_rank1upd+0x100>
 8020458:	eb01 050c 	add.w	r5, r1, ip
 802045c:	2400      	movs	r4, #0
 802045e:	2300      	movs	r3, #0
 8020460:	f501 7000 	add.w	r0, r1, #512	; 0x200
 8020464:	461f      	mov	r7, r3
 8020466:	f851 2b04 	ldr.w	r2, [r1], #4
 802046a:	fa2f f382 	sxtb16	r3, r2
 802046e:	4288      	cmp	r0, r1
 8020470:	ea4f 2232 	mov.w	r2, r2, ror #8
 8020474:	fa97 f313 	qadd16	r3, r7, r3
 8020478:	fa2f f282 	sxtb16	r2, r2
 802047c:	fa93 f712 	qadd16	r7, r3, r2
 8020480:	d1f1      	bne.n	8020466 <st_sssa8_ch_convolve_rank1upd+0x6e>
 8020482:	b23a      	sxth	r2, r7
 8020484:	4285      	cmp	r5, r0
 8020486:	4601      	mov	r1, r0
 8020488:	eb02 4327 	add.w	r3, r2, r7, asr #16
 802048c:	441c      	add	r4, r3
 802048e:	d1e6      	bne.n	802045e <st_sssa8_ch_convolve_rank1upd+0x66>
 8020490:	9801      	ldr	r0, [sp, #4]
 8020492:	b1b8      	cbz	r0, 80204c4 <st_sssa8_ch_convolve_rank1upd+0xcc>
 8020494:	3801      	subs	r0, #1
 8020496:	2200      	movs	r2, #0
 8020498:	b280      	uxth	r0, r0
 802049a:	3001      	adds	r0, #1
 802049c:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 80204a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80204a4:	fa2f f583 	sxtb16	r5, r3
 80204a8:	4281      	cmp	r1, r0
 80204aa:	ea4f 2333 	mov.w	r3, r3, ror #8
 80204ae:	fa92 f215 	qadd16	r2, r2, r5
 80204b2:	fa2f f383 	sxtb16	r3, r3
 80204b6:	fa92 f213 	qadd16	r2, r2, r3
 80204ba:	d1f1      	bne.n	80204a0 <st_sssa8_ch_convolve_rank1upd+0xa8>
 80204bc:	b213      	sxth	r3, r2
 80204be:	eb03 4222 	add.w	r2, r3, r2, asr #16
 80204c2:	4414      	add	r4, r2
 80204c4:	b16e      	cbz	r6, 80204e2 <st_sssa8_ch_convolve_rank1upd+0xea>
 80204c6:	f991 3000 	ldrsb.w	r3, [r1]
 80204ca:	2e01      	cmp	r6, #1
 80204cc:	441c      	add	r4, r3
 80204ce:	d018      	beq.n	8020502 <st_sssa8_ch_convolve_rank1upd+0x10a>
 80204d0:	f991 3001 	ldrsb.w	r3, [r1, #1]
 80204d4:	2e02      	cmp	r6, #2
 80204d6:	441c      	add	r4, r3
 80204d8:	d011      	beq.n	80204fe <st_sssa8_ch_convolve_rank1upd+0x106>
 80204da:	f991 3002 	ldrsb.w	r3, [r1, #2]
 80204de:	3103      	adds	r1, #3
 80204e0:	441c      	add	r4, r3
 80204e2:	f858 3b04 	ldr.w	r3, [r8], #4
 80204e6:	fb0a 3414 	mls	r4, sl, r4, r3
 80204ea:	45c6      	cmp	lr, r8
 80204ec:	f849 4f04 	str.w	r4, [r9, #4]!
 80204f0:	d1af      	bne.n	8020452 <st_sssa8_ch_convolve_rank1upd+0x5a>
 80204f2:	b003      	add	sp, #12
 80204f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80204f8:	4658      	mov	r0, fp
 80204fa:	2400      	movs	r4, #0
 80204fc:	e7c9      	b.n	8020492 <st_sssa8_ch_convolve_rank1upd+0x9a>
 80204fe:	3102      	adds	r1, #2
 8020500:	e7ef      	b.n	80204e2 <st_sssa8_ch_convolve_rank1upd+0xea>
 8020502:	3101      	adds	r1, #1
 8020504:	e7ed      	b.n	80204e2 <st_sssa8_ch_convolve_rank1upd+0xea>
 8020506:	bf00      	nop

08020508 <st_sssa8_ch_convolve>:
 8020508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802050c:	b0d3      	sub	sp, #332	; 0x14c
 802050e:	4699      	mov	r9, r3
 8020510:	4688      	mov	r8, r1
 8020512:	f8bd 5174 	ldrh.w	r5, [sp, #372]	; 0x174
 8020516:	f8bd 6178 	ldrh.w	r6, [sp, #376]	; 0x178
 802051a:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
 802051c:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
 8020520:	f8bd 717c 	ldrh.w	r7, [sp, #380]	; 0x17c
 8020524:	4629      	mov	r1, r5
 8020526:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 802052a:	900d      	str	r0, [sp, #52]	; 0x34
 802052c:	fb16 f307 	smulbb	r3, r6, r7
 8020530:	ebc5 7045 	rsb	r0, r5, r5, lsl #29
 8020534:	9519      	str	r5, [sp, #100]	; 0x64
 8020536:	00ad      	lsls	r5, r5, #2
 8020538:	fb13 f309 	smulbb	r3, r3, r9
 802053c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8020540:	920b      	str	r2, [sp, #44]	; 0x2c
 8020542:	b29b      	uxth	r3, r3
 8020544:	4602      	mov	r2, r0
 8020546:	9022      	str	r0, [sp, #136]	; 0x88
 8020548:	931a      	str	r3, [sp, #104]	; 0x68
 802054a:	442a      	add	r2, r5
 802054c:	f8bd 3184 	ldrh.w	r3, [sp, #388]	; 0x184
 8020550:	f8bd 0180 	ldrh.w	r0, [sp, #384]	; 0x180
 8020554:	9323      	str	r3, [sp, #140]	; 0x8c
 8020556:	f8bd 3188 	ldrh.w	r3, [sp, #392]	; 0x188
 802055a:	9617      	str	r6, [sp, #92]	; 0x5c
 802055c:	930f      	str	r3, [sp, #60]	; 0x3c
 802055e:	f8bd 318c 	ldrh.w	r3, [sp, #396]	; 0x18c
 8020562:	9414      	str	r4, [sp, #80]	; 0x50
 8020564:	931b      	str	r3, [sp, #108]	; 0x6c
 8020566:	f8bd 31a8 	ldrh.w	r3, [sp, #424]	; 0x1a8
 802056a:	9725      	str	r7, [sp, #148]	; 0x94
 802056c:	9311      	str	r3, [sp, #68]	; 0x44
 802056e:	f8bd 31ac 	ldrh.w	r3, [sp, #428]	; 0x1ac
 8020572:	9507      	str	r5, [sp, #28]
 8020574:	9224      	str	r2, [sp, #144]	; 0x90
 8020576:	9015      	str	r0, [sp, #84]	; 0x54
 8020578:	9c66      	ldr	r4, [sp, #408]	; 0x198
 802057a:	f99d b19c 	ldrsb.w	fp, [sp, #412]	; 0x19c
 802057e:	f99d 61a0 	ldrsb.w	r6, [sp, #416]	; 0x1a0
 8020582:	9320      	str	r3, [sp, #128]	; 0x80
 8020584:	2900      	cmp	r1, #0
 8020586:	f000 8516 	beq.w	8020fb6 <st_sssa8_ch_convolve+0xaae>
 802058a:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 802058e:	4620      	mov	r0, r4
 8020590:	1f15      	subs	r5, r2, #4
 8020592:	2701      	movs	r7, #1
 8020594:	4464      	add	r4, ip
 8020596:	f930 3b02 	ldrsh.w	r3, [r0], #2
 802059a:	1e5a      	subs	r2, r3, #1
 802059c:	fa07 f103 	lsl.w	r1, r7, r3
 80205a0:	fa06 f303 	lsl.w	r3, r6, r3
 80205a4:	b292      	uxth	r2, r2
 80205a6:	eb03 0351 	add.w	r3, r3, r1, lsr #1
 80205aa:	2a14      	cmp	r2, #20
 80205ac:	f200 816a 	bhi.w	8020884 <st_sssa8_ch_convolve+0x37c>
 80205b0:	4284      	cmp	r4, r0
 80205b2:	f845 3f04 	str.w	r3, [r5, #4]!
 80205b6:	d1ee      	bne.n	8020596 <st_sssa8_ch_convolve+0x8e>
 80205b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80205ba:	9a07      	ldr	r2, [sp, #28]
 80205bc:	9e25      	ldr	r6, [sp, #148]	; 0x94
 80205be:	189d      	adds	r5, r3, r2
 80205c0:	eba4 010c 	sub.w	r1, r4, ip
 80205c4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80205c6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80205c8:	aa3a      	add	r2, sp, #232	; 0xe8
 80205ca:	974a      	str	r7, [sp, #296]	; 0x128
 80205cc:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 80205d0:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80205d2:	ab36      	add	r3, sp, #216	; 0xd8
 80205d4:	9433      	str	r4, [sp, #204]	; 0xcc
 80205d6:	a83e      	add	r0, sp, #248	; 0xf8
 80205d8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80205da:	974b      	str	r7, [sp, #300]	; 0x12c
 80205dc:	9438      	str	r4, [sp, #224]	; 0xe0
 80205de:	9f15      	ldr	r7, [sp, #84]	; 0x54
 80205e0:	9c20      	ldr	r4, [sp, #128]	; 0x80
 80205e2:	974c      	str	r7, [sp, #304]	; 0x130
 80205e4:	9437      	str	r4, [sp, #220]	; 0xdc
 80205e6:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 80205e8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80205ea:	9200      	str	r2, [sp, #0]
 80205ec:	aa32      	add	r2, sp, #200	; 0xc8
 80205ee:	9121      	str	r1, [sp, #132]	; 0x84
 80205f0:	a948      	add	r1, sp, #288	; 0x120
 80205f2:	f8cd 80d0 	str.w	r8, [sp, #208]	; 0xd0
 80205f6:	974d      	str	r7, [sp, #308]	; 0x134
 80205f8:	e9cd 643b 	strd	r6, r4, [sp, #236]	; 0xec
 80205fc:	f001 fc84 	bl	8021f08 <ai_padding_opt_init>
 8020600:	fb0a f204 	mul.w	r2, sl, r4
 8020604:	e9dd 3119 	ldrd	r3, r1, [sp, #100]	; 0x64
 8020608:	fb06 f202 	mul.w	r2, r6, r2
 802060c:	fb03 f301 	mul.w	r3, r3, r1
 8020610:	9914      	ldr	r1, [sp, #80]	; 0x50
 8020612:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8020616:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 802061a:	921c      	str	r2, [sp, #112]	; 0x70
 802061c:	f340 84b2 	ble.w	8020f84 <st_sssa8_ch_convolve+0xa7c>
 8020620:	2300      	movs	r3, #0
 8020622:	932e      	str	r3, [sp, #184]	; 0xb8
 8020624:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020626:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020628:	9969      	ldr	r1, [sp, #420]	; 0x1a4
 802062a:	fb03 f302 	mul.w	r3, r3, r2
 802062e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8020630:	fb02 1303 	mla	r3, r2, r3, r1
 8020634:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020636:	429a      	cmp	r2, r3
 8020638:	f080 812a 	bcs.w	8020890 <st_sssa8_ch_convolve+0x388>
 802063c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802063e:	fb03 f308 	mul.w	r3, r3, r8
 8020642:	fb09 2303 	mla	r3, r9, r3, r2
 8020646:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 8020648:	429a      	cmp	r2, r3
 802064a:	bf2c      	ite	cs
 802064c:	2300      	movcs	r3, #0
 802064e:	2301      	movcc	r3, #1
 8020650:	991a      	ldr	r1, [sp, #104]	; 0x68
 8020652:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8020656:	fb92 f2f1 	sdiv	r2, r2, r1
 802065a:	9919      	ldr	r1, [sp, #100]	; 0x64
 802065c:	f022 0201 	bic.w	r2, r2, #1
 8020660:	428a      	cmp	r2, r1
 8020662:	bf28      	it	cs
 8020664:	460a      	movcs	r2, r1
 8020666:	2a01      	cmp	r2, #1
 8020668:	921f      	str	r2, [sp, #124]	; 0x7c
 802066a:	f240 82ec 	bls.w	8020c46 <st_sssa8_ch_convolve+0x73e>
 802066e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8020670:	460a      	mov	r2, r1
 8020672:	fbb1 f1f0 	udiv	r1, r1, r0
 8020676:	fb00 2211 	mls	r2, r0, r1, r2
 802067a:	b289      	uxth	r1, r1
 802067c:	b292      	uxth	r2, r2
 802067e:	912c      	str	r1, [sp, #176]	; 0xb0
 8020680:	b11a      	cbz	r2, 802068a <st_sssa8_ch_convolve+0x182>
 8020682:	460a      	mov	r2, r1
 8020684:	3201      	adds	r2, #1
 8020686:	b292      	uxth	r2, r2
 8020688:	922c      	str	r2, [sp, #176]	; 0xb0
 802068a:	2b00      	cmp	r3, #0
 802068c:	f040 8102 	bne.w	8020894 <st_sssa8_ch_convolve+0x38c>
 8020690:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8020692:	fa0f fb8b 	sxth.w	fp, fp
 8020696:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8020698:	fb09 f201 	mul.w	r2, r9, r1
 802069c:	9819      	ldr	r0, [sp, #100]	; 0x64
 802069e:	005b      	lsls	r3, r3, #1
 80206a0:	9216      	str	r2, [sp, #88]	; 0x58
 80206a2:	0052      	lsls	r2, r2, #1
 80206a4:	fb01 f303 	mul.w	r3, r1, r3
 80206a8:	9207      	str	r2, [sp, #28]
 80206aa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80206ac:	9026      	str	r0, [sp, #152]	; 0x98
 80206ae:	fb0a 2303 	mla	r3, sl, r3, r2
 80206b2:	4652      	mov	r2, sl
 80206b4:	46ca      	mov	sl, r9
 80206b6:	9313      	str	r3, [sp, #76]	; 0x4c
 80206b8:	465b      	mov	r3, fp
 80206ba:	4691      	mov	r9, r2
 80206bc:	46c3      	mov	fp, r8
 80206be:	4698      	mov	r8, r3
 80206c0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80206c2:	1e5a      	subs	r2, r3, #1
 80206c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80206c8:	b292      	uxth	r2, r2
 80206ca:	429a      	cmp	r2, r3
 80206cc:	922c      	str	r2, [sp, #176]	; 0xb0
 80206ce:	f000 82b6 	beq.w	8020c3e <st_sssa8_ch_convolve+0x736>
 80206d2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80206d4:	b92b      	cbnz	r3, 80206e2 <st_sssa8_ch_convolve+0x1da>
 80206d6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80206d8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80206da:	991c      	ldr	r1, [sp, #112]	; 0x70
 80206dc:	985c      	ldr	r0, [sp, #368]	; 0x170
 80206de:	f002 f93b 	bl	8022958 <st_int8_to16_dual>
 80206e2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80206e4:	2b00      	cmp	r3, #0
 80206e6:	f000 80a9 	beq.w	802083c <st_sssa8_ch_convolve+0x334>
 80206ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80206ec:	2400      	movs	r4, #0
 80206ee:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80206f0:	425b      	negs	r3, r3
 80206f2:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 80206f4:	941e      	str	r4, [sp, #120]	; 0x78
 80206f6:	b29b      	uxth	r3, r3
 80206f8:	921d      	str	r2, [sp, #116]	; 0x74
 80206fa:	9318      	str	r3, [sp, #96]	; 0x60
 80206fc:	4643      	mov	r3, r8
 80206fe:	46c8      	mov	r8, r9
 8020700:	46b9      	mov	r9, r7
 8020702:	461f      	mov	r7, r3
 8020704:	a83e      	add	r0, sp, #248	; 0xf8
 8020706:	f001 fc59 	bl	8021fbc <ai_padding_opt_phase1>
 802070a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802070c:	2b00      	cmp	r3, #0
 802070e:	d06e      	beq.n	80207ee <st_sssa8_ch_convolve+0x2e6>
 8020710:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8020712:	2500      	movs	r5, #0
 8020714:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8020716:	9510      	str	r5, [sp, #64]	; 0x40
 8020718:	1a99      	subs	r1, r3, r2
 802071a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802071c:	425a      	negs	r2, r3
 802071e:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
 8020722:	9312      	str	r3, [sp, #72]	; 0x48
 8020724:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8020726:	fb04 1303 	mla	r3, r4, r3, r1
 802072a:	9308      	str	r3, [sp, #32]
 802072c:	b293      	uxth	r3, r2
 802072e:	930a      	str	r3, [sp, #40]	; 0x28
 8020730:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 8020732:	2a00      	cmp	r2, #0
 8020734:	f040 8192 	bne.w	8020a5c <st_sssa8_ch_convolve+0x554>
 8020738:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 802073a:	2a00      	cmp	r2, #0
 802073c:	f040 8194 	bne.w	8020a68 <st_sssa8_ch_convolve+0x560>
 8020740:	9a40      	ldr	r2, [sp, #256]	; 0x100
 8020742:	2101      	movs	r1, #1
 8020744:	3a01      	subs	r2, #1
 8020746:	f8ad 111e 	strh.w	r1, [sp, #286]	; 0x11e
 802074a:	9240      	str	r2, [sp, #256]	; 0x100
 802074c:	9b08      	ldr	r3, [sp, #32]
 802074e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020750:	4293      	cmp	r3, r2
 8020752:	dd3a      	ble.n	80207ca <st_sssa8_ch_convolve+0x2c2>
 8020754:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020756:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8020758:	fb05 2503 	mla	r5, r5, r3, r2
 802075c:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8020760:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8020762:	930e      	str	r3, [sp, #56]	; 0x38
 8020764:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020766:	1aad      	subs	r5, r5, r2
 8020768:	461e      	mov	r6, r3
 802076a:	461a      	mov	r2, r3
 802076c:	990e      	ldr	r1, [sp, #56]	; 0x38
 802076e:	428d      	cmp	r5, r1
 8020770:	dd25      	ble.n	80207be <st_sssa8_ch_convolve+0x2b6>
 8020772:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020774:	460c      	mov	r4, r1
 8020776:	9609      	str	r6, [sp, #36]	; 0x24
 8020778:	468c      	mov	ip, r1
 802077a:	4293      	cmp	r3, r2
 802077c:	fb02 f20b 	mul.w	r2, r2, fp
 8020780:	bfcc      	ite	gt
 8020782:	2300      	movgt	r3, #0
 8020784:	2301      	movle	r3, #1
 8020786:	920c      	str	r2, [sp, #48]	; 0x30
 8020788:	ea43 73d6 	orr.w	r3, r3, r6, lsr #31
 802078c:	461e      	mov	r6, r3
 802078e:	45e3      	cmp	fp, ip
 8020790:	4652      	mov	r2, sl
 8020792:	4649      	mov	r1, r9
 8020794:	4638      	mov	r0, r7
 8020796:	bfcc      	ite	gt
 8020798:	f04f 0e00 	movgt.w	lr, #0
 802079c:	f04f 0e01 	movle.w	lr, #1
 80207a0:	ea5e 73d4 	orrs.w	r3, lr, r4, lsr #31
 80207a4:	d102      	bne.n	80207ac <st_sssa8_ch_convolve+0x2a4>
 80207a6:	2e00      	cmp	r6, #0
 80207a8:	f000 8146 	beq.w	8020a38 <st_sssa8_ch_convolve+0x530>
 80207ac:	f003 feda 	bl	8024564 <st_dsp_arm_fill_q15>
 80207b0:	3401      	adds	r4, #1
 80207b2:	44c1      	add	r9, r8
 80207b4:	b224      	sxth	r4, r4
 80207b6:	42ac      	cmp	r4, r5
 80207b8:	46a4      	mov	ip, r4
 80207ba:	dbe8      	blt.n	802078e <st_sssa8_ch_convolve+0x286>
 80207bc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80207be:	3601      	adds	r6, #1
 80207c0:	9b08      	ldr	r3, [sp, #32]
 80207c2:	b236      	sxth	r6, r6
 80207c4:	429e      	cmp	r6, r3
 80207c6:	4632      	mov	r2, r6
 80207c8:	dbd0      	blt.n	802076c <st_sssa8_ch_convolve+0x264>
 80207ca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80207cc:	454b      	cmp	r3, r9
 80207ce:	f000 8179 	beq.w	8020ac4 <st_sssa8_ch_convolve+0x5bc>
 80207d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80207d4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80207d6:	9910      	ldr	r1, [sp, #64]	; 0x40
 80207d8:	4403      	add	r3, r0
 80207da:	3101      	adds	r1, #1
 80207dc:	461a      	mov	r2, r3
 80207de:	b20b      	sxth	r3, r1
 80207e0:	b292      	uxth	r2, r2
 80207e2:	9310      	str	r3, [sp, #64]	; 0x40
 80207e4:	461d      	mov	r5, r3
 80207e6:	920a      	str	r2, [sp, #40]	; 0x28
 80207e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80207ea:	429a      	cmp	r2, r3
 80207ec:	dca0      	bgt.n	8020730 <st_sssa8_ch_convolve+0x228>
 80207ee:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80207f0:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80207f2:	991e      	ldr	r1, [sp, #120]	; 0x78
 80207f4:	4403      	add	r3, r0
 80207f6:	3101      	adds	r1, #1
 80207f8:	461a      	mov	r2, r3
 80207fa:	b20b      	sxth	r3, r1
 80207fc:	b292      	uxth	r2, r2
 80207fe:	931e      	str	r3, [sp, #120]	; 0x78
 8020800:	461c      	mov	r4, r3
 8020802:	9218      	str	r2, [sp, #96]	; 0x60
 8020804:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8020806:	429a      	cmp	r2, r3
 8020808:	f73f af7c 	bgt.w	8020704 <st_sssa8_ch_convolve+0x1fc>
 802080c:	463b      	mov	r3, r7
 802080e:	9914      	ldr	r1, [sp, #80]	; 0x50
 8020810:	464f      	mov	r7, r9
 8020812:	46c1      	mov	r9, r8
 8020814:	4698      	mov	r8, r3
 8020816:	42b9      	cmp	r1, r7
 8020818:	d010      	beq.n	802083c <st_sssa8_ch_convolve+0x334>
 802081a:	9865      	ldr	r0, [sp, #404]	; 0x194
 802081c:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 802081e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8020820:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8020822:	9003      	str	r0, [sp, #12]
 8020824:	9401      	str	r4, [sp, #4]
 8020826:	9821      	ldr	r0, [sp, #132]	; 0x84
 8020828:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 802082a:	9305      	str	r3, [sp, #20]
 802082c:	9204      	str	r2, [sp, #16]
 802082e:	9002      	str	r0, [sp, #8]
 8020830:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020832:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8020834:	981c      	ldr	r0, [sp, #112]	; 0x70
 8020836:	9400      	str	r4, [sp, #0]
 8020838:	f003 fb64 	bl	8023f04 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 802083c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 802083e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020840:	4611      	mov	r1, r2
 8020842:	1a9b      	subs	r3, r3, r2
 8020844:	b298      	uxth	r0, r3
 8020846:	4282      	cmp	r2, r0
 8020848:	9026      	str	r0, [sp, #152]	; 0x98
 802084a:	bf28      	it	cs
 802084c:	4601      	movcs	r1, r0
 802084e:	460b      	mov	r3, r1
 8020850:	b1b1      	cbz	r1, 8020880 <st_sssa8_ch_convolve+0x378>
 8020852:	4611      	mov	r1, r2
 8020854:	9d5c      	ldr	r5, [sp, #368]	; 0x170
 8020856:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8020858:	0092      	lsls	r2, r2, #2
 802085a:	fb04 5001 	mla	r0, r4, r1, r5
 802085e:	905c      	str	r0, [sp, #368]	; 0x170
 8020860:	9821      	ldr	r0, [sp, #132]	; 0x84
 8020862:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8020866:	9021      	str	r0, [sp, #132]	; 0x84
 8020868:	9869      	ldr	r0, [sp, #420]	; 0x1a4
 802086a:	4408      	add	r0, r1
 802086c:	9922      	ldr	r1, [sp, #136]	; 0x88
 802086e:	4411      	add	r1, r2
 8020870:	9069      	str	r0, [sp, #420]	; 0x1a4
 8020872:	9122      	str	r1, [sp, #136]	; 0x88
 8020874:	9965      	ldr	r1, [sp, #404]	; 0x194
 8020876:	4411      	add	r1, r2
 8020878:	9165      	str	r1, [sp, #404]	; 0x194
 802087a:	9924      	ldr	r1, [sp, #144]	; 0x90
 802087c:	4411      	add	r1, r2
 802087e:	9124      	str	r1, [sp, #144]	; 0x90
 8020880:	931f      	str	r3, [sp, #124]	; 0x7c
 8020882:	e71d      	b.n	80206c0 <st_sssa8_ch_convolve+0x1b8>
 8020884:	4284      	cmp	r4, r0
 8020886:	f845 6f04 	str.w	r6, [r5, #4]!
 802088a:	f47f ae84 	bne.w	8020596 <st_sssa8_ch_convolve+0x8e>
 802088e:	e693      	b.n	80205b8 <st_sssa8_ch_convolve+0xb0>
 8020890:	2300      	movs	r3, #0
 8020892:	e6dd      	b.n	8020650 <st_sssa8_ch_convolve+0x148>
 8020894:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020896:	2b00      	cmp	r3, #0
 8020898:	f000 81d1 	beq.w	8020c3e <st_sssa8_ch_convolve+0x736>
 802089c:	9823      	ldr	r0, [sp, #140]	; 0x8c
 802089e:	2400      	movs	r4, #0
 80208a0:	9925      	ldr	r1, [sp, #148]	; 0x94
 80208a2:	4242      	negs	r2, r0
 80208a4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80208a6:	004b      	lsls	r3, r1, #1
 80208a8:	f8cd a0ac 	str.w	sl, [sp, #172]	; 0xac
 80208ac:	b292      	uxth	r2, r2
 80208ae:	fb09 f506 	mul.w	r5, r9, r6
 80208b2:	fb06 f303 	mul.w	r3, r6, r3
 80208b6:	1a09      	subs	r1, r1, r0
 80208b8:	922f      	str	r2, [sp, #188]	; 0xbc
 80208ba:	fa0f f68b 	sxth.w	r6, fp
 80208be:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80208c0:	46c3      	mov	fp, r8
 80208c2:	9507      	str	r5, [sp, #28]
 80208c4:	fb0a 2303 	mla	r3, sl, r3, r2
 80208c8:	46ca      	mov	sl, r9
 80208ca:	9430      	str	r4, [sp, #192]	; 0xc0
 80208cc:	9316      	str	r3, [sp, #88]	; 0x58
 80208ce:	006b      	lsls	r3, r5, #1
 80208d0:	9613      	str	r6, [sp, #76]	; 0x4c
 80208d2:	9131      	str	r1, [sp, #196]	; 0xc4
 80208d4:	931d      	str	r3, [sp, #116]	; 0x74
 80208d6:	a83e      	add	r0, sp, #248	; 0xf8
 80208d8:	f001 fb70 	bl	8021fbc <ai_padding_opt_phase1>
 80208dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80208de:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80208e0:	fb04 f303 	mul.w	r3, r4, r3
 80208e4:	9969      	ldr	r1, [sp, #420]	; 0x1a4
 80208e6:	fb02 1303 	mla	r3, r2, r3, r1
 80208ea:	9323      	str	r3, [sp, #140]	; 0x8c
 80208ec:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80208ee:	b92b      	cbnz	r3, 80208fc <st_sssa8_ch_convolve+0x3f4>
 80208f0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80208f2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80208f4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80208f6:	985c      	ldr	r0, [sp, #368]	; 0x170
 80208f8:	f002 f82e 	bl	8022958 <st_int8_to16_dual>
 80208fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80208fe:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8020900:	fb03 2304 	mla	r3, r3, r4, r2
 8020904:	9308      	str	r3, [sp, #32]
 8020906:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 802090a:	9312      	str	r3, [sp, #72]	; 0x48
 802090c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802090e:	9325      	str	r3, [sp, #148]	; 0x94
 8020910:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020912:	932a      	str	r3, [sp, #168]	; 0xa8
 8020914:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020916:	9318      	str	r3, [sp, #96]	; 0x60
 8020918:	9b5c      	ldr	r3, [sp, #368]	; 0x170
 802091a:	932d      	str	r3, [sp, #180]	; 0xb4
 802091c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802091e:	9327      	str	r3, [sp, #156]	; 0x9c
 8020920:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8020922:	9329      	str	r3, [sp, #164]	; 0xa4
 8020924:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020926:	9326      	str	r3, [sp, #152]	; 0x98
 8020928:	9b65      	ldr	r3, [sp, #404]	; 0x194
 802092a:	9328      	str	r3, [sp, #160]	; 0xa0
 802092c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802092e:	1e5a      	subs	r2, r3, #1
 8020930:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020934:	b292      	uxth	r2, r2
 8020936:	429a      	cmp	r2, r3
 8020938:	9225      	str	r2, [sp, #148]	; 0x94
 802093a:	f000 8172 	beq.w	8020c22 <st_sssa8_ch_convolve+0x71a>
 802093e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8020940:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8020942:	9942      	ldr	r1, [sp, #264]	; 0x108
 8020944:	9340      	str	r3, [sp, #256]	; 0x100
 8020946:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020948:	e9cd 213e 	strd	r2, r1, [sp, #248]	; 0xf8
 802094c:	2b00      	cmp	r3, #0
 802094e:	f000 813e 	beq.w	8020bce <st_sssa8_ch_convolve+0x6c6>
 8020952:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020954:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8020956:	4259      	negs	r1, r3
 8020958:	2300      	movs	r3, #0
 802095a:	901e      	str	r0, [sp, #120]	; 0x78
 802095c:	b289      	uxth	r1, r1
 802095e:	9310      	str	r3, [sp, #64]	; 0x40
 8020960:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 8020964:	910a      	str	r1, [sp, #40]	; 0x28
 8020966:	4619      	mov	r1, r3
 8020968:	2a00      	cmp	r2, #0
 802096a:	d15f      	bne.n	8020a2c <st_sssa8_ch_convolve+0x524>
 802096c:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 802096e:	2a00      	cmp	r2, #0
 8020970:	f040 80cc 	bne.w	8020b0c <st_sssa8_ch_convolve+0x604>
 8020974:	9a40      	ldr	r2, [sp, #256]	; 0x100
 8020976:	2001      	movs	r0, #1
 8020978:	3a01      	subs	r2, #1
 802097a:	f8ad 011e 	strh.w	r0, [sp, #286]	; 0x11e
 802097e:	9240      	str	r2, [sp, #256]	; 0x100
 8020980:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020982:	9a08      	ldr	r2, [sp, #32]
 8020984:	4293      	cmp	r3, r2
 8020986:	da3b      	bge.n	8020a00 <st_sssa8_ch_convolve+0x4f8>
 8020988:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802098a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 802098c:	f8dd 80ac 	ldr.w	r8, [sp, #172]	; 0xac
 8020990:	fb01 2103 	mla	r1, r1, r3, r2
 8020994:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8020998:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802099a:	930e      	str	r3, [sp, #56]	; 0x38
 802099c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802099e:	4617      	mov	r7, r2
 80209a0:	1ace      	subs	r6, r1, r3
 80209a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80209a4:	42b3      	cmp	r3, r6
 80209a6:	da25      	bge.n	80209f4 <st_sssa8_ch_convolve+0x4ec>
 80209a8:	f3c7 35c0 	ubfx	r5, r7, #15, #1
 80209ac:	461c      	mov	r4, r3
 80209ae:	469c      	mov	ip, r3
 80209b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80209b2:	fb0b f102 	mul.w	r1, fp, r2
 80209b6:	4293      	cmp	r3, r2
 80209b8:	bfd8      	it	le
 80209ba:	f045 0501 	orrle.w	r5, r5, #1
 80209be:	9709      	str	r7, [sp, #36]	; 0x24
 80209c0:	910c      	str	r1, [sp, #48]	; 0x30
 80209c2:	462f      	mov	r7, r5
 80209c4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80209c6:	45e3      	cmp	fp, ip
 80209c8:	4652      	mov	r2, sl
 80209ca:	4649      	mov	r1, r9
 80209cc:	4628      	mov	r0, r5
 80209ce:	bfcc      	ite	gt
 80209d0:	f04f 0e00 	movgt.w	lr, #0
 80209d4:	f04f 0e01 	movle.w	lr, #1
 80209d8:	ea5e 73d4 	orrs.w	r3, lr, r4, lsr #31
 80209dc:	d101      	bne.n	80209e2 <st_sssa8_ch_convolve+0x4da>
 80209de:	2f00      	cmp	r7, #0
 80209e0:	d033      	beq.n	8020a4a <st_sssa8_ch_convolve+0x542>
 80209e2:	f003 fdbf 	bl	8024564 <st_dsp_arm_fill_q15>
 80209e6:	3401      	adds	r4, #1
 80209e8:	44c1      	add	r9, r8
 80209ea:	b224      	sxth	r4, r4
 80209ec:	42b4      	cmp	r4, r6
 80209ee:	46a4      	mov	ip, r4
 80209f0:	dbe9      	blt.n	80209c6 <st_sssa8_ch_convolve+0x4be>
 80209f2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80209f4:	3701      	adds	r7, #1
 80209f6:	9b08      	ldr	r3, [sp, #32]
 80209f8:	b23f      	sxth	r7, r7
 80209fa:	429f      	cmp	r7, r3
 80209fc:	463a      	mov	r2, r7
 80209fe:	dbd0      	blt.n	80209a2 <st_sssa8_ch_convolve+0x49a>
 8020a00:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8020a02:	454b      	cmp	r3, r9
 8020a04:	f000 80ac 	beq.w	8020b60 <st_sssa8_ch_convolve+0x658>
 8020a08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020a0a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8020a0c:	9910      	ldr	r1, [sp, #64]	; 0x40
 8020a0e:	4403      	add	r3, r0
 8020a10:	3101      	adds	r1, #1
 8020a12:	461a      	mov	r2, r3
 8020a14:	b20b      	sxth	r3, r1
 8020a16:	b292      	uxth	r2, r2
 8020a18:	9310      	str	r3, [sp, #64]	; 0x40
 8020a1a:	4619      	mov	r1, r3
 8020a1c:	920a      	str	r2, [sp, #40]	; 0x28
 8020a1e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020a20:	429a      	cmp	r2, r3
 8020a22:	f340 80c0 	ble.w	8020ba6 <st_sssa8_ch_convolve+0x69e>
 8020a26:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 8020a28:	2a00      	cmp	r2, #0
 8020a2a:	d09f      	beq.n	802096c <st_sssa8_ch_convolve+0x464>
 8020a2c:	3a01      	subs	r2, #1
 8020a2e:	2001      	movs	r0, #1
 8020a30:	923e      	str	r2, [sp, #248]	; 0xf8
 8020a32:	f8ad 011e 	strh.w	r0, [sp, #286]	; 0x11e
 8020a36:	e7a3      	b.n	8020980 <st_sssa8_ch_convolve+0x478>
 8020a38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020a3a:	eb03 000c 	add.w	r0, r3, ip
 8020a3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020a40:	fb0a 3000 	mla	r0, sl, r0, r3
 8020a44:	f001 fee6 	bl	8022814 <st_int8_to16_no_shift>
 8020a48:	e6b2      	b.n	80207b0 <st_sssa8_ch_convolve+0x2a8>
 8020a4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020a4c:	eb03 000c 	add.w	r0, r3, ip
 8020a50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020a52:	fb0a 3000 	mla	r0, sl, r0, r3
 8020a56:	f001 fedd 	bl	8022814 <st_int8_to16_no_shift>
 8020a5a:	e7c4      	b.n	80209e6 <st_sssa8_ch_convolve+0x4de>
 8020a5c:	3a01      	subs	r2, #1
 8020a5e:	2101      	movs	r1, #1
 8020a60:	923e      	str	r2, [sp, #248]	; 0xf8
 8020a62:	f8ad 111e 	strh.w	r1, [sp, #286]	; 0x11e
 8020a66:	e671      	b.n	802074c <st_sssa8_ch_convolve+0x244>
 8020a68:	f8bd 111c 	ldrh.w	r1, [sp, #284]	; 0x11c
 8020a6c:	3a01      	subs	r2, #1
 8020a6e:	2901      	cmp	r1, #1
 8020a70:	923f      	str	r2, [sp, #252]	; 0xfc
 8020a72:	f8ad 111e 	strh.w	r1, [sp, #286]	; 0x11e
 8020a76:	f43f ae69 	beq.w	802074c <st_sssa8_ch_convolve+0x244>
 8020a7a:	9e08      	ldr	r6, [sp, #32]
 8020a7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020a7e:	f9bd 4028 	ldrsh.w	r4, [sp, #40]	; 0x28
 8020a82:	4296      	cmp	r6, r2
 8020a84:	f77f aea1 	ble.w	80207ca <st_sssa8_ch_convolve+0x2c2>
 8020a88:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8020a8c:	4615      	mov	r5, r2
 8020a8e:	970c      	str	r7, [sp, #48]	; 0x30
 8020a90:	4610      	mov	r0, r2
 8020a92:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8020a96:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8020a98:	3501      	adds	r5, #1
 8020a9a:	fb00 400b 	mla	r0, r0, fp, r4
 8020a9e:	9b07      	ldr	r3, [sp, #28]
 8020aa0:	4649      	mov	r1, r9
 8020aa2:	b22d      	sxth	r5, r5
 8020aa4:	fb0a 7000 	mla	r0, sl, r0, r7
 8020aa8:	4642      	mov	r2, r8
 8020aaa:	4499      	add	r9, r3
 8020aac:	f001 feb2 	bl	8022814 <st_int8_to16_no_shift>
 8020ab0:	42b5      	cmp	r5, r6
 8020ab2:	4628      	mov	r0, r5
 8020ab4:	dbf0      	blt.n	8020a98 <st_sssa8_ch_convolve+0x590>
 8020ab6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020ab8:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8020abc:	454b      	cmp	r3, r9
 8020abe:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8020ac0:	f47f ae87 	bne.w	80207d2 <st_sssa8_ch_convolve+0x2ca>
 8020ac4:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8020ac6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8020ac8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8020aca:	9965      	ldr	r1, [sp, #404]	; 0x194
 8020acc:	9821      	ldr	r0, [sp, #132]	; 0x84
 8020ace:	9401      	str	r4, [sp, #4]
 8020ad0:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8020ad2:	9305      	str	r3, [sp, #20]
 8020ad4:	9204      	str	r2, [sp, #16]
 8020ad6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020ad8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8020ada:	9103      	str	r1, [sp, #12]
 8020adc:	9002      	str	r0, [sp, #8]
 8020ade:	9914      	ldr	r1, [sp, #80]	; 0x50
 8020ae0:	981c      	ldr	r0, [sp, #112]	; 0x70
 8020ae2:	9400      	str	r4, [sp, #0]
 8020ae4:	f002 fef4 	bl	80238d0 <st_sssa8_ch_nn_mat_mult_kernel_opt>
 8020ae8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020aea:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8020aec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020aee:	440b      	add	r3, r1
 8020af0:	901d      	str	r0, [sp, #116]	; 0x74
 8020af2:	3201      	adds	r2, #1
 8020af4:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 8020af8:	b29b      	uxth	r3, r3
 8020afa:	b212      	sxth	r2, r2
 8020afc:	930a      	str	r3, [sp, #40]	; 0x28
 8020afe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020b00:	4615      	mov	r5, r2
 8020b02:	9210      	str	r2, [sp, #64]	; 0x40
 8020b04:	4293      	cmp	r3, r2
 8020b06:	f73f ae13 	bgt.w	8020730 <st_sssa8_ch_convolve+0x228>
 8020b0a:	e670      	b.n	80207ee <st_sssa8_ch_convolve+0x2e6>
 8020b0c:	f8bd 011c 	ldrh.w	r0, [sp, #284]	; 0x11c
 8020b10:	3a01      	subs	r2, #1
 8020b12:	2801      	cmp	r0, #1
 8020b14:	923f      	str	r2, [sp, #252]	; 0xfc
 8020b16:	f8ad 011e 	strh.w	r0, [sp, #286]	; 0x11e
 8020b1a:	f43f af31 	beq.w	8020980 <st_sssa8_ch_convolve+0x478>
 8020b1e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020b20:	9f08      	ldr	r7, [sp, #32]
 8020b22:	f9bd 4028 	ldrsh.w	r4, [sp, #40]	; 0x28
 8020b26:	42bb      	cmp	r3, r7
 8020b28:	f6bf af6a 	bge.w	8020a00 <st_sssa8_ch_convolve+0x4f8>
 8020b2c:	464e      	mov	r6, r9
 8020b2e:	461d      	mov	r5, r3
 8020b30:	4618      	mov	r0, r3
 8020b32:	f8dd 9074 	ldr.w	r9, [sp, #116]	; 0x74
 8020b36:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8020b3a:	3501      	adds	r5, #1
 8020b3c:	fb00 400b 	mla	r0, r0, fp, r4
 8020b40:	4631      	mov	r1, r6
 8020b42:	9a07      	ldr	r2, [sp, #28]
 8020b44:	b22d      	sxth	r5, r5
 8020b46:	fb0a 8000 	mla	r0, sl, r0, r8
 8020b4a:	f001 fe63 	bl	8022814 <st_int8_to16_no_shift>
 8020b4e:	444e      	add	r6, r9
 8020b50:	42bd      	cmp	r5, r7
 8020b52:	4628      	mov	r0, r5
 8020b54:	dbf1      	blt.n	8020b3a <st_sssa8_ch_convolve+0x632>
 8020b56:	46b1      	mov	r9, r6
 8020b58:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8020b5a:	454b      	cmp	r3, r9
 8020b5c:	f47f af54 	bne.w	8020a08 <st_sssa8_ch_convolve+0x500>
 8020b60:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8020b62:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8020b64:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8020b66:	9826      	ldr	r0, [sp, #152]	; 0x98
 8020b68:	9204      	str	r2, [sp, #16]
 8020b6a:	9401      	str	r4, [sp, #4]
 8020b6c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8020b6e:	9305      	str	r3, [sp, #20]
 8020b70:	9002      	str	r0, [sp, #8]
 8020b72:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020b74:	981c      	ldr	r0, [sp, #112]	; 0x70
 8020b76:	9400      	str	r4, [sp, #0]
 8020b78:	e9dd 1228 	ldrd	r1, r2, [sp, #160]	; 0xa0
 8020b7c:	9103      	str	r1, [sp, #12]
 8020b7e:	9914      	ldr	r1, [sp, #80]	; 0x50
 8020b80:	f002 fea6 	bl	80238d0 <st_sssa8_ch_nn_mat_mult_kernel_opt>
 8020b84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020b86:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8020b88:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020b8a:	440b      	add	r3, r1
 8020b8c:	901e      	str	r0, [sp, #120]	; 0x78
 8020b8e:	3201      	adds	r2, #1
 8020b90:	b29b      	uxth	r3, r3
 8020b92:	b212      	sxth	r2, r2
 8020b94:	930a      	str	r3, [sp, #40]	; 0x28
 8020b96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020b98:	4611      	mov	r1, r2
 8020b9a:	9210      	str	r2, [sp, #64]	; 0x40
 8020b9c:	4293      	cmp	r3, r2
 8020b9e:	dd16      	ble.n	8020bce <st_sssa8_ch_convolve+0x6c6>
 8020ba0:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 8020ba4:	e73f      	b.n	8020a26 <st_sssa8_ch_convolve+0x51e>
 8020ba6:	9914      	ldr	r1, [sp, #80]	; 0x50
 8020ba8:	4589      	cmp	r9, r1
 8020baa:	d010      	beq.n	8020bce <st_sssa8_ch_convolve+0x6c6>
 8020bac:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8020bae:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8020bb0:	9204      	str	r2, [sp, #16]
 8020bb2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8020bb4:	9401      	str	r4, [sp, #4]
 8020bb6:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8020bb8:	9305      	str	r3, [sp, #20]
 8020bba:	9400      	str	r4, [sp, #0]
 8020bbc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020bbe:	e9dd 0228 	ldrd	r0, r2, [sp, #160]	; 0xa0
 8020bc2:	9003      	str	r0, [sp, #12]
 8020bc4:	9826      	ldr	r0, [sp, #152]	; 0x98
 8020bc6:	9002      	str	r0, [sp, #8]
 8020bc8:	981c      	ldr	r0, [sp, #112]	; 0x70
 8020bca:	f003 f99b 	bl	8023f04 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 8020bce:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8020bd0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020bd2:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8020bd4:	1a9b      	subs	r3, r3, r2
 8020bd6:	4608      	mov	r0, r1
 8020bd8:	b29b      	uxth	r3, r3
 8020bda:	4410      	add	r0, r2
 8020bdc:	429a      	cmp	r2, r3
 8020bde:	932a      	str	r3, [sp, #168]	; 0xa8
 8020be0:	9023      	str	r0, [sp, #140]	; 0x8c
 8020be2:	bf28      	it	cs
 8020be4:	461a      	movcs	r2, r3
 8020be6:	b294      	uxth	r4, r2
 8020be8:	b90c      	cbnz	r4, 8020bee <st_sssa8_ch_convolve+0x6e6>
 8020bea:	9418      	str	r4, [sp, #96]	; 0x60
 8020bec:	e69e      	b.n	802092c <st_sssa8_ch_convolve+0x424>
 8020bee:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020bf0:	9e26      	ldr	r6, [sp, #152]	; 0x98
 8020bf2:	4619      	mov	r1, r3
 8020bf4:	009d      	lsls	r5, r3, #2
 8020bf6:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8020bf8:	eb06 0141 	add.w	r1, r6, r1, lsl #1
 8020bfc:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 8020bfe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8020c00:	442e      	add	r6, r5
 8020c02:	9126      	str	r1, [sp, #152]	; 0x98
 8020c04:	fb02 0003 	mla	r0, r2, r3, r0
 8020c08:	991c      	ldr	r1, [sp, #112]	; 0x70
 8020c0a:	9629      	str	r6, [sp, #164]	; 0xa4
 8020c0c:	4623      	mov	r3, r4
 8020c0e:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8020c10:	902d      	str	r0, [sp, #180]	; 0xb4
 8020c12:	442e      	add	r6, r5
 8020c14:	9628      	str	r6, [sp, #160]	; 0xa0
 8020c16:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8020c18:	442e      	add	r6, r5
 8020c1a:	9627      	str	r6, [sp, #156]	; 0x9c
 8020c1c:	f001 fe9c 	bl	8022958 <st_int8_to16_dual>
 8020c20:	e7e3      	b.n	8020bea <st_sssa8_ch_convolve+0x6e2>
 8020c22:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8020c24:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8020c26:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8020c28:	440b      	add	r3, r1
 8020c2a:	3201      	adds	r2, #1
 8020c2c:	b29b      	uxth	r3, r3
 8020c2e:	b212      	sxth	r2, r2
 8020c30:	932f      	str	r3, [sp, #188]	; 0xbc
 8020c32:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020c34:	4614      	mov	r4, r2
 8020c36:	9230      	str	r2, [sp, #192]	; 0xc0
 8020c38:	4293      	cmp	r3, r2
 8020c3a:	f73f ae4c 	bgt.w	80208d6 <st_sssa8_ch_convolve+0x3ce>
 8020c3e:	2000      	movs	r0, #0
 8020c40:	b053      	add	sp, #332	; 0x14c
 8020c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020c46:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020c48:	2b00      	cmp	r3, #0
 8020c4a:	d0f8      	beq.n	8020c3e <st_sssa8_ch_convolve+0x736>
 8020c4c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8020c4e:	2400      	movs	r4, #0
 8020c50:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8020c52:	005b      	lsls	r3, r3, #1
 8020c54:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8020c56:	fb00 f109 	mul.w	r1, r0, r9
 8020c5a:	fb00 f303 	mul.w	r3, r0, r3
 8020c5e:	9807      	ldr	r0, [sp, #28]
 8020c60:	4252      	negs	r2, r2
 8020c62:	9116      	str	r1, [sp, #88]	; 0x58
 8020c64:	1a28      	subs	r0, r5, r0
 8020c66:	941c      	str	r4, [sp, #112]	; 0x70
 8020c68:	901d      	str	r0, [sp, #116]	; 0x74
 8020c6a:	fa0f f08b 	sxth.w	r0, fp
 8020c6e:	901e      	str	r0, [sp, #120]	; 0x78
 8020c70:	9814      	ldr	r0, [sp, #80]	; 0x50
 8020c72:	fb0a 0303 	mla	r3, sl, r3, r0
 8020c76:	4683      	mov	fp, r0
 8020c78:	9313      	str	r3, [sp, #76]	; 0x4c
 8020c7a:	004b      	lsls	r3, r1, #1
 8020c7c:	9307      	str	r3, [sp, #28]
 8020c7e:	b293      	uxth	r3, r2
 8020c80:	9318      	str	r3, [sp, #96]	; 0x60
 8020c82:	a83e      	add	r0, sp, #248	; 0xf8
 8020c84:	f001 f99a 	bl	8021fbc <ai_padding_opt_phase1>
 8020c88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020c8a:	2b00      	cmp	r3, #0
 8020c8c:	d070      	beq.n	8020d70 <st_sssa8_ch_convolve+0x868>
 8020c8e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8020c90:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8020c92:	f9bd 0060 	ldrsh.w	r0, [sp, #96]	; 0x60
 8020c96:	1a99      	subs	r1, r3, r2
 8020c98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020c9a:	9012      	str	r0, [sp, #72]	; 0x48
 8020c9c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8020c9e:	425a      	negs	r2, r3
 8020ca0:	2300      	movs	r3, #0
 8020ca2:	fb00 1104 	mla	r1, r0, r4, r1
 8020ca6:	b292      	uxth	r2, r2
 8020ca8:	9310      	str	r3, [sp, #64]	; 0x40
 8020caa:	9108      	str	r1, [sp, #32]
 8020cac:	4619      	mov	r1, r3
 8020cae:	920a      	str	r2, [sp, #40]	; 0x28
 8020cb0:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 8020cb2:	2a00      	cmp	r2, #0
 8020cb4:	f040 8102 	bne.w	8020ebc <st_sssa8_ch_convolve+0x9b4>
 8020cb8:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8020cba:	2a00      	cmp	r2, #0
 8020cbc:	f040 8104 	bne.w	8020ec8 <st_sssa8_ch_convolve+0x9c0>
 8020cc0:	9a40      	ldr	r2, [sp, #256]	; 0x100
 8020cc2:	2001      	movs	r0, #1
 8020cc4:	3a01      	subs	r2, #1
 8020cc6:	f8ad 011e 	strh.w	r0, [sp, #286]	; 0x11e
 8020cca:	9240      	str	r2, [sp, #256]	; 0x100
 8020ccc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020cce:	9a08      	ldr	r2, [sp, #32]
 8020cd0:	4293      	cmp	r3, r2
 8020cd2:	da3b      	bge.n	8020d4c <st_sssa8_ch_convolve+0x844>
 8020cd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020cd6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8020cd8:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8020cda:	fb01 2103 	mla	r1, r1, r3, r2
 8020cde:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8020ce2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8020ce4:	930e      	str	r3, [sp, #56]	; 0x38
 8020ce6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020ce8:	1a8d      	subs	r5, r1, r2
 8020cea:	461e      	mov	r6, r3
 8020cec:	461a      	mov	r2, r3
 8020cee:	990e      	ldr	r1, [sp, #56]	; 0x38
 8020cf0:	42a9      	cmp	r1, r5
 8020cf2:	da25      	bge.n	8020d40 <st_sssa8_ch_convolve+0x838>
 8020cf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020cf6:	460c      	mov	r4, r1
 8020cf8:	9609      	str	r6, [sp, #36]	; 0x24
 8020cfa:	468c      	mov	ip, r1
 8020cfc:	4293      	cmp	r3, r2
 8020cfe:	fb02 f208 	mul.w	r2, r2, r8
 8020d02:	bfcc      	ite	gt
 8020d04:	2300      	movgt	r3, #0
 8020d06:	2301      	movle	r3, #1
 8020d08:	920c      	str	r2, [sp, #48]	; 0x30
 8020d0a:	ea43 73d6 	orr.w	r3, r3, r6, lsr #31
 8020d0e:	461e      	mov	r6, r3
 8020d10:	45e0      	cmp	r8, ip
 8020d12:	464a      	mov	r2, r9
 8020d14:	4659      	mov	r1, fp
 8020d16:	4638      	mov	r0, r7
 8020d18:	bfcc      	ite	gt
 8020d1a:	f04f 0e00 	movgt.w	lr, #0
 8020d1e:	f04f 0e01 	movle.w	lr, #1
 8020d22:	ea5e 73d4 	orrs.w	r3, lr, r4, lsr #31
 8020d26:	d102      	bne.n	8020d2e <st_sssa8_ch_convolve+0x826>
 8020d28:	2e00      	cmp	r6, #0
 8020d2a:	f000 80be 	beq.w	8020eaa <st_sssa8_ch_convolve+0x9a2>
 8020d2e:	f003 fc19 	bl	8024564 <st_dsp_arm_fill_q15>
 8020d32:	3401      	adds	r4, #1
 8020d34:	44d3      	add	fp, sl
 8020d36:	b224      	sxth	r4, r4
 8020d38:	42ac      	cmp	r4, r5
 8020d3a:	46a4      	mov	ip, r4
 8020d3c:	dbe8      	blt.n	8020d10 <st_sssa8_ch_convolve+0x808>
 8020d3e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8020d40:	3601      	adds	r6, #1
 8020d42:	9b08      	ldr	r3, [sp, #32]
 8020d44:	b236      	sxth	r6, r6
 8020d46:	429e      	cmp	r6, r3
 8020d48:	4632      	mov	r2, r6
 8020d4a:	dbd0      	blt.n	8020cee <st_sssa8_ch_convolve+0x7e6>
 8020d4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020d4e:	455b      	cmp	r3, fp
 8020d50:	f000 80ea 	beq.w	8020f28 <st_sssa8_ch_convolve+0xa20>
 8020d54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020d56:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8020d58:	9910      	ldr	r1, [sp, #64]	; 0x40
 8020d5a:	4403      	add	r3, r0
 8020d5c:	3101      	adds	r1, #1
 8020d5e:	461a      	mov	r2, r3
 8020d60:	b20b      	sxth	r3, r1
 8020d62:	b292      	uxth	r2, r2
 8020d64:	9310      	str	r3, [sp, #64]	; 0x40
 8020d66:	4619      	mov	r1, r3
 8020d68:	920a      	str	r2, [sp, #40]	; 0x28
 8020d6a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020d6c:	429a      	cmp	r2, r3
 8020d6e:	dc9f      	bgt.n	8020cb0 <st_sssa8_ch_convolve+0x7a8>
 8020d70:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020d72:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8020d74:	991c      	ldr	r1, [sp, #112]	; 0x70
 8020d76:	4403      	add	r3, r0
 8020d78:	3101      	adds	r1, #1
 8020d7a:	461a      	mov	r2, r3
 8020d7c:	b20b      	sxth	r3, r1
 8020d7e:	b292      	uxth	r2, r2
 8020d80:	931c      	str	r3, [sp, #112]	; 0x70
 8020d82:	461c      	mov	r4, r3
 8020d84:	9218      	str	r2, [sp, #96]	; 0x60
 8020d86:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8020d88:	429a      	cmp	r2, r3
 8020d8a:	f73f af7a 	bgt.w	8020c82 <st_sssa8_ch_convolve+0x77a>
 8020d8e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020d90:	455a      	cmp	r2, fp
 8020d92:	f43f af54 	beq.w	8020c3e <st_sssa8_ch_convolve+0x736>
 8020d96:	9919      	ldr	r1, [sp, #100]	; 0x64
 8020d98:	2900      	cmp	r1, #0
 8020d9a:	f43f af50 	beq.w	8020c3e <st_sssa8_ch_convolve+0x736>
 8020d9e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8020da0:	981a      	ldr	r0, [sp, #104]	; 0x68
 8020da2:	1f1d      	subs	r5, r3, #4
 8020da4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020da6:	ea4f 0a90 	mov.w	sl, r0, lsr #2
 8020daa:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8020dac:	1e9e      	subs	r6, r3, #2
 8020dae:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8020db0:	f1a4 0b04 	sub.w	fp, r4, #4
 8020db4:	9c69      	ldr	r4, [sp, #420]	; 0x1a4
 8020db6:	f1a3 0904 	sub.w	r9, r3, #4
 8020dba:	f10a 33ff 	add.w	r3, sl, #4294967295
 8020dbe:	4421      	add	r1, r4
 8020dc0:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8020dc4:	b29b      	uxth	r3, r3
 8020dc6:	f000 0803 	and.w	r8, r0, #3
 8020dca:	9108      	str	r1, [sp, #32]
 8020dcc:	3301      	adds	r3, #1
 8020dce:	f8df c1f8 	ldr.w	ip, [pc, #504]	; 8020fc8 <st_sssa8_ch_convolve+0xac0>
 8020dd2:	9f5c      	ldr	r7, [sp, #368]	; 0x170
 8020dd4:	0099      	lsls	r1, r3, #2
 8020dd6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8020dda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020ddc:	9109      	str	r1, [sp, #36]	; 0x24
 8020dde:	9307      	str	r3, [sp, #28]
 8020de0:	f855 3f04 	ldr.w	r3, [r5, #4]!
 8020de4:	2a00      	cmp	r2, #0
 8020de6:	d05e      	beq.n	8020ea6 <st_sssa8_ch_convolve+0x99e>
 8020de8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020dea:	f8dd e050 	ldr.w	lr, [sp, #80]	; 0x50
 8020dee:	eb07 0a02 	add.w	sl, r7, r2
 8020df2:	f857 2b04 	ldr.w	r2, [r7], #4
 8020df6:	fa2f f482 	sxtb16	r4, r2
 8020dfa:	b2a0      	uxth	r0, r4
 8020dfc:	f8de 1000 	ldr.w	r1, [lr]
 8020e00:	ea4f 2232 	mov.w	r2, r2, ror #8
 8020e04:	fa2f f282 	sxtb16	r2, r2
 8020e08:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8020e0c:	fb20 3101 	smlad	r1, r0, r1, r3
 8020e10:	ea02 030c 	and.w	r3, r2, ip
 8020e14:	f10e 0e08 	add.w	lr, lr, #8
 8020e18:	f85e 2c04 	ldr.w	r2, [lr, #-4]
 8020e1c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8020e20:	fb23 1302 	smlad	r3, r3, r2, r1
 8020e24:	4557      	cmp	r7, sl
 8020e26:	d1e4      	bne.n	8020df2 <st_sssa8_ch_convolve+0x8ea>
 8020e28:	9a07      	ldr	r2, [sp, #28]
 8020e2a:	f1b8 0f00 	cmp.w	r8, #0
 8020e2e:	d017      	beq.n	8020e60 <st_sssa8_ch_convolve+0x958>
 8020e30:	f997 1000 	ldrsb.w	r1, [r7]
 8020e34:	f1b8 0f01 	cmp.w	r8, #1
 8020e38:	8810      	ldrh	r0, [r2, #0]
 8020e3a:	fb10 3301 	smlabb	r3, r0, r1, r3
 8020e3e:	f000 80ab 	beq.w	8020f98 <st_sssa8_ch_convolve+0xa90>
 8020e42:	f997 1001 	ldrsb.w	r1, [r7, #1]
 8020e46:	f1b8 0f02 	cmp.w	r8, #2
 8020e4a:	8850      	ldrh	r0, [r2, #2]
 8020e4c:	fb10 3301 	smlabb	r3, r0, r1, r3
 8020e50:	f000 80b7 	beq.w	8020fc2 <st_sssa8_ch_convolve+0xaba>
 8020e54:	8891      	ldrh	r1, [r2, #4]
 8020e56:	3703      	adds	r7, #3
 8020e58:	f917 2c01 	ldrsb.w	r2, [r7, #-1]
 8020e5c:	fb11 3302 	smlabb	r3, r1, r2, r3
 8020e60:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 8020e62:	f936 1f02 	ldrsh.w	r1, [r6, #2]!
 8020e66:	3201      	adds	r2, #1
 8020e68:	f859 4f04 	ldr.w	r4, [r9, #4]!
 8020e6c:	2915      	cmp	r1, #21
 8020e6e:	f85b 0f04 	ldr.w	r0, [fp, #4]!
 8020e72:	9269      	str	r2, [sp, #420]	; 0x1a4
 8020e74:	dd7a      	ble.n	8020f6c <st_sssa8_ch_convolve+0xa64>
 8020e76:	1e8a      	subs	r2, r1, #2
 8020e78:	f04f 0e01 	mov.w	lr, #1
 8020e7c:	3901      	subs	r1, #1
 8020e7e:	fa0e f202 	lsl.w	r2, lr, r2
 8020e82:	fb53 2304 	smmla	r3, r3, r4, r2
 8020e86:	410b      	asrs	r3, r1
 8020e88:	4403      	add	r3, r0
 8020e8a:	f303 0307 	ssat	r3, #8, r3
 8020e8e:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 8020e90:	f802 3c01 	strb.w	r3, [r2, #-1]
 8020e94:	9b08      	ldr	r3, [sp, #32]
 8020e96:	4293      	cmp	r3, r2
 8020e98:	f43f aed1 	beq.w	8020c3e <st_sssa8_ch_convolve+0x736>
 8020e9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020e9e:	f855 3f04 	ldr.w	r3, [r5, #4]!
 8020ea2:	2a00      	cmp	r2, #0
 8020ea4:	d1a0      	bne.n	8020de8 <st_sssa8_ch_convolve+0x8e0>
 8020ea6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020ea8:	e7bf      	b.n	8020e2a <st_sssa8_ch_convolve+0x922>
 8020eaa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020eac:	eb03 000c 	add.w	r0, r3, ip
 8020eb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020eb2:	fb09 3000 	mla	r0, r9, r0, r3
 8020eb6:	f001 fcad 	bl	8022814 <st_int8_to16_no_shift>
 8020eba:	e73a      	b.n	8020d32 <st_sssa8_ch_convolve+0x82a>
 8020ebc:	3a01      	subs	r2, #1
 8020ebe:	2001      	movs	r0, #1
 8020ec0:	923e      	str	r2, [sp, #248]	; 0xf8
 8020ec2:	f8ad 011e 	strh.w	r0, [sp, #286]	; 0x11e
 8020ec6:	e701      	b.n	8020ccc <st_sssa8_ch_convolve+0x7c4>
 8020ec8:	f8bd 011c 	ldrh.w	r0, [sp, #284]	; 0x11c
 8020ecc:	3a01      	subs	r2, #1
 8020ece:	2801      	cmp	r0, #1
 8020ed0:	923f      	str	r2, [sp, #252]	; 0xfc
 8020ed2:	f8ad 011e 	strh.w	r0, [sp, #286]	; 0x11e
 8020ed6:	f43f aef9 	beq.w	8020ccc <st_sssa8_ch_convolve+0x7c4>
 8020eda:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020edc:	9f08      	ldr	r7, [sp, #32]
 8020ede:	f9bd 4028 	ldrsh.w	r4, [sp, #40]	; 0x28
 8020ee2:	42bb      	cmp	r3, r7
 8020ee4:	f6bf af32 	bge.w	8020d4c <st_sssa8_ch_convolve+0x844>
 8020ee8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8020eec:	461d      	mov	r5, r3
 8020eee:	46ca      	mov	sl, r9
 8020ef0:	4618      	mov	r0, r3
 8020ef2:	46c1      	mov	r9, r8
 8020ef4:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8020ef6:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8020efa:	3501      	adds	r5, #1
 8020efc:	fb00 4009 	mla	r0, r0, r9, r4
 8020f00:	9b07      	ldr	r3, [sp, #28]
 8020f02:	4659      	mov	r1, fp
 8020f04:	b22d      	sxth	r5, r5
 8020f06:	fb0a 8000 	mla	r0, sl, r0, r8
 8020f0a:	4632      	mov	r2, r6
 8020f0c:	449b      	add	fp, r3
 8020f0e:	f001 fc81 	bl	8022814 <st_int8_to16_no_shift>
 8020f12:	42bd      	cmp	r5, r7
 8020f14:	4628      	mov	r0, r5
 8020f16:	dbf0      	blt.n	8020efa <st_sssa8_ch_convolve+0x9f2>
 8020f18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020f1a:	46c8      	mov	r8, r9
 8020f1c:	46d1      	mov	r9, sl
 8020f1e:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8020f22:	455b      	cmp	r3, fp
 8020f24:	f47f af16 	bne.w	8020d54 <st_sssa8_ch_convolve+0x84c>
 8020f28:	9b69      	ldr	r3, [sp, #420]	; 0x1a4
 8020f2a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8020f2c:	9965      	ldr	r1, [sp, #404]	; 0x194
 8020f2e:	9821      	ldr	r0, [sp, #132]	; 0x84
 8020f30:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8020f32:	9304      	str	r3, [sp, #16]
 8020f34:	9203      	str	r2, [sp, #12]
 8020f36:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020f38:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8020f3a:	9102      	str	r1, [sp, #8]
 8020f3c:	9001      	str	r0, [sp, #4]
 8020f3e:	9914      	ldr	r1, [sp, #80]	; 0x50
 8020f40:	985c      	ldr	r0, [sp, #368]	; 0x170
 8020f42:	9400      	str	r4, [sp, #0]
 8020f44:	f001 f882 	bl	802204c <st_sssa8_ch_nn_mat_mult_kernel>
 8020f48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020f4a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8020f4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020f4e:	440b      	add	r3, r1
 8020f50:	9069      	str	r0, [sp, #420]	; 0x1a4
 8020f52:	3201      	adds	r2, #1
 8020f54:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
 8020f58:	b29b      	uxth	r3, r3
 8020f5a:	b212      	sxth	r2, r2
 8020f5c:	930a      	str	r3, [sp, #40]	; 0x28
 8020f5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020f60:	4611      	mov	r1, r2
 8020f62:	9210      	str	r2, [sp, #64]	; 0x40
 8020f64:	4293      	cmp	r3, r2
 8020f66:	f73f aea3 	bgt.w	8020cb0 <st_sssa8_ch_convolve+0x7a8>
 8020f6a:	e701      	b.n	8020d70 <st_sssa8_ch_convolve+0x868>
 8020f6c:	2900      	cmp	r1, #0
 8020f6e:	dd15      	ble.n	8020f9c <st_sssa8_ch_convolve+0xa94>
 8020f70:	005b      	lsls	r3, r3, #1
 8020f72:	fb53 0304 	smmla	r3, r3, r4, r0
 8020f76:	fa43 f101 	asr.w	r1, r3, r1
 8020f7a:	f301 0307 	ssat	r3, #8, r1
 8020f7e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8020f82:	e787      	b.n	8020e94 <st_sssa8_ch_convolve+0x98c>
 8020f84:	4611      	mov	r1, r2
 8020f86:	985c      	ldr	r0, [sp, #368]	; 0x170
 8020f88:	e9dd 3219 	ldrd	r3, r2, [sp, #100]	; 0x64
 8020f8c:	f001 fce4 	bl	8022958 <st_int8_to16_dual>
 8020f90:	2301      	movs	r3, #1
 8020f92:	932e      	str	r3, [sp, #184]	; 0xb8
 8020f94:	f7ff bb46 	b.w	8020624 <st_sssa8_ch_convolve+0x11c>
 8020f98:	3701      	adds	r7, #1
 8020f9a:	e761      	b.n	8020e60 <st_sssa8_ch_convolve+0x958>
 8020f9c:	f1c1 0101 	rsb	r1, r1, #1
 8020fa0:	408b      	lsls	r3, r1
 8020fa2:	f303 031f 	ssat	r3, #32, r3
 8020fa6:	fb53 f314 	smmulr	r3, r3, r4
 8020faa:	4403      	add	r3, r0
 8020fac:	f303 0307 	ssat	r3, #8, r3
 8020fb0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8020fb4:	e76e      	b.n	8020e94 <st_sssa8_ch_convolve+0x98c>
 8020fb6:	4615      	mov	r5, r2
 8020fb8:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
 8020fbc:	463e      	mov	r6, r7
 8020fbe:	f7ff baff 	b.w	80205c0 <st_sssa8_ch_convolve+0xb8>
 8020fc2:	3702      	adds	r7, #2
 8020fc4:	e74c      	b.n	8020e60 <st_sssa8_ch_convolve+0x958>
 8020fc6:	bf00      	nop
 8020fc8:	ffff0000 	.word	0xffff0000

08020fcc <st_sssa8_ch_convolve_rgb>:
 8020fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020fd0:	b0cb      	sub	sp, #300	; 0x12c
 8020fd2:	468b      	mov	fp, r1
 8020fd4:	2a03      	cmp	r2, #3
 8020fd6:	931f      	str	r3, [sp, #124]	; 0x7c
 8020fd8:	f8bd 3158 	ldrh.w	r3, [sp, #344]	; 0x158
 8020fdc:	f8bd 1150 	ldrh.w	r1, [sp, #336]	; 0x150
 8020fe0:	9310      	str	r3, [sp, #64]	; 0x40
 8020fe2:	f8bd 315c 	ldrh.w	r3, [sp, #348]	; 0x15c
 8020fe6:	f8bd 4154 	ldrh.w	r4, [sp, #340]	; 0x154
 8020fea:	930a      	str	r3, [sp, #40]	; 0x28
 8020fec:	f99d 316c 	ldrsb.w	r3, [sp, #364]	; 0x16c
 8020ff0:	9115      	str	r1, [sp, #84]	; 0x54
 8020ff2:	931d      	str	r3, [sp, #116]	; 0x74
 8020ff4:	f8bd 3178 	ldrh.w	r3, [sp, #376]	; 0x178
 8020ff8:	940f      	str	r4, [sp, #60]	; 0x3c
 8020ffa:	930e      	str	r3, [sp, #56]	; 0x38
 8020ffc:	9d5a      	ldr	r5, [sp, #360]	; 0x168
 8020ffe:	f99d e170 	ldrsb.w	lr, [sp, #368]	; 0x170
 8021002:	9b5f      	ldr	r3, [sp, #380]	; 0x17c
 8021004:	f040 83ed 	bne.w	80217e2 <st_sssa8_ch_convolve_rgb+0x816>
 8021008:	4606      	mov	r6, r0
 802100a:	4608      	mov	r0, r1
 802100c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8021010:	ebc0 7240 	rsb	r2, r0, r0, lsl #29
 8021014:	eb03 0741 	add.w	r7, r3, r1, lsl #1
 8021018:	fb14 f304 	smulbb	r3, r4, r4
 802101c:	ea4f 0880 	mov.w	r8, r0, lsl #2
 8021020:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 8021024:	9711      	str	r7, [sp, #68]	; 0x44
 8021026:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802102a:	9221      	str	r2, [sp, #132]	; 0x84
 802102c:	4442      	add	r2, r8
 802102e:	b29b      	uxth	r3, r3
 8021030:	9222      	str	r2, [sp, #136]	; 0x88
 8021032:	9316      	str	r3, [sp, #88]	; 0x58
 8021034:	2800      	cmp	r0, #0
 8021036:	f000 83d1 	beq.w	80217dc <st_sssa8_ch_convolve_rgb+0x810>
 802103a:	0047      	lsls	r7, r0, #1
 802103c:	4629      	mov	r1, r5
 802103e:	1f14      	subs	r4, r2, #4
 8021040:	f04f 0c01 	mov.w	ip, #1
 8021044:	443d      	add	r5, r7
 8021046:	f931 3b02 	ldrsh.w	r3, [r1], #2
 802104a:	1e5a      	subs	r2, r3, #1
 802104c:	fa0c f003 	lsl.w	r0, ip, r3
 8021050:	fa0e f303 	lsl.w	r3, lr, r3
 8021054:	b292      	uxth	r2, r2
 8021056:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 802105a:	2a14      	cmp	r2, #20
 802105c:	f200 81e4 	bhi.w	8021428 <st_sssa8_ch_convolve_rgb+0x45c>
 8021060:	428d      	cmp	r5, r1
 8021062:	f844 3f04 	str.w	r3, [r4, #4]!
 8021066:	d1ee      	bne.n	8021046 <st_sssa8_ch_convolve_rgb+0x7a>
 8021068:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802106a:	eb03 0408 	add.w	r4, r3, r8
 802106e:	1bed      	subs	r5, r5, r7
 8021070:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8021072:	a932      	add	r1, sp, #200	; 0xc8
 8021074:	ab2e      	add	r3, sp, #184	; 0xb8
 8021076:	9523      	str	r5, [sp, #140]	; 0x8c
 8021078:	aa2a      	add	r2, sp, #168	; 0xa8
 802107a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802107c:	a836      	add	r0, sp, #216	; 0xd8
 802107e:	9744      	str	r7, [sp, #272]	; 0x110
 8021080:	9745      	str	r7, [sp, #276]	; 0x114
 8021082:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8021084:	9100      	str	r1, [sp, #0]
 8021086:	a940      	add	r1, sp, #256	; 0x100
 8021088:	9742      	str	r7, [sp, #264]	; 0x108
 802108a:	9743      	str	r7, [sp, #268]	; 0x10c
 802108c:	e9cd 552f 	strd	r5, r5, [sp, #188]	; 0xbc
 8021090:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8021092:	e9cd bb2b 	strd	fp, fp, [sp, #172]	; 0xac
 8021096:	e9cd 5533 	strd	r5, r5, [sp, #204]	; 0xcc
 802109a:	f000 ff35 	bl	8021f08 <ai_padding_opt_init>
 802109e:	9911      	ldr	r1, [sp, #68]	; 0x44
 80210a0:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80210a4:	e9dd 2015 	ldrd	r2, r0, [sp, #84]	; 0x54
 80210a8:	005b      	lsls	r3, r3, #1
 80210aa:	fb02 f200 	mul.w	r2, r2, r0
 80210ae:	fb05 f303 	mul.w	r3, r5, r3
 80210b2:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
 80210b6:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80210ba:	930d      	str	r3, [sp, #52]	; 0x34
 80210bc:	f340 8384 	ble.w	80217c8 <st_sssa8_ch_convolve_rgb+0x7fc>
 80210c0:	2300      	movs	r3, #0
 80210c2:	4602      	mov	r2, r0
 80210c4:	9328      	str	r3, [sp, #160]	; 0xa0
 80210c6:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80210ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80210ce:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80210d0:	f023 0301 	bic.w	r3, r3, #1
 80210d4:	4293      	cmp	r3, r2
 80210d6:	bf28      	it	cs
 80210d8:	4613      	movcs	r3, r2
 80210da:	2b01      	cmp	r3, #1
 80210dc:	9324      	str	r3, [sp, #144]	; 0x90
 80210de:	f240 81ae 	bls.w	802143e <st_sssa8_ch_convolve_rgb+0x472>
 80210e2:	9924      	ldr	r1, [sp, #144]	; 0x90
 80210e4:	4613      	mov	r3, r2
 80210e6:	fbb2 f2f1 	udiv	r2, r2, r1
 80210ea:	fb01 3312 	mls	r3, r1, r2, r3
 80210ee:	b292      	uxth	r2, r2
 80210f0:	b29b      	uxth	r3, r3
 80210f2:	9229      	str	r2, [sp, #164]	; 0xa4
 80210f4:	2b00      	cmp	r3, #0
 80210f6:	f040 819d 	bne.w	8021434 <st_sssa8_ch_convolve_rgb+0x468>
 80210fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80210fc:	2b00      	cmp	r3, #0
 80210fe:	f000 818b 	beq.w	8021418 <st_sssa8_ch_convolve_rgb+0x44c>
 8021102:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021104:	2500      	movs	r5, #0
 8021106:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8021108:	4253      	negs	r3, r2
 802110a:	4f99      	ldr	r7, [pc, #612]	; (8021370 <st_sssa8_ch_convolve_rgb+0x3a4>)
 802110c:	1a8a      	subs	r2, r1, r2
 802110e:	9527      	str	r5, [sp, #156]	; 0x9c
 8021110:	b29b      	uxth	r3, r3
 8021112:	9226      	str	r2, [sp, #152]	; 0x98
 8021114:	931e      	str	r3, [sp, #120]	; 0x78
 8021116:	9325      	str	r3, [sp, #148]	; 0x94
 8021118:	a836      	add	r0, sp, #216	; 0xd8
 802111a:	f000 ff4f 	bl	8021fbc <ai_padding_opt_phase1>
 802111e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021120:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021122:	fb05 f303 	mul.w	r3, r5, r3
 8021126:	995d      	ldr	r1, [sp, #372]	; 0x174
 8021128:	fb02 1303 	mla	r3, r2, r3, r1
 802112c:	9314      	str	r3, [sp, #80]	; 0x50
 802112e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021130:	b92b      	cbnz	r3, 802113e <st_sssa8_ch_convolve_rgb+0x172>
 8021132:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021134:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8021136:	990d      	ldr	r1, [sp, #52]	; 0x34
 8021138:	981f      	ldr	r0, [sp, #124]	; 0x7c
 802113a:	f001 fc0d 	bl	8022958 <st_int8_to16_dual>
 802113e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021140:	46d9      	mov	r9, fp
 8021142:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8021144:	46b2      	mov	sl, r6
 8021146:	fb03 2505 	mla	r5, r3, r5, r2
 802114a:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 802114e:	930b      	str	r3, [sp, #44]	; 0x2c
 8021150:	46ab      	mov	fp, r5
 8021152:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021154:	9317      	str	r3, [sp, #92]	; 0x5c
 8021156:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021158:	931c      	str	r3, [sp, #112]	; 0x70
 802115a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802115c:	9312      	str	r3, [sp, #72]	; 0x48
 802115e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8021160:	9320      	str	r3, [sp, #128]	; 0x80
 8021162:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8021164:	931b      	str	r3, [sp, #108]	; 0x6c
 8021166:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021168:	931a      	str	r3, [sp, #104]	; 0x68
 802116a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802116c:	9318      	str	r3, [sp, #96]	; 0x60
 802116e:	9b59      	ldr	r3, [sp, #356]	; 0x164
 8021170:	9319      	str	r3, [sp, #100]	; 0x64
 8021172:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021174:	1e5a      	subs	r2, r3, #1
 8021176:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802117a:	b292      	uxth	r2, r2
 802117c:	429a      	cmp	r2, r3
 802117e:	9217      	str	r2, [sp, #92]	; 0x5c
 8021180:	f000 813a 	beq.w	80213f8 <st_sssa8_ch_convolve_rgb+0x42c>
 8021184:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 8021186:	2600      	movs	r6, #0
 8021188:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802118a:	9238      	str	r2, [sp, #224]	; 0xe0
 802118c:	464a      	mov	r2, r9
 802118e:	9306      	str	r3, [sp, #24]
 8021190:	46d9      	mov	r9, fp
 8021192:	9609      	str	r6, [sp, #36]	; 0x24
 8021194:	4693      	mov	fp, r2
 8021196:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021198:	e9dd 0139 	ldrd	r0, r1, [sp, #228]	; 0xe4
 802119c:	e9cd 0136 	strd	r0, r1, [sp, #216]	; 0xd8
 80211a0:	9914      	ldr	r1, [sp, #80]	; 0x50
 80211a2:	9113      	str	r1, [sp, #76]	; 0x4c
 80211a4:	2800      	cmp	r0, #0
 80211a6:	d17b      	bne.n	80212a0 <st_sssa8_ch_convolve_rgb+0x2d4>
 80211a8:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 80211aa:	2a00      	cmp	r2, #0
 80211ac:	d17e      	bne.n	80212ac <st_sssa8_ch_convolve_rgb+0x2e0>
 80211ae:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 80211b0:	2101      	movs	r1, #1
 80211b2:	3a01      	subs	r2, #1
 80211b4:	f8ad 10fe 	strh.w	r1, [sp, #254]	; 0xfe
 80211b8:	9238      	str	r2, [sp, #224]	; 0xe0
 80211ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80211bc:	4591      	cmp	r9, r2
 80211be:	dd5c      	ble.n	802127a <st_sssa8_ch_convolve_rgb+0x2ae>
 80211c0:	4610      	mov	r0, r2
 80211c2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80211c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80211c6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80211c8:	4686      	mov	lr, r0
 80211ca:	fb06 1102 	mla	r1, r6, r2, r1
 80211ce:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 80211d2:	f8cd 9020 	str.w	r9, [sp, #32]
 80211d6:	1b09      	subs	r1, r1, r4
 80211d8:	4691      	mov	r9, r2
 80211da:	f9bd 4074 	ldrsh.w	r4, [sp, #116]	; 0x74
 80211de:	468c      	mov	ip, r1
 80211e0:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80211e4:	45cc      	cmp	ip, r9
 80211e6:	dd3d      	ble.n	8021264 <st_sssa8_ch_convolve_rgb+0x298>
 80211e8:	fb00 f20b 	mul.w	r2, r0, fp
 80211ec:	ea4f 71de 	mov.w	r1, lr, lsr #31
 80211f0:	4698      	mov	r8, r3
 80211f2:	9207      	str	r2, [sp, #28]
 80211f4:	4583      	cmp	fp, r0
 80211f6:	bfd8      	it	le
 80211f8:	f041 0101 	orrle.w	r1, r1, #1
 80211fc:	464a      	mov	r2, r9
 80211fe:	4648      	mov	r0, r9
 8021200:	4583      	cmp	fp, r0
 8021202:	f102 0601 	add.w	r6, r2, #1
 8021206:	f103 0306 	add.w	r3, r3, #6
 802120a:	bfcc      	ite	gt
 802120c:	2500      	movgt	r5, #0
 802120e:	2501      	movle	r5, #1
 8021210:	ea55 75d2 	orrs.w	r5, r5, r2, lsr #31
 8021214:	d100      	bne.n	8021218 <st_sssa8_ch_convolve_rgb+0x24c>
 8021216:	b159      	cbz	r1, 8021230 <st_sssa8_ch_convolve_rgb+0x264>
 8021218:	b232      	sxth	r2, r6
 802121a:	f823 4c04 	strh.w	r4, [r3, #-4]
 802121e:	f823 4c02 	strh.w	r4, [r3, #-2]
 8021222:	4562      	cmp	r2, ip
 8021224:	f823 4c06 	strh.w	r4, [r3, #-6]
 8021228:	4610      	mov	r0, r2
 802122a:	da1b      	bge.n	8021264 <st_sssa8_ch_convolve_rgb+0x298>
 802122c:	4698      	mov	r8, r3
 802122e:	e7e7      	b.n	8021200 <st_sssa8_ch_convolve_rgb+0x234>
 8021230:	9d07      	ldr	r5, [sp, #28]
 8021232:	3201      	adds	r2, #1
 8021234:	4428      	add	r0, r5
 8021236:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8021238:	b212      	sxth	r2, r2
 802123a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802123e:	4562      	cmp	r2, ip
 8021240:	5828      	ldr	r0, [r5, r0]
 8021242:	fa2f f680 	sxtb16	r6, r0
 8021246:	ea4f 2530 	mov.w	r5, r0, ror #8
 802124a:	ea06 0a07 	and.w	sl, r6, r7
 802124e:	fa2f f585 	sxtb16	r5, r5
 8021252:	b2ad      	uxth	r5, r5
 8021254:	4610      	mov	r0, r2
 8021256:	ea45 050a 	orr.w	r5, r5, sl
 802125a:	f8c8 5002 	str.w	r5, [r8, #2]
 802125e:	f823 6c06 	strh.w	r6, [r3, #-6]
 8021262:	dbe3      	blt.n	802122c <st_sssa8_ch_convolve_rgb+0x260>
 8021264:	f10e 0e01 	add.w	lr, lr, #1
 8021268:	9a08      	ldr	r2, [sp, #32]
 802126a:	fa0f fe8e 	sxth.w	lr, lr
 802126e:	4596      	cmp	lr, r2
 8021270:	4670      	mov	r0, lr
 8021272:	dbb7      	blt.n	80211e4 <st_sssa8_ch_convolve_rgb+0x218>
 8021274:	4691      	mov	r9, r2
 8021276:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 802127a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802127c:	429a      	cmp	r2, r3
 802127e:	d055      	beq.n	802132c <st_sssa8_ch_convolve_rgb+0x360>
 8021280:	9a06      	ldr	r2, [sp, #24]
 8021282:	980a      	ldr	r0, [sp, #40]	; 0x28
 8021284:	9909      	ldr	r1, [sp, #36]	; 0x24
 8021286:	4402      	add	r2, r0
 8021288:	3101      	adds	r1, #1
 802128a:	b292      	uxth	r2, r2
 802128c:	b209      	sxth	r1, r1
 802128e:	9206      	str	r2, [sp, #24]
 8021290:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021292:	460e      	mov	r6, r1
 8021294:	9109      	str	r1, [sp, #36]	; 0x24
 8021296:	428a      	cmp	r2, r1
 8021298:	dd6c      	ble.n	8021374 <st_sssa8_ch_convolve_rgb+0x3a8>
 802129a:	9836      	ldr	r0, [sp, #216]	; 0xd8
 802129c:	2800      	cmp	r0, #0
 802129e:	d083      	beq.n	80211a8 <st_sssa8_ch_convolve_rgb+0x1dc>
 80212a0:	3801      	subs	r0, #1
 80212a2:	2201      	movs	r2, #1
 80212a4:	9036      	str	r0, [sp, #216]	; 0xd8
 80212a6:	f8ad 20fe 	strh.w	r2, [sp, #254]	; 0xfe
 80212aa:	e786      	b.n	80211ba <st_sssa8_ch_convolve_rgb+0x1ee>
 80212ac:	f8bd 10fc 	ldrh.w	r1, [sp, #252]	; 0xfc
 80212b0:	3a01      	subs	r2, #1
 80212b2:	2901      	cmp	r1, #1
 80212b4:	9237      	str	r2, [sp, #220]	; 0xdc
 80212b6:	f8ad 10fe 	strh.w	r1, [sp, #254]	; 0xfe
 80212ba:	f43f af7e 	beq.w	80211ba <st_sssa8_ch_convolve_rgb+0x1ee>
 80212be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80212c0:	4591      	cmp	r9, r2
 80212c2:	ddda      	ble.n	802127a <st_sssa8_ch_convolve_rgb+0x2ae>
 80212c4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80212c6:	4694      	mov	ip, r2
 80212c8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80212ca:	4615      	mov	r5, r2
 80212cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80212ce:	fb06 0601 	mla	r6, r6, r1, r0
 80212d2:	f9bd e018 	ldrsh.w	lr, [sp, #24]
 80212d6:	1ab6      	subs	r6, r6, r2
 80212d8:	4576      	cmp	r6, lr
 80212da:	dd1d      	ble.n	8021318 <st_sssa8_ch_convolve_rgb+0x34c>
 80212dc:	fb05 f40b 	mul.w	r4, r5, fp
 80212e0:	4670      	mov	r0, lr
 80212e2:	4675      	mov	r5, lr
 80212e4:	4425      	add	r5, r4
 80212e6:	3001      	adds	r0, #1
 80212e8:	3306      	adds	r3, #6
 80212ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80212ee:	b200      	sxth	r0, r0
 80212f0:	f85a 2005 	ldr.w	r2, [sl, r5]
 80212f4:	fa2f f182 	sxtb16	r1, r2
 80212f8:	ea4f 2232 	mov.w	r2, r2, ror #8
 80212fc:	ea01 0807 	and.w	r8, r1, r7
 8021300:	fa2f f282 	sxtb16	r2, r2
 8021304:	b292      	uxth	r2, r2
 8021306:	42b0      	cmp	r0, r6
 8021308:	f823 1c06 	strh.w	r1, [r3, #-6]
 802130c:	4605      	mov	r5, r0
 802130e:	ea42 0208 	orr.w	r2, r2, r8
 8021312:	f843 2c04 	str.w	r2, [r3, #-4]
 8021316:	dbe5      	blt.n	80212e4 <st_sssa8_ch_convolve_rgb+0x318>
 8021318:	f10c 0c01 	add.w	ip, ip, #1
 802131c:	fa0f fc8c 	sxth.w	ip, ip
 8021320:	45cc      	cmp	ip, r9
 8021322:	4665      	mov	r5, ip
 8021324:	dbd8      	blt.n	80212d8 <st_sssa8_ch_convolve_rgb+0x30c>
 8021326:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021328:	429a      	cmp	r2, r3
 802132a:	d1a9      	bne.n	8021280 <st_sssa8_ch_convolve_rgb+0x2b4>
 802132c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 802132e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8021330:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021332:	9818      	ldr	r0, [sp, #96]	; 0x60
 8021334:	9204      	str	r2, [sp, #16]
 8021336:	9401      	str	r4, [sp, #4]
 8021338:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802133a:	9305      	str	r3, [sp, #20]
 802133c:	9002      	str	r0, [sp, #8]
 802133e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021340:	980d      	ldr	r0, [sp, #52]	; 0x34
 8021342:	9400      	str	r4, [sp, #0]
 8021344:	e9dd 1219 	ldrd	r1, r2, [sp, #100]	; 0x64
 8021348:	9103      	str	r1, [sp, #12]
 802134a:	9911      	ldr	r1, [sp, #68]	; 0x44
 802134c:	f002 fac0 	bl	80238d0 <st_sssa8_ch_nn_mat_mult_kernel_opt>
 8021350:	9b06      	ldr	r3, [sp, #24]
 8021352:	990a      	ldr	r1, [sp, #40]	; 0x28
 8021354:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021356:	440b      	add	r3, r1
 8021358:	9013      	str	r0, [sp, #76]	; 0x4c
 802135a:	3201      	adds	r2, #1
 802135c:	b29b      	uxth	r3, r3
 802135e:	b212      	sxth	r2, r2
 8021360:	9306      	str	r3, [sp, #24]
 8021362:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021364:	4616      	mov	r6, r2
 8021366:	9209      	str	r2, [sp, #36]	; 0x24
 8021368:	4293      	cmp	r3, r2
 802136a:	dd59      	ble.n	8021420 <st_sssa8_ch_convolve_rgb+0x454>
 802136c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802136e:	e794      	b.n	802129a <st_sssa8_ch_convolve_rgb+0x2ce>
 8021370:	ffff0000 	.word	0xffff0000
 8021374:	9911      	ldr	r1, [sp, #68]	; 0x44
 8021376:	465a      	mov	r2, fp
 8021378:	46cb      	mov	fp, r9
 802137a:	4299      	cmp	r1, r3
 802137c:	4691      	mov	r9, r2
 802137e:	d010      	beq.n	80213a2 <st_sssa8_ch_convolve_rgb+0x3d6>
 8021380:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8021382:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8021384:	9204      	str	r2, [sp, #16]
 8021386:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021388:	9401      	str	r4, [sp, #4]
 802138a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802138c:	9305      	str	r3, [sp, #20]
 802138e:	9400      	str	r4, [sp, #0]
 8021390:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021392:	e9dd 0219 	ldrd	r0, r2, [sp, #100]	; 0x64
 8021396:	9003      	str	r0, [sp, #12]
 8021398:	9818      	ldr	r0, [sp, #96]	; 0x60
 802139a:	9002      	str	r0, [sp, #8]
 802139c:	980d      	ldr	r0, [sp, #52]	; 0x34
 802139e:	f002 fdb1 	bl	8023f04 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 80213a2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80213a4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80213a6:	9914      	ldr	r1, [sp, #80]	; 0x50
 80213a8:	1a9b      	subs	r3, r3, r2
 80213aa:	4608      	mov	r0, r1
 80213ac:	b29b      	uxth	r3, r3
 80213ae:	4410      	add	r0, r2
 80213b0:	429a      	cmp	r2, r3
 80213b2:	931c      	str	r3, [sp, #112]	; 0x70
 80213b4:	9014      	str	r0, [sp, #80]	; 0x50
 80213b6:	bf28      	it	cs
 80213b8:	461a      	movcs	r2, r3
 80213ba:	4614      	mov	r4, r2
 80213bc:	b90a      	cbnz	r2, 80213c2 <st_sssa8_ch_convolve_rgb+0x3f6>
 80213be:	9412      	str	r4, [sp, #72]	; 0x48
 80213c0:	e6d7      	b.n	8021172 <st_sssa8_ch_convolve_rgb+0x1a6>
 80213c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80213c4:	9e18      	ldr	r6, [sp, #96]	; 0x60
 80213c6:	4619      	mov	r1, r3
 80213c8:	009d      	lsls	r5, r3, #2
 80213ca:	9820      	ldr	r0, [sp, #128]	; 0x80
 80213cc:	eb06 0141 	add.w	r1, r6, r1, lsl #1
 80213d0:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80213d2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80213d4:	442e      	add	r6, r5
 80213d6:	9118      	str	r1, [sp, #96]	; 0x60
 80213d8:	fb02 0003 	mla	r0, r2, r3, r0
 80213dc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80213de:	961a      	str	r6, [sp, #104]	; 0x68
 80213e0:	4623      	mov	r3, r4
 80213e2:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80213e4:	9020      	str	r0, [sp, #128]	; 0x80
 80213e6:	442e      	add	r6, r5
 80213e8:	9619      	str	r6, [sp, #100]	; 0x64
 80213ea:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80213ec:	442e      	add	r6, r5
 80213ee:	4635      	mov	r5, r6
 80213f0:	961b      	str	r6, [sp, #108]	; 0x6c
 80213f2:	f001 fab1 	bl	8022958 <st_int8_to16_dual>
 80213f6:	e7e2      	b.n	80213be <st_sssa8_ch_convolve_rgb+0x3f2>
 80213f8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80213fa:	4656      	mov	r6, sl
 80213fc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80213fe:	46cb      	mov	fp, r9
 8021400:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8021402:	440b      	add	r3, r1
 8021404:	3201      	adds	r2, #1
 8021406:	b29b      	uxth	r3, r3
 8021408:	b212      	sxth	r2, r2
 802140a:	9325      	str	r3, [sp, #148]	; 0x94
 802140c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802140e:	4615      	mov	r5, r2
 8021410:	9227      	str	r2, [sp, #156]	; 0x9c
 8021412:	4293      	cmp	r3, r2
 8021414:	f73f ae80 	bgt.w	8021118 <st_sssa8_ch_convolve_rgb+0x14c>
 8021418:	2000      	movs	r0, #0
 802141a:	b04b      	add	sp, #300	; 0x12c
 802141c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021420:	465b      	mov	r3, fp
 8021422:	46cb      	mov	fp, r9
 8021424:	4699      	mov	r9, r3
 8021426:	e7bc      	b.n	80213a2 <st_sssa8_ch_convolve_rgb+0x3d6>
 8021428:	428d      	cmp	r5, r1
 802142a:	f844 ef04 	str.w	lr, [r4, #4]!
 802142e:	f47f ae0a 	bne.w	8021046 <st_sssa8_ch_convolve_rgb+0x7a>
 8021432:	e619      	b.n	8021068 <st_sssa8_ch_convolve_rgb+0x9c>
 8021434:	4613      	mov	r3, r2
 8021436:	3301      	adds	r3, #1
 8021438:	b29b      	uxth	r3, r3
 802143a:	9329      	str	r3, [sp, #164]	; 0xa4
 802143c:	e65d      	b.n	80210fa <st_sssa8_ch_convolve_rgb+0x12e>
 802143e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021440:	2b00      	cmp	r3, #0
 8021442:	d0e9      	beq.n	8021418 <st_sssa8_ch_convolve_rgb+0x44c>
 8021444:	2100      	movs	r1, #0
 8021446:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021448:	eba4 0008 	sub.w	r0, r4, r8
 802144c:	9f11      	ldr	r7, [sp, #68]	; 0x44
 802144e:	4253      	negs	r3, r2
 8021450:	9113      	str	r1, [sp, #76]	; 0x4c
 8021452:	460c      	mov	r4, r1
 8021454:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8021456:	b29b      	uxth	r3, r3
 8021458:	9012      	str	r0, [sp, #72]	; 0x48
 802145a:	1a8a      	subs	r2, r1, r2
 802145c:	9314      	str	r3, [sp, #80]	; 0x50
 802145e:	9226      	str	r2, [sp, #152]	; 0x98
 8021460:	930c      	str	r3, [sp, #48]	; 0x30
 8021462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021464:	2500      	movs	r5, #0
 8021466:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8021468:	a836      	add	r0, sp, #216	; 0xd8
 802146a:	9507      	str	r5, [sp, #28]
 802146c:	fb03 2a04 	mla	sl, r3, r4, r2
 8021470:	f000 fda4 	bl	8021fbc <ai_padding_opt_phase1>
 8021474:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8021478:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802147a:	9309      	str	r3, [sp, #36]	; 0x24
 802147c:	462b      	mov	r3, r5
 802147e:	9206      	str	r2, [sp, #24]
 8021480:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8021482:	2a00      	cmp	r2, #0
 8021484:	f040 8119 	bne.w	80216ba <st_sssa8_ch_convolve_rgb+0x6ee>
 8021488:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 802148a:	2a00      	cmp	r2, #0
 802148c:	f040 811b 	bne.w	80216c6 <st_sssa8_ch_convolve_rgb+0x6fa>
 8021490:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 8021492:	2101      	movs	r1, #1
 8021494:	3a01      	subs	r2, #1
 8021496:	f8ad 10fe 	strh.w	r1, [sp, #254]	; 0xfe
 802149a:	9238      	str	r2, [sp, #224]	; 0xe0
 802149c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802149e:	4552      	cmp	r2, sl
 80214a0:	da5d      	bge.n	802155e <st_sssa8_ch_convolve_rgb+0x592>
 80214a2:	4691      	mov	r9, r2
 80214a4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80214a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80214a8:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 80214ac:	46cc      	mov	ip, r9
 80214ae:	fb03 1302 	mla	r3, r3, r2, r1
 80214b2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80214b4:	f9bd 1074 	ldrsh.w	r1, [sp, #116]	; 0x74
 80214b8:	4680      	mov	r8, r0
 80214ba:	1a9a      	subs	r2, r3, r2
 80214bc:	f8cd a020 	str.w	sl, [sp, #32]
 80214c0:	960b      	str	r6, [sp, #44]	; 0x2c
 80214c2:	4542      	cmp	r2, r8
 80214c4:	dd41      	ble.n	802154a <st_sssa8_ch_convolve_rgb+0x57e>
 80214c6:	45cb      	cmp	fp, r9
 80214c8:	fb09 fa0b 	mul.w	sl, r9, fp
 80214cc:	463e      	mov	r6, r7
 80214ce:	4643      	mov	r3, r8
 80214d0:	bfcc      	ite	gt
 80214d2:	f04f 0e00 	movgt.w	lr, #0
 80214d6:	f04f 0e01 	movle.w	lr, #1
 80214da:	4640      	mov	r0, r8
 80214dc:	ea4e 7edc 	orr.w	lr, lr, ip, lsr #31
 80214e0:	4583      	cmp	fp, r0
 80214e2:	f103 0501 	add.w	r5, r3, #1
 80214e6:	f107 0706 	add.w	r7, r7, #6
 80214ea:	bfcc      	ite	gt
 80214ec:	2400      	movgt	r4, #0
 80214ee:	2401      	movle	r4, #1
 80214f0:	ea54 74d3 	orrs.w	r4, r4, r3, lsr #31
 80214f4:	d102      	bne.n	80214fc <st_sssa8_ch_convolve_rgb+0x530>
 80214f6:	f1be 0f00 	cmp.w	lr, #0
 80214fa:	d00b      	beq.n	8021514 <st_sssa8_ch_convolve_rgb+0x548>
 80214fc:	b22b      	sxth	r3, r5
 80214fe:	f827 1c04 	strh.w	r1, [r7, #-4]
 8021502:	f827 1c02 	strh.w	r1, [r7, #-2]
 8021506:	429a      	cmp	r2, r3
 8021508:	f827 1c06 	strh.w	r1, [r7, #-6]
 802150c:	4618      	mov	r0, r3
 802150e:	dd1c      	ble.n	802154a <st_sssa8_ch_convolve_rgb+0x57e>
 8021510:	463e      	mov	r6, r7
 8021512:	e7e5      	b.n	80214e0 <st_sssa8_ch_convolve_rgb+0x514>
 8021514:	4450      	add	r0, sl
 8021516:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021518:	3301      	adds	r3, #1
 802151a:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 80217e8 <st_sssa8_ch_convolve_rgb+0x81c>
 802151e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021522:	b21b      	sxth	r3, r3
 8021524:	5820      	ldr	r0, [r4, r0]
 8021526:	fa2f f580 	sxtb16	r5, r0
 802152a:	ea4f 2430 	mov.w	r4, r0, ror #8
 802152e:	ea05 0909 	and.w	r9, r5, r9
 8021532:	fa2f f484 	sxtb16	r4, r4
 8021536:	b2a4      	uxth	r4, r4
 8021538:	4293      	cmp	r3, r2
 802153a:	4618      	mov	r0, r3
 802153c:	ea44 0409 	orr.w	r4, r4, r9
 8021540:	f8c6 4002 	str.w	r4, [r6, #2]
 8021544:	f827 5c06 	strh.w	r5, [r7, #-6]
 8021548:	dbe2      	blt.n	8021510 <st_sssa8_ch_convolve_rgb+0x544>
 802154a:	f10c 0c01 	add.w	ip, ip, #1
 802154e:	9b08      	ldr	r3, [sp, #32]
 8021550:	fa0f fc8c 	sxth.w	ip, ip
 8021554:	459c      	cmp	ip, r3
 8021556:	46e1      	mov	r9, ip
 8021558:	dbb3      	blt.n	80214c2 <st_sssa8_ch_convolve_rgb+0x4f6>
 802155a:	469a      	mov	sl, r3
 802155c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 802155e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021560:	42bb      	cmp	r3, r7
 8021562:	f000 80f3 	beq.w	802174c <st_sssa8_ch_convolve_rgb+0x780>
 8021566:	9a07      	ldr	r2, [sp, #28]
 8021568:	9b06      	ldr	r3, [sp, #24]
 802156a:	990a      	ldr	r1, [sp, #40]	; 0x28
 802156c:	3201      	adds	r2, #1
 802156e:	440b      	add	r3, r1
 8021570:	b212      	sxth	r2, r2
 8021572:	990e      	ldr	r1, [sp, #56]	; 0x38
 8021574:	b29b      	uxth	r3, r3
 8021576:	9207      	str	r2, [sp, #28]
 8021578:	4291      	cmp	r1, r2
 802157a:	9306      	str	r3, [sp, #24]
 802157c:	4613      	mov	r3, r2
 802157e:	f73f af7f 	bgt.w	8021480 <st_sssa8_ch_convolve_rgb+0x4b4>
 8021582:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021584:	990a      	ldr	r1, [sp, #40]	; 0x28
 8021586:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021588:	440b      	add	r3, r1
 802158a:	3201      	adds	r2, #1
 802158c:	b29b      	uxth	r3, r3
 802158e:	b212      	sxth	r2, r2
 8021590:	930c      	str	r3, [sp, #48]	; 0x30
 8021592:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021594:	4614      	mov	r4, r2
 8021596:	9213      	str	r2, [sp, #76]	; 0x4c
 8021598:	4293      	cmp	r3, r2
 802159a:	f73f af62 	bgt.w	8021462 <st_sssa8_ch_convolve_rgb+0x496>
 802159e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80215a0:	42ba      	cmp	r2, r7
 80215a2:	f43f af39 	beq.w	8021418 <st_sssa8_ch_convolve_rgb+0x44c>
 80215a6:	9915      	ldr	r1, [sp, #84]	; 0x54
 80215a8:	2900      	cmp	r1, #0
 80215aa:	f43f af35 	beq.w	8021418 <st_sssa8_ch_convolve_rgb+0x44c>
 80215ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80215b0:	9816      	ldr	r0, [sp, #88]	; 0x58
 80215b2:	1f1f      	subs	r7, r3, #4
 80215b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80215b6:	ea4f 0990 	mov.w	r9, r0, lsr #2
 80215ba:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80215bc:	f1a3 0c02 	sub.w	ip, r3, #2
 80215c0:	9b59      	ldr	r3, [sp, #356]	; 0x164
 80215c2:	f1a4 0a04 	sub.w	sl, r4, #4
 80215c6:	9c5d      	ldr	r4, [sp, #372]	; 0x174
 80215c8:	1f1e      	subs	r6, r3, #4
 80215ca:	f109 33ff 	add.w	r3, r9, #4294967295
 80215ce:	4421      	add	r1, r4
 80215d0:	f000 0e03 	and.w	lr, r0, #3
 80215d4:	b29b      	uxth	r3, r3
 80215d6:	f8df b210 	ldr.w	fp, [pc, #528]	; 80217e8 <st_sssa8_ch_convolve_rgb+0x81c>
 80215da:	9107      	str	r1, [sp, #28]
 80215dc:	3301      	adds	r3, #1
 80215de:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80215e0:	0099      	lsls	r1, r3, #2
 80215e2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80215e6:	9108      	str	r1, [sp, #32]
 80215e8:	e9cd 3909 	strd	r3, r9, [sp, #36]	; 0x24
 80215ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80215ee:	46a1      	mov	r9, r4
 80215f0:	f857 3f04 	ldr.w	r3, [r7, #4]!
 80215f4:	2a00      	cmp	r2, #0
 80215f6:	d05e      	beq.n	80216b6 <st_sssa8_ch_convolve_rgb+0x6ea>
 80215f8:	9a08      	ldr	r2, [sp, #32]
 80215fa:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 80215fe:	1882      	adds	r2, r0, r2
 8021600:	9206      	str	r2, [sp, #24]
 8021602:	f850 2b04 	ldr.w	r2, [r0], #4
 8021606:	fa2f f482 	sxtb16	r4, r2
 802160a:	b2a1      	uxth	r1, r4
 802160c:	f8d8 5000 	ldr.w	r5, [r8]
 8021610:	ea4f 2232 	mov.w	r2, r2, ror #8
 8021614:	fa2f f282 	sxtb16	r2, r2
 8021618:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 802161c:	fb21 3105 	smlad	r1, r1, r5, r3
 8021620:	ea02 020b 	and.w	r2, r2, fp
 8021624:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8021628:	f108 0808 	add.w	r8, r8, #8
 802162c:	ea42 4414 	orr.w	r4, r2, r4, lsr #16
 8021630:	fb24 1303 	smlad	r3, r4, r3, r1
 8021634:	9a06      	ldr	r2, [sp, #24]
 8021636:	4290      	cmp	r0, r2
 8021638:	d1e3      	bne.n	8021602 <st_sssa8_ch_convolve_rgb+0x636>
 802163a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802163c:	f1be 0f00 	cmp.w	lr, #0
 8021640:	d017      	beq.n	8021672 <st_sssa8_ch_convolve_rgb+0x6a6>
 8021642:	f990 1000 	ldrsb.w	r1, [r0]
 8021646:	f1be 0f01 	cmp.w	lr, #1
 802164a:	8814      	ldrh	r4, [r2, #0]
 802164c:	fb14 3301 	smlabb	r3, r4, r1, r3
 8021650:	f000 80ab 	beq.w	80217aa <st_sssa8_ch_convolve_rgb+0x7de>
 8021654:	f990 1001 	ldrsb.w	r1, [r0, #1]
 8021658:	f1be 0f02 	cmp.w	lr, #2
 802165c:	8854      	ldrh	r4, [r2, #2]
 802165e:	fb14 3301 	smlabb	r3, r4, r1, r3
 8021662:	f000 80a0 	beq.w	80217a6 <st_sssa8_ch_convolve_rgb+0x7da>
 8021666:	8891      	ldrh	r1, [r2, #4]
 8021668:	3003      	adds	r0, #3
 802166a:	f910 2c01 	ldrsb.w	r2, [r0, #-1]
 802166e:	fb11 3302 	smlabb	r3, r1, r2, r3
 8021672:	f93c 1f02 	ldrsh.w	r1, [ip, #2]!
 8021676:	f109 0901 	add.w	r9, r9, #1
 802167a:	f856 5f04 	ldr.w	r5, [r6, #4]!
 802167e:	2915      	cmp	r1, #21
 8021680:	f85a 4f04 	ldr.w	r4, [sl, #4]!
 8021684:	f340 8083 	ble.w	802178e <st_sssa8_ch_convolve_rgb+0x7c2>
 8021688:	1e8a      	subs	r2, r1, #2
 802168a:	f04f 0801 	mov.w	r8, #1
 802168e:	3901      	subs	r1, #1
 8021690:	fa08 f202 	lsl.w	r2, r8, r2
 8021694:	fb53 2305 	smmla	r3, r3, r5, r2
 8021698:	410b      	asrs	r3, r1
 802169a:	4423      	add	r3, r4
 802169c:	f303 0307 	ssat	r3, #8, r3
 80216a0:	f809 3c01 	strb.w	r3, [r9, #-1]
 80216a4:	9b07      	ldr	r3, [sp, #28]
 80216a6:	454b      	cmp	r3, r9
 80216a8:	f43f aeb6 	beq.w	8021418 <st_sssa8_ch_convolve_rgb+0x44c>
 80216ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80216ae:	f857 3f04 	ldr.w	r3, [r7, #4]!
 80216b2:	2a00      	cmp	r2, #0
 80216b4:	d1a0      	bne.n	80215f8 <st_sssa8_ch_convolve_rgb+0x62c>
 80216b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80216b8:	e7c0      	b.n	802163c <st_sssa8_ch_convolve_rgb+0x670>
 80216ba:	3a01      	subs	r2, #1
 80216bc:	2101      	movs	r1, #1
 80216be:	9236      	str	r2, [sp, #216]	; 0xd8
 80216c0:	f8ad 10fe 	strh.w	r1, [sp, #254]	; 0xfe
 80216c4:	e6ea      	b.n	802149c <st_sssa8_ch_convolve_rgb+0x4d0>
 80216c6:	f8bd 10fc 	ldrh.w	r1, [sp, #252]	; 0xfc
 80216ca:	3a01      	subs	r2, #1
 80216cc:	2901      	cmp	r1, #1
 80216ce:	9237      	str	r2, [sp, #220]	; 0xdc
 80216d0:	f8ad 10fe 	strh.w	r1, [sp, #254]	; 0xfe
 80216d4:	f43f aee2 	beq.w	802149c <st_sssa8_ch_convolve_rgb+0x4d0>
 80216d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80216da:	4552      	cmp	r2, sl
 80216dc:	f6bf af3f 	bge.w	802155e <st_sssa8_ch_convolve_rgb+0x592>
 80216e0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80216e2:	4694      	mov	ip, r2
 80216e4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80216e6:	4614      	mov	r4, r2
 80216e8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80216ea:	fb03 0301 	mla	r3, r3, r1, r0
 80216ee:	f9bd e018 	ldrsh.w	lr, [sp, #24]
 80216f2:	1a9d      	subs	r5, r3, r2
 80216f4:	45ae      	cmp	lr, r5
 80216f6:	da1e      	bge.n	8021736 <st_sssa8_ch_convolve_rgb+0x76a>
 80216f8:	fb04 f00b 	mul.w	r0, r4, fp
 80216fc:	4671      	mov	r1, lr
 80216fe:	4674      	mov	r4, lr
 8021700:	1903      	adds	r3, r0, r4
 8021702:	3101      	adds	r1, #1
 8021704:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 80217e8 <st_sssa8_ch_convolve_rgb+0x81c>
 8021708:	3706      	adds	r7, #6
 802170a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802170e:	b209      	sxth	r1, r1
 8021710:	58f3      	ldr	r3, [r6, r3]
 8021712:	fa2f f283 	sxtb16	r2, r3
 8021716:	ea4f 2333 	mov.w	r3, r3, ror #8
 802171a:	ea02 0808 	and.w	r8, r2, r8
 802171e:	fa2f f383 	sxtb16	r3, r3
 8021722:	b29b      	uxth	r3, r3
 8021724:	42a9      	cmp	r1, r5
 8021726:	f827 2c06 	strh.w	r2, [r7, #-6]
 802172a:	460c      	mov	r4, r1
 802172c:	ea43 0308 	orr.w	r3, r3, r8
 8021730:	f847 3c04 	str.w	r3, [r7, #-4]
 8021734:	dbe4      	blt.n	8021700 <st_sssa8_ch_convolve_rgb+0x734>
 8021736:	f10c 0c01 	add.w	ip, ip, #1
 802173a:	fa0f fc8c 	sxth.w	ip, ip
 802173e:	45d4      	cmp	ip, sl
 8021740:	4664      	mov	r4, ip
 8021742:	dbd7      	blt.n	80216f4 <st_sssa8_ch_convolve_rgb+0x728>
 8021744:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021746:	42bb      	cmp	r3, r7
 8021748:	f47f af0d 	bne.w	8021566 <st_sssa8_ch_convolve_rgb+0x59a>
 802174c:	9b5d      	ldr	r3, [sp, #372]	; 0x174
 802174e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021750:	9959      	ldr	r1, [sp, #356]	; 0x164
 8021752:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8021754:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8021756:	9304      	str	r3, [sp, #16]
 8021758:	9203      	str	r2, [sp, #12]
 802175a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802175c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802175e:	9102      	str	r1, [sp, #8]
 8021760:	9001      	str	r0, [sp, #4]
 8021762:	9911      	ldr	r1, [sp, #68]	; 0x44
 8021764:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8021766:	9400      	str	r4, [sp, #0]
 8021768:	f000 fc70 	bl	802204c <st_sssa8_ch_nn_mat_mult_kernel>
 802176c:	9a07      	ldr	r2, [sp, #28]
 802176e:	9b06      	ldr	r3, [sp, #24]
 8021770:	990a      	ldr	r1, [sp, #40]	; 0x28
 8021772:	3201      	adds	r2, #1
 8021774:	905d      	str	r0, [sp, #372]	; 0x174
 8021776:	b212      	sxth	r2, r2
 8021778:	440b      	add	r3, r1
 802177a:	990e      	ldr	r1, [sp, #56]	; 0x38
 802177c:	b29b      	uxth	r3, r3
 802177e:	9207      	str	r2, [sp, #28]
 8021780:	4291      	cmp	r1, r2
 8021782:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8021784:	9306      	str	r3, [sp, #24]
 8021786:	4613      	mov	r3, r2
 8021788:	f73f ae7a 	bgt.w	8021480 <st_sssa8_ch_convolve_rgb+0x4b4>
 802178c:	e6f9      	b.n	8021582 <st_sssa8_ch_convolve_rgb+0x5b6>
 802178e:	2900      	cmp	r1, #0
 8021790:	dd0d      	ble.n	80217ae <st_sssa8_ch_convolve_rgb+0x7e2>
 8021792:	005b      	lsls	r3, r3, #1
 8021794:	fb53 4305 	smmla	r3, r3, r5, r4
 8021798:	fa43 f101 	asr.w	r1, r3, r1
 802179c:	f301 0307 	ssat	r3, #8, r1
 80217a0:	f809 3c01 	strb.w	r3, [r9, #-1]
 80217a4:	e77e      	b.n	80216a4 <st_sssa8_ch_convolve_rgb+0x6d8>
 80217a6:	3002      	adds	r0, #2
 80217a8:	e763      	b.n	8021672 <st_sssa8_ch_convolve_rgb+0x6a6>
 80217aa:	3001      	adds	r0, #1
 80217ac:	e761      	b.n	8021672 <st_sssa8_ch_convolve_rgb+0x6a6>
 80217ae:	f1c1 0101 	rsb	r1, r1, #1
 80217b2:	408b      	lsls	r3, r1
 80217b4:	f303 031f 	ssat	r3, #32, r3
 80217b8:	fb53 f315 	smmulr	r3, r3, r5
 80217bc:	4423      	add	r3, r4
 80217be:	f303 0307 	ssat	r3, #8, r3
 80217c2:	f809 3c01 	strb.w	r3, [r9, #-1]
 80217c6:	e76d      	b.n	80216a4 <st_sssa8_ch_convolve_rgb+0x6d8>
 80217c8:	4602      	mov	r2, r0
 80217ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80217cc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80217ce:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80217d0:	f001 f8c2 	bl	8022958 <st_int8_to16_dual>
 80217d4:	2301      	movs	r3, #1
 80217d6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80217d8:	9328      	str	r3, [sp, #160]	; 0xa0
 80217da:	e474      	b.n	80210c6 <st_sssa8_ch_convolve_rgb+0xfa>
 80217dc:	9c22      	ldr	r4, [sp, #136]	; 0x88
 80217de:	9f15      	ldr	r7, [sp, #84]	; 0x54
 80217e0:	e445      	b.n	802106e <st_sssa8_ch_convolve_rgb+0xa2>
 80217e2:	f06f 0002 	mvn.w	r0, #2
 80217e6:	e618      	b.n	802141a <st_sssa8_ch_convolve_rgb+0x44e>
 80217e8:	ffff0000 	.word	0xffff0000

080217ec <st_sssa8_ch_convolve_1x1_WeightsPrefetch>:
 80217ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80217ee:	f06f 0509 	mvn.w	r5, #9
 80217f2:	685f      	ldr	r7, [r3, #4]
 80217f4:	fb02 f601 	mul.w	r6, r2, r1
 80217f8:	fb05 7501 	mla	r5, r5, r1, r7
 80217fc:	ebb5 0f46 	cmp.w	r5, r6, lsl #1
 8021800:	db06      	blt.n	8021810 <st_sssa8_ch_convolve_1x1_WeightsPrefetch+0x24>
 8021802:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 8021806:	681b      	ldr	r3, [r3, #0]
 8021808:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802180c:	f001 fa12 	bl	8022c34 <st_sssa8_ch_fullW_prefetch>
 8021810:	2000      	movs	r0, #0
 8021812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08021814 <st_sssa8_ch_convolve_1x1>:
 8021814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021818:	b091      	sub	sp, #68	; 0x44
 802181a:	469a      	mov	sl, r3
 802181c:	f8bd 5070 	ldrh.w	r5, [sp, #112]	; 0x70
 8021820:	f99d 3094 	ldrsb.w	r3, [sp, #148]	; 0x94
 8021824:	2d01      	cmp	r5, #1
 8021826:	920d      	str	r2, [sp, #52]	; 0x34
 8021828:	930e      	str	r3, [sp, #56]	; 0x38
 802182a:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 802182e:	f8bd 6078 	ldrh.w	r6, [sp, #120]	; 0x78
 8021832:	f8bd c080 	ldrh.w	ip, [sp, #128]	; 0x80
 8021836:	f8bd e084 	ldrh.w	lr, [sp, #132]	; 0x84
 802183a:	9c24      	ldr	r4, [sp, #144]	; 0x90
 802183c:	f99d 3098 	ldrsb.w	r3, [sp, #152]	; 0x98
 8021840:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8021842:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
 8021846:	f8bd 1074 	ldrh.w	r1, [sp, #116]	; 0x74
 802184a:	f8bd 007c 	ldrh.w	r0, [sp, #124]	; 0x7c
 802184e:	d165      	bne.n	802191c <st_sssa8_ch_convolve_1x1+0x108>
 8021850:	2901      	cmp	r1, #1
 8021852:	d163      	bne.n	802191c <st_sssa8_ch_convolve_1x1+0x108>
 8021854:	ea56 0100 	orrs.w	r1, r6, r0
 8021858:	d160      	bne.n	802191c <st_sssa8_ch_convolve_1x1+0x108>
 802185a:	f1bc 0f01 	cmp.w	ip, #1
 802185e:	d15d      	bne.n	802191c <st_sssa8_ch_convolve_1x1+0x108>
 8021860:	f1be 0f01 	cmp.w	lr, #1
 8021864:	d15a      	bne.n	802191c <st_sssa8_ch_convolve_1x1+0x108>
 8021866:	ea4f 0987 	mov.w	r9, r7, lsl #2
 802186a:	ebc7 7c87 	rsb	ip, r7, r7, lsl #30
 802186e:	eb09 0807 	add.w	r8, r9, r7
 8021872:	e9d2 1200 	ldrd	r1, r2, [r2]
 8021876:	eb01 0848 	add.w	r8, r1, r8, lsl #1
 802187a:	920f      	str	r2, [sp, #60]	; 0x3c
 802187c:	eb08 0c8c 	add.w	ip, r8, ip, lsl #2
 8021880:	2f00      	cmp	r7, #0
 8021882:	d048      	beq.n	8021916 <st_sssa8_ch_convolve_1x1+0x102>
 8021884:	ea4f 0b47 	mov.w	fp, r7, lsl #1
 8021888:	f1ac 0604 	sub.w	r6, ip, #4
 802188c:	f04f 0e01 	mov.w	lr, #1
 8021890:	eb04 050b 	add.w	r5, r4, fp
 8021894:	f934 2b02 	ldrsh.w	r2, [r4], #2
 8021898:	1e51      	subs	r1, r2, #1
 802189a:	fa0e f002 	lsl.w	r0, lr, r2
 802189e:	fa03 f202 	lsl.w	r2, r3, r2
 80218a2:	b289      	uxth	r1, r1
 80218a4:	eb02 0250 	add.w	r2, r2, r0, lsr #1
 80218a8:	2914      	cmp	r1, #20
 80218aa:	d82f      	bhi.n	802190c <st_sssa8_ch_convolve_1x1+0xf8>
 80218ac:	42a5      	cmp	r5, r4
 80218ae:	f846 2f04 	str.w	r2, [r6, #4]!
 80218b2:	d1ef      	bne.n	8021894 <st_sssa8_ch_convolve_1x1+0x80>
 80218b4:	462c      	mov	r4, r5
 80218b6:	44cc      	add	ip, r9
 80218b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80218ba:	f06f 0e09 	mvn.w	lr, #9
 80218be:	fb07 f50a 	mul.w	r5, r7, sl
 80218c2:	ebac 0609 	sub.w	r6, ip, r9
 80218c6:	eba4 040b 	sub.w	r4, r4, fp
 80218ca:	fb0e 3c07 	mla	ip, lr, r7, r3
 80218ce:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80218d0:	9401      	str	r4, [sp, #4]
 80218d2:	ebbc 0f45 	cmp.w	ip, r5, lsl #1
 80218d6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80218d8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80218da:	bfac      	ite	ge
 80218dc:	4644      	movge	r4, r8
 80218de:	2400      	movlt	r4, #0
 80218e0:	9606      	str	r6, [sp, #24]
 80218e2:	f8cd 801c 	str.w	r8, [sp, #28]
 80218e6:	9703      	str	r7, [sp, #12]
 80218e8:	9408      	str	r4, [sp, #32]
 80218ea:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 80218ee:	e9cd a504 	strd	sl, r5, [sp, #16]
 80218f2:	fb02 f101 	mul.w	r1, r2, r1
 80218f6:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 80218f8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80218fa:	9102      	str	r1, [sp, #8]
 80218fc:	9500      	str	r5, [sp, #0]
 80218fe:	991a      	ldr	r1, [sp, #104]	; 0x68
 8021900:	f001 fa98 	bl	8022e34 <st_sssa8_ch_nn_mat_mult_nt_t>
 8021904:	2000      	movs	r0, #0
 8021906:	b011      	add	sp, #68	; 0x44
 8021908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802190c:	42a5      	cmp	r5, r4
 802190e:	f846 3f04 	str.w	r3, [r6, #4]!
 8021912:	d1bf      	bne.n	8021894 <st_sssa8_ch_convolve_1x1+0x80>
 8021914:	e7ce      	b.n	80218b4 <st_sssa8_ch_convolve_1x1+0xa0>
 8021916:	46bb      	mov	fp, r7
 8021918:	4613      	mov	r3, r2
 802191a:	e7ce      	b.n	80218ba <st_sssa8_ch_convolve_1x1+0xa6>
 802191c:	f06f 0002 	mvn.w	r0, #2
 8021920:	e7f1      	b.n	8021906 <st_sssa8_ch_convolve_1x1+0xf2>
 8021922:	bf00      	nop

08021924 <st_sssa8_fully_connected>:
 8021924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021928:	b097      	sub	sp, #92	; 0x5c
 802192a:	4688      	mov	r8, r1
 802192c:	e9dd 4520 	ldrd	r4, r5, [sp, #128]	; 0x80
 8021930:	9312      	str	r3, [sp, #72]	; 0x48
 8021932:	f9b5 1000 	ldrsh.w	r1, [r5]
 8021936:	6823      	ldr	r3, [r4, #0]
 8021938:	9204      	str	r2, [sp, #16]
 802193a:	460c      	mov	r4, r1
 802193c:	9309      	str	r3, [sp, #36]	; 0x24
 802193e:	1e4b      	subs	r3, r1, #1
 8021940:	9108      	str	r1, [sp, #32]
 8021942:	461a      	mov	r2, r3
 8021944:	f99d 108c 	ldrsb.w	r1, [sp, #140]	; 0x8c
 8021948:	930d      	str	r3, [sp, #52]	; 0x34
 802194a:	b292      	uxth	r2, r2
 802194c:	f99d 3088 	ldrsb.w	r3, [sp, #136]	; 0x88
 8021950:	9107      	str	r1, [sp, #28]
 8021952:	2a14      	cmp	r2, #20
 8021954:	d805      	bhi.n	8021962 <st_sssa8_fully_connected+0x3e>
 8021956:	2201      	movs	r2, #1
 8021958:	40a1      	lsls	r1, r4
 802195a:	40a2      	lsls	r2, r4
 802195c:	eb01 0252 	add.w	r2, r1, r2, lsr #1
 8021960:	9207      	str	r2, [sp, #28]
 8021962:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8021964:	2a00      	cmp	r2, #0
 8021966:	f000 81e4 	beq.w	8021d32 <st_sssa8_fully_connected+0x40e>
 802196a:	9912      	ldr	r1, [sp, #72]	; 0x48
 802196c:	b29a      	uxth	r2, r3
 802196e:	9d04      	ldr	r5, [sp, #16]
 8021970:	084c      	lsrs	r4, r1, #1
 8021972:	9300      	str	r3, [sp, #0]
 8021974:	9926      	ldr	r1, [sp, #152]	; 0x98
 8021976:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 802197a:	462a      	mov	r2, r5
 802197c:	f001 ff70 	bl	8023860 <st_int8_reordered_no_shift_zero>
 8021980:	2c00      	cmp	r4, #0
 8021982:	f000 813f 	beq.w	8021c04 <st_sssa8_fully_connected+0x2e0>
 8021986:	3c01      	subs	r4, #1
 8021988:	9a24      	ldr	r2, [sp, #144]	; 0x90
 802198a:	f1a5 0310 	sub.w	r3, r5, #16
 802198e:	2001      	movs	r0, #1
 8021990:	b2a7      	uxth	r7, r4
 8021992:	3210      	adds	r2, #16
 8021994:	091b      	lsrs	r3, r3, #4
 8021996:	462c      	mov	r4, r5
 8021998:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
 802199c:	9e08      	ldr	r6, [sp, #32]
 802199e:	4403      	add	r3, r0
 80219a0:	3d03      	subs	r5, #3
 80219a2:	920e      	str	r2, [sp, #56]	; 0x38
 80219a4:	1eb1      	subs	r1, r6, #2
 80219a6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80219a8:	fa00 f101 	lsl.w	r1, r0, r1
 80219ac:	9715      	str	r7, [sp, #84]	; 0x54
 80219ae:	3208      	adds	r2, #8
 80219b0:	950f      	str	r5, [sp, #60]	; 0x3c
 80219b2:	9113      	str	r1, [sp, #76]	; 0x4c
 80219b4:	9205      	str	r2, [sp, #20]
 80219b6:	011a      	lsls	r2, r3, #4
 80219b8:	920a      	str	r2, [sp, #40]	; 0x28
 80219ba:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80219bc:	9206      	str	r2, [sp, #24]
 80219be:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80219c0:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 80219c4:	9310      	str	r3, [sp, #64]	; 0x40
 80219c6:	1f23      	subs	r3, r4, #4
 80219c8:	9311      	str	r3, [sp, #68]	; 0x44
 80219ca:	1b83      	subs	r3, r0, r6
 80219cc:	9314      	str	r3, [sp, #80]	; 0x50
 80219ce:	9b05      	ldr	r3, [sp, #20]
 80219d0:	9a04      	ldr	r2, [sp, #16]
 80219d2:	f853 0c08 	ldr.w	r0, [r3, #-8]
 80219d6:	eb08 0702 	add.w	r7, r8, r2
 80219da:	2a0f      	cmp	r2, #15
 80219dc:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80219e0:	9703      	str	r7, [sp, #12]
 80219e2:	f340 8279 	ble.w	8021ed8 <st_sssa8_fully_connected+0x5b4>
 80219e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80219e8:	9e26      	ldr	r6, [sp, #152]	; 0x98
 80219ea:	eb08 0c02 	add.w	ip, r8, r2
 80219ee:	f8d8 2000 	ldr.w	r2, [r8]
 80219f2:	683d      	ldr	r5, [r7, #0]
 80219f4:	ea4f 2132 	mov.w	r1, r2, ror #8
 80219f8:	6834      	ldr	r4, [r6, #0]
 80219fa:	ea4f 2e35 	mov.w	lr, r5, ror #8
 80219fe:	fa2f f181 	sxtb16	r1, r1
 8021a02:	fa2f f282 	sxtb16	r2, r2
 8021a06:	fa2f f585 	sxtb16	r5, r5
 8021a0a:	fa2f fe8e 	sxtb16	lr, lr
 8021a0e:	fb24 0002 	smlad	r0, r4, r2, r0
 8021a12:	fb24 3305 	smlad	r3, r4, r5, r3
 8021a16:	6872      	ldr	r2, [r6, #4]
 8021a18:	fb22 0001 	smlad	r0, r2, r1, r0
 8021a1c:	fb22 3e0e 	smlad	lr, r2, lr, r3
 8021a20:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8021a24:	687d      	ldr	r5, [r7, #4]
 8021a26:	ea4f 2331 	mov.w	r3, r1, ror #8
 8021a2a:	68b2      	ldr	r2, [r6, #8]
 8021a2c:	ea4f 2935 	mov.w	r9, r5, ror #8
 8021a30:	fa2f f383 	sxtb16	r3, r3
 8021a34:	fa2f f181 	sxtb16	r1, r1
 8021a38:	fa2f f585 	sxtb16	r5, r5
 8021a3c:	fa2f f989 	sxtb16	r9, r9
 8021a40:	fb22 0101 	smlad	r1, r2, r1, r0
 8021a44:	fb22 e205 	smlad	r2, r2, r5, lr
 8021a48:	68f4      	ldr	r4, [r6, #12]
 8021a4a:	fb24 1103 	smlad	r1, r4, r3, r1
 8021a4e:	fb24 2209 	smlad	r2, r4, r9, r2
 8021a52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8021a56:	68bd      	ldr	r5, [r7, #8]
 8021a58:	ea4f 2033 	mov.w	r0, r3, ror #8
 8021a5c:	6934      	ldr	r4, [r6, #16]
 8021a5e:	ea4f 2e35 	mov.w	lr, r5, ror #8
 8021a62:	fa2f f080 	sxtb16	r0, r0
 8021a66:	fa2f f383 	sxtb16	r3, r3
 8021a6a:	fa2f f585 	sxtb16	r5, r5
 8021a6e:	fa2f fe8e 	sxtb16	lr, lr
 8021a72:	fb24 1303 	smlad	r3, r4, r3, r1
 8021a76:	fb24 2405 	smlad	r4, r4, r5, r2
 8021a7a:	6971      	ldr	r1, [r6, #20]
 8021a7c:	fb21 3300 	smlad	r3, r1, r0, r3
 8021a80:	fb21 4e0e 	smlad	lr, r1, lr, r4
 8021a84:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8021a88:	3710      	adds	r7, #16
 8021a8a:	f857 4c04 	ldr.w	r4, [r7, #-4]
 8021a8e:	f108 0810 	add.w	r8, r8, #16
 8021a92:	ea4f 2032 	mov.w	r0, r2, ror #8
 8021a96:	69b1      	ldr	r1, [r6, #24]
 8021a98:	fa2f f580 	sxtb16	r5, r0
 8021a9c:	fa2f f082 	sxtb16	r0, r2
 8021aa0:	ea4f 2234 	mov.w	r2, r4, ror #8
 8021aa4:	fa2f f484 	sxtb16	r4, r4
 8021aa8:	fa2f f282 	sxtb16	r2, r2
 8021aac:	fb21 3000 	smlad	r0, r1, r0, r3
 8021ab0:	fb21 e104 	smlad	r1, r1, r4, lr
 8021ab4:	69f3      	ldr	r3, [r6, #28]
 8021ab6:	3620      	adds	r6, #32
 8021ab8:	fb23 0005 	smlad	r0, r3, r5, r0
 8021abc:	fb23 1302 	smlad	r3, r3, r2, r1
 8021ac0:	45e0      	cmp	r8, ip
 8021ac2:	d194      	bne.n	80219ee <st_sssa8_fully_connected+0xca>
 8021ac4:	9903      	ldr	r1, [sp, #12]
 8021ac6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021ac8:	460c      	mov	r4, r1
 8021aca:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 8021ace:	4696      	mov	lr, r2
 8021ad0:	4414      	add	r4, r2
 8021ad2:	9403      	str	r4, [sp, #12]
 8021ad4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021ad6:	4596      	cmp	lr, r2
 8021ad8:	da35      	bge.n	8021b46 <st_sssa8_fully_connected+0x222>
 8021ada:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021adc:	4655      	mov	r5, sl
 8021ade:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8021ae2:	eba2 020e 	sub.w	r2, r2, lr
 8021ae6:	0892      	lsrs	r2, r2, #2
 8021ae8:	920c      	str	r2, [sp, #48]	; 0x30
 8021aea:	3201      	adds	r2, #1
 8021aec:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8021af0:	920b      	str	r2, [sp, #44]	; 0x2c
 8021af2:	eb08 090b 	add.w	r9, r8, fp
 8021af6:	f858 7b04 	ldr.w	r7, [r8], #4
 8021afa:	f85c 1b04 	ldr.w	r1, [ip], #4
 8021afe:	ea4f 2637 	mov.w	r6, r7, ror #8
 8021b02:	682a      	ldr	r2, [r5, #0]
 8021b04:	ea4f 2431 	mov.w	r4, r1, ror #8
 8021b08:	fa2f f686 	sxtb16	r6, r6
 8021b0c:	fa2f f787 	sxtb16	r7, r7
 8021b10:	fa2f f181 	sxtb16	r1, r1
 8021b14:	fa2f f484 	sxtb16	r4, r4
 8021b18:	fb22 0007 	smlad	r0, r2, r7, r0
 8021b1c:	fb22 3301 	smlad	r3, r2, r1, r3
 8021b20:	686a      	ldr	r2, [r5, #4]
 8021b22:	3508      	adds	r5, #8
 8021b24:	fb22 0006 	smlad	r0, r2, r6, r0
 8021b28:	fb22 3304 	smlad	r3, r2, r4, r3
 8021b2c:	45c8      	cmp	r8, r9
 8021b2e:	d1e2      	bne.n	8021af6 <st_sssa8_fully_connected+0x1d2>
 8021b30:	9a03      	ldr	r2, [sp, #12]
 8021b32:	f10e 0e04 	add.w	lr, lr, #4
 8021b36:	445a      	add	r2, fp
 8021b38:	9203      	str	r2, [sp, #12]
 8021b3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021b3c:	eb0a 0ac2 	add.w	sl, sl, r2, lsl #3
 8021b40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021b42:	eb0e 0e82 	add.w	lr, lr, r2, lsl #2
 8021b46:	9e04      	ldr	r6, [sp, #16]
 8021b48:	45b6      	cmp	lr, r6
 8021b4a:	da2d      	bge.n	8021ba8 <st_sssa8_fully_connected+0x284>
 8021b4c:	f10e 0201 	add.w	r2, lr, #1
 8021b50:	9c03      	ldr	r4, [sp, #12]
 8021b52:	f9ba 1000 	ldrsh.w	r1, [sl]
 8021b56:	f998 5000 	ldrsb.w	r5, [r8]
 8021b5a:	4296      	cmp	r6, r2
 8021b5c:	f994 4000 	ldrsb.w	r4, [r4]
 8021b60:	fb11 0005 	smlabb	r0, r1, r5, r0
 8021b64:	fb11 3304 	smlabb	r3, r1, r4, r3
 8021b68:	f340 80c6 	ble.w	8021cf8 <st_sssa8_fully_connected+0x3d4>
 8021b6c:	9903      	ldr	r1, [sp, #12]
 8021b6e:	f10e 0e02 	add.w	lr, lr, #2
 8021b72:	f9ba 2002 	ldrsh.w	r2, [sl, #2]
 8021b76:	f998 4001 	ldrsb.w	r4, [r8, #1]
 8021b7a:	f991 1001 	ldrsb.w	r1, [r1, #1]
 8021b7e:	fb12 0004 	smlabb	r0, r2, r4, r0
 8021b82:	fb12 3301 	smlabb	r3, r2, r1, r3
 8021b86:	9a04      	ldr	r2, [sp, #16]
 8021b88:	4572      	cmp	r2, lr
 8021b8a:	f340 81aa 	ble.w	8021ee2 <st_sssa8_fully_connected+0x5be>
 8021b8e:	9903      	ldr	r1, [sp, #12]
 8021b90:	f108 0803 	add.w	r8, r8, #3
 8021b94:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
 8021b98:	f991 4002 	ldrsb.w	r4, [r1, #2]
 8021b9c:	f918 1c01 	ldrsb.w	r1, [r8, #-1]
 8021ba0:	fb12 3304 	smlabb	r3, r2, r4, r3
 8021ba4:	fb12 0001 	smlabb	r0, r2, r1, r0
 8021ba8:	9a06      	ldr	r2, [sp, #24]
 8021baa:	9908      	ldr	r1, [sp, #32]
 8021bac:	3202      	adds	r2, #2
 8021bae:	2915      	cmp	r1, #21
 8021bb0:	9206      	str	r2, [sp, #24]
 8021bb2:	f340 808a 	ble.w	8021cca <st_sssa8_fully_connected+0x3a6>
 8021bb6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021bb8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8021bba:	9909      	ldr	r1, [sp, #36]	; 0x24
 8021bbc:	fb50 5001 	smmla	r0, r0, r1, r5
 8021bc0:	fb53 5301 	smmla	r3, r3, r1, r5
 8021bc4:	4120      	asrs	r0, r4
 8021bc6:	9d07      	ldr	r5, [sp, #28]
 8021bc8:	4428      	add	r0, r5
 8021bca:	f300 0007 	ssat	r0, #8, r0
 8021bce:	4123      	asrs	r3, r4
 8021bd0:	f802 0c02 	strb.w	r0, [r2, #-2]
 8021bd4:	442b      	add	r3, r5
 8021bd6:	f303 0307 	ssat	r3, #8, r3
 8021bda:	f802 3c01 	strb.w	r3, [r2, #-1]
 8021bde:	9b05      	ldr	r3, [sp, #20]
 8021be0:	9a04      	ldr	r2, [sp, #16]
 8021be2:	3308      	adds	r3, #8
 8021be4:	4490      	add	r8, r2
 8021be6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021be8:	9305      	str	r3, [sp, #20]
 8021bea:	429a      	cmp	r2, r3
 8021bec:	f47f aef0 	bne.w	80219d0 <st_sssa8_fully_connected+0xac>
 8021bf0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021bf2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021bf4:	3401      	adds	r4, #1
 8021bf6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8021bfa:	9324      	str	r3, [sp, #144]	; 0x90
 8021bfc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8021bfe:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8021c02:	9325      	str	r3, [sp, #148]	; 0x94
 8021c04:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021c06:	07db      	lsls	r3, r3, #31
 8021c08:	d54a      	bpl.n	8021ca0 <st_sssa8_fully_connected+0x37c>
 8021c0a:	9a04      	ldr	r2, [sp, #16]
 8021c0c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021c0e:	0892      	lsrs	r2, r2, #2
 8021c10:	681b      	ldr	r3, [r3, #0]
 8021c12:	d01a      	beq.n	8021c4a <st_sssa8_fully_connected+0x326>
 8021c14:	1e55      	subs	r5, r2, #1
 8021c16:	9826      	ldr	r0, [sp, #152]	; 0x98
 8021c18:	b2ad      	uxth	r5, r5
 8021c1a:	3501      	adds	r5, #1
 8021c1c:	eb08 0685 	add.w	r6, r8, r5, lsl #2
 8021c20:	f858 2b04 	ldr.w	r2, [r8], #4
 8021c24:	6804      	ldr	r4, [r0, #0]
 8021c26:	ea4f 2132 	mov.w	r1, r2, ror #8
 8021c2a:	fa2f f282 	sxtb16	r2, r2
 8021c2e:	fa2f f181 	sxtb16	r1, r1
 8021c32:	fb24 3202 	smlad	r2, r4, r2, r3
 8021c36:	6843      	ldr	r3, [r0, #4]
 8021c38:	3008      	adds	r0, #8
 8021c3a:	fb23 2301 	smlad	r3, r3, r1, r2
 8021c3e:	45b0      	cmp	r8, r6
 8021c40:	d1ee      	bne.n	8021c20 <st_sssa8_fully_connected+0x2fc>
 8021c42:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8021c44:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8021c48:	9226      	str	r2, [sp, #152]	; 0x98
 8021c4a:	9a04      	ldr	r2, [sp, #16]
 8021c4c:	f012 0203 	ands.w	r2, r2, #3
 8021c50:	d015      	beq.n	8021c7e <st_sssa8_fully_connected+0x35a>
 8021c52:	9826      	ldr	r0, [sp, #152]	; 0x98
 8021c54:	2a01      	cmp	r2, #1
 8021c56:	f998 1000 	ldrsb.w	r1, [r8]
 8021c5a:	8800      	ldrh	r0, [r0, #0]
 8021c5c:	fb10 3301 	smlabb	r3, r0, r1, r3
 8021c60:	d00d      	beq.n	8021c7e <st_sssa8_fully_connected+0x35a>
 8021c62:	9826      	ldr	r0, [sp, #152]	; 0x98
 8021c64:	2a02      	cmp	r2, #2
 8021c66:	f998 1001 	ldrsb.w	r1, [r8, #1]
 8021c6a:	8840      	ldrh	r0, [r0, #2]
 8021c6c:	fb10 3301 	smlabb	r3, r0, r1, r3
 8021c70:	d005      	beq.n	8021c7e <st_sssa8_fully_connected+0x35a>
 8021c72:	9926      	ldr	r1, [sp, #152]	; 0x98
 8021c74:	f998 2002 	ldrsb.w	r2, [r8, #2]
 8021c78:	8889      	ldrh	r1, [r1, #4]
 8021c7a:	fb11 3302 	smlabb	r3, r1, r2, r3
 8021c7e:	9a08      	ldr	r2, [sp, #32]
 8021c80:	2a15      	cmp	r2, #21
 8021c82:	dd11      	ble.n	8021ca8 <st_sssa8_fully_connected+0x384>
 8021c84:	1e91      	subs	r1, r2, #2
 8021c86:	2201      	movs	r2, #1
 8021c88:	408a      	lsls	r2, r1
 8021c8a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8021c8c:	fb53 2301 	smmla	r3, r3, r1, r2
 8021c90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021c92:	4113      	asrs	r3, r2
 8021c94:	9a07      	ldr	r2, [sp, #28]
 8021c96:	4413      	add	r3, r2
 8021c98:	f303 0307 	ssat	r3, #8, r3
 8021c9c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8021c9e:	7013      	strb	r3, [r2, #0]
 8021ca0:	2000      	movs	r0, #0
 8021ca2:	b017      	add	sp, #92	; 0x5c
 8021ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021ca8:	2a00      	cmp	r2, #0
 8021caa:	f340 811d 	ble.w	8021ee8 <st_sssa8_fully_connected+0x5c4>
 8021cae:	9909      	ldr	r1, [sp, #36]	; 0x24
 8021cb0:	005b      	lsls	r3, r3, #1
 8021cb2:	9807      	ldr	r0, [sp, #28]
 8021cb4:	fb53 0301 	smmla	r3, r3, r1, r0
 8021cb8:	4113      	asrs	r3, r2
 8021cba:	f303 0307 	ssat	r3, #8, r3
 8021cbe:	2000      	movs	r0, #0
 8021cc0:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8021cc2:	7013      	strb	r3, [r2, #0]
 8021cc4:	b017      	add	sp, #92	; 0x5c
 8021cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021cca:	2900      	cmp	r1, #0
 8021ccc:	460a      	mov	r2, r1
 8021cce:	dd16      	ble.n	8021cfe <st_sssa8_fully_connected+0x3da>
 8021cd0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8021cd2:	0040      	lsls	r0, r0, #1
 8021cd4:	9d07      	ldr	r5, [sp, #28]
 8021cd6:	005b      	lsls	r3, r3, #1
 8021cd8:	fb50 5001 	smmla	r0, r0, r1, r5
 8021cdc:	fb53 5301 	smmla	r3, r3, r1, r5
 8021ce0:	4110      	asrs	r0, r2
 8021ce2:	f300 0007 	ssat	r0, #8, r0
 8021ce6:	9906      	ldr	r1, [sp, #24]
 8021ce8:	4113      	asrs	r3, r2
 8021cea:	f801 0c02 	strb.w	r0, [r1, #-2]
 8021cee:	f303 0307 	ssat	r3, #8, r3
 8021cf2:	f801 3c01 	strb.w	r3, [r1, #-1]
 8021cf6:	e772      	b.n	8021bde <st_sssa8_fully_connected+0x2ba>
 8021cf8:	f108 0801 	add.w	r8, r8, #1
 8021cfc:	e754      	b.n	8021ba8 <st_sssa8_fully_connected+0x284>
 8021cfe:	9914      	ldr	r1, [sp, #80]	; 0x50
 8021d00:	fa00 f201 	lsl.w	r2, r0, r1
 8021d04:	f302 021f 	ssat	r2, #32, r2
 8021d08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021d0a:	fb52 f210 	smmulr	r2, r2, r0
 8021d0e:	408b      	lsls	r3, r1
 8021d10:	f303 031f 	ssat	r3, #32, r3
 8021d14:	fb53 f310 	smmulr	r3, r3, r0
 8021d18:	9907      	ldr	r1, [sp, #28]
 8021d1a:	440a      	add	r2, r1
 8021d1c:	f302 0207 	ssat	r2, #8, r2
 8021d20:	9806      	ldr	r0, [sp, #24]
 8021d22:	440b      	add	r3, r1
 8021d24:	f800 2c02 	strb.w	r2, [r0, #-2]
 8021d28:	f303 0307 	ssat	r3, #8, r3
 8021d2c:	f800 3c01 	strb.w	r3, [r0, #-1]
 8021d30:	e755      	b.n	8021bde <st_sssa8_fully_connected+0x2ba>
 8021d32:	425a      	negs	r2, r3
 8021d34:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8021d36:	b296      	uxth	r6, r2
 8021d38:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8021d3c:	2f00      	cmp	r7, #0
 8021d3e:	d0af      	beq.n	8021ca0 <st_sssa8_fully_connected+0x37c>
 8021d40:	9d08      	ldr	r5, [sp, #32]
 8021d42:	46bc      	mov	ip, r7
 8021d44:	9a04      	ldr	r2, [sp, #16]
 8021d46:	2101      	movs	r1, #1
 8021d48:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8021d4a:	46ab      	mov	fp, r5
 8021d4c:	f1a2 0410 	sub.w	r4, r2, #16
 8021d50:	1eaa      	subs	r2, r5, #2
 8021d52:	44bc      	add	ip, r7
 8021d54:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8021d58:	f024 040f 	bic.w	r4, r4, #15
 8021d5c:	9006      	str	r0, [sp, #24]
 8021d5e:	f8cd c014 	str.w	ip, [sp, #20]
 8021d62:	fa0f fc83 	sxth.w	ip, r3
 8021d66:	fa01 f302 	lsl.w	r3, r1, r2
 8021d6a:	f1b9 0f0f 	cmp.w	r9, #15
 8021d6e:	930a      	str	r3, [sp, #40]	; 0x28
 8021d70:	eba1 0305 	sub.w	r3, r1, r5
 8021d74:	930b      	str	r3, [sp, #44]	; 0x2c
 8021d76:	f104 0310 	add.w	r3, r4, #16
 8021d7a:	e9dd ae24 	ldrd	sl, lr, [sp, #144]	; 0x90
 8021d7e:	9303      	str	r3, [sp, #12]
 8021d80:	4403      	add	r3, r0
 8021d82:	9308      	str	r3, [sp, #32]
 8021d84:	f85a 3b04 	ldr.w	r3, [sl], #4
 8021d88:	f340 8086 	ble.w	8021e98 <st_sssa8_fully_connected+0x574>
 8021d8c:	9a03      	ldr	r2, [sp, #12]
 8021d8e:	9d06      	ldr	r5, [sp, #24]
 8021d90:	eb08 0702 	add.w	r7, r8, r2
 8021d94:	f8d8 4000 	ldr.w	r4, [r8]
 8021d98:	682a      	ldr	r2, [r5, #0]
 8021d9a:	ea4f 2034 	mov.w	r0, r4, ror #8
 8021d9e:	ea4f 2132 	mov.w	r1, r2, ror #8
 8021da2:	fa2f f484 	sxtb16	r4, r4
 8021da6:	fa2f f080 	sxtb16	r0, r0
 8021daa:	fa26 f282 	sxtab16	r2, r6, r2
 8021dae:	fa26 f181 	sxtab16	r1, r6, r1
 8021db2:	fb22 3304 	smlad	r3, r2, r4, r3
 8021db6:	fb21 3200 	smlad	r2, r1, r0, r3
 8021dba:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8021dbe:	686b      	ldr	r3, [r5, #4]
 8021dc0:	ea4f 2034 	mov.w	r0, r4, ror #8
 8021dc4:	ea4f 2133 	mov.w	r1, r3, ror #8
 8021dc8:	fa2f f484 	sxtb16	r4, r4
 8021dcc:	fa2f f080 	sxtb16	r0, r0
 8021dd0:	fa26 f383 	sxtab16	r3, r6, r3
 8021dd4:	fa26 f181 	sxtab16	r1, r6, r1
 8021dd8:	fb23 2204 	smlad	r2, r3, r4, r2
 8021ddc:	fb21 2300 	smlad	r3, r1, r0, r2
 8021de0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8021de4:	68a9      	ldr	r1, [r5, #8]
 8021de6:	ea4f 2034 	mov.w	r0, r4, ror #8
 8021dea:	ea4f 2231 	mov.w	r2, r1, ror #8
 8021dee:	fa2f f484 	sxtb16	r4, r4
 8021df2:	fa2f f080 	sxtb16	r0, r0
 8021df6:	fa26 f181 	sxtab16	r1, r6, r1
 8021dfa:	fa26 f282 	sxtab16	r2, r6, r2
 8021dfe:	fb21 3304 	smlad	r3, r1, r4, r3
 8021e02:	fb22 3100 	smlad	r1, r2, r0, r3
 8021e06:	f8d8 400c 	ldr.w	r4, [r8, #12]
 8021e0a:	3510      	adds	r5, #16
 8021e0c:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8021e10:	f108 0810 	add.w	r8, r8, #16
 8021e14:	ea4f 2034 	mov.w	r0, r4, ror #8
 8021e18:	ea4f 2233 	mov.w	r2, r3, ror #8
 8021e1c:	fa2f f484 	sxtb16	r4, r4
 8021e20:	fa2f f080 	sxtb16	r0, r0
 8021e24:	fa26 f383 	sxtab16	r3, r6, r3
 8021e28:	fa26 f282 	sxtab16	r2, r6, r2
 8021e2c:	fb23 1304 	smlad	r3, r3, r4, r1
 8021e30:	fb22 3300 	smlad	r3, r2, r0, r3
 8021e34:	45b8      	cmp	r8, r7
 8021e36:	d1ad      	bne.n	8021d94 <st_sssa8_fully_connected+0x470>
 8021e38:	9808      	ldr	r0, [sp, #32]
 8021e3a:	9d03      	ldr	r5, [sp, #12]
 8021e3c:	454d      	cmp	r5, r9
 8021e3e:	da10      	bge.n	8021e62 <st_sssa8_fully_connected+0x53e>
 8021e40:	eba9 0505 	sub.w	r5, r9, r5
 8021e44:	4644      	mov	r4, r8
 8021e46:	4445      	add	r5, r8
 8021e48:	7822      	ldrb	r2, [r4, #0]
 8021e4a:	f108 0801 	add.w	r8, r8, #1
 8021e4e:	f910 1b01 	ldrsb.w	r1, [r0], #1
 8021e52:	b252      	sxtb	r2, r2
 8021e54:	45a8      	cmp	r8, r5
 8021e56:	eba1 010c 	sub.w	r1, r1, ip
 8021e5a:	4644      	mov	r4, r8
 8021e5c:	fb11 3302 	smlabb	r3, r1, r2, r3
 8021e60:	d1f2      	bne.n	8021e48 <st_sssa8_fully_connected+0x524>
 8021e62:	f1bb 0f15 	cmp.w	fp, #21
 8021e66:	f10e 0e01 	add.w	lr, lr, #1
 8021e6a:	dd18      	ble.n	8021e9e <st_sssa8_fully_connected+0x57a>
 8021e6c:	e9dd 2109 	ldrd	r2, r1, [sp, #36]	; 0x24
 8021e70:	fb53 1302 	smmla	r3, r3, r2, r1
 8021e74:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021e76:	4113      	asrs	r3, r2
 8021e78:	9a07      	ldr	r2, [sp, #28]
 8021e7a:	4413      	add	r3, r2
 8021e7c:	f303 0307 	ssat	r3, #8, r3
 8021e80:	f80e 3c01 	strb.w	r3, [lr, #-1]
 8021e84:	9b05      	ldr	r3, [sp, #20]
 8021e86:	4573      	cmp	r3, lr
 8021e88:	f43f af0a 	beq.w	8021ca0 <st_sssa8_fully_connected+0x37c>
 8021e8c:	f1b9 0f0f 	cmp.w	r9, #15
 8021e90:	f85a 3b04 	ldr.w	r3, [sl], #4
 8021e94:	f73f af7a 	bgt.w	8021d8c <st_sssa8_fully_connected+0x468>
 8021e98:	9806      	ldr	r0, [sp, #24]
 8021e9a:	2500      	movs	r5, #0
 8021e9c:	e7ce      	b.n	8021e3c <st_sssa8_fully_connected+0x518>
 8021e9e:	f1bb 0f00 	cmp.w	fp, #0
 8021ea2:	dd0b      	ble.n	8021ebc <st_sssa8_fully_connected+0x598>
 8021ea4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021ea6:	005b      	lsls	r3, r3, #1
 8021ea8:	9907      	ldr	r1, [sp, #28]
 8021eaa:	fb53 1302 	smmla	r3, r3, r2, r1
 8021eae:	fa43 f30b 	asr.w	r3, r3, fp
 8021eb2:	f303 0307 	ssat	r3, #8, r3
 8021eb6:	f80e 3c01 	strb.w	r3, [lr, #-1]
 8021eba:	e7e3      	b.n	8021e84 <st_sssa8_fully_connected+0x560>
 8021ebc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021ebe:	4093      	lsls	r3, r2
 8021ec0:	f303 031f 	ssat	r3, #32, r3
 8021ec4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021ec6:	fb53 f312 	smmulr	r3, r3, r2
 8021eca:	9a07      	ldr	r2, [sp, #28]
 8021ecc:	4413      	add	r3, r2
 8021ece:	f303 0307 	ssat	r3, #8, r3
 8021ed2:	f80e 3c01 	strb.w	r3, [lr, #-1]
 8021ed6:	e7d5      	b.n	8021e84 <st_sssa8_fully_connected+0x560>
 8021ed8:	f8dd a098 	ldr.w	sl, [sp, #152]	; 0x98
 8021edc:	f04f 0e00 	mov.w	lr, #0
 8021ee0:	e5f8      	b.n	8021ad4 <st_sssa8_fully_connected+0x1b0>
 8021ee2:	f108 0802 	add.w	r8, r8, #2
 8021ee6:	e65f      	b.n	8021ba8 <st_sssa8_fully_connected+0x284>
 8021ee8:	f1c2 0201 	rsb	r2, r2, #1
 8021eec:	4093      	lsls	r3, r2
 8021eee:	f303 031f 	ssat	r3, #32, r3
 8021ef2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021ef4:	fb53 f312 	smmulr	r3, r3, r2
 8021ef8:	9a07      	ldr	r2, [sp, #28]
 8021efa:	441a      	add	r2, r3
 8021efc:	f302 0307 	ssat	r3, #8, r2
 8021f00:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8021f02:	7013      	strb	r3, [r2, #0]
 8021f04:	e6cc      	b.n	8021ca0 <st_sssa8_fully_connected+0x37c>
 8021f06:	bf00      	nop

08021f08 <ai_padding_opt_init>:
 8021f08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021f0c:	2600      	movs	r6, #0
 8021f0e:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8021f12:	e9c0 6600 	strd	r6, r6, [r0]
 8021f16:	6086      	str	r6, [r0, #8]
 8021f18:	689d      	ldr	r5, [r3, #8]
 8021f1a:	690c      	ldr	r4, [r1, #16]
 8021f1c:	42b5      	cmp	r5, r6
 8021f1e:	dd21      	ble.n	8021f64 <ai_padding_opt_init+0x5c>
 8021f20:	4264      	negs	r4, r4
 8021f22:	46b0      	mov	r8, r6
 8021f24:	46b6      	mov	lr, r6
 8021f26:	46b1      	mov	r9, r6
 8021f28:	4637      	mov	r7, r6
 8021f2a:	e00f      	b.n	8021f4c <ai_padding_opt_init+0x44>
 8021f2c:	6895      	ldr	r5, [r2, #8]
 8021f2e:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8021f32:	1b2d      	subs	r5, r5, r4
 8021f34:	42b5      	cmp	r5, r6
 8021f36:	da10      	bge.n	8021f5a <ai_padding_opt_init+0x52>
 8021f38:	f10e 0e01 	add.w	lr, lr, #1
 8021f3c:	f8c0 e008 	str.w	lr, [r0, #8]
 8021f40:	3701      	adds	r7, #1
 8021f42:	689d      	ldr	r5, [r3, #8]
 8021f44:	688e      	ldr	r6, [r1, #8]
 8021f46:	42bd      	cmp	r5, r7
 8021f48:	4434      	add	r4, r6
 8021f4a:	dd0e      	ble.n	8021f6a <ai_padding_opt_init+0x62>
 8021f4c:	2c00      	cmp	r4, #0
 8021f4e:	daed      	bge.n	8021f2c <ai_padding_opt_init+0x24>
 8021f50:	f109 0901 	add.w	r9, r9, #1
 8021f54:	f8c0 9000 	str.w	r9, [r0]
 8021f58:	e7f2      	b.n	8021f40 <ai_padding_opt_init+0x38>
 8021f5a:	f108 0801 	add.w	r8, r8, #1
 8021f5e:	f8c0 8004 	str.w	r8, [r0, #4]
 8021f62:	e7ed      	b.n	8021f40 <ai_padding_opt_init+0x38>
 8021f64:	46b6      	mov	lr, r6
 8021f66:	46b0      	mov	r8, r6
 8021f68:	46b1      	mov	r9, r6
 8021f6a:	2500      	movs	r5, #0
 8021f6c:	e9c0 9803 	strd	r9, r8, [r0, #12]
 8021f70:	e9c0 e505 	strd	lr, r5, [r0, #20]
 8021f74:	e9c0 5507 	strd	r5, r5, [r0, #28]
 8021f78:	685e      	ldr	r6, [r3, #4]
 8021f7a:	694c      	ldr	r4, [r1, #20]
 8021f7c:	42ae      	cmp	r6, r5
 8021f7e:	f1c4 0400 	rsb	r4, r4, #0
 8021f82:	dc0f      	bgt.n	8021fa4 <ai_padding_opt_init+0x9c>
 8021f84:	e018      	b.n	8021fb8 <ai_padding_opt_init+0xb0>
 8021f86:	6856      	ldr	r6, [r2, #4]
 8021f88:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8021f8c:	1b36      	subs	r6, r6, r4
 8021f8e:	42be      	cmp	r6, r7
 8021f90:	da0e      	bge.n	8021fb0 <ai_padding_opt_init+0xa8>
 8021f92:	6a06      	ldr	r6, [r0, #32]
 8021f94:	3601      	adds	r6, #1
 8021f96:	6206      	str	r6, [r0, #32]
 8021f98:	3501      	adds	r5, #1
 8021f9a:	685e      	ldr	r6, [r3, #4]
 8021f9c:	68cf      	ldr	r7, [r1, #12]
 8021f9e:	42ae      	cmp	r6, r5
 8021fa0:	443c      	add	r4, r7
 8021fa2:	dd09      	ble.n	8021fb8 <ai_padding_opt_init+0xb0>
 8021fa4:	2c00      	cmp	r4, #0
 8021fa6:	daee      	bge.n	8021f86 <ai_padding_opt_init+0x7e>
 8021fa8:	6986      	ldr	r6, [r0, #24]
 8021faa:	3601      	adds	r6, #1
 8021fac:	6186      	str	r6, [r0, #24]
 8021fae:	e7f3      	b.n	8021f98 <ai_padding_opt_init+0x90>
 8021fb0:	69c6      	ldr	r6, [r0, #28]
 8021fb2:	3601      	adds	r6, #1
 8021fb4:	61c6      	str	r6, [r0, #28]
 8021fb6:	e7ef      	b.n	8021f98 <ai_padding_opt_init+0x90>
 8021fb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08021fbc <ai_padding_opt_phase1>:
 8021fbc:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
 8021fc0:	b933      	cbnz	r3, 8021fd0 <ai_padding_opt_phase1+0x14>
 8021fc2:	b992      	cbnz	r2, 8021fea <ai_padding_opt_phase1+0x2e>
 8021fc4:	6a03      	ldr	r3, [r0, #32]
 8021fc6:	2201      	movs	r2, #1
 8021fc8:	3b01      	subs	r3, #1
 8021fca:	8482      	strh	r2, [r0, #36]	; 0x24
 8021fcc:	6203      	str	r3, [r0, #32]
 8021fce:	e005      	b.n	8021fdc <ai_padding_opt_phase1+0x20>
 8021fd0:	2a00      	cmp	r2, #0
 8021fd2:	d0f7      	beq.n	8021fc4 <ai_padding_opt_phase1+0x8>
 8021fd4:	3b01      	subs	r3, #1
 8021fd6:	2201      	movs	r2, #1
 8021fd8:	6183      	str	r3, [r0, #24]
 8021fda:	8482      	strh	r2, [r0, #36]	; 0x24
 8021fdc:	6943      	ldr	r3, [r0, #20]
 8021fde:	e9d0 1203 	ldrd	r1, r2, [r0, #12]
 8021fe2:	6083      	str	r3, [r0, #8]
 8021fe4:	e9c0 1200 	strd	r1, r2, [r0]
 8021fe8:	4770      	bx	lr
 8021fea:	3a01      	subs	r2, #1
 8021fec:	8483      	strh	r3, [r0, #36]	; 0x24
 8021fee:	61c2      	str	r2, [r0, #28]
 8021ff0:	e7f4      	b.n	8021fdc <ai_padding_opt_phase1+0x20>
 8021ff2:	bf00      	nop

08021ff4 <st_uint8_fill>:
 8021ff4:	078b      	lsls	r3, r1, #30
 8021ff6:	d008      	beq.n	802200a <st_uint8_fill+0x16>
 8021ff8:	b90a      	cbnz	r2, 8021ffe <st_uint8_fill+0xa>
 8021ffa:	e01f      	b.n	802203c <st_uint8_fill+0x48>
 8021ffc:	b1fa      	cbz	r2, 802203e <st_uint8_fill+0x4a>
 8021ffe:	f801 0b01 	strb.w	r0, [r1], #1
 8022002:	078b      	lsls	r3, r1, #30
 8022004:	f102 32ff 	add.w	r2, r2, #4294967295
 8022008:	d1f8      	bne.n	8021ffc <st_uint8_fill+0x8>
 802200a:	b430      	push	{r4, r5}
 802200c:	0404      	lsls	r4, r0, #16
 802200e:	f002 0503 	and.w	r5, r2, #3
 8022012:	0893      	lsrs	r3, r2, #2
 8022014:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 8022018:	ea44 0400 	orr.w	r4, r4, r0
 802201c:	ea44 6400 	orr.w	r4, r4, r0, lsl #24
 8022020:	d010      	beq.n	8022044 <st_uint8_fill+0x50>
 8022022:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8022026:	f841 4b04 	str.w	r4, [r1], #4
 802202a:	4299      	cmp	r1, r3
 802202c:	d1fb      	bne.n	8022026 <st_uint8_fill+0x32>
 802202e:	b13d      	cbz	r5, 8022040 <st_uint8_fill+0x4c>
 8022030:	462a      	mov	r2, r5
 8022032:	4601      	mov	r1, r0
 8022034:	4618      	mov	r0, r3
 8022036:	bc30      	pop	{r4, r5}
 8022038:	f002 bf00 	b.w	8024e3c <memset>
 802203c:	4770      	bx	lr
 802203e:	4770      	bx	lr
 8022040:	bc30      	pop	{r4, r5}
 8022042:	4770      	bx	lr
 8022044:	460b      	mov	r3, r1
 8022046:	2d00      	cmp	r5, #0
 8022048:	d1f2      	bne.n	8022030 <st_uint8_fill+0x3c>
 802204a:	e7f9      	b.n	8022040 <st_uint8_fill+0x4c>

0802204c <st_sssa8_ch_nn_mat_mult_kernel>:
 802204c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022050:	b09f      	sub	sp, #124	; 0x7c
 8022052:	4683      	mov	fp, r0
 8022054:	460f      	mov	r7, r1
 8022056:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8022058:	9113      	str	r1, [sp, #76]	; 0x4c
 802205a:	0859      	lsrs	r1, r3, #1
 802205c:	eb00 0503 	add.w	r5, r0, r3
 8022060:	f8bd 00a0 	ldrh.w	r0, [sp, #160]	; 0xa0
 8022064:	931c      	str	r3, [sp, #112]	; 0x70
 8022066:	921a      	str	r2, [sp, #104]	; 0x68
 8022068:	951b      	str	r5, [sp, #108]	; 0x6c
 802206a:	900d      	str	r0, [sp, #52]	; 0x34
 802206c:	f000 827a 	beq.w	8022564 <st_sssa8_ch_nn_mat_mult_kernel+0x518>
 8022070:	4614      	mov	r4, r2
 8022072:	3901      	subs	r1, #1
 8022074:	f1a0 0210 	sub.w	r2, r0, #16
 8022078:	eb07 0640 	add.w	r6, r7, r0, lsl #1
 802207c:	4623      	mov	r3, r4
 802207e:	1ec4      	subs	r4, r0, #3
 8022080:	0912      	lsrs	r2, r2, #4
 8022082:	f8df a78c 	ldr.w	sl, [pc, #1932]	; 8022810 <st_sssa8_ch_nn_mat_mult_kernel+0x7c4>
 8022086:	3310      	adds	r3, #16
 8022088:	9415      	str	r4, [sp, #84]	; 0x54
 802208a:	b28c      	uxth	r4, r1
 802208c:	3201      	adds	r2, #1
 802208e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8022090:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8022094:	9616      	str	r6, [sp, #88]	; 0x58
 8022096:	3108      	adds	r1, #8
 8022098:	941d      	str	r4, [sp, #116]	; 0x74
 802209a:	9314      	str	r3, [sp, #80]	; 0x50
 802209c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802209e:	910e      	str	r1, [sp, #56]	; 0x38
 80220a0:	3308      	adds	r3, #8
 80220a2:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80220a4:	f8cd b004 	str.w	fp, [sp, #4]
 80220a8:	930c      	str	r3, [sp, #48]	; 0x30
 80220aa:	0153      	lsls	r3, r2, #5
 80220ac:	0112      	lsls	r2, r2, #4
 80220ae:	3104      	adds	r1, #4
 80220b0:	920f      	str	r2, [sp, #60]	; 0x3c
 80220b2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80220b4:	9108      	str	r1, [sp, #32]
 80220b6:	3208      	adds	r2, #8
 80220b8:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80220ba:	9209      	str	r2, [sp, #36]	; 0x24
 80220bc:	18fa      	adds	r2, r7, r3
 80220be:	18f3      	adds	r3, r6, r3
 80220c0:	3102      	adds	r1, #2
 80220c2:	9218      	str	r2, [sp, #96]	; 0x60
 80220c4:	9317      	str	r3, [sp, #92]	; 0x5c
 80220c6:	1cab      	adds	r3, r5, #2
 80220c8:	910a      	str	r1, [sp, #40]	; 0x28
 80220ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80220cc:	1f03      	subs	r3, r0, #4
 80220ce:	9319      	str	r3, [sp, #100]	; 0x64
 80220d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80220d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80220d4:	9c01      	ldr	r4, [sp, #4]
 80220d6:	f853 9c08 	ldr.w	r9, [r3, #-8]
 80220da:	2a0f      	cmp	r2, #15
 80220dc:	eb04 0002 	add.w	r0, r4, r2
 80220e0:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80220e4:	9003      	str	r0, [sp, #12]
 80220e6:	461f      	mov	r7, r3
 80220e8:	f340 8361 	ble.w	80227ae <st_sssa8_ch_nn_mat_mult_kernel+0x762>
 80220ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80220ee:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 80220f2:	18a2      	adds	r2, r4, r2
 80220f4:	9901      	ldr	r1, [sp, #4]
 80220f6:	461c      	mov	r4, r3
 80220f8:	9002      	str	r0, [sp, #8]
 80220fa:	9204      	str	r2, [sp, #16]
 80220fc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80220fe:	9200      	str	r2, [sp, #0]
 8022100:	464a      	mov	r2, r9
 8022102:	f8d1 b000 	ldr.w	fp, [r1]
 8022106:	9802      	ldr	r0, [sp, #8]
 8022108:	ea4f 2c3b 	mov.w	ip, fp, ror #8
 802210c:	6801      	ldr	r1, [r0, #0]
 802210e:	fa2f f38c 	sxtb16	r3, ip
 8022112:	9800      	ldr	r0, [sp, #0]
 8022114:	ea03 050a 	and.w	r5, r3, sl
 8022118:	fa2f fb8b 	sxtb16	fp, fp
 802211c:	6806      	ldr	r6, [r0, #0]
 802211e:	fa1f fc8b 	uxth.w	ip, fp
 8022122:	ea4f 2831 	mov.w	r8, r1, ror #8
 8022126:	ea45 4b1b 	orr.w	fp, r5, fp, lsr #16
 802212a:	fa2f f888 	sxtb16	r8, r8
 802212e:	fa2f f181 	sxtb16	r1, r1
 8022132:	ea08 000a 	and.w	r0, r8, sl
 8022136:	b28d      	uxth	r5, r1
 8022138:	ea4c 4c03 	orr.w	ip, ip, r3, lsl #16
 802213c:	f8de 3000 	ldr.w	r3, [lr]
 8022140:	ea40 4111 	orr.w	r1, r0, r1, lsr #16
 8022144:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
 8022148:	fb2c 9906 	smlad	r9, ip, r6, r9
 802214c:	fb2c 2203 	smlad	r2, ip, r3, r2
 8022150:	fb25 7706 	smlad	r7, r5, r6, r7
 8022154:	fb25 4003 	smlad	r0, r5, r3, r4
 8022158:	9b00      	ldr	r3, [sp, #0]
 802215a:	f8de c004 	ldr.w	ip, [lr, #4]
 802215e:	685e      	ldr	r6, [r3, #4]
 8022160:	fb2b 9906 	smlad	r9, fp, r6, r9
 8022164:	fb2b 240c 	smlad	r4, fp, ip, r2
 8022168:	fb21 7706 	smlad	r7, r1, r6, r7
 802216c:	fb21 000c 	smlad	r0, r1, ip, r0
 8022170:	9a01      	ldr	r2, [sp, #4]
 8022172:	9902      	ldr	r1, [sp, #8]
 8022174:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8022178:	684d      	ldr	r5, [r1, #4]
 802217a:	ea4f 2238 	mov.w	r2, r8, ror #8
 802217e:	689e      	ldr	r6, [r3, #8]
 8022180:	fa2f fb82 	sxtb16	fp, r2
 8022184:	fa2f f188 	sxtb16	r1, r8
 8022188:	ea0b 080a 	and.w	r8, fp, sl
 802218c:	b28a      	uxth	r2, r1
 802218e:	ea4f 2c35 	mov.w	ip, r5, ror #8
 8022192:	ea48 4811 	orr.w	r8, r8, r1, lsr #16
 8022196:	fa2f fc8c 	sxtb16	ip, ip
 802219a:	fa2f f585 	sxtb16	r5, r5
 802219e:	ea0c 010a 	and.w	r1, ip, sl
 80221a2:	b2ab      	uxth	r3, r5
 80221a4:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 80221a8:	f8de b008 	ldr.w	fp, [lr, #8]
 80221ac:	ea41 4515 	orr.w	r5, r1, r5, lsr #16
 80221b0:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 80221b4:	fb22 9906 	smlad	r9, r2, r6, r9
 80221b8:	fb22 420b 	smlad	r2, r2, fp, r4
 80221bc:	fb23 7606 	smlad	r6, r3, r6, r7
 80221c0:	fb23 030b 	smlad	r3, r3, fp, r0
 80221c4:	9c00      	ldr	r4, [sp, #0]
 80221c6:	f8de 000c 	ldr.w	r0, [lr, #12]
 80221ca:	68e7      	ldr	r7, [r4, #12]
 80221cc:	fb28 9907 	smlad	r9, r8, r7, r9
 80221d0:	fb28 2800 	smlad	r8, r8, r0, r2
 80221d4:	fb25 6607 	smlad	r6, r5, r7, r6
 80221d8:	fb25 3000 	smlad	r0, r5, r0, r3
 80221dc:	9901      	ldr	r1, [sp, #4]
 80221de:	9a02      	ldr	r2, [sp, #8]
 80221e0:	688b      	ldr	r3, [r1, #8]
 80221e2:	6895      	ldr	r5, [r2, #8]
 80221e4:	ea4f 2133 	mov.w	r1, r3, ror #8
 80221e8:	6927      	ldr	r7, [r4, #16]
 80221ea:	fa2f f481 	sxtb16	r4, r1
 80221ee:	ea04 0b0a 	and.w	fp, r4, sl
 80221f2:	ea4f 2c35 	mov.w	ip, r5, ror #8
 80221f6:	fa2f f383 	sxtb16	r3, r3
 80221fa:	fa2f fc8c 	sxtb16	ip, ip
 80221fe:	b299      	uxth	r1, r3
 8022200:	fa2f f585 	sxtb16	r5, r5
 8022204:	ea4b 4313 	orr.w	r3, fp, r3, lsr #16
 8022208:	ea0c 0b0a 	and.w	fp, ip, sl
 802220c:	b2aa      	uxth	r2, r5
 802220e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8022212:	f8de 4010 	ldr.w	r4, [lr, #16]
 8022216:	ea4b 4515 	orr.w	r5, fp, r5, lsr #16
 802221a:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 802221e:	fb21 9907 	smlad	r9, r1, r7, r9
 8022222:	fb21 8804 	smlad	r8, r1, r4, r8
 8022226:	fb22 6707 	smlad	r7, r2, r7, r6
 802222a:	fb22 0204 	smlad	r2, r2, r4, r0
 802222e:	9e00      	ldr	r6, [sp, #0]
 8022230:	f8de 1014 	ldr.w	r1, [lr, #20]
 8022234:	f8d6 b014 	ldr.w	fp, [r6, #20]
 8022238:	fb23 990b 	smlad	r9, r3, fp, r9
 802223c:	fb23 8801 	smlad	r8, r3, r1, r8
 8022240:	fb25 7b0b 	smlad	fp, r5, fp, r7
 8022244:	fb25 2501 	smlad	r5, r5, r1, r2
 8022248:	9b01      	ldr	r3, [sp, #4]
 802224a:	69b7      	ldr	r7, [r6, #24]
 802224c:	68dc      	ldr	r4, [r3, #12]
 802224e:	f103 0110 	add.w	r1, r3, #16
 8022252:	9b02      	ldr	r3, [sp, #8]
 8022254:	9101      	str	r1, [sp, #4]
 8022256:	68d8      	ldr	r0, [r3, #12]
 8022258:	3310      	adds	r3, #16
 802225a:	9302      	str	r3, [sp, #8]
 802225c:	ea4f 2334 	mov.w	r3, r4, ror #8
 8022260:	fa2f f283 	sxtb16	r2, r3
 8022264:	ea02 060a 	and.w	r6, r2, sl
 8022268:	ea4f 2c30 	mov.w	ip, r0, ror #8
 802226c:	fa2f f484 	sxtb16	r4, r4
 8022270:	fa2f fc8c 	sxtb16	ip, ip
 8022274:	b2a3      	uxth	r3, r4
 8022276:	fa2f f080 	sxtb16	r0, r0
 802227a:	ea46 4414 	orr.w	r4, r6, r4, lsr #16
 802227e:	ea0c 060a 	and.w	r6, ip, sl
 8022282:	b281      	uxth	r1, r0
 8022284:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8022288:	f8de 2018 	ldr.w	r2, [lr, #24]
 802228c:	ea46 4010 	orr.w	r0, r6, r0, lsr #16
 8022290:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8022294:	fb23 9907 	smlad	r9, r3, r7, r9
 8022298:	fb23 8302 	smlad	r3, r3, r2, r8
 802229c:	fb21 b707 	smlad	r7, r1, r7, fp
 80222a0:	fb21 5102 	smlad	r1, r1, r2, r5
 80222a4:	9e00      	ldr	r6, [sp, #0]
 80222a6:	f10e 0e20 	add.w	lr, lr, #32
 80222aa:	f106 0220 	add.w	r2, r6, #32
 80222ae:	f8d6 b01c 	ldr.w	fp, [r6, #28]
 80222b2:	f85e 6c04 	ldr.w	r6, [lr, #-4]
 80222b6:	9200      	str	r2, [sp, #0]
 80222b8:	fb24 990b 	smlad	r9, r4, fp, r9
 80222bc:	fb24 3206 	smlad	r2, r4, r6, r3
 80222c0:	fb20 770b 	smlad	r7, r0, fp, r7
 80222c4:	fb20 1406 	smlad	r4, r0, r6, r1
 80222c8:	9901      	ldr	r1, [sp, #4]
 80222ca:	9b04      	ldr	r3, [sp, #16]
 80222cc:	4299      	cmp	r1, r3
 80222ce:	f47f af18 	bne.w	8022102 <st_sssa8_ch_nn_mat_mult_kernel+0xb6>
 80222d2:	9903      	ldr	r1, [sp, #12]
 80222d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80222d6:	4608      	mov	r0, r1
 80222d8:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80222da:	9400      	str	r4, [sp, #0]
 80222dc:	4418      	add	r0, r3
 80222de:	9106      	str	r1, [sp, #24]
 80222e0:	9918      	ldr	r1, [sp, #96]	; 0x60
 80222e2:	9003      	str	r0, [sp, #12]
 80222e4:	9105      	str	r1, [sp, #20]
 80222e6:	9307      	str	r3, [sp, #28]
 80222e8:	9815      	ldr	r0, [sp, #84]	; 0x54
 80222ea:	4283      	cmp	r3, r0
 80222ec:	da68      	bge.n	80223c0 <st_sssa8_ch_nn_mat_mult_kernel+0x374>
 80222ee:	9919      	ldr	r1, [sp, #100]	; 0x64
 80222f0:	46be      	mov	lr, r7
 80222f2:	f8dd b004 	ldr.w	fp, [sp, #4]
 80222f6:	1acb      	subs	r3, r1, r3
 80222f8:	9903      	ldr	r1, [sp, #12]
 80222fa:	f8cd b008 	str.w	fp, [sp, #8]
 80222fe:	089b      	lsrs	r3, r3, #2
 8022300:	9312      	str	r3, [sp, #72]	; 0x48
 8022302:	3301      	adds	r3, #1
 8022304:	9311      	str	r3, [sp, #68]	; 0x44
 8022306:	009b      	lsls	r3, r3, #2
 8022308:	e9dd c505 	ldrd	ip, r5, [sp, #20]
 802230c:	9310      	str	r3, [sp, #64]	; 0x40
 802230e:	18cb      	adds	r3, r1, r3
 8022310:	9304      	str	r3, [sp, #16]
 8022312:	9b02      	ldr	r3, [sp, #8]
 8022314:	f8dc b000 	ldr.w	fp, [ip]
 8022318:	f853 4b04 	ldr.w	r4, [r3], #4
 802231c:	fa2f f084 	sxtb16	r0, r4
 8022320:	9302      	str	r3, [sp, #8]
 8022322:	ea4f 2634 	mov.w	r6, r4, ror #8
 8022326:	9b03      	ldr	r3, [sp, #12]
 8022328:	fa1f f880 	uxth.w	r8, r0
 802232c:	fa2f f686 	sxtb16	r6, r6
 8022330:	f853 1b04 	ldr.w	r1, [r3], #4
 8022334:	ea06 040a 	and.w	r4, r6, sl
 8022338:	ea48 4606 	orr.w	r6, r8, r6, lsl #16
 802233c:	f8d5 8000 	ldr.w	r8, [r5]
 8022340:	9303      	str	r3, [sp, #12]
 8022342:	ea4f 2731 	mov.w	r7, r1, ror #8
 8022346:	ea44 4410 	orr.w	r4, r4, r0, lsr #16
 802234a:	fa2f f787 	sxtb16	r7, r7
 802234e:	fa2f f181 	sxtb16	r1, r1
 8022352:	ea07 000a 	and.w	r0, r7, sl
 8022356:	b28b      	uxth	r3, r1
 8022358:	ea40 4111 	orr.w	r1, r0, r1, lsr #16
 802235c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8022360:	fb26 990b 	smlad	r9, r6, fp, r9
 8022364:	fb26 2208 	smlad	r2, r6, r8, r2
 8022368:	fb23 ee0b 	smlad	lr, r3, fp, lr
 802236c:	9800      	ldr	r0, [sp, #0]
 802236e:	fb23 0308 	smlad	r3, r3, r8, r0
 8022372:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8022376:	3508      	adds	r5, #8
 8022378:	f855 0c04 	ldr.w	r0, [r5, #-4]
 802237c:	f10c 0c08 	add.w	ip, ip, #8
 8022380:	fb24 9906 	smlad	r9, r4, r6, r9
 8022384:	fb24 2200 	smlad	r2, r4, r0, r2
 8022388:	fb21 ee06 	smlad	lr, r1, r6, lr
 802238c:	fb21 3100 	smlad	r1, r1, r0, r3
 8022390:	9100      	str	r1, [sp, #0]
 8022392:	e9dd 3103 	ldrd	r3, r1, [sp, #12]
 8022396:	4299      	cmp	r1, r3
 8022398:	d1bb      	bne.n	8022312 <st_sssa8_ch_nn_mat_mult_kernel+0x2c6>
 802239a:	9801      	ldr	r0, [sp, #4]
 802239c:	4677      	mov	r7, lr
 802239e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80223a0:	9907      	ldr	r1, [sp, #28]
 80223a2:	4420      	add	r0, r4
 80223a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80223a6:	3104      	adds	r1, #4
 80223a8:	9001      	str	r0, [sp, #4]
 80223aa:	00db      	lsls	r3, r3, #3
 80223ac:	9812      	ldr	r0, [sp, #72]	; 0x48
 80223ae:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 80223b2:	9107      	str	r1, [sp, #28]
 80223b4:	9906      	ldr	r1, [sp, #24]
 80223b6:	4419      	add	r1, r3
 80223b8:	9106      	str	r1, [sp, #24]
 80223ba:	9905      	ldr	r1, [sp, #20]
 80223bc:	4419      	add	r1, r3
 80223be:	9105      	str	r1, [sp, #20]
 80223c0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80223c2:	9907      	ldr	r1, [sp, #28]
 80223c4:	428e      	cmp	r6, r1
 80223c6:	dd50      	ble.n	802246a <st_sssa8_ch_nn_mat_mult_kernel+0x41e>
 80223c8:	9b01      	ldr	r3, [sp, #4]
 80223ca:	f993 5000 	ldrsb.w	r5, [r3]
 80223ce:	1c4b      	adds	r3, r1, #1
 80223d0:	9905      	ldr	r1, [sp, #20]
 80223d2:	42b3      	cmp	r3, r6
 80223d4:	f9b1 4000 	ldrsh.w	r4, [r1]
 80223d8:	9906      	ldr	r1, [sp, #24]
 80223da:	fb14 9905 	smlabb	r9, r4, r5, r9
 80223de:	f9b1 0000 	ldrsh.w	r0, [r1]
 80223e2:	9903      	ldr	r1, [sp, #12]
 80223e4:	fb10 2205 	smlabb	r2, r0, r5, r2
 80223e8:	f991 1000 	ldrsb.w	r1, [r1]
 80223ec:	fb14 7401 	smlabb	r4, r4, r1, r7
 80223f0:	4627      	mov	r7, r4
 80223f2:	9c00      	ldr	r4, [sp, #0]
 80223f4:	fb10 4101 	smlabb	r1, r0, r1, r4
 80223f8:	9100      	str	r1, [sp, #0]
 80223fa:	f280 8177 	bge.w	80226ec <st_sssa8_ch_nn_mat_mult_kernel+0x6a0>
 80223fe:	9901      	ldr	r1, [sp, #4]
 8022400:	9b07      	ldr	r3, [sp, #28]
 8022402:	f991 5001 	ldrsb.w	r5, [r1, #1]
 8022406:	9905      	ldr	r1, [sp, #20]
 8022408:	3302      	adds	r3, #2
 802240a:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 802240e:	9906      	ldr	r1, [sp, #24]
 8022410:	fb14 9905 	smlabb	r9, r4, r5, r9
 8022414:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 8022418:	9903      	ldr	r1, [sp, #12]
 802241a:	fb10 2205 	smlabb	r2, r0, r5, r2
 802241e:	f991 1001 	ldrsb.w	r1, [r1, #1]
 8022422:	fb14 7401 	smlabb	r4, r4, r1, r7
 8022426:	4627      	mov	r7, r4
 8022428:	9c00      	ldr	r4, [sp, #0]
 802242a:	fb10 4101 	smlabb	r1, r0, r1, r4
 802242e:	9100      	str	r1, [sp, #0]
 8022430:	990d      	ldr	r1, [sp, #52]	; 0x34
 8022432:	4299      	cmp	r1, r3
 8022434:	f340 81c4 	ble.w	80227c0 <st_sssa8_ch_nn_mat_mult_kernel+0x774>
 8022438:	9b05      	ldr	r3, [sp, #20]
 802243a:	9d01      	ldr	r5, [sp, #4]
 802243c:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8022440:	9b03      	ldr	r3, [sp, #12]
 8022442:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8022446:	9b06      	ldr	r3, [sp, #24]
 8022448:	fb11 7600 	smlabb	r6, r1, r0, r7
 802244c:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
 8022450:	4637      	mov	r7, r6
 8022452:	9e00      	ldr	r6, [sp, #0]
 8022454:	f995 3002 	ldrsb.w	r3, [r5, #2]
 8022458:	fb14 6000 	smlabb	r0, r4, r0, r6
 802245c:	fb11 9903 	smlabb	r9, r1, r3, r9
 8022460:	9000      	str	r0, [sp, #0]
 8022462:	fb14 2203 	smlabb	r2, r4, r3, r2
 8022466:	1ce8      	adds	r0, r5, #3
 8022468:	9001      	str	r0, [sp, #4]
 802246a:	9b08      	ldr	r3, [sp, #32]
 802246c:	f933 0c04 	ldrsh.w	r0, [r3, #-4]
 8022470:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022472:	2815      	cmp	r0, #21
 8022474:	f853 4c08 	ldr.w	r4, [r3, #-8]
 8022478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802247a:	f853 5c08 	ldr.w	r5, [r3, #-8]
 802247e:	f340 811a 	ble.w	80226b6 <st_sssa8_ch_nn_mat_mult_kernel+0x66a>
 8022482:	1e83      	subs	r3, r0, #2
 8022484:	2101      	movs	r1, #1
 8022486:	3801      	subs	r0, #1
 8022488:	fa01 f303 	lsl.w	r3, r1, r3
 802248c:	fb59 3904 	smmla	r9, r9, r4, r3
 8022490:	fa49 f900 	asr.w	r9, r9, r0
 8022494:	fb52 3304 	smmla	r3, r2, r4, r3
 8022498:	44a9      	add	r9, r5
 802249a:	f309 0907 	ssat	r9, #8, r9
 802249e:	4103      	asrs	r3, r0
 80224a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80224a2:	442b      	add	r3, r5
 80224a4:	f802 9c02 	strb.w	r9, [r2, #-2]
 80224a8:	f303 0307 	ssat	r3, #8, r3
 80224ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80224ae:	f802 3c02 	strb.w	r3, [r2, #-2]
 80224b2:	9b08      	ldr	r3, [sp, #32]
 80224b4:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
 80224b8:	2b15      	cmp	r3, #21
 80224ba:	f340 80da 	ble.w	8022672 <st_sssa8_ch_nn_mat_mult_kernel+0x626>
 80224be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80224c0:	1e9c      	subs	r4, r3, #2
 80224c2:	3b01      	subs	r3, #1
 80224c4:	9900      	ldr	r1, [sp, #0]
 80224c6:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80224ca:	2201      	movs	r2, #1
 80224cc:	fa02 f404 	lsl.w	r4, r2, r4
 80224d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80224d2:	fb57 4800 	smmla	r8, r7, r0, r4
 80224d6:	f852 2c04 	ldr.w	r2, [r2, #-4]
 80224da:	fa48 f803 	asr.w	r8, r8, r3
 80224de:	fb51 4000 	smmla	r0, r1, r0, r4
 80224e2:	4490      	add	r8, r2
 80224e4:	f308 0807 	ssat	r8, #8, r8
 80224e8:	4118      	asrs	r0, r3
 80224ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80224ec:	4410      	add	r0, r2
 80224ee:	f803 8c01 	strb.w	r8, [r3, #-1]
 80224f2:	f300 0007 	ssat	r0, #8, r0
 80224f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80224f8:	f803 0c01 	strb.w	r0, [r3, #-1]
 80224fc:	9a01      	ldr	r2, [sp, #4]
 80224fe:	990d      	ldr	r1, [sp, #52]	; 0x34
 8022500:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022502:	440a      	add	r2, r1
 8022504:	3308      	adds	r3, #8
 8022506:	9201      	str	r2, [sp, #4]
 8022508:	9a08      	ldr	r2, [sp, #32]
 802250a:	930e      	str	r3, [sp, #56]	; 0x38
 802250c:	3204      	adds	r2, #4
 802250e:	9208      	str	r2, [sp, #32]
 8022510:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022512:	3208      	adds	r2, #8
 8022514:	920c      	str	r2, [sp, #48]	; 0x30
 8022516:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022518:	3202      	adds	r2, #2
 802251a:	920a      	str	r2, [sp, #40]	; 0x28
 802251c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802251e:	3208      	adds	r2, #8
 8022520:	9209      	str	r2, [sp, #36]	; 0x24
 8022522:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022524:	3202      	adds	r2, #2
 8022526:	920b      	str	r2, [sp, #44]	; 0x2c
 8022528:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802252a:	429a      	cmp	r2, r3
 802252c:	f47f add1 	bne.w	80220d2 <st_sssa8_ch_nn_mat_mult_kernel+0x86>
 8022530:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8022532:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8022534:	3301      	adds	r3, #1
 8022536:	f8dd b004 	ldr.w	fp, [sp, #4]
 802253a:	00da      	lsls	r2, r3, #3
 802253c:	0059      	lsls	r1, r3, #1
 802253e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8022542:	9329      	str	r3, [sp, #164]	; 0xa4
 8022544:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8022546:	4413      	add	r3, r2
 8022548:	931a      	str	r3, [sp, #104]	; 0x68
 802254a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802254c:	4413      	add	r3, r2
 802254e:	932a      	str	r3, [sp, #168]	; 0xa8
 8022550:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8022552:	4413      	add	r3, r2
 8022554:	932b      	str	r3, [sp, #172]	; 0xac
 8022556:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022558:	440b      	add	r3, r1
 802255a:	932c      	str	r3, [sp, #176]	; 0xb0
 802255c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802255e:	440b      	add	r3, r1
 8022560:	931b      	str	r3, [sp, #108]	; 0x6c
 8022562:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022564:	07da      	lsls	r2, r3, #31
 8022566:	f140 811c 	bpl.w	80227a2 <st_sssa8_ch_nn_mat_mult_kernel+0x756>
 802256a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 802256c:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 802256e:	6818      	ldr	r0, [r3, #0]
 8022570:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022572:	ea5f 0a93 	movs.w	sl, r3, lsr #2
 8022576:	eb07 0943 	add.w	r9, r7, r3, lsl #1
 802257a:	f000 8146 	beq.w	802280a <st_sssa8_ch_nn_mat_mult_kernel+0x7be>
 802257e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8022582:	46cc      	mov	ip, r9
 8022584:	4602      	mov	r2, r0
 8022586:	f8df 8288 	ldr.w	r8, [pc, #648]	; 8022810 <st_sssa8_ch_nn_mat_mult_kernel+0x7c4>
 802258a:	fa1f fa8a 	uxth.w	sl, sl
 802258e:	f10a 0a01 	add.w	sl, sl, #1
 8022592:	eb0b 0e8a 	add.w	lr, fp, sl, lsl #2
 8022596:	f85b 1b04 	ldr.w	r1, [fp], #4
 802259a:	fa2f f481 	sxtb16	r4, r1
 802259e:	ea4f 2331 	mov.w	r3, r1, ror #8
 80225a2:	683d      	ldr	r5, [r7, #0]
 80225a4:	b2a1      	uxth	r1, r4
 80225a6:	fa2f f383 	sxtb16	r3, r3
 80225aa:	ea03 0608 	and.w	r6, r3, r8
 80225ae:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80225b2:	ea46 4414 	orr.w	r4, r6, r4, lsr #16
 80225b6:	fb23 0505 	smlad	r5, r3, r5, r0
 80225ba:	f8dc 1000 	ldr.w	r1, [ip]
 80225be:	fb23 2301 	smlad	r3, r3, r1, r2
 80225c2:	6878      	ldr	r0, [r7, #4]
 80225c4:	f10c 0c08 	add.w	ip, ip, #8
 80225c8:	f85c 2c04 	ldr.w	r2, [ip, #-4]
 80225cc:	3708      	adds	r7, #8
 80225ce:	fb24 5000 	smlad	r0, r4, r0, r5
 80225d2:	fb24 3202 	smlad	r2, r4, r2, r3
 80225d6:	45de      	cmp	lr, fp
 80225d8:	d1dd      	bne.n	8022596 <st_sssa8_ch_nn_mat_mult_kernel+0x54a>
 80225da:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 80225de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80225e0:	4453      	add	r3, sl
 80225e2:	44d1      	add	r9, sl
 80225e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80225e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80225e8:	f013 0303 	ands.w	r3, r3, #3
 80225ec:	d01f      	beq.n	802262e <st_sssa8_ch_nn_mat_mult_kernel+0x5e2>
 80225ee:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80225f0:	2b01      	cmp	r3, #1
 80225f2:	f99b 1000 	ldrsb.w	r1, [fp]
 80225f6:	8835      	ldrh	r5, [r6, #0]
 80225f8:	f8b9 4000 	ldrh.w	r4, [r9]
 80225fc:	fb15 0001 	smlabb	r0, r5, r1, r0
 8022600:	fb14 2201 	smlabb	r2, r4, r1, r2
 8022604:	d013      	beq.n	802262e <st_sssa8_ch_nn_mat_mult_kernel+0x5e2>
 8022606:	f99b 1001 	ldrsb.w	r1, [fp, #1]
 802260a:	2b02      	cmp	r3, #2
 802260c:	8875      	ldrh	r5, [r6, #2]
 802260e:	f8b9 4002 	ldrh.w	r4, [r9, #2]
 8022612:	fb15 0001 	smlabb	r0, r5, r1, r0
 8022616:	fb14 2201 	smlabb	r2, r4, r1, r2
 802261a:	d008      	beq.n	802262e <st_sssa8_ch_nn_mat_mult_kernel+0x5e2>
 802261c:	f99b 3002 	ldrsb.w	r3, [fp, #2]
 8022620:	88b4      	ldrh	r4, [r6, #4]
 8022622:	f8b9 1004 	ldrh.w	r1, [r9, #4]
 8022626:	fb14 0003 	smlabb	r0, r4, r3, r0
 802262a:	fb11 2203 	smlabb	r2, r1, r3, r2
 802262e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022630:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8022632:	f9b3 3000 	ldrsh.w	r3, [r3]
 8022636:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8022638:	6825      	ldr	r5, [r4, #0]
 802263a:	2b15      	cmp	r3, #21
 802263c:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 802263e:	f101 0101 	add.w	r1, r1, #1
 8022642:	6824      	ldr	r4, [r4, #0]
 8022644:	f300 8097 	bgt.w	8022776 <st_sssa8_ch_nn_mat_mult_kernel+0x72a>
 8022648:	2b00      	cmp	r3, #0
 802264a:	f340 80bd 	ble.w	80227c8 <st_sssa8_ch_nn_mat_mult_kernel+0x77c>
 802264e:	0040      	lsls	r0, r0, #1
 8022650:	0052      	lsls	r2, r2, #1
 8022652:	fb50 4005 	smmla	r0, r0, r5, r4
 8022656:	fb52 4205 	smmla	r2, r2, r5, r4
 802265a:	fa40 f303 	asr.w	r3, r0, r3
 802265e:	f303 0307 	ssat	r3, #8, r3
 8022662:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8022664:	7003      	strb	r3, [r0, #0]
 8022666:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022668:	f9b3 3000 	ldrsh.w	r3, [r3]
 802266c:	fa42 f303 	asr.w	r3, r2, r3
 8022670:	e091      	b.n	8022796 <st_sssa8_ch_nn_mat_mult_kernel+0x74a>
 8022672:	2b00      	cmp	r3, #0
 8022674:	dd3e      	ble.n	80226f4 <st_sssa8_ch_nn_mat_mult_kernel+0x6a8>
 8022676:	9900      	ldr	r1, [sp, #0]
 8022678:	ea4f 0847 	mov.w	r8, r7, lsl #1
 802267c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802267e:	0048      	lsls	r0, r1, #1
 8022680:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022682:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8022686:	f851 4c04 	ldr.w	r4, [r1, #-4]
 802268a:	fb58 4802 	smmla	r8, r8, r2, r4
 802268e:	fb50 4002 	smmla	r0, r0, r2, r4
 8022692:	fa48 f303 	asr.w	r3, r8, r3
 8022696:	f303 0307 	ssat	r3, #8, r3
 802269a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802269c:	f802 3c01 	strb.w	r3, [r2, #-1]
 80226a0:	9b08      	ldr	r3, [sp, #32]
 80226a2:	f933 4c02 	ldrsh.w	r4, [r3, #-2]
 80226a6:	fa40 f404 	asr.w	r4, r0, r4
 80226aa:	f304 0407 	ssat	r4, #8, r4
 80226ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80226b0:	f803 4c01 	strb.w	r4, [r3, #-1]
 80226b4:	e722      	b.n	80224fc <st_sssa8_ch_nn_mat_mult_kernel+0x4b0>
 80226b6:	2800      	cmp	r0, #0
 80226b8:	dd3f      	ble.n	802273a <st_sssa8_ch_nn_mat_mult_kernel+0x6ee>
 80226ba:	0053      	lsls	r3, r2, #1
 80226bc:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80226c0:	fb53 5204 	smmla	r2, r3, r4, r5
 80226c4:	fb59 5904 	smmla	r9, r9, r4, r5
 80226c8:	fa49 f900 	asr.w	r9, r9, r0
 80226cc:	f309 0907 	ssat	r9, #8, r9
 80226d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80226d2:	f803 9c02 	strb.w	r9, [r3, #-2]
 80226d6:	9b08      	ldr	r3, [sp, #32]
 80226d8:	f933 3c04 	ldrsh.w	r3, [r3, #-4]
 80226dc:	fa42 f303 	asr.w	r3, r2, r3
 80226e0:	f303 0307 	ssat	r3, #8, r3
 80226e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80226e6:	f802 3c02 	strb.w	r3, [r2, #-2]
 80226ea:	e6e2      	b.n	80224b2 <st_sssa8_ch_nn_mat_mult_kernel+0x466>
 80226ec:	9b01      	ldr	r3, [sp, #4]
 80226ee:	3301      	adds	r3, #1
 80226f0:	9301      	str	r3, [sp, #4]
 80226f2:	e6ba      	b.n	802246a <st_sssa8_ch_nn_mat_mult_kernel+0x41e>
 80226f4:	f1c3 0301 	rsb	r3, r3, #1
 80226f8:	4639      	mov	r1, r7
 80226fa:	4099      	lsls	r1, r3
 80226fc:	f301 011f 	ssat	r1, #32, r1
 8022700:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022702:	f852 6c04 	ldr.w	r6, [r2, #-4]
 8022706:	fb51 f116 	smmulr	r1, r1, r6
 802270a:	9800      	ldr	r0, [sp, #0]
 802270c:	4098      	lsls	r0, r3
 802270e:	f300 001f 	ssat	r0, #32, r0
 8022712:	fb50 f016 	smmulr	r0, r0, r6
 8022716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022718:	f853 2c04 	ldr.w	r2, [r3, #-4]
 802271c:	440a      	add	r2, r1
 802271e:	f302 0207 	ssat	r2, #8, r2
 8022722:	990a      	ldr	r1, [sp, #40]	; 0x28
 8022724:	f801 2c01 	strb.w	r2, [r1, #-1]
 8022728:	f853 3c04 	ldr.w	r3, [r3, #-4]
 802272c:	4403      	add	r3, r0
 802272e:	f303 0307 	ssat	r3, #8, r3
 8022732:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022734:	f802 3c01 	strb.w	r3, [r2, #-1]
 8022738:	e6e0      	b.n	80224fc <st_sssa8_ch_nn_mat_mult_kernel+0x4b0>
 802273a:	f1c0 0001 	rsb	r0, r0, #1
 802273e:	fa09 f600 	lsl.w	r6, r9, r0
 8022742:	f306 061f 	ssat	r6, #32, r6
 8022746:	fb56 f614 	smmulr	r6, r6, r4
 802274a:	fa02 f000 	lsl.w	r0, r2, r0
 802274e:	f300 001f 	ssat	r0, #32, r0
 8022752:	fb50 f414 	smmulr	r4, r0, r4
 8022756:	4435      	add	r5, r6
 8022758:	f305 0507 	ssat	r5, #8, r5
 802275c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802275e:	f803 5c02 	strb.w	r5, [r3, #-2]
 8022762:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022764:	f853 3c08 	ldr.w	r3, [r3, #-8]
 8022768:	4423      	add	r3, r4
 802276a:	f303 0307 	ssat	r3, #8, r3
 802276e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022770:	f802 3c02 	strb.w	r3, [r2, #-2]
 8022774:	e69d      	b.n	80224b2 <st_sssa8_ch_nn_mat_mult_kernel+0x466>
 8022776:	1e9f      	subs	r7, r3, #2
 8022778:	1e5e      	subs	r6, r3, #1
 802277a:	2301      	movs	r3, #1
 802277c:	40bb      	lsls	r3, r7
 802277e:	fb50 3005 	smmla	r0, r0, r5, r3
 8022782:	4130      	asrs	r0, r6
 8022784:	fb52 3305 	smmla	r3, r2, r5, r3
 8022788:	1902      	adds	r2, r0, r4
 802278a:	f302 0207 	ssat	r2, #8, r2
 802278e:	4133      	asrs	r3, r6
 8022790:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8022792:	4423      	add	r3, r4
 8022794:	7002      	strb	r2, [r0, #0]
 8022796:	f303 0307 	ssat	r3, #8, r3
 802279a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 802279c:	912c      	str	r1, [sp, #176]	; 0xb0
 802279e:	7013      	strb	r3, [r2, #0]
 80227a0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80227a2:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80227a4:	4413      	add	r3, r2
 80227a6:	4618      	mov	r0, r3
 80227a8:	b01f      	add	sp, #124	; 0x7c
 80227aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80227ae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80227b0:	464a      	mov	r2, r9
 80227b2:	9700      	str	r7, [sp, #0]
 80227b4:	9306      	str	r3, [sp, #24]
 80227b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80227b8:	9305      	str	r3, [sp, #20]
 80227ba:	2300      	movs	r3, #0
 80227bc:	9307      	str	r3, [sp, #28]
 80227be:	e593      	b.n	80222e8 <st_sssa8_ch_nn_mat_mult_kernel+0x29c>
 80227c0:	9b01      	ldr	r3, [sp, #4]
 80227c2:	3302      	adds	r3, #2
 80227c4:	9301      	str	r3, [sp, #4]
 80227c6:	e650      	b.n	802246a <st_sssa8_ch_nn_mat_mult_kernel+0x41e>
 80227c8:	f1c3 0601 	rsb	r6, r3, #1
 80227cc:	fa00 f306 	lsl.w	r3, r0, r6
 80227d0:	f303 031f 	ssat	r3, #32, r3
 80227d4:	fb53 f315 	smmulr	r3, r3, r5
 80227d8:	40b2      	lsls	r2, r6
 80227da:	f302 021f 	ssat	r2, #32, r2
 80227de:	fb52 f215 	smmulr	r2, r2, r5
 80227e2:	4423      	add	r3, r4
 80227e4:	f303 0307 	ssat	r3, #8, r3
 80227e8:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80227ea:	7003      	strb	r3, [r0, #0]
 80227ec:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80227ee:	681b      	ldr	r3, [r3, #0]
 80227f0:	4413      	add	r3, r2
 80227f2:	f303 0307 	ssat	r3, #8, r3
 80227f6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80227f8:	912c      	str	r1, [sp, #176]	; 0xb0
 80227fa:	7013      	strb	r3, [r2, #0]
 80227fc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80227fe:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8022800:	4413      	add	r3, r2
 8022802:	4618      	mov	r0, r3
 8022804:	b01f      	add	sp, #124	; 0x7c
 8022806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802280a:	4602      	mov	r2, r0
 802280c:	e6ec      	b.n	80225e8 <st_sssa8_ch_nn_mat_mult_kernel+0x59c>
 802280e:	bf00      	nop
 8022810:	ffff0000 	.word	0xffff0000

08022814 <st_int8_to16_no_shift>:
 8022814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022818:	f1b2 0610 	subs.w	r6, r2, #16
 802281c:	f100 8092 	bmi.w	8022944 <st_int8_to16_no_shift+0x130>
 8022820:	0936      	lsrs	r6, r6, #4
 8022822:	4603      	mov	r3, r0
 8022824:	4f4b      	ldr	r7, [pc, #300]	; (8022954 <st_int8_to16_no_shift+0x140>)
 8022826:	f106 0801 	add.w	r8, r6, #1
 802282a:	eb01 1448 	add.w	r4, r1, r8, lsl #5
 802282e:	681d      	ldr	r5, [r3, #0]
 8022830:	3120      	adds	r1, #32
 8022832:	685e      	ldr	r6, [r3, #4]
 8022834:	3310      	adds	r3, #16
 8022836:	ea4f 2c35 	mov.w	ip, r5, ror #8
 802283a:	fa2f fc8c 	sxtb16	ip, ip
 802283e:	ea0c 0a07 	and.w	sl, ip, r7
 8022842:	ea4f 2e36 	mov.w	lr, r6, ror #8
 8022846:	fa2f f585 	sxtb16	r5, r5
 802284a:	fa2f fe8e 	sxtb16	lr, lr
 802284e:	fa1f fb85 	uxth.w	fp, r5
 8022852:	ea0e 0907 	and.w	r9, lr, r7
 8022856:	ea4a 4a15 	orr.w	sl, sl, r5, lsr #16
 802285a:	fa2f f686 	sxtb16	r6, r6
 802285e:	b2b5      	uxth	r5, r6
 8022860:	f841 ac1c 	str.w	sl, [r1, #-28]
 8022864:	ea4b 4c0c 	orr.w	ip, fp, ip, lsl #16
 8022868:	ea49 4616 	orr.w	r6, r9, r6, lsr #16
 802286c:	ea45 450e 	orr.w	r5, r5, lr, lsl #16
 8022870:	f841 cc20 	str.w	ip, [r1, #-32]
 8022874:	f841 6c14 	str.w	r6, [r1, #-20]
 8022878:	f841 5c18 	str.w	r5, [r1, #-24]
 802287c:	f853 6c08 	ldr.w	r6, [r3, #-8]
 8022880:	f853 5c04 	ldr.w	r5, [r3, #-4]
 8022884:	ea4f 2e36 	mov.w	lr, r6, ror #8
 8022888:	fa2f fe8e 	sxtb16	lr, lr
 802288c:	ea0e 0a07 	and.w	sl, lr, r7
 8022890:	ea4f 2c35 	mov.w	ip, r5, ror #8
 8022894:	fa2f f686 	sxtb16	r6, r6
 8022898:	fa2f f98c 	sxtb16	r9, ip
 802289c:	fa1f fb86 	uxth.w	fp, r6
 80228a0:	fa2f f585 	sxtb16	r5, r5
 80228a4:	ea4a 4616 	orr.w	r6, sl, r6, lsr #16
 80228a8:	ea09 0a07 	and.w	sl, r9, r7
 80228ac:	fa1f fc85 	uxth.w	ip, r5
 80228b0:	ea4b 4e0e 	orr.w	lr, fp, lr, lsl #16
 80228b4:	f841 6c0c 	str.w	r6, [r1, #-12]
 80228b8:	ea4a 4515 	orr.w	r5, sl, r5, lsr #16
 80228bc:	ea4c 4c09 	orr.w	ip, ip, r9, lsl #16
 80228c0:	f841 ec10 	str.w	lr, [r1, #-16]
 80228c4:	f841 5c04 	str.w	r5, [r1, #-4]
 80228c8:	f841 cc08 	str.w	ip, [r1, #-8]
 80228cc:	428c      	cmp	r4, r1
 80228ce:	d1ae      	bne.n	802282e <st_int8_to16_no_shift+0x1a>
 80228d0:	ea4f 1608 	mov.w	r6, r8, lsl #4
 80228d4:	f1a2 0c04 	sub.w	ip, r2, #4
 80228d8:	45b4      	cmp	ip, r6
 80228da:	4430      	add	r0, r6
 80228dc:	db38      	blt.n	8022950 <st_int8_to16_no_shift+0x13c>
 80228de:	ebac 0c06 	sub.w	ip, ip, r6
 80228e2:	4607      	mov	r7, r0
 80228e4:	f8df e06c 	ldr.w	lr, [pc, #108]	; 8022954 <st_int8_to16_no_shift+0x140>
 80228e8:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
 80228ec:	f10c 0801 	add.w	r8, ip, #1
 80228f0:	eb04 05c8 	add.w	r5, r4, r8, lsl #3
 80228f4:	f857 3b04 	ldr.w	r3, [r7], #4
 80228f8:	3408      	adds	r4, #8
 80228fa:	fa2f f983 	sxtb16	r9, r3
 80228fe:	ea4f 2333 	mov.w	r3, r3, ror #8
 8022902:	fa1f f189 	uxth.w	r1, r9
 8022906:	fa2f f383 	sxtb16	r3, r3
 802290a:	ea03 0a0e 	and.w	sl, r3, lr
 802290e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8022912:	ea4a 4919 	orr.w	r9, sl, r9, lsr #16
 8022916:	f844 3c08 	str.w	r3, [r4, #-8]
 802291a:	f844 9c04 	str.w	r9, [r4, #-4]
 802291e:	42a5      	cmp	r5, r4
 8022920:	d1e8      	bne.n	80228f4 <st_int8_to16_no_shift+0xe0>
 8022922:	3604      	adds	r6, #4
 8022924:	eb00 0088 	add.w	r0, r0, r8, lsl #2
 8022928:	eb06 068c 	add.w	r6, r6, ip, lsl #2
 802292c:	42b2      	cmp	r2, r6
 802292e:	dd07      	ble.n	8022940 <st_int8_to16_no_shift+0x12c>
 8022930:	1b92      	subs	r2, r2, r6
 8022932:	4402      	add	r2, r0
 8022934:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8022938:	4290      	cmp	r0, r2
 802293a:	f825 3b02 	strh.w	r3, [r5], #2
 802293e:	d1f9      	bne.n	8022934 <st_int8_to16_no_shift+0x120>
 8022940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022944:	2600      	movs	r6, #0
 8022946:	f1a2 0c04 	sub.w	ip, r2, #4
 802294a:	460c      	mov	r4, r1
 802294c:	45b4      	cmp	ip, r6
 802294e:	dac6      	bge.n	80228de <st_int8_to16_no_shift+0xca>
 8022950:	4625      	mov	r5, r4
 8022952:	e7eb      	b.n	802292c <st_int8_to16_no_shift+0x118>
 8022954:	ffff0000 	.word	0xffff0000

08022958 <st_int8_to16_dual>:
 8022958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802295c:	b08b      	sub	sp, #44	; 0x2c
 802295e:	468a      	mov	sl, r1
 8022960:	eb00 0802 	add.w	r8, r0, r2
 8022964:	9309      	str	r3, [sp, #36]	; 0x24
 8022966:	085b      	lsrs	r3, r3, #1
 8022968:	9200      	str	r2, [sp, #0]
 802296a:	9301      	str	r3, [sp, #4]
 802296c:	f000 8123 	beq.w	8022bb6 <st_int8_to16_dual+0x25e>
 8022970:	f1a2 0310 	sub.w	r3, r2, #16
 8022974:	3a04      	subs	r2, #4
 8022976:	46c2      	mov	sl, r8
 8022978:	f8df 92b4 	ldr.w	r9, [pc, #692]	; 8022c30 <st_int8_to16_dual+0x2d8>
 802297c:	9307      	str	r3, [sp, #28]
 802297e:	091b      	lsrs	r3, r3, #4
 8022980:	9206      	str	r2, [sp, #24]
 8022982:	4688      	mov	r8, r1
 8022984:	3301      	adds	r3, #1
 8022986:	011a      	lsls	r2, r3, #4
 8022988:	019b      	lsls	r3, r3, #6
 802298a:	9202      	str	r2, [sp, #8]
 802298c:	9308      	str	r3, [sp, #32]
 802298e:	9b07      	ldr	r3, [sp, #28]
 8022990:	2b00      	cmp	r3, #0
 8022992:	f2c0 8145 	blt.w	8022c20 <st_int8_to16_dual+0x2c8>
 8022996:	9b02      	ldr	r3, [sp, #8]
 8022998:	4655      	mov	r5, sl
 802299a:	18c4      	adds	r4, r0, r3
 802299c:	4643      	mov	r3, r8
 802299e:	682e      	ldr	r6, [r5, #0]
 80229a0:	3010      	adds	r0, #16
 80229a2:	f850 1c10 	ldr.w	r1, [r0, #-16]
 80229a6:	3510      	adds	r5, #16
 80229a8:	fa2f f286 	sxtb16	r2, r6
 80229ac:	ea4f 2c36 	mov.w	ip, r6, ror #8
 80229b0:	3340      	adds	r3, #64	; 0x40
 80229b2:	fa2f fc8c 	sxtb16	ip, ip
 80229b6:	ea0c 0609 	and.w	r6, ip, r9
 80229ba:	ea4f 2731 	mov.w	r7, r1, ror #8
 80229be:	fa2f f181 	sxtb16	r1, r1
 80229c2:	ea46 4612 	orr.w	r6, r6, r2, lsr #16
 80229c6:	fa1f fe81 	uxth.w	lr, r1
 80229ca:	fa2f f787 	sxtb16	r7, r7
 80229ce:	b292      	uxth	r2, r2
 80229d0:	ea07 0b09 	and.w	fp, r7, r9
 80229d4:	ea4e 4707 	orr.w	r7, lr, r7, lsl #16
 80229d8:	f843 6c34 	str.w	r6, [r3, #-52]
 80229dc:	ea4b 4111 	orr.w	r1, fp, r1, lsr #16
 80229e0:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80229e4:	f843 7c40 	str.w	r7, [r3, #-64]
 80229e8:	f843 1c38 	str.w	r1, [r3, #-56]
 80229ec:	f843 2c3c 	str.w	r2, [r3, #-60]
 80229f0:	f855 6c0c 	ldr.w	r6, [r5, #-12]
 80229f4:	f850 1c0c 	ldr.w	r1, [r0, #-12]
 80229f8:	fa2f f286 	sxtb16	r2, r6
 80229fc:	ea4f 2c36 	mov.w	ip, r6, ror #8
 8022a00:	fa2f fc8c 	sxtb16	ip, ip
 8022a04:	ea0c 0609 	and.w	r6, ip, r9
 8022a08:	ea4f 2731 	mov.w	r7, r1, ror #8
 8022a0c:	fa2f f181 	sxtb16	r1, r1
 8022a10:	ea46 4612 	orr.w	r6, r6, r2, lsr #16
 8022a14:	fa1f fe81 	uxth.w	lr, r1
 8022a18:	fa2f f787 	sxtb16	r7, r7
 8022a1c:	b292      	uxth	r2, r2
 8022a1e:	ea07 0b09 	and.w	fp, r7, r9
 8022a22:	ea4e 4707 	orr.w	r7, lr, r7, lsl #16
 8022a26:	f843 6c24 	str.w	r6, [r3, #-36]
 8022a2a:	ea4b 4111 	orr.w	r1, fp, r1, lsr #16
 8022a2e:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8022a32:	f843 7c30 	str.w	r7, [r3, #-48]
 8022a36:	f843 1c28 	str.w	r1, [r3, #-40]
 8022a3a:	f843 2c2c 	str.w	r2, [r3, #-44]
 8022a3e:	f855 6c08 	ldr.w	r6, [r5, #-8]
 8022a42:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8022a46:	fa2f f286 	sxtb16	r2, r6
 8022a4a:	ea4f 2c36 	mov.w	ip, r6, ror #8
 8022a4e:	fa2f fc8c 	sxtb16	ip, ip
 8022a52:	ea0c 0609 	and.w	r6, ip, r9
 8022a56:	ea4f 2731 	mov.w	r7, r1, ror #8
 8022a5a:	fa2f f181 	sxtb16	r1, r1
 8022a5e:	ea46 4612 	orr.w	r6, r6, r2, lsr #16
 8022a62:	fa1f fe81 	uxth.w	lr, r1
 8022a66:	fa2f f787 	sxtb16	r7, r7
 8022a6a:	b292      	uxth	r2, r2
 8022a6c:	ea07 0b09 	and.w	fp, r7, r9
 8022a70:	ea4e 4707 	orr.w	r7, lr, r7, lsl #16
 8022a74:	f843 6c14 	str.w	r6, [r3, #-20]
 8022a78:	ea4b 4111 	orr.w	r1, fp, r1, lsr #16
 8022a7c:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8022a80:	f843 7c20 	str.w	r7, [r3, #-32]
 8022a84:	f843 1c18 	str.w	r1, [r3, #-24]
 8022a88:	f843 2c1c 	str.w	r2, [r3, #-28]
 8022a8c:	f855 6c04 	ldr.w	r6, [r5, #-4]
 8022a90:	f850 1c04 	ldr.w	r1, [r0, #-4]
 8022a94:	4284      	cmp	r4, r0
 8022a96:	fa2f f286 	sxtb16	r2, r6
 8022a9a:	ea4f 2c36 	mov.w	ip, r6, ror #8
 8022a9e:	fa2f fc8c 	sxtb16	ip, ip
 8022aa2:	ea0c 0609 	and.w	r6, ip, r9
 8022aa6:	ea4f 2731 	mov.w	r7, r1, ror #8
 8022aaa:	fa2f f181 	sxtb16	r1, r1
 8022aae:	fa2f f787 	sxtb16	r7, r7
 8022ab2:	fa1f fe81 	uxth.w	lr, r1
 8022ab6:	ea07 0b09 	and.w	fp, r7, r9
 8022aba:	ea46 4612 	orr.w	r6, r6, r2, lsr #16
 8022abe:	b292      	uxth	r2, r2
 8022ac0:	ea4b 4111 	orr.w	r1, fp, r1, lsr #16
 8022ac4:	f843 6c04 	str.w	r6, [r3, #-4]
 8022ac8:	ea4e 4707 	orr.w	r7, lr, r7, lsl #16
 8022acc:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8022ad0:	f843 1c08 	str.w	r1, [r3, #-8]
 8022ad4:	f843 7c10 	str.w	r7, [r3, #-16]
 8022ad8:	f843 2c0c 	str.w	r2, [r3, #-12]
 8022adc:	f47f af5f 	bne.w	802299e <st_int8_to16_dual+0x46>
 8022ae0:	9b08      	ldr	r3, [sp, #32]
 8022ae2:	4498      	add	r8, r3
 8022ae4:	9b02      	ldr	r3, [sp, #8]
 8022ae6:	449a      	add	sl, r3
 8022ae8:	469c      	mov	ip, r3
 8022aea:	9b06      	ldr	r3, [sp, #24]
 8022aec:	4563      	cmp	r3, ip
 8022aee:	db3f      	blt.n	8022b70 <st_int8_to16_dual+0x218>
 8022af0:	eba3 030c 	sub.w	r3, r3, ip
 8022af4:	4657      	mov	r7, sl
 8022af6:	4645      	mov	r5, r8
 8022af8:	089b      	lsrs	r3, r3, #2
 8022afa:	9303      	str	r3, [sp, #12]
 8022afc:	3301      	adds	r3, #1
 8022afe:	9304      	str	r3, [sp, #16]
 8022b00:	009b      	lsls	r3, r3, #2
 8022b02:	eb04 0e03 	add.w	lr, r4, r3
 8022b06:	9305      	str	r3, [sp, #20]
 8022b08:	f854 2b04 	ldr.w	r2, [r4], #4
 8022b0c:	3510      	adds	r5, #16
 8022b0e:	f857 3b04 	ldr.w	r3, [r7], #4
 8022b12:	ea4f 2032 	mov.w	r0, r2, ror #8
 8022b16:	4574      	cmp	r4, lr
 8022b18:	fa2f f080 	sxtb16	r0, r0
 8022b1c:	ea00 0609 	and.w	r6, r0, r9
 8022b20:	ea4f 2133 	mov.w	r1, r3, ror #8
 8022b24:	fa2f f282 	sxtb16	r2, r2
 8022b28:	fa2f f181 	sxtb16	r1, r1
 8022b2c:	fa1f fb82 	uxth.w	fp, r2
 8022b30:	ea46 4212 	orr.w	r2, r6, r2, lsr #16
 8022b34:	ea01 0609 	and.w	r6, r1, r9
 8022b38:	fa2f f383 	sxtb16	r3, r3
 8022b3c:	ea46 4613 	orr.w	r6, r6, r3, lsr #16
 8022b40:	f845 2c08 	str.w	r2, [r5, #-8]
 8022b44:	b29b      	uxth	r3, r3
 8022b46:	ea4b 4000 	orr.w	r0, fp, r0, lsl #16
 8022b4a:	f845 6c04 	str.w	r6, [r5, #-4]
 8022b4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8022b52:	f845 0c10 	str.w	r0, [r5, #-16]
 8022b56:	f845 3c0c 	str.w	r3, [r5, #-12]
 8022b5a:	d1d5      	bne.n	8022b08 <st_int8_to16_dual+0x1b0>
 8022b5c:	9b04      	ldr	r3, [sp, #16]
 8022b5e:	f10c 0c04 	add.w	ip, ip, #4
 8022b62:	eb08 1803 	add.w	r8, r8, r3, lsl #4
 8022b66:	9b05      	ldr	r3, [sp, #20]
 8022b68:	449a      	add	sl, r3
 8022b6a:	9b03      	ldr	r3, [sp, #12]
 8022b6c:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
 8022b70:	9b00      	ldr	r3, [sp, #0]
 8022b72:	4563      	cmp	r3, ip
 8022b74:	dd14      	ble.n	8022ba0 <st_int8_to16_dual+0x248>
 8022b76:	eba3 0c0c 	sub.w	ip, r3, ip
 8022b7a:	4652      	mov	r2, sl
 8022b7c:	f108 0304 	add.w	r3, r8, #4
 8022b80:	eb04 000c 	add.w	r0, r4, ip
 8022b84:	f914 1b01 	ldrsb.w	r1, [r4], #1
 8022b88:	3304      	adds	r3, #4
 8022b8a:	f823 1c08 	strh.w	r1, [r3, #-8]
 8022b8e:	4284      	cmp	r4, r0
 8022b90:	f912 1b01 	ldrsb.w	r1, [r2], #1
 8022b94:	f823 1c06 	strh.w	r1, [r3, #-6]
 8022b98:	d1f4      	bne.n	8022b84 <st_int8_to16_dual+0x22c>
 8022b9a:	44e2      	add	sl, ip
 8022b9c:	eb08 088c 	add.w	r8, r8, ip, lsl #2
 8022ba0:	9b01      	ldr	r3, [sp, #4]
 8022ba2:	9a00      	ldr	r2, [sp, #0]
 8022ba4:	3b01      	subs	r3, #1
 8022ba6:	18a0      	adds	r0, r4, r2
 8022ba8:	4492      	add	sl, r2
 8022baa:	b29b      	uxth	r3, r3
 8022bac:	9301      	str	r3, [sp, #4]
 8022bae:	2b00      	cmp	r3, #0
 8022bb0:	f47f aeed 	bne.w	802298e <st_int8_to16_dual+0x36>
 8022bb4:	46c2      	mov	sl, r8
 8022bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022bb8:	07db      	lsls	r3, r3, #31
 8022bba:	d52e      	bpl.n	8022c1a <st_int8_to16_dual+0x2c2>
 8022bbc:	9b00      	ldr	r3, [sp, #0]
 8022bbe:	3b04      	subs	r3, #4
 8022bc0:	d432      	bmi.n	8022c28 <st_int8_to16_dual+0x2d0>
 8022bc2:	089b      	lsrs	r3, r3, #2
 8022bc4:	4605      	mov	r5, r0
 8022bc6:	4f1a      	ldr	r7, [pc, #104]	; (8022c30 <st_int8_to16_dual+0x2d8>)
 8022bc8:	1c5e      	adds	r6, r3, #1
 8022bca:	eb0a 04c6 	add.w	r4, sl, r6, lsl #3
 8022bce:	f855 3b04 	ldr.w	r3, [r5], #4
 8022bd2:	f10a 0a08 	add.w	sl, sl, #8
 8022bd6:	fa2f fc83 	sxtb16	ip, r3
 8022bda:	ea4f 2333 	mov.w	r3, r3, ror #8
 8022bde:	fa1f f18c 	uxth.w	r1, ip
 8022be2:	fa2f f383 	sxtb16	r3, r3
 8022be6:	ea03 0207 	and.w	r2, r3, r7
 8022bea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8022bee:	ea42 421c 	orr.w	r2, r2, ip, lsr #16
 8022bf2:	f84a 3c08 	str.w	r3, [sl, #-8]
 8022bf6:	f84a 2c04 	str.w	r2, [sl, #-4]
 8022bfa:	4554      	cmp	r4, sl
 8022bfc:	d1e7      	bne.n	8022bce <st_int8_to16_dual+0x276>
 8022bfe:	00b3      	lsls	r3, r6, #2
 8022c00:	4418      	add	r0, r3
 8022c02:	9a00      	ldr	r2, [sp, #0]
 8022c04:	429a      	cmp	r2, r3
 8022c06:	dd08      	ble.n	8022c1a <st_int8_to16_dual+0x2c2>
 8022c08:	1ad3      	subs	r3, r2, r3
 8022c0a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8022c0e:	f910 2b01 	ldrsb.w	r2, [r0], #1
 8022c12:	f824 2b02 	strh.w	r2, [r4], #2
 8022c16:	429c      	cmp	r4, r3
 8022c18:	d1f9      	bne.n	8022c0e <st_int8_to16_dual+0x2b6>
 8022c1a:	b00b      	add	sp, #44	; 0x2c
 8022c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022c20:	4604      	mov	r4, r0
 8022c22:	f04f 0c00 	mov.w	ip, #0
 8022c26:	e760      	b.n	8022aea <st_int8_to16_dual+0x192>
 8022c28:	4654      	mov	r4, sl
 8022c2a:	2300      	movs	r3, #0
 8022c2c:	e7e9      	b.n	8022c02 <st_int8_to16_dual+0x2aa>
 8022c2e:	bf00      	nop
 8022c30:	ffff0000 	.word	0xffff0000

08022c34 <st_sssa8_ch_fullW_prefetch>:
 8022c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c38:	b087      	sub	sp, #28
 8022c3a:	eb00 0c02 	add.w	ip, r0, r2
 8022c3e:	9105      	str	r1, [sp, #20]
 8022c40:	1049      	asrs	r1, r1, #1
 8022c42:	9100      	str	r1, [sp, #0]
 8022c44:	f000 80d7 	beq.w	8022df6 <st_sssa8_ch_fullW_prefetch+0x1c2>
 8022c48:	f1a2 0110 	sub.w	r1, r2, #16
 8022c4c:	1ed4      	subs	r4, r2, #3
 8022c4e:	0909      	lsrs	r1, r1, #4
 8022c50:	9402      	str	r4, [sp, #8]
 8022c52:	1f14      	subs	r4, r2, #4
 8022c54:	3101      	adds	r1, #1
 8022c56:	9404      	str	r4, [sp, #16]
 8022c58:	ea4f 1a01 	mov.w	sl, r1, lsl #4
 8022c5c:	0189      	lsls	r1, r1, #6
 8022c5e:	9103      	str	r1, [sp, #12]
 8022c60:	2a0f      	cmp	r2, #15
 8022c62:	f340 80dd 	ble.w	8022e20 <st_sssa8_ch_fullW_prefetch+0x1ec>
 8022c66:	eb00 040a 	add.w	r4, r0, sl
 8022c6a:	4665      	mov	r5, ip
 8022c6c:	4619      	mov	r1, r3
 8022c6e:	6807      	ldr	r7, [r0, #0]
 8022c70:	3010      	adds	r0, #16
 8022c72:	682e      	ldr	r6, [r5, #0]
 8022c74:	3140      	adds	r1, #64	; 0x40
 8022c76:	ea4f 2e37 	mov.w	lr, r7, ror #8
 8022c7a:	3510      	adds	r5, #16
 8022c7c:	fa2f f787 	sxtb16	r7, r7
 8022c80:	fa2f fe8e 	sxtb16	lr, lr
 8022c84:	f841 7c40 	str.w	r7, [r1, #-64]
 8022c88:	ea4f 2736 	mov.w	r7, r6, ror #8
 8022c8c:	f841 ec3c 	str.w	lr, [r1, #-60]
 8022c90:	fa2f f787 	sxtb16	r7, r7
 8022c94:	fa2f f686 	sxtb16	r6, r6
 8022c98:	f841 7c34 	str.w	r7, [r1, #-52]
 8022c9c:	f841 6c38 	str.w	r6, [r1, #-56]
 8022ca0:	f850 7c0c 	ldr.w	r7, [r0, #-12]
 8022ca4:	f855 6c0c 	ldr.w	r6, [r5, #-12]
 8022ca8:	ea4f 2e37 	mov.w	lr, r7, ror #8
 8022cac:	fa2f f787 	sxtb16	r7, r7
 8022cb0:	fa2f fe8e 	sxtb16	lr, lr
 8022cb4:	f841 7c30 	str.w	r7, [r1, #-48]
 8022cb8:	ea4f 2736 	mov.w	r7, r6, ror #8
 8022cbc:	f841 ec2c 	str.w	lr, [r1, #-44]
 8022cc0:	fa2f f787 	sxtb16	r7, r7
 8022cc4:	fa2f f686 	sxtb16	r6, r6
 8022cc8:	f841 7c24 	str.w	r7, [r1, #-36]
 8022ccc:	f841 6c28 	str.w	r6, [r1, #-40]
 8022cd0:	f850 7c08 	ldr.w	r7, [r0, #-8]
 8022cd4:	f855 6c08 	ldr.w	r6, [r5, #-8]
 8022cd8:	ea4f 2e37 	mov.w	lr, r7, ror #8
 8022cdc:	fa2f f787 	sxtb16	r7, r7
 8022ce0:	fa2f fe8e 	sxtb16	lr, lr
 8022ce4:	f841 7c20 	str.w	r7, [r1, #-32]
 8022ce8:	ea4f 2736 	mov.w	r7, r6, ror #8
 8022cec:	f841 ec1c 	str.w	lr, [r1, #-28]
 8022cf0:	fa2f f787 	sxtb16	r7, r7
 8022cf4:	fa2f f686 	sxtb16	r6, r6
 8022cf8:	f841 7c14 	str.w	r7, [r1, #-20]
 8022cfc:	f841 6c18 	str.w	r6, [r1, #-24]
 8022d00:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8022d04:	4284      	cmp	r4, r0
 8022d06:	f855 6c04 	ldr.w	r6, [r5, #-4]
 8022d0a:	ea4f 2e37 	mov.w	lr, r7, ror #8
 8022d0e:	fa2f f787 	sxtb16	r7, r7
 8022d12:	fa2f fe8e 	sxtb16	lr, lr
 8022d16:	f841 7c10 	str.w	r7, [r1, #-16]
 8022d1a:	ea4f 2736 	mov.w	r7, r6, ror #8
 8022d1e:	f841 ec0c 	str.w	lr, [r1, #-12]
 8022d22:	fa2f f787 	sxtb16	r7, r7
 8022d26:	fa2f f686 	sxtb16	r6, r6
 8022d2a:	f841 7c04 	str.w	r7, [r1, #-4]
 8022d2e:	f841 6c08 	str.w	r6, [r1, #-8]
 8022d32:	d19c      	bne.n	8022c6e <st_sssa8_ch_fullW_prefetch+0x3a>
 8022d34:	9903      	ldr	r1, [sp, #12]
 8022d36:	44d4      	add	ip, sl
 8022d38:	46d6      	mov	lr, sl
 8022d3a:	440b      	add	r3, r1
 8022d3c:	9902      	ldr	r1, [sp, #8]
 8022d3e:	458e      	cmp	lr, r1
 8022d40:	da30      	bge.n	8022da4 <st_sssa8_ch_fullW_prefetch+0x170>
 8022d42:	9904      	ldr	r1, [sp, #16]
 8022d44:	4667      	mov	r7, ip
 8022d46:	eba1 090e 	sub.w	r9, r1, lr
 8022d4a:	4619      	mov	r1, r3
 8022d4c:	ea4f 0999 	mov.w	r9, r9, lsr #2
 8022d50:	f109 0b01 	add.w	fp, r9, #1
 8022d54:	ea4f 008b 	mov.w	r0, fp, lsl #2
 8022d58:	eb04 0800 	add.w	r8, r4, r0
 8022d5c:	9001      	str	r0, [sp, #4]
 8022d5e:	f854 5b04 	ldr.w	r5, [r4], #4
 8022d62:	3110      	adds	r1, #16
 8022d64:	f857 0b04 	ldr.w	r0, [r7], #4
 8022d68:	4544      	cmp	r4, r8
 8022d6a:	ea4f 2635 	mov.w	r6, r5, ror #8
 8022d6e:	fa2f f585 	sxtb16	r5, r5
 8022d72:	fa2f f686 	sxtb16	r6, r6
 8022d76:	f841 5c10 	str.w	r5, [r1, #-16]
 8022d7a:	ea4f 2530 	mov.w	r5, r0, ror #8
 8022d7e:	f841 6c0c 	str.w	r6, [r1, #-12]
 8022d82:	fa2f f585 	sxtb16	r5, r5
 8022d86:	fa2f f080 	sxtb16	r0, r0
 8022d8a:	f841 5c04 	str.w	r5, [r1, #-4]
 8022d8e:	f841 0c08 	str.w	r0, [r1, #-8]
 8022d92:	d1e4      	bne.n	8022d5e <st_sssa8_ch_fullW_prefetch+0x12a>
 8022d94:	f10e 0e04 	add.w	lr, lr, #4
 8022d98:	9901      	ldr	r1, [sp, #4]
 8022d9a:	eb03 130b 	add.w	r3, r3, fp, lsl #4
 8022d9e:	448c      	add	ip, r1
 8022da0:	eb0e 0e89 	add.w	lr, lr, r9, lsl #2
 8022da4:	4572      	cmp	r2, lr
 8022da6:	dd1f      	ble.n	8022de8 <st_sssa8_ch_fullW_prefetch+0x1b4>
 8022da8:	f994 0000 	ldrsb.w	r0, [r4]
 8022dac:	f10e 0101 	add.w	r1, lr, #1
 8022db0:	8018      	strh	r0, [r3, #0]
 8022db2:	428a      	cmp	r2, r1
 8022db4:	f99c 0000 	ldrsb.w	r0, [ip]
 8022db8:	8058      	strh	r0, [r3, #2]
 8022dba:	dd2c      	ble.n	8022e16 <st_sssa8_ch_fullW_prefetch+0x1e2>
 8022dbc:	f994 1001 	ldrsb.w	r1, [r4, #1]
 8022dc0:	f10e 0e02 	add.w	lr, lr, #2
 8022dc4:	8099      	strh	r1, [r3, #4]
 8022dc6:	4572      	cmp	r2, lr
 8022dc8:	f99c 1001 	ldrsb.w	r1, [ip, #1]
 8022dcc:	80d9      	strh	r1, [r3, #6]
 8022dce:	dd2b      	ble.n	8022e28 <st_sssa8_ch_fullW_prefetch+0x1f4>
 8022dd0:	f994 1002 	ldrsb.w	r1, [r4, #2]
 8022dd4:	f10c 0c03 	add.w	ip, ip, #3
 8022dd8:	3403      	adds	r4, #3
 8022dda:	330c      	adds	r3, #12
 8022ddc:	f823 1c04 	strh.w	r1, [r3, #-4]
 8022de0:	f91c 1c01 	ldrsb.w	r1, [ip, #-1]
 8022de4:	f823 1c02 	strh.w	r1, [r3, #-2]
 8022de8:	9900      	ldr	r1, [sp, #0]
 8022dea:	18a0      	adds	r0, r4, r2
 8022dec:	4494      	add	ip, r2
 8022dee:	3901      	subs	r1, #1
 8022df0:	9100      	str	r1, [sp, #0]
 8022df2:	f47f af35 	bne.w	8022c60 <st_sssa8_ch_fullW_prefetch+0x2c>
 8022df6:	9905      	ldr	r1, [sp, #20]
 8022df8:	07c9      	lsls	r1, r1, #31
 8022dfa:	d509      	bpl.n	8022e10 <st_sssa8_ch_fullW_prefetch+0x1dc>
 8022dfc:	2a00      	cmp	r2, #0
 8022dfe:	dd07      	ble.n	8022e10 <st_sssa8_ch_fullW_prefetch+0x1dc>
 8022e00:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8022e04:	f910 1b01 	ldrsb.w	r1, [r0], #1
 8022e08:	f823 1b02 	strh.w	r1, [r3], #2
 8022e0c:	4293      	cmp	r3, r2
 8022e0e:	d1f9      	bne.n	8022e04 <st_sssa8_ch_fullW_prefetch+0x1d0>
 8022e10:	b007      	add	sp, #28
 8022e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022e16:	3401      	adds	r4, #1
 8022e18:	f10c 0c01 	add.w	ip, ip, #1
 8022e1c:	3304      	adds	r3, #4
 8022e1e:	e7e3      	b.n	8022de8 <st_sssa8_ch_fullW_prefetch+0x1b4>
 8022e20:	4604      	mov	r4, r0
 8022e22:	f04f 0e00 	mov.w	lr, #0
 8022e26:	e789      	b.n	8022d3c <st_sssa8_ch_fullW_prefetch+0x108>
 8022e28:	3402      	adds	r4, #2
 8022e2a:	f10c 0c02 	add.w	ip, ip, #2
 8022e2e:	3308      	adds	r3, #8
 8022e30:	e7da      	b.n	8022de8 <st_sssa8_ch_fullW_prefetch+0x1b4>
 8022e32:	bf00      	nop

08022e34 <st_sssa8_ch_nn_mat_mult_nt_t>:
 8022e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022e38:	b0b3      	sub	sp, #204	; 0xcc
 8022e3a:	9023      	str	r0, [sp, #140]	; 0x8c
 8022e3c:	9224      	str	r2, [sp, #144]	; 0x90
 8022e3e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8022e40:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8022e42:	9129      	str	r1, [sp, #164]	; 0xa4
 8022e44:	2800      	cmp	r0, #0
 8022e46:	bf18      	it	ne
 8022e48:	4602      	movne	r2, r0
 8022e4a:	932e      	str	r3, [sp, #184]	; 0xb8
 8022e4c:	f8dd b100 	ldr.w	fp, [sp, #256]	; 0x100
 8022e50:	9243      	str	r2, [sp, #268]	; 0x10c
 8022e52:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8022e54:	2a01      	cmp	r2, #1
 8022e56:	f340 823b 	ble.w	80232d0 <st_sssa8_ch_nn_mat_mult_nt_t+0x49c>
 8022e5a:	f00b 0403 	and.w	r4, fp, #3
 8022e5e:	3a02      	subs	r2, #2
 8022e60:	ea4f 00ab 	mov.w	r0, fp, asr #2
 8022e64:	461e      	mov	r6, r3
 8022e66:	942c      	str	r4, [sp, #176]	; 0xb0
 8022e68:	f1ab 040f 	sub.w	r4, fp, #15
 8022e6c:	0852      	lsrs	r2, r2, #1
 8022e6e:	f1ab 0310 	sub.w	r3, fp, #16
 8022e72:	9411      	str	r4, [sp, #68]	; 0x44
 8022e74:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8022e76:	091b      	lsrs	r3, r3, #4
 8022e78:	9230      	str	r2, [sp, #192]	; 0xc0
 8022e7a:	00d2      	lsls	r2, r2, #3
 8022e7c:	f004 0401 	and.w	r4, r4, #1
 8022e80:	3301      	adds	r3, #1
 8022e82:	320c      	adds	r2, #12
 8022e84:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
 8022e86:	9425      	str	r4, [sp, #148]	; 0x94
 8022e88:	9c3d      	ldr	r4, [sp, #244]	; 0xf4
 8022e8a:	106d      	asrs	r5, r5, #1
 8022e8c:	9227      	str	r2, [sp, #156]	; 0x9c
 8022e8e:	3402      	adds	r4, #2
 8022e90:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8022e92:	902b      	str	r0, [sp, #172]	; 0xac
 8022e94:	9417      	str	r4, [sp, #92]	; 0x5c
 8022e96:	0084      	lsls	r4, r0, #2
 8022e98:	0052      	lsls	r2, r2, #1
 8022e9a:	9526      	str	r5, [sp, #152]	; 0x98
 8022e9c:	9431      	str	r4, [sp, #196]	; 0xc4
 8022e9e:	445c      	add	r4, fp
 8022ea0:	9212      	str	r2, [sp, #72]	; 0x48
 8022ea2:	942f      	str	r4, [sp, #188]	; 0xbc
 8022ea4:	011c      	lsls	r4, r3, #4
 8022ea6:	019b      	lsls	r3, r3, #6
 8022ea8:	9616      	str	r6, [sp, #88]	; 0x58
 8022eaa:	9405      	str	r4, [sp, #20]
 8022eac:	9322      	str	r3, [sp, #136]	; 0x88
 8022eae:	fb02 f305 	mul.w	r3, r2, r5
 8022eb2:	911c      	str	r1, [sp, #112]	; 0x70
 8022eb4:	9328      	str	r3, [sp, #160]	; 0xa0
 8022eb6:	0103      	lsls	r3, r0, #4
 8022eb8:	932d      	str	r3, [sp, #180]	; 0xb4
 8022eba:	ea4f 034b 	mov.w	r3, fp, lsl #1
 8022ebe:	9321      	str	r3, [sp, #132]	; 0x84
 8022ec0:	2304      	movs	r3, #4
 8022ec2:	9315      	str	r3, [sp, #84]	; 0x54
 8022ec4:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8022ec8:	932a      	str	r3, [sp, #168]	; 0xa8
 8022eca:	f1ab 0304 	sub.w	r3, fp, #4
 8022ece:	9314      	str	r3, [sp, #80]	; 0x50
 8022ed0:	f10b 0301 	add.w	r3, fp, #1
 8022ed4:	930b      	str	r3, [sp, #44]	; 0x2c
 8022ed6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022ed8:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 8022eda:	9942      	ldr	r1, [sp, #264]	; 0x108
 8022edc:	441a      	add	r2, r3
 8022ede:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8022ee0:	4419      	add	r1, r3
 8022ee2:	9220      	str	r2, [sp, #128]	; 0x80
 8022ee4:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8022ee8:	911f      	str	r1, [sp, #124]	; 0x7c
 8022eea:	920c      	str	r2, [sp, #48]	; 0x30
 8022eec:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8022ef0:	f930 4c02 	ldrsh.w	r4, [r0, #-2]
 8022ef4:	920e      	str	r2, [sp, #56]	; 0x38
 8022ef6:	f9b0 2000 	ldrsh.w	r2, [r0]
 8022efa:	9403      	str	r4, [sp, #12]
 8022efc:	9204      	str	r2, [sp, #16]
 8022efe:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 8022f00:	4611      	mov	r1, r2
 8022f02:	58ca      	ldr	r2, [r1, r3]
 8022f04:	920d      	str	r2, [sp, #52]	; 0x34
 8022f06:	9a42      	ldr	r2, [sp, #264]	; 0x108
 8022f08:	58d3      	ldr	r3, [r2, r3]
 8022f0a:	930f      	str	r3, [sp, #60]	; 0x3c
 8022f0c:	9b44      	ldr	r3, [sp, #272]	; 0x110
 8022f0e:	2b00      	cmp	r3, #0
 8022f10:	f000 83f2 	beq.w	80236f8 <st_sssa8_ch_nn_mat_mult_nt_t+0x8c4>
 8022f14:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8022f16:	2b00      	cmp	r3, #0
 8022f18:	f040 839c 	bne.w	8023654 <st_sssa8_ch_nn_mat_mult_nt_t+0x820>
 8022f1c:	4619      	mov	r1, r3
 8022f1e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8022f20:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8022f22:	1910      	adds	r0, r2, r4
 8022f24:	5912      	ldr	r2, [r2, r4]
 8022f26:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8022f28:	4413      	add	r3, r2
 8022f2a:	f850 0c04 	ldr.w	r0, [r0, #-4]
 8022f2e:	930a      	str	r3, [sp, #40]	; 0x28
 8022f30:	180b      	adds	r3, r1, r0
 8022f32:	9309      	str	r3, [sp, #36]	; 0x24
 8022f34:	2c00      	cmp	r4, #0
 8022f36:	f000 8447 	beq.w	80237c8 <st_sssa8_ch_nn_mat_mult_nt_t+0x994>
 8022f3a:	9d40      	ldr	r5, [sp, #256]	; 0x100
 8022f3c:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8022f3e:	3d03      	subs	r5, #3
 8022f40:	9804      	ldr	r0, [sp, #16]
 8022f42:	9903      	ldr	r1, [sp, #12]
 8022f44:	9510      	str	r5, [sp, #64]	; 0x40
 8022f46:	1e83      	subs	r3, r0, #2
 8022f48:	9d43      	ldr	r5, [sp, #268]	; 0x10c
 8022f4a:	1e8a      	subs	r2, r1, #2
 8022f4c:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
 8022f50:	4435      	add	r5, r6
 8022f52:	f8dd b100 	ldr.w	fp, [sp, #256]	; 0x100
 8022f56:	9402      	str	r4, [sp, #8]
 8022f58:	9513      	str	r5, [sp, #76]	; 0x4c
 8022f5a:	2501      	movs	r5, #1
 8022f5c:	fa05 f303 	lsl.w	r3, r5, r3
 8022f60:	fa05 f202 	lsl.w	r2, r5, r2
 8022f64:	9319      	str	r3, [sp, #100]	; 0x64
 8022f66:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8022f68:	9218      	str	r2, [sp, #96]	; 0x60
 8022f6a:	9301      	str	r3, [sp, #4]
 8022f6c:	1a6b      	subs	r3, r5, r1
 8022f6e:	931d      	str	r3, [sp, #116]	; 0x74
 8022f70:	1e4b      	subs	r3, r1, #1
 8022f72:	931a      	str	r3, [sp, #104]	; 0x68
 8022f74:	1a2b      	subs	r3, r5, r0
 8022f76:	931e      	str	r3, [sp, #120]	; 0x78
 8022f78:	1e43      	subs	r3, r0, #1
 8022f7a:	931b      	str	r3, [sp, #108]	; 0x6c
 8022f7c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022f7e:	2b00      	cmp	r3, #0
 8022f80:	f340 8259 	ble.w	8023436 <st_sssa8_ch_nn_mat_mult_nt_t+0x602>
 8022f84:	9b05      	ldr	r3, [sp, #20]
 8022f86:	eb0a 090b 	add.w	r9, sl, fp
 8022f8a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8022f8c:	4453      	add	r3, sl
 8022f8e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8022f90:	f8dd 810c 	ldr.w	r8, [sp, #268]	; 0x10c
 8022f94:	9300      	str	r3, [sp, #0]
 8022f96:	4634      	mov	r4, r6
 8022f98:	4603      	mov	r3, r0
 8022f9a:	f8da 5000 	ldr.w	r5, [sl]
 8022f9e:	f8d8 2000 	ldr.w	r2, [r8]
 8022fa2:	fa2f f185 	sxtb16	r1, r5
 8022fa6:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8022faa:	fa2f f595 	sxtb16	r5, r5, ror #8
 8022fae:	f8d8 e008 	ldr.w	lr, [r8, #8]
 8022fb2:	f8d8 700c 	ldr.w	r7, [r8, #12]
 8022fb6:	fb21 6602 	smlad	r6, r1, r2, r6
 8022fba:	fb25 660c 	smlad	r6, r5, ip, r6
 8022fbe:	fb21 000e 	smlad	r0, r1, lr, r0
 8022fc2:	fb25 0007 	smlad	r0, r5, r7, r0
 8022fc6:	f85a 100b 	ldr.w	r1, [sl, fp]
 8022fca:	fa2f f581 	sxtb16	r5, r1
 8022fce:	fa2f f191 	sxtb16	r1, r1, ror #8
 8022fd2:	fb25 4202 	smlad	r2, r5, r2, r4
 8022fd6:	fb25 330e 	smlad	r3, r5, lr, r3
 8022fda:	fb21 220c 	smlad	r2, r1, ip, r2
 8022fde:	f8d8 c010 	ldr.w	ip, [r8, #16]
 8022fe2:	f8d8 4014 	ldr.w	r4, [r8, #20]
 8022fe6:	fb21 3707 	smlad	r7, r1, r7, r3
 8022fea:	f8da 3004 	ldr.w	r3, [sl, #4]
 8022fee:	f8d8 e018 	ldr.w	lr, [r8, #24]
 8022ff2:	fa2f f583 	sxtb16	r5, r3
 8022ff6:	f8d8 101c 	ldr.w	r1, [r8, #28]
 8022ffa:	fa2f f393 	sxtb16	r3, r3, ror #8
 8022ffe:	fb25 660c 	smlad	r6, r5, ip, r6
 8023002:	fb23 6604 	smlad	r6, r3, r4, r6
 8023006:	fb25 050e 	smlad	r5, r5, lr, r0
 802300a:	fb23 5501 	smlad	r5, r3, r1, r5
 802300e:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8023012:	fa2f f380 	sxtb16	r3, r0
 8023016:	fa2f f090 	sxtb16	r0, r0, ror #8
 802301a:	fb23 2c0c 	smlad	ip, r3, ip, r2
 802301e:	fb23 770e 	smlad	r7, r3, lr, r7
 8023022:	fb20 cc04 	smlad	ip, r0, r4, ip
 8023026:	f8d8 4020 	ldr.w	r4, [r8, #32]
 802302a:	f8d8 e024 	ldr.w	lr, [r8, #36]	; 0x24
 802302e:	fb20 7101 	smlad	r1, r0, r1, r7
 8023032:	f8da 2008 	ldr.w	r2, [sl, #8]
 8023036:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
 802303a:	fa2f f382 	sxtb16	r3, r2
 802303e:	f8d8 702c 	ldr.w	r7, [r8, #44]	; 0x2c
 8023042:	fa2f f292 	sxtb16	r2, r2, ror #8
 8023046:	fb23 6604 	smlad	r6, r3, r4, r6
 802304a:	fb22 660e 	smlad	r6, r2, lr, r6
 802304e:	fb23 5300 	smlad	r3, r3, r0, r5
 8023052:	fb22 3207 	smlad	r2, r2, r7, r3
 8023056:	f8d9 5008 	ldr.w	r5, [r9, #8]
 802305a:	fa2f f985 	sxtb16	r9, r5
 802305e:	fa2f f595 	sxtb16	r5, r5, ror #8
 8023062:	fb29 c404 	smlad	r4, r9, r4, ip
 8023066:	fb29 1100 	smlad	r1, r9, r0, r1
 802306a:	fb25 4e0e 	smlad	lr, r5, lr, r4
 802306e:	f8d8 c030 	ldr.w	ip, [r8, #48]	; 0x30
 8023072:	f8d8 4034 	ldr.w	r4, [r8, #52]	; 0x34
 8023076:	fb25 1707 	smlad	r7, r5, r7, r1
 802307a:	f8da 000c 	ldr.w	r0, [sl, #12]
 802307e:	f108 0840 	add.w	r8, r8, #64	; 0x40
 8023082:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8023086:	f10a 0a10 	add.w	sl, sl, #16
 802308a:	f858 5c04 	ldr.w	r5, [r8, #-4]
 802308e:	fa2f f380 	sxtb16	r3, r0
 8023092:	fa2f f090 	sxtb16	r0, r0, ror #8
 8023096:	fb23 660c 	smlad	r6, r3, ip, r6
 802309a:	fb20 6604 	smlad	r6, r0, r4, r6
 802309e:	fb23 2201 	smlad	r2, r3, r1, r2
 80230a2:	fb20 2005 	smlad	r0, r0, r5, r2
 80230a6:	eb0a 090b 	add.w	r9, sl, fp
 80230aa:	f859 3c04 	ldr.w	r3, [r9, #-4]
 80230ae:	fa2f f283 	sxtb16	r2, r3
 80230b2:	fa2f f393 	sxtb16	r3, r3, ror #8
 80230b6:	fb22 ee0c 	smlad	lr, r2, ip, lr
 80230ba:	fb22 7701 	smlad	r7, r2, r1, r7
 80230be:	fb23 e404 	smlad	r4, r3, r4, lr
 80230c2:	fb23 7305 	smlad	r3, r3, r5, r7
 80230c6:	9a00      	ldr	r2, [sp, #0]
 80230c8:	4592      	cmp	sl, r2
 80230ca:	f47f af66 	bne.w	8022f9a <st_sssa8_ch_nn_mat_mult_nt_t+0x166>
 80230ce:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80230d0:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80230d4:	9200      	str	r2, [sp, #0]
 80230d6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80230d8:	4591      	cmp	r9, r2
 80230da:	da44      	bge.n	8023166 <st_sssa8_ch_nn_mat_mult_nt_t+0x332>
 80230dc:	9914      	ldr	r1, [sp, #80]	; 0x50
 80230de:	f8cd 9020 	str.w	r9, [sp, #32]
 80230e2:	eba1 0209 	sub.w	r2, r1, r9
 80230e6:	f8cd b100 	str.w	fp, [sp, #256]	; 0x100
 80230ea:	9f00      	ldr	r7, [sp, #0]
 80230ec:	468b      	mov	fp, r1
 80230ee:	0892      	lsrs	r2, r2, #2
 80230f0:	9207      	str	r2, [sp, #28]
 80230f2:	3201      	adds	r2, #1
 80230f4:	9206      	str	r2, [sp, #24]
 80230f6:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 80230fa:	4691      	mov	r9, r2
 80230fc:	f85a 2b04 	ldr.w	r2, [sl], #4
 8023100:	3710      	adds	r7, #16
 8023102:	f857 5c10 	ldr.w	r5, [r7, #-16]
 8023106:	f857 ec0c 	ldr.w	lr, [r7, #-12]
 802310a:	f857 8c08 	ldr.w	r8, [r7, #-8]
 802310e:	fa2f f182 	sxtb16	r1, r2
 8023112:	f857 cc04 	ldr.w	ip, [r7, #-4]
 8023116:	fa2f f292 	sxtb16	r2, r2, ror #8
 802311a:	fb21 6605 	smlad	r6, r1, r5, r6
 802311e:	fb22 660e 	smlad	r6, r2, lr, r6
 8023122:	fb21 0008 	smlad	r0, r1, r8, r0
 8023126:	fb22 000c 	smlad	r0, r2, ip, r0
 802312a:	f85a 200b 	ldr.w	r2, [sl, fp]
 802312e:	fa2f f182 	sxtb16	r1, r2
 8023132:	fa2f f292 	sxtb16	r2, r2, ror #8
 8023136:	fb21 4405 	smlad	r4, r1, r5, r4
 802313a:	fb21 3308 	smlad	r3, r1, r8, r3
 802313e:	fb22 440e 	smlad	r4, r2, lr, r4
 8023142:	fb22 330c 	smlad	r3, r2, ip, r3
 8023146:	45ca      	cmp	sl, r9
 8023148:	d1d8      	bne.n	80230fc <st_sssa8_ch_nn_mat_mult_nt_t+0x2c8>
 802314a:	9a00      	ldr	r2, [sp, #0]
 802314c:	9906      	ldr	r1, [sp, #24]
 802314e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8023152:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8023156:	f8dd b100 	ldr.w	fp, [sp, #256]	; 0x100
 802315a:	f109 0904 	add.w	r9, r9, #4
 802315e:	9200      	str	r2, [sp, #0]
 8023160:	9a07      	ldr	r2, [sp, #28]
 8023162:	eb09 0982 	add.w	r9, r9, r2, lsl #2
 8023166:	45cb      	cmp	fp, r9
 8023168:	eb0a 020b 	add.w	r2, sl, fp
 802316c:	f340 812a 	ble.w	80233c4 <st_sssa8_ch_nn_mat_mult_nt_t+0x590>
 8023170:	9900      	ldr	r1, [sp, #0]
 8023172:	f109 0201 	add.w	r2, r9, #1
 8023176:	f99a c000 	ldrsb.w	ip, [sl]
 802317a:	f9b1 7000 	ldrsh.w	r7, [r1]
 802317e:	4593      	cmp	fp, r2
 8023180:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8023184:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8023186:	fb17 660c 	smlabb	r6, r7, ip, r6
 802318a:	fb15 000c 	smlabb	r0, r5, ip, r0
 802318e:	eb0a 0e01 	add.w	lr, sl, r1
 8023192:	f91a 100b 	ldrsb.w	r1, [sl, fp]
 8023196:	fb17 4401 	smlabb	r4, r7, r1, r4
 802319a:	fb15 3301 	smlabb	r3, r5, r1, r3
 802319e:	f340 8113 	ble.w	80233c8 <st_sssa8_ch_nn_mat_mult_nt_t+0x594>
 80231a2:	9a00      	ldr	r2, [sp, #0]
 80231a4:	f109 0902 	add.w	r9, r9, #2
 80231a8:	f99a 7001 	ldrsb.w	r7, [sl, #1]
 80231ac:	f10a 0c02 	add.w	ip, sl, #2
 80231b0:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 80231b4:	45cb      	cmp	fp, r9
 80231b6:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 80231ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80231bc:	fb15 6607 	smlabb	r6, r5, r7, r6
 80231c0:	fb11 0007 	smlabb	r0, r1, r7, r0
 80231c4:	4696      	mov	lr, r2
 80231c6:	f91a 2002 	ldrsb.w	r2, [sl, r2]
 80231ca:	fb15 4402 	smlabb	r4, r5, r2, r4
 80231ce:	eb0c 050b 	add.w	r5, ip, fp
 80231d2:	fb11 3302 	smlabb	r3, r1, r2, r3
 80231d6:	f340 8137 	ble.w	8023448 <st_sssa8_ch_nn_mat_mult_nt_t+0x614>
 80231da:	9a00      	ldr	r2, [sp, #0]
 80231dc:	f10a 0703 	add.w	r7, sl, #3
 80231e0:	f91c 500b 	ldrsb.w	r5, [ip, fp]
 80231e4:	f9b2 1008 	ldrsh.w	r1, [r2, #8]
 80231e8:	f9b2 c00a 	ldrsh.w	ip, [r2, #10]
 80231ec:	f99a 2002 	ldrsb.w	r2, [sl, #2]
 80231f0:	fb11 4405 	smlabb	r4, r1, r5, r4
 80231f4:	fb1c 3305 	smlabb	r3, ip, r5, r3
 80231f8:	eb07 0a0b 	add.w	sl, r7, fp
 80231fc:	fb11 6602 	smlabb	r6, r1, r2, r6
 8023200:	fb1c 0002 	smlabb	r0, ip, r2, r0
 8023204:	9a03      	ldr	r2, [sp, #12]
 8023206:	2a15      	cmp	r2, #21
 8023208:	f340 80c7 	ble.w	802339a <st_sssa8_ch_nn_mat_mult_nt_t+0x566>
 802320c:	991a      	ldr	r1, [sp, #104]	; 0x68
 802320e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023210:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8023212:	fb56 5602 	smmla	r6, r6, r2, r5
 8023216:	fb54 5402 	smmla	r4, r4, r2, r5
 802321a:	410e      	asrs	r6, r1
 802321c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802321e:	4416      	add	r6, r2
 8023220:	f306 0607 	ssat	r6, #8, r6
 8023224:	410c      	asrs	r4, r1
 8023226:	9901      	ldr	r1, [sp, #4]
 8023228:	4414      	add	r4, r2
 802322a:	700e      	strb	r6, [r1, #0]
 802322c:	f304 0407 	ssat	r4, #8, r4
 8023230:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8023232:	548c      	strb	r4, [r1, r2]
 8023234:	9a04      	ldr	r2, [sp, #16]
 8023236:	2a15      	cmp	r2, #21
 8023238:	f340 809e 	ble.w	8023378 <st_sssa8_ch_nn_mat_mult_nt_t+0x544>
 802323c:	991b      	ldr	r1, [sp, #108]	; 0x6c
 802323e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8023240:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8023242:	fb50 4002 	smmla	r0, r0, r2, r4
 8023246:	fb53 4302 	smmla	r3, r3, r2, r4
 802324a:	4108      	asrs	r0, r1
 802324c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802324e:	4410      	add	r0, r2
 8023250:	f300 0007 	ssat	r0, #8, r0
 8023254:	410b      	asrs	r3, r1
 8023256:	9901      	ldr	r1, [sp, #4]
 8023258:	4413      	add	r3, r2
 802325a:	7048      	strb	r0, [r1, #1]
 802325c:	f303 0307 	ssat	r3, #8, r3
 8023260:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8023262:	188a      	adds	r2, r1, r2
 8023264:	7053      	strb	r3, [r2, #1]
 8023266:	460b      	mov	r3, r1
 8023268:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802326a:	4413      	add	r3, r2
 802326c:	9301      	str	r3, [sp, #4]
 802326e:	9b02      	ldr	r3, [sp, #8]
 8023270:	3b01      	subs	r3, #1
 8023272:	9302      	str	r3, [sp, #8]
 8023274:	f47f ae82 	bne.w	8022f7c <st_sssa8_ch_nn_mat_mult_nt_t+0x148>
 8023278:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802327a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 802327c:	eb03 0b02 	add.w	fp, r3, r2
 8023280:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8023282:	2b00      	cmp	r3, #0
 8023284:	f040 80e2 	bne.w	802344c <st_sssa8_ch_nn_mat_mult_nt_t+0x618>
 8023288:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802328a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802328c:	4413      	add	r3, r2
 802328e:	931c      	str	r3, [sp, #112]	; 0x70
 8023290:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8023292:	3302      	adds	r3, #2
 8023294:	9316      	str	r3, [sp, #88]	; 0x58
 8023296:	9b44      	ldr	r3, [sp, #272]	; 0x110
 8023298:	b11b      	cbz	r3, 80232a2 <st_sssa8_ch_nn_mat_mult_nt_t+0x46e>
 802329a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 802329c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802329e:	4413      	add	r3, r2
 80232a0:	9343      	str	r3, [sp, #268]	; 0x10c
 80232a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80232a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80232a6:	3204      	adds	r2, #4
 80232a8:	3308      	adds	r3, #8
 80232aa:	9217      	str	r2, [sp, #92]	; 0x5c
 80232ac:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80232ae:	9315      	str	r3, [sp, #84]	; 0x54
 80232b0:	429a      	cmp	r2, r3
 80232b2:	f47f ae11 	bne.w	8022ed8 <st_sssa8_ch_nn_mat_mult_nt_t+0xa4>
 80232b6:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 80232b8:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80232ba:	3201      	adds	r2, #1
 80232bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80232be:	f8dd b100 	ldr.w	fp, [sp, #256]	; 0x100
 80232c2:	fb02 1303 	mla	r3, r2, r3, r1
 80232c6:	9329      	str	r3, [sp, #164]	; 0xa4
 80232c8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80232ca:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80232ce:	932e      	str	r3, [sp, #184]	; 0xb8
 80232d0:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 80232d2:	07db      	lsls	r3, r3, #31
 80232d4:	d54c      	bpl.n	8023370 <st_sssa8_ch_nn_mat_mult_nt_t+0x53c>
 80232d6:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 80232d8:	2b00      	cmp	r3, #0
 80232da:	dd49      	ble.n	8023370 <st_sssa8_ch_nn_mat_mult_nt_t+0x53c>
 80232dc:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 80232de:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
 80232e2:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 80232e6:	2500      	movs	r5, #0
 80232e8:	441e      	add	r6, r3
 80232ea:	f04f 0801 	mov.w	r8, #1
 80232ee:	441f      	add	r7, r3
 80232f0:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 80232f2:	00b6      	lsls	r6, r6, #2
 80232f4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80232f6:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 80232fa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80232fc:	f8dd a0b8 	ldr.w	sl, [sp, #184]	; 0xb8
 8023300:	4433      	add	r3, r6
 8023302:	f8dd 9104 	ldr.w	r9, [sp, #260]	; 0x104
 8023306:	469e      	mov	lr, r3
 8023308:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 802330a:	eb03 0c06 	add.w	ip, r3, r6
 802330e:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8023310:	f8cd e000 	str.w	lr, [sp]
 8023314:	441e      	add	r6, r3
 8023316:	9b00      	ldr	r3, [sp, #0]
 8023318:	f1bb 0f00 	cmp.w	fp, #0
 802331c:	6819      	ldr	r1, [r3, #0]
 802331e:	dd0d      	ble.n	802333c <st_sssa8_ch_nn_mat_mult_nt_t+0x508>
 8023320:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023322:	eb02 0e0b 	add.w	lr, r2, fp
 8023326:	1e58      	subs	r0, r3, #1
 8023328:	f912 3b01 	ldrsb.w	r3, [r2], #1
 802332c:	f910 4f01 	ldrsb.w	r4, [r0, #1]!
 8023330:	eba3 0309 	sub.w	r3, r3, r9
 8023334:	4572      	cmp	r2, lr
 8023336:	fb04 1103 	mla	r1, r4, r3, r1
 802333a:	d1f5      	bne.n	8023328 <st_sssa8_ch_nn_mat_mult_nt_t+0x4f4>
 802333c:	f9b7 0000 	ldrsh.w	r0, [r7]
 8023340:	f8dc e000 	ldr.w	lr, [ip]
 8023344:	2815      	cmp	r0, #21
 8023346:	6834      	ldr	r4, [r6, #0]
 8023348:	f340 8243 	ble.w	80237d2 <st_sssa8_ch_nn_mat_mult_nt_t+0x99e>
 802334c:	1e83      	subs	r3, r0, #2
 802334e:	3801      	subs	r0, #1
 8023350:	fa08 f303 	lsl.w	r3, r8, r3
 8023354:	fb51 330e 	smmla	r3, r1, lr, r3
 8023358:	4103      	asrs	r3, r0
 802335a:	4423      	add	r3, r4
 802335c:	f303 0307 	ssat	r3, #8, r3
 8023360:	f88a 3000 	strb.w	r3, [sl]
 8023364:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 8023366:	3501      	adds	r5, #1
 8023368:	449a      	add	sl, r3
 802336a:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 802336c:	42ab      	cmp	r3, r5
 802336e:	d1d2      	bne.n	8023316 <st_sssa8_ch_nn_mat_mult_nt_t+0x4e2>
 8023370:	2000      	movs	r0, #0
 8023372:	b033      	add	sp, #204	; 0xcc
 8023374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023378:	2a00      	cmp	r2, #0
 802337a:	dd27      	ble.n	80233cc <st_sssa8_ch_nn_mat_mult_nt_t+0x598>
 802337c:	990d      	ldr	r1, [sp, #52]	; 0x34
 802337e:	0040      	lsls	r0, r0, #1
 8023380:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8023382:	005b      	lsls	r3, r3, #1
 8023384:	fb50 5001 	smmla	r0, r0, r1, r5
 8023388:	fb53 5301 	smmla	r3, r3, r1, r5
 802338c:	4110      	asrs	r0, r2
 802338e:	f300 0007 	ssat	r0, #8, r0
 8023392:	9901      	ldr	r1, [sp, #4]
 8023394:	4113      	asrs	r3, r2
 8023396:	7048      	strb	r0, [r1, #1]
 8023398:	e760      	b.n	802325c <st_sssa8_ch_nn_mat_mult_nt_t+0x428>
 802339a:	2a00      	cmp	r2, #0
 802339c:	dd31      	ble.n	8023402 <st_sssa8_ch_nn_mat_mult_nt_t+0x5ce>
 802339e:	990c      	ldr	r1, [sp, #48]	; 0x30
 80233a0:	0076      	lsls	r6, r6, #1
 80233a2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80233a4:	0064      	lsls	r4, r4, #1
 80233a6:	fb56 7601 	smmla	r6, r6, r1, r7
 80233aa:	fb54 7401 	smmla	r4, r4, r1, r7
 80233ae:	4116      	asrs	r6, r2
 80233b0:	f306 0607 	ssat	r6, #8, r6
 80233b4:	9901      	ldr	r1, [sp, #4]
 80233b6:	4114      	asrs	r4, r2
 80233b8:	700e      	strb	r6, [r1, #0]
 80233ba:	f304 0407 	ssat	r4, #8, r4
 80233be:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 80233c0:	548c      	strb	r4, [r1, r2]
 80233c2:	e737      	b.n	8023234 <st_sssa8_ch_nn_mat_mult_nt_t+0x400>
 80233c4:	4692      	mov	sl, r2
 80233c6:	e71d      	b.n	8023204 <st_sssa8_ch_nn_mat_mult_nt_t+0x3d0>
 80233c8:	46f2      	mov	sl, lr
 80233ca:	e71b      	b.n	8023204 <st_sssa8_ch_nn_mat_mult_nt_t+0x3d0>
 80233cc:	991e      	ldr	r1, [sp, #120]	; 0x78
 80233ce:	fa00 f201 	lsl.w	r2, r0, r1
 80233d2:	f302 021f 	ssat	r2, #32, r2
 80233d6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80233d8:	fb52 f210 	smmulr	r2, r2, r0
 80233dc:	408b      	lsls	r3, r1
 80233de:	f303 031f 	ssat	r3, #32, r3
 80233e2:	fb53 f310 	smmulr	r3, r3, r0
 80233e6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80233e8:	440a      	add	r2, r1
 80233ea:	f302 0207 	ssat	r2, #8, r2
 80233ee:	9801      	ldr	r0, [sp, #4]
 80233f0:	440b      	add	r3, r1
 80233f2:	7042      	strb	r2, [r0, #1]
 80233f4:	f303 0307 	ssat	r3, #8, r3
 80233f8:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 80233fa:	1882      	adds	r2, r0, r2
 80233fc:	7053      	strb	r3, [r2, #1]
 80233fe:	4603      	mov	r3, r0
 8023400:	e732      	b.n	8023268 <st_sssa8_ch_nn_mat_mult_nt_t+0x434>
 8023402:	991d      	ldr	r1, [sp, #116]	; 0x74
 8023404:	fa06 f201 	lsl.w	r2, r6, r1
 8023408:	f302 021f 	ssat	r2, #32, r2
 802340c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802340e:	fb52 f215 	smmulr	r2, r2, r5
 8023412:	fa04 f101 	lsl.w	r1, r4, r1
 8023416:	f301 011f 	ssat	r1, #32, r1
 802341a:	fb51 f115 	smmulr	r1, r1, r5
 802341e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023420:	4422      	add	r2, r4
 8023422:	f302 0207 	ssat	r2, #8, r2
 8023426:	9d01      	ldr	r5, [sp, #4]
 8023428:	4421      	add	r1, r4
 802342a:	702a      	strb	r2, [r5, #0]
 802342c:	f301 0107 	ssat	r1, #8, r1
 8023430:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8023432:	54a9      	strb	r1, [r5, r2]
 8023434:	e6fe      	b.n	8023234 <st_sssa8_ch_nn_mat_mult_nt_t+0x400>
 8023436:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8023438:	f04f 0900 	mov.w	r9, #0
 802343c:	980a      	ldr	r0, [sp, #40]	; 0x28
 802343e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8023440:	9300      	str	r3, [sp, #0]
 8023442:	4603      	mov	r3, r0
 8023444:	4634      	mov	r4, r6
 8023446:	e646      	b.n	80230d6 <st_sssa8_ch_nn_mat_mult_nt_t+0x2a2>
 8023448:	46aa      	mov	sl, r5
 802344a:	e6db      	b.n	8023204 <st_sssa8_ch_nn_mat_mult_nt_t+0x3d0>
 802344c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802344e:	2b00      	cmp	r3, #0
 8023450:	f340 81fe 	ble.w	8023850 <st_sssa8_ch_nn_mat_mult_nt_t+0xa1c>
 8023454:	9b05      	ldr	r3, [sp, #20]
 8023456:	9d43      	ldr	r5, [sp, #268]	; 0x10c
 8023458:	eb0a 0703 	add.w	r7, sl, r3
 802345c:	e9dd 4309 	ldrd	r4, r3, [sp, #36]	; 0x24
 8023460:	f8da 2000 	ldr.w	r2, [sl]
 8023464:	6828      	ldr	r0, [r5, #0]
 8023466:	fa2f f182 	sxtb16	r1, r2
 802346a:	fa2f f292 	sxtb16	r2, r2, ror #8
 802346e:	fb21 4000 	smlad	r0, r1, r0, r4
 8023472:	686c      	ldr	r4, [r5, #4]
 8023474:	fb22 0404 	smlad	r4, r2, r4, r0
 8023478:	68a8      	ldr	r0, [r5, #8]
 802347a:	fb21 3300 	smlad	r3, r1, r0, r3
 802347e:	68e9      	ldr	r1, [r5, #12]
 8023480:	fb22 3201 	smlad	r2, r2, r1, r3
 8023484:	f8da 3004 	ldr.w	r3, [sl, #4]
 8023488:	6928      	ldr	r0, [r5, #16]
 802348a:	fa2f f183 	sxtb16	r1, r3
 802348e:	fa2f f393 	sxtb16	r3, r3, ror #8
 8023492:	fb21 4000 	smlad	r0, r1, r0, r4
 8023496:	696c      	ldr	r4, [r5, #20]
 8023498:	fb23 0404 	smlad	r4, r3, r4, r0
 802349c:	69a8      	ldr	r0, [r5, #24]
 802349e:	fb21 2100 	smlad	r1, r1, r0, r2
 80234a2:	69ea      	ldr	r2, [r5, #28]
 80234a4:	fb23 1302 	smlad	r3, r3, r2, r1
 80234a8:	f8da 2008 	ldr.w	r2, [sl, #8]
 80234ac:	6a28      	ldr	r0, [r5, #32]
 80234ae:	fa2f f182 	sxtb16	r1, r2
 80234b2:	fa2f f292 	sxtb16	r2, r2, ror #8
 80234b6:	fb21 4000 	smlad	r0, r1, r0, r4
 80234ba:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 80234bc:	fb22 0606 	smlad	r6, r2, r6, r0
 80234c0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80234c2:	fb21 3100 	smlad	r1, r1, r0, r3
 80234c6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80234c8:	fb22 1203 	smlad	r2, r2, r3, r1
 80234cc:	f8da 400c 	ldr.w	r4, [sl, #12]
 80234d0:	3540      	adds	r5, #64	; 0x40
 80234d2:	f855 0c10 	ldr.w	r0, [r5, #-16]
 80234d6:	f10a 0a10 	add.w	sl, sl, #16
 80234da:	f855 8c0c 	ldr.w	r8, [r5, #-12]
 80234de:	f855 ec08 	ldr.w	lr, [r5, #-8]
 80234e2:	f855 cc04 	ldr.w	ip, [r5, #-4]
 80234e6:	fa2f f184 	sxtb16	r1, r4
 80234ea:	fa2f f394 	sxtb16	r3, r4, ror #8
 80234ee:	fb21 6000 	smlad	r0, r1, r0, r6
 80234f2:	fb23 0408 	smlad	r4, r3, r8, r0
 80234f6:	fb21 220e 	smlad	r2, r1, lr, r2
 80234fa:	fb23 230c 	smlad	r3, r3, ip, r2
 80234fe:	45ba      	cmp	sl, r7
 8023500:	d1ae      	bne.n	8023460 <st_sssa8_ch_nn_mat_mult_nt_t+0x62c>
 8023502:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8023504:	f8dd e014 	ldr.w	lr, [sp, #20]
 8023508:	e9cd 4309 	strd	r4, r3, [sp, #36]	; 0x24
 802350c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 802350e:	eb03 0c02 	add.w	ip, r3, r2
 8023512:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8023514:	3b03      	subs	r3, #3
 8023516:	459e      	cmp	lr, r3
 8023518:	da34      	bge.n	8023584 <st_sssa8_ch_nn_mat_mult_nt_t+0x750>
 802351a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802351c:	4661      	mov	r1, ip
 802351e:	f8cd c000 	str.w	ip, [sp]
 8023522:	eba3 090e 	sub.w	r9, r3, lr
 8023526:	f8cd e004 	str.w	lr, [sp, #4]
 802352a:	ea4f 0999 	mov.w	r9, r9, lsr #2
 802352e:	f109 0801 	add.w	r8, r9, #1
 8023532:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
 8023536:	eb0a 0788 	add.w	r7, sl, r8, lsl #2
 802353a:	f85a 3b04 	ldr.w	r3, [sl], #4
 802353e:	3110      	adds	r1, #16
 8023540:	f851 0c10 	ldr.w	r0, [r1, #-16]
 8023544:	f851 ec0c 	ldr.w	lr, [r1, #-12]
 8023548:	f851 cc08 	ldr.w	ip, [r1, #-8]
 802354c:	f851 6c04 	ldr.w	r6, [r1, #-4]
 8023550:	fa2f f283 	sxtb16	r2, r3
 8023554:	fa2f f393 	sxtb16	r3, r3, ror #8
 8023558:	fb22 4400 	smlad	r4, r2, r0, r4
 802355c:	fb23 440e 	smlad	r4, r3, lr, r4
 8023560:	fb22 550c 	smlad	r5, r2, ip, r5
 8023564:	fb23 5506 	smlad	r5, r3, r6, r5
 8023568:	45ba      	cmp	sl, r7
 802356a:	d1e6      	bne.n	802353a <st_sssa8_ch_nn_mat_mult_nt_t+0x706>
 802356c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8023570:	f8dd c000 	ldr.w	ip, [sp]
 8023574:	f10e 0e04 	add.w	lr, lr, #4
 8023578:	eb0c 1c08 	add.w	ip, ip, r8, lsl #4
 802357c:	eb0e 0e89 	add.w	lr, lr, r9, lsl #2
 8023580:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
 8023584:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8023586:	4573      	cmp	r3, lr
 8023588:	dd2f      	ble.n	80235ea <st_sssa8_ch_nn_mat_mult_nt_t+0x7b6>
 802358a:	f99a 2000 	ldrsb.w	r2, [sl]
 802358e:	f10e 0301 	add.w	r3, lr, #1
 8023592:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8023594:	f8bc 0000 	ldrh.w	r0, [ip]
 8023598:	f8bc 1002 	ldrh.w	r1, [ip, #2]
 802359c:	fb10 4002 	smlabb	r0, r0, r2, r4
 80235a0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80235a2:	fb11 4402 	smlabb	r4, r1, r2, r4
 80235a6:	9a40      	ldr	r2, [sp, #256]	; 0x100
 80235a8:	9009      	str	r0, [sp, #36]	; 0x24
 80235aa:	429a      	cmp	r2, r3
 80235ac:	940a      	str	r4, [sp, #40]	; 0x28
 80235ae:	dd1c      	ble.n	80235ea <st_sssa8_ch_nn_mat_mult_nt_t+0x7b6>
 80235b0:	f99a 3001 	ldrsb.w	r3, [sl, #1]
 80235b4:	f10e 0e02 	add.w	lr, lr, #2
 80235b8:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 80235bc:	f8bc 2006 	ldrh.w	r2, [ip, #6]
 80235c0:	fb11 0003 	smlabb	r0, r1, r3, r0
 80235c4:	fb12 4403 	smlabb	r4, r2, r3, r4
 80235c8:	9b40      	ldr	r3, [sp, #256]	; 0x100
 80235ca:	9009      	str	r0, [sp, #36]	; 0x24
 80235cc:	4573      	cmp	r3, lr
 80235ce:	940a      	str	r4, [sp, #40]	; 0x28
 80235d0:	dd0b      	ble.n	80235ea <st_sssa8_ch_nn_mat_mult_nt_t+0x7b6>
 80235d2:	f99a 3002 	ldrsb.w	r3, [sl, #2]
 80235d6:	f8bc 2008 	ldrh.w	r2, [ip, #8]
 80235da:	f8bc 100a 	ldrh.w	r1, [ip, #10]
 80235de:	fb12 0203 	smlabb	r2, r2, r3, r0
 80235e2:	fb11 4303 	smlabb	r3, r1, r3, r4
 80235e6:	9209      	str	r2, [sp, #36]	; 0x24
 80235e8:	930a      	str	r3, [sp, #40]	; 0x28
 80235ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80235ec:	f933 2c02 	ldrsh.w	r2, [r3, #-2]
 80235f0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80235f2:	2a15      	cmp	r2, #21
 80235f4:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80235f8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80235fa:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80235fe:	f340 80d7 	ble.w	80237b0 <st_sssa8_ch_nn_mat_mult_nt_t+0x97c>
 8023602:	1e93      	subs	r3, r2, #2
 8023604:	2401      	movs	r4, #1
 8023606:	3a01      	subs	r2, #1
 8023608:	fa04 f303 	lsl.w	r3, r4, r3
 802360c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802360e:	fb54 3300 	smmla	r3, r4, r0, r3
 8023612:	4113      	asrs	r3, r2
 8023614:	440b      	add	r3, r1
 8023616:	f303 0307 	ssat	r3, #8, r3
 802361a:	f88b 3000 	strb.w	r3, [fp]
 802361e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023620:	f9b3 1000 	ldrsh.w	r1, [r3]
 8023624:	2915      	cmp	r1, #21
 8023626:	f340 80b1 	ble.w	802378c <st_sssa8_ch_nn_mat_mult_nt_t+0x958>
 802362a:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 802362c:	1e8a      	subs	r2, r1, #2
 802362e:	3901      	subs	r1, #1
 8023630:	461c      	mov	r4, r3
 8023632:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8023634:	58e0      	ldr	r0, [r4, r3]
 8023636:	2401      	movs	r4, #1
 8023638:	fa04 f202 	lsl.w	r2, r4, r2
 802363c:	9c42      	ldr	r4, [sp, #264]	; 0x108
 802363e:	58e3      	ldr	r3, [r4, r3]
 8023640:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023642:	fb54 2200 	smmla	r2, r4, r0, r2
 8023646:	410a      	asrs	r2, r1
 8023648:	4413      	add	r3, r2
 802364a:	f303 0307 	ssat	r3, #8, r3
 802364e:	f88b 3001 	strb.w	r3, [fp, #1]
 8023652:	e619      	b.n	8023288 <st_sssa8_ch_nn_mat_mult_nt_t+0x454>
 8023654:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 8023656:	2c00      	cmp	r4, #0
 8023658:	f000 80f6 	beq.w	8023848 <st_sssa8_ch_nn_mat_mult_nt_t+0xa14>
 802365c:	2300      	movs	r3, #0
 802365e:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8023660:	4619      	mov	r1, r3
 8023662:	f102 0010 	add.w	r0, r2, #16
 8023666:	f930 5c10 	ldrsh.w	r5, [r0, #-16]
 802366a:	3c01      	subs	r4, #1
 802366c:	f930 2c08 	ldrsh.w	r2, [r0, #-8]
 8023670:	f100 0010 	add.w	r0, r0, #16
 8023674:	eba1 0105 	sub.w	r1, r1, r5
 8023678:	f930 5c1e 	ldrsh.w	r5, [r0, #-30]
 802367c:	eba3 0302 	sub.w	r3, r3, r2
 8023680:	f930 2c16 	ldrsh.w	r2, [r0, #-22]
 8023684:	eba1 0105 	sub.w	r1, r1, r5
 8023688:	f930 5c1c 	ldrsh.w	r5, [r0, #-28]
 802368c:	eba3 0302 	sub.w	r3, r3, r2
 8023690:	f930 2c14 	ldrsh.w	r2, [r0, #-20]
 8023694:	eba1 0105 	sub.w	r1, r1, r5
 8023698:	f930 5c1a 	ldrsh.w	r5, [r0, #-26]
 802369c:	eba3 0302 	sub.w	r3, r3, r2
 80236a0:	f930 2c12 	ldrsh.w	r2, [r0, #-18]
 80236a4:	eba1 0105 	sub.w	r1, r1, r5
 80236a8:	eba3 0302 	sub.w	r3, r3, r2
 80236ac:	d1db      	bne.n	8023666 <st_sssa8_ch_nn_mat_mult_nt_t+0x832>
 80236ae:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80236b0:	982d      	ldr	r0, [sp, #180]	; 0xb4
 80236b2:	4402      	add	r2, r0
 80236b4:	9d2c      	ldr	r5, [sp, #176]	; 0xb0
 80236b6:	b1cd      	cbz	r5, 80236ec <st_sssa8_ch_nn_mat_mult_nt_t+0x8b8>
 80236b8:	f9b2 4000 	ldrsh.w	r4, [r2]
 80236bc:	2d01      	cmp	r5, #1
 80236be:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 80236c2:	eba1 0104 	sub.w	r1, r1, r4
 80236c6:	eba3 0300 	sub.w	r3, r3, r0
 80236ca:	d00f      	beq.n	80236ec <st_sssa8_ch_nn_mat_mult_nt_t+0x8b8>
 80236cc:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
 80236d0:	2d02      	cmp	r5, #2
 80236d2:	f9b2 0006 	ldrsh.w	r0, [r2, #6]
 80236d6:	eba1 0104 	sub.w	r1, r1, r4
 80236da:	eba3 0300 	sub.w	r3, r3, r0
 80236de:	d005      	beq.n	80236ec <st_sssa8_ch_nn_mat_mult_nt_t+0x8b8>
 80236e0:	f9b2 0008 	ldrsh.w	r0, [r2, #8]
 80236e4:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80236e8:	1a09      	subs	r1, r1, r0
 80236ea:	1a9b      	subs	r3, r3, r2
 80236ec:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80236ee:	fb02 f101 	mul.w	r1, r2, r1
 80236f2:	fb02 f303 	mul.w	r3, r2, r3
 80236f6:	e412      	b.n	8022f1e <st_sssa8_ch_nn_mat_mult_nt_t+0xea>
 80236f8:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80236fa:	9b40      	ldr	r3, [sp, #256]	; 0x100
 80236fc:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 80236fe:	18f5      	adds	r5, r6, r3
 8023700:	2c00      	cmp	r4, #0
 8023702:	f000 80aa 	beq.w	802385a <st_sssa8_ch_nn_mat_mult_nt_t+0xa26>
 8023706:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8023708:	f856 1b04 	ldr.w	r1, [r6], #4
 802370c:	3c01      	subs	r4, #1
 802370e:	f855 2b04 	ldr.w	r2, [r5], #4
 8023712:	f103 0310 	add.w	r3, r3, #16
 8023716:	ea4f 2031 	mov.w	r0, r1, ror #8
 802371a:	fa2f f181 	sxtb16	r1, r1
 802371e:	fa2f f080 	sxtb16	r0, r0
 8023722:	f843 1c10 	str.w	r1, [r3, #-16]
 8023726:	ea4f 2132 	mov.w	r1, r2, ror #8
 802372a:	f843 0c0c 	str.w	r0, [r3, #-12]
 802372e:	fa2f f181 	sxtb16	r1, r1
 8023732:	fa2f f282 	sxtb16	r2, r2
 8023736:	f843 1c04 	str.w	r1, [r3, #-4]
 802373a:	f843 2c08 	str.w	r2, [r3, #-8]
 802373e:	d1e3      	bne.n	8023708 <st_sssa8_ch_nn_mat_mult_nt_t+0x8d4>
 8023740:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023742:	992f      	ldr	r1, [sp, #188]	; 0xbc
 8023744:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8023746:	185d      	adds	r5, r3, r1
 8023748:	992d      	ldr	r1, [sp, #180]	; 0xb4
 802374a:	189a      	adds	r2, r3, r2
 802374c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 802374e:	440b      	add	r3, r1
 8023750:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8023752:	2800      	cmp	r0, #0
 8023754:	f43f abde 	beq.w	8022f14 <st_sssa8_ch_nn_mat_mult_nt_t+0xe0>
 8023758:	f992 1000 	ldrsb.w	r1, [r2]
 802375c:	2801      	cmp	r0, #1
 802375e:	8019      	strh	r1, [r3, #0]
 8023760:	f995 1000 	ldrsb.w	r1, [r5]
 8023764:	8059      	strh	r1, [r3, #2]
 8023766:	f43f abd5 	beq.w	8022f14 <st_sssa8_ch_nn_mat_mult_nt_t+0xe0>
 802376a:	f992 1001 	ldrsb.w	r1, [r2, #1]
 802376e:	2802      	cmp	r0, #2
 8023770:	8099      	strh	r1, [r3, #4]
 8023772:	f995 1001 	ldrsb.w	r1, [r5, #1]
 8023776:	80d9      	strh	r1, [r3, #6]
 8023778:	f43f abcc 	beq.w	8022f14 <st_sssa8_ch_nn_mat_mult_nt_t+0xe0>
 802377c:	f992 2002 	ldrsb.w	r2, [r2, #2]
 8023780:	811a      	strh	r2, [r3, #8]
 8023782:	f995 2002 	ldrsb.w	r2, [r5, #2]
 8023786:	815a      	strh	r2, [r3, #10]
 8023788:	f7ff bbc4 	b.w	8022f14 <st_sssa8_ch_nn_mat_mult_nt_t+0xe0>
 802378c:	2900      	cmp	r1, #0
 802378e:	dd47      	ble.n	8023820 <st_sssa8_ch_nn_mat_mult_nt_t+0x9ec>
 8023790:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023792:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8023794:	0058      	lsls	r0, r3, #1
 8023796:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8023798:	461c      	mov	r4, r3
 802379a:	58a3      	ldr	r3, [r4, r2]
 802379c:	9c42      	ldr	r4, [sp, #264]	; 0x108
 802379e:	58a2      	ldr	r2, [r4, r2]
 80237a0:	fb50 2303 	smmla	r3, r0, r3, r2
 80237a4:	410b      	asrs	r3, r1
 80237a6:	f303 0307 	ssat	r3, #8, r3
 80237aa:	f88b 3001 	strb.w	r3, [fp, #1]
 80237ae:	e56b      	b.n	8023288 <st_sssa8_ch_nn_mat_mult_nt_t+0x454>
 80237b0:	2a00      	cmp	r2, #0
 80237b2:	dd27      	ble.n	8023804 <st_sssa8_ch_nn_mat_mult_nt_t+0x9d0>
 80237b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80237b6:	005b      	lsls	r3, r3, #1
 80237b8:	fb53 1300 	smmla	r3, r3, r0, r1
 80237bc:	4113      	asrs	r3, r2
 80237be:	f303 0307 	ssat	r3, #8, r3
 80237c2:	f88b 3000 	strb.w	r3, [fp]
 80237c6:	e72a      	b.n	802361e <st_sssa8_ch_nn_mat_mult_nt_t+0x7ea>
 80237c8:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
 80237cc:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
 80237d0:	e556      	b.n	8023280 <st_sssa8_ch_nn_mat_mult_nt_t+0x44c>
 80237d2:	2800      	cmp	r0, #0
 80237d4:	dd08      	ble.n	80237e8 <st_sssa8_ch_nn_mat_mult_nt_t+0x9b4>
 80237d6:	0049      	lsls	r1, r1, #1
 80237d8:	fb51 410e 	smmla	r1, r1, lr, r4
 80237dc:	4101      	asrs	r1, r0
 80237de:	f301 0307 	ssat	r3, #8, r1
 80237e2:	f88a 3000 	strb.w	r3, [sl]
 80237e6:	e5bd      	b.n	8023364 <st_sssa8_ch_nn_mat_mult_nt_t+0x530>
 80237e8:	f1c0 0001 	rsb	r0, r0, #1
 80237ec:	fa01 f000 	lsl.w	r0, r1, r0
 80237f0:	f300 031f 	ssat	r3, #32, r0
 80237f4:	fb53 f31e 	smmulr	r3, r3, lr
 80237f8:	4423      	add	r3, r4
 80237fa:	f303 0307 	ssat	r3, #8, r3
 80237fe:	f88a 3000 	strb.w	r3, [sl]
 8023802:	e5af      	b.n	8023364 <st_sssa8_ch_nn_mat_mult_nt_t+0x530>
 8023804:	f1c2 0201 	rsb	r2, r2, #1
 8023808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802380a:	4093      	lsls	r3, r2
 802380c:	f303 031f 	ssat	r3, #32, r3
 8023810:	fb53 f310 	smmulr	r3, r3, r0
 8023814:	440b      	add	r3, r1
 8023816:	f303 0307 	ssat	r3, #8, r3
 802381a:	f88b 3000 	strb.w	r3, [fp]
 802381e:	e6fe      	b.n	802361e <st_sssa8_ch_nn_mat_mult_nt_t+0x7ea>
 8023820:	f1c1 0101 	rsb	r1, r1, #1
 8023824:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023826:	408a      	lsls	r2, r1
 8023828:	f302 021f 	ssat	r2, #32, r2
 802382c:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 802382e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8023830:	4618      	mov	r0, r3
 8023832:	5843      	ldr	r3, [r0, r1]
 8023834:	fb52 f213 	smmulr	r2, r2, r3
 8023838:	9b42      	ldr	r3, [sp, #264]	; 0x108
 802383a:	585b      	ldr	r3, [r3, r1]
 802383c:	4413      	add	r3, r2
 802383e:	f303 0307 	ssat	r3, #8, r3
 8023842:	f88b 3001 	strb.w	r3, [fp, #1]
 8023846:	e51f      	b.n	8023288 <st_sssa8_ch_nn_mat_mult_nt_t+0x454>
 8023848:	4621      	mov	r1, r4
 802384a:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 802384c:	4623      	mov	r3, r4
 802384e:	e731      	b.n	80236b4 <st_sssa8_ch_nn_mat_mult_nt_t+0x880>
 8023850:	f8dd c10c 	ldr.w	ip, [sp, #268]	; 0x10c
 8023854:	f04f 0e00 	mov.w	lr, #0
 8023858:	e65b      	b.n	8023512 <st_sssa8_ch_nn_mat_mult_nt_t+0x6de>
 802385a:	4632      	mov	r2, r6
 802385c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 802385e:	e777      	b.n	8023750 <st_sssa8_ch_nn_mat_mult_nt_t+0x91c>

08023860 <st_int8_reordered_no_shift_zero>:
 8023860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023862:	ea5f 0e92 	movs.w	lr, r2, lsr #2
 8023866:	f9bd c014 	ldrsh.w	ip, [sp, #20]
 802386a:	d02e      	beq.n	80238ca <st_int8_reordered_no_shift_zero+0x6a>
 802386c:	eb00 078e 	add.w	r7, r0, lr, lsl #2
 8023870:	460e      	mov	r6, r1
 8023872:	f850 4b04 	ldr.w	r4, [r0], #4
 8023876:	ea4f 2534 	mov.w	r5, r4, ror #8
 802387a:	fa2f f585 	sxtb16	r5, r5
 802387e:	fad5 f503 	ssub16	r5, r5, r3
 8023882:	fa2f f484 	sxtb16	r4, r4
 8023886:	fad4 f403 	ssub16	r4, r4, r3
 802388a:	42b8      	cmp	r0, r7
 802388c:	6034      	str	r4, [r6, #0]
 802388e:	6075      	str	r5, [r6, #4]
 8023890:	f106 0608 	add.w	r6, r6, #8
 8023894:	d1ed      	bne.n	8023872 <st_int8_reordered_no_shift_zero+0x12>
 8023896:	eb01 01ce 	add.w	r1, r1, lr, lsl #3
 802389a:	f012 0203 	ands.w	r2, r2, #3
 802389e:	d013      	beq.n	80238c8 <st_int8_reordered_no_shift_zero+0x68>
 80238a0:	f997 0000 	ldrsb.w	r0, [r7]
 80238a4:	fa4f f38c 	sxtb.w	r3, ip
 80238a8:	2a01      	cmp	r2, #1
 80238aa:	eba0 0003 	sub.w	r0, r0, r3
 80238ae:	8008      	strh	r0, [r1, #0]
 80238b0:	d00a      	beq.n	80238c8 <st_int8_reordered_no_shift_zero+0x68>
 80238b2:	f997 0001 	ldrsb.w	r0, [r7, #1]
 80238b6:	2a02      	cmp	r2, #2
 80238b8:	eba0 0003 	sub.w	r0, r0, r3
 80238bc:	8048      	strh	r0, [r1, #2]
 80238be:	d003      	beq.n	80238c8 <st_int8_reordered_no_shift_zero+0x68>
 80238c0:	f997 2002 	ldrsb.w	r2, [r7, #2]
 80238c4:	1ad3      	subs	r3, r2, r3
 80238c6:	808b      	strh	r3, [r1, #4]
 80238c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80238ca:	4607      	mov	r7, r0
 80238cc:	e7e5      	b.n	802389a <st_int8_reordered_no_shift_zero+0x3a>
 80238ce:	bf00      	nop

080238d0 <st_sssa8_ch_nn_mat_mult_kernel_opt>:
 80238d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80238d4:	b09b      	sub	sp, #108	; 0x6c
 80238d6:	4683      	mov	fp, r0
 80238d8:	460f      	mov	r7, r1
 80238da:	f8bd 4090 	ldrh.w	r4, [sp, #144]	; 0x90
 80238de:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80238e0:	910d      	str	r1, [sp, #52]	; 0x34
 80238e2:	0861      	lsrs	r1, r4, #1
 80238e4:	eb00 0503 	add.w	r5, r0, r3
 80238e8:	f8bd 0094 	ldrh.w	r0, [sp, #148]	; 0x94
 80238ec:	9318      	str	r3, [sp, #96]	; 0x60
 80238ee:	9417      	str	r4, [sp, #92]	; 0x5c
 80238f0:	9215      	str	r2, [sp, #84]	; 0x54
 80238f2:	9516      	str	r5, [sp, #88]	; 0x58
 80238f4:	9006      	str	r0, [sp, #24]
 80238f6:	f000 81ca 	beq.w	8023c8e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3be>
 80238fa:	3901      	subs	r1, #1
 80238fc:	1ec4      	subs	r4, r0, #3
 80238fe:	3210      	adds	r2, #16
 8023900:	f1a0 0310 	sub.w	r3, r0, #16
 8023904:	940f      	str	r4, [sp, #60]	; 0x3c
 8023906:	b28c      	uxth	r4, r1
 8023908:	9915      	ldr	r1, [sp, #84]	; 0x54
 802390a:	091b      	lsrs	r3, r3, #4
 802390c:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8023910:	9419      	str	r4, [sp, #100]	; 0x64
 8023912:	3108      	adds	r1, #8
 8023914:	3301      	adds	r3, #1
 8023916:	920e      	str	r2, [sp, #56]	; 0x38
 8023918:	eb07 0640 	add.w	r6, r7, r0, lsl #1
 802391c:	9107      	str	r1, [sp, #28]
 802391e:	9926      	ldr	r1, [sp, #152]	; 0x98
 8023920:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8023922:	3104      	adds	r1, #4
 8023924:	9610      	str	r6, [sp, #64]	; 0x40
 8023926:	3208      	adds	r2, #8
 8023928:	9101      	str	r1, [sp, #4]
 802392a:	9929      	ldr	r1, [sp, #164]	; 0xa4
 802392c:	9205      	str	r2, [sp, #20]
 802392e:	015a      	lsls	r2, r3, #5
 8023930:	3102      	adds	r1, #2
 8023932:	9104      	str	r1, [sp, #16]
 8023934:	0199      	lsls	r1, r3, #6
 8023936:	011b      	lsls	r3, r3, #4
 8023938:	9111      	str	r1, [sp, #68]	; 0x44
 802393a:	9313      	str	r3, [sp, #76]	; 0x4c
 802393c:	1cab      	adds	r3, r5, #2
 802393e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8023940:	9303      	str	r3, [sp, #12]
 8023942:	1f03      	subs	r3, r0, #4
 8023944:	3108      	adds	r1, #8
 8023946:	9314      	str	r3, [sp, #80]	; 0x50
 8023948:	9102      	str	r1, [sp, #8]
 802394a:	18b9      	adds	r1, r7, r2
 802394c:	9b07      	ldr	r3, [sp, #28]
 802394e:	18b2      	adds	r2, r6, r2
 8023950:	9108      	str	r1, [sp, #32]
 8023952:	9212      	str	r2, [sp, #72]	; 0x48
 8023954:	f853 5c08 	ldr.w	r5, [r3, #-8]
 8023958:	f853 0c04 	ldr.w	r0, [r3, #-4]
 802395c:	9b06      	ldr	r3, [sp, #24]
 802395e:	2b0f      	cmp	r3, #15
 8023960:	f340 82a6 	ble.w	8023eb0 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5e0>
 8023964:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8023968:	46dc      	mov	ip, fp
 802396a:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
 802396e:	4603      	mov	r3, r0
 8023970:	462c      	mov	r4, r5
 8023972:	9e08      	ldr	r6, [sp, #32]
 8023974:	f8de 7000 	ldr.w	r7, [lr]
 8023978:	f8d8 2000 	ldr.w	r2, [r8]
 802397c:	f8dc 1000 	ldr.w	r1, [ip]
 8023980:	f8dc a004 	ldr.w	sl, [ip, #4]
 8023984:	fb21 5507 	smlad	r5, r1, r7, r5
 8023988:	fb21 4102 	smlad	r1, r1, r2, r4
 802398c:	fb2a 0007 	smlad	r0, sl, r7, r0
 8023990:	fb2a 3202 	smlad	r2, sl, r2, r3
 8023994:	f8de 7004 	ldr.w	r7, [lr, #4]
 8023998:	f8d8 a004 	ldr.w	sl, [r8, #4]
 802399c:	f8dc 4008 	ldr.w	r4, [ip, #8]
 80239a0:	f8dc 300c 	ldr.w	r3, [ip, #12]
 80239a4:	fb24 5507 	smlad	r5, r4, r7, r5
 80239a8:	fb24 110a 	smlad	r1, r4, sl, r1
 80239ac:	fb23 0007 	smlad	r0, r3, r7, r0
 80239b0:	fb23 230a 	smlad	r3, r3, sl, r2
 80239b4:	f8de 7008 	ldr.w	r7, [lr, #8]
 80239b8:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80239bc:	f8dc 4010 	ldr.w	r4, [ip, #16]
 80239c0:	f8dc a014 	ldr.w	sl, [ip, #20]
 80239c4:	fb24 5507 	smlad	r5, r4, r7, r5
 80239c8:	fb24 1102 	smlad	r1, r4, r2, r1
 80239cc:	fb2a 0007 	smlad	r0, sl, r7, r0
 80239d0:	fb2a 3202 	smlad	r2, sl, r2, r3
 80239d4:	f8de 700c 	ldr.w	r7, [lr, #12]
 80239d8:	f8d8 a00c 	ldr.w	sl, [r8, #12]
 80239dc:	f8dc 4018 	ldr.w	r4, [ip, #24]
 80239e0:	f8dc 901c 	ldr.w	r9, [ip, #28]
 80239e4:	fb24 5507 	smlad	r5, r4, r7, r5
 80239e8:	fb24 140a 	smlad	r4, r4, sl, r1
 80239ec:	fb29 0007 	smlad	r0, r9, r7, r0
 80239f0:	fb29 2a0a 	smlad	sl, r9, sl, r2
 80239f4:	f8de 7010 	ldr.w	r7, [lr, #16]
 80239f8:	f8d8 9010 	ldr.w	r9, [r8, #16]
 80239fc:	f8dc 1020 	ldr.w	r1, [ip, #32]
 8023a00:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 8023a04:	fb21 5507 	smlad	r5, r1, r7, r5
 8023a08:	fb21 4409 	smlad	r4, r1, r9, r4
 8023a0c:	fb23 0007 	smlad	r0, r3, r7, r0
 8023a10:	fb23 a909 	smlad	r9, r3, r9, sl
 8023a14:	f8de 7014 	ldr.w	r7, [lr, #20]
 8023a18:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8023a1c:	f8dc 1028 	ldr.w	r1, [ip, #40]	; 0x28
 8023a20:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
 8023a24:	fb21 5507 	smlad	r5, r1, r7, r5
 8023a28:	fb21 4402 	smlad	r4, r1, r2, r4
 8023a2c:	fb23 0007 	smlad	r0, r3, r7, r0
 8023a30:	fb23 9302 	smlad	r3, r3, r2, r9
 8023a34:	f8de 7018 	ldr.w	r7, [lr, #24]
 8023a38:	f8d8 9018 	ldr.w	r9, [r8, #24]
 8023a3c:	f8dc 1030 	ldr.w	r1, [ip, #48]	; 0x30
 8023a40:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
 8023a44:	fb21 5507 	smlad	r5, r1, r7, r5
 8023a48:	fb21 4409 	smlad	r4, r1, r9, r4
 8023a4c:	fb22 0707 	smlad	r7, r2, r7, r0
 8023a50:	fb22 3909 	smlad	r9, r2, r9, r3
 8023a54:	f8de 001c 	ldr.w	r0, [lr, #28]
 8023a58:	f108 0820 	add.w	r8, r8, #32
 8023a5c:	f858 3c04 	ldr.w	r3, [r8, #-4]
 8023a60:	f10e 0e20 	add.w	lr, lr, #32
 8023a64:	f8dc 1038 	ldr.w	r1, [ip, #56]	; 0x38
 8023a68:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8023a6c:	f85c 2c04 	ldr.w	r2, [ip, #-4]
 8023a70:	fb21 5500 	smlad	r5, r1, r0, r5
 8023a74:	fb21 4403 	smlad	r4, r1, r3, r4
 8023a78:	fb22 7000 	smlad	r0, r2, r0, r7
 8023a7c:	fb22 9303 	smlad	r3, r2, r3, r9
 8023a80:	45b6      	cmp	lr, r6
 8023a82:	f47f af77 	bne.w	8023974 <st_sssa8_ch_nn_mat_mult_kernel_opt+0xa4>
 8023a86:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8023a88:	9f08      	ldr	r7, [sp, #32]
 8023a8a:	4493      	add	fp, r2
 8023a8c:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 8023a90:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8023a92:	9200      	str	r2, [sp, #0]
 8023a94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023a96:	4596      	cmp	lr, r2
 8023a98:	da41      	bge.n	8023b1e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x24e>
 8023a9a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023a9c:	465e      	mov	r6, fp
 8023a9e:	f8dd c000 	ldr.w	ip, [sp]
 8023aa2:	eba2 020e 	sub.w	r2, r2, lr
 8023aa6:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
 8023aaa:	0892      	lsrs	r2, r2, #2
 8023aac:	920b      	str	r2, [sp, #44]	; 0x2c
 8023aae:	3201      	adds	r2, #1
 8023ab0:	920a      	str	r2, [sp, #40]	; 0x28
 8023ab2:	00d2      	lsls	r2, r2, #3
 8023ab4:	eb07 0802 	add.w	r8, r7, r2
 8023ab8:	9209      	str	r2, [sp, #36]	; 0x24
 8023aba:	f8d7 e000 	ldr.w	lr, [r7]
 8023abe:	f8dc 9000 	ldr.w	r9, [ip]
 8023ac2:	6831      	ldr	r1, [r6, #0]
 8023ac4:	f8d6 a004 	ldr.w	sl, [r6, #4]
 8023ac8:	fb21 550e 	smlad	r5, r1, lr, r5
 8023acc:	fb21 4409 	smlad	r4, r1, r9, r4
 8023ad0:	fb2a 000e 	smlad	r0, sl, lr, r0
 8023ad4:	fb2a 3309 	smlad	r3, sl, r9, r3
 8023ad8:	f8d7 e004 	ldr.w	lr, [r7, #4]
 8023adc:	f10c 0c08 	add.w	ip, ip, #8
 8023ae0:	f85c 9c04 	ldr.w	r9, [ip, #-4]
 8023ae4:	3708      	adds	r7, #8
 8023ae6:	68b1      	ldr	r1, [r6, #8]
 8023ae8:	3610      	adds	r6, #16
 8023aea:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8023aee:	fb21 550e 	smlad	r5, r1, lr, r5
 8023af2:	fb21 4409 	smlad	r4, r1, r9, r4
 8023af6:	fb22 000e 	smlad	r0, r2, lr, r0
 8023afa:	fb22 3309 	smlad	r3, r2, r9, r3
 8023afe:	4547      	cmp	r7, r8
 8023b00:	d1db      	bne.n	8023aba <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1ea>
 8023b02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023b04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8023b06:	eb0b 1b02 	add.w	fp, fp, r2, lsl #4
 8023b0a:	9a00      	ldr	r2, [sp, #0]
 8023b0c:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 8023b10:	440a      	add	r2, r1
 8023b12:	f10e 0e04 	add.w	lr, lr, #4
 8023b16:	9200      	str	r2, [sp, #0]
 8023b18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023b1a:	eb0e 0e82 	add.w	lr, lr, r2, lsl #2
 8023b1e:	9a06      	ldr	r2, [sp, #24]
 8023b20:	4572      	cmp	r2, lr
 8023b22:	dd40      	ble.n	8023ba6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2d6>
 8023b24:	9e00      	ldr	r6, [sp, #0]
 8023b26:	f10e 0201 	add.w	r2, lr, #1
 8023b2a:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8023b2e:	f9b7 c000 	ldrsh.w	ip, [r7]
 8023b32:	f9b6 6000 	ldrsh.w	r6, [r6]
 8023b36:	fb0c 0001 	mla	r0, ip, r1, r0
 8023b3a:	f9bb 8000 	ldrsh.w	r8, [fp]
 8023b3e:	fb06 3301 	mla	r3, r6, r1, r3
 8023b42:	9906      	ldr	r1, [sp, #24]
 8023b44:	fb08 550c 	mla	r5, r8, ip, r5
 8023b48:	4291      	cmp	r1, r2
 8023b4a:	fb08 4406 	mla	r4, r8, r6, r4
 8023b4e:	f340 814e 	ble.w	8023dee <st_sssa8_ch_nn_mat_mult_kernel_opt+0x51e>
 8023b52:	9a00      	ldr	r2, [sp, #0]
 8023b54:	f10e 0e02 	add.w	lr, lr, #2
 8023b58:	f9b7 6002 	ldrsh.w	r6, [r7, #2]
 8023b5c:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 8023b60:	f9bb 2006 	ldrsh.w	r2, [fp, #6]
 8023b64:	f9bb c004 	ldrsh.w	ip, [fp, #4]
 8023b68:	fb06 0002 	mla	r0, r6, r2, r0
 8023b6c:	fb01 3302 	mla	r3, r1, r2, r3
 8023b70:	9a06      	ldr	r2, [sp, #24]
 8023b72:	fb0c 5506 	mla	r5, ip, r6, r5
 8023b76:	4572      	cmp	r2, lr
 8023b78:	fb0c 4401 	mla	r4, ip, r1, r4
 8023b7c:	f340 81a0 	ble.w	8023ec0 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5f0>
 8023b80:	9a00      	ldr	r2, [sp, #0]
 8023b82:	f10b 0b0c 	add.w	fp, fp, #12
 8023b86:	f9b7 6004 	ldrsh.w	r6, [r7, #4]
 8023b8a:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 8023b8e:	f93b 7c04 	ldrsh.w	r7, [fp, #-4]
 8023b92:	f93b 2c02 	ldrsh.w	r2, [fp, #-2]
 8023b96:	fb07 5506 	mla	r5, r7, r6, r5
 8023b9a:	fb07 4401 	mla	r4, r7, r1, r4
 8023b9e:	fb06 0002 	mla	r0, r6, r2, r0
 8023ba2:	fb01 3302 	mla	r3, r1, r2, r3
 8023ba6:	9a01      	ldr	r2, [sp, #4]
 8023ba8:	f932 1c04 	ldrsh.w	r1, [r2, #-4]
 8023bac:	9a05      	ldr	r2, [sp, #20]
 8023bae:	2915      	cmp	r1, #21
 8023bb0:	f852 6c08 	ldr.w	r6, [r2, #-8]
 8023bb4:	9a02      	ldr	r2, [sp, #8]
 8023bb6:	f852 7c08 	ldr.w	r7, [r2, #-8]
 8023bba:	f340 8100 	ble.w	8023dbe <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4ee>
 8023bbe:	1e8a      	subs	r2, r1, #2
 8023bc0:	f04f 0c01 	mov.w	ip, #1
 8023bc4:	3901      	subs	r1, #1
 8023bc6:	fa0c f202 	lsl.w	r2, ip, r2
 8023bca:	fb55 2506 	smmla	r5, r5, r6, r2
 8023bce:	410d      	asrs	r5, r1
 8023bd0:	fb54 2206 	smmla	r2, r4, r6, r2
 8023bd4:	443d      	add	r5, r7
 8023bd6:	f305 0507 	ssat	r5, #8, r5
 8023bda:	410a      	asrs	r2, r1
 8023bdc:	9904      	ldr	r1, [sp, #16]
 8023bde:	443a      	add	r2, r7
 8023be0:	f801 5c02 	strb.w	r5, [r1, #-2]
 8023be4:	f302 0207 	ssat	r2, #8, r2
 8023be8:	9903      	ldr	r1, [sp, #12]
 8023bea:	f801 2c02 	strb.w	r2, [r1, #-2]
 8023bee:	9a01      	ldr	r2, [sp, #4]
 8023bf0:	f932 1c02 	ldrsh.w	r1, [r2, #-2]
 8023bf4:	2915      	cmp	r1, #21
 8023bf6:	f340 80c2 	ble.w	8023d7e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4ae>
 8023bfa:	9c05      	ldr	r4, [sp, #20]
 8023bfc:	1e8a      	subs	r2, r1, #2
 8023bfe:	3901      	subs	r1, #1
 8023c00:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8023c04:	2401      	movs	r4, #1
 8023c06:	fa04 f202 	lsl.w	r2, r4, r2
 8023c0a:	9c02      	ldr	r4, [sp, #8]
 8023c0c:	fb50 2005 	smmla	r0, r0, r5, r2
 8023c10:	f854 4c04 	ldr.w	r4, [r4, #-4]
 8023c14:	4108      	asrs	r0, r1
 8023c16:	fb53 2305 	smmla	r3, r3, r5, r2
 8023c1a:	4420      	add	r0, r4
 8023c1c:	f300 0007 	ssat	r0, #8, r0
 8023c20:	410b      	asrs	r3, r1
 8023c22:	9a04      	ldr	r2, [sp, #16]
 8023c24:	4423      	add	r3, r4
 8023c26:	f802 0c01 	strb.w	r0, [r2, #-1]
 8023c2a:	f303 0307 	ssat	r3, #8, r3
 8023c2e:	9a03      	ldr	r2, [sp, #12]
 8023c30:	f802 3c01 	strb.w	r3, [r2, #-1]
 8023c34:	9a01      	ldr	r2, [sp, #4]
 8023c36:	3204      	adds	r2, #4
 8023c38:	9b07      	ldr	r3, [sp, #28]
 8023c3a:	9201      	str	r2, [sp, #4]
 8023c3c:	3308      	adds	r3, #8
 8023c3e:	9a05      	ldr	r2, [sp, #20]
 8023c40:	9307      	str	r3, [sp, #28]
 8023c42:	3208      	adds	r2, #8
 8023c44:	9205      	str	r2, [sp, #20]
 8023c46:	9a04      	ldr	r2, [sp, #16]
 8023c48:	3202      	adds	r2, #2
 8023c4a:	9204      	str	r2, [sp, #16]
 8023c4c:	9a02      	ldr	r2, [sp, #8]
 8023c4e:	3208      	adds	r2, #8
 8023c50:	9202      	str	r2, [sp, #8]
 8023c52:	9a03      	ldr	r2, [sp, #12]
 8023c54:	3202      	adds	r2, #2
 8023c56:	9203      	str	r2, [sp, #12]
 8023c58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023c5a:	429a      	cmp	r2, r3
 8023c5c:	f47f ae7a 	bne.w	8023954 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x84>
 8023c60:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8023c62:	9826      	ldr	r0, [sp, #152]	; 0x98
 8023c64:	3301      	adds	r3, #1
 8023c66:	00da      	lsls	r2, r3, #3
 8023c68:	0059      	lsls	r1, r3, #1
 8023c6a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8023c6e:	9326      	str	r3, [sp, #152]	; 0x98
 8023c70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8023c72:	4413      	add	r3, r2
 8023c74:	9315      	str	r3, [sp, #84]	; 0x54
 8023c76:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023c78:	4413      	add	r3, r2
 8023c7a:	9327      	str	r3, [sp, #156]	; 0x9c
 8023c7c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023c7e:	4413      	add	r3, r2
 8023c80:	9328      	str	r3, [sp, #160]	; 0xa0
 8023c82:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023c84:	440b      	add	r3, r1
 8023c86:	9329      	str	r3, [sp, #164]	; 0xa4
 8023c88:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8023c8a:	440b      	add	r3, r1
 8023c8c:	9316      	str	r3, [sp, #88]	; 0x58
 8023c8e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023c90:	07da      	lsls	r2, r3, #31
 8023c92:	f140 8105 	bpl.w	8023ea0 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5d0>
 8023c96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8023c98:	980d      	ldr	r0, [sp, #52]	; 0x34
 8023c9a:	6819      	ldr	r1, [r3, #0]
 8023c9c:	9b06      	ldr	r3, [sp, #24]
 8023c9e:	089e      	lsrs	r6, r3, #2
 8023ca0:	eb00 0c43 	add.w	ip, r0, r3, lsl #1
 8023ca4:	f000 812b 	beq.w	8023efe <st_sssa8_ch_nn_mat_mult_kernel_opt+0x62e>
 8023ca8:	3e01      	subs	r6, #1
 8023caa:	4664      	mov	r4, ip
 8023cac:	460b      	mov	r3, r1
 8023cae:	b2b6      	uxth	r6, r6
 8023cb0:	3601      	adds	r6, #1
 8023cb2:	00f6      	lsls	r6, r6, #3
 8023cb4:	eb0b 0706 	add.w	r7, fp, r6
 8023cb8:	f8db 5000 	ldr.w	r5, [fp]
 8023cbc:	f10b 0b08 	add.w	fp, fp, #8
 8023cc0:	f85b 2c04 	ldr.w	r2, [fp, #-4]
 8023cc4:	f8d0 e000 	ldr.w	lr, [r0]
 8023cc8:	fb25 110e 	smlad	r1, r5, lr, r1
 8023ccc:	f8d4 e000 	ldr.w	lr, [r4]
 8023cd0:	fb25 330e 	smlad	r3, r5, lr, r3
 8023cd4:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8023cd8:	3408      	adds	r4, #8
 8023cda:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8023cde:	3008      	adds	r0, #8
 8023ce0:	fb22 110e 	smlad	r1, r2, lr, r1
 8023ce4:	fb22 3305 	smlad	r3, r2, r5, r3
 8023ce8:	45bb      	cmp	fp, r7
 8023cea:	d1e5      	bne.n	8023cb8 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3e8>
 8023cec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8023cee:	44b4      	add	ip, r6
 8023cf0:	4432      	add	r2, r6
 8023cf2:	920d      	str	r2, [sp, #52]	; 0x34
 8023cf4:	9a06      	ldr	r2, [sp, #24]
 8023cf6:	f012 0203 	ands.w	r2, r2, #3
 8023cfa:	d01f      	beq.n	8023d3c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x46c>
 8023cfc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8023cfe:	2a01      	cmp	r2, #1
 8023d00:	f9bb 0000 	ldrsh.w	r0, [fp]
 8023d04:	8835      	ldrh	r5, [r6, #0]
 8023d06:	f8bc 4000 	ldrh.w	r4, [ip]
 8023d0a:	fb15 1100 	smlabb	r1, r5, r0, r1
 8023d0e:	fb14 3300 	smlabb	r3, r4, r0, r3
 8023d12:	d013      	beq.n	8023d3c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x46c>
 8023d14:	f9bb 0002 	ldrsh.w	r0, [fp, #2]
 8023d18:	2a02      	cmp	r2, #2
 8023d1a:	8875      	ldrh	r5, [r6, #2]
 8023d1c:	f8bc 4002 	ldrh.w	r4, [ip, #2]
 8023d20:	fb15 1100 	smlabb	r1, r5, r0, r1
 8023d24:	fb14 3300 	smlabb	r3, r4, r0, r3
 8023d28:	d008      	beq.n	8023d3c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x46c>
 8023d2a:	f9bb 2004 	ldrsh.w	r2, [fp, #4]
 8023d2e:	88b4      	ldrh	r4, [r6, #4]
 8023d30:	f8bc 0004 	ldrh.w	r0, [ip, #4]
 8023d34:	fb12 1104 	smlabb	r1, r2, r4, r1
 8023d38:	fb12 3300 	smlabb	r3, r2, r0, r3
 8023d3c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8023d3e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8023d40:	f9b2 2000 	ldrsh.w	r2, [r2]
 8023d44:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8023d46:	6825      	ldr	r5, [r4, #0]
 8023d48:	2a15      	cmp	r2, #21
 8023d4a:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8023d4c:	f100 0001 	add.w	r0, r0, #1
 8023d50:	6824      	ldr	r4, [r4, #0]
 8023d52:	f300 808f 	bgt.w	8023e74 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5a4>
 8023d56:	2a00      	cmp	r2, #0
 8023d58:	f340 80b5 	ble.w	8023ec6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5f6>
 8023d5c:	0049      	lsls	r1, r1, #1
 8023d5e:	005b      	lsls	r3, r3, #1
 8023d60:	fb51 4105 	smmla	r1, r1, r5, r4
 8023d64:	fb53 4305 	smmla	r3, r3, r5, r4
 8023d68:	fa41 f202 	asr.w	r2, r1, r2
 8023d6c:	f302 0207 	ssat	r2, #8, r2
 8023d70:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8023d72:	700a      	strb	r2, [r1, #0]
 8023d74:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8023d76:	f9b2 2000 	ldrsh.w	r2, [r2]
 8023d7a:	4113      	asrs	r3, r2
 8023d7c:	e08a      	b.n	8023e94 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5c4>
 8023d7e:	2900      	cmp	r1, #0
 8023d80:	dd38      	ble.n	8023df4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x524>
 8023d82:	9a05      	ldr	r2, [sp, #20]
 8023d84:	0040      	lsls	r0, r0, #1
 8023d86:	9c02      	ldr	r4, [sp, #8]
 8023d88:	005b      	lsls	r3, r3, #1
 8023d8a:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8023d8e:	f854 4c04 	ldr.w	r4, [r4, #-4]
 8023d92:	fb50 4002 	smmla	r0, r0, r2, r4
 8023d96:	fb53 4302 	smmla	r3, r3, r2, r4
 8023d9a:	fa40 f101 	asr.w	r1, r0, r1
 8023d9e:	f301 0107 	ssat	r1, #8, r1
 8023da2:	9a04      	ldr	r2, [sp, #16]
 8023da4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8023da8:	9a01      	ldr	r2, [sp, #4]
 8023daa:	f932 4c02 	ldrsh.w	r4, [r2, #-2]
 8023dae:	fa43 f404 	asr.w	r4, r3, r4
 8023db2:	f304 0407 	ssat	r4, #8, r4
 8023db6:	9b03      	ldr	r3, [sp, #12]
 8023db8:	f803 4c01 	strb.w	r4, [r3, #-1]
 8023dbc:	e73b      	b.n	8023c36 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x366>
 8023dbe:	2900      	cmp	r1, #0
 8023dc0:	dd3b      	ble.n	8023e3a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x56a>
 8023dc2:	006d      	lsls	r5, r5, #1
 8023dc4:	0064      	lsls	r4, r4, #1
 8023dc6:	fb55 7506 	smmla	r5, r5, r6, r7
 8023dca:	fb54 7406 	smmla	r4, r4, r6, r7
 8023dce:	410d      	asrs	r5, r1
 8023dd0:	f305 0507 	ssat	r5, #8, r5
 8023dd4:	9a04      	ldr	r2, [sp, #16]
 8023dd6:	f802 5c02 	strb.w	r5, [r2, #-2]
 8023dda:	9a01      	ldr	r2, [sp, #4]
 8023ddc:	f932 2c04 	ldrsh.w	r2, [r2, #-4]
 8023de0:	4114      	asrs	r4, r2
 8023de2:	f304 0407 	ssat	r4, #8, r4
 8023de6:	9a03      	ldr	r2, [sp, #12]
 8023de8:	f802 4c02 	strb.w	r4, [r2, #-2]
 8023dec:	e6ff      	b.n	8023bee <st_sssa8_ch_nn_mat_mult_kernel_opt+0x31e>
 8023dee:	f10b 0b04 	add.w	fp, fp, #4
 8023df2:	e6d8      	b.n	8023ba6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2d6>
 8023df4:	f1c1 0101 	rsb	r1, r1, #1
 8023df8:	4088      	lsls	r0, r1
 8023dfa:	f300 001f 	ssat	r0, #32, r0
 8023dfe:	9a05      	ldr	r2, [sp, #20]
 8023e00:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8023e04:	fb50 f014 	smmulr	r0, r0, r4
 8023e08:	fa03 f101 	lsl.w	r1, r3, r1
 8023e0c:	f301 011f 	ssat	r1, #32, r1
 8023e10:	fb51 f114 	smmulr	r1, r1, r4
 8023e14:	9b02      	ldr	r3, [sp, #8]
 8023e16:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8023e1a:	4402      	add	r2, r0
 8023e1c:	f302 0207 	ssat	r2, #8, r2
 8023e20:	9804      	ldr	r0, [sp, #16]
 8023e22:	f800 2c01 	strb.w	r2, [r0, #-1]
 8023e26:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8023e2a:	440b      	add	r3, r1
 8023e2c:	f303 0307 	ssat	r3, #8, r3
 8023e30:	9a03      	ldr	r2, [sp, #12]
 8023e32:	f802 3c01 	strb.w	r3, [r2, #-1]
 8023e36:	9a01      	ldr	r2, [sp, #4]
 8023e38:	e6fd      	b.n	8023c36 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x366>
 8023e3a:	f1c1 0101 	rsb	r1, r1, #1
 8023e3e:	408d      	lsls	r5, r1
 8023e40:	f305 051f 	ssat	r5, #32, r5
 8023e44:	fb55 f516 	smmulr	r5, r5, r6
 8023e48:	fa04 f101 	lsl.w	r1, r4, r1
 8023e4c:	f301 011f 	ssat	r1, #32, r1
 8023e50:	fb51 f616 	smmulr	r6, r1, r6
 8023e54:	443d      	add	r5, r7
 8023e56:	f305 0507 	ssat	r5, #8, r5
 8023e5a:	9a04      	ldr	r2, [sp, #16]
 8023e5c:	f802 5c02 	strb.w	r5, [r2, #-2]
 8023e60:	9a02      	ldr	r2, [sp, #8]
 8023e62:	f852 2c08 	ldr.w	r2, [r2, #-8]
 8023e66:	4416      	add	r6, r2
 8023e68:	f306 0607 	ssat	r6, #8, r6
 8023e6c:	9a03      	ldr	r2, [sp, #12]
 8023e6e:	f802 6c02 	strb.w	r6, [r2, #-2]
 8023e72:	e6bc      	b.n	8023bee <st_sssa8_ch_nn_mat_mult_kernel_opt+0x31e>
 8023e74:	1e97      	subs	r7, r2, #2
 8023e76:	1e56      	subs	r6, r2, #1
 8023e78:	2201      	movs	r2, #1
 8023e7a:	40ba      	lsls	r2, r7
 8023e7c:	fb51 2105 	smmla	r1, r1, r5, r2
 8023e80:	4131      	asrs	r1, r6
 8023e82:	fb53 2305 	smmla	r3, r3, r5, r2
 8023e86:	190a      	adds	r2, r1, r4
 8023e88:	f302 0207 	ssat	r2, #8, r2
 8023e8c:	4133      	asrs	r3, r6
 8023e8e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8023e90:	4423      	add	r3, r4
 8023e92:	700a      	strb	r2, [r1, #0]
 8023e94:	f303 0307 	ssat	r3, #8, r3
 8023e98:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8023e9a:	9029      	str	r0, [sp, #164]	; 0xa4
 8023e9c:	7013      	strb	r3, [r2, #0]
 8023e9e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023ea0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8023ea2:	ebc3 0042 	rsb	r0, r3, r2, lsl #1
 8023ea6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023ea8:	4418      	add	r0, r3
 8023eaa:	b01b      	add	sp, #108	; 0x6c
 8023eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023eb0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023eb2:	462c      	mov	r4, r5
 8023eb4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8023eb6:	f04f 0e00 	mov.w	lr, #0
 8023eba:	9300      	str	r3, [sp, #0]
 8023ebc:	4603      	mov	r3, r0
 8023ebe:	e5e9      	b.n	8023a94 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1c4>
 8023ec0:	f10b 0b08 	add.w	fp, fp, #8
 8023ec4:	e66f      	b.n	8023ba6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2d6>
 8023ec6:	f1c2 0601 	rsb	r6, r2, #1
 8023eca:	fa01 f206 	lsl.w	r2, r1, r6
 8023ece:	f302 021f 	ssat	r2, #32, r2
 8023ed2:	fb52 f215 	smmulr	r2, r2, r5
 8023ed6:	40b3      	lsls	r3, r6
 8023ed8:	f303 031f 	ssat	r3, #32, r3
 8023edc:	fb53 f115 	smmulr	r1, r3, r5
 8023ee0:	1913      	adds	r3, r2, r4
 8023ee2:	f303 0307 	ssat	r3, #8, r3
 8023ee6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8023ee8:	7013      	strb	r3, [r2, #0]
 8023eea:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023eec:	681b      	ldr	r3, [r3, #0]
 8023eee:	440b      	add	r3, r1
 8023ef0:	f303 0307 	ssat	r3, #8, r3
 8023ef4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8023ef6:	9029      	str	r0, [sp, #164]	; 0xa4
 8023ef8:	7013      	strb	r3, [r2, #0]
 8023efa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023efc:	e7d0      	b.n	8023ea0 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5d0>
 8023efe:	460b      	mov	r3, r1
 8023f00:	e6f8      	b.n	8023cf4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x424>
 8023f02:	bf00      	nop

08023f04 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>:
 8023f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023f08:	b08f      	sub	sp, #60	; 0x3c
 8023f0a:	460f      	mov	r7, r1
 8023f0c:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8023f10:	9105      	str	r1, [sp, #20]
 8023f12:	f8bd 4064 	ldrh.w	r4, [sp, #100]	; 0x64
 8023f16:	0859      	lsrs	r1, r3, #1
 8023f18:	930c      	str	r3, [sp, #48]	; 0x30
 8023f1a:	920b      	str	r2, [sp, #44]	; 0x2c
 8023f1c:	9402      	str	r4, [sp, #8]
 8023f1e:	f000 81d6 	beq.w	80242ce <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3ca>
 8023f22:	4616      	mov	r6, r2
 8023f24:	1ee5      	subs	r5, r4, #3
 8023f26:	3901      	subs	r1, #1
 8023f28:	3210      	adds	r2, #16
 8023f2a:	9507      	str	r5, [sp, #28]
 8023f2c:	f106 0508 	add.w	r5, r6, #8
 8023f30:	f1a4 0310 	sub.w	r3, r4, #16
 8023f34:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8023f36:	9503      	str	r5, [sp, #12]
 8023f38:	b28d      	uxth	r5, r1
 8023f3a:	091b      	lsrs	r3, r3, #4
 8023f3c:	3602      	adds	r6, #2
 8023f3e:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8023f42:	950d      	str	r5, [sp, #52]	; 0x34
 8023f44:	3301      	adds	r3, #1
 8023f46:	9601      	str	r6, [sp, #4]
 8023f48:	9206      	str	r2, [sp, #24]
 8023f4a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8023f4c:	eb07 1e43 	add.w	lr, r7, r3, lsl #5
 8023f50:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8023f52:	f102 0a08 	add.w	sl, r2, #8
 8023f56:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8023f58:	3604      	adds	r6, #4
 8023f5a:	f102 0b08 	add.w	fp, r2, #8
 8023f5e:	019a      	lsls	r2, r3, #6
 8023f60:	011b      	lsls	r3, r3, #4
 8023f62:	9600      	str	r6, [sp, #0]
 8023f64:	9208      	str	r2, [sp, #32]
 8023f66:	1f22      	subs	r2, r4, #4
 8023f68:	9309      	str	r3, [sp, #36]	; 0x24
 8023f6a:	9b03      	ldr	r3, [sp, #12]
 8023f6c:	920a      	str	r2, [sp, #40]	; 0x28
 8023f6e:	9a02      	ldr	r2, [sp, #8]
 8023f70:	f853 4c08 	ldr.w	r4, [r3, #-8]
 8023f74:	2a0f      	cmp	r2, #15
 8023f76:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8023f7a:	f340 8182 	ble.w	8024282 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x37e>
 8023f7e:	f8dd c014 	ldr.w	ip, [sp, #20]
 8023f82:	4607      	mov	r7, r0
 8023f84:	f8dc 5000 	ldr.w	r5, [ip]
 8023f88:	6839      	ldr	r1, [r7, #0]
 8023f8a:	fb21 4405 	smlad	r4, r1, r5, r4
 8023f8e:	687a      	ldr	r2, [r7, #4]
 8023f90:	fb22 3305 	smlad	r3, r2, r5, r3
 8023f94:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8023f98:	68b9      	ldr	r1, [r7, #8]
 8023f9a:	fb21 4105 	smlad	r1, r1, r5, r4
 8023f9e:	68fa      	ldr	r2, [r7, #12]
 8023fa0:	fb22 3205 	smlad	r2, r2, r5, r3
 8023fa4:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8023fa8:	693c      	ldr	r4, [r7, #16]
 8023faa:	fb24 1105 	smlad	r1, r4, r5, r1
 8023fae:	697b      	ldr	r3, [r7, #20]
 8023fb0:	fb23 2205 	smlad	r2, r3, r5, r2
 8023fb4:	f8dc 500c 	ldr.w	r5, [ip, #12]
 8023fb8:	69bc      	ldr	r4, [r7, #24]
 8023fba:	fb24 1405 	smlad	r4, r4, r5, r1
 8023fbe:	69fb      	ldr	r3, [r7, #28]
 8023fc0:	fb23 2305 	smlad	r3, r3, r5, r2
 8023fc4:	f8dc 5010 	ldr.w	r5, [ip, #16]
 8023fc8:	6a39      	ldr	r1, [r7, #32]
 8023fca:	fb21 4405 	smlad	r4, r1, r5, r4
 8023fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8023fd0:	fb22 3305 	smlad	r3, r2, r5, r3
 8023fd4:	f8dc 5014 	ldr.w	r5, [ip, #20]
 8023fd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8023fda:	fb21 4105 	smlad	r1, r1, r5, r4
 8023fde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8023fe0:	fb22 3205 	smlad	r2, r2, r5, r3
 8023fe4:	f8dc 5018 	ldr.w	r5, [ip, #24]
 8023fe8:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8023fea:	fb24 1105 	smlad	r1, r4, r5, r1
 8023fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023ff0:	fb23 2205 	smlad	r2, r3, r5, r2
 8023ff4:	f8dc 501c 	ldr.w	r5, [ip, #28]
 8023ff8:	3740      	adds	r7, #64	; 0x40
 8023ffa:	f857 4c08 	ldr.w	r4, [r7, #-8]
 8023ffe:	f10c 0c20 	add.w	ip, ip, #32
 8024002:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8024006:	fb24 1405 	smlad	r4, r4, r5, r1
 802400a:	fb23 2305 	smlad	r3, r3, r5, r2
 802400e:	45f4      	cmp	ip, lr
 8024010:	d1b8      	bne.n	8023f84 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x80>
 8024012:	9a08      	ldr	r2, [sp, #32]
 8024014:	4677      	mov	r7, lr
 8024016:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 802401a:	4410      	add	r0, r2
 802401c:	9a07      	ldr	r2, [sp, #28]
 802401e:	4594      	cmp	ip, r2
 8024020:	da25      	bge.n	802406e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x16a>
 8024022:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024024:	4606      	mov	r6, r0
 8024026:	eba2 090c 	sub.w	r9, r2, ip
 802402a:	ea4f 0999 	mov.w	r9, r9, lsr #2
 802402e:	f109 0201 	add.w	r2, r9, #1
 8024032:	eb07 08c2 	add.w	r8, r7, r2, lsl #3
 8024036:	9204      	str	r2, [sp, #16]
 8024038:	683a      	ldr	r2, [r7, #0]
 802403a:	6831      	ldr	r1, [r6, #0]
 802403c:	fb21 4402 	smlad	r4, r1, r2, r4
 8024040:	6871      	ldr	r1, [r6, #4]
 8024042:	fb21 3202 	smlad	r2, r1, r2, r3
 8024046:	6879      	ldr	r1, [r7, #4]
 8024048:	3610      	adds	r6, #16
 802404a:	f856 5c08 	ldr.w	r5, [r6, #-8]
 802404e:	3708      	adds	r7, #8
 8024050:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8024054:	fb25 4401 	smlad	r4, r5, r1, r4
 8024058:	fb23 2301 	smlad	r3, r3, r1, r2
 802405c:	4547      	cmp	r7, r8
 802405e:	d1eb      	bne.n	8024038 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x134>
 8024060:	f10c 0c04 	add.w	ip, ip, #4
 8024064:	9a04      	ldr	r2, [sp, #16]
 8024066:	eb0c 0c89 	add.w	ip, ip, r9, lsl #2
 802406a:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 802406e:	9a02      	ldr	r2, [sp, #8]
 8024070:	4562      	cmp	r2, ip
 8024072:	dd26      	ble.n	80240c2 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1be>
 8024074:	f9b7 1000 	ldrsh.w	r1, [r7]
 8024078:	f10c 0201 	add.w	r2, ip, #1
 802407c:	8806      	ldrh	r6, [r0, #0]
 802407e:	8845      	ldrh	r5, [r0, #2]
 8024080:	fb16 4401 	smlabb	r4, r6, r1, r4
 8024084:	fb11 3305 	smlabb	r3, r1, r5, r3
 8024088:	9902      	ldr	r1, [sp, #8]
 802408a:	4291      	cmp	r1, r2
 802408c:	f340 80d5 	ble.w	802423a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x336>
 8024090:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8024094:	f10c 0c02 	add.w	ip, ip, #2
 8024098:	8885      	ldrh	r5, [r0, #4]
 802409a:	88c1      	ldrh	r1, [r0, #6]
 802409c:	fb15 4402 	smlabb	r4, r5, r2, r4
 80240a0:	fb12 3301 	smlabb	r3, r2, r1, r3
 80240a4:	9a02      	ldr	r2, [sp, #8]
 80240a6:	4562      	cmp	r2, ip
 80240a8:	f340 80ef 	ble.w	802428a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x386>
 80240ac:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80240b0:	300c      	adds	r0, #12
 80240b2:	f830 5c04 	ldrh.w	r5, [r0, #-4]
 80240b6:	f830 1c02 	ldrh.w	r1, [r0, #-2]
 80240ba:	fb15 4402 	smlabb	r4, r5, r2, r4
 80240be:	fb12 3301 	smlabb	r3, r2, r1, r3
 80240c2:	9a00      	ldr	r2, [sp, #0]
 80240c4:	f85a 6c08 	ldr.w	r6, [sl, #-8]
 80240c8:	f932 2c04 	ldrsh.w	r2, [r2, #-4]
 80240cc:	f85b 1c08 	ldr.w	r1, [fp, #-8]
 80240d0:	2a15      	cmp	r2, #21
 80240d2:	f340 80a5 	ble.w	8024220 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x31c>
 80240d6:	1e95      	subs	r5, r2, #2
 80240d8:	2701      	movs	r7, #1
 80240da:	3a01      	subs	r2, #1
 80240dc:	fa07 f505 	lsl.w	r5, r7, r5
 80240e0:	fb54 5406 	smmla	r4, r4, r6, r5
 80240e4:	4114      	asrs	r4, r2
 80240e6:	440c      	add	r4, r1
 80240e8:	f304 0407 	ssat	r4, #8, r4
 80240ec:	9a01      	ldr	r2, [sp, #4]
 80240ee:	f802 4c02 	strb.w	r4, [r2, #-2]
 80240f2:	9a00      	ldr	r2, [sp, #0]
 80240f4:	f932 6c02 	ldrsh.w	r6, [r2, #-2]
 80240f8:	2e15      	cmp	r6, #21
 80240fa:	f340 8081 	ble.w	8024200 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2fc>
 80240fe:	1eb1      	subs	r1, r6, #2
 8024100:	2401      	movs	r4, #1
 8024102:	3e01      	subs	r6, #1
 8024104:	f85a 2c04 	ldr.w	r2, [sl, #-4]
 8024108:	fa04 f101 	lsl.w	r1, r4, r1
 802410c:	f85b 4c04 	ldr.w	r4, [fp, #-4]
 8024110:	fb53 1302 	smmla	r3, r3, r2, r1
 8024114:	4133      	asrs	r3, r6
 8024116:	4423      	add	r3, r4
 8024118:	f303 0307 	ssat	r3, #8, r3
 802411c:	9a01      	ldr	r2, [sp, #4]
 802411e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8024122:	3202      	adds	r2, #2
 8024124:	9b03      	ldr	r3, [sp, #12]
 8024126:	f10a 0a08 	add.w	sl, sl, #8
 802412a:	f10b 0b08 	add.w	fp, fp, #8
 802412e:	9201      	str	r2, [sp, #4]
 8024130:	3308      	adds	r3, #8
 8024132:	9a00      	ldr	r2, [sp, #0]
 8024134:	9303      	str	r3, [sp, #12]
 8024136:	3204      	adds	r2, #4
 8024138:	9200      	str	r2, [sp, #0]
 802413a:	9a06      	ldr	r2, [sp, #24]
 802413c:	429a      	cmp	r2, r3
 802413e:	f47f af16 	bne.w	8023f6e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x6a>
 8024142:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024144:	991d      	ldr	r1, [sp, #116]	; 0x74
 8024146:	3301      	adds	r3, #1
 8024148:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 802414c:	991a      	ldr	r1, [sp, #104]	; 0x68
 802414e:	00da      	lsls	r2, r3, #3
 8024150:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8024154:	931a      	str	r3, [sp, #104]	; 0x68
 8024156:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024158:	4413      	add	r3, r2
 802415a:	930b      	str	r3, [sp, #44]	; 0x2c
 802415c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802415e:	4413      	add	r3, r2
 8024160:	931b      	str	r3, [sp, #108]	; 0x6c
 8024162:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8024164:	4413      	add	r3, r2
 8024166:	931c      	str	r3, [sp, #112]	; 0x70
 8024168:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802416a:	07db      	lsls	r3, r3, #31
 802416c:	d544      	bpl.n	80241f8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2f4>
 802416e:	9a02      	ldr	r2, [sp, #8]
 8024170:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024172:	0892      	lsrs	r2, r2, #2
 8024174:	681b      	ldr	r3, [r3, #0]
 8024176:	d016      	beq.n	80241a6 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2a2>
 8024178:	1e56      	subs	r6, r2, #1
 802417a:	9905      	ldr	r1, [sp, #20]
 802417c:	b2b6      	uxth	r6, r6
 802417e:	3601      	adds	r6, #1
 8024180:	00f6      	lsls	r6, r6, #3
 8024182:	1987      	adds	r7, r0, r6
 8024184:	6805      	ldr	r5, [r0, #0]
 8024186:	3008      	adds	r0, #8
 8024188:	f850 2c04 	ldr.w	r2, [r0, #-4]
 802418c:	f8d1 c000 	ldr.w	ip, [r1]
 8024190:	fb25 330c 	smlad	r3, r5, ip, r3
 8024194:	684d      	ldr	r5, [r1, #4]
 8024196:	3108      	adds	r1, #8
 8024198:	fb22 3305 	smlad	r3, r2, r5, r3
 802419c:	42b8      	cmp	r0, r7
 802419e:	d1f1      	bne.n	8024184 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x280>
 80241a0:	9a05      	ldr	r2, [sp, #20]
 80241a2:	4432      	add	r2, r6
 80241a4:	9205      	str	r2, [sp, #20]
 80241a6:	9a02      	ldr	r2, [sp, #8]
 80241a8:	f012 0203 	ands.w	r2, r2, #3
 80241ac:	d010      	beq.n	80241d0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2cc>
 80241ae:	9e05      	ldr	r6, [sp, #20]
 80241b0:	2a01      	cmp	r2, #1
 80241b2:	8801      	ldrh	r1, [r0, #0]
 80241b4:	8835      	ldrh	r5, [r6, #0]
 80241b6:	fb15 3301 	smlabb	r3, r5, r1, r3
 80241ba:	d009      	beq.n	80241d0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2cc>
 80241bc:	8875      	ldrh	r5, [r6, #2]
 80241be:	2a02      	cmp	r2, #2
 80241c0:	8841      	ldrh	r1, [r0, #2]
 80241c2:	fb15 3301 	smlabb	r3, r5, r1, r3
 80241c6:	d003      	beq.n	80241d0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2cc>
 80241c8:	8881      	ldrh	r1, [r0, #4]
 80241ca:	88b2      	ldrh	r2, [r6, #4]
 80241cc:	fb11 3302 	smlabb	r3, r1, r2, r3
 80241d0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80241d2:	1c61      	adds	r1, r4, #1
 80241d4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80241d6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80241da:	6806      	ldr	r6, [r0, #0]
 80241dc:	2a15      	cmp	r2, #21
 80241de:	981c      	ldr	r0, [sp, #112]	; 0x70
 80241e0:	6805      	ldr	r5, [r0, #0]
 80241e2:	dc54      	bgt.n	802428e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x38a>
 80241e4:	2a00      	cmp	r2, #0
 80241e6:	dd62      	ble.n	80242ae <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3aa>
 80241e8:	005b      	lsls	r3, r3, #1
 80241ea:	fb53 5306 	smmla	r3, r3, r6, r5
 80241ee:	4113      	asrs	r3, r2
 80241f0:	f303 0307 	ssat	r3, #8, r3
 80241f4:	7023      	strb	r3, [r4, #0]
 80241f6:	460c      	mov	r4, r1
 80241f8:	4620      	mov	r0, r4
 80241fa:	b00f      	add	sp, #60	; 0x3c
 80241fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024200:	2e00      	cmp	r6, #0
 8024202:	dd1c      	ble.n	802423e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x33a>
 8024204:	f85a 4c04 	ldr.w	r4, [sl, #-4]
 8024208:	005b      	lsls	r3, r3, #1
 802420a:	f85b 5c04 	ldr.w	r5, [fp, #-4]
 802420e:	fb53 5304 	smmla	r3, r3, r4, r5
 8024212:	4133      	asrs	r3, r6
 8024214:	f303 0307 	ssat	r3, #8, r3
 8024218:	9a01      	ldr	r2, [sp, #4]
 802421a:	f802 3c01 	strb.w	r3, [r2, #-1]
 802421e:	e780      	b.n	8024122 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x21e>
 8024220:	2a00      	cmp	r2, #0
 8024222:	dd1f      	ble.n	8024264 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x360>
 8024224:	0064      	lsls	r4, r4, #1
 8024226:	fb54 1406 	smmla	r4, r4, r6, r1
 802422a:	fa44 f202 	asr.w	r2, r4, r2
 802422e:	f302 0207 	ssat	r2, #8, r2
 8024232:	9901      	ldr	r1, [sp, #4]
 8024234:	f801 2c02 	strb.w	r2, [r1, #-2]
 8024238:	e75b      	b.n	80240f2 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1ee>
 802423a:	3004      	adds	r0, #4
 802423c:	e741      	b.n	80240c2 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1be>
 802423e:	f1c6 0601 	rsb	r6, r6, #1
 8024242:	40b3      	lsls	r3, r6
 8024244:	f303 031f 	ssat	r3, #32, r3
 8024248:	f85a 2c04 	ldr.w	r2, [sl, #-4]
 802424c:	fb53 f212 	smmulr	r2, r3, r2
 8024250:	f85b 3c04 	ldr.w	r3, [fp, #-4]
 8024254:	441a      	add	r2, r3
 8024256:	f302 0207 	ssat	r2, #8, r2
 802425a:	9b01      	ldr	r3, [sp, #4]
 802425c:	f803 2c01 	strb.w	r2, [r3, #-1]
 8024260:	461a      	mov	r2, r3
 8024262:	e75e      	b.n	8024122 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x21e>
 8024264:	f1c2 0201 	rsb	r2, r2, #1
 8024268:	fa04 f202 	lsl.w	r2, r4, r2
 802426c:	f302 021f 	ssat	r2, #32, r2
 8024270:	fb52 f216 	smmulr	r2, r2, r6
 8024274:	440a      	add	r2, r1
 8024276:	f302 0207 	ssat	r2, #8, r2
 802427a:	9901      	ldr	r1, [sp, #4]
 802427c:	f801 2c02 	strb.w	r2, [r1, #-2]
 8024280:	e737      	b.n	80240f2 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1ee>
 8024282:	9f05      	ldr	r7, [sp, #20]
 8024284:	f04f 0c00 	mov.w	ip, #0
 8024288:	e6c8      	b.n	802401c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x118>
 802428a:	3008      	adds	r0, #8
 802428c:	e719      	b.n	80240c2 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1be>
 802428e:	1e97      	subs	r7, r2, #2
 8024290:	2001      	movs	r0, #1
 8024292:	3a01      	subs	r2, #1
 8024294:	40b8      	lsls	r0, r7
 8024296:	fb53 0306 	smmla	r3, r3, r6, r0
 802429a:	4113      	asrs	r3, r2
 802429c:	442b      	add	r3, r5
 802429e:	f303 0307 	ssat	r3, #8, r3
 80242a2:	7023      	strb	r3, [r4, #0]
 80242a4:	460c      	mov	r4, r1
 80242a6:	4620      	mov	r0, r4
 80242a8:	b00f      	add	sp, #60	; 0x3c
 80242aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80242ae:	f1c2 0201 	rsb	r2, r2, #1
 80242b2:	4093      	lsls	r3, r2
 80242b4:	f303 031f 	ssat	r3, #32, r3
 80242b8:	fb53 f316 	smmulr	r3, r3, r6
 80242bc:	442b      	add	r3, r5
 80242be:	f303 0307 	ssat	r3, #8, r3
 80242c2:	7023      	strb	r3, [r4, #0]
 80242c4:	460c      	mov	r4, r1
 80242c6:	4620      	mov	r0, r4
 80242c8:	b00f      	add	sp, #60	; 0x3c
 80242ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80242ce:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 80242d0:	e74b      	b.n	802416a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x266>
 80242d2:	bf00      	nop

080242d4 <st_int8_avepool>:
 80242d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80242d8:	b099      	sub	sp, #100	; 0x64
 80242da:	4615      	mov	r5, r2
 80242dc:	eec0 4a20 	vdiv.f32	s9, s0, s1
 80242e0:	900b      	str	r0, [sp, #44]	; 0x2c
 80242e2:	f8bd 009c 	ldrh.w	r0, [sp, #156]	; 0x9c
 80242e6:	f8bd 40a8 	ldrh.w	r4, [sp, #168]	; 0xa8
 80242ea:	9012      	str	r0, [sp, #72]	; 0x48
 80242ec:	f8bd 00a0 	ldrh.w	r0, [sp, #160]	; 0xa0
 80242f0:	9109      	str	r1, [sp, #36]	; 0x24
 80242f2:	9015      	str	r0, [sp, #84]	; 0x54
 80242f4:	f8bd 00a4 	ldrh.w	r0, [sp, #164]	; 0xa4
 80242f8:	9416      	str	r4, [sp, #88]	; 0x58
 80242fa:	900e      	str	r0, [sp, #56]	; 0x38
 80242fc:	f99d 00ac 	ldrsb.w	r0, [sp, #172]	; 0xac
 8024300:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 8024304:	ee03 0a90 	vmov	s7, r0
 8024308:	f8bd 1090 	ldrh.w	r1, [sp, #144]	; 0x90
 802430c:	f99d 00b0 	ldrsb.w	r0, [sp, #176]	; 0xb0
 8024310:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8024314:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 8024318:	f8bd 2094 	ldrh.w	r2, [sp, #148]	; 0x94
 802431c:	9311      	str	r3, [sp, #68]	; 0x44
 802431e:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
 8024322:	2c00      	cmp	r4, #0
 8024324:	f000 80dc 	beq.w	80244e0 <st_int8_avepool+0x20c>
 8024328:	1ac9      	subs	r1, r1, r3
 802432a:	eeb4 0a60 	vcmp.f32	s0, s1
 802432e:	425b      	negs	r3, r3
 8024330:	ee04 0a10 	vmov	s8, r0
 8024334:	b289      	uxth	r1, r1
 8024336:	2000      	movs	r0, #0
 8024338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802433c:	b29b      	uxth	r3, r3
 802433e:	9113      	str	r1, [sp, #76]	; 0x4c
 8024340:	f1c2 0100 	rsb	r1, r2, #0
 8024344:	9014      	str	r0, [sp, #80]	; 0x50
 8024346:	4602      	mov	r2, r0
 8024348:	9117      	str	r1, [sp, #92]	; 0x5c
 802434a:	ee13 1a90 	vmov	r1, s7
 802434e:	9301      	str	r3, [sp, #4]
 8024350:	462b      	mov	r3, r5
 8024352:	fb05 fb07 	mul.w	fp, r5, r7
 8024356:	bf14      	ite	ne
 8024358:	4603      	movne	r3, r0
 802435a:	2301      	moveq	r3, #1
 802435c:	ee14 0a10 	vmov	r0, s8
 8024360:	ed9f 5a6d 	vldr	s10, [pc, #436]	; 8024518 <st_int8_avepool+0x244>
 8024364:	46da      	mov	sl, fp
 8024366:	4281      	cmp	r1, r0
 8024368:	bf14      	ite	ne
 802436a:	2300      	movne	r3, #0
 802436c:	f003 0301 	andeq.w	r3, r3, #1
 8024370:	ed9f 3a6a 	vldr	s6, [pc, #424]	; 802451c <st_int8_avepool+0x248>
 8024374:	46b9      	mov	r9, r7
 8024376:	9307      	str	r3, [sp, #28]
 8024378:	990e      	ldr	r1, [sp, #56]	; 0x38
 802437a:	2900      	cmp	r1, #0
 802437c:	f000 809d 	beq.w	80244ba <st_int8_avepool+0x1e6>
 8024380:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8024382:	fb01 f202 	mul.w	r2, r1, r2
 8024386:	9d01      	ldr	r5, [sp, #4]
 8024388:	2400      	movs	r4, #0
 802438a:	1e43      	subs	r3, r0, #1
 802438c:	920f      	str	r2, [sp, #60]	; 0x3c
 802438e:	fa0f fb85 	sxth.w	fp, r5
 8024392:	9a03      	ldr	r2, [sp, #12]
 8024394:	1b5b      	subs	r3, r3, r5
 8024396:	b201      	sxth	r1, r0
 8024398:	fb02 f20b 	mul.w	r2, r2, fp
 802439c:	464f      	mov	r7, r9
 802439e:	b29b      	uxth	r3, r3
 80243a0:	9108      	str	r1, [sp, #32]
 80243a2:	9210      	str	r2, [sp, #64]	; 0x40
 80243a4:	4622      	mov	r2, r4
 80243a6:	3301      	adds	r3, #1
 80243a8:	f8bd 105c 	ldrh.w	r1, [sp, #92]	; 0x5c
 80243ac:	940d      	str	r4, [sp, #52]	; 0x34
 80243ae:	4699      	mov	r9, r3
 80243b0:	910c      	str	r1, [sp, #48]	; 0x30
 80243b2:	2f00      	cmp	r7, #0
 80243b4:	d073      	beq.n	802449e <st_int8_avepool+0x1ca>
 80243b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80243b8:	eef8 5ae3 	vcvt.f32.s32	s11, s7
 80243bc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80243be:	eeb8 6ac4 	vcvt.f32.s32	s12, s8
 80243c2:	441a      	add	r2, r3
 80243c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80243c6:	fa0f f881 	sxth.w	r8, r1
 80243ca:	185d      	adds	r5, r3, r1
 80243cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80243ce:	2100      	movs	r1, #0
 80243d0:	fb07 f202 	mul.w	r2, r7, r2
 80243d4:	4443      	add	r3, r8
 80243d6:	b22d      	sxth	r5, r5
 80243d8:	9105      	str	r1, [sp, #20]
 80243da:	fb07 f303 	mul.w	r3, r7, r3
 80243de:	9206      	str	r2, [sp, #24]
 80243e0:	930a      	str	r3, [sp, #40]	; 0x28
 80243e2:	9104      	str	r1, [sp, #16]
 80243e4:	9b08      	ldr	r3, [sp, #32]
 80243e6:	459b      	cmp	fp, r3
 80243e8:	f280 8090 	bge.w	802450c <st_int8_avepool+0x238>
 80243ec:	9b04      	ldr	r3, [sp, #16]
 80243ee:	2400      	movs	r4, #0
 80243f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80243f2:	46a4      	mov	ip, r4
 80243f4:	46a6      	mov	lr, r4
 80243f6:	189e      	adds	r6, r3, r2
 80243f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80243fa:	441e      	add	r6, r3
 80243fc:	45a8      	cmp	r8, r5
 80243fe:	da1b      	bge.n	8024438 <st_int8_avepool+0x164>
 8024400:	9b01      	ldr	r3, [sp, #4]
 8024402:	9902      	ldr	r1, [sp, #8]
 8024404:	191a      	adds	r2, r3, r4
 8024406:	eb0b 0304 	add.w	r3, fp, r4
 802440a:	43d2      	mvns	r2, r2
 802440c:	4299      	cmp	r1, r3
 802440e:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8024412:	dd11      	ble.n	8024438 <st_int8_avepool+0x164>
 8024414:	4631      	mov	r1, r6
 8024416:	4643      	mov	r3, r8
 8024418:	0418      	lsls	r0, r3, #16
 802441a:	d408      	bmi.n	802442e <st_int8_avepool+0x15a>
 802441c:	b13a      	cbz	r2, 802442e <st_int8_avepool+0x15a>
 802441e:	9803      	ldr	r0, [sp, #12]
 8024420:	4298      	cmp	r0, r3
 8024422:	dd04      	ble.n	802442e <st_int8_avepool+0x15a>
 8024424:	f991 0000 	ldrsb.w	r0, [r1]
 8024428:	f10c 0c01 	add.w	ip, ip, #1
 802442c:	4486      	add	lr, r0
 802442e:	3301      	adds	r3, #1
 8024430:	4439      	add	r1, r7
 8024432:	b218      	sxth	r0, r3
 8024434:	4285      	cmp	r5, r0
 8024436:	dcef      	bgt.n	8024418 <st_int8_avepool+0x144>
 8024438:	3401      	adds	r4, #1
 802443a:	4456      	add	r6, sl
 802443c:	45a1      	cmp	r9, r4
 802443e:	d1dd      	bne.n	80243fc <st_int8_avepool+0x128>
 8024440:	9b07      	ldr	r3, [sp, #28]
 8024442:	2b00      	cmp	r3, #0
 8024444:	d14f      	bne.n	80244e6 <st_int8_avepool+0x212>
 8024446:	ee07 ea90 	vmov	s15, lr
 802444a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 802444e:	ee07 ca90 	vmov	s15, ip
 8024452:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8024456:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802445a:	ee77 7ae5 	vsub.f32	s15, s15, s11
 802445e:	eef0 6a46 	vmov.f32	s13, s12
 8024462:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8024466:	eee7 6aa4 	vfma.f32	s13, s15, s9
 802446a:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 802446e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024472:	fe27 7a05 	vselge.f32	s14, s14, s10
 8024476:	ee77 7a26 	vadd.f32	s15, s14, s13
 802447a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802447e:	ee17 3a90 	vmov	r3, s15
 8024482:	f303 0307 	ssat	r3, #8, r3
 8024486:	9906      	ldr	r1, [sp, #24]
 8024488:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802448a:	440a      	add	r2, r1
 802448c:	9904      	ldr	r1, [sp, #16]
 802448e:	5453      	strb	r3, [r2, r1]
 8024490:	9b05      	ldr	r3, [sp, #20]
 8024492:	3301      	adds	r3, #1
 8024494:	b21b      	sxth	r3, r3
 8024496:	42bb      	cmp	r3, r7
 8024498:	e9cd 3304 	strd	r3, r3, [sp, #16]
 802449c:	dba2      	blt.n	80243e4 <st_int8_avepool+0x110>
 802449e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80244a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80244a2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80244a4:	3201      	adds	r2, #1
 80244a6:	440b      	add	r3, r1
 80244a8:	b212      	sxth	r2, r2
 80244aa:	990e      	ldr	r1, [sp, #56]	; 0x38
 80244ac:	b29b      	uxth	r3, r3
 80244ae:	920d      	str	r2, [sp, #52]	; 0x34
 80244b0:	428a      	cmp	r2, r1
 80244b2:	930c      	str	r3, [sp, #48]	; 0x30
 80244b4:	f6ff af7d 	blt.w	80243b2 <st_int8_avepool+0xde>
 80244b8:	46b9      	mov	r9, r7
 80244ba:	9b01      	ldr	r3, [sp, #4]
 80244bc:	9815      	ldr	r0, [sp, #84]	; 0x54
 80244be:	461a      	mov	r2, r3
 80244c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80244c2:	9914      	ldr	r1, [sp, #80]	; 0x50
 80244c4:	4403      	add	r3, r0
 80244c6:	4402      	add	r2, r0
 80244c8:	3101      	adds	r1, #1
 80244ca:	b29b      	uxth	r3, r3
 80244cc:	b209      	sxth	r1, r1
 80244ce:	9313      	str	r3, [sp, #76]	; 0x4c
 80244d0:	b292      	uxth	r2, r2
 80244d2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80244d4:	9201      	str	r2, [sp, #4]
 80244d6:	460a      	mov	r2, r1
 80244d8:	428b      	cmp	r3, r1
 80244da:	9114      	str	r1, [sp, #80]	; 0x50
 80244dc:	f73f af4c 	bgt.w	8024378 <st_int8_avepool+0xa4>
 80244e0:	b019      	add	sp, #100	; 0x64
 80244e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80244e6:	f1be 0f00 	cmp.w	lr, #0
 80244ea:	db04      	blt.n	80244f6 <st_int8_avepool+0x222>
 80244ec:	eb0e 0e6c 	add.w	lr, lr, ip, asr #1
 80244f0:	fb9e f3fc 	sdiv	r3, lr, ip
 80244f4:	e7c5      	b.n	8024482 <st_int8_avepool+0x1ae>
 80244f6:	f1bc 0f00 	cmp.w	ip, #0
 80244fa:	4663      	mov	r3, ip
 80244fc:	bfb8      	it	lt
 80244fe:	f10c 0301 	addlt.w	r3, ip, #1
 8024502:	ebae 0363 	sub.w	r3, lr, r3, asr #1
 8024506:	fb93 f3fc 	sdiv	r3, r3, ip
 802450a:	e7ba      	b.n	8024482 <st_int8_avepool+0x1ae>
 802450c:	9b07      	ldr	r3, [sp, #28]
 802450e:	b913      	cbnz	r3, 8024516 <st_int8_avepool+0x242>
 8024510:	eef0 7a43 	vmov.f32	s15, s6
 8024514:	e7a1      	b.n	802445a <st_int8_avepool+0x186>
 8024516:	deff      	udf	#255	; 0xff
 8024518:	befffffc 	.word	0xbefffffc
 802451c:	7fc00000 	.word	0x7fc00000

08024520 <st_dsp_arm_copy_q7>:
 8024520:	b470      	push	{r4, r5, r6}
 8024522:	0896      	lsrs	r6, r2, #2
 8024524:	d01b      	beq.n	802455e <st_dsp_arm_copy_q7+0x3e>
 8024526:	00b6      	lsls	r6, r6, #2
 8024528:	460b      	mov	r3, r1
 802452a:	1985      	adds	r5, r0, r6
 802452c:	f850 4b04 	ldr.w	r4, [r0], #4
 8024530:	42a8      	cmp	r0, r5
 8024532:	f843 4b04 	str.w	r4, [r3], #4
 8024536:	d1f9      	bne.n	802452c <st_dsp_arm_copy_q7+0xc>
 8024538:	4431      	add	r1, r6
 802453a:	f012 0203 	ands.w	r2, r2, #3
 802453e:	d00c      	beq.n	802455a <st_dsp_arm_copy_q7+0x3a>
 8024540:	f995 3000 	ldrsb.w	r3, [r5]
 8024544:	2a01      	cmp	r2, #1
 8024546:	700b      	strb	r3, [r1, #0]
 8024548:	d007      	beq.n	802455a <st_dsp_arm_copy_q7+0x3a>
 802454a:	f995 3001 	ldrsb.w	r3, [r5, #1]
 802454e:	2a02      	cmp	r2, #2
 8024550:	704b      	strb	r3, [r1, #1]
 8024552:	d002      	beq.n	802455a <st_dsp_arm_copy_q7+0x3a>
 8024554:	f995 3002 	ldrsb.w	r3, [r5, #2]
 8024558:	708b      	strb	r3, [r1, #2]
 802455a:	bc70      	pop	{r4, r5, r6}
 802455c:	4770      	bx	lr
 802455e:	4605      	mov	r5, r0
 8024560:	e7eb      	b.n	802453a <st_dsp_arm_copy_q7+0x1a>
 8024562:	bf00      	nop

08024564 <st_dsp_arm_fill_q15>:
 8024564:	b470      	push	{r4, r5, r6}
 8024566:	b285      	uxth	r5, r0
 8024568:	0896      	lsrs	r6, r2, #2
 802456a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 802456e:	d009      	beq.n	8024584 <st_dsp_arm_fill_q15+0x20>
 8024570:	460b      	mov	r3, r1
 8024572:	4634      	mov	r4, r6
 8024574:	3c01      	subs	r4, #1
 8024576:	601d      	str	r5, [r3, #0]
 8024578:	605d      	str	r5, [r3, #4]
 802457a:	f103 0308 	add.w	r3, r3, #8
 802457e:	d1f9      	bne.n	8024574 <st_dsp_arm_fill_q15+0x10>
 8024580:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8024584:	f012 0203 	ands.w	r2, r2, #3
 8024588:	d006      	beq.n	8024598 <st_dsp_arm_fill_q15+0x34>
 802458a:	2a01      	cmp	r2, #1
 802458c:	8008      	strh	r0, [r1, #0]
 802458e:	d003      	beq.n	8024598 <st_dsp_arm_fill_q15+0x34>
 8024590:	2a02      	cmp	r2, #2
 8024592:	8048      	strh	r0, [r1, #2]
 8024594:	bf18      	it	ne
 8024596:	8088      	strhne	r0, [r1, #4]
 8024598:	bc70      	pop	{r4, r5, r6}
 802459a:	4770      	bx	lr

0802459c <st_dsp_arm_float_to_q15>:
 802459c:	b4f0      	push	{r4, r5, r6, r7}
 802459e:	0897      	lsrs	r7, r2, #2
 80245a0:	d06b      	beq.n	802467a <st_dsp_arm_float_to_q15+0xde>
 80245a2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80245a6:	f100 0510 	add.w	r5, r0, #16
 80245aa:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 80245ae:	f101 0408 	add.w	r4, r1, #8
 80245b2:	463e      	mov	r6, r7
 80245b4:	ed9f 6a55 	vldr	s12, [pc, #340]	; 802470c <st_dsp_arm_float_to_q15+0x170>
 80245b8:	e00b      	b.n	80245d2 <st_dsp_arm_float_to_q15+0x36>
 80245ba:	ee17 3a10 	vmov	r3, s14
 80245be:	f303 030f 	ssat	r3, #16, r3
 80245c2:	3e01      	subs	r6, #1
 80245c4:	f824 3c02 	strh.w	r3, [r4, #-2]
 80245c8:	f105 0510 	add.w	r5, r5, #16
 80245cc:	f104 0408 	add.w	r4, r4, #8
 80245d0:	d04f      	beq.n	8024672 <st_dsp_arm_float_to_q15+0xd6>
 80245d2:	ed55 7a04 	vldr	s15, [r5, #-16]
 80245d6:	ee27 7a86 	vmul.f32	s14, s15, s12
 80245da:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80245de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80245e2:	fe76 7aa5 	vselgt.f32	s15, s13, s11
 80245e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80245ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80245ee:	ee17 3a90 	vmov	r3, s15
 80245f2:	f303 030f 	ssat	r3, #16, r3
 80245f6:	f824 3c08 	strh.w	r3, [r4, #-8]
 80245fa:	ed55 7a03 	vldr	s15, [r5, #-12]
 80245fe:	ee27 7a86 	vmul.f32	s14, s15, s12
 8024602:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8024606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802460a:	fe76 7aa5 	vselgt.f32	s15, s13, s11
 802460e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8024612:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8024616:	ee17 3a90 	vmov	r3, s15
 802461a:	f303 030f 	ssat	r3, #16, r3
 802461e:	f824 3c06 	strh.w	r3, [r4, #-6]
 8024622:	ed55 7a02 	vldr	s15, [r5, #-8]
 8024626:	ee27 7a86 	vmul.f32	s14, s15, s12
 802462a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 802462e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024632:	fe76 7aa5 	vselgt.f32	s15, s13, s11
 8024636:	ee77 7a87 	vadd.f32	s15, s15, s14
 802463a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802463e:	ee17 3a90 	vmov	r3, s15
 8024642:	f303 030f 	ssat	r3, #16, r3
 8024646:	f824 3c04 	strh.w	r3, [r4, #-4]
 802464a:	ed55 7a01 	vldr	s15, [r5, #-4]
 802464e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8024652:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8024656:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802465a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802465e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8024662:	dcaa      	bgt.n	80245ba <st_dsp_arm_float_to_q15+0x1e>
 8024664:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8024668:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802466c:	ee17 3a90 	vmov	r3, s15
 8024670:	e7a5      	b.n	80245be <st_dsp_arm_float_to_q15+0x22>
 8024672:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8024676:	eb00 1007 	add.w	r0, r0, r7, lsl #4
 802467a:	f012 0203 	ands.w	r2, r2, #3
 802467e:	d042      	beq.n	8024706 <st_dsp_arm_float_to_q15+0x16a>
 8024680:	edd0 7a00 	vldr	s15, [r0]
 8024684:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8024688:	eddf 5a20 	vldr	s11, [pc, #128]	; 802470c <st_dsp_arm_float_to_q15+0x170>
 802468c:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 8024690:	ee67 6aa5 	vmul.f32	s13, s15, s11
 8024694:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8024698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802469c:	fe77 7a06 	vselgt.f32	s15, s14, s12
 80246a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80246a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80246a8:	ee17 3a90 	vmov	r3, s15
 80246ac:	f303 030f 	ssat	r3, #16, r3
 80246b0:	2a01      	cmp	r2, #1
 80246b2:	800b      	strh	r3, [r1, #0]
 80246b4:	d027      	beq.n	8024706 <st_dsp_arm_float_to_q15+0x16a>
 80246b6:	edd0 7a01 	vldr	s15, [r0, #4]
 80246ba:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80246be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80246c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80246c6:	fe77 6a06 	vselgt.f32	s13, s14, s12
 80246ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80246ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80246d2:	ee17 3a90 	vmov	r3, s15
 80246d6:	f303 030f 	ssat	r3, #16, r3
 80246da:	2a02      	cmp	r2, #2
 80246dc:	804b      	strh	r3, [r1, #2]
 80246de:	d012      	beq.n	8024706 <st_dsp_arm_float_to_q15+0x16a>
 80246e0:	edd0 7a02 	vldr	s15, [r0, #8]
 80246e4:	ee67 5aa5 	vmul.f32	s11, s15, s11
 80246e8:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 80246ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80246f0:	fe37 7a06 	vselgt.f32	s14, s14, s12
 80246f4:	ee37 7a25 	vadd.f32	s14, s14, s11
 80246f8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80246fc:	ee17 3a10 	vmov	r3, s14
 8024700:	f303 030f 	ssat	r3, #16, r3
 8024704:	808b      	strh	r3, [r1, #4]
 8024706:	bcf0      	pop	{r4, r5, r6, r7}
 8024708:	4770      	bx	lr
 802470a:	bf00      	nop
 802470c:	47000000 	.word	0x47000000

08024710 <st_dsp_arm_float_to_q7>:
 8024710:	b4f0      	push	{r4, r5, r6, r7}
 8024712:	0897      	lsrs	r7, r2, #2
 8024714:	d066      	beq.n	80247e4 <st_dsp_arm_float_to_q7+0xd4>
 8024716:	1d0c      	adds	r4, r1, #4
 8024718:	ea4f 0c87 	mov.w	ip, r7, lsl #2
 802471c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8024720:	f100 0510 	add.w	r5, r0, #16
 8024724:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 8024728:	eb04 060c 	add.w	r6, r4, ip
 802472c:	ed9f 6a5b 	vldr	s12, [pc, #364]	; 802489c <st_dsp_arm_float_to_q7+0x18c>
 8024730:	ed55 7a04 	vldr	s15, [r5, #-16]
 8024734:	ee27 7a86 	vmul.f32	s14, s15, s12
 8024738:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 802473c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024740:	fe76 7aa5 	vselgt.f32	s15, s13, s11
 8024744:	ee77 7a87 	vadd.f32	s15, s15, s14
 8024748:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802474c:	ee17 3a90 	vmov	r3, s15
 8024750:	b21b      	sxth	r3, r3
 8024752:	f303 0307 	ssat	r3, #8, r3
 8024756:	f804 3c04 	strb.w	r3, [r4, #-4]
 802475a:	ed55 7a03 	vldr	s15, [r5, #-12]
 802475e:	ee27 7a86 	vmul.f32	s14, s15, s12
 8024762:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8024766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802476a:	fe76 7aa5 	vselgt.f32	s15, s13, s11
 802476e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8024772:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8024776:	ee17 3a90 	vmov	r3, s15
 802477a:	b21b      	sxth	r3, r3
 802477c:	f303 0307 	ssat	r3, #8, r3
 8024780:	f804 3c03 	strb.w	r3, [r4, #-3]
 8024784:	ed55 7a02 	vldr	s15, [r5, #-8]
 8024788:	ee27 7a86 	vmul.f32	s14, s15, s12
 802478c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8024790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024794:	fe76 7aa5 	vselgt.f32	s15, s13, s11
 8024798:	ee77 7a87 	vadd.f32	s15, s15, s14
 802479c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80247a0:	ee17 3a90 	vmov	r3, s15
 80247a4:	b21b      	sxth	r3, r3
 80247a6:	f303 0307 	ssat	r3, #8, r3
 80247aa:	f804 3c02 	strb.w	r3, [r4, #-2]
 80247ae:	ed55 7a01 	vldr	s15, [r5, #-4]
 80247b2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80247b6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80247ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80247be:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80247c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80247c6:	ee17 3a10 	vmov	r3, s14
 80247ca:	b21b      	sxth	r3, r3
 80247cc:	dd55      	ble.n	802487a <st_dsp_arm_float_to_q7+0x16a>
 80247ce:	f303 0307 	ssat	r3, #8, r3
 80247d2:	f804 3c01 	strb.w	r3, [r4, #-1]
 80247d6:	3404      	adds	r4, #4
 80247d8:	3510      	adds	r5, #16
 80247da:	42a6      	cmp	r6, r4
 80247dc:	d1a8      	bne.n	8024730 <st_dsp_arm_float_to_q7+0x20>
 80247de:	4461      	add	r1, ip
 80247e0:	eb00 1007 	add.w	r0, r0, r7, lsl #4
 80247e4:	f012 0203 	ands.w	r2, r2, #3
 80247e8:	d045      	beq.n	8024876 <st_dsp_arm_float_to_q7+0x166>
 80247ea:	edd0 7a00 	vldr	s15, [r0]
 80247ee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80247f2:	ed9f 5a2a 	vldr	s10, [pc, #168]	; 802489c <st_dsp_arm_float_to_q7+0x18c>
 80247f6:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 80247fa:	ee67 6a85 	vmul.f32	s13, s15, s10
 80247fe:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8024802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024806:	fe77 7a25 	vselgt.f32	s15, s14, s11
 802480a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802480e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8024812:	ee17 3a90 	vmov	r3, s15
 8024816:	b21b      	sxth	r3, r3
 8024818:	f303 0307 	ssat	r3, #8, r3
 802481c:	2a01      	cmp	r2, #1
 802481e:	700b      	strb	r3, [r1, #0]
 8024820:	d029      	beq.n	8024876 <st_dsp_arm_float_to_q7+0x166>
 8024822:	edd0 6a01 	vldr	s13, [r0, #4]
 8024826:	ee26 6a85 	vmul.f32	s12, s13, s10
 802482a:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 802482e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024832:	fe77 6a25 	vselgt.f32	s13, s14, s11
 8024836:	ee76 6a86 	vadd.f32	s13, s13, s12
 802483a:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 802483e:	ee16 3a90 	vmov	r3, s13
 8024842:	b21b      	sxth	r3, r3
 8024844:	f303 0307 	ssat	r3, #8, r3
 8024848:	2a02      	cmp	r2, #2
 802484a:	704b      	strb	r3, [r1, #1]
 802484c:	d013      	beq.n	8024876 <st_dsp_arm_float_to_q7+0x166>
 802484e:	edd0 7a02 	vldr	s15, [r0, #8]
 8024852:	ee27 5a85 	vmul.f32	s10, s15, s10
 8024856:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 802485a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802485e:	fe77 7a25 	vselgt.f32	s15, s14, s11
 8024862:	ee77 7a85 	vadd.f32	s15, s15, s10
 8024866:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802486a:	ee17 3a90 	vmov	r3, s15
 802486e:	b21b      	sxth	r3, r3
 8024870:	f303 0307 	ssat	r3, #8, r3
 8024874:	708b      	strb	r3, [r1, #2]
 8024876:	bcf0      	pop	{r4, r5, r6, r7}
 8024878:	4770      	bx	lr
 802487a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802487e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8024882:	ee17 3a90 	vmov	r3, s15
 8024886:	b21b      	sxth	r3, r3
 8024888:	f303 0307 	ssat	r3, #8, r3
 802488c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8024890:	3404      	adds	r4, #4
 8024892:	3510      	adds	r5, #16
 8024894:	42b4      	cmp	r4, r6
 8024896:	f47f af4b 	bne.w	8024730 <st_dsp_arm_float_to_q7+0x20>
 802489a:	e7a0      	b.n	80247de <st_dsp_arm_float_to_q7+0xce>
 802489c:	43000000 	.word	0x43000000

080248a0 <st_dsp_arm_q15_to_float>:
 80248a0:	b470      	push	{r4, r5, r6}
 80248a2:	0896      	lsrs	r6, r2, #2
 80248a4:	d038      	beq.n	8024918 <st_dsp_arm_q15_to_float+0x78>
 80248a6:	f100 0408 	add.w	r4, r0, #8
 80248aa:	f101 0310 	add.w	r3, r1, #16
 80248ae:	4635      	mov	r5, r6
 80248b0:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 802496c <st_dsp_arm_q15_to_float+0xcc>
 80248b4:	f934 cc08 	ldrsh.w	ip, [r4, #-8]
 80248b8:	3d01      	subs	r5, #1
 80248ba:	f104 0408 	add.w	r4, r4, #8
 80248be:	f103 0310 	add.w	r3, r3, #16
 80248c2:	ee07 ca90 	vmov	s15, ip
 80248c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80248ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80248ce:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
 80248d2:	f934 cc0e 	ldrsh.w	ip, [r4, #-14]
 80248d6:	ee07 ca90 	vmov	s15, ip
 80248da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80248de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80248e2:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
 80248e6:	f934 cc0c 	ldrsh.w	ip, [r4, #-12]
 80248ea:	ee07 ca90 	vmov	s15, ip
 80248ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80248f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80248f6:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 80248fa:	f934 cc0a 	ldrsh.w	ip, [r4, #-10]
 80248fe:	ee07 ca90 	vmov	s15, ip
 8024902:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8024906:	ee67 7a87 	vmul.f32	s15, s15, s14
 802490a:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 802490e:	d1d1      	bne.n	80248b4 <st_dsp_arm_q15_to_float+0x14>
 8024910:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 8024914:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8024918:	f012 0203 	ands.w	r2, r2, #3
 802491c:	d023      	beq.n	8024966 <st_dsp_arm_q15_to_float+0xc6>
 802491e:	f9b0 3000 	ldrsh.w	r3, [r0]
 8024922:	2a01      	cmp	r2, #1
 8024924:	ed9f 7a11 	vldr	s14, [pc, #68]	; 802496c <st_dsp_arm_q15_to_float+0xcc>
 8024928:	ee07 3a90 	vmov	s15, r3
 802492c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8024930:	ee67 7a87 	vmul.f32	s15, s15, s14
 8024934:	edc1 7a00 	vstr	s15, [r1]
 8024938:	d015      	beq.n	8024966 <st_dsp_arm_q15_to_float+0xc6>
 802493a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 802493e:	2a02      	cmp	r2, #2
 8024940:	ee07 3a90 	vmov	s15, r3
 8024944:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8024948:	ee67 7a87 	vmul.f32	s15, s15, s14
 802494c:	edc1 7a01 	vstr	s15, [r1, #4]
 8024950:	d009      	beq.n	8024966 <st_dsp_arm_q15_to_float+0xc6>
 8024952:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8024956:	ee07 3a90 	vmov	s15, r3
 802495a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802495e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8024962:	edc1 7a02 	vstr	s15, [r1, #8]
 8024966:	bc70      	pop	{r4, r5, r6}
 8024968:	4770      	bx	lr
 802496a:	bf00      	nop
 802496c:	38000000 	.word	0x38000000

08024970 <st_dsp_arm_q7_to_float>:
 8024970:	b470      	push	{r4, r5, r6}
 8024972:	0895      	lsrs	r5, r2, #2
 8024974:	d036      	beq.n	80249e4 <st_dsp_arm_q7_to_float+0x74>
 8024976:	eb00 0685 	add.w	r6, r0, r5, lsl #2
 802497a:	f101 0310 	add.w	r3, r1, #16
 802497e:	3004      	adds	r0, #4
 8024980:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8024a38 <st_dsp_arm_q7_to_float+0xc8>
 8024984:	1d34      	adds	r4, r6, #4
 8024986:	f910 cc04 	ldrsb.w	ip, [r0, #-4]
 802498a:	3004      	adds	r0, #4
 802498c:	3310      	adds	r3, #16
 802498e:	ee07 ca90 	vmov	s15, ip
 8024992:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8024996:	ee67 7a87 	vmul.f32	s15, s15, s14
 802499a:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
 802499e:	f910 cc07 	ldrsb.w	ip, [r0, #-7]
 80249a2:	ee07 ca90 	vmov	s15, ip
 80249a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80249aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80249ae:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
 80249b2:	f910 cc06 	ldrsb.w	ip, [r0, #-6]
 80249b6:	ee07 ca90 	vmov	s15, ip
 80249ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80249be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80249c2:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 80249c6:	f910 cc05 	ldrsb.w	ip, [r0, #-5]
 80249ca:	42a0      	cmp	r0, r4
 80249cc:	ee07 ca90 	vmov	s15, ip
 80249d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80249d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80249d8:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 80249dc:	d1d3      	bne.n	8024986 <st_dsp_arm_q7_to_float+0x16>
 80249de:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 80249e2:	4630      	mov	r0, r6
 80249e4:	f012 0203 	ands.w	r2, r2, #3
 80249e8:	d023      	beq.n	8024a32 <st_dsp_arm_q7_to_float+0xc2>
 80249ea:	f990 3000 	ldrsb.w	r3, [r0]
 80249ee:	2a01      	cmp	r2, #1
 80249f0:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8024a38 <st_dsp_arm_q7_to_float+0xc8>
 80249f4:	ee07 3a90 	vmov	s15, r3
 80249f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80249fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8024a00:	edc1 7a00 	vstr	s15, [r1]
 8024a04:	d015      	beq.n	8024a32 <st_dsp_arm_q7_to_float+0xc2>
 8024a06:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8024a0a:	2a02      	cmp	r2, #2
 8024a0c:	ee07 3a90 	vmov	s15, r3
 8024a10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8024a14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8024a18:	edc1 7a01 	vstr	s15, [r1, #4]
 8024a1c:	d009      	beq.n	8024a32 <st_dsp_arm_q7_to_float+0xc2>
 8024a1e:	f990 3002 	ldrsb.w	r3, [r0, #2]
 8024a22:	ee07 3a90 	vmov	s15, r3
 8024a26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8024a2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8024a2e:	edc1 7a02 	vstr	s15, [r1, #8]
 8024a32:	bc70      	pop	{r4, r5, r6}
 8024a34:	4770      	bx	lr
 8024a36:	bf00      	nop
 8024a38:	3c000000 	.word	0x3c000000

08024a3c <ai_version_get>:
 8024a3c:	0212      	lsls	r2, r2, #8
 8024a3e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8024a42:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8024a46:	4770      	bx	lr

08024a48 <ai_platform_version_get>:
 8024a48:	0e01      	lsrs	r1, r0, #24
 8024a4a:	2300      	movs	r3, #0
 8024a4c:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8024a50:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8024a54:	f361 0307 	bfi	r3, r1, #0, #8
 8024a58:	b082      	sub	sp, #8
 8024a5a:	f362 230f 	bfi	r3, r2, #8, #8
 8024a5e:	f360 4317 	bfi	r3, r0, #16, #8
 8024a62:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
 8024a66:	b002      	add	sp, #8
 8024a68:	4770      	bx	lr
 8024a6a:	bf00      	nop

08024a6c <get_tensor_byte_size>:
 8024a6c:	b410      	push	{r4}
 8024a6e:	6984      	ldr	r4, [r0, #24]
 8024a70:	4b08      	ldr	r3, [pc, #32]	; (8024a94 <get_tensor_byte_size+0x28>)
 8024a72:	6824      	ldr	r4, [r4, #0]
 8024a74:	68c1      	ldr	r1, [r0, #12]
 8024a76:	4a08      	ldr	r2, [pc, #32]	; (8024a98 <get_tensor_byte_size+0x2c>)
 8024a78:	4023      	ands	r3, r4
 8024a7a:	6940      	ldr	r0, [r0, #20]
 8024a7c:	68c9      	ldr	r1, [r1, #12]
 8024a7e:	4293      	cmp	r3, r2
 8024a80:	68c0      	ldr	r0, [r0, #12]
 8024a82:	fb00 f001 	mul.w	r0, r0, r1
 8024a86:	d101      	bne.n	8024a8c <get_tensor_byte_size+0x20>
 8024a88:	3007      	adds	r0, #7
 8024a8a:	08c0      	lsrs	r0, r0, #3
 8024a8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024a90:	4770      	bx	lr
 8024a92:	bf00      	nop
 8024a94:	017fffff 	.word	0x017fffff
 8024a98:	000400c0 	.word	0x000400c0

08024a9c <ai_array_to_buffer_fmt>:
 8024a9c:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8024aa0:	2b02      	cmp	r3, #2
 8024aa2:	d036      	beq.n	8024b12 <ai_array_to_buffer_fmt+0x76>
 8024aa4:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 8024aa8:	4a20      	ldr	r2, [pc, #128]	; (8024b2c <ai_array_to_buffer_fmt+0x90>)
 8024aaa:	4293      	cmp	r3, r2
 8024aac:	d00f      	beq.n	8024ace <ai_array_to_buffer_fmt+0x32>
 8024aae:	dd12      	ble.n	8024ad6 <ai_array_to_buffer_fmt+0x3a>
 8024ab0:	4a1f      	ldr	r2, [pc, #124]	; (8024b30 <ai_array_to_buffer_fmt+0x94>)
 8024ab2:	4293      	cmp	r3, r2
 8024ab4:	d00b      	beq.n	8024ace <ai_array_to_buffer_fmt+0x32>
 8024ab6:	dd1e      	ble.n	8024af6 <ai_array_to_buffer_fmt+0x5a>
 8024ab8:	4a1e      	ldr	r2, [pc, #120]	; (8024b34 <ai_array_to_buffer_fmt+0x98>)
 8024aba:	4293      	cmp	r3, r2
 8024abc:	d007      	beq.n	8024ace <ai_array_to_buffer_fmt+0x32>
 8024abe:	dd30      	ble.n	8024b22 <ai_array_to_buffer_fmt+0x86>
 8024ac0:	4a1d      	ldr	r2, [pc, #116]	; (8024b38 <ai_array_to_buffer_fmt+0x9c>)
 8024ac2:	4293      	cmp	r3, r2
 8024ac4:	d003      	beq.n	8024ace <ai_array_to_buffer_fmt+0x32>
 8024ac6:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 8024aca:	4293      	cmp	r3, r2
 8024acc:	d11f      	bne.n	8024b0e <ai_array_to_buffer_fmt+0x72>
 8024ace:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8024ad2:	4318      	orrs	r0, r3
 8024ad4:	4770      	bx	lr
 8024ad6:	4a19      	ldr	r2, [pc, #100]	; (8024b3c <ai_array_to_buffer_fmt+0xa0>)
 8024ad8:	4293      	cmp	r3, r2
 8024ada:	d0f8      	beq.n	8024ace <ai_array_to_buffer_fmt+0x32>
 8024adc:	dd0b      	ble.n	8024af6 <ai_array_to_buffer_fmt+0x5a>
 8024ade:	4a18      	ldr	r2, [pc, #96]	; (8024b40 <ai_array_to_buffer_fmt+0xa4>)
 8024ae0:	4293      	cmp	r3, r2
 8024ae2:	d0f4      	beq.n	8024ace <ai_array_to_buffer_fmt+0x32>
 8024ae4:	f202 72f1 	addw	r2, r2, #2033	; 0x7f1
 8024ae8:	4293      	cmp	r3, r2
 8024aea:	d0f0      	beq.n	8024ace <ai_array_to_buffer_fmt+0x32>
 8024aec:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8024af0:	4293      	cmp	r3, r2
 8024af2:	d10c      	bne.n	8024b0e <ai_array_to_buffer_fmt+0x72>
 8024af4:	e7eb      	b.n	8024ace <ai_array_to_buffer_fmt+0x32>
 8024af6:	f2a2 3287 	subw	r2, r2, #903	; 0x387
 8024afa:	4293      	cmp	r3, r2
 8024afc:	d0e7      	beq.n	8024ace <ai_array_to_buffer_fmt+0x32>
 8024afe:	f502 7260 	add.w	r2, r2, #896	; 0x380
 8024b02:	4293      	cmp	r3, r2
 8024b04:	d0e3      	beq.n	8024ace <ai_array_to_buffer_fmt+0x32>
 8024b06:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8024b0a:	4293      	cmp	r3, r2
 8024b0c:	d0df      	beq.n	8024ace <ai_array_to_buffer_fmt+0x32>
 8024b0e:	2340      	movs	r3, #64	; 0x40
 8024b10:	e7dd      	b.n	8024ace <ai_array_to_buffer_fmt+0x32>
 8024b12:	4b0c      	ldr	r3, [pc, #48]	; (8024b44 <ai_array_to_buffer_fmt+0xa8>)
 8024b14:	4003      	ands	r3, r0
 8024b16:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8024b1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8024b1e:	4318      	orrs	r0, r3
 8024b20:	4770      	bx	lr
 8024b22:	3a0f      	subs	r2, #15
 8024b24:	4293      	cmp	r3, r2
 8024b26:	d0d2      	beq.n	8024ace <ai_array_to_buffer_fmt+0x32>
 8024b28:	e7f1      	b.n	8024b0e <ai_array_to_buffer_fmt+0x72>
 8024b2a:	bf00      	nop
 8024b2c:	00060440 	.word	0x00060440
 8024b30:	00840447 	.word	0x00840447
 8024b34:	0084084f 	.word	0x0084084f
 8024b38:	00841040 	.word	0x00841040
 8024b3c:	00040447 	.word	0x00040447
 8024b40:	0004084f 	.word	0x0004084f
 8024b44:	00803fff 	.word	0x00803fff

08024b48 <ai_array_get_data_byte_size>:
 8024b48:	b161      	cbz	r1, 8024b64 <ai_array_get_data_byte_size+0x1c>
 8024b4a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8024b4e:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8024b52:	fb01 f103 	mul.w	r1, r1, r3
 8024b56:	3107      	adds	r1, #7
 8024b58:	f021 0107 	bic.w	r1, r1, #7
 8024b5c:	40c1      	lsrs	r1, r0
 8024b5e:	3107      	adds	r1, #7
 8024b60:	08c8      	lsrs	r0, r1, #3
 8024b62:	4770      	bx	lr
 8024b64:	4608      	mov	r0, r1
 8024b66:	4770      	bx	lr

08024b68 <core_get_broadcasted_shape>:
 8024b68:	b4f0      	push	{r4, r5, r6, r7}
 8024b6a:	6804      	ldr	r4, [r0, #0]
 8024b6c:	f3c4 2417 	ubfx	r4, r4, #8, #24
 8024b70:	b30c      	cbz	r4, 8024bb6 <core_get_broadcasted_shape+0x4e>
 8024b72:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
 8024b76:	4623      	mov	r3, r4
 8024b78:	4425      	add	r5, r4
 8024b7a:	00ad      	lsls	r5, r5, #2
 8024b7c:	e002      	b.n	8024b84 <core_get_broadcasted_shape+0x1c>
 8024b7e:	6804      	ldr	r4, [r0, #0]
 8024b80:	f3c4 2417 	ubfx	r4, r4, #8, #24
 8024b84:	3b01      	subs	r3, #1
 8024b86:	429c      	cmp	r4, r3
 8024b88:	d912      	bls.n	8024bb0 <core_get_broadcasted_shape+0x48>
 8024b8a:	6816      	ldr	r6, [r2, #0]
 8024b8c:	2401      	movs	r4, #1
 8024b8e:	ebb3 2f16 	cmp.w	r3, r6, lsr #8
 8024b92:	d201      	bcs.n	8024b98 <core_get_broadcasted_shape+0x30>
 8024b94:	6854      	ldr	r4, [r2, #4]
 8024b96:	5964      	ldr	r4, [r4, r5]
 8024b98:	680f      	ldr	r7, [r1, #0]
 8024b9a:	2601      	movs	r6, #1
 8024b9c:	ebb3 2f17 	cmp.w	r3, r7, lsr #8
 8024ba0:	d201      	bcs.n	8024ba6 <core_get_broadcasted_shape+0x3e>
 8024ba2:	684e      	ldr	r6, [r1, #4]
 8024ba4:	5976      	ldr	r6, [r6, r5]
 8024ba6:	42b4      	cmp	r4, r6
 8024ba8:	bf38      	it	cc
 8024baa:	4634      	movcc	r4, r6
 8024bac:	6846      	ldr	r6, [r0, #4]
 8024bae:	5174      	str	r4, [r6, r5]
 8024bb0:	3d04      	subs	r5, #4
 8024bb2:	2b00      	cmp	r3, #0
 8024bb4:	d1e3      	bne.n	8024b7e <core_get_broadcasted_shape+0x16>
 8024bb6:	bcf0      	pop	{r4, r5, r6, r7}
 8024bb8:	4770      	bx	lr
 8024bba:	bf00      	nop

08024bbc <core_compute_offsets_in_bytes>:
 8024bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024bc0:	684e      	ldr	r6, [r1, #4]
 8024bc2:	b083      	sub	sp, #12
 8024bc4:	6855      	ldr	r5, [r2, #4]
 8024bc6:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8024bca:	f8d5 a004 	ldr.w	sl, [r5, #4]
 8024bce:	6809      	ldr	r1, [r1, #0]
 8024bd0:	ebbe 090a 	subs.w	r9, lr, sl
 8024bd4:	bf18      	it	ne
 8024bd6:	f04f 0901 	movne.w	r9, #1
 8024bda:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 8024bde:	f0c0 808f 	bcc.w	8024d00 <core_compute_offsets_in_bytes+0x144>
 8024be2:	f8d6 8010 	ldr.w	r8, [r6, #16]
 8024be6:	fb08 fc0e 	mul.w	ip, r8, lr
 8024bea:	6812      	ldr	r2, [r2, #0]
 8024bec:	68af      	ldr	r7, [r5, #8]
 8024bee:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8024bf2:	68b1      	ldr	r1, [r6, #8]
 8024bf4:	6802      	ldr	r2, [r0, #0]
 8024bf6:	bf2c      	ite	cs
 8024bf8:	f8d5 b010 	ldrcs.w	fp, [r5, #16]
 8024bfc:	f04f 0b01 	movcc.w	fp, #1
 8024c00:	68f6      	ldr	r6, [r6, #12]
 8024c02:	f3c2 2217 	ubfx	r2, r2, #8, #24
 8024c06:	ebb8 040b 	subs.w	r4, r8, fp
 8024c0a:	9701      	str	r7, [sp, #4]
 8024c0c:	9600      	str	r6, [sp, #0]
 8024c0e:	bf18      	it	ne
 8024c10:	2401      	movne	r4, #1
 8024c12:	1bce      	subs	r6, r1, r7
 8024c14:	68ed      	ldr	r5, [r5, #12]
 8024c16:	bf18      	it	ne
 8024c18:	2601      	movne	r6, #1
 8024c1a:	2a01      	cmp	r2, #1
 8024c1c:	d974      	bls.n	8024d08 <core_compute_offsets_in_bytes+0x14c>
 8024c1e:	ebae 020a 	sub.w	r2, lr, sl
 8024c22:	6847      	ldr	r7, [r0, #4]
 8024c24:	fb0e fe04 	mul.w	lr, lr, r4
 8024c28:	fab2 f282 	clz	r2, r2
 8024c2c:	0952      	lsrs	r2, r2, #5
 8024c2e:	607a      	str	r2, [r7, #4]
 8024c30:	6802      	ldr	r2, [r0, #0]
 8024c32:	f3c2 2217 	ubfx	r2, r2, #8, #24
 8024c36:	2a04      	cmp	r2, #4
 8024c38:	d90c      	bls.n	8024c54 <core_compute_offsets_in_bytes+0x98>
 8024c3a:	45d8      	cmp	r8, fp
 8024c3c:	bf14      	ite	ne
 8024c3e:	f04f 0800 	movne.w	r8, #0
 8024c42:	f009 0801 	andeq.w	r8, r9, #1
 8024c46:	6847      	ldr	r7, [r0, #4]
 8024c48:	eba8 020e 	sub.w	r2, r8, lr
 8024c4c:	613a      	str	r2, [r7, #16]
 8024c4e:	6802      	ldr	r2, [r0, #0]
 8024c50:	f3c2 2217 	ubfx	r2, r2, #8, #24
 8024c54:	2a02      	cmp	r2, #2
 8024c56:	fb0c f806 	mul.w	r8, ip, r6
 8024c5a:	d911      	bls.n	8024c80 <core_compute_offsets_in_bytes+0xc4>
 8024c5c:	9a01      	ldr	r2, [sp, #4]
 8024c5e:	6847      	ldr	r7, [r0, #4]
 8024c60:	4291      	cmp	r1, r2
 8024c62:	bf14      	ite	ne
 8024c64:	f04f 0b00 	movne.w	fp, #0
 8024c68:	f009 0b01 	andeq.w	fp, r9, #1
 8024c6c:	ea04 0b0b 	and.w	fp, r4, fp
 8024c70:	ebab 0b08 	sub.w	fp, fp, r8
 8024c74:	eb0b 020e 	add.w	r2, fp, lr
 8024c78:	60ba      	str	r2, [r7, #8]
 8024c7a:	6802      	ldr	r2, [r0, #0]
 8024c7c:	f3c2 2217 	ubfx	r2, r2, #8, #24
 8024c80:	9f00      	ldr	r7, [sp, #0]
 8024c82:	42af      	cmp	r7, r5
 8024c84:	d13a      	bne.n	8024cfc <core_compute_offsets_in_bytes+0x140>
 8024c86:	2e00      	cmp	r6, #0
 8024c88:	d038      	beq.n	8024cfc <core_compute_offsets_in_bytes+0x140>
 8024c8a:	ea09 0404 	and.w	r4, r9, r4
 8024c8e:	2a03      	cmp	r2, #3
 8024c90:	d90d      	bls.n	8024cae <core_compute_offsets_in_bytes+0xf2>
 8024c92:	9a00      	ldr	r2, [sp, #0]
 8024c94:	fb0c f101 	mul.w	r1, ip, r1
 8024c98:	1b55      	subs	r5, r2, r5
 8024c9a:	6842      	ldr	r2, [r0, #4]
 8024c9c:	bf18      	it	ne
 8024c9e:	2501      	movne	r5, #1
 8024ca0:	fb05 4511 	mls	r5, r5, r1, r4
 8024ca4:	4445      	add	r5, r8
 8024ca6:	60d5      	str	r5, [r2, #12]
 8024ca8:	6802      	ldr	r2, [r0, #0]
 8024caa:	f3c2 2217 	ubfx	r2, r2, #8, #24
 8024cae:	2a01      	cmp	r2, #1
 8024cb0:	d911      	bls.n	8024cd6 <core_compute_offsets_in_bytes+0x11a>
 8024cb2:	6841      	ldr	r1, [r0, #4]
 8024cb4:	684a      	ldr	r2, [r1, #4]
 8024cb6:	fb03 f202 	mul.w	r2, r3, r2
 8024cba:	604a      	str	r2, [r1, #4]
 8024cbc:	6802      	ldr	r2, [r0, #0]
 8024cbe:	f3c2 2217 	ubfx	r2, r2, #8, #24
 8024cc2:	2a04      	cmp	r2, #4
 8024cc4:	d907      	bls.n	8024cd6 <core_compute_offsets_in_bytes+0x11a>
 8024cc6:	6841      	ldr	r1, [r0, #4]
 8024cc8:	690a      	ldr	r2, [r1, #16]
 8024cca:	fb03 f202 	mul.w	r2, r3, r2
 8024cce:	610a      	str	r2, [r1, #16]
 8024cd0:	6802      	ldr	r2, [r0, #0]
 8024cd2:	f3c2 2217 	ubfx	r2, r2, #8, #24
 8024cd6:	2a02      	cmp	r2, #2
 8024cd8:	d90d      	bls.n	8024cf6 <core_compute_offsets_in_bytes+0x13a>
 8024cda:	6841      	ldr	r1, [r0, #4]
 8024cdc:	688a      	ldr	r2, [r1, #8]
 8024cde:	fb03 f202 	mul.w	r2, r3, r2
 8024ce2:	608a      	str	r2, [r1, #8]
 8024ce4:	6802      	ldr	r2, [r0, #0]
 8024ce6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8024cea:	d304      	bcc.n	8024cf6 <core_compute_offsets_in_bytes+0x13a>
 8024cec:	6841      	ldr	r1, [r0, #4]
 8024cee:	68ca      	ldr	r2, [r1, #12]
 8024cf0:	fb03 f302 	mul.w	r3, r3, r2
 8024cf4:	60cb      	str	r3, [r1, #12]
 8024cf6:	b003      	add	sp, #12
 8024cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024cfc:	2400      	movs	r4, #0
 8024cfe:	e7c6      	b.n	8024c8e <core_compute_offsets_in_bytes+0xd2>
 8024d00:	46f4      	mov	ip, lr
 8024d02:	f04f 0801 	mov.w	r8, #1
 8024d06:	e770      	b.n	8024bea <core_compute_offsets_in_bytes+0x2e>
 8024d08:	fb0e fe04 	mul.w	lr, lr, r4
 8024d0c:	e7a2      	b.n	8024c54 <core_compute_offsets_in_bytes+0x98>
 8024d0e:	bf00      	nop

08024d10 <core_tensor_clone>:
 8024d10:	680b      	ldr	r3, [r1, #0]
 8024d12:	6882      	ldr	r2, [r0, #8]
 8024d14:	6003      	str	r3, [r0, #0]
 8024d16:	684b      	ldr	r3, [r1, #4]
 8024d18:	6043      	str	r3, [r0, #4]
 8024d1a:	698b      	ldr	r3, [r1, #24]
 8024d1c:	6183      	str	r3, [r0, #24]
 8024d1e:	688b      	ldr	r3, [r1, #8]
 8024d20:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8024d24:	f363 221f 	bfi	r2, r3, #8, #24
 8024d28:	b410      	push	{r4}
 8024d2a:	6082      	str	r2, [r0, #8]
 8024d2c:	b15b      	cbz	r3, 8024d46 <core_tensor_clone+0x36>
 8024d2e:	2300      	movs	r3, #0
 8024d30:	68cc      	ldr	r4, [r1, #12]
 8024d32:	68c2      	ldr	r2, [r0, #12]
 8024d34:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8024d38:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 8024d3c:	3301      	adds	r3, #1
 8024d3e:	6882      	ldr	r2, [r0, #8]
 8024d40:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 8024d44:	d3f4      	bcc.n	8024d30 <core_tensor_clone+0x20>
 8024d46:	690b      	ldr	r3, [r1, #16]
 8024d48:	6902      	ldr	r2, [r0, #16]
 8024d4a:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8024d4e:	f363 221f 	bfi	r2, r3, #8, #24
 8024d52:	6102      	str	r2, [r0, #16]
 8024d54:	b15b      	cbz	r3, 8024d6e <core_tensor_clone+0x5e>
 8024d56:	2300      	movs	r3, #0
 8024d58:	694c      	ldr	r4, [r1, #20]
 8024d5a:	6942      	ldr	r2, [r0, #20]
 8024d5c:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8024d60:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 8024d64:	3301      	adds	r3, #1
 8024d66:	6902      	ldr	r2, [r0, #16]
 8024d68:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 8024d6c:	d3f4      	bcc.n	8024d58 <core_tensor_clone+0x48>
 8024d6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024d72:	4770      	bx	lr

08024d74 <core_array_clone>:
 8024d74:	b410      	push	{r4}
 8024d76:	4604      	mov	r4, r0
 8024d78:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 8024d7a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8024d7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024d82:	4770      	bx	lr

08024d84 <__libc_init_array>:
 8024d84:	b570      	push	{r4, r5, r6, lr}
 8024d86:	4d0d      	ldr	r5, [pc, #52]	; (8024dbc <__libc_init_array+0x38>)
 8024d88:	4c0d      	ldr	r4, [pc, #52]	; (8024dc0 <__libc_init_array+0x3c>)
 8024d8a:	1b64      	subs	r4, r4, r5
 8024d8c:	10a4      	asrs	r4, r4, #2
 8024d8e:	2600      	movs	r6, #0
 8024d90:	42a6      	cmp	r6, r4
 8024d92:	d109      	bne.n	8024da8 <__libc_init_array+0x24>
 8024d94:	4d0b      	ldr	r5, [pc, #44]	; (8024dc4 <__libc_init_array+0x40>)
 8024d96:	4c0c      	ldr	r4, [pc, #48]	; (8024dc8 <__libc_init_array+0x44>)
 8024d98:	f003 fa50 	bl	802823c <_init>
 8024d9c:	1b64      	subs	r4, r4, r5
 8024d9e:	10a4      	asrs	r4, r4, #2
 8024da0:	2600      	movs	r6, #0
 8024da2:	42a6      	cmp	r6, r4
 8024da4:	d105      	bne.n	8024db2 <__libc_init_array+0x2e>
 8024da6:	bd70      	pop	{r4, r5, r6, pc}
 8024da8:	f855 3b04 	ldr.w	r3, [r5], #4
 8024dac:	4798      	blx	r3
 8024dae:	3601      	adds	r6, #1
 8024db0:	e7ee      	b.n	8024d90 <__libc_init_array+0xc>
 8024db2:	f855 3b04 	ldr.w	r3, [r5], #4
 8024db6:	4798      	blx	r3
 8024db8:	3601      	adds	r6, #1
 8024dba:	e7f2      	b.n	8024da2 <__libc_init_array+0x1e>
 8024dbc:	0809bc30 	.word	0x0809bc30
 8024dc0:	0809bc30 	.word	0x0809bc30
 8024dc4:	0809bc30 	.word	0x0809bc30
 8024dc8:	0809bc34 	.word	0x0809bc34

08024dcc <malloc>:
 8024dcc:	4b02      	ldr	r3, [pc, #8]	; (8024dd8 <malloc+0xc>)
 8024dce:	4601      	mov	r1, r0
 8024dd0:	6818      	ldr	r0, [r3, #0]
 8024dd2:	f000 b88b 	b.w	8024eec <_malloc_r>
 8024dd6:	bf00      	nop
 8024dd8:	20007718 	.word	0x20007718

08024ddc <free>:
 8024ddc:	4b02      	ldr	r3, [pc, #8]	; (8024de8 <free+0xc>)
 8024dde:	4601      	mov	r1, r0
 8024de0:	6818      	ldr	r0, [r3, #0]
 8024de2:	f000 b833 	b.w	8024e4c <_free_r>
 8024de6:	bf00      	nop
 8024de8:	20007718 	.word	0x20007718

08024dec <memcpy>:
 8024dec:	440a      	add	r2, r1
 8024dee:	4291      	cmp	r1, r2
 8024df0:	f100 33ff 	add.w	r3, r0, #4294967295
 8024df4:	d100      	bne.n	8024df8 <memcpy+0xc>
 8024df6:	4770      	bx	lr
 8024df8:	b510      	push	{r4, lr}
 8024dfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8024dfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8024e02:	4291      	cmp	r1, r2
 8024e04:	d1f9      	bne.n	8024dfa <memcpy+0xe>
 8024e06:	bd10      	pop	{r4, pc}

08024e08 <memmove>:
 8024e08:	4288      	cmp	r0, r1
 8024e0a:	b510      	push	{r4, lr}
 8024e0c:	eb01 0402 	add.w	r4, r1, r2
 8024e10:	d902      	bls.n	8024e18 <memmove+0x10>
 8024e12:	4284      	cmp	r4, r0
 8024e14:	4623      	mov	r3, r4
 8024e16:	d807      	bhi.n	8024e28 <memmove+0x20>
 8024e18:	1e43      	subs	r3, r0, #1
 8024e1a:	42a1      	cmp	r1, r4
 8024e1c:	d008      	beq.n	8024e30 <memmove+0x28>
 8024e1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8024e22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8024e26:	e7f8      	b.n	8024e1a <memmove+0x12>
 8024e28:	4402      	add	r2, r0
 8024e2a:	4601      	mov	r1, r0
 8024e2c:	428a      	cmp	r2, r1
 8024e2e:	d100      	bne.n	8024e32 <memmove+0x2a>
 8024e30:	bd10      	pop	{r4, pc}
 8024e32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8024e36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8024e3a:	e7f7      	b.n	8024e2c <memmove+0x24>

08024e3c <memset>:
 8024e3c:	4402      	add	r2, r0
 8024e3e:	4603      	mov	r3, r0
 8024e40:	4293      	cmp	r3, r2
 8024e42:	d100      	bne.n	8024e46 <memset+0xa>
 8024e44:	4770      	bx	lr
 8024e46:	f803 1b01 	strb.w	r1, [r3], #1
 8024e4a:	e7f9      	b.n	8024e40 <memset+0x4>

08024e4c <_free_r>:
 8024e4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8024e4e:	2900      	cmp	r1, #0
 8024e50:	d048      	beq.n	8024ee4 <_free_r+0x98>
 8024e52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8024e56:	9001      	str	r0, [sp, #4]
 8024e58:	2b00      	cmp	r3, #0
 8024e5a:	f1a1 0404 	sub.w	r4, r1, #4
 8024e5e:	bfb8      	it	lt
 8024e60:	18e4      	addlt	r4, r4, r3
 8024e62:	f001 fb67 	bl	8026534 <__malloc_lock>
 8024e66:	4a20      	ldr	r2, [pc, #128]	; (8024ee8 <_free_r+0x9c>)
 8024e68:	9801      	ldr	r0, [sp, #4]
 8024e6a:	6813      	ldr	r3, [r2, #0]
 8024e6c:	4615      	mov	r5, r2
 8024e6e:	b933      	cbnz	r3, 8024e7e <_free_r+0x32>
 8024e70:	6063      	str	r3, [r4, #4]
 8024e72:	6014      	str	r4, [r2, #0]
 8024e74:	b003      	add	sp, #12
 8024e76:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8024e7a:	f001 bb61 	b.w	8026540 <__malloc_unlock>
 8024e7e:	42a3      	cmp	r3, r4
 8024e80:	d90b      	bls.n	8024e9a <_free_r+0x4e>
 8024e82:	6821      	ldr	r1, [r4, #0]
 8024e84:	1862      	adds	r2, r4, r1
 8024e86:	4293      	cmp	r3, r2
 8024e88:	bf04      	itt	eq
 8024e8a:	681a      	ldreq	r2, [r3, #0]
 8024e8c:	685b      	ldreq	r3, [r3, #4]
 8024e8e:	6063      	str	r3, [r4, #4]
 8024e90:	bf04      	itt	eq
 8024e92:	1852      	addeq	r2, r2, r1
 8024e94:	6022      	streq	r2, [r4, #0]
 8024e96:	602c      	str	r4, [r5, #0]
 8024e98:	e7ec      	b.n	8024e74 <_free_r+0x28>
 8024e9a:	461a      	mov	r2, r3
 8024e9c:	685b      	ldr	r3, [r3, #4]
 8024e9e:	b10b      	cbz	r3, 8024ea4 <_free_r+0x58>
 8024ea0:	42a3      	cmp	r3, r4
 8024ea2:	d9fa      	bls.n	8024e9a <_free_r+0x4e>
 8024ea4:	6811      	ldr	r1, [r2, #0]
 8024ea6:	1855      	adds	r5, r2, r1
 8024ea8:	42a5      	cmp	r5, r4
 8024eaa:	d10b      	bne.n	8024ec4 <_free_r+0x78>
 8024eac:	6824      	ldr	r4, [r4, #0]
 8024eae:	4421      	add	r1, r4
 8024eb0:	1854      	adds	r4, r2, r1
 8024eb2:	42a3      	cmp	r3, r4
 8024eb4:	6011      	str	r1, [r2, #0]
 8024eb6:	d1dd      	bne.n	8024e74 <_free_r+0x28>
 8024eb8:	681c      	ldr	r4, [r3, #0]
 8024eba:	685b      	ldr	r3, [r3, #4]
 8024ebc:	6053      	str	r3, [r2, #4]
 8024ebe:	4421      	add	r1, r4
 8024ec0:	6011      	str	r1, [r2, #0]
 8024ec2:	e7d7      	b.n	8024e74 <_free_r+0x28>
 8024ec4:	d902      	bls.n	8024ecc <_free_r+0x80>
 8024ec6:	230c      	movs	r3, #12
 8024ec8:	6003      	str	r3, [r0, #0]
 8024eca:	e7d3      	b.n	8024e74 <_free_r+0x28>
 8024ecc:	6825      	ldr	r5, [r4, #0]
 8024ece:	1961      	adds	r1, r4, r5
 8024ed0:	428b      	cmp	r3, r1
 8024ed2:	bf04      	itt	eq
 8024ed4:	6819      	ldreq	r1, [r3, #0]
 8024ed6:	685b      	ldreq	r3, [r3, #4]
 8024ed8:	6063      	str	r3, [r4, #4]
 8024eda:	bf04      	itt	eq
 8024edc:	1949      	addeq	r1, r1, r5
 8024ede:	6021      	streq	r1, [r4, #0]
 8024ee0:	6054      	str	r4, [r2, #4]
 8024ee2:	e7c7      	b.n	8024e74 <_free_r+0x28>
 8024ee4:	b003      	add	sp, #12
 8024ee6:	bd30      	pop	{r4, r5, pc}
 8024ee8:	200096fc 	.word	0x200096fc

08024eec <_malloc_r>:
 8024eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024eee:	1ccd      	adds	r5, r1, #3
 8024ef0:	f025 0503 	bic.w	r5, r5, #3
 8024ef4:	3508      	adds	r5, #8
 8024ef6:	2d0c      	cmp	r5, #12
 8024ef8:	bf38      	it	cc
 8024efa:	250c      	movcc	r5, #12
 8024efc:	2d00      	cmp	r5, #0
 8024efe:	4606      	mov	r6, r0
 8024f00:	db01      	blt.n	8024f06 <_malloc_r+0x1a>
 8024f02:	42a9      	cmp	r1, r5
 8024f04:	d903      	bls.n	8024f0e <_malloc_r+0x22>
 8024f06:	230c      	movs	r3, #12
 8024f08:	6033      	str	r3, [r6, #0]
 8024f0a:	2000      	movs	r0, #0
 8024f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024f0e:	f001 fb11 	bl	8026534 <__malloc_lock>
 8024f12:	4921      	ldr	r1, [pc, #132]	; (8024f98 <_malloc_r+0xac>)
 8024f14:	680a      	ldr	r2, [r1, #0]
 8024f16:	4614      	mov	r4, r2
 8024f18:	b99c      	cbnz	r4, 8024f42 <_malloc_r+0x56>
 8024f1a:	4f20      	ldr	r7, [pc, #128]	; (8024f9c <_malloc_r+0xb0>)
 8024f1c:	683b      	ldr	r3, [r7, #0]
 8024f1e:	b923      	cbnz	r3, 8024f2a <_malloc_r+0x3e>
 8024f20:	4621      	mov	r1, r4
 8024f22:	4630      	mov	r0, r6
 8024f24:	f000 fc7e 	bl	8025824 <_sbrk_r>
 8024f28:	6038      	str	r0, [r7, #0]
 8024f2a:	4629      	mov	r1, r5
 8024f2c:	4630      	mov	r0, r6
 8024f2e:	f000 fc79 	bl	8025824 <_sbrk_r>
 8024f32:	1c43      	adds	r3, r0, #1
 8024f34:	d123      	bne.n	8024f7e <_malloc_r+0x92>
 8024f36:	230c      	movs	r3, #12
 8024f38:	6033      	str	r3, [r6, #0]
 8024f3a:	4630      	mov	r0, r6
 8024f3c:	f001 fb00 	bl	8026540 <__malloc_unlock>
 8024f40:	e7e3      	b.n	8024f0a <_malloc_r+0x1e>
 8024f42:	6823      	ldr	r3, [r4, #0]
 8024f44:	1b5b      	subs	r3, r3, r5
 8024f46:	d417      	bmi.n	8024f78 <_malloc_r+0x8c>
 8024f48:	2b0b      	cmp	r3, #11
 8024f4a:	d903      	bls.n	8024f54 <_malloc_r+0x68>
 8024f4c:	6023      	str	r3, [r4, #0]
 8024f4e:	441c      	add	r4, r3
 8024f50:	6025      	str	r5, [r4, #0]
 8024f52:	e004      	b.n	8024f5e <_malloc_r+0x72>
 8024f54:	6863      	ldr	r3, [r4, #4]
 8024f56:	42a2      	cmp	r2, r4
 8024f58:	bf0c      	ite	eq
 8024f5a:	600b      	streq	r3, [r1, #0]
 8024f5c:	6053      	strne	r3, [r2, #4]
 8024f5e:	4630      	mov	r0, r6
 8024f60:	f001 faee 	bl	8026540 <__malloc_unlock>
 8024f64:	f104 000b 	add.w	r0, r4, #11
 8024f68:	1d23      	adds	r3, r4, #4
 8024f6a:	f020 0007 	bic.w	r0, r0, #7
 8024f6e:	1ac2      	subs	r2, r0, r3
 8024f70:	d0cc      	beq.n	8024f0c <_malloc_r+0x20>
 8024f72:	1a1b      	subs	r3, r3, r0
 8024f74:	50a3      	str	r3, [r4, r2]
 8024f76:	e7c9      	b.n	8024f0c <_malloc_r+0x20>
 8024f78:	4622      	mov	r2, r4
 8024f7a:	6864      	ldr	r4, [r4, #4]
 8024f7c:	e7cc      	b.n	8024f18 <_malloc_r+0x2c>
 8024f7e:	1cc4      	adds	r4, r0, #3
 8024f80:	f024 0403 	bic.w	r4, r4, #3
 8024f84:	42a0      	cmp	r0, r4
 8024f86:	d0e3      	beq.n	8024f50 <_malloc_r+0x64>
 8024f88:	1a21      	subs	r1, r4, r0
 8024f8a:	4630      	mov	r0, r6
 8024f8c:	f000 fc4a 	bl	8025824 <_sbrk_r>
 8024f90:	3001      	adds	r0, #1
 8024f92:	d1dd      	bne.n	8024f50 <_malloc_r+0x64>
 8024f94:	e7cf      	b.n	8024f36 <_malloc_r+0x4a>
 8024f96:	bf00      	nop
 8024f98:	200096fc 	.word	0x200096fc
 8024f9c:	20009700 	.word	0x20009700

08024fa0 <__cvt>:
 8024fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024fa2:	ed2d 8b02 	vpush	{d8}
 8024fa6:	eeb0 8b40 	vmov.f64	d8, d0
 8024faa:	b085      	sub	sp, #20
 8024fac:	4617      	mov	r7, r2
 8024fae:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024fb0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8024fb2:	ee18 2a90 	vmov	r2, s17
 8024fb6:	f025 0520 	bic.w	r5, r5, #32
 8024fba:	2a00      	cmp	r2, #0
 8024fbc:	bfb6      	itet	lt
 8024fbe:	222d      	movlt	r2, #45	; 0x2d
 8024fc0:	2200      	movge	r2, #0
 8024fc2:	eeb1 8b40 	vneglt.f64	d8, d0
 8024fc6:	2d46      	cmp	r5, #70	; 0x46
 8024fc8:	460c      	mov	r4, r1
 8024fca:	701a      	strb	r2, [r3, #0]
 8024fcc:	d004      	beq.n	8024fd8 <__cvt+0x38>
 8024fce:	2d45      	cmp	r5, #69	; 0x45
 8024fd0:	d100      	bne.n	8024fd4 <__cvt+0x34>
 8024fd2:	3401      	adds	r4, #1
 8024fd4:	2102      	movs	r1, #2
 8024fd6:	e000      	b.n	8024fda <__cvt+0x3a>
 8024fd8:	2103      	movs	r1, #3
 8024fda:	ab03      	add	r3, sp, #12
 8024fdc:	9301      	str	r3, [sp, #4]
 8024fde:	ab02      	add	r3, sp, #8
 8024fe0:	9300      	str	r3, [sp, #0]
 8024fe2:	4622      	mov	r2, r4
 8024fe4:	4633      	mov	r3, r6
 8024fe6:	eeb0 0b48 	vmov.f64	d0, d8
 8024fea:	f000 fd1d 	bl	8025a28 <_dtoa_r>
 8024fee:	2d47      	cmp	r5, #71	; 0x47
 8024ff0:	d109      	bne.n	8025006 <__cvt+0x66>
 8024ff2:	07fb      	lsls	r3, r7, #31
 8024ff4:	d407      	bmi.n	8025006 <__cvt+0x66>
 8024ff6:	9b03      	ldr	r3, [sp, #12]
 8024ff8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024ffa:	1a1b      	subs	r3, r3, r0
 8024ffc:	6013      	str	r3, [r2, #0]
 8024ffe:	b005      	add	sp, #20
 8025000:	ecbd 8b02 	vpop	{d8}
 8025004:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025006:	2d46      	cmp	r5, #70	; 0x46
 8025008:	eb00 0204 	add.w	r2, r0, r4
 802500c:	d10c      	bne.n	8025028 <__cvt+0x88>
 802500e:	7803      	ldrb	r3, [r0, #0]
 8025010:	2b30      	cmp	r3, #48	; 0x30
 8025012:	d107      	bne.n	8025024 <__cvt+0x84>
 8025014:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8025018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802501c:	bf1c      	itt	ne
 802501e:	f1c4 0401 	rsbne	r4, r4, #1
 8025022:	6034      	strne	r4, [r6, #0]
 8025024:	6833      	ldr	r3, [r6, #0]
 8025026:	441a      	add	r2, r3
 8025028:	eeb5 8b40 	vcmp.f64	d8, #0.0
 802502c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025030:	bf08      	it	eq
 8025032:	9203      	streq	r2, [sp, #12]
 8025034:	2130      	movs	r1, #48	; 0x30
 8025036:	9b03      	ldr	r3, [sp, #12]
 8025038:	4293      	cmp	r3, r2
 802503a:	d2dc      	bcs.n	8024ff6 <__cvt+0x56>
 802503c:	1c5c      	adds	r4, r3, #1
 802503e:	9403      	str	r4, [sp, #12]
 8025040:	7019      	strb	r1, [r3, #0]
 8025042:	e7f8      	b.n	8025036 <__cvt+0x96>

08025044 <__exponent>:
 8025044:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8025046:	4603      	mov	r3, r0
 8025048:	2900      	cmp	r1, #0
 802504a:	bfb8      	it	lt
 802504c:	4249      	neglt	r1, r1
 802504e:	f803 2b02 	strb.w	r2, [r3], #2
 8025052:	bfb4      	ite	lt
 8025054:	222d      	movlt	r2, #45	; 0x2d
 8025056:	222b      	movge	r2, #43	; 0x2b
 8025058:	2909      	cmp	r1, #9
 802505a:	7042      	strb	r2, [r0, #1]
 802505c:	dd2a      	ble.n	80250b4 <__exponent+0x70>
 802505e:	f10d 0407 	add.w	r4, sp, #7
 8025062:	46a4      	mov	ip, r4
 8025064:	270a      	movs	r7, #10
 8025066:	46a6      	mov	lr, r4
 8025068:	460a      	mov	r2, r1
 802506a:	fb91 f6f7 	sdiv	r6, r1, r7
 802506e:	fb07 1516 	mls	r5, r7, r6, r1
 8025072:	3530      	adds	r5, #48	; 0x30
 8025074:	2a63      	cmp	r2, #99	; 0x63
 8025076:	f104 34ff 	add.w	r4, r4, #4294967295
 802507a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 802507e:	4631      	mov	r1, r6
 8025080:	dcf1      	bgt.n	8025066 <__exponent+0x22>
 8025082:	3130      	adds	r1, #48	; 0x30
 8025084:	f1ae 0502 	sub.w	r5, lr, #2
 8025088:	f804 1c01 	strb.w	r1, [r4, #-1]
 802508c:	1c44      	adds	r4, r0, #1
 802508e:	4629      	mov	r1, r5
 8025090:	4561      	cmp	r1, ip
 8025092:	d30a      	bcc.n	80250aa <__exponent+0x66>
 8025094:	f10d 0209 	add.w	r2, sp, #9
 8025098:	eba2 020e 	sub.w	r2, r2, lr
 802509c:	4565      	cmp	r5, ip
 802509e:	bf88      	it	hi
 80250a0:	2200      	movhi	r2, #0
 80250a2:	4413      	add	r3, r2
 80250a4:	1a18      	subs	r0, r3, r0
 80250a6:	b003      	add	sp, #12
 80250a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80250aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80250ae:	f804 2f01 	strb.w	r2, [r4, #1]!
 80250b2:	e7ed      	b.n	8025090 <__exponent+0x4c>
 80250b4:	2330      	movs	r3, #48	; 0x30
 80250b6:	3130      	adds	r1, #48	; 0x30
 80250b8:	7083      	strb	r3, [r0, #2]
 80250ba:	70c1      	strb	r1, [r0, #3]
 80250bc:	1d03      	adds	r3, r0, #4
 80250be:	e7f1      	b.n	80250a4 <__exponent+0x60>

080250c0 <_printf_float>:
 80250c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80250c4:	b08b      	sub	sp, #44	; 0x2c
 80250c6:	460c      	mov	r4, r1
 80250c8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80250cc:	4616      	mov	r6, r2
 80250ce:	461f      	mov	r7, r3
 80250d0:	4605      	mov	r5, r0
 80250d2:	f001 fa2b 	bl	802652c <_localeconv_r>
 80250d6:	f8d0 b000 	ldr.w	fp, [r0]
 80250da:	4658      	mov	r0, fp
 80250dc:	f7db f90a 	bl	80002f4 <strlen>
 80250e0:	2300      	movs	r3, #0
 80250e2:	9308      	str	r3, [sp, #32]
 80250e4:	f8d8 3000 	ldr.w	r3, [r8]
 80250e8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80250ec:	6822      	ldr	r2, [r4, #0]
 80250ee:	3307      	adds	r3, #7
 80250f0:	f023 0307 	bic.w	r3, r3, #7
 80250f4:	f103 0108 	add.w	r1, r3, #8
 80250f8:	f8c8 1000 	str.w	r1, [r8]
 80250fc:	4682      	mov	sl, r0
 80250fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8025102:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8025106:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8025368 <_printf_float+0x2a8>
 802510a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 802510e:	eeb0 6bc0 	vabs.f64	d6, d0
 8025112:	eeb4 6b47 	vcmp.f64	d6, d7
 8025116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802511a:	dd24      	ble.n	8025166 <_printf_float+0xa6>
 802511c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8025120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025124:	d502      	bpl.n	802512c <_printf_float+0x6c>
 8025126:	232d      	movs	r3, #45	; 0x2d
 8025128:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802512c:	4b90      	ldr	r3, [pc, #576]	; (8025370 <_printf_float+0x2b0>)
 802512e:	4891      	ldr	r0, [pc, #580]	; (8025374 <_printf_float+0x2b4>)
 8025130:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8025134:	bf94      	ite	ls
 8025136:	4698      	movls	r8, r3
 8025138:	4680      	movhi	r8, r0
 802513a:	2303      	movs	r3, #3
 802513c:	6123      	str	r3, [r4, #16]
 802513e:	f022 0204 	bic.w	r2, r2, #4
 8025142:	2300      	movs	r3, #0
 8025144:	6022      	str	r2, [r4, #0]
 8025146:	9304      	str	r3, [sp, #16]
 8025148:	9700      	str	r7, [sp, #0]
 802514a:	4633      	mov	r3, r6
 802514c:	aa09      	add	r2, sp, #36	; 0x24
 802514e:	4621      	mov	r1, r4
 8025150:	4628      	mov	r0, r5
 8025152:	f000 f9d3 	bl	80254fc <_printf_common>
 8025156:	3001      	adds	r0, #1
 8025158:	f040 808a 	bne.w	8025270 <_printf_float+0x1b0>
 802515c:	f04f 30ff 	mov.w	r0, #4294967295
 8025160:	b00b      	add	sp, #44	; 0x2c
 8025162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025166:	eeb4 0b40 	vcmp.f64	d0, d0
 802516a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802516e:	d709      	bvc.n	8025184 <_printf_float+0xc4>
 8025170:	ee10 3a90 	vmov	r3, s1
 8025174:	2b00      	cmp	r3, #0
 8025176:	bfbc      	itt	lt
 8025178:	232d      	movlt	r3, #45	; 0x2d
 802517a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 802517e:	487e      	ldr	r0, [pc, #504]	; (8025378 <_printf_float+0x2b8>)
 8025180:	4b7e      	ldr	r3, [pc, #504]	; (802537c <_printf_float+0x2bc>)
 8025182:	e7d5      	b.n	8025130 <_printf_float+0x70>
 8025184:	6863      	ldr	r3, [r4, #4]
 8025186:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 802518a:	9104      	str	r1, [sp, #16]
 802518c:	1c59      	adds	r1, r3, #1
 802518e:	d13c      	bne.n	802520a <_printf_float+0x14a>
 8025190:	2306      	movs	r3, #6
 8025192:	6063      	str	r3, [r4, #4]
 8025194:	2300      	movs	r3, #0
 8025196:	9303      	str	r3, [sp, #12]
 8025198:	ab08      	add	r3, sp, #32
 802519a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 802519e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80251a2:	ab07      	add	r3, sp, #28
 80251a4:	6861      	ldr	r1, [r4, #4]
 80251a6:	9300      	str	r3, [sp, #0]
 80251a8:	6022      	str	r2, [r4, #0]
 80251aa:	f10d 031b 	add.w	r3, sp, #27
 80251ae:	4628      	mov	r0, r5
 80251b0:	f7ff fef6 	bl	8024fa0 <__cvt>
 80251b4:	9b04      	ldr	r3, [sp, #16]
 80251b6:	9907      	ldr	r1, [sp, #28]
 80251b8:	2b47      	cmp	r3, #71	; 0x47
 80251ba:	4680      	mov	r8, r0
 80251bc:	d108      	bne.n	80251d0 <_printf_float+0x110>
 80251be:	1cc8      	adds	r0, r1, #3
 80251c0:	db02      	blt.n	80251c8 <_printf_float+0x108>
 80251c2:	6863      	ldr	r3, [r4, #4]
 80251c4:	4299      	cmp	r1, r3
 80251c6:	dd41      	ble.n	802524c <_printf_float+0x18c>
 80251c8:	f1a9 0902 	sub.w	r9, r9, #2
 80251cc:	fa5f f989 	uxtb.w	r9, r9
 80251d0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80251d4:	d820      	bhi.n	8025218 <_printf_float+0x158>
 80251d6:	3901      	subs	r1, #1
 80251d8:	464a      	mov	r2, r9
 80251da:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80251de:	9107      	str	r1, [sp, #28]
 80251e0:	f7ff ff30 	bl	8025044 <__exponent>
 80251e4:	9a08      	ldr	r2, [sp, #32]
 80251e6:	9004      	str	r0, [sp, #16]
 80251e8:	1813      	adds	r3, r2, r0
 80251ea:	2a01      	cmp	r2, #1
 80251ec:	6123      	str	r3, [r4, #16]
 80251ee:	dc02      	bgt.n	80251f6 <_printf_float+0x136>
 80251f0:	6822      	ldr	r2, [r4, #0]
 80251f2:	07d2      	lsls	r2, r2, #31
 80251f4:	d501      	bpl.n	80251fa <_printf_float+0x13a>
 80251f6:	3301      	adds	r3, #1
 80251f8:	6123      	str	r3, [r4, #16]
 80251fa:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80251fe:	2b00      	cmp	r3, #0
 8025200:	d0a2      	beq.n	8025148 <_printf_float+0x88>
 8025202:	232d      	movs	r3, #45	; 0x2d
 8025204:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025208:	e79e      	b.n	8025148 <_printf_float+0x88>
 802520a:	9904      	ldr	r1, [sp, #16]
 802520c:	2947      	cmp	r1, #71	; 0x47
 802520e:	d1c1      	bne.n	8025194 <_printf_float+0xd4>
 8025210:	2b00      	cmp	r3, #0
 8025212:	d1bf      	bne.n	8025194 <_printf_float+0xd4>
 8025214:	2301      	movs	r3, #1
 8025216:	e7bc      	b.n	8025192 <_printf_float+0xd2>
 8025218:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 802521c:	d118      	bne.n	8025250 <_printf_float+0x190>
 802521e:	2900      	cmp	r1, #0
 8025220:	6863      	ldr	r3, [r4, #4]
 8025222:	dd0b      	ble.n	802523c <_printf_float+0x17c>
 8025224:	6121      	str	r1, [r4, #16]
 8025226:	b913      	cbnz	r3, 802522e <_printf_float+0x16e>
 8025228:	6822      	ldr	r2, [r4, #0]
 802522a:	07d0      	lsls	r0, r2, #31
 802522c:	d502      	bpl.n	8025234 <_printf_float+0x174>
 802522e:	3301      	adds	r3, #1
 8025230:	440b      	add	r3, r1
 8025232:	6123      	str	r3, [r4, #16]
 8025234:	2300      	movs	r3, #0
 8025236:	65a1      	str	r1, [r4, #88]	; 0x58
 8025238:	9304      	str	r3, [sp, #16]
 802523a:	e7de      	b.n	80251fa <_printf_float+0x13a>
 802523c:	b913      	cbnz	r3, 8025244 <_printf_float+0x184>
 802523e:	6822      	ldr	r2, [r4, #0]
 8025240:	07d2      	lsls	r2, r2, #31
 8025242:	d501      	bpl.n	8025248 <_printf_float+0x188>
 8025244:	3302      	adds	r3, #2
 8025246:	e7f4      	b.n	8025232 <_printf_float+0x172>
 8025248:	2301      	movs	r3, #1
 802524a:	e7f2      	b.n	8025232 <_printf_float+0x172>
 802524c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8025250:	9b08      	ldr	r3, [sp, #32]
 8025252:	4299      	cmp	r1, r3
 8025254:	db05      	blt.n	8025262 <_printf_float+0x1a2>
 8025256:	6823      	ldr	r3, [r4, #0]
 8025258:	6121      	str	r1, [r4, #16]
 802525a:	07d8      	lsls	r0, r3, #31
 802525c:	d5ea      	bpl.n	8025234 <_printf_float+0x174>
 802525e:	1c4b      	adds	r3, r1, #1
 8025260:	e7e7      	b.n	8025232 <_printf_float+0x172>
 8025262:	2900      	cmp	r1, #0
 8025264:	bfd4      	ite	le
 8025266:	f1c1 0202 	rsble	r2, r1, #2
 802526a:	2201      	movgt	r2, #1
 802526c:	4413      	add	r3, r2
 802526e:	e7e0      	b.n	8025232 <_printf_float+0x172>
 8025270:	6823      	ldr	r3, [r4, #0]
 8025272:	055a      	lsls	r2, r3, #21
 8025274:	d407      	bmi.n	8025286 <_printf_float+0x1c6>
 8025276:	6923      	ldr	r3, [r4, #16]
 8025278:	4642      	mov	r2, r8
 802527a:	4631      	mov	r1, r6
 802527c:	4628      	mov	r0, r5
 802527e:	47b8      	blx	r7
 8025280:	3001      	adds	r0, #1
 8025282:	d12a      	bne.n	80252da <_printf_float+0x21a>
 8025284:	e76a      	b.n	802515c <_printf_float+0x9c>
 8025286:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 802528a:	f240 80e2 	bls.w	8025452 <_printf_float+0x392>
 802528e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8025292:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8025296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802529a:	d133      	bne.n	8025304 <_printf_float+0x244>
 802529c:	4a38      	ldr	r2, [pc, #224]	; (8025380 <_printf_float+0x2c0>)
 802529e:	2301      	movs	r3, #1
 80252a0:	4631      	mov	r1, r6
 80252a2:	4628      	mov	r0, r5
 80252a4:	47b8      	blx	r7
 80252a6:	3001      	adds	r0, #1
 80252a8:	f43f af58 	beq.w	802515c <_printf_float+0x9c>
 80252ac:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80252b0:	429a      	cmp	r2, r3
 80252b2:	db02      	blt.n	80252ba <_printf_float+0x1fa>
 80252b4:	6823      	ldr	r3, [r4, #0]
 80252b6:	07d8      	lsls	r0, r3, #31
 80252b8:	d50f      	bpl.n	80252da <_printf_float+0x21a>
 80252ba:	4653      	mov	r3, sl
 80252bc:	465a      	mov	r2, fp
 80252be:	4631      	mov	r1, r6
 80252c0:	4628      	mov	r0, r5
 80252c2:	47b8      	blx	r7
 80252c4:	3001      	adds	r0, #1
 80252c6:	f43f af49 	beq.w	802515c <_printf_float+0x9c>
 80252ca:	f04f 0800 	mov.w	r8, #0
 80252ce:	f104 091a 	add.w	r9, r4, #26
 80252d2:	9b08      	ldr	r3, [sp, #32]
 80252d4:	3b01      	subs	r3, #1
 80252d6:	4543      	cmp	r3, r8
 80252d8:	dc09      	bgt.n	80252ee <_printf_float+0x22e>
 80252da:	6823      	ldr	r3, [r4, #0]
 80252dc:	079b      	lsls	r3, r3, #30
 80252de:	f100 8108 	bmi.w	80254f2 <_printf_float+0x432>
 80252e2:	68e0      	ldr	r0, [r4, #12]
 80252e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80252e6:	4298      	cmp	r0, r3
 80252e8:	bfb8      	it	lt
 80252ea:	4618      	movlt	r0, r3
 80252ec:	e738      	b.n	8025160 <_printf_float+0xa0>
 80252ee:	2301      	movs	r3, #1
 80252f0:	464a      	mov	r2, r9
 80252f2:	4631      	mov	r1, r6
 80252f4:	4628      	mov	r0, r5
 80252f6:	47b8      	blx	r7
 80252f8:	3001      	adds	r0, #1
 80252fa:	f43f af2f 	beq.w	802515c <_printf_float+0x9c>
 80252fe:	f108 0801 	add.w	r8, r8, #1
 8025302:	e7e6      	b.n	80252d2 <_printf_float+0x212>
 8025304:	9b07      	ldr	r3, [sp, #28]
 8025306:	2b00      	cmp	r3, #0
 8025308:	dc3c      	bgt.n	8025384 <_printf_float+0x2c4>
 802530a:	4a1d      	ldr	r2, [pc, #116]	; (8025380 <_printf_float+0x2c0>)
 802530c:	2301      	movs	r3, #1
 802530e:	4631      	mov	r1, r6
 8025310:	4628      	mov	r0, r5
 8025312:	47b8      	blx	r7
 8025314:	3001      	adds	r0, #1
 8025316:	f43f af21 	beq.w	802515c <_printf_float+0x9c>
 802531a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 802531e:	4313      	orrs	r3, r2
 8025320:	d102      	bne.n	8025328 <_printf_float+0x268>
 8025322:	6823      	ldr	r3, [r4, #0]
 8025324:	07d9      	lsls	r1, r3, #31
 8025326:	d5d8      	bpl.n	80252da <_printf_float+0x21a>
 8025328:	4653      	mov	r3, sl
 802532a:	465a      	mov	r2, fp
 802532c:	4631      	mov	r1, r6
 802532e:	4628      	mov	r0, r5
 8025330:	47b8      	blx	r7
 8025332:	3001      	adds	r0, #1
 8025334:	f43f af12 	beq.w	802515c <_printf_float+0x9c>
 8025338:	f04f 0900 	mov.w	r9, #0
 802533c:	f104 0a1a 	add.w	sl, r4, #26
 8025340:	9b07      	ldr	r3, [sp, #28]
 8025342:	425b      	negs	r3, r3
 8025344:	454b      	cmp	r3, r9
 8025346:	dc01      	bgt.n	802534c <_printf_float+0x28c>
 8025348:	9b08      	ldr	r3, [sp, #32]
 802534a:	e795      	b.n	8025278 <_printf_float+0x1b8>
 802534c:	2301      	movs	r3, #1
 802534e:	4652      	mov	r2, sl
 8025350:	4631      	mov	r1, r6
 8025352:	4628      	mov	r0, r5
 8025354:	47b8      	blx	r7
 8025356:	3001      	adds	r0, #1
 8025358:	f43f af00 	beq.w	802515c <_printf_float+0x9c>
 802535c:	f109 0901 	add.w	r9, r9, #1
 8025360:	e7ee      	b.n	8025340 <_printf_float+0x280>
 8025362:	bf00      	nop
 8025364:	f3af 8000 	nop.w
 8025368:	ffffffff 	.word	0xffffffff
 802536c:	7fefffff 	.word	0x7fefffff
 8025370:	0809ae48 	.word	0x0809ae48
 8025374:	0809ae4c 	.word	0x0809ae4c
 8025378:	0809ae54 	.word	0x0809ae54
 802537c:	0809ae50 	.word	0x0809ae50
 8025380:	0809ae58 	.word	0x0809ae58
 8025384:	9a08      	ldr	r2, [sp, #32]
 8025386:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8025388:	429a      	cmp	r2, r3
 802538a:	bfa8      	it	ge
 802538c:	461a      	movge	r2, r3
 802538e:	2a00      	cmp	r2, #0
 8025390:	4691      	mov	r9, r2
 8025392:	dc38      	bgt.n	8025406 <_printf_float+0x346>
 8025394:	2300      	movs	r3, #0
 8025396:	9305      	str	r3, [sp, #20]
 8025398:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802539c:	f104 021a 	add.w	r2, r4, #26
 80253a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80253a2:	9905      	ldr	r1, [sp, #20]
 80253a4:	9304      	str	r3, [sp, #16]
 80253a6:	eba3 0309 	sub.w	r3, r3, r9
 80253aa:	428b      	cmp	r3, r1
 80253ac:	dc33      	bgt.n	8025416 <_printf_float+0x356>
 80253ae:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80253b2:	429a      	cmp	r2, r3
 80253b4:	db3c      	blt.n	8025430 <_printf_float+0x370>
 80253b6:	6823      	ldr	r3, [r4, #0]
 80253b8:	07da      	lsls	r2, r3, #31
 80253ba:	d439      	bmi.n	8025430 <_printf_float+0x370>
 80253bc:	9a08      	ldr	r2, [sp, #32]
 80253be:	9b04      	ldr	r3, [sp, #16]
 80253c0:	9907      	ldr	r1, [sp, #28]
 80253c2:	1ad3      	subs	r3, r2, r3
 80253c4:	eba2 0901 	sub.w	r9, r2, r1
 80253c8:	4599      	cmp	r9, r3
 80253ca:	bfa8      	it	ge
 80253cc:	4699      	movge	r9, r3
 80253ce:	f1b9 0f00 	cmp.w	r9, #0
 80253d2:	dc35      	bgt.n	8025440 <_printf_float+0x380>
 80253d4:	f04f 0800 	mov.w	r8, #0
 80253d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80253dc:	f104 0a1a 	add.w	sl, r4, #26
 80253e0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80253e4:	1a9b      	subs	r3, r3, r2
 80253e6:	eba3 0309 	sub.w	r3, r3, r9
 80253ea:	4543      	cmp	r3, r8
 80253ec:	f77f af75 	ble.w	80252da <_printf_float+0x21a>
 80253f0:	2301      	movs	r3, #1
 80253f2:	4652      	mov	r2, sl
 80253f4:	4631      	mov	r1, r6
 80253f6:	4628      	mov	r0, r5
 80253f8:	47b8      	blx	r7
 80253fa:	3001      	adds	r0, #1
 80253fc:	f43f aeae 	beq.w	802515c <_printf_float+0x9c>
 8025400:	f108 0801 	add.w	r8, r8, #1
 8025404:	e7ec      	b.n	80253e0 <_printf_float+0x320>
 8025406:	4613      	mov	r3, r2
 8025408:	4631      	mov	r1, r6
 802540a:	4642      	mov	r2, r8
 802540c:	4628      	mov	r0, r5
 802540e:	47b8      	blx	r7
 8025410:	3001      	adds	r0, #1
 8025412:	d1bf      	bne.n	8025394 <_printf_float+0x2d4>
 8025414:	e6a2      	b.n	802515c <_printf_float+0x9c>
 8025416:	2301      	movs	r3, #1
 8025418:	4631      	mov	r1, r6
 802541a:	4628      	mov	r0, r5
 802541c:	9204      	str	r2, [sp, #16]
 802541e:	47b8      	blx	r7
 8025420:	3001      	adds	r0, #1
 8025422:	f43f ae9b 	beq.w	802515c <_printf_float+0x9c>
 8025426:	9b05      	ldr	r3, [sp, #20]
 8025428:	9a04      	ldr	r2, [sp, #16]
 802542a:	3301      	adds	r3, #1
 802542c:	9305      	str	r3, [sp, #20]
 802542e:	e7b7      	b.n	80253a0 <_printf_float+0x2e0>
 8025430:	4653      	mov	r3, sl
 8025432:	465a      	mov	r2, fp
 8025434:	4631      	mov	r1, r6
 8025436:	4628      	mov	r0, r5
 8025438:	47b8      	blx	r7
 802543a:	3001      	adds	r0, #1
 802543c:	d1be      	bne.n	80253bc <_printf_float+0x2fc>
 802543e:	e68d      	b.n	802515c <_printf_float+0x9c>
 8025440:	9a04      	ldr	r2, [sp, #16]
 8025442:	464b      	mov	r3, r9
 8025444:	4442      	add	r2, r8
 8025446:	4631      	mov	r1, r6
 8025448:	4628      	mov	r0, r5
 802544a:	47b8      	blx	r7
 802544c:	3001      	adds	r0, #1
 802544e:	d1c1      	bne.n	80253d4 <_printf_float+0x314>
 8025450:	e684      	b.n	802515c <_printf_float+0x9c>
 8025452:	9a08      	ldr	r2, [sp, #32]
 8025454:	2a01      	cmp	r2, #1
 8025456:	dc01      	bgt.n	802545c <_printf_float+0x39c>
 8025458:	07db      	lsls	r3, r3, #31
 802545a:	d537      	bpl.n	80254cc <_printf_float+0x40c>
 802545c:	2301      	movs	r3, #1
 802545e:	4642      	mov	r2, r8
 8025460:	4631      	mov	r1, r6
 8025462:	4628      	mov	r0, r5
 8025464:	47b8      	blx	r7
 8025466:	3001      	adds	r0, #1
 8025468:	f43f ae78 	beq.w	802515c <_printf_float+0x9c>
 802546c:	4653      	mov	r3, sl
 802546e:	465a      	mov	r2, fp
 8025470:	4631      	mov	r1, r6
 8025472:	4628      	mov	r0, r5
 8025474:	47b8      	blx	r7
 8025476:	3001      	adds	r0, #1
 8025478:	f43f ae70 	beq.w	802515c <_printf_float+0x9c>
 802547c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8025480:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8025484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025488:	d01b      	beq.n	80254c2 <_printf_float+0x402>
 802548a:	9b08      	ldr	r3, [sp, #32]
 802548c:	f108 0201 	add.w	r2, r8, #1
 8025490:	3b01      	subs	r3, #1
 8025492:	4631      	mov	r1, r6
 8025494:	4628      	mov	r0, r5
 8025496:	47b8      	blx	r7
 8025498:	3001      	adds	r0, #1
 802549a:	d10e      	bne.n	80254ba <_printf_float+0x3fa>
 802549c:	e65e      	b.n	802515c <_printf_float+0x9c>
 802549e:	2301      	movs	r3, #1
 80254a0:	464a      	mov	r2, r9
 80254a2:	4631      	mov	r1, r6
 80254a4:	4628      	mov	r0, r5
 80254a6:	47b8      	blx	r7
 80254a8:	3001      	adds	r0, #1
 80254aa:	f43f ae57 	beq.w	802515c <_printf_float+0x9c>
 80254ae:	f108 0801 	add.w	r8, r8, #1
 80254b2:	9b08      	ldr	r3, [sp, #32]
 80254b4:	3b01      	subs	r3, #1
 80254b6:	4543      	cmp	r3, r8
 80254b8:	dcf1      	bgt.n	802549e <_printf_float+0x3de>
 80254ba:	9b04      	ldr	r3, [sp, #16]
 80254bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80254c0:	e6db      	b.n	802527a <_printf_float+0x1ba>
 80254c2:	f04f 0800 	mov.w	r8, #0
 80254c6:	f104 091a 	add.w	r9, r4, #26
 80254ca:	e7f2      	b.n	80254b2 <_printf_float+0x3f2>
 80254cc:	2301      	movs	r3, #1
 80254ce:	4642      	mov	r2, r8
 80254d0:	e7df      	b.n	8025492 <_printf_float+0x3d2>
 80254d2:	2301      	movs	r3, #1
 80254d4:	464a      	mov	r2, r9
 80254d6:	4631      	mov	r1, r6
 80254d8:	4628      	mov	r0, r5
 80254da:	47b8      	blx	r7
 80254dc:	3001      	adds	r0, #1
 80254de:	f43f ae3d 	beq.w	802515c <_printf_float+0x9c>
 80254e2:	f108 0801 	add.w	r8, r8, #1
 80254e6:	68e3      	ldr	r3, [r4, #12]
 80254e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80254ea:	1a5b      	subs	r3, r3, r1
 80254ec:	4543      	cmp	r3, r8
 80254ee:	dcf0      	bgt.n	80254d2 <_printf_float+0x412>
 80254f0:	e6f7      	b.n	80252e2 <_printf_float+0x222>
 80254f2:	f04f 0800 	mov.w	r8, #0
 80254f6:	f104 0919 	add.w	r9, r4, #25
 80254fa:	e7f4      	b.n	80254e6 <_printf_float+0x426>

080254fc <_printf_common>:
 80254fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025500:	4616      	mov	r6, r2
 8025502:	4699      	mov	r9, r3
 8025504:	688a      	ldr	r2, [r1, #8]
 8025506:	690b      	ldr	r3, [r1, #16]
 8025508:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802550c:	4293      	cmp	r3, r2
 802550e:	bfb8      	it	lt
 8025510:	4613      	movlt	r3, r2
 8025512:	6033      	str	r3, [r6, #0]
 8025514:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8025518:	4607      	mov	r7, r0
 802551a:	460c      	mov	r4, r1
 802551c:	b10a      	cbz	r2, 8025522 <_printf_common+0x26>
 802551e:	3301      	adds	r3, #1
 8025520:	6033      	str	r3, [r6, #0]
 8025522:	6823      	ldr	r3, [r4, #0]
 8025524:	0699      	lsls	r1, r3, #26
 8025526:	bf42      	ittt	mi
 8025528:	6833      	ldrmi	r3, [r6, #0]
 802552a:	3302      	addmi	r3, #2
 802552c:	6033      	strmi	r3, [r6, #0]
 802552e:	6825      	ldr	r5, [r4, #0]
 8025530:	f015 0506 	ands.w	r5, r5, #6
 8025534:	d106      	bne.n	8025544 <_printf_common+0x48>
 8025536:	f104 0a19 	add.w	sl, r4, #25
 802553a:	68e3      	ldr	r3, [r4, #12]
 802553c:	6832      	ldr	r2, [r6, #0]
 802553e:	1a9b      	subs	r3, r3, r2
 8025540:	42ab      	cmp	r3, r5
 8025542:	dc26      	bgt.n	8025592 <_printf_common+0x96>
 8025544:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8025548:	1e13      	subs	r3, r2, #0
 802554a:	6822      	ldr	r2, [r4, #0]
 802554c:	bf18      	it	ne
 802554e:	2301      	movne	r3, #1
 8025550:	0692      	lsls	r2, r2, #26
 8025552:	d42b      	bmi.n	80255ac <_printf_common+0xb0>
 8025554:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8025558:	4649      	mov	r1, r9
 802555a:	4638      	mov	r0, r7
 802555c:	47c0      	blx	r8
 802555e:	3001      	adds	r0, #1
 8025560:	d01e      	beq.n	80255a0 <_printf_common+0xa4>
 8025562:	6823      	ldr	r3, [r4, #0]
 8025564:	68e5      	ldr	r5, [r4, #12]
 8025566:	6832      	ldr	r2, [r6, #0]
 8025568:	f003 0306 	and.w	r3, r3, #6
 802556c:	2b04      	cmp	r3, #4
 802556e:	bf08      	it	eq
 8025570:	1aad      	subeq	r5, r5, r2
 8025572:	68a3      	ldr	r3, [r4, #8]
 8025574:	6922      	ldr	r2, [r4, #16]
 8025576:	bf0c      	ite	eq
 8025578:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802557c:	2500      	movne	r5, #0
 802557e:	4293      	cmp	r3, r2
 8025580:	bfc4      	itt	gt
 8025582:	1a9b      	subgt	r3, r3, r2
 8025584:	18ed      	addgt	r5, r5, r3
 8025586:	2600      	movs	r6, #0
 8025588:	341a      	adds	r4, #26
 802558a:	42b5      	cmp	r5, r6
 802558c:	d11a      	bne.n	80255c4 <_printf_common+0xc8>
 802558e:	2000      	movs	r0, #0
 8025590:	e008      	b.n	80255a4 <_printf_common+0xa8>
 8025592:	2301      	movs	r3, #1
 8025594:	4652      	mov	r2, sl
 8025596:	4649      	mov	r1, r9
 8025598:	4638      	mov	r0, r7
 802559a:	47c0      	blx	r8
 802559c:	3001      	adds	r0, #1
 802559e:	d103      	bne.n	80255a8 <_printf_common+0xac>
 80255a0:	f04f 30ff 	mov.w	r0, #4294967295
 80255a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80255a8:	3501      	adds	r5, #1
 80255aa:	e7c6      	b.n	802553a <_printf_common+0x3e>
 80255ac:	18e1      	adds	r1, r4, r3
 80255ae:	1c5a      	adds	r2, r3, #1
 80255b0:	2030      	movs	r0, #48	; 0x30
 80255b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80255b6:	4422      	add	r2, r4
 80255b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80255bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80255c0:	3302      	adds	r3, #2
 80255c2:	e7c7      	b.n	8025554 <_printf_common+0x58>
 80255c4:	2301      	movs	r3, #1
 80255c6:	4622      	mov	r2, r4
 80255c8:	4649      	mov	r1, r9
 80255ca:	4638      	mov	r0, r7
 80255cc:	47c0      	blx	r8
 80255ce:	3001      	adds	r0, #1
 80255d0:	d0e6      	beq.n	80255a0 <_printf_common+0xa4>
 80255d2:	3601      	adds	r6, #1
 80255d4:	e7d9      	b.n	802558a <_printf_common+0x8e>
	...

080255d8 <_printf_i>:
 80255d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80255dc:	460c      	mov	r4, r1
 80255de:	4691      	mov	r9, r2
 80255e0:	7e27      	ldrb	r7, [r4, #24]
 80255e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80255e4:	2f78      	cmp	r7, #120	; 0x78
 80255e6:	4680      	mov	r8, r0
 80255e8:	469a      	mov	sl, r3
 80255ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80255ee:	d807      	bhi.n	8025600 <_printf_i+0x28>
 80255f0:	2f62      	cmp	r7, #98	; 0x62
 80255f2:	d80a      	bhi.n	802560a <_printf_i+0x32>
 80255f4:	2f00      	cmp	r7, #0
 80255f6:	f000 80d8 	beq.w	80257aa <_printf_i+0x1d2>
 80255fa:	2f58      	cmp	r7, #88	; 0x58
 80255fc:	f000 80a3 	beq.w	8025746 <_printf_i+0x16e>
 8025600:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8025604:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8025608:	e03a      	b.n	8025680 <_printf_i+0xa8>
 802560a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802560e:	2b15      	cmp	r3, #21
 8025610:	d8f6      	bhi.n	8025600 <_printf_i+0x28>
 8025612:	a001      	add	r0, pc, #4	; (adr r0, 8025618 <_printf_i+0x40>)
 8025614:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8025618:	08025671 	.word	0x08025671
 802561c:	08025685 	.word	0x08025685
 8025620:	08025601 	.word	0x08025601
 8025624:	08025601 	.word	0x08025601
 8025628:	08025601 	.word	0x08025601
 802562c:	08025601 	.word	0x08025601
 8025630:	08025685 	.word	0x08025685
 8025634:	08025601 	.word	0x08025601
 8025638:	08025601 	.word	0x08025601
 802563c:	08025601 	.word	0x08025601
 8025640:	08025601 	.word	0x08025601
 8025644:	08025791 	.word	0x08025791
 8025648:	080256b5 	.word	0x080256b5
 802564c:	08025773 	.word	0x08025773
 8025650:	08025601 	.word	0x08025601
 8025654:	08025601 	.word	0x08025601
 8025658:	080257b3 	.word	0x080257b3
 802565c:	08025601 	.word	0x08025601
 8025660:	080256b5 	.word	0x080256b5
 8025664:	08025601 	.word	0x08025601
 8025668:	08025601 	.word	0x08025601
 802566c:	0802577b 	.word	0x0802577b
 8025670:	680b      	ldr	r3, [r1, #0]
 8025672:	1d1a      	adds	r2, r3, #4
 8025674:	681b      	ldr	r3, [r3, #0]
 8025676:	600a      	str	r2, [r1, #0]
 8025678:	f104 0642 	add.w	r6, r4, #66	; 0x42
 802567c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8025680:	2301      	movs	r3, #1
 8025682:	e0a3      	b.n	80257cc <_printf_i+0x1f4>
 8025684:	6825      	ldr	r5, [r4, #0]
 8025686:	6808      	ldr	r0, [r1, #0]
 8025688:	062e      	lsls	r6, r5, #24
 802568a:	f100 0304 	add.w	r3, r0, #4
 802568e:	d50a      	bpl.n	80256a6 <_printf_i+0xce>
 8025690:	6805      	ldr	r5, [r0, #0]
 8025692:	600b      	str	r3, [r1, #0]
 8025694:	2d00      	cmp	r5, #0
 8025696:	da03      	bge.n	80256a0 <_printf_i+0xc8>
 8025698:	232d      	movs	r3, #45	; 0x2d
 802569a:	426d      	negs	r5, r5
 802569c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80256a0:	485e      	ldr	r0, [pc, #376]	; (802581c <_printf_i+0x244>)
 80256a2:	230a      	movs	r3, #10
 80256a4:	e019      	b.n	80256da <_printf_i+0x102>
 80256a6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80256aa:	6805      	ldr	r5, [r0, #0]
 80256ac:	600b      	str	r3, [r1, #0]
 80256ae:	bf18      	it	ne
 80256b0:	b22d      	sxthne	r5, r5
 80256b2:	e7ef      	b.n	8025694 <_printf_i+0xbc>
 80256b4:	680b      	ldr	r3, [r1, #0]
 80256b6:	6825      	ldr	r5, [r4, #0]
 80256b8:	1d18      	adds	r0, r3, #4
 80256ba:	6008      	str	r0, [r1, #0]
 80256bc:	0628      	lsls	r0, r5, #24
 80256be:	d501      	bpl.n	80256c4 <_printf_i+0xec>
 80256c0:	681d      	ldr	r5, [r3, #0]
 80256c2:	e002      	b.n	80256ca <_printf_i+0xf2>
 80256c4:	0669      	lsls	r1, r5, #25
 80256c6:	d5fb      	bpl.n	80256c0 <_printf_i+0xe8>
 80256c8:	881d      	ldrh	r5, [r3, #0]
 80256ca:	4854      	ldr	r0, [pc, #336]	; (802581c <_printf_i+0x244>)
 80256cc:	2f6f      	cmp	r7, #111	; 0x6f
 80256ce:	bf0c      	ite	eq
 80256d0:	2308      	moveq	r3, #8
 80256d2:	230a      	movne	r3, #10
 80256d4:	2100      	movs	r1, #0
 80256d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80256da:	6866      	ldr	r6, [r4, #4]
 80256dc:	60a6      	str	r6, [r4, #8]
 80256de:	2e00      	cmp	r6, #0
 80256e0:	bfa2      	ittt	ge
 80256e2:	6821      	ldrge	r1, [r4, #0]
 80256e4:	f021 0104 	bicge.w	r1, r1, #4
 80256e8:	6021      	strge	r1, [r4, #0]
 80256ea:	b90d      	cbnz	r5, 80256f0 <_printf_i+0x118>
 80256ec:	2e00      	cmp	r6, #0
 80256ee:	d04d      	beq.n	802578c <_printf_i+0x1b4>
 80256f0:	4616      	mov	r6, r2
 80256f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80256f6:	fb03 5711 	mls	r7, r3, r1, r5
 80256fa:	5dc7      	ldrb	r7, [r0, r7]
 80256fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8025700:	462f      	mov	r7, r5
 8025702:	42bb      	cmp	r3, r7
 8025704:	460d      	mov	r5, r1
 8025706:	d9f4      	bls.n	80256f2 <_printf_i+0x11a>
 8025708:	2b08      	cmp	r3, #8
 802570a:	d10b      	bne.n	8025724 <_printf_i+0x14c>
 802570c:	6823      	ldr	r3, [r4, #0]
 802570e:	07df      	lsls	r7, r3, #31
 8025710:	d508      	bpl.n	8025724 <_printf_i+0x14c>
 8025712:	6923      	ldr	r3, [r4, #16]
 8025714:	6861      	ldr	r1, [r4, #4]
 8025716:	4299      	cmp	r1, r3
 8025718:	bfde      	ittt	le
 802571a:	2330      	movle	r3, #48	; 0x30
 802571c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8025720:	f106 36ff 	addle.w	r6, r6, #4294967295
 8025724:	1b92      	subs	r2, r2, r6
 8025726:	6122      	str	r2, [r4, #16]
 8025728:	f8cd a000 	str.w	sl, [sp]
 802572c:	464b      	mov	r3, r9
 802572e:	aa03      	add	r2, sp, #12
 8025730:	4621      	mov	r1, r4
 8025732:	4640      	mov	r0, r8
 8025734:	f7ff fee2 	bl	80254fc <_printf_common>
 8025738:	3001      	adds	r0, #1
 802573a:	d14c      	bne.n	80257d6 <_printf_i+0x1fe>
 802573c:	f04f 30ff 	mov.w	r0, #4294967295
 8025740:	b004      	add	sp, #16
 8025742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025746:	4835      	ldr	r0, [pc, #212]	; (802581c <_printf_i+0x244>)
 8025748:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802574c:	6823      	ldr	r3, [r4, #0]
 802574e:	680e      	ldr	r6, [r1, #0]
 8025750:	061f      	lsls	r7, r3, #24
 8025752:	f856 5b04 	ldr.w	r5, [r6], #4
 8025756:	600e      	str	r6, [r1, #0]
 8025758:	d514      	bpl.n	8025784 <_printf_i+0x1ac>
 802575a:	07d9      	lsls	r1, r3, #31
 802575c:	bf44      	itt	mi
 802575e:	f043 0320 	orrmi.w	r3, r3, #32
 8025762:	6023      	strmi	r3, [r4, #0]
 8025764:	b91d      	cbnz	r5, 802576e <_printf_i+0x196>
 8025766:	6823      	ldr	r3, [r4, #0]
 8025768:	f023 0320 	bic.w	r3, r3, #32
 802576c:	6023      	str	r3, [r4, #0]
 802576e:	2310      	movs	r3, #16
 8025770:	e7b0      	b.n	80256d4 <_printf_i+0xfc>
 8025772:	6823      	ldr	r3, [r4, #0]
 8025774:	f043 0320 	orr.w	r3, r3, #32
 8025778:	6023      	str	r3, [r4, #0]
 802577a:	2378      	movs	r3, #120	; 0x78
 802577c:	4828      	ldr	r0, [pc, #160]	; (8025820 <_printf_i+0x248>)
 802577e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8025782:	e7e3      	b.n	802574c <_printf_i+0x174>
 8025784:	065e      	lsls	r6, r3, #25
 8025786:	bf48      	it	mi
 8025788:	b2ad      	uxthmi	r5, r5
 802578a:	e7e6      	b.n	802575a <_printf_i+0x182>
 802578c:	4616      	mov	r6, r2
 802578e:	e7bb      	b.n	8025708 <_printf_i+0x130>
 8025790:	680b      	ldr	r3, [r1, #0]
 8025792:	6826      	ldr	r6, [r4, #0]
 8025794:	6960      	ldr	r0, [r4, #20]
 8025796:	1d1d      	adds	r5, r3, #4
 8025798:	600d      	str	r5, [r1, #0]
 802579a:	0635      	lsls	r5, r6, #24
 802579c:	681b      	ldr	r3, [r3, #0]
 802579e:	d501      	bpl.n	80257a4 <_printf_i+0x1cc>
 80257a0:	6018      	str	r0, [r3, #0]
 80257a2:	e002      	b.n	80257aa <_printf_i+0x1d2>
 80257a4:	0671      	lsls	r1, r6, #25
 80257a6:	d5fb      	bpl.n	80257a0 <_printf_i+0x1c8>
 80257a8:	8018      	strh	r0, [r3, #0]
 80257aa:	2300      	movs	r3, #0
 80257ac:	6123      	str	r3, [r4, #16]
 80257ae:	4616      	mov	r6, r2
 80257b0:	e7ba      	b.n	8025728 <_printf_i+0x150>
 80257b2:	680b      	ldr	r3, [r1, #0]
 80257b4:	1d1a      	adds	r2, r3, #4
 80257b6:	600a      	str	r2, [r1, #0]
 80257b8:	681e      	ldr	r6, [r3, #0]
 80257ba:	6862      	ldr	r2, [r4, #4]
 80257bc:	2100      	movs	r1, #0
 80257be:	4630      	mov	r0, r6
 80257c0:	f7da fda6 	bl	8000310 <memchr>
 80257c4:	b108      	cbz	r0, 80257ca <_printf_i+0x1f2>
 80257c6:	1b80      	subs	r0, r0, r6
 80257c8:	6060      	str	r0, [r4, #4]
 80257ca:	6863      	ldr	r3, [r4, #4]
 80257cc:	6123      	str	r3, [r4, #16]
 80257ce:	2300      	movs	r3, #0
 80257d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80257d4:	e7a8      	b.n	8025728 <_printf_i+0x150>
 80257d6:	6923      	ldr	r3, [r4, #16]
 80257d8:	4632      	mov	r2, r6
 80257da:	4649      	mov	r1, r9
 80257dc:	4640      	mov	r0, r8
 80257de:	47d0      	blx	sl
 80257e0:	3001      	adds	r0, #1
 80257e2:	d0ab      	beq.n	802573c <_printf_i+0x164>
 80257e4:	6823      	ldr	r3, [r4, #0]
 80257e6:	079b      	lsls	r3, r3, #30
 80257e8:	d413      	bmi.n	8025812 <_printf_i+0x23a>
 80257ea:	68e0      	ldr	r0, [r4, #12]
 80257ec:	9b03      	ldr	r3, [sp, #12]
 80257ee:	4298      	cmp	r0, r3
 80257f0:	bfb8      	it	lt
 80257f2:	4618      	movlt	r0, r3
 80257f4:	e7a4      	b.n	8025740 <_printf_i+0x168>
 80257f6:	2301      	movs	r3, #1
 80257f8:	4632      	mov	r2, r6
 80257fa:	4649      	mov	r1, r9
 80257fc:	4640      	mov	r0, r8
 80257fe:	47d0      	blx	sl
 8025800:	3001      	adds	r0, #1
 8025802:	d09b      	beq.n	802573c <_printf_i+0x164>
 8025804:	3501      	adds	r5, #1
 8025806:	68e3      	ldr	r3, [r4, #12]
 8025808:	9903      	ldr	r1, [sp, #12]
 802580a:	1a5b      	subs	r3, r3, r1
 802580c:	42ab      	cmp	r3, r5
 802580e:	dcf2      	bgt.n	80257f6 <_printf_i+0x21e>
 8025810:	e7eb      	b.n	80257ea <_printf_i+0x212>
 8025812:	2500      	movs	r5, #0
 8025814:	f104 0619 	add.w	r6, r4, #25
 8025818:	e7f5      	b.n	8025806 <_printf_i+0x22e>
 802581a:	bf00      	nop
 802581c:	0809ae5a 	.word	0x0809ae5a
 8025820:	0809ae6b 	.word	0x0809ae6b

08025824 <_sbrk_r>:
 8025824:	b538      	push	{r3, r4, r5, lr}
 8025826:	4d06      	ldr	r5, [pc, #24]	; (8025840 <_sbrk_r+0x1c>)
 8025828:	2300      	movs	r3, #0
 802582a:	4604      	mov	r4, r0
 802582c:	4608      	mov	r0, r1
 802582e:	602b      	str	r3, [r5, #0]
 8025830:	f002 fcec 	bl	802820c <_sbrk>
 8025834:	1c43      	adds	r3, r0, #1
 8025836:	d102      	bne.n	802583e <_sbrk_r+0x1a>
 8025838:	682b      	ldr	r3, [r5, #0]
 802583a:	b103      	cbz	r3, 802583e <_sbrk_r+0x1a>
 802583c:	6023      	str	r3, [r4, #0]
 802583e:	bd38      	pop	{r3, r4, r5, pc}
 8025840:	2000a2b8 	.word	0x2000a2b8

08025844 <sniprintf>:
 8025844:	b40c      	push	{r2, r3}
 8025846:	b530      	push	{r4, r5, lr}
 8025848:	4b17      	ldr	r3, [pc, #92]	; (80258a8 <sniprintf+0x64>)
 802584a:	1e0c      	subs	r4, r1, #0
 802584c:	681d      	ldr	r5, [r3, #0]
 802584e:	b09d      	sub	sp, #116	; 0x74
 8025850:	da08      	bge.n	8025864 <sniprintf+0x20>
 8025852:	238b      	movs	r3, #139	; 0x8b
 8025854:	602b      	str	r3, [r5, #0]
 8025856:	f04f 30ff 	mov.w	r0, #4294967295
 802585a:	b01d      	add	sp, #116	; 0x74
 802585c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8025860:	b002      	add	sp, #8
 8025862:	4770      	bx	lr
 8025864:	f44f 7302 	mov.w	r3, #520	; 0x208
 8025868:	f8ad 3014 	strh.w	r3, [sp, #20]
 802586c:	bf14      	ite	ne
 802586e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8025872:	4623      	moveq	r3, r4
 8025874:	9304      	str	r3, [sp, #16]
 8025876:	9307      	str	r3, [sp, #28]
 8025878:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802587c:	9002      	str	r0, [sp, #8]
 802587e:	9006      	str	r0, [sp, #24]
 8025880:	f8ad 3016 	strh.w	r3, [sp, #22]
 8025884:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8025886:	ab21      	add	r3, sp, #132	; 0x84
 8025888:	a902      	add	r1, sp, #8
 802588a:	4628      	mov	r0, r5
 802588c:	9301      	str	r3, [sp, #4]
 802588e:	f001 fa6b 	bl	8026d68 <_svfiprintf_r>
 8025892:	1c43      	adds	r3, r0, #1
 8025894:	bfbc      	itt	lt
 8025896:	238b      	movlt	r3, #139	; 0x8b
 8025898:	602b      	strlt	r3, [r5, #0]
 802589a:	2c00      	cmp	r4, #0
 802589c:	d0dd      	beq.n	802585a <sniprintf+0x16>
 802589e:	9b02      	ldr	r3, [sp, #8]
 80258a0:	2200      	movs	r2, #0
 80258a2:	701a      	strb	r2, [r3, #0]
 80258a4:	e7d9      	b.n	802585a <sniprintf+0x16>
 80258a6:	bf00      	nop
 80258a8:	20007718 	.word	0x20007718

080258ac <siprintf>:
 80258ac:	b40e      	push	{r1, r2, r3}
 80258ae:	b500      	push	{lr}
 80258b0:	b09c      	sub	sp, #112	; 0x70
 80258b2:	ab1d      	add	r3, sp, #116	; 0x74
 80258b4:	9002      	str	r0, [sp, #8]
 80258b6:	9006      	str	r0, [sp, #24]
 80258b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80258bc:	4809      	ldr	r0, [pc, #36]	; (80258e4 <siprintf+0x38>)
 80258be:	9107      	str	r1, [sp, #28]
 80258c0:	9104      	str	r1, [sp, #16]
 80258c2:	4909      	ldr	r1, [pc, #36]	; (80258e8 <siprintf+0x3c>)
 80258c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80258c8:	9105      	str	r1, [sp, #20]
 80258ca:	6800      	ldr	r0, [r0, #0]
 80258cc:	9301      	str	r3, [sp, #4]
 80258ce:	a902      	add	r1, sp, #8
 80258d0:	f001 fa4a 	bl	8026d68 <_svfiprintf_r>
 80258d4:	9b02      	ldr	r3, [sp, #8]
 80258d6:	2200      	movs	r2, #0
 80258d8:	701a      	strb	r2, [r3, #0]
 80258da:	b01c      	add	sp, #112	; 0x70
 80258dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80258e0:	b003      	add	sp, #12
 80258e2:	4770      	bx	lr
 80258e4:	20007718 	.word	0x20007718
 80258e8:	ffff0208 	.word	0xffff0208

080258ec <stpcpy>:
 80258ec:	4603      	mov	r3, r0
 80258ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80258f2:	4618      	mov	r0, r3
 80258f4:	f803 2b01 	strb.w	r2, [r3], #1
 80258f8:	2a00      	cmp	r2, #0
 80258fa:	d1f8      	bne.n	80258ee <stpcpy+0x2>
 80258fc:	4770      	bx	lr

080258fe <strcpy>:
 80258fe:	4603      	mov	r3, r0
 8025900:	f811 2b01 	ldrb.w	r2, [r1], #1
 8025904:	f803 2b01 	strb.w	r2, [r3], #1
 8025908:	2a00      	cmp	r2, #0
 802590a:	d1f9      	bne.n	8025900 <strcpy+0x2>
 802590c:	4770      	bx	lr

0802590e <quorem>:
 802590e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025912:	6903      	ldr	r3, [r0, #16]
 8025914:	690c      	ldr	r4, [r1, #16]
 8025916:	42a3      	cmp	r3, r4
 8025918:	4607      	mov	r7, r0
 802591a:	f2c0 8081 	blt.w	8025a20 <quorem+0x112>
 802591e:	3c01      	subs	r4, #1
 8025920:	f101 0814 	add.w	r8, r1, #20
 8025924:	f100 0514 	add.w	r5, r0, #20
 8025928:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802592c:	9301      	str	r3, [sp, #4]
 802592e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8025932:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8025936:	3301      	adds	r3, #1
 8025938:	429a      	cmp	r2, r3
 802593a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 802593e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8025942:	fbb2 f6f3 	udiv	r6, r2, r3
 8025946:	d331      	bcc.n	80259ac <quorem+0x9e>
 8025948:	f04f 0e00 	mov.w	lr, #0
 802594c:	4640      	mov	r0, r8
 802594e:	46ac      	mov	ip, r5
 8025950:	46f2      	mov	sl, lr
 8025952:	f850 2b04 	ldr.w	r2, [r0], #4
 8025956:	b293      	uxth	r3, r2
 8025958:	fb06 e303 	mla	r3, r6, r3, lr
 802595c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8025960:	b29b      	uxth	r3, r3
 8025962:	ebaa 0303 	sub.w	r3, sl, r3
 8025966:	0c12      	lsrs	r2, r2, #16
 8025968:	f8dc a000 	ldr.w	sl, [ip]
 802596c:	fb06 e202 	mla	r2, r6, r2, lr
 8025970:	fa13 f38a 	uxtah	r3, r3, sl
 8025974:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8025978:	fa1f fa82 	uxth.w	sl, r2
 802597c:	f8dc 2000 	ldr.w	r2, [ip]
 8025980:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8025984:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8025988:	b29b      	uxth	r3, r3
 802598a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802598e:	4581      	cmp	r9, r0
 8025990:	f84c 3b04 	str.w	r3, [ip], #4
 8025994:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8025998:	d2db      	bcs.n	8025952 <quorem+0x44>
 802599a:	f855 300b 	ldr.w	r3, [r5, fp]
 802599e:	b92b      	cbnz	r3, 80259ac <quorem+0x9e>
 80259a0:	9b01      	ldr	r3, [sp, #4]
 80259a2:	3b04      	subs	r3, #4
 80259a4:	429d      	cmp	r5, r3
 80259a6:	461a      	mov	r2, r3
 80259a8:	d32e      	bcc.n	8025a08 <quorem+0xfa>
 80259aa:	613c      	str	r4, [r7, #16]
 80259ac:	4638      	mov	r0, r7
 80259ae:	f001 f84b 	bl	8026a48 <__mcmp>
 80259b2:	2800      	cmp	r0, #0
 80259b4:	db24      	blt.n	8025a00 <quorem+0xf2>
 80259b6:	3601      	adds	r6, #1
 80259b8:	4628      	mov	r0, r5
 80259ba:	f04f 0c00 	mov.w	ip, #0
 80259be:	f858 2b04 	ldr.w	r2, [r8], #4
 80259c2:	f8d0 e000 	ldr.w	lr, [r0]
 80259c6:	b293      	uxth	r3, r2
 80259c8:	ebac 0303 	sub.w	r3, ip, r3
 80259cc:	0c12      	lsrs	r2, r2, #16
 80259ce:	fa13 f38e 	uxtah	r3, r3, lr
 80259d2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80259d6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80259da:	b29b      	uxth	r3, r3
 80259dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80259e0:	45c1      	cmp	r9, r8
 80259e2:	f840 3b04 	str.w	r3, [r0], #4
 80259e6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80259ea:	d2e8      	bcs.n	80259be <quorem+0xb0>
 80259ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80259f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80259f4:	b922      	cbnz	r2, 8025a00 <quorem+0xf2>
 80259f6:	3b04      	subs	r3, #4
 80259f8:	429d      	cmp	r5, r3
 80259fa:	461a      	mov	r2, r3
 80259fc:	d30a      	bcc.n	8025a14 <quorem+0x106>
 80259fe:	613c      	str	r4, [r7, #16]
 8025a00:	4630      	mov	r0, r6
 8025a02:	b003      	add	sp, #12
 8025a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025a08:	6812      	ldr	r2, [r2, #0]
 8025a0a:	3b04      	subs	r3, #4
 8025a0c:	2a00      	cmp	r2, #0
 8025a0e:	d1cc      	bne.n	80259aa <quorem+0x9c>
 8025a10:	3c01      	subs	r4, #1
 8025a12:	e7c7      	b.n	80259a4 <quorem+0x96>
 8025a14:	6812      	ldr	r2, [r2, #0]
 8025a16:	3b04      	subs	r3, #4
 8025a18:	2a00      	cmp	r2, #0
 8025a1a:	d1f0      	bne.n	80259fe <quorem+0xf0>
 8025a1c:	3c01      	subs	r4, #1
 8025a1e:	e7eb      	b.n	80259f8 <quorem+0xea>
 8025a20:	2000      	movs	r0, #0
 8025a22:	e7ee      	b.n	8025a02 <quorem+0xf4>
 8025a24:	0000      	movs	r0, r0
	...

08025a28 <_dtoa_r>:
 8025a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025a2c:	ec59 8b10 	vmov	r8, r9, d0
 8025a30:	b095      	sub	sp, #84	; 0x54
 8025a32:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8025a34:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8025a36:	9107      	str	r1, [sp, #28]
 8025a38:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8025a3c:	4606      	mov	r6, r0
 8025a3e:	9209      	str	r2, [sp, #36]	; 0x24
 8025a40:	9310      	str	r3, [sp, #64]	; 0x40
 8025a42:	b975      	cbnz	r5, 8025a62 <_dtoa_r+0x3a>
 8025a44:	2010      	movs	r0, #16
 8025a46:	f7ff f9c1 	bl	8024dcc <malloc>
 8025a4a:	4602      	mov	r2, r0
 8025a4c:	6270      	str	r0, [r6, #36]	; 0x24
 8025a4e:	b920      	cbnz	r0, 8025a5a <_dtoa_r+0x32>
 8025a50:	4bab      	ldr	r3, [pc, #684]	; (8025d00 <_dtoa_r+0x2d8>)
 8025a52:	21ea      	movs	r1, #234	; 0xea
 8025a54:	48ab      	ldr	r0, [pc, #684]	; (8025d04 <_dtoa_r+0x2dc>)
 8025a56:	f001 fa87 	bl	8026f68 <__assert_func>
 8025a5a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8025a5e:	6005      	str	r5, [r0, #0]
 8025a60:	60c5      	str	r5, [r0, #12]
 8025a62:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8025a64:	6819      	ldr	r1, [r3, #0]
 8025a66:	b151      	cbz	r1, 8025a7e <_dtoa_r+0x56>
 8025a68:	685a      	ldr	r2, [r3, #4]
 8025a6a:	604a      	str	r2, [r1, #4]
 8025a6c:	2301      	movs	r3, #1
 8025a6e:	4093      	lsls	r3, r2
 8025a70:	608b      	str	r3, [r1, #8]
 8025a72:	4630      	mov	r0, r6
 8025a74:	f000 fdaa 	bl	80265cc <_Bfree>
 8025a78:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8025a7a:	2200      	movs	r2, #0
 8025a7c:	601a      	str	r2, [r3, #0]
 8025a7e:	f1b9 0300 	subs.w	r3, r9, #0
 8025a82:	bfbb      	ittet	lt
 8025a84:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8025a88:	9303      	strlt	r3, [sp, #12]
 8025a8a:	2300      	movge	r3, #0
 8025a8c:	2201      	movlt	r2, #1
 8025a8e:	bfac      	ite	ge
 8025a90:	6023      	strge	r3, [r4, #0]
 8025a92:	6022      	strlt	r2, [r4, #0]
 8025a94:	4b9c      	ldr	r3, [pc, #624]	; (8025d08 <_dtoa_r+0x2e0>)
 8025a96:	9c03      	ldr	r4, [sp, #12]
 8025a98:	43a3      	bics	r3, r4
 8025a9a:	d11a      	bne.n	8025ad2 <_dtoa_r+0xaa>
 8025a9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8025a9e:	f242 730f 	movw	r3, #9999	; 0x270f
 8025aa2:	6013      	str	r3, [r2, #0]
 8025aa4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8025aa8:	ea53 0308 	orrs.w	r3, r3, r8
 8025aac:	f000 8512 	beq.w	80264d4 <_dtoa_r+0xaac>
 8025ab0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8025ab2:	b953      	cbnz	r3, 8025aca <_dtoa_r+0xa2>
 8025ab4:	4b95      	ldr	r3, [pc, #596]	; (8025d0c <_dtoa_r+0x2e4>)
 8025ab6:	e01f      	b.n	8025af8 <_dtoa_r+0xd0>
 8025ab8:	4b95      	ldr	r3, [pc, #596]	; (8025d10 <_dtoa_r+0x2e8>)
 8025aba:	9300      	str	r3, [sp, #0]
 8025abc:	3308      	adds	r3, #8
 8025abe:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8025ac0:	6013      	str	r3, [r2, #0]
 8025ac2:	9800      	ldr	r0, [sp, #0]
 8025ac4:	b015      	add	sp, #84	; 0x54
 8025ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025aca:	4b90      	ldr	r3, [pc, #576]	; (8025d0c <_dtoa_r+0x2e4>)
 8025acc:	9300      	str	r3, [sp, #0]
 8025ace:	3303      	adds	r3, #3
 8025ad0:	e7f5      	b.n	8025abe <_dtoa_r+0x96>
 8025ad2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8025ad6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8025ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025ade:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8025ae2:	d10b      	bne.n	8025afc <_dtoa_r+0xd4>
 8025ae4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8025ae6:	2301      	movs	r3, #1
 8025ae8:	6013      	str	r3, [r2, #0]
 8025aea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8025aec:	2b00      	cmp	r3, #0
 8025aee:	f000 84ee 	beq.w	80264ce <_dtoa_r+0xaa6>
 8025af2:	4888      	ldr	r0, [pc, #544]	; (8025d14 <_dtoa_r+0x2ec>)
 8025af4:	6018      	str	r0, [r3, #0]
 8025af6:	1e43      	subs	r3, r0, #1
 8025af8:	9300      	str	r3, [sp, #0]
 8025afa:	e7e2      	b.n	8025ac2 <_dtoa_r+0x9a>
 8025afc:	a913      	add	r1, sp, #76	; 0x4c
 8025afe:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8025b02:	aa12      	add	r2, sp, #72	; 0x48
 8025b04:	4630      	mov	r0, r6
 8025b06:	f001 f843 	bl	8026b90 <__d2b>
 8025b0a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8025b0e:	4605      	mov	r5, r0
 8025b10:	9812      	ldr	r0, [sp, #72]	; 0x48
 8025b12:	2900      	cmp	r1, #0
 8025b14:	d047      	beq.n	8025ba6 <_dtoa_r+0x17e>
 8025b16:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025b18:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8025b1c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8025b20:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8025b24:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8025b28:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8025b2c:	2400      	movs	r4, #0
 8025b2e:	ec43 2b16 	vmov	d6, r2, r3
 8025b32:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8025b36:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8025ce8 <_dtoa_r+0x2c0>
 8025b3a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8025b3e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8025cf0 <_dtoa_r+0x2c8>
 8025b42:	eea7 6b05 	vfma.f64	d6, d7, d5
 8025b46:	eeb0 7b46 	vmov.f64	d7, d6
 8025b4a:	ee06 1a90 	vmov	s13, r1
 8025b4e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8025b52:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8025cf8 <_dtoa_r+0x2d0>
 8025b56:	eea5 7b06 	vfma.f64	d7, d5, d6
 8025b5a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8025b5e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8025b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025b66:	ee16 ba90 	vmov	fp, s13
 8025b6a:	9411      	str	r4, [sp, #68]	; 0x44
 8025b6c:	d508      	bpl.n	8025b80 <_dtoa_r+0x158>
 8025b6e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8025b72:	eeb4 6b47 	vcmp.f64	d6, d7
 8025b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025b7a:	bf18      	it	ne
 8025b7c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8025b80:	f1bb 0f16 	cmp.w	fp, #22
 8025b84:	d832      	bhi.n	8025bec <_dtoa_r+0x1c4>
 8025b86:	4b64      	ldr	r3, [pc, #400]	; (8025d18 <_dtoa_r+0x2f0>)
 8025b88:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8025b8c:	ed93 7b00 	vldr	d7, [r3]
 8025b90:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8025b94:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8025b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025b9c:	d501      	bpl.n	8025ba2 <_dtoa_r+0x17a>
 8025b9e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025ba2:	2300      	movs	r3, #0
 8025ba4:	e023      	b.n	8025bee <_dtoa_r+0x1c6>
 8025ba6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8025ba8:	4401      	add	r1, r0
 8025baa:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8025bae:	2b20      	cmp	r3, #32
 8025bb0:	bfc3      	ittte	gt
 8025bb2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8025bb6:	fa04 f303 	lslgt.w	r3, r4, r3
 8025bba:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8025bbe:	f1c3 0320 	rsble	r3, r3, #32
 8025bc2:	bfc6      	itte	gt
 8025bc4:	fa28 f804 	lsrgt.w	r8, r8, r4
 8025bc8:	ea43 0308 	orrgt.w	r3, r3, r8
 8025bcc:	fa08 f303 	lslle.w	r3, r8, r3
 8025bd0:	ee07 3a90 	vmov	s15, r3
 8025bd4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8025bd8:	3901      	subs	r1, #1
 8025bda:	ed8d 7b00 	vstr	d7, [sp]
 8025bde:	9c01      	ldr	r4, [sp, #4]
 8025be0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8025be4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8025be8:	2401      	movs	r4, #1
 8025bea:	e7a0      	b.n	8025b2e <_dtoa_r+0x106>
 8025bec:	2301      	movs	r3, #1
 8025bee:	930f      	str	r3, [sp, #60]	; 0x3c
 8025bf0:	1a43      	subs	r3, r0, r1
 8025bf2:	1e5a      	subs	r2, r3, #1
 8025bf4:	bf45      	ittet	mi
 8025bf6:	f1c3 0301 	rsbmi	r3, r3, #1
 8025bfa:	9305      	strmi	r3, [sp, #20]
 8025bfc:	2300      	movpl	r3, #0
 8025bfe:	2300      	movmi	r3, #0
 8025c00:	9206      	str	r2, [sp, #24]
 8025c02:	bf54      	ite	pl
 8025c04:	9305      	strpl	r3, [sp, #20]
 8025c06:	9306      	strmi	r3, [sp, #24]
 8025c08:	f1bb 0f00 	cmp.w	fp, #0
 8025c0c:	db18      	blt.n	8025c40 <_dtoa_r+0x218>
 8025c0e:	9b06      	ldr	r3, [sp, #24]
 8025c10:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8025c14:	445b      	add	r3, fp
 8025c16:	9306      	str	r3, [sp, #24]
 8025c18:	2300      	movs	r3, #0
 8025c1a:	9a07      	ldr	r2, [sp, #28]
 8025c1c:	2a09      	cmp	r2, #9
 8025c1e:	d849      	bhi.n	8025cb4 <_dtoa_r+0x28c>
 8025c20:	2a05      	cmp	r2, #5
 8025c22:	bfc4      	itt	gt
 8025c24:	3a04      	subgt	r2, #4
 8025c26:	9207      	strgt	r2, [sp, #28]
 8025c28:	9a07      	ldr	r2, [sp, #28]
 8025c2a:	f1a2 0202 	sub.w	r2, r2, #2
 8025c2e:	bfcc      	ite	gt
 8025c30:	2400      	movgt	r4, #0
 8025c32:	2401      	movle	r4, #1
 8025c34:	2a03      	cmp	r2, #3
 8025c36:	d848      	bhi.n	8025cca <_dtoa_r+0x2a2>
 8025c38:	e8df f002 	tbb	[pc, r2]
 8025c3c:	3a2c2e0b 	.word	0x3a2c2e0b
 8025c40:	9b05      	ldr	r3, [sp, #20]
 8025c42:	2200      	movs	r2, #0
 8025c44:	eba3 030b 	sub.w	r3, r3, fp
 8025c48:	9305      	str	r3, [sp, #20]
 8025c4a:	920e      	str	r2, [sp, #56]	; 0x38
 8025c4c:	f1cb 0300 	rsb	r3, fp, #0
 8025c50:	e7e3      	b.n	8025c1a <_dtoa_r+0x1f2>
 8025c52:	2200      	movs	r2, #0
 8025c54:	9208      	str	r2, [sp, #32]
 8025c56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025c58:	2a00      	cmp	r2, #0
 8025c5a:	dc39      	bgt.n	8025cd0 <_dtoa_r+0x2a8>
 8025c5c:	f04f 0a01 	mov.w	sl, #1
 8025c60:	46d1      	mov	r9, sl
 8025c62:	4652      	mov	r2, sl
 8025c64:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8025c68:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8025c6a:	2100      	movs	r1, #0
 8025c6c:	6079      	str	r1, [r7, #4]
 8025c6e:	2004      	movs	r0, #4
 8025c70:	f100 0c14 	add.w	ip, r0, #20
 8025c74:	4594      	cmp	ip, r2
 8025c76:	6879      	ldr	r1, [r7, #4]
 8025c78:	d92f      	bls.n	8025cda <_dtoa_r+0x2b2>
 8025c7a:	4630      	mov	r0, r6
 8025c7c:	930c      	str	r3, [sp, #48]	; 0x30
 8025c7e:	f000 fc65 	bl	802654c <_Balloc>
 8025c82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025c84:	9000      	str	r0, [sp, #0]
 8025c86:	4602      	mov	r2, r0
 8025c88:	2800      	cmp	r0, #0
 8025c8a:	d149      	bne.n	8025d20 <_dtoa_r+0x2f8>
 8025c8c:	4b23      	ldr	r3, [pc, #140]	; (8025d1c <_dtoa_r+0x2f4>)
 8025c8e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8025c92:	e6df      	b.n	8025a54 <_dtoa_r+0x2c>
 8025c94:	2201      	movs	r2, #1
 8025c96:	e7dd      	b.n	8025c54 <_dtoa_r+0x22c>
 8025c98:	2200      	movs	r2, #0
 8025c9a:	9208      	str	r2, [sp, #32]
 8025c9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025c9e:	eb0b 0a02 	add.w	sl, fp, r2
 8025ca2:	f10a 0901 	add.w	r9, sl, #1
 8025ca6:	464a      	mov	r2, r9
 8025ca8:	2a01      	cmp	r2, #1
 8025caa:	bfb8      	it	lt
 8025cac:	2201      	movlt	r2, #1
 8025cae:	e7db      	b.n	8025c68 <_dtoa_r+0x240>
 8025cb0:	2201      	movs	r2, #1
 8025cb2:	e7f2      	b.n	8025c9a <_dtoa_r+0x272>
 8025cb4:	2401      	movs	r4, #1
 8025cb6:	2200      	movs	r2, #0
 8025cb8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8025cbc:	f04f 3aff 	mov.w	sl, #4294967295
 8025cc0:	2100      	movs	r1, #0
 8025cc2:	46d1      	mov	r9, sl
 8025cc4:	2212      	movs	r2, #18
 8025cc6:	9109      	str	r1, [sp, #36]	; 0x24
 8025cc8:	e7ce      	b.n	8025c68 <_dtoa_r+0x240>
 8025cca:	2201      	movs	r2, #1
 8025ccc:	9208      	str	r2, [sp, #32]
 8025cce:	e7f5      	b.n	8025cbc <_dtoa_r+0x294>
 8025cd0:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8025cd4:	46d1      	mov	r9, sl
 8025cd6:	4652      	mov	r2, sl
 8025cd8:	e7c6      	b.n	8025c68 <_dtoa_r+0x240>
 8025cda:	3101      	adds	r1, #1
 8025cdc:	6079      	str	r1, [r7, #4]
 8025cde:	0040      	lsls	r0, r0, #1
 8025ce0:	e7c6      	b.n	8025c70 <_dtoa_r+0x248>
 8025ce2:	bf00      	nop
 8025ce4:	f3af 8000 	nop.w
 8025ce8:	636f4361 	.word	0x636f4361
 8025cec:	3fd287a7 	.word	0x3fd287a7
 8025cf0:	8b60c8b3 	.word	0x8b60c8b3
 8025cf4:	3fc68a28 	.word	0x3fc68a28
 8025cf8:	509f79fb 	.word	0x509f79fb
 8025cfc:	3fd34413 	.word	0x3fd34413
 8025d00:	0809ae89 	.word	0x0809ae89
 8025d04:	0809aea0 	.word	0x0809aea0
 8025d08:	7ff00000 	.word	0x7ff00000
 8025d0c:	0809ae85 	.word	0x0809ae85
 8025d10:	0809ae7c 	.word	0x0809ae7c
 8025d14:	0809ae59 	.word	0x0809ae59
 8025d18:	0809af98 	.word	0x0809af98
 8025d1c:	0809aeff 	.word	0x0809aeff
 8025d20:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8025d22:	9900      	ldr	r1, [sp, #0]
 8025d24:	6011      	str	r1, [r2, #0]
 8025d26:	f1b9 0f0e 	cmp.w	r9, #14
 8025d2a:	d872      	bhi.n	8025e12 <_dtoa_r+0x3ea>
 8025d2c:	2c00      	cmp	r4, #0
 8025d2e:	d070      	beq.n	8025e12 <_dtoa_r+0x3ea>
 8025d30:	f1bb 0f00 	cmp.w	fp, #0
 8025d34:	f340 80a6 	ble.w	8025e84 <_dtoa_r+0x45c>
 8025d38:	49ca      	ldr	r1, [pc, #808]	; (8026064 <_dtoa_r+0x63c>)
 8025d3a:	f00b 020f 	and.w	r2, fp, #15
 8025d3e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8025d42:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8025d46:	ed92 7b00 	vldr	d7, [r2]
 8025d4a:	ea4f 112b 	mov.w	r1, fp, asr #4
 8025d4e:	f000 808d 	beq.w	8025e6c <_dtoa_r+0x444>
 8025d52:	4ac5      	ldr	r2, [pc, #788]	; (8026068 <_dtoa_r+0x640>)
 8025d54:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8025d58:	ed92 6b08 	vldr	d6, [r2, #32]
 8025d5c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8025d60:	ed8d 6b02 	vstr	d6, [sp, #8]
 8025d64:	f001 010f 	and.w	r1, r1, #15
 8025d68:	2203      	movs	r2, #3
 8025d6a:	48bf      	ldr	r0, [pc, #764]	; (8026068 <_dtoa_r+0x640>)
 8025d6c:	2900      	cmp	r1, #0
 8025d6e:	d17f      	bne.n	8025e70 <_dtoa_r+0x448>
 8025d70:	ed9d 6b02 	vldr	d6, [sp, #8]
 8025d74:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8025d78:	ed8d 7b02 	vstr	d7, [sp, #8]
 8025d7c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8025d7e:	2900      	cmp	r1, #0
 8025d80:	f000 80b2 	beq.w	8025ee8 <_dtoa_r+0x4c0>
 8025d84:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8025d88:	ed9d 7b02 	vldr	d7, [sp, #8]
 8025d8c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8025d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025d94:	f140 80a8 	bpl.w	8025ee8 <_dtoa_r+0x4c0>
 8025d98:	f1b9 0f00 	cmp.w	r9, #0
 8025d9c:	f000 80a4 	beq.w	8025ee8 <_dtoa_r+0x4c0>
 8025da0:	f1ba 0f00 	cmp.w	sl, #0
 8025da4:	dd31      	ble.n	8025e0a <_dtoa_r+0x3e2>
 8025da6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8025daa:	ee27 7b06 	vmul.f64	d7, d7, d6
 8025dae:	ed8d 7b02 	vstr	d7, [sp, #8]
 8025db2:	f10b 37ff 	add.w	r7, fp, #4294967295
 8025db6:	3201      	adds	r2, #1
 8025db8:	4650      	mov	r0, sl
 8025dba:	ed9d 6b02 	vldr	d6, [sp, #8]
 8025dbe:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8025dc2:	ee07 2a90 	vmov	s15, r2
 8025dc6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8025dca:	eea7 5b06 	vfma.f64	d5, d7, d6
 8025dce:	ed8d 5b02 	vstr	d5, [sp, #8]
 8025dd2:	9c03      	ldr	r4, [sp, #12]
 8025dd4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8025dd8:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8025ddc:	2800      	cmp	r0, #0
 8025dde:	f040 8086 	bne.w	8025eee <_dtoa_r+0x4c6>
 8025de2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8025de6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8025dea:	ec42 1b17 	vmov	d7, r1, r2
 8025dee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8025df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025df6:	f300 8272 	bgt.w	80262de <_dtoa_r+0x8b6>
 8025dfa:	eeb1 7b47 	vneg.f64	d7, d7
 8025dfe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8025e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025e06:	f100 8267 	bmi.w	80262d8 <_dtoa_r+0x8b0>
 8025e0a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8025e0e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8025e12:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8025e14:	2a00      	cmp	r2, #0
 8025e16:	f2c0 8129 	blt.w	802606c <_dtoa_r+0x644>
 8025e1a:	f1bb 0f0e 	cmp.w	fp, #14
 8025e1e:	f300 8125 	bgt.w	802606c <_dtoa_r+0x644>
 8025e22:	4b90      	ldr	r3, [pc, #576]	; (8026064 <_dtoa_r+0x63c>)
 8025e24:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8025e28:	ed93 6b00 	vldr	d6, [r3]
 8025e2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025e2e:	2b00      	cmp	r3, #0
 8025e30:	f280 80c3 	bge.w	8025fba <_dtoa_r+0x592>
 8025e34:	f1b9 0f00 	cmp.w	r9, #0
 8025e38:	f300 80bf 	bgt.w	8025fba <_dtoa_r+0x592>
 8025e3c:	f040 824c 	bne.w	80262d8 <_dtoa_r+0x8b0>
 8025e40:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8025e44:	ee26 6b07 	vmul.f64	d6, d6, d7
 8025e48:	ed9d 7b02 	vldr	d7, [sp, #8]
 8025e4c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8025e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025e54:	464c      	mov	r4, r9
 8025e56:	464f      	mov	r7, r9
 8025e58:	f280 8222 	bge.w	80262a0 <_dtoa_r+0x878>
 8025e5c:	f8dd 8000 	ldr.w	r8, [sp]
 8025e60:	2331      	movs	r3, #49	; 0x31
 8025e62:	f808 3b01 	strb.w	r3, [r8], #1
 8025e66:	f10b 0b01 	add.w	fp, fp, #1
 8025e6a:	e21e      	b.n	80262aa <_dtoa_r+0x882>
 8025e6c:	2202      	movs	r2, #2
 8025e6e:	e77c      	b.n	8025d6a <_dtoa_r+0x342>
 8025e70:	07cc      	lsls	r4, r1, #31
 8025e72:	d504      	bpl.n	8025e7e <_dtoa_r+0x456>
 8025e74:	ed90 6b00 	vldr	d6, [r0]
 8025e78:	3201      	adds	r2, #1
 8025e7a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8025e7e:	1049      	asrs	r1, r1, #1
 8025e80:	3008      	adds	r0, #8
 8025e82:	e773      	b.n	8025d6c <_dtoa_r+0x344>
 8025e84:	d02e      	beq.n	8025ee4 <_dtoa_r+0x4bc>
 8025e86:	f1cb 0100 	rsb	r1, fp, #0
 8025e8a:	4a76      	ldr	r2, [pc, #472]	; (8026064 <_dtoa_r+0x63c>)
 8025e8c:	f001 000f 	and.w	r0, r1, #15
 8025e90:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8025e94:	ed92 7b00 	vldr	d7, [r2]
 8025e98:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8025e9c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8025ea0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8025ea4:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8025ea8:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8025eac:	486e      	ldr	r0, [pc, #440]	; (8026068 <_dtoa_r+0x640>)
 8025eae:	1109      	asrs	r1, r1, #4
 8025eb0:	2400      	movs	r4, #0
 8025eb2:	2202      	movs	r2, #2
 8025eb4:	b939      	cbnz	r1, 8025ec6 <_dtoa_r+0x49e>
 8025eb6:	2c00      	cmp	r4, #0
 8025eb8:	f43f af60 	beq.w	8025d7c <_dtoa_r+0x354>
 8025ebc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8025ec0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025ec4:	e75a      	b.n	8025d7c <_dtoa_r+0x354>
 8025ec6:	07cf      	lsls	r7, r1, #31
 8025ec8:	d509      	bpl.n	8025ede <_dtoa_r+0x4b6>
 8025eca:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8025ece:	ed90 7b00 	vldr	d7, [r0]
 8025ed2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8025ed6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8025eda:	3201      	adds	r2, #1
 8025edc:	2401      	movs	r4, #1
 8025ede:	1049      	asrs	r1, r1, #1
 8025ee0:	3008      	adds	r0, #8
 8025ee2:	e7e7      	b.n	8025eb4 <_dtoa_r+0x48c>
 8025ee4:	2202      	movs	r2, #2
 8025ee6:	e749      	b.n	8025d7c <_dtoa_r+0x354>
 8025ee8:	465f      	mov	r7, fp
 8025eea:	4648      	mov	r0, r9
 8025eec:	e765      	b.n	8025dba <_dtoa_r+0x392>
 8025eee:	ec42 1b17 	vmov	d7, r1, r2
 8025ef2:	4a5c      	ldr	r2, [pc, #368]	; (8026064 <_dtoa_r+0x63c>)
 8025ef4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8025ef8:	ed12 4b02 	vldr	d4, [r2, #-8]
 8025efc:	9a00      	ldr	r2, [sp, #0]
 8025efe:	1814      	adds	r4, r2, r0
 8025f00:	9a08      	ldr	r2, [sp, #32]
 8025f02:	b352      	cbz	r2, 8025f5a <_dtoa_r+0x532>
 8025f04:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8025f08:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8025f0c:	f8dd 8000 	ldr.w	r8, [sp]
 8025f10:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8025f14:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8025f18:	ee35 7b47 	vsub.f64	d7, d5, d7
 8025f1c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8025f20:	ee14 2a90 	vmov	r2, s9
 8025f24:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8025f28:	3230      	adds	r2, #48	; 0x30
 8025f2a:	ee36 6b45 	vsub.f64	d6, d6, d5
 8025f2e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8025f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025f36:	f808 2b01 	strb.w	r2, [r8], #1
 8025f3a:	d439      	bmi.n	8025fb0 <_dtoa_r+0x588>
 8025f3c:	ee32 5b46 	vsub.f64	d5, d2, d6
 8025f40:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8025f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025f48:	d472      	bmi.n	8026030 <_dtoa_r+0x608>
 8025f4a:	45a0      	cmp	r8, r4
 8025f4c:	f43f af5d 	beq.w	8025e0a <_dtoa_r+0x3e2>
 8025f50:	ee27 7b03 	vmul.f64	d7, d7, d3
 8025f54:	ee26 6b03 	vmul.f64	d6, d6, d3
 8025f58:	e7e0      	b.n	8025f1c <_dtoa_r+0x4f4>
 8025f5a:	f8dd 8000 	ldr.w	r8, [sp]
 8025f5e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8025f62:	4621      	mov	r1, r4
 8025f64:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8025f68:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8025f6c:	ee14 2a90 	vmov	r2, s9
 8025f70:	3230      	adds	r2, #48	; 0x30
 8025f72:	f808 2b01 	strb.w	r2, [r8], #1
 8025f76:	45a0      	cmp	r8, r4
 8025f78:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8025f7c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8025f80:	d118      	bne.n	8025fb4 <_dtoa_r+0x58c>
 8025f82:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8025f86:	ee37 4b05 	vadd.f64	d4, d7, d5
 8025f8a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8025f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025f92:	dc4d      	bgt.n	8026030 <_dtoa_r+0x608>
 8025f94:	ee35 7b47 	vsub.f64	d7, d5, d7
 8025f98:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8025f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025fa0:	f57f af33 	bpl.w	8025e0a <_dtoa_r+0x3e2>
 8025fa4:	4688      	mov	r8, r1
 8025fa6:	3901      	subs	r1, #1
 8025fa8:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8025fac:	2b30      	cmp	r3, #48	; 0x30
 8025fae:	d0f9      	beq.n	8025fa4 <_dtoa_r+0x57c>
 8025fb0:	46bb      	mov	fp, r7
 8025fb2:	e02a      	b.n	802600a <_dtoa_r+0x5e2>
 8025fb4:	ee26 6b03 	vmul.f64	d6, d6, d3
 8025fb8:	e7d6      	b.n	8025f68 <_dtoa_r+0x540>
 8025fba:	ed9d 7b02 	vldr	d7, [sp, #8]
 8025fbe:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8025fc2:	f8dd 8000 	ldr.w	r8, [sp]
 8025fc6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8025fca:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8025fce:	ee15 3a10 	vmov	r3, s10
 8025fd2:	3330      	adds	r3, #48	; 0x30
 8025fd4:	f808 3b01 	strb.w	r3, [r8], #1
 8025fd8:	9b00      	ldr	r3, [sp, #0]
 8025fda:	eba8 0303 	sub.w	r3, r8, r3
 8025fde:	4599      	cmp	r9, r3
 8025fe0:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8025fe4:	eea3 7b46 	vfms.f64	d7, d3, d6
 8025fe8:	d133      	bne.n	8026052 <_dtoa_r+0x62a>
 8025fea:	ee37 7b07 	vadd.f64	d7, d7, d7
 8025fee:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8025ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025ff6:	dc1a      	bgt.n	802602e <_dtoa_r+0x606>
 8025ff8:	eeb4 7b46 	vcmp.f64	d7, d6
 8025ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026000:	d103      	bne.n	802600a <_dtoa_r+0x5e2>
 8026002:	ee15 3a10 	vmov	r3, s10
 8026006:	07d9      	lsls	r1, r3, #31
 8026008:	d411      	bmi.n	802602e <_dtoa_r+0x606>
 802600a:	4629      	mov	r1, r5
 802600c:	4630      	mov	r0, r6
 802600e:	f000 fadd 	bl	80265cc <_Bfree>
 8026012:	2300      	movs	r3, #0
 8026014:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8026016:	f888 3000 	strb.w	r3, [r8]
 802601a:	f10b 0301 	add.w	r3, fp, #1
 802601e:	6013      	str	r3, [r2, #0]
 8026020:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8026022:	2b00      	cmp	r3, #0
 8026024:	f43f ad4d 	beq.w	8025ac2 <_dtoa_r+0x9a>
 8026028:	f8c3 8000 	str.w	r8, [r3]
 802602c:	e549      	b.n	8025ac2 <_dtoa_r+0x9a>
 802602e:	465f      	mov	r7, fp
 8026030:	4643      	mov	r3, r8
 8026032:	4698      	mov	r8, r3
 8026034:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8026038:	2a39      	cmp	r2, #57	; 0x39
 802603a:	d106      	bne.n	802604a <_dtoa_r+0x622>
 802603c:	9a00      	ldr	r2, [sp, #0]
 802603e:	429a      	cmp	r2, r3
 8026040:	d1f7      	bne.n	8026032 <_dtoa_r+0x60a>
 8026042:	9900      	ldr	r1, [sp, #0]
 8026044:	2230      	movs	r2, #48	; 0x30
 8026046:	3701      	adds	r7, #1
 8026048:	700a      	strb	r2, [r1, #0]
 802604a:	781a      	ldrb	r2, [r3, #0]
 802604c:	3201      	adds	r2, #1
 802604e:	701a      	strb	r2, [r3, #0]
 8026050:	e7ae      	b.n	8025fb0 <_dtoa_r+0x588>
 8026052:	ee27 7b04 	vmul.f64	d7, d7, d4
 8026056:	eeb5 7b40 	vcmp.f64	d7, #0.0
 802605a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802605e:	d1b2      	bne.n	8025fc6 <_dtoa_r+0x59e>
 8026060:	e7d3      	b.n	802600a <_dtoa_r+0x5e2>
 8026062:	bf00      	nop
 8026064:	0809af98 	.word	0x0809af98
 8026068:	0809af70 	.word	0x0809af70
 802606c:	9908      	ldr	r1, [sp, #32]
 802606e:	2900      	cmp	r1, #0
 8026070:	f000 80d1 	beq.w	8026216 <_dtoa_r+0x7ee>
 8026074:	9907      	ldr	r1, [sp, #28]
 8026076:	2901      	cmp	r1, #1
 8026078:	f300 80b4 	bgt.w	80261e4 <_dtoa_r+0x7bc>
 802607c:	9911      	ldr	r1, [sp, #68]	; 0x44
 802607e:	2900      	cmp	r1, #0
 8026080:	f000 80ac 	beq.w	80261dc <_dtoa_r+0x7b4>
 8026084:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8026088:	f8dd 8014 	ldr.w	r8, [sp, #20]
 802608c:	461c      	mov	r4, r3
 802608e:	930a      	str	r3, [sp, #40]	; 0x28
 8026090:	9b05      	ldr	r3, [sp, #20]
 8026092:	4413      	add	r3, r2
 8026094:	9305      	str	r3, [sp, #20]
 8026096:	9b06      	ldr	r3, [sp, #24]
 8026098:	2101      	movs	r1, #1
 802609a:	4413      	add	r3, r2
 802609c:	4630      	mov	r0, r6
 802609e:	9306      	str	r3, [sp, #24]
 80260a0:	f000 fb50 	bl	8026744 <__i2b>
 80260a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80260a6:	4607      	mov	r7, r0
 80260a8:	f1b8 0f00 	cmp.w	r8, #0
 80260ac:	dd0d      	ble.n	80260ca <_dtoa_r+0x6a2>
 80260ae:	9a06      	ldr	r2, [sp, #24]
 80260b0:	2a00      	cmp	r2, #0
 80260b2:	dd0a      	ble.n	80260ca <_dtoa_r+0x6a2>
 80260b4:	4542      	cmp	r2, r8
 80260b6:	9905      	ldr	r1, [sp, #20]
 80260b8:	bfa8      	it	ge
 80260ba:	4642      	movge	r2, r8
 80260bc:	1a89      	subs	r1, r1, r2
 80260be:	9105      	str	r1, [sp, #20]
 80260c0:	9906      	ldr	r1, [sp, #24]
 80260c2:	eba8 0802 	sub.w	r8, r8, r2
 80260c6:	1a8a      	subs	r2, r1, r2
 80260c8:	9206      	str	r2, [sp, #24]
 80260ca:	b303      	cbz	r3, 802610e <_dtoa_r+0x6e6>
 80260cc:	9a08      	ldr	r2, [sp, #32]
 80260ce:	2a00      	cmp	r2, #0
 80260d0:	f000 80a6 	beq.w	8026220 <_dtoa_r+0x7f8>
 80260d4:	2c00      	cmp	r4, #0
 80260d6:	dd13      	ble.n	8026100 <_dtoa_r+0x6d8>
 80260d8:	4639      	mov	r1, r7
 80260da:	4622      	mov	r2, r4
 80260dc:	4630      	mov	r0, r6
 80260de:	930c      	str	r3, [sp, #48]	; 0x30
 80260e0:	f000 fbec 	bl	80268bc <__pow5mult>
 80260e4:	462a      	mov	r2, r5
 80260e6:	4601      	mov	r1, r0
 80260e8:	4607      	mov	r7, r0
 80260ea:	4630      	mov	r0, r6
 80260ec:	f000 fb40 	bl	8026770 <__multiply>
 80260f0:	4629      	mov	r1, r5
 80260f2:	900a      	str	r0, [sp, #40]	; 0x28
 80260f4:	4630      	mov	r0, r6
 80260f6:	f000 fa69 	bl	80265cc <_Bfree>
 80260fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80260fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80260fe:	4615      	mov	r5, r2
 8026100:	1b1a      	subs	r2, r3, r4
 8026102:	d004      	beq.n	802610e <_dtoa_r+0x6e6>
 8026104:	4629      	mov	r1, r5
 8026106:	4630      	mov	r0, r6
 8026108:	f000 fbd8 	bl	80268bc <__pow5mult>
 802610c:	4605      	mov	r5, r0
 802610e:	2101      	movs	r1, #1
 8026110:	4630      	mov	r0, r6
 8026112:	f000 fb17 	bl	8026744 <__i2b>
 8026116:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8026118:	2b00      	cmp	r3, #0
 802611a:	4604      	mov	r4, r0
 802611c:	f340 8082 	ble.w	8026224 <_dtoa_r+0x7fc>
 8026120:	461a      	mov	r2, r3
 8026122:	4601      	mov	r1, r0
 8026124:	4630      	mov	r0, r6
 8026126:	f000 fbc9 	bl	80268bc <__pow5mult>
 802612a:	9b07      	ldr	r3, [sp, #28]
 802612c:	2b01      	cmp	r3, #1
 802612e:	4604      	mov	r4, r0
 8026130:	dd7b      	ble.n	802622a <_dtoa_r+0x802>
 8026132:	2300      	movs	r3, #0
 8026134:	930a      	str	r3, [sp, #40]	; 0x28
 8026136:	6922      	ldr	r2, [r4, #16]
 8026138:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 802613c:	6910      	ldr	r0, [r2, #16]
 802613e:	f000 fab1 	bl	80266a4 <__hi0bits>
 8026142:	f1c0 0020 	rsb	r0, r0, #32
 8026146:	9b06      	ldr	r3, [sp, #24]
 8026148:	4418      	add	r0, r3
 802614a:	f010 001f 	ands.w	r0, r0, #31
 802614e:	f000 808d 	beq.w	802626c <_dtoa_r+0x844>
 8026152:	f1c0 0220 	rsb	r2, r0, #32
 8026156:	2a04      	cmp	r2, #4
 8026158:	f340 8086 	ble.w	8026268 <_dtoa_r+0x840>
 802615c:	f1c0 001c 	rsb	r0, r0, #28
 8026160:	9b05      	ldr	r3, [sp, #20]
 8026162:	4403      	add	r3, r0
 8026164:	9305      	str	r3, [sp, #20]
 8026166:	9b06      	ldr	r3, [sp, #24]
 8026168:	4403      	add	r3, r0
 802616a:	4480      	add	r8, r0
 802616c:	9306      	str	r3, [sp, #24]
 802616e:	9b05      	ldr	r3, [sp, #20]
 8026170:	2b00      	cmp	r3, #0
 8026172:	dd05      	ble.n	8026180 <_dtoa_r+0x758>
 8026174:	4629      	mov	r1, r5
 8026176:	461a      	mov	r2, r3
 8026178:	4630      	mov	r0, r6
 802617a:	f000 fbf9 	bl	8026970 <__lshift>
 802617e:	4605      	mov	r5, r0
 8026180:	9b06      	ldr	r3, [sp, #24]
 8026182:	2b00      	cmp	r3, #0
 8026184:	dd05      	ble.n	8026192 <_dtoa_r+0x76a>
 8026186:	4621      	mov	r1, r4
 8026188:	461a      	mov	r2, r3
 802618a:	4630      	mov	r0, r6
 802618c:	f000 fbf0 	bl	8026970 <__lshift>
 8026190:	4604      	mov	r4, r0
 8026192:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8026194:	2b00      	cmp	r3, #0
 8026196:	d06b      	beq.n	8026270 <_dtoa_r+0x848>
 8026198:	4621      	mov	r1, r4
 802619a:	4628      	mov	r0, r5
 802619c:	f000 fc54 	bl	8026a48 <__mcmp>
 80261a0:	2800      	cmp	r0, #0
 80261a2:	da65      	bge.n	8026270 <_dtoa_r+0x848>
 80261a4:	2300      	movs	r3, #0
 80261a6:	4629      	mov	r1, r5
 80261a8:	220a      	movs	r2, #10
 80261aa:	4630      	mov	r0, r6
 80261ac:	f000 fa30 	bl	8026610 <__multadd>
 80261b0:	9b08      	ldr	r3, [sp, #32]
 80261b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80261b6:	4605      	mov	r5, r0
 80261b8:	2b00      	cmp	r3, #0
 80261ba:	f000 8192 	beq.w	80264e2 <_dtoa_r+0xaba>
 80261be:	4639      	mov	r1, r7
 80261c0:	2300      	movs	r3, #0
 80261c2:	220a      	movs	r2, #10
 80261c4:	4630      	mov	r0, r6
 80261c6:	f000 fa23 	bl	8026610 <__multadd>
 80261ca:	f1ba 0f00 	cmp.w	sl, #0
 80261ce:	4607      	mov	r7, r0
 80261d0:	f300 808e 	bgt.w	80262f0 <_dtoa_r+0x8c8>
 80261d4:	9b07      	ldr	r3, [sp, #28]
 80261d6:	2b02      	cmp	r3, #2
 80261d8:	dc51      	bgt.n	802627e <_dtoa_r+0x856>
 80261da:	e089      	b.n	80262f0 <_dtoa_r+0x8c8>
 80261dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80261de:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80261e2:	e751      	b.n	8026088 <_dtoa_r+0x660>
 80261e4:	f109 34ff 	add.w	r4, r9, #4294967295
 80261e8:	42a3      	cmp	r3, r4
 80261ea:	bfbf      	itttt	lt
 80261ec:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80261ee:	1ae3      	sublt	r3, r4, r3
 80261f0:	18d2      	addlt	r2, r2, r3
 80261f2:	4613      	movlt	r3, r2
 80261f4:	bfb7      	itett	lt
 80261f6:	930e      	strlt	r3, [sp, #56]	; 0x38
 80261f8:	1b1c      	subge	r4, r3, r4
 80261fa:	4623      	movlt	r3, r4
 80261fc:	2400      	movlt	r4, #0
 80261fe:	f1b9 0f00 	cmp.w	r9, #0
 8026202:	bfb5      	itete	lt
 8026204:	9a05      	ldrlt	r2, [sp, #20]
 8026206:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 802620a:	eba2 0809 	sublt.w	r8, r2, r9
 802620e:	464a      	movge	r2, r9
 8026210:	bfb8      	it	lt
 8026212:	2200      	movlt	r2, #0
 8026214:	e73b      	b.n	802608e <_dtoa_r+0x666>
 8026216:	f8dd 8014 	ldr.w	r8, [sp, #20]
 802621a:	9f08      	ldr	r7, [sp, #32]
 802621c:	461c      	mov	r4, r3
 802621e:	e743      	b.n	80260a8 <_dtoa_r+0x680>
 8026220:	461a      	mov	r2, r3
 8026222:	e76f      	b.n	8026104 <_dtoa_r+0x6dc>
 8026224:	9b07      	ldr	r3, [sp, #28]
 8026226:	2b01      	cmp	r3, #1
 8026228:	dc18      	bgt.n	802625c <_dtoa_r+0x834>
 802622a:	9b02      	ldr	r3, [sp, #8]
 802622c:	b9b3      	cbnz	r3, 802625c <_dtoa_r+0x834>
 802622e:	9b03      	ldr	r3, [sp, #12]
 8026230:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8026234:	b9a2      	cbnz	r2, 8026260 <_dtoa_r+0x838>
 8026236:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 802623a:	0d12      	lsrs	r2, r2, #20
 802623c:	0512      	lsls	r2, r2, #20
 802623e:	b18a      	cbz	r2, 8026264 <_dtoa_r+0x83c>
 8026240:	9b05      	ldr	r3, [sp, #20]
 8026242:	3301      	adds	r3, #1
 8026244:	9305      	str	r3, [sp, #20]
 8026246:	9b06      	ldr	r3, [sp, #24]
 8026248:	3301      	adds	r3, #1
 802624a:	9306      	str	r3, [sp, #24]
 802624c:	2301      	movs	r3, #1
 802624e:	930a      	str	r3, [sp, #40]	; 0x28
 8026250:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8026252:	2b00      	cmp	r3, #0
 8026254:	f47f af6f 	bne.w	8026136 <_dtoa_r+0x70e>
 8026258:	2001      	movs	r0, #1
 802625a:	e774      	b.n	8026146 <_dtoa_r+0x71e>
 802625c:	2300      	movs	r3, #0
 802625e:	e7f6      	b.n	802624e <_dtoa_r+0x826>
 8026260:	9b02      	ldr	r3, [sp, #8]
 8026262:	e7f4      	b.n	802624e <_dtoa_r+0x826>
 8026264:	920a      	str	r2, [sp, #40]	; 0x28
 8026266:	e7f3      	b.n	8026250 <_dtoa_r+0x828>
 8026268:	d081      	beq.n	802616e <_dtoa_r+0x746>
 802626a:	4610      	mov	r0, r2
 802626c:	301c      	adds	r0, #28
 802626e:	e777      	b.n	8026160 <_dtoa_r+0x738>
 8026270:	f1b9 0f00 	cmp.w	r9, #0
 8026274:	dc37      	bgt.n	80262e6 <_dtoa_r+0x8be>
 8026276:	9b07      	ldr	r3, [sp, #28]
 8026278:	2b02      	cmp	r3, #2
 802627a:	dd34      	ble.n	80262e6 <_dtoa_r+0x8be>
 802627c:	46ca      	mov	sl, r9
 802627e:	f1ba 0f00 	cmp.w	sl, #0
 8026282:	d10d      	bne.n	80262a0 <_dtoa_r+0x878>
 8026284:	4621      	mov	r1, r4
 8026286:	4653      	mov	r3, sl
 8026288:	2205      	movs	r2, #5
 802628a:	4630      	mov	r0, r6
 802628c:	f000 f9c0 	bl	8026610 <__multadd>
 8026290:	4601      	mov	r1, r0
 8026292:	4604      	mov	r4, r0
 8026294:	4628      	mov	r0, r5
 8026296:	f000 fbd7 	bl	8026a48 <__mcmp>
 802629a:	2800      	cmp	r0, #0
 802629c:	f73f adde 	bgt.w	8025e5c <_dtoa_r+0x434>
 80262a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80262a2:	f8dd 8000 	ldr.w	r8, [sp]
 80262a6:	ea6f 0b03 	mvn.w	fp, r3
 80262aa:	f04f 0900 	mov.w	r9, #0
 80262ae:	4621      	mov	r1, r4
 80262b0:	4630      	mov	r0, r6
 80262b2:	f000 f98b 	bl	80265cc <_Bfree>
 80262b6:	2f00      	cmp	r7, #0
 80262b8:	f43f aea7 	beq.w	802600a <_dtoa_r+0x5e2>
 80262bc:	f1b9 0f00 	cmp.w	r9, #0
 80262c0:	d005      	beq.n	80262ce <_dtoa_r+0x8a6>
 80262c2:	45b9      	cmp	r9, r7
 80262c4:	d003      	beq.n	80262ce <_dtoa_r+0x8a6>
 80262c6:	4649      	mov	r1, r9
 80262c8:	4630      	mov	r0, r6
 80262ca:	f000 f97f 	bl	80265cc <_Bfree>
 80262ce:	4639      	mov	r1, r7
 80262d0:	4630      	mov	r0, r6
 80262d2:	f000 f97b 	bl	80265cc <_Bfree>
 80262d6:	e698      	b.n	802600a <_dtoa_r+0x5e2>
 80262d8:	2400      	movs	r4, #0
 80262da:	4627      	mov	r7, r4
 80262dc:	e7e0      	b.n	80262a0 <_dtoa_r+0x878>
 80262de:	46bb      	mov	fp, r7
 80262e0:	4604      	mov	r4, r0
 80262e2:	4607      	mov	r7, r0
 80262e4:	e5ba      	b.n	8025e5c <_dtoa_r+0x434>
 80262e6:	9b08      	ldr	r3, [sp, #32]
 80262e8:	46ca      	mov	sl, r9
 80262ea:	2b00      	cmp	r3, #0
 80262ec:	f000 8100 	beq.w	80264f0 <_dtoa_r+0xac8>
 80262f0:	f1b8 0f00 	cmp.w	r8, #0
 80262f4:	dd05      	ble.n	8026302 <_dtoa_r+0x8da>
 80262f6:	4639      	mov	r1, r7
 80262f8:	4642      	mov	r2, r8
 80262fa:	4630      	mov	r0, r6
 80262fc:	f000 fb38 	bl	8026970 <__lshift>
 8026300:	4607      	mov	r7, r0
 8026302:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026304:	2b00      	cmp	r3, #0
 8026306:	d05d      	beq.n	80263c4 <_dtoa_r+0x99c>
 8026308:	6879      	ldr	r1, [r7, #4]
 802630a:	4630      	mov	r0, r6
 802630c:	f000 f91e 	bl	802654c <_Balloc>
 8026310:	4680      	mov	r8, r0
 8026312:	b928      	cbnz	r0, 8026320 <_dtoa_r+0x8f8>
 8026314:	4b82      	ldr	r3, [pc, #520]	; (8026520 <_dtoa_r+0xaf8>)
 8026316:	4602      	mov	r2, r0
 8026318:	f240 21ea 	movw	r1, #746	; 0x2ea
 802631c:	f7ff bb9a 	b.w	8025a54 <_dtoa_r+0x2c>
 8026320:	693a      	ldr	r2, [r7, #16]
 8026322:	3202      	adds	r2, #2
 8026324:	0092      	lsls	r2, r2, #2
 8026326:	f107 010c 	add.w	r1, r7, #12
 802632a:	300c      	adds	r0, #12
 802632c:	f7fe fd5e 	bl	8024dec <memcpy>
 8026330:	2201      	movs	r2, #1
 8026332:	4641      	mov	r1, r8
 8026334:	4630      	mov	r0, r6
 8026336:	f000 fb1b 	bl	8026970 <__lshift>
 802633a:	9b00      	ldr	r3, [sp, #0]
 802633c:	3301      	adds	r3, #1
 802633e:	9305      	str	r3, [sp, #20]
 8026340:	9b00      	ldr	r3, [sp, #0]
 8026342:	4453      	add	r3, sl
 8026344:	9309      	str	r3, [sp, #36]	; 0x24
 8026346:	9b02      	ldr	r3, [sp, #8]
 8026348:	f003 0301 	and.w	r3, r3, #1
 802634c:	46b9      	mov	r9, r7
 802634e:	9308      	str	r3, [sp, #32]
 8026350:	4607      	mov	r7, r0
 8026352:	9b05      	ldr	r3, [sp, #20]
 8026354:	4621      	mov	r1, r4
 8026356:	3b01      	subs	r3, #1
 8026358:	4628      	mov	r0, r5
 802635a:	9302      	str	r3, [sp, #8]
 802635c:	f7ff fad7 	bl	802590e <quorem>
 8026360:	4603      	mov	r3, r0
 8026362:	3330      	adds	r3, #48	; 0x30
 8026364:	9006      	str	r0, [sp, #24]
 8026366:	4649      	mov	r1, r9
 8026368:	4628      	mov	r0, r5
 802636a:	930a      	str	r3, [sp, #40]	; 0x28
 802636c:	f000 fb6c 	bl	8026a48 <__mcmp>
 8026370:	463a      	mov	r2, r7
 8026372:	4682      	mov	sl, r0
 8026374:	4621      	mov	r1, r4
 8026376:	4630      	mov	r0, r6
 8026378:	f000 fb82 	bl	8026a80 <__mdiff>
 802637c:	68c2      	ldr	r2, [r0, #12]
 802637e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026380:	4680      	mov	r8, r0
 8026382:	bb0a      	cbnz	r2, 80263c8 <_dtoa_r+0x9a0>
 8026384:	4601      	mov	r1, r0
 8026386:	4628      	mov	r0, r5
 8026388:	f000 fb5e 	bl	8026a48 <__mcmp>
 802638c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802638e:	4602      	mov	r2, r0
 8026390:	4641      	mov	r1, r8
 8026392:	4630      	mov	r0, r6
 8026394:	920e      	str	r2, [sp, #56]	; 0x38
 8026396:	930a      	str	r3, [sp, #40]	; 0x28
 8026398:	f000 f918 	bl	80265cc <_Bfree>
 802639c:	9b07      	ldr	r3, [sp, #28]
 802639e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80263a0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80263a4:	ea43 0102 	orr.w	r1, r3, r2
 80263a8:	9b08      	ldr	r3, [sp, #32]
 80263aa:	430b      	orrs	r3, r1
 80263ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80263ae:	d10d      	bne.n	80263cc <_dtoa_r+0x9a4>
 80263b0:	2b39      	cmp	r3, #57	; 0x39
 80263b2:	d029      	beq.n	8026408 <_dtoa_r+0x9e0>
 80263b4:	f1ba 0f00 	cmp.w	sl, #0
 80263b8:	dd01      	ble.n	80263be <_dtoa_r+0x996>
 80263ba:	9b06      	ldr	r3, [sp, #24]
 80263bc:	3331      	adds	r3, #49	; 0x31
 80263be:	9a02      	ldr	r2, [sp, #8]
 80263c0:	7013      	strb	r3, [r2, #0]
 80263c2:	e774      	b.n	80262ae <_dtoa_r+0x886>
 80263c4:	4638      	mov	r0, r7
 80263c6:	e7b8      	b.n	802633a <_dtoa_r+0x912>
 80263c8:	2201      	movs	r2, #1
 80263ca:	e7e1      	b.n	8026390 <_dtoa_r+0x968>
 80263cc:	f1ba 0f00 	cmp.w	sl, #0
 80263d0:	db06      	blt.n	80263e0 <_dtoa_r+0x9b8>
 80263d2:	9907      	ldr	r1, [sp, #28]
 80263d4:	ea41 0a0a 	orr.w	sl, r1, sl
 80263d8:	9908      	ldr	r1, [sp, #32]
 80263da:	ea5a 0101 	orrs.w	r1, sl, r1
 80263de:	d120      	bne.n	8026422 <_dtoa_r+0x9fa>
 80263e0:	2a00      	cmp	r2, #0
 80263e2:	ddec      	ble.n	80263be <_dtoa_r+0x996>
 80263e4:	4629      	mov	r1, r5
 80263e6:	2201      	movs	r2, #1
 80263e8:	4630      	mov	r0, r6
 80263ea:	9305      	str	r3, [sp, #20]
 80263ec:	f000 fac0 	bl	8026970 <__lshift>
 80263f0:	4621      	mov	r1, r4
 80263f2:	4605      	mov	r5, r0
 80263f4:	f000 fb28 	bl	8026a48 <__mcmp>
 80263f8:	2800      	cmp	r0, #0
 80263fa:	9b05      	ldr	r3, [sp, #20]
 80263fc:	dc02      	bgt.n	8026404 <_dtoa_r+0x9dc>
 80263fe:	d1de      	bne.n	80263be <_dtoa_r+0x996>
 8026400:	07da      	lsls	r2, r3, #31
 8026402:	d5dc      	bpl.n	80263be <_dtoa_r+0x996>
 8026404:	2b39      	cmp	r3, #57	; 0x39
 8026406:	d1d8      	bne.n	80263ba <_dtoa_r+0x992>
 8026408:	9a02      	ldr	r2, [sp, #8]
 802640a:	2339      	movs	r3, #57	; 0x39
 802640c:	7013      	strb	r3, [r2, #0]
 802640e:	4643      	mov	r3, r8
 8026410:	4698      	mov	r8, r3
 8026412:	3b01      	subs	r3, #1
 8026414:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8026418:	2a39      	cmp	r2, #57	; 0x39
 802641a:	d051      	beq.n	80264c0 <_dtoa_r+0xa98>
 802641c:	3201      	adds	r2, #1
 802641e:	701a      	strb	r2, [r3, #0]
 8026420:	e745      	b.n	80262ae <_dtoa_r+0x886>
 8026422:	2a00      	cmp	r2, #0
 8026424:	dd03      	ble.n	802642e <_dtoa_r+0xa06>
 8026426:	2b39      	cmp	r3, #57	; 0x39
 8026428:	d0ee      	beq.n	8026408 <_dtoa_r+0x9e0>
 802642a:	3301      	adds	r3, #1
 802642c:	e7c7      	b.n	80263be <_dtoa_r+0x996>
 802642e:	9a05      	ldr	r2, [sp, #20]
 8026430:	9909      	ldr	r1, [sp, #36]	; 0x24
 8026432:	f802 3c01 	strb.w	r3, [r2, #-1]
 8026436:	428a      	cmp	r2, r1
 8026438:	d02b      	beq.n	8026492 <_dtoa_r+0xa6a>
 802643a:	4629      	mov	r1, r5
 802643c:	2300      	movs	r3, #0
 802643e:	220a      	movs	r2, #10
 8026440:	4630      	mov	r0, r6
 8026442:	f000 f8e5 	bl	8026610 <__multadd>
 8026446:	45b9      	cmp	r9, r7
 8026448:	4605      	mov	r5, r0
 802644a:	f04f 0300 	mov.w	r3, #0
 802644e:	f04f 020a 	mov.w	r2, #10
 8026452:	4649      	mov	r1, r9
 8026454:	4630      	mov	r0, r6
 8026456:	d107      	bne.n	8026468 <_dtoa_r+0xa40>
 8026458:	f000 f8da 	bl	8026610 <__multadd>
 802645c:	4681      	mov	r9, r0
 802645e:	4607      	mov	r7, r0
 8026460:	9b05      	ldr	r3, [sp, #20]
 8026462:	3301      	adds	r3, #1
 8026464:	9305      	str	r3, [sp, #20]
 8026466:	e774      	b.n	8026352 <_dtoa_r+0x92a>
 8026468:	f000 f8d2 	bl	8026610 <__multadd>
 802646c:	4639      	mov	r1, r7
 802646e:	4681      	mov	r9, r0
 8026470:	2300      	movs	r3, #0
 8026472:	220a      	movs	r2, #10
 8026474:	4630      	mov	r0, r6
 8026476:	f000 f8cb 	bl	8026610 <__multadd>
 802647a:	4607      	mov	r7, r0
 802647c:	e7f0      	b.n	8026460 <_dtoa_r+0xa38>
 802647e:	f1ba 0f00 	cmp.w	sl, #0
 8026482:	9a00      	ldr	r2, [sp, #0]
 8026484:	bfcc      	ite	gt
 8026486:	46d0      	movgt	r8, sl
 8026488:	f04f 0801 	movle.w	r8, #1
 802648c:	4490      	add	r8, r2
 802648e:	f04f 0900 	mov.w	r9, #0
 8026492:	4629      	mov	r1, r5
 8026494:	2201      	movs	r2, #1
 8026496:	4630      	mov	r0, r6
 8026498:	9302      	str	r3, [sp, #8]
 802649a:	f000 fa69 	bl	8026970 <__lshift>
 802649e:	4621      	mov	r1, r4
 80264a0:	4605      	mov	r5, r0
 80264a2:	f000 fad1 	bl	8026a48 <__mcmp>
 80264a6:	2800      	cmp	r0, #0
 80264a8:	dcb1      	bgt.n	802640e <_dtoa_r+0x9e6>
 80264aa:	d102      	bne.n	80264b2 <_dtoa_r+0xa8a>
 80264ac:	9b02      	ldr	r3, [sp, #8]
 80264ae:	07db      	lsls	r3, r3, #31
 80264b0:	d4ad      	bmi.n	802640e <_dtoa_r+0x9e6>
 80264b2:	4643      	mov	r3, r8
 80264b4:	4698      	mov	r8, r3
 80264b6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80264ba:	2a30      	cmp	r2, #48	; 0x30
 80264bc:	d0fa      	beq.n	80264b4 <_dtoa_r+0xa8c>
 80264be:	e6f6      	b.n	80262ae <_dtoa_r+0x886>
 80264c0:	9a00      	ldr	r2, [sp, #0]
 80264c2:	429a      	cmp	r2, r3
 80264c4:	d1a4      	bne.n	8026410 <_dtoa_r+0x9e8>
 80264c6:	f10b 0b01 	add.w	fp, fp, #1
 80264ca:	2331      	movs	r3, #49	; 0x31
 80264cc:	e778      	b.n	80263c0 <_dtoa_r+0x998>
 80264ce:	4b15      	ldr	r3, [pc, #84]	; (8026524 <_dtoa_r+0xafc>)
 80264d0:	f7ff bb12 	b.w	8025af8 <_dtoa_r+0xd0>
 80264d4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80264d6:	2b00      	cmp	r3, #0
 80264d8:	f47f aaee 	bne.w	8025ab8 <_dtoa_r+0x90>
 80264dc:	4b12      	ldr	r3, [pc, #72]	; (8026528 <_dtoa_r+0xb00>)
 80264de:	f7ff bb0b 	b.w	8025af8 <_dtoa_r+0xd0>
 80264e2:	f1ba 0f00 	cmp.w	sl, #0
 80264e6:	dc03      	bgt.n	80264f0 <_dtoa_r+0xac8>
 80264e8:	9b07      	ldr	r3, [sp, #28]
 80264ea:	2b02      	cmp	r3, #2
 80264ec:	f73f aec7 	bgt.w	802627e <_dtoa_r+0x856>
 80264f0:	f8dd 8000 	ldr.w	r8, [sp]
 80264f4:	4621      	mov	r1, r4
 80264f6:	4628      	mov	r0, r5
 80264f8:	f7ff fa09 	bl	802590e <quorem>
 80264fc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8026500:	f808 3b01 	strb.w	r3, [r8], #1
 8026504:	9a00      	ldr	r2, [sp, #0]
 8026506:	eba8 0202 	sub.w	r2, r8, r2
 802650a:	4592      	cmp	sl, r2
 802650c:	ddb7      	ble.n	802647e <_dtoa_r+0xa56>
 802650e:	4629      	mov	r1, r5
 8026510:	2300      	movs	r3, #0
 8026512:	220a      	movs	r2, #10
 8026514:	4630      	mov	r0, r6
 8026516:	f000 f87b 	bl	8026610 <__multadd>
 802651a:	4605      	mov	r5, r0
 802651c:	e7ea      	b.n	80264f4 <_dtoa_r+0xacc>
 802651e:	bf00      	nop
 8026520:	0809aeff 	.word	0x0809aeff
 8026524:	0809ae58 	.word	0x0809ae58
 8026528:	0809ae7c 	.word	0x0809ae7c

0802652c <_localeconv_r>:
 802652c:	4800      	ldr	r0, [pc, #0]	; (8026530 <_localeconv_r+0x4>)
 802652e:	4770      	bx	lr
 8026530:	2000786c 	.word	0x2000786c

08026534 <__malloc_lock>:
 8026534:	4801      	ldr	r0, [pc, #4]	; (802653c <__malloc_lock+0x8>)
 8026536:	f000 bd48 	b.w	8026fca <__retarget_lock_acquire_recursive>
 802653a:	bf00      	nop
 802653c:	2000a2c0 	.word	0x2000a2c0

08026540 <__malloc_unlock>:
 8026540:	4801      	ldr	r0, [pc, #4]	; (8026548 <__malloc_unlock+0x8>)
 8026542:	f000 bd43 	b.w	8026fcc <__retarget_lock_release_recursive>
 8026546:	bf00      	nop
 8026548:	2000a2c0 	.word	0x2000a2c0

0802654c <_Balloc>:
 802654c:	b570      	push	{r4, r5, r6, lr}
 802654e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8026550:	4604      	mov	r4, r0
 8026552:	460d      	mov	r5, r1
 8026554:	b976      	cbnz	r6, 8026574 <_Balloc+0x28>
 8026556:	2010      	movs	r0, #16
 8026558:	f7fe fc38 	bl	8024dcc <malloc>
 802655c:	4602      	mov	r2, r0
 802655e:	6260      	str	r0, [r4, #36]	; 0x24
 8026560:	b920      	cbnz	r0, 802656c <_Balloc+0x20>
 8026562:	4b18      	ldr	r3, [pc, #96]	; (80265c4 <_Balloc+0x78>)
 8026564:	4818      	ldr	r0, [pc, #96]	; (80265c8 <_Balloc+0x7c>)
 8026566:	2166      	movs	r1, #102	; 0x66
 8026568:	f000 fcfe 	bl	8026f68 <__assert_func>
 802656c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8026570:	6006      	str	r6, [r0, #0]
 8026572:	60c6      	str	r6, [r0, #12]
 8026574:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8026576:	68f3      	ldr	r3, [r6, #12]
 8026578:	b183      	cbz	r3, 802659c <_Balloc+0x50>
 802657a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802657c:	68db      	ldr	r3, [r3, #12]
 802657e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8026582:	b9b8      	cbnz	r0, 80265b4 <_Balloc+0x68>
 8026584:	2101      	movs	r1, #1
 8026586:	fa01 f605 	lsl.w	r6, r1, r5
 802658a:	1d72      	adds	r2, r6, #5
 802658c:	0092      	lsls	r2, r2, #2
 802658e:	4620      	mov	r0, r4
 8026590:	f000 fb5a 	bl	8026c48 <_calloc_r>
 8026594:	b160      	cbz	r0, 80265b0 <_Balloc+0x64>
 8026596:	e9c0 5601 	strd	r5, r6, [r0, #4]
 802659a:	e00e      	b.n	80265ba <_Balloc+0x6e>
 802659c:	2221      	movs	r2, #33	; 0x21
 802659e:	2104      	movs	r1, #4
 80265a0:	4620      	mov	r0, r4
 80265a2:	f000 fb51 	bl	8026c48 <_calloc_r>
 80265a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80265a8:	60f0      	str	r0, [r6, #12]
 80265aa:	68db      	ldr	r3, [r3, #12]
 80265ac:	2b00      	cmp	r3, #0
 80265ae:	d1e4      	bne.n	802657a <_Balloc+0x2e>
 80265b0:	2000      	movs	r0, #0
 80265b2:	bd70      	pop	{r4, r5, r6, pc}
 80265b4:	6802      	ldr	r2, [r0, #0]
 80265b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80265ba:	2300      	movs	r3, #0
 80265bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80265c0:	e7f7      	b.n	80265b2 <_Balloc+0x66>
 80265c2:	bf00      	nop
 80265c4:	0809ae89 	.word	0x0809ae89
 80265c8:	0809af10 	.word	0x0809af10

080265cc <_Bfree>:
 80265cc:	b570      	push	{r4, r5, r6, lr}
 80265ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80265d0:	4605      	mov	r5, r0
 80265d2:	460c      	mov	r4, r1
 80265d4:	b976      	cbnz	r6, 80265f4 <_Bfree+0x28>
 80265d6:	2010      	movs	r0, #16
 80265d8:	f7fe fbf8 	bl	8024dcc <malloc>
 80265dc:	4602      	mov	r2, r0
 80265de:	6268      	str	r0, [r5, #36]	; 0x24
 80265e0:	b920      	cbnz	r0, 80265ec <_Bfree+0x20>
 80265e2:	4b09      	ldr	r3, [pc, #36]	; (8026608 <_Bfree+0x3c>)
 80265e4:	4809      	ldr	r0, [pc, #36]	; (802660c <_Bfree+0x40>)
 80265e6:	218a      	movs	r1, #138	; 0x8a
 80265e8:	f000 fcbe 	bl	8026f68 <__assert_func>
 80265ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80265f0:	6006      	str	r6, [r0, #0]
 80265f2:	60c6      	str	r6, [r0, #12]
 80265f4:	b13c      	cbz	r4, 8026606 <_Bfree+0x3a>
 80265f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80265f8:	6862      	ldr	r2, [r4, #4]
 80265fa:	68db      	ldr	r3, [r3, #12]
 80265fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8026600:	6021      	str	r1, [r4, #0]
 8026602:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8026606:	bd70      	pop	{r4, r5, r6, pc}
 8026608:	0809ae89 	.word	0x0809ae89
 802660c:	0809af10 	.word	0x0809af10

08026610 <__multadd>:
 8026610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026614:	690e      	ldr	r6, [r1, #16]
 8026616:	4607      	mov	r7, r0
 8026618:	4698      	mov	r8, r3
 802661a:	460c      	mov	r4, r1
 802661c:	f101 0014 	add.w	r0, r1, #20
 8026620:	2300      	movs	r3, #0
 8026622:	6805      	ldr	r5, [r0, #0]
 8026624:	b2a9      	uxth	r1, r5
 8026626:	fb02 8101 	mla	r1, r2, r1, r8
 802662a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 802662e:	0c2d      	lsrs	r5, r5, #16
 8026630:	fb02 c505 	mla	r5, r2, r5, ip
 8026634:	b289      	uxth	r1, r1
 8026636:	3301      	adds	r3, #1
 8026638:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 802663c:	429e      	cmp	r6, r3
 802663e:	f840 1b04 	str.w	r1, [r0], #4
 8026642:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8026646:	dcec      	bgt.n	8026622 <__multadd+0x12>
 8026648:	f1b8 0f00 	cmp.w	r8, #0
 802664c:	d022      	beq.n	8026694 <__multadd+0x84>
 802664e:	68a3      	ldr	r3, [r4, #8]
 8026650:	42b3      	cmp	r3, r6
 8026652:	dc19      	bgt.n	8026688 <__multadd+0x78>
 8026654:	6861      	ldr	r1, [r4, #4]
 8026656:	4638      	mov	r0, r7
 8026658:	3101      	adds	r1, #1
 802665a:	f7ff ff77 	bl	802654c <_Balloc>
 802665e:	4605      	mov	r5, r0
 8026660:	b928      	cbnz	r0, 802666e <__multadd+0x5e>
 8026662:	4602      	mov	r2, r0
 8026664:	4b0d      	ldr	r3, [pc, #52]	; (802669c <__multadd+0x8c>)
 8026666:	480e      	ldr	r0, [pc, #56]	; (80266a0 <__multadd+0x90>)
 8026668:	21b5      	movs	r1, #181	; 0xb5
 802666a:	f000 fc7d 	bl	8026f68 <__assert_func>
 802666e:	6922      	ldr	r2, [r4, #16]
 8026670:	3202      	adds	r2, #2
 8026672:	f104 010c 	add.w	r1, r4, #12
 8026676:	0092      	lsls	r2, r2, #2
 8026678:	300c      	adds	r0, #12
 802667a:	f7fe fbb7 	bl	8024dec <memcpy>
 802667e:	4621      	mov	r1, r4
 8026680:	4638      	mov	r0, r7
 8026682:	f7ff ffa3 	bl	80265cc <_Bfree>
 8026686:	462c      	mov	r4, r5
 8026688:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 802668c:	3601      	adds	r6, #1
 802668e:	f8c3 8014 	str.w	r8, [r3, #20]
 8026692:	6126      	str	r6, [r4, #16]
 8026694:	4620      	mov	r0, r4
 8026696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802669a:	bf00      	nop
 802669c:	0809aeff 	.word	0x0809aeff
 80266a0:	0809af10 	.word	0x0809af10

080266a4 <__hi0bits>:
 80266a4:	0c03      	lsrs	r3, r0, #16
 80266a6:	041b      	lsls	r3, r3, #16
 80266a8:	b9d3      	cbnz	r3, 80266e0 <__hi0bits+0x3c>
 80266aa:	0400      	lsls	r0, r0, #16
 80266ac:	2310      	movs	r3, #16
 80266ae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80266b2:	bf04      	itt	eq
 80266b4:	0200      	lsleq	r0, r0, #8
 80266b6:	3308      	addeq	r3, #8
 80266b8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80266bc:	bf04      	itt	eq
 80266be:	0100      	lsleq	r0, r0, #4
 80266c0:	3304      	addeq	r3, #4
 80266c2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80266c6:	bf04      	itt	eq
 80266c8:	0080      	lsleq	r0, r0, #2
 80266ca:	3302      	addeq	r3, #2
 80266cc:	2800      	cmp	r0, #0
 80266ce:	db05      	blt.n	80266dc <__hi0bits+0x38>
 80266d0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80266d4:	f103 0301 	add.w	r3, r3, #1
 80266d8:	bf08      	it	eq
 80266da:	2320      	moveq	r3, #32
 80266dc:	4618      	mov	r0, r3
 80266de:	4770      	bx	lr
 80266e0:	2300      	movs	r3, #0
 80266e2:	e7e4      	b.n	80266ae <__hi0bits+0xa>

080266e4 <__lo0bits>:
 80266e4:	6803      	ldr	r3, [r0, #0]
 80266e6:	f013 0207 	ands.w	r2, r3, #7
 80266ea:	4601      	mov	r1, r0
 80266ec:	d00b      	beq.n	8026706 <__lo0bits+0x22>
 80266ee:	07da      	lsls	r2, r3, #31
 80266f0:	d424      	bmi.n	802673c <__lo0bits+0x58>
 80266f2:	0798      	lsls	r0, r3, #30
 80266f4:	bf49      	itett	mi
 80266f6:	085b      	lsrmi	r3, r3, #1
 80266f8:	089b      	lsrpl	r3, r3, #2
 80266fa:	2001      	movmi	r0, #1
 80266fc:	600b      	strmi	r3, [r1, #0]
 80266fe:	bf5c      	itt	pl
 8026700:	600b      	strpl	r3, [r1, #0]
 8026702:	2002      	movpl	r0, #2
 8026704:	4770      	bx	lr
 8026706:	b298      	uxth	r0, r3
 8026708:	b9b0      	cbnz	r0, 8026738 <__lo0bits+0x54>
 802670a:	0c1b      	lsrs	r3, r3, #16
 802670c:	2010      	movs	r0, #16
 802670e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8026712:	bf04      	itt	eq
 8026714:	0a1b      	lsreq	r3, r3, #8
 8026716:	3008      	addeq	r0, #8
 8026718:	071a      	lsls	r2, r3, #28
 802671a:	bf04      	itt	eq
 802671c:	091b      	lsreq	r3, r3, #4
 802671e:	3004      	addeq	r0, #4
 8026720:	079a      	lsls	r2, r3, #30
 8026722:	bf04      	itt	eq
 8026724:	089b      	lsreq	r3, r3, #2
 8026726:	3002      	addeq	r0, #2
 8026728:	07da      	lsls	r2, r3, #31
 802672a:	d403      	bmi.n	8026734 <__lo0bits+0x50>
 802672c:	085b      	lsrs	r3, r3, #1
 802672e:	f100 0001 	add.w	r0, r0, #1
 8026732:	d005      	beq.n	8026740 <__lo0bits+0x5c>
 8026734:	600b      	str	r3, [r1, #0]
 8026736:	4770      	bx	lr
 8026738:	4610      	mov	r0, r2
 802673a:	e7e8      	b.n	802670e <__lo0bits+0x2a>
 802673c:	2000      	movs	r0, #0
 802673e:	4770      	bx	lr
 8026740:	2020      	movs	r0, #32
 8026742:	4770      	bx	lr

08026744 <__i2b>:
 8026744:	b510      	push	{r4, lr}
 8026746:	460c      	mov	r4, r1
 8026748:	2101      	movs	r1, #1
 802674a:	f7ff feff 	bl	802654c <_Balloc>
 802674e:	4602      	mov	r2, r0
 8026750:	b928      	cbnz	r0, 802675e <__i2b+0x1a>
 8026752:	4b05      	ldr	r3, [pc, #20]	; (8026768 <__i2b+0x24>)
 8026754:	4805      	ldr	r0, [pc, #20]	; (802676c <__i2b+0x28>)
 8026756:	f44f 71a0 	mov.w	r1, #320	; 0x140
 802675a:	f000 fc05 	bl	8026f68 <__assert_func>
 802675e:	2301      	movs	r3, #1
 8026760:	6144      	str	r4, [r0, #20]
 8026762:	6103      	str	r3, [r0, #16]
 8026764:	bd10      	pop	{r4, pc}
 8026766:	bf00      	nop
 8026768:	0809aeff 	.word	0x0809aeff
 802676c:	0809af10 	.word	0x0809af10

08026770 <__multiply>:
 8026770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026774:	4614      	mov	r4, r2
 8026776:	690a      	ldr	r2, [r1, #16]
 8026778:	6923      	ldr	r3, [r4, #16]
 802677a:	429a      	cmp	r2, r3
 802677c:	bfb8      	it	lt
 802677e:	460b      	movlt	r3, r1
 8026780:	460d      	mov	r5, r1
 8026782:	bfbc      	itt	lt
 8026784:	4625      	movlt	r5, r4
 8026786:	461c      	movlt	r4, r3
 8026788:	f8d5 a010 	ldr.w	sl, [r5, #16]
 802678c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8026790:	68ab      	ldr	r3, [r5, #8]
 8026792:	6869      	ldr	r1, [r5, #4]
 8026794:	eb0a 0709 	add.w	r7, sl, r9
 8026798:	42bb      	cmp	r3, r7
 802679a:	b085      	sub	sp, #20
 802679c:	bfb8      	it	lt
 802679e:	3101      	addlt	r1, #1
 80267a0:	f7ff fed4 	bl	802654c <_Balloc>
 80267a4:	b930      	cbnz	r0, 80267b4 <__multiply+0x44>
 80267a6:	4602      	mov	r2, r0
 80267a8:	4b42      	ldr	r3, [pc, #264]	; (80268b4 <__multiply+0x144>)
 80267aa:	4843      	ldr	r0, [pc, #268]	; (80268b8 <__multiply+0x148>)
 80267ac:	f240 115d 	movw	r1, #349	; 0x15d
 80267b0:	f000 fbda 	bl	8026f68 <__assert_func>
 80267b4:	f100 0614 	add.w	r6, r0, #20
 80267b8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80267bc:	4633      	mov	r3, r6
 80267be:	2200      	movs	r2, #0
 80267c0:	4543      	cmp	r3, r8
 80267c2:	d31e      	bcc.n	8026802 <__multiply+0x92>
 80267c4:	f105 0c14 	add.w	ip, r5, #20
 80267c8:	f104 0314 	add.w	r3, r4, #20
 80267cc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80267d0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80267d4:	9202      	str	r2, [sp, #8]
 80267d6:	ebac 0205 	sub.w	r2, ip, r5
 80267da:	3a15      	subs	r2, #21
 80267dc:	f022 0203 	bic.w	r2, r2, #3
 80267e0:	3204      	adds	r2, #4
 80267e2:	f105 0115 	add.w	r1, r5, #21
 80267e6:	458c      	cmp	ip, r1
 80267e8:	bf38      	it	cc
 80267ea:	2204      	movcc	r2, #4
 80267ec:	9201      	str	r2, [sp, #4]
 80267ee:	9a02      	ldr	r2, [sp, #8]
 80267f0:	9303      	str	r3, [sp, #12]
 80267f2:	429a      	cmp	r2, r3
 80267f4:	d808      	bhi.n	8026808 <__multiply+0x98>
 80267f6:	2f00      	cmp	r7, #0
 80267f8:	dc55      	bgt.n	80268a6 <__multiply+0x136>
 80267fa:	6107      	str	r7, [r0, #16]
 80267fc:	b005      	add	sp, #20
 80267fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026802:	f843 2b04 	str.w	r2, [r3], #4
 8026806:	e7db      	b.n	80267c0 <__multiply+0x50>
 8026808:	f8b3 a000 	ldrh.w	sl, [r3]
 802680c:	f1ba 0f00 	cmp.w	sl, #0
 8026810:	d020      	beq.n	8026854 <__multiply+0xe4>
 8026812:	f105 0e14 	add.w	lr, r5, #20
 8026816:	46b1      	mov	r9, r6
 8026818:	2200      	movs	r2, #0
 802681a:	f85e 4b04 	ldr.w	r4, [lr], #4
 802681e:	f8d9 b000 	ldr.w	fp, [r9]
 8026822:	b2a1      	uxth	r1, r4
 8026824:	fa1f fb8b 	uxth.w	fp, fp
 8026828:	fb0a b101 	mla	r1, sl, r1, fp
 802682c:	4411      	add	r1, r2
 802682e:	f8d9 2000 	ldr.w	r2, [r9]
 8026832:	0c24      	lsrs	r4, r4, #16
 8026834:	0c12      	lsrs	r2, r2, #16
 8026836:	fb0a 2404 	mla	r4, sl, r4, r2
 802683a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 802683e:	b289      	uxth	r1, r1
 8026840:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8026844:	45f4      	cmp	ip, lr
 8026846:	f849 1b04 	str.w	r1, [r9], #4
 802684a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 802684e:	d8e4      	bhi.n	802681a <__multiply+0xaa>
 8026850:	9901      	ldr	r1, [sp, #4]
 8026852:	5072      	str	r2, [r6, r1]
 8026854:	9a03      	ldr	r2, [sp, #12]
 8026856:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 802685a:	3304      	adds	r3, #4
 802685c:	f1b9 0f00 	cmp.w	r9, #0
 8026860:	d01f      	beq.n	80268a2 <__multiply+0x132>
 8026862:	6834      	ldr	r4, [r6, #0]
 8026864:	f105 0114 	add.w	r1, r5, #20
 8026868:	46b6      	mov	lr, r6
 802686a:	f04f 0a00 	mov.w	sl, #0
 802686e:	880a      	ldrh	r2, [r1, #0]
 8026870:	f8be b002 	ldrh.w	fp, [lr, #2]
 8026874:	fb09 b202 	mla	r2, r9, r2, fp
 8026878:	4492      	add	sl, r2
 802687a:	b2a4      	uxth	r4, r4
 802687c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8026880:	f84e 4b04 	str.w	r4, [lr], #4
 8026884:	f851 4b04 	ldr.w	r4, [r1], #4
 8026888:	f8be 2000 	ldrh.w	r2, [lr]
 802688c:	0c24      	lsrs	r4, r4, #16
 802688e:	fb09 2404 	mla	r4, r9, r4, r2
 8026892:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8026896:	458c      	cmp	ip, r1
 8026898:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 802689c:	d8e7      	bhi.n	802686e <__multiply+0xfe>
 802689e:	9a01      	ldr	r2, [sp, #4]
 80268a0:	50b4      	str	r4, [r6, r2]
 80268a2:	3604      	adds	r6, #4
 80268a4:	e7a3      	b.n	80267ee <__multiply+0x7e>
 80268a6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80268aa:	2b00      	cmp	r3, #0
 80268ac:	d1a5      	bne.n	80267fa <__multiply+0x8a>
 80268ae:	3f01      	subs	r7, #1
 80268b0:	e7a1      	b.n	80267f6 <__multiply+0x86>
 80268b2:	bf00      	nop
 80268b4:	0809aeff 	.word	0x0809aeff
 80268b8:	0809af10 	.word	0x0809af10

080268bc <__pow5mult>:
 80268bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80268c0:	4615      	mov	r5, r2
 80268c2:	f012 0203 	ands.w	r2, r2, #3
 80268c6:	4606      	mov	r6, r0
 80268c8:	460f      	mov	r7, r1
 80268ca:	d007      	beq.n	80268dc <__pow5mult+0x20>
 80268cc:	4c25      	ldr	r4, [pc, #148]	; (8026964 <__pow5mult+0xa8>)
 80268ce:	3a01      	subs	r2, #1
 80268d0:	2300      	movs	r3, #0
 80268d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80268d6:	f7ff fe9b 	bl	8026610 <__multadd>
 80268da:	4607      	mov	r7, r0
 80268dc:	10ad      	asrs	r5, r5, #2
 80268de:	d03d      	beq.n	802695c <__pow5mult+0xa0>
 80268e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80268e2:	b97c      	cbnz	r4, 8026904 <__pow5mult+0x48>
 80268e4:	2010      	movs	r0, #16
 80268e6:	f7fe fa71 	bl	8024dcc <malloc>
 80268ea:	4602      	mov	r2, r0
 80268ec:	6270      	str	r0, [r6, #36]	; 0x24
 80268ee:	b928      	cbnz	r0, 80268fc <__pow5mult+0x40>
 80268f0:	4b1d      	ldr	r3, [pc, #116]	; (8026968 <__pow5mult+0xac>)
 80268f2:	481e      	ldr	r0, [pc, #120]	; (802696c <__pow5mult+0xb0>)
 80268f4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80268f8:	f000 fb36 	bl	8026f68 <__assert_func>
 80268fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8026900:	6004      	str	r4, [r0, #0]
 8026902:	60c4      	str	r4, [r0, #12]
 8026904:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8026908:	f8d8 4008 	ldr.w	r4, [r8, #8]
 802690c:	b94c      	cbnz	r4, 8026922 <__pow5mult+0x66>
 802690e:	f240 2171 	movw	r1, #625	; 0x271
 8026912:	4630      	mov	r0, r6
 8026914:	f7ff ff16 	bl	8026744 <__i2b>
 8026918:	2300      	movs	r3, #0
 802691a:	f8c8 0008 	str.w	r0, [r8, #8]
 802691e:	4604      	mov	r4, r0
 8026920:	6003      	str	r3, [r0, #0]
 8026922:	f04f 0900 	mov.w	r9, #0
 8026926:	07eb      	lsls	r3, r5, #31
 8026928:	d50a      	bpl.n	8026940 <__pow5mult+0x84>
 802692a:	4639      	mov	r1, r7
 802692c:	4622      	mov	r2, r4
 802692e:	4630      	mov	r0, r6
 8026930:	f7ff ff1e 	bl	8026770 <__multiply>
 8026934:	4639      	mov	r1, r7
 8026936:	4680      	mov	r8, r0
 8026938:	4630      	mov	r0, r6
 802693a:	f7ff fe47 	bl	80265cc <_Bfree>
 802693e:	4647      	mov	r7, r8
 8026940:	106d      	asrs	r5, r5, #1
 8026942:	d00b      	beq.n	802695c <__pow5mult+0xa0>
 8026944:	6820      	ldr	r0, [r4, #0]
 8026946:	b938      	cbnz	r0, 8026958 <__pow5mult+0x9c>
 8026948:	4622      	mov	r2, r4
 802694a:	4621      	mov	r1, r4
 802694c:	4630      	mov	r0, r6
 802694e:	f7ff ff0f 	bl	8026770 <__multiply>
 8026952:	6020      	str	r0, [r4, #0]
 8026954:	f8c0 9000 	str.w	r9, [r0]
 8026958:	4604      	mov	r4, r0
 802695a:	e7e4      	b.n	8026926 <__pow5mult+0x6a>
 802695c:	4638      	mov	r0, r7
 802695e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026962:	bf00      	nop
 8026964:	0809b060 	.word	0x0809b060
 8026968:	0809ae89 	.word	0x0809ae89
 802696c:	0809af10 	.word	0x0809af10

08026970 <__lshift>:
 8026970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026974:	460c      	mov	r4, r1
 8026976:	6849      	ldr	r1, [r1, #4]
 8026978:	6923      	ldr	r3, [r4, #16]
 802697a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802697e:	68a3      	ldr	r3, [r4, #8]
 8026980:	4607      	mov	r7, r0
 8026982:	4691      	mov	r9, r2
 8026984:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8026988:	f108 0601 	add.w	r6, r8, #1
 802698c:	42b3      	cmp	r3, r6
 802698e:	db0b      	blt.n	80269a8 <__lshift+0x38>
 8026990:	4638      	mov	r0, r7
 8026992:	f7ff fddb 	bl	802654c <_Balloc>
 8026996:	4605      	mov	r5, r0
 8026998:	b948      	cbnz	r0, 80269ae <__lshift+0x3e>
 802699a:	4602      	mov	r2, r0
 802699c:	4b28      	ldr	r3, [pc, #160]	; (8026a40 <__lshift+0xd0>)
 802699e:	4829      	ldr	r0, [pc, #164]	; (8026a44 <__lshift+0xd4>)
 80269a0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80269a4:	f000 fae0 	bl	8026f68 <__assert_func>
 80269a8:	3101      	adds	r1, #1
 80269aa:	005b      	lsls	r3, r3, #1
 80269ac:	e7ee      	b.n	802698c <__lshift+0x1c>
 80269ae:	2300      	movs	r3, #0
 80269b0:	f100 0114 	add.w	r1, r0, #20
 80269b4:	f100 0210 	add.w	r2, r0, #16
 80269b8:	4618      	mov	r0, r3
 80269ba:	4553      	cmp	r3, sl
 80269bc:	db33      	blt.n	8026a26 <__lshift+0xb6>
 80269be:	6920      	ldr	r0, [r4, #16]
 80269c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80269c4:	f104 0314 	add.w	r3, r4, #20
 80269c8:	f019 091f 	ands.w	r9, r9, #31
 80269cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80269d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80269d4:	d02b      	beq.n	8026a2e <__lshift+0xbe>
 80269d6:	f1c9 0e20 	rsb	lr, r9, #32
 80269da:	468a      	mov	sl, r1
 80269dc:	2200      	movs	r2, #0
 80269de:	6818      	ldr	r0, [r3, #0]
 80269e0:	fa00 f009 	lsl.w	r0, r0, r9
 80269e4:	4302      	orrs	r2, r0
 80269e6:	f84a 2b04 	str.w	r2, [sl], #4
 80269ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80269ee:	459c      	cmp	ip, r3
 80269f0:	fa22 f20e 	lsr.w	r2, r2, lr
 80269f4:	d8f3      	bhi.n	80269de <__lshift+0x6e>
 80269f6:	ebac 0304 	sub.w	r3, ip, r4
 80269fa:	3b15      	subs	r3, #21
 80269fc:	f023 0303 	bic.w	r3, r3, #3
 8026a00:	3304      	adds	r3, #4
 8026a02:	f104 0015 	add.w	r0, r4, #21
 8026a06:	4584      	cmp	ip, r0
 8026a08:	bf38      	it	cc
 8026a0a:	2304      	movcc	r3, #4
 8026a0c:	50ca      	str	r2, [r1, r3]
 8026a0e:	b10a      	cbz	r2, 8026a14 <__lshift+0xa4>
 8026a10:	f108 0602 	add.w	r6, r8, #2
 8026a14:	3e01      	subs	r6, #1
 8026a16:	4638      	mov	r0, r7
 8026a18:	612e      	str	r6, [r5, #16]
 8026a1a:	4621      	mov	r1, r4
 8026a1c:	f7ff fdd6 	bl	80265cc <_Bfree>
 8026a20:	4628      	mov	r0, r5
 8026a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026a26:	f842 0f04 	str.w	r0, [r2, #4]!
 8026a2a:	3301      	adds	r3, #1
 8026a2c:	e7c5      	b.n	80269ba <__lshift+0x4a>
 8026a2e:	3904      	subs	r1, #4
 8026a30:	f853 2b04 	ldr.w	r2, [r3], #4
 8026a34:	f841 2f04 	str.w	r2, [r1, #4]!
 8026a38:	459c      	cmp	ip, r3
 8026a3a:	d8f9      	bhi.n	8026a30 <__lshift+0xc0>
 8026a3c:	e7ea      	b.n	8026a14 <__lshift+0xa4>
 8026a3e:	bf00      	nop
 8026a40:	0809aeff 	.word	0x0809aeff
 8026a44:	0809af10 	.word	0x0809af10

08026a48 <__mcmp>:
 8026a48:	b530      	push	{r4, r5, lr}
 8026a4a:	6902      	ldr	r2, [r0, #16]
 8026a4c:	690c      	ldr	r4, [r1, #16]
 8026a4e:	1b12      	subs	r2, r2, r4
 8026a50:	d10e      	bne.n	8026a70 <__mcmp+0x28>
 8026a52:	f100 0314 	add.w	r3, r0, #20
 8026a56:	3114      	adds	r1, #20
 8026a58:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8026a5c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8026a60:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8026a64:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8026a68:	42a5      	cmp	r5, r4
 8026a6a:	d003      	beq.n	8026a74 <__mcmp+0x2c>
 8026a6c:	d305      	bcc.n	8026a7a <__mcmp+0x32>
 8026a6e:	2201      	movs	r2, #1
 8026a70:	4610      	mov	r0, r2
 8026a72:	bd30      	pop	{r4, r5, pc}
 8026a74:	4283      	cmp	r3, r0
 8026a76:	d3f3      	bcc.n	8026a60 <__mcmp+0x18>
 8026a78:	e7fa      	b.n	8026a70 <__mcmp+0x28>
 8026a7a:	f04f 32ff 	mov.w	r2, #4294967295
 8026a7e:	e7f7      	b.n	8026a70 <__mcmp+0x28>

08026a80 <__mdiff>:
 8026a80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026a84:	460c      	mov	r4, r1
 8026a86:	4606      	mov	r6, r0
 8026a88:	4611      	mov	r1, r2
 8026a8a:	4620      	mov	r0, r4
 8026a8c:	4617      	mov	r7, r2
 8026a8e:	f7ff ffdb 	bl	8026a48 <__mcmp>
 8026a92:	1e05      	subs	r5, r0, #0
 8026a94:	d110      	bne.n	8026ab8 <__mdiff+0x38>
 8026a96:	4629      	mov	r1, r5
 8026a98:	4630      	mov	r0, r6
 8026a9a:	f7ff fd57 	bl	802654c <_Balloc>
 8026a9e:	b930      	cbnz	r0, 8026aae <__mdiff+0x2e>
 8026aa0:	4b39      	ldr	r3, [pc, #228]	; (8026b88 <__mdiff+0x108>)
 8026aa2:	4602      	mov	r2, r0
 8026aa4:	f240 2132 	movw	r1, #562	; 0x232
 8026aa8:	4838      	ldr	r0, [pc, #224]	; (8026b8c <__mdiff+0x10c>)
 8026aaa:	f000 fa5d 	bl	8026f68 <__assert_func>
 8026aae:	2301      	movs	r3, #1
 8026ab0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8026ab4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026ab8:	bfa4      	itt	ge
 8026aba:	463b      	movge	r3, r7
 8026abc:	4627      	movge	r7, r4
 8026abe:	4630      	mov	r0, r6
 8026ac0:	6879      	ldr	r1, [r7, #4]
 8026ac2:	bfa6      	itte	ge
 8026ac4:	461c      	movge	r4, r3
 8026ac6:	2500      	movge	r5, #0
 8026ac8:	2501      	movlt	r5, #1
 8026aca:	f7ff fd3f 	bl	802654c <_Balloc>
 8026ace:	b920      	cbnz	r0, 8026ada <__mdiff+0x5a>
 8026ad0:	4b2d      	ldr	r3, [pc, #180]	; (8026b88 <__mdiff+0x108>)
 8026ad2:	4602      	mov	r2, r0
 8026ad4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8026ad8:	e7e6      	b.n	8026aa8 <__mdiff+0x28>
 8026ada:	693e      	ldr	r6, [r7, #16]
 8026adc:	60c5      	str	r5, [r0, #12]
 8026ade:	6925      	ldr	r5, [r4, #16]
 8026ae0:	f107 0114 	add.w	r1, r7, #20
 8026ae4:	f104 0914 	add.w	r9, r4, #20
 8026ae8:	f100 0e14 	add.w	lr, r0, #20
 8026aec:	f107 0210 	add.w	r2, r7, #16
 8026af0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8026af4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8026af8:	46f2      	mov	sl, lr
 8026afa:	2700      	movs	r7, #0
 8026afc:	f859 3b04 	ldr.w	r3, [r9], #4
 8026b00:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8026b04:	fa1f f883 	uxth.w	r8, r3
 8026b08:	fa17 f78b 	uxtah	r7, r7, fp
 8026b0c:	0c1b      	lsrs	r3, r3, #16
 8026b0e:	eba7 0808 	sub.w	r8, r7, r8
 8026b12:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8026b16:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8026b1a:	fa1f f888 	uxth.w	r8, r8
 8026b1e:	141f      	asrs	r7, r3, #16
 8026b20:	454d      	cmp	r5, r9
 8026b22:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8026b26:	f84a 3b04 	str.w	r3, [sl], #4
 8026b2a:	d8e7      	bhi.n	8026afc <__mdiff+0x7c>
 8026b2c:	1b2b      	subs	r3, r5, r4
 8026b2e:	3b15      	subs	r3, #21
 8026b30:	f023 0303 	bic.w	r3, r3, #3
 8026b34:	3304      	adds	r3, #4
 8026b36:	3415      	adds	r4, #21
 8026b38:	42a5      	cmp	r5, r4
 8026b3a:	bf38      	it	cc
 8026b3c:	2304      	movcc	r3, #4
 8026b3e:	4419      	add	r1, r3
 8026b40:	4473      	add	r3, lr
 8026b42:	469e      	mov	lr, r3
 8026b44:	460d      	mov	r5, r1
 8026b46:	4565      	cmp	r5, ip
 8026b48:	d30e      	bcc.n	8026b68 <__mdiff+0xe8>
 8026b4a:	f10c 0203 	add.w	r2, ip, #3
 8026b4e:	1a52      	subs	r2, r2, r1
 8026b50:	f022 0203 	bic.w	r2, r2, #3
 8026b54:	3903      	subs	r1, #3
 8026b56:	458c      	cmp	ip, r1
 8026b58:	bf38      	it	cc
 8026b5a:	2200      	movcc	r2, #0
 8026b5c:	441a      	add	r2, r3
 8026b5e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8026b62:	b17b      	cbz	r3, 8026b84 <__mdiff+0x104>
 8026b64:	6106      	str	r6, [r0, #16]
 8026b66:	e7a5      	b.n	8026ab4 <__mdiff+0x34>
 8026b68:	f855 8b04 	ldr.w	r8, [r5], #4
 8026b6c:	fa17 f488 	uxtah	r4, r7, r8
 8026b70:	1422      	asrs	r2, r4, #16
 8026b72:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8026b76:	b2a4      	uxth	r4, r4
 8026b78:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8026b7c:	f84e 4b04 	str.w	r4, [lr], #4
 8026b80:	1417      	asrs	r7, r2, #16
 8026b82:	e7e0      	b.n	8026b46 <__mdiff+0xc6>
 8026b84:	3e01      	subs	r6, #1
 8026b86:	e7ea      	b.n	8026b5e <__mdiff+0xde>
 8026b88:	0809aeff 	.word	0x0809aeff
 8026b8c:	0809af10 	.word	0x0809af10

08026b90 <__d2b>:
 8026b90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8026b94:	4689      	mov	r9, r1
 8026b96:	2101      	movs	r1, #1
 8026b98:	ec57 6b10 	vmov	r6, r7, d0
 8026b9c:	4690      	mov	r8, r2
 8026b9e:	f7ff fcd5 	bl	802654c <_Balloc>
 8026ba2:	4604      	mov	r4, r0
 8026ba4:	b930      	cbnz	r0, 8026bb4 <__d2b+0x24>
 8026ba6:	4602      	mov	r2, r0
 8026ba8:	4b25      	ldr	r3, [pc, #148]	; (8026c40 <__d2b+0xb0>)
 8026baa:	4826      	ldr	r0, [pc, #152]	; (8026c44 <__d2b+0xb4>)
 8026bac:	f240 310a 	movw	r1, #778	; 0x30a
 8026bb0:	f000 f9da 	bl	8026f68 <__assert_func>
 8026bb4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8026bb8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8026bbc:	bb35      	cbnz	r5, 8026c0c <__d2b+0x7c>
 8026bbe:	2e00      	cmp	r6, #0
 8026bc0:	9301      	str	r3, [sp, #4]
 8026bc2:	d028      	beq.n	8026c16 <__d2b+0x86>
 8026bc4:	4668      	mov	r0, sp
 8026bc6:	9600      	str	r6, [sp, #0]
 8026bc8:	f7ff fd8c 	bl	80266e4 <__lo0bits>
 8026bcc:	9900      	ldr	r1, [sp, #0]
 8026bce:	b300      	cbz	r0, 8026c12 <__d2b+0x82>
 8026bd0:	9a01      	ldr	r2, [sp, #4]
 8026bd2:	f1c0 0320 	rsb	r3, r0, #32
 8026bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8026bda:	430b      	orrs	r3, r1
 8026bdc:	40c2      	lsrs	r2, r0
 8026bde:	6163      	str	r3, [r4, #20]
 8026be0:	9201      	str	r2, [sp, #4]
 8026be2:	9b01      	ldr	r3, [sp, #4]
 8026be4:	61a3      	str	r3, [r4, #24]
 8026be6:	2b00      	cmp	r3, #0
 8026be8:	bf14      	ite	ne
 8026bea:	2202      	movne	r2, #2
 8026bec:	2201      	moveq	r2, #1
 8026bee:	6122      	str	r2, [r4, #16]
 8026bf0:	b1d5      	cbz	r5, 8026c28 <__d2b+0x98>
 8026bf2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8026bf6:	4405      	add	r5, r0
 8026bf8:	f8c9 5000 	str.w	r5, [r9]
 8026bfc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8026c00:	f8c8 0000 	str.w	r0, [r8]
 8026c04:	4620      	mov	r0, r4
 8026c06:	b003      	add	sp, #12
 8026c08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8026c0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8026c10:	e7d5      	b.n	8026bbe <__d2b+0x2e>
 8026c12:	6161      	str	r1, [r4, #20]
 8026c14:	e7e5      	b.n	8026be2 <__d2b+0x52>
 8026c16:	a801      	add	r0, sp, #4
 8026c18:	f7ff fd64 	bl	80266e4 <__lo0bits>
 8026c1c:	9b01      	ldr	r3, [sp, #4]
 8026c1e:	6163      	str	r3, [r4, #20]
 8026c20:	2201      	movs	r2, #1
 8026c22:	6122      	str	r2, [r4, #16]
 8026c24:	3020      	adds	r0, #32
 8026c26:	e7e3      	b.n	8026bf0 <__d2b+0x60>
 8026c28:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8026c2c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8026c30:	f8c9 0000 	str.w	r0, [r9]
 8026c34:	6918      	ldr	r0, [r3, #16]
 8026c36:	f7ff fd35 	bl	80266a4 <__hi0bits>
 8026c3a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8026c3e:	e7df      	b.n	8026c00 <__d2b+0x70>
 8026c40:	0809aeff 	.word	0x0809aeff
 8026c44:	0809af10 	.word	0x0809af10

08026c48 <_calloc_r>:
 8026c48:	b513      	push	{r0, r1, r4, lr}
 8026c4a:	434a      	muls	r2, r1
 8026c4c:	4611      	mov	r1, r2
 8026c4e:	9201      	str	r2, [sp, #4]
 8026c50:	f7fe f94c 	bl	8024eec <_malloc_r>
 8026c54:	4604      	mov	r4, r0
 8026c56:	b118      	cbz	r0, 8026c60 <_calloc_r+0x18>
 8026c58:	9a01      	ldr	r2, [sp, #4]
 8026c5a:	2100      	movs	r1, #0
 8026c5c:	f7fe f8ee 	bl	8024e3c <memset>
 8026c60:	4620      	mov	r0, r4
 8026c62:	b002      	add	sp, #8
 8026c64:	bd10      	pop	{r4, pc}

08026c66 <_realloc_r>:
 8026c66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026c68:	4607      	mov	r7, r0
 8026c6a:	4614      	mov	r4, r2
 8026c6c:	460e      	mov	r6, r1
 8026c6e:	b921      	cbnz	r1, 8026c7a <_realloc_r+0x14>
 8026c70:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8026c74:	4611      	mov	r1, r2
 8026c76:	f7fe b939 	b.w	8024eec <_malloc_r>
 8026c7a:	b922      	cbnz	r2, 8026c86 <_realloc_r+0x20>
 8026c7c:	f7fe f8e6 	bl	8024e4c <_free_r>
 8026c80:	4625      	mov	r5, r4
 8026c82:	4628      	mov	r0, r5
 8026c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026c86:	f000 f9b4 	bl	8026ff2 <_malloc_usable_size_r>
 8026c8a:	42a0      	cmp	r0, r4
 8026c8c:	d20f      	bcs.n	8026cae <_realloc_r+0x48>
 8026c8e:	4621      	mov	r1, r4
 8026c90:	4638      	mov	r0, r7
 8026c92:	f7fe f92b 	bl	8024eec <_malloc_r>
 8026c96:	4605      	mov	r5, r0
 8026c98:	2800      	cmp	r0, #0
 8026c9a:	d0f2      	beq.n	8026c82 <_realloc_r+0x1c>
 8026c9c:	4631      	mov	r1, r6
 8026c9e:	4622      	mov	r2, r4
 8026ca0:	f7fe f8a4 	bl	8024dec <memcpy>
 8026ca4:	4631      	mov	r1, r6
 8026ca6:	4638      	mov	r0, r7
 8026ca8:	f7fe f8d0 	bl	8024e4c <_free_r>
 8026cac:	e7e9      	b.n	8026c82 <_realloc_r+0x1c>
 8026cae:	4635      	mov	r5, r6
 8026cb0:	e7e7      	b.n	8026c82 <_realloc_r+0x1c>

08026cb2 <__ssputs_r>:
 8026cb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026cb6:	688e      	ldr	r6, [r1, #8]
 8026cb8:	429e      	cmp	r6, r3
 8026cba:	4682      	mov	sl, r0
 8026cbc:	460c      	mov	r4, r1
 8026cbe:	4690      	mov	r8, r2
 8026cc0:	461f      	mov	r7, r3
 8026cc2:	d838      	bhi.n	8026d36 <__ssputs_r+0x84>
 8026cc4:	898a      	ldrh	r2, [r1, #12]
 8026cc6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8026cca:	d032      	beq.n	8026d32 <__ssputs_r+0x80>
 8026ccc:	6825      	ldr	r5, [r4, #0]
 8026cce:	6909      	ldr	r1, [r1, #16]
 8026cd0:	eba5 0901 	sub.w	r9, r5, r1
 8026cd4:	6965      	ldr	r5, [r4, #20]
 8026cd6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8026cda:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8026cde:	3301      	adds	r3, #1
 8026ce0:	444b      	add	r3, r9
 8026ce2:	106d      	asrs	r5, r5, #1
 8026ce4:	429d      	cmp	r5, r3
 8026ce6:	bf38      	it	cc
 8026ce8:	461d      	movcc	r5, r3
 8026cea:	0553      	lsls	r3, r2, #21
 8026cec:	d531      	bpl.n	8026d52 <__ssputs_r+0xa0>
 8026cee:	4629      	mov	r1, r5
 8026cf0:	f7fe f8fc 	bl	8024eec <_malloc_r>
 8026cf4:	4606      	mov	r6, r0
 8026cf6:	b950      	cbnz	r0, 8026d0e <__ssputs_r+0x5c>
 8026cf8:	230c      	movs	r3, #12
 8026cfa:	f8ca 3000 	str.w	r3, [sl]
 8026cfe:	89a3      	ldrh	r3, [r4, #12]
 8026d00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026d04:	81a3      	strh	r3, [r4, #12]
 8026d06:	f04f 30ff 	mov.w	r0, #4294967295
 8026d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026d0e:	6921      	ldr	r1, [r4, #16]
 8026d10:	464a      	mov	r2, r9
 8026d12:	f7fe f86b 	bl	8024dec <memcpy>
 8026d16:	89a3      	ldrh	r3, [r4, #12]
 8026d18:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8026d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8026d20:	81a3      	strh	r3, [r4, #12]
 8026d22:	6126      	str	r6, [r4, #16]
 8026d24:	6165      	str	r5, [r4, #20]
 8026d26:	444e      	add	r6, r9
 8026d28:	eba5 0509 	sub.w	r5, r5, r9
 8026d2c:	6026      	str	r6, [r4, #0]
 8026d2e:	60a5      	str	r5, [r4, #8]
 8026d30:	463e      	mov	r6, r7
 8026d32:	42be      	cmp	r6, r7
 8026d34:	d900      	bls.n	8026d38 <__ssputs_r+0x86>
 8026d36:	463e      	mov	r6, r7
 8026d38:	4632      	mov	r2, r6
 8026d3a:	6820      	ldr	r0, [r4, #0]
 8026d3c:	4641      	mov	r1, r8
 8026d3e:	f7fe f863 	bl	8024e08 <memmove>
 8026d42:	68a3      	ldr	r3, [r4, #8]
 8026d44:	6822      	ldr	r2, [r4, #0]
 8026d46:	1b9b      	subs	r3, r3, r6
 8026d48:	4432      	add	r2, r6
 8026d4a:	60a3      	str	r3, [r4, #8]
 8026d4c:	6022      	str	r2, [r4, #0]
 8026d4e:	2000      	movs	r0, #0
 8026d50:	e7db      	b.n	8026d0a <__ssputs_r+0x58>
 8026d52:	462a      	mov	r2, r5
 8026d54:	f7ff ff87 	bl	8026c66 <_realloc_r>
 8026d58:	4606      	mov	r6, r0
 8026d5a:	2800      	cmp	r0, #0
 8026d5c:	d1e1      	bne.n	8026d22 <__ssputs_r+0x70>
 8026d5e:	6921      	ldr	r1, [r4, #16]
 8026d60:	4650      	mov	r0, sl
 8026d62:	f7fe f873 	bl	8024e4c <_free_r>
 8026d66:	e7c7      	b.n	8026cf8 <__ssputs_r+0x46>

08026d68 <_svfiprintf_r>:
 8026d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026d6c:	4698      	mov	r8, r3
 8026d6e:	898b      	ldrh	r3, [r1, #12]
 8026d70:	061b      	lsls	r3, r3, #24
 8026d72:	b09d      	sub	sp, #116	; 0x74
 8026d74:	4607      	mov	r7, r0
 8026d76:	460d      	mov	r5, r1
 8026d78:	4614      	mov	r4, r2
 8026d7a:	d50e      	bpl.n	8026d9a <_svfiprintf_r+0x32>
 8026d7c:	690b      	ldr	r3, [r1, #16]
 8026d7e:	b963      	cbnz	r3, 8026d9a <_svfiprintf_r+0x32>
 8026d80:	2140      	movs	r1, #64	; 0x40
 8026d82:	f7fe f8b3 	bl	8024eec <_malloc_r>
 8026d86:	6028      	str	r0, [r5, #0]
 8026d88:	6128      	str	r0, [r5, #16]
 8026d8a:	b920      	cbnz	r0, 8026d96 <_svfiprintf_r+0x2e>
 8026d8c:	230c      	movs	r3, #12
 8026d8e:	603b      	str	r3, [r7, #0]
 8026d90:	f04f 30ff 	mov.w	r0, #4294967295
 8026d94:	e0d1      	b.n	8026f3a <_svfiprintf_r+0x1d2>
 8026d96:	2340      	movs	r3, #64	; 0x40
 8026d98:	616b      	str	r3, [r5, #20]
 8026d9a:	2300      	movs	r3, #0
 8026d9c:	9309      	str	r3, [sp, #36]	; 0x24
 8026d9e:	2320      	movs	r3, #32
 8026da0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8026da4:	f8cd 800c 	str.w	r8, [sp, #12]
 8026da8:	2330      	movs	r3, #48	; 0x30
 8026daa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8026f54 <_svfiprintf_r+0x1ec>
 8026dae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8026db2:	f04f 0901 	mov.w	r9, #1
 8026db6:	4623      	mov	r3, r4
 8026db8:	469a      	mov	sl, r3
 8026dba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8026dbe:	b10a      	cbz	r2, 8026dc4 <_svfiprintf_r+0x5c>
 8026dc0:	2a25      	cmp	r2, #37	; 0x25
 8026dc2:	d1f9      	bne.n	8026db8 <_svfiprintf_r+0x50>
 8026dc4:	ebba 0b04 	subs.w	fp, sl, r4
 8026dc8:	d00b      	beq.n	8026de2 <_svfiprintf_r+0x7a>
 8026dca:	465b      	mov	r3, fp
 8026dcc:	4622      	mov	r2, r4
 8026dce:	4629      	mov	r1, r5
 8026dd0:	4638      	mov	r0, r7
 8026dd2:	f7ff ff6e 	bl	8026cb2 <__ssputs_r>
 8026dd6:	3001      	adds	r0, #1
 8026dd8:	f000 80aa 	beq.w	8026f30 <_svfiprintf_r+0x1c8>
 8026ddc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026dde:	445a      	add	r2, fp
 8026de0:	9209      	str	r2, [sp, #36]	; 0x24
 8026de2:	f89a 3000 	ldrb.w	r3, [sl]
 8026de6:	2b00      	cmp	r3, #0
 8026de8:	f000 80a2 	beq.w	8026f30 <_svfiprintf_r+0x1c8>
 8026dec:	2300      	movs	r3, #0
 8026dee:	f04f 32ff 	mov.w	r2, #4294967295
 8026df2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8026df6:	f10a 0a01 	add.w	sl, sl, #1
 8026dfa:	9304      	str	r3, [sp, #16]
 8026dfc:	9307      	str	r3, [sp, #28]
 8026dfe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8026e02:	931a      	str	r3, [sp, #104]	; 0x68
 8026e04:	4654      	mov	r4, sl
 8026e06:	2205      	movs	r2, #5
 8026e08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026e0c:	4851      	ldr	r0, [pc, #324]	; (8026f54 <_svfiprintf_r+0x1ec>)
 8026e0e:	f7d9 fa7f 	bl	8000310 <memchr>
 8026e12:	9a04      	ldr	r2, [sp, #16]
 8026e14:	b9d8      	cbnz	r0, 8026e4e <_svfiprintf_r+0xe6>
 8026e16:	06d0      	lsls	r0, r2, #27
 8026e18:	bf44      	itt	mi
 8026e1a:	2320      	movmi	r3, #32
 8026e1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026e20:	0711      	lsls	r1, r2, #28
 8026e22:	bf44      	itt	mi
 8026e24:	232b      	movmi	r3, #43	; 0x2b
 8026e26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026e2a:	f89a 3000 	ldrb.w	r3, [sl]
 8026e2e:	2b2a      	cmp	r3, #42	; 0x2a
 8026e30:	d015      	beq.n	8026e5e <_svfiprintf_r+0xf6>
 8026e32:	9a07      	ldr	r2, [sp, #28]
 8026e34:	4654      	mov	r4, sl
 8026e36:	2000      	movs	r0, #0
 8026e38:	f04f 0c0a 	mov.w	ip, #10
 8026e3c:	4621      	mov	r1, r4
 8026e3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8026e42:	3b30      	subs	r3, #48	; 0x30
 8026e44:	2b09      	cmp	r3, #9
 8026e46:	d94e      	bls.n	8026ee6 <_svfiprintf_r+0x17e>
 8026e48:	b1b0      	cbz	r0, 8026e78 <_svfiprintf_r+0x110>
 8026e4a:	9207      	str	r2, [sp, #28]
 8026e4c:	e014      	b.n	8026e78 <_svfiprintf_r+0x110>
 8026e4e:	eba0 0308 	sub.w	r3, r0, r8
 8026e52:	fa09 f303 	lsl.w	r3, r9, r3
 8026e56:	4313      	orrs	r3, r2
 8026e58:	9304      	str	r3, [sp, #16]
 8026e5a:	46a2      	mov	sl, r4
 8026e5c:	e7d2      	b.n	8026e04 <_svfiprintf_r+0x9c>
 8026e5e:	9b03      	ldr	r3, [sp, #12]
 8026e60:	1d19      	adds	r1, r3, #4
 8026e62:	681b      	ldr	r3, [r3, #0]
 8026e64:	9103      	str	r1, [sp, #12]
 8026e66:	2b00      	cmp	r3, #0
 8026e68:	bfbb      	ittet	lt
 8026e6a:	425b      	neglt	r3, r3
 8026e6c:	f042 0202 	orrlt.w	r2, r2, #2
 8026e70:	9307      	strge	r3, [sp, #28]
 8026e72:	9307      	strlt	r3, [sp, #28]
 8026e74:	bfb8      	it	lt
 8026e76:	9204      	strlt	r2, [sp, #16]
 8026e78:	7823      	ldrb	r3, [r4, #0]
 8026e7a:	2b2e      	cmp	r3, #46	; 0x2e
 8026e7c:	d10c      	bne.n	8026e98 <_svfiprintf_r+0x130>
 8026e7e:	7863      	ldrb	r3, [r4, #1]
 8026e80:	2b2a      	cmp	r3, #42	; 0x2a
 8026e82:	d135      	bne.n	8026ef0 <_svfiprintf_r+0x188>
 8026e84:	9b03      	ldr	r3, [sp, #12]
 8026e86:	1d1a      	adds	r2, r3, #4
 8026e88:	681b      	ldr	r3, [r3, #0]
 8026e8a:	9203      	str	r2, [sp, #12]
 8026e8c:	2b00      	cmp	r3, #0
 8026e8e:	bfb8      	it	lt
 8026e90:	f04f 33ff 	movlt.w	r3, #4294967295
 8026e94:	3402      	adds	r4, #2
 8026e96:	9305      	str	r3, [sp, #20]
 8026e98:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8026f64 <_svfiprintf_r+0x1fc>
 8026e9c:	7821      	ldrb	r1, [r4, #0]
 8026e9e:	2203      	movs	r2, #3
 8026ea0:	4650      	mov	r0, sl
 8026ea2:	f7d9 fa35 	bl	8000310 <memchr>
 8026ea6:	b140      	cbz	r0, 8026eba <_svfiprintf_r+0x152>
 8026ea8:	2340      	movs	r3, #64	; 0x40
 8026eaa:	eba0 000a 	sub.w	r0, r0, sl
 8026eae:	fa03 f000 	lsl.w	r0, r3, r0
 8026eb2:	9b04      	ldr	r3, [sp, #16]
 8026eb4:	4303      	orrs	r3, r0
 8026eb6:	3401      	adds	r4, #1
 8026eb8:	9304      	str	r3, [sp, #16]
 8026eba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026ebe:	4826      	ldr	r0, [pc, #152]	; (8026f58 <_svfiprintf_r+0x1f0>)
 8026ec0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8026ec4:	2206      	movs	r2, #6
 8026ec6:	f7d9 fa23 	bl	8000310 <memchr>
 8026eca:	2800      	cmp	r0, #0
 8026ecc:	d038      	beq.n	8026f40 <_svfiprintf_r+0x1d8>
 8026ece:	4b23      	ldr	r3, [pc, #140]	; (8026f5c <_svfiprintf_r+0x1f4>)
 8026ed0:	bb1b      	cbnz	r3, 8026f1a <_svfiprintf_r+0x1b2>
 8026ed2:	9b03      	ldr	r3, [sp, #12]
 8026ed4:	3307      	adds	r3, #7
 8026ed6:	f023 0307 	bic.w	r3, r3, #7
 8026eda:	3308      	adds	r3, #8
 8026edc:	9303      	str	r3, [sp, #12]
 8026ede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026ee0:	4433      	add	r3, r6
 8026ee2:	9309      	str	r3, [sp, #36]	; 0x24
 8026ee4:	e767      	b.n	8026db6 <_svfiprintf_r+0x4e>
 8026ee6:	fb0c 3202 	mla	r2, ip, r2, r3
 8026eea:	460c      	mov	r4, r1
 8026eec:	2001      	movs	r0, #1
 8026eee:	e7a5      	b.n	8026e3c <_svfiprintf_r+0xd4>
 8026ef0:	2300      	movs	r3, #0
 8026ef2:	3401      	adds	r4, #1
 8026ef4:	9305      	str	r3, [sp, #20]
 8026ef6:	4619      	mov	r1, r3
 8026ef8:	f04f 0c0a 	mov.w	ip, #10
 8026efc:	4620      	mov	r0, r4
 8026efe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8026f02:	3a30      	subs	r2, #48	; 0x30
 8026f04:	2a09      	cmp	r2, #9
 8026f06:	d903      	bls.n	8026f10 <_svfiprintf_r+0x1a8>
 8026f08:	2b00      	cmp	r3, #0
 8026f0a:	d0c5      	beq.n	8026e98 <_svfiprintf_r+0x130>
 8026f0c:	9105      	str	r1, [sp, #20]
 8026f0e:	e7c3      	b.n	8026e98 <_svfiprintf_r+0x130>
 8026f10:	fb0c 2101 	mla	r1, ip, r1, r2
 8026f14:	4604      	mov	r4, r0
 8026f16:	2301      	movs	r3, #1
 8026f18:	e7f0      	b.n	8026efc <_svfiprintf_r+0x194>
 8026f1a:	ab03      	add	r3, sp, #12
 8026f1c:	9300      	str	r3, [sp, #0]
 8026f1e:	462a      	mov	r2, r5
 8026f20:	4b0f      	ldr	r3, [pc, #60]	; (8026f60 <_svfiprintf_r+0x1f8>)
 8026f22:	a904      	add	r1, sp, #16
 8026f24:	4638      	mov	r0, r7
 8026f26:	f7fe f8cb 	bl	80250c0 <_printf_float>
 8026f2a:	1c42      	adds	r2, r0, #1
 8026f2c:	4606      	mov	r6, r0
 8026f2e:	d1d6      	bne.n	8026ede <_svfiprintf_r+0x176>
 8026f30:	89ab      	ldrh	r3, [r5, #12]
 8026f32:	065b      	lsls	r3, r3, #25
 8026f34:	f53f af2c 	bmi.w	8026d90 <_svfiprintf_r+0x28>
 8026f38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8026f3a:	b01d      	add	sp, #116	; 0x74
 8026f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026f40:	ab03      	add	r3, sp, #12
 8026f42:	9300      	str	r3, [sp, #0]
 8026f44:	462a      	mov	r2, r5
 8026f46:	4b06      	ldr	r3, [pc, #24]	; (8026f60 <_svfiprintf_r+0x1f8>)
 8026f48:	a904      	add	r1, sp, #16
 8026f4a:	4638      	mov	r0, r7
 8026f4c:	f7fe fb44 	bl	80255d8 <_printf_i>
 8026f50:	e7eb      	b.n	8026f2a <_svfiprintf_r+0x1c2>
 8026f52:	bf00      	nop
 8026f54:	0809b06c 	.word	0x0809b06c
 8026f58:	0809b076 	.word	0x0809b076
 8026f5c:	080250c1 	.word	0x080250c1
 8026f60:	08026cb3 	.word	0x08026cb3
 8026f64:	0809b072 	.word	0x0809b072

08026f68 <__assert_func>:
 8026f68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8026f6a:	4614      	mov	r4, r2
 8026f6c:	461a      	mov	r2, r3
 8026f6e:	4b09      	ldr	r3, [pc, #36]	; (8026f94 <__assert_func+0x2c>)
 8026f70:	681b      	ldr	r3, [r3, #0]
 8026f72:	4605      	mov	r5, r0
 8026f74:	68d8      	ldr	r0, [r3, #12]
 8026f76:	b14c      	cbz	r4, 8026f8c <__assert_func+0x24>
 8026f78:	4b07      	ldr	r3, [pc, #28]	; (8026f98 <__assert_func+0x30>)
 8026f7a:	9100      	str	r1, [sp, #0]
 8026f7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8026f80:	4906      	ldr	r1, [pc, #24]	; (8026f9c <__assert_func+0x34>)
 8026f82:	462b      	mov	r3, r5
 8026f84:	f000 f80e 	bl	8026fa4 <fiprintf>
 8026f88:	f000 fa62 	bl	8027450 <abort>
 8026f8c:	4b04      	ldr	r3, [pc, #16]	; (8026fa0 <__assert_func+0x38>)
 8026f8e:	461c      	mov	r4, r3
 8026f90:	e7f3      	b.n	8026f7a <__assert_func+0x12>
 8026f92:	bf00      	nop
 8026f94:	20007718 	.word	0x20007718
 8026f98:	0809b07d 	.word	0x0809b07d
 8026f9c:	0809b08a 	.word	0x0809b08a
 8026fa0:	0809b0b8 	.word	0x0809b0b8

08026fa4 <fiprintf>:
 8026fa4:	b40e      	push	{r1, r2, r3}
 8026fa6:	b503      	push	{r0, r1, lr}
 8026fa8:	4601      	mov	r1, r0
 8026faa:	ab03      	add	r3, sp, #12
 8026fac:	4805      	ldr	r0, [pc, #20]	; (8026fc4 <fiprintf+0x20>)
 8026fae:	f853 2b04 	ldr.w	r2, [r3], #4
 8026fb2:	6800      	ldr	r0, [r0, #0]
 8026fb4:	9301      	str	r3, [sp, #4]
 8026fb6:	f000 f84d 	bl	8027054 <_vfiprintf_r>
 8026fba:	b002      	add	sp, #8
 8026fbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8026fc0:	b003      	add	sp, #12
 8026fc2:	4770      	bx	lr
 8026fc4:	20007718 	.word	0x20007718

08026fc8 <__retarget_lock_init_recursive>:
 8026fc8:	4770      	bx	lr

08026fca <__retarget_lock_acquire_recursive>:
 8026fca:	4770      	bx	lr

08026fcc <__retarget_lock_release_recursive>:
 8026fcc:	4770      	bx	lr

08026fce <__ascii_mbtowc>:
 8026fce:	b082      	sub	sp, #8
 8026fd0:	b901      	cbnz	r1, 8026fd4 <__ascii_mbtowc+0x6>
 8026fd2:	a901      	add	r1, sp, #4
 8026fd4:	b142      	cbz	r2, 8026fe8 <__ascii_mbtowc+0x1a>
 8026fd6:	b14b      	cbz	r3, 8026fec <__ascii_mbtowc+0x1e>
 8026fd8:	7813      	ldrb	r3, [r2, #0]
 8026fda:	600b      	str	r3, [r1, #0]
 8026fdc:	7812      	ldrb	r2, [r2, #0]
 8026fde:	1e10      	subs	r0, r2, #0
 8026fe0:	bf18      	it	ne
 8026fe2:	2001      	movne	r0, #1
 8026fe4:	b002      	add	sp, #8
 8026fe6:	4770      	bx	lr
 8026fe8:	4610      	mov	r0, r2
 8026fea:	e7fb      	b.n	8026fe4 <__ascii_mbtowc+0x16>
 8026fec:	f06f 0001 	mvn.w	r0, #1
 8026ff0:	e7f8      	b.n	8026fe4 <__ascii_mbtowc+0x16>

08026ff2 <_malloc_usable_size_r>:
 8026ff2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8026ff6:	1f18      	subs	r0, r3, #4
 8026ff8:	2b00      	cmp	r3, #0
 8026ffa:	bfbc      	itt	lt
 8026ffc:	580b      	ldrlt	r3, [r1, r0]
 8026ffe:	18c0      	addlt	r0, r0, r3
 8027000:	4770      	bx	lr

08027002 <__sfputc_r>:
 8027002:	6893      	ldr	r3, [r2, #8]
 8027004:	3b01      	subs	r3, #1
 8027006:	2b00      	cmp	r3, #0
 8027008:	b410      	push	{r4}
 802700a:	6093      	str	r3, [r2, #8]
 802700c:	da08      	bge.n	8027020 <__sfputc_r+0x1e>
 802700e:	6994      	ldr	r4, [r2, #24]
 8027010:	42a3      	cmp	r3, r4
 8027012:	db01      	blt.n	8027018 <__sfputc_r+0x16>
 8027014:	290a      	cmp	r1, #10
 8027016:	d103      	bne.n	8027020 <__sfputc_r+0x1e>
 8027018:	f85d 4b04 	ldr.w	r4, [sp], #4
 802701c:	f000 b94a 	b.w	80272b4 <__swbuf_r>
 8027020:	6813      	ldr	r3, [r2, #0]
 8027022:	1c58      	adds	r0, r3, #1
 8027024:	6010      	str	r0, [r2, #0]
 8027026:	7019      	strb	r1, [r3, #0]
 8027028:	4608      	mov	r0, r1
 802702a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802702e:	4770      	bx	lr

08027030 <__sfputs_r>:
 8027030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027032:	4606      	mov	r6, r0
 8027034:	460f      	mov	r7, r1
 8027036:	4614      	mov	r4, r2
 8027038:	18d5      	adds	r5, r2, r3
 802703a:	42ac      	cmp	r4, r5
 802703c:	d101      	bne.n	8027042 <__sfputs_r+0x12>
 802703e:	2000      	movs	r0, #0
 8027040:	e007      	b.n	8027052 <__sfputs_r+0x22>
 8027042:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027046:	463a      	mov	r2, r7
 8027048:	4630      	mov	r0, r6
 802704a:	f7ff ffda 	bl	8027002 <__sfputc_r>
 802704e:	1c43      	adds	r3, r0, #1
 8027050:	d1f3      	bne.n	802703a <__sfputs_r+0xa>
 8027052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08027054 <_vfiprintf_r>:
 8027054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027058:	460d      	mov	r5, r1
 802705a:	b09d      	sub	sp, #116	; 0x74
 802705c:	4614      	mov	r4, r2
 802705e:	4698      	mov	r8, r3
 8027060:	4606      	mov	r6, r0
 8027062:	b118      	cbz	r0, 802706c <_vfiprintf_r+0x18>
 8027064:	6983      	ldr	r3, [r0, #24]
 8027066:	b90b      	cbnz	r3, 802706c <_vfiprintf_r+0x18>
 8027068:	f000 fb14 	bl	8027694 <__sinit>
 802706c:	4b89      	ldr	r3, [pc, #548]	; (8027294 <_vfiprintf_r+0x240>)
 802706e:	429d      	cmp	r5, r3
 8027070:	d11b      	bne.n	80270aa <_vfiprintf_r+0x56>
 8027072:	6875      	ldr	r5, [r6, #4]
 8027074:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8027076:	07d9      	lsls	r1, r3, #31
 8027078:	d405      	bmi.n	8027086 <_vfiprintf_r+0x32>
 802707a:	89ab      	ldrh	r3, [r5, #12]
 802707c:	059a      	lsls	r2, r3, #22
 802707e:	d402      	bmi.n	8027086 <_vfiprintf_r+0x32>
 8027080:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8027082:	f7ff ffa2 	bl	8026fca <__retarget_lock_acquire_recursive>
 8027086:	89ab      	ldrh	r3, [r5, #12]
 8027088:	071b      	lsls	r3, r3, #28
 802708a:	d501      	bpl.n	8027090 <_vfiprintf_r+0x3c>
 802708c:	692b      	ldr	r3, [r5, #16]
 802708e:	b9eb      	cbnz	r3, 80270cc <_vfiprintf_r+0x78>
 8027090:	4629      	mov	r1, r5
 8027092:	4630      	mov	r0, r6
 8027094:	f000 f96e 	bl	8027374 <__swsetup_r>
 8027098:	b1c0      	cbz	r0, 80270cc <_vfiprintf_r+0x78>
 802709a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802709c:	07dc      	lsls	r4, r3, #31
 802709e:	d50e      	bpl.n	80270be <_vfiprintf_r+0x6a>
 80270a0:	f04f 30ff 	mov.w	r0, #4294967295
 80270a4:	b01d      	add	sp, #116	; 0x74
 80270a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80270aa:	4b7b      	ldr	r3, [pc, #492]	; (8027298 <_vfiprintf_r+0x244>)
 80270ac:	429d      	cmp	r5, r3
 80270ae:	d101      	bne.n	80270b4 <_vfiprintf_r+0x60>
 80270b0:	68b5      	ldr	r5, [r6, #8]
 80270b2:	e7df      	b.n	8027074 <_vfiprintf_r+0x20>
 80270b4:	4b79      	ldr	r3, [pc, #484]	; (802729c <_vfiprintf_r+0x248>)
 80270b6:	429d      	cmp	r5, r3
 80270b8:	bf08      	it	eq
 80270ba:	68f5      	ldreq	r5, [r6, #12]
 80270bc:	e7da      	b.n	8027074 <_vfiprintf_r+0x20>
 80270be:	89ab      	ldrh	r3, [r5, #12]
 80270c0:	0598      	lsls	r0, r3, #22
 80270c2:	d4ed      	bmi.n	80270a0 <_vfiprintf_r+0x4c>
 80270c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80270c6:	f7ff ff81 	bl	8026fcc <__retarget_lock_release_recursive>
 80270ca:	e7e9      	b.n	80270a0 <_vfiprintf_r+0x4c>
 80270cc:	2300      	movs	r3, #0
 80270ce:	9309      	str	r3, [sp, #36]	; 0x24
 80270d0:	2320      	movs	r3, #32
 80270d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80270d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80270da:	2330      	movs	r3, #48	; 0x30
 80270dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80272a0 <_vfiprintf_r+0x24c>
 80270e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80270e4:	f04f 0901 	mov.w	r9, #1
 80270e8:	4623      	mov	r3, r4
 80270ea:	469a      	mov	sl, r3
 80270ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80270f0:	b10a      	cbz	r2, 80270f6 <_vfiprintf_r+0xa2>
 80270f2:	2a25      	cmp	r2, #37	; 0x25
 80270f4:	d1f9      	bne.n	80270ea <_vfiprintf_r+0x96>
 80270f6:	ebba 0b04 	subs.w	fp, sl, r4
 80270fa:	d00b      	beq.n	8027114 <_vfiprintf_r+0xc0>
 80270fc:	465b      	mov	r3, fp
 80270fe:	4622      	mov	r2, r4
 8027100:	4629      	mov	r1, r5
 8027102:	4630      	mov	r0, r6
 8027104:	f7ff ff94 	bl	8027030 <__sfputs_r>
 8027108:	3001      	adds	r0, #1
 802710a:	f000 80aa 	beq.w	8027262 <_vfiprintf_r+0x20e>
 802710e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027110:	445a      	add	r2, fp
 8027112:	9209      	str	r2, [sp, #36]	; 0x24
 8027114:	f89a 3000 	ldrb.w	r3, [sl]
 8027118:	2b00      	cmp	r3, #0
 802711a:	f000 80a2 	beq.w	8027262 <_vfiprintf_r+0x20e>
 802711e:	2300      	movs	r3, #0
 8027120:	f04f 32ff 	mov.w	r2, #4294967295
 8027124:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8027128:	f10a 0a01 	add.w	sl, sl, #1
 802712c:	9304      	str	r3, [sp, #16]
 802712e:	9307      	str	r3, [sp, #28]
 8027130:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8027134:	931a      	str	r3, [sp, #104]	; 0x68
 8027136:	4654      	mov	r4, sl
 8027138:	2205      	movs	r2, #5
 802713a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802713e:	4858      	ldr	r0, [pc, #352]	; (80272a0 <_vfiprintf_r+0x24c>)
 8027140:	f7d9 f8e6 	bl	8000310 <memchr>
 8027144:	9a04      	ldr	r2, [sp, #16]
 8027146:	b9d8      	cbnz	r0, 8027180 <_vfiprintf_r+0x12c>
 8027148:	06d1      	lsls	r1, r2, #27
 802714a:	bf44      	itt	mi
 802714c:	2320      	movmi	r3, #32
 802714e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8027152:	0713      	lsls	r3, r2, #28
 8027154:	bf44      	itt	mi
 8027156:	232b      	movmi	r3, #43	; 0x2b
 8027158:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802715c:	f89a 3000 	ldrb.w	r3, [sl]
 8027160:	2b2a      	cmp	r3, #42	; 0x2a
 8027162:	d015      	beq.n	8027190 <_vfiprintf_r+0x13c>
 8027164:	9a07      	ldr	r2, [sp, #28]
 8027166:	4654      	mov	r4, sl
 8027168:	2000      	movs	r0, #0
 802716a:	f04f 0c0a 	mov.w	ip, #10
 802716e:	4621      	mov	r1, r4
 8027170:	f811 3b01 	ldrb.w	r3, [r1], #1
 8027174:	3b30      	subs	r3, #48	; 0x30
 8027176:	2b09      	cmp	r3, #9
 8027178:	d94e      	bls.n	8027218 <_vfiprintf_r+0x1c4>
 802717a:	b1b0      	cbz	r0, 80271aa <_vfiprintf_r+0x156>
 802717c:	9207      	str	r2, [sp, #28]
 802717e:	e014      	b.n	80271aa <_vfiprintf_r+0x156>
 8027180:	eba0 0308 	sub.w	r3, r0, r8
 8027184:	fa09 f303 	lsl.w	r3, r9, r3
 8027188:	4313      	orrs	r3, r2
 802718a:	9304      	str	r3, [sp, #16]
 802718c:	46a2      	mov	sl, r4
 802718e:	e7d2      	b.n	8027136 <_vfiprintf_r+0xe2>
 8027190:	9b03      	ldr	r3, [sp, #12]
 8027192:	1d19      	adds	r1, r3, #4
 8027194:	681b      	ldr	r3, [r3, #0]
 8027196:	9103      	str	r1, [sp, #12]
 8027198:	2b00      	cmp	r3, #0
 802719a:	bfbb      	ittet	lt
 802719c:	425b      	neglt	r3, r3
 802719e:	f042 0202 	orrlt.w	r2, r2, #2
 80271a2:	9307      	strge	r3, [sp, #28]
 80271a4:	9307      	strlt	r3, [sp, #28]
 80271a6:	bfb8      	it	lt
 80271a8:	9204      	strlt	r2, [sp, #16]
 80271aa:	7823      	ldrb	r3, [r4, #0]
 80271ac:	2b2e      	cmp	r3, #46	; 0x2e
 80271ae:	d10c      	bne.n	80271ca <_vfiprintf_r+0x176>
 80271b0:	7863      	ldrb	r3, [r4, #1]
 80271b2:	2b2a      	cmp	r3, #42	; 0x2a
 80271b4:	d135      	bne.n	8027222 <_vfiprintf_r+0x1ce>
 80271b6:	9b03      	ldr	r3, [sp, #12]
 80271b8:	1d1a      	adds	r2, r3, #4
 80271ba:	681b      	ldr	r3, [r3, #0]
 80271bc:	9203      	str	r2, [sp, #12]
 80271be:	2b00      	cmp	r3, #0
 80271c0:	bfb8      	it	lt
 80271c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80271c6:	3402      	adds	r4, #2
 80271c8:	9305      	str	r3, [sp, #20]
 80271ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80272b0 <_vfiprintf_r+0x25c>
 80271ce:	7821      	ldrb	r1, [r4, #0]
 80271d0:	2203      	movs	r2, #3
 80271d2:	4650      	mov	r0, sl
 80271d4:	f7d9 f89c 	bl	8000310 <memchr>
 80271d8:	b140      	cbz	r0, 80271ec <_vfiprintf_r+0x198>
 80271da:	2340      	movs	r3, #64	; 0x40
 80271dc:	eba0 000a 	sub.w	r0, r0, sl
 80271e0:	fa03 f000 	lsl.w	r0, r3, r0
 80271e4:	9b04      	ldr	r3, [sp, #16]
 80271e6:	4303      	orrs	r3, r0
 80271e8:	3401      	adds	r4, #1
 80271ea:	9304      	str	r3, [sp, #16]
 80271ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80271f0:	482c      	ldr	r0, [pc, #176]	; (80272a4 <_vfiprintf_r+0x250>)
 80271f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80271f6:	2206      	movs	r2, #6
 80271f8:	f7d9 f88a 	bl	8000310 <memchr>
 80271fc:	2800      	cmp	r0, #0
 80271fe:	d03f      	beq.n	8027280 <_vfiprintf_r+0x22c>
 8027200:	4b29      	ldr	r3, [pc, #164]	; (80272a8 <_vfiprintf_r+0x254>)
 8027202:	bb1b      	cbnz	r3, 802724c <_vfiprintf_r+0x1f8>
 8027204:	9b03      	ldr	r3, [sp, #12]
 8027206:	3307      	adds	r3, #7
 8027208:	f023 0307 	bic.w	r3, r3, #7
 802720c:	3308      	adds	r3, #8
 802720e:	9303      	str	r3, [sp, #12]
 8027210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027212:	443b      	add	r3, r7
 8027214:	9309      	str	r3, [sp, #36]	; 0x24
 8027216:	e767      	b.n	80270e8 <_vfiprintf_r+0x94>
 8027218:	fb0c 3202 	mla	r2, ip, r2, r3
 802721c:	460c      	mov	r4, r1
 802721e:	2001      	movs	r0, #1
 8027220:	e7a5      	b.n	802716e <_vfiprintf_r+0x11a>
 8027222:	2300      	movs	r3, #0
 8027224:	3401      	adds	r4, #1
 8027226:	9305      	str	r3, [sp, #20]
 8027228:	4619      	mov	r1, r3
 802722a:	f04f 0c0a 	mov.w	ip, #10
 802722e:	4620      	mov	r0, r4
 8027230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8027234:	3a30      	subs	r2, #48	; 0x30
 8027236:	2a09      	cmp	r2, #9
 8027238:	d903      	bls.n	8027242 <_vfiprintf_r+0x1ee>
 802723a:	2b00      	cmp	r3, #0
 802723c:	d0c5      	beq.n	80271ca <_vfiprintf_r+0x176>
 802723e:	9105      	str	r1, [sp, #20]
 8027240:	e7c3      	b.n	80271ca <_vfiprintf_r+0x176>
 8027242:	fb0c 2101 	mla	r1, ip, r1, r2
 8027246:	4604      	mov	r4, r0
 8027248:	2301      	movs	r3, #1
 802724a:	e7f0      	b.n	802722e <_vfiprintf_r+0x1da>
 802724c:	ab03      	add	r3, sp, #12
 802724e:	9300      	str	r3, [sp, #0]
 8027250:	462a      	mov	r2, r5
 8027252:	4b16      	ldr	r3, [pc, #88]	; (80272ac <_vfiprintf_r+0x258>)
 8027254:	a904      	add	r1, sp, #16
 8027256:	4630      	mov	r0, r6
 8027258:	f7fd ff32 	bl	80250c0 <_printf_float>
 802725c:	4607      	mov	r7, r0
 802725e:	1c78      	adds	r0, r7, #1
 8027260:	d1d6      	bne.n	8027210 <_vfiprintf_r+0x1bc>
 8027262:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8027264:	07d9      	lsls	r1, r3, #31
 8027266:	d405      	bmi.n	8027274 <_vfiprintf_r+0x220>
 8027268:	89ab      	ldrh	r3, [r5, #12]
 802726a:	059a      	lsls	r2, r3, #22
 802726c:	d402      	bmi.n	8027274 <_vfiprintf_r+0x220>
 802726e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8027270:	f7ff feac 	bl	8026fcc <__retarget_lock_release_recursive>
 8027274:	89ab      	ldrh	r3, [r5, #12]
 8027276:	065b      	lsls	r3, r3, #25
 8027278:	f53f af12 	bmi.w	80270a0 <_vfiprintf_r+0x4c>
 802727c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802727e:	e711      	b.n	80270a4 <_vfiprintf_r+0x50>
 8027280:	ab03      	add	r3, sp, #12
 8027282:	9300      	str	r3, [sp, #0]
 8027284:	462a      	mov	r2, r5
 8027286:	4b09      	ldr	r3, [pc, #36]	; (80272ac <_vfiprintf_r+0x258>)
 8027288:	a904      	add	r1, sp, #16
 802728a:	4630      	mov	r0, r6
 802728c:	f7fe f9a4 	bl	80255d8 <_printf_i>
 8027290:	e7e4      	b.n	802725c <_vfiprintf_r+0x208>
 8027292:	bf00      	nop
 8027294:	0809b0e4 	.word	0x0809b0e4
 8027298:	0809b104 	.word	0x0809b104
 802729c:	0809b0c4 	.word	0x0809b0c4
 80272a0:	0809b06c 	.word	0x0809b06c
 80272a4:	0809b076 	.word	0x0809b076
 80272a8:	080250c1 	.word	0x080250c1
 80272ac:	08027031 	.word	0x08027031
 80272b0:	0809b072 	.word	0x0809b072

080272b4 <__swbuf_r>:
 80272b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80272b6:	460e      	mov	r6, r1
 80272b8:	4614      	mov	r4, r2
 80272ba:	4605      	mov	r5, r0
 80272bc:	b118      	cbz	r0, 80272c6 <__swbuf_r+0x12>
 80272be:	6983      	ldr	r3, [r0, #24]
 80272c0:	b90b      	cbnz	r3, 80272c6 <__swbuf_r+0x12>
 80272c2:	f000 f9e7 	bl	8027694 <__sinit>
 80272c6:	4b21      	ldr	r3, [pc, #132]	; (802734c <__swbuf_r+0x98>)
 80272c8:	429c      	cmp	r4, r3
 80272ca:	d12b      	bne.n	8027324 <__swbuf_r+0x70>
 80272cc:	686c      	ldr	r4, [r5, #4]
 80272ce:	69a3      	ldr	r3, [r4, #24]
 80272d0:	60a3      	str	r3, [r4, #8]
 80272d2:	89a3      	ldrh	r3, [r4, #12]
 80272d4:	071a      	lsls	r2, r3, #28
 80272d6:	d52f      	bpl.n	8027338 <__swbuf_r+0x84>
 80272d8:	6923      	ldr	r3, [r4, #16]
 80272da:	b36b      	cbz	r3, 8027338 <__swbuf_r+0x84>
 80272dc:	6923      	ldr	r3, [r4, #16]
 80272de:	6820      	ldr	r0, [r4, #0]
 80272e0:	1ac0      	subs	r0, r0, r3
 80272e2:	6963      	ldr	r3, [r4, #20]
 80272e4:	b2f6      	uxtb	r6, r6
 80272e6:	4283      	cmp	r3, r0
 80272e8:	4637      	mov	r7, r6
 80272ea:	dc04      	bgt.n	80272f6 <__swbuf_r+0x42>
 80272ec:	4621      	mov	r1, r4
 80272ee:	4628      	mov	r0, r5
 80272f0:	f000 f93c 	bl	802756c <_fflush_r>
 80272f4:	bb30      	cbnz	r0, 8027344 <__swbuf_r+0x90>
 80272f6:	68a3      	ldr	r3, [r4, #8]
 80272f8:	3b01      	subs	r3, #1
 80272fa:	60a3      	str	r3, [r4, #8]
 80272fc:	6823      	ldr	r3, [r4, #0]
 80272fe:	1c5a      	adds	r2, r3, #1
 8027300:	6022      	str	r2, [r4, #0]
 8027302:	701e      	strb	r6, [r3, #0]
 8027304:	6963      	ldr	r3, [r4, #20]
 8027306:	3001      	adds	r0, #1
 8027308:	4283      	cmp	r3, r0
 802730a:	d004      	beq.n	8027316 <__swbuf_r+0x62>
 802730c:	89a3      	ldrh	r3, [r4, #12]
 802730e:	07db      	lsls	r3, r3, #31
 8027310:	d506      	bpl.n	8027320 <__swbuf_r+0x6c>
 8027312:	2e0a      	cmp	r6, #10
 8027314:	d104      	bne.n	8027320 <__swbuf_r+0x6c>
 8027316:	4621      	mov	r1, r4
 8027318:	4628      	mov	r0, r5
 802731a:	f000 f927 	bl	802756c <_fflush_r>
 802731e:	b988      	cbnz	r0, 8027344 <__swbuf_r+0x90>
 8027320:	4638      	mov	r0, r7
 8027322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027324:	4b0a      	ldr	r3, [pc, #40]	; (8027350 <__swbuf_r+0x9c>)
 8027326:	429c      	cmp	r4, r3
 8027328:	d101      	bne.n	802732e <__swbuf_r+0x7a>
 802732a:	68ac      	ldr	r4, [r5, #8]
 802732c:	e7cf      	b.n	80272ce <__swbuf_r+0x1a>
 802732e:	4b09      	ldr	r3, [pc, #36]	; (8027354 <__swbuf_r+0xa0>)
 8027330:	429c      	cmp	r4, r3
 8027332:	bf08      	it	eq
 8027334:	68ec      	ldreq	r4, [r5, #12]
 8027336:	e7ca      	b.n	80272ce <__swbuf_r+0x1a>
 8027338:	4621      	mov	r1, r4
 802733a:	4628      	mov	r0, r5
 802733c:	f000 f81a 	bl	8027374 <__swsetup_r>
 8027340:	2800      	cmp	r0, #0
 8027342:	d0cb      	beq.n	80272dc <__swbuf_r+0x28>
 8027344:	f04f 37ff 	mov.w	r7, #4294967295
 8027348:	e7ea      	b.n	8027320 <__swbuf_r+0x6c>
 802734a:	bf00      	nop
 802734c:	0809b0e4 	.word	0x0809b0e4
 8027350:	0809b104 	.word	0x0809b104
 8027354:	0809b0c4 	.word	0x0809b0c4

08027358 <__ascii_wctomb>:
 8027358:	b149      	cbz	r1, 802736e <__ascii_wctomb+0x16>
 802735a:	2aff      	cmp	r2, #255	; 0xff
 802735c:	bf85      	ittet	hi
 802735e:	238a      	movhi	r3, #138	; 0x8a
 8027360:	6003      	strhi	r3, [r0, #0]
 8027362:	700a      	strbls	r2, [r1, #0]
 8027364:	f04f 30ff 	movhi.w	r0, #4294967295
 8027368:	bf98      	it	ls
 802736a:	2001      	movls	r0, #1
 802736c:	4770      	bx	lr
 802736e:	4608      	mov	r0, r1
 8027370:	4770      	bx	lr
	...

08027374 <__swsetup_r>:
 8027374:	4b32      	ldr	r3, [pc, #200]	; (8027440 <__swsetup_r+0xcc>)
 8027376:	b570      	push	{r4, r5, r6, lr}
 8027378:	681d      	ldr	r5, [r3, #0]
 802737a:	4606      	mov	r6, r0
 802737c:	460c      	mov	r4, r1
 802737e:	b125      	cbz	r5, 802738a <__swsetup_r+0x16>
 8027380:	69ab      	ldr	r3, [r5, #24]
 8027382:	b913      	cbnz	r3, 802738a <__swsetup_r+0x16>
 8027384:	4628      	mov	r0, r5
 8027386:	f000 f985 	bl	8027694 <__sinit>
 802738a:	4b2e      	ldr	r3, [pc, #184]	; (8027444 <__swsetup_r+0xd0>)
 802738c:	429c      	cmp	r4, r3
 802738e:	d10f      	bne.n	80273b0 <__swsetup_r+0x3c>
 8027390:	686c      	ldr	r4, [r5, #4]
 8027392:	89a3      	ldrh	r3, [r4, #12]
 8027394:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8027398:	0719      	lsls	r1, r3, #28
 802739a:	d42c      	bmi.n	80273f6 <__swsetup_r+0x82>
 802739c:	06dd      	lsls	r5, r3, #27
 802739e:	d411      	bmi.n	80273c4 <__swsetup_r+0x50>
 80273a0:	2309      	movs	r3, #9
 80273a2:	6033      	str	r3, [r6, #0]
 80273a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80273a8:	81a3      	strh	r3, [r4, #12]
 80273aa:	f04f 30ff 	mov.w	r0, #4294967295
 80273ae:	e03e      	b.n	802742e <__swsetup_r+0xba>
 80273b0:	4b25      	ldr	r3, [pc, #148]	; (8027448 <__swsetup_r+0xd4>)
 80273b2:	429c      	cmp	r4, r3
 80273b4:	d101      	bne.n	80273ba <__swsetup_r+0x46>
 80273b6:	68ac      	ldr	r4, [r5, #8]
 80273b8:	e7eb      	b.n	8027392 <__swsetup_r+0x1e>
 80273ba:	4b24      	ldr	r3, [pc, #144]	; (802744c <__swsetup_r+0xd8>)
 80273bc:	429c      	cmp	r4, r3
 80273be:	bf08      	it	eq
 80273c0:	68ec      	ldreq	r4, [r5, #12]
 80273c2:	e7e6      	b.n	8027392 <__swsetup_r+0x1e>
 80273c4:	0758      	lsls	r0, r3, #29
 80273c6:	d512      	bpl.n	80273ee <__swsetup_r+0x7a>
 80273c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80273ca:	b141      	cbz	r1, 80273de <__swsetup_r+0x6a>
 80273cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80273d0:	4299      	cmp	r1, r3
 80273d2:	d002      	beq.n	80273da <__swsetup_r+0x66>
 80273d4:	4630      	mov	r0, r6
 80273d6:	f7fd fd39 	bl	8024e4c <_free_r>
 80273da:	2300      	movs	r3, #0
 80273dc:	6363      	str	r3, [r4, #52]	; 0x34
 80273de:	89a3      	ldrh	r3, [r4, #12]
 80273e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80273e4:	81a3      	strh	r3, [r4, #12]
 80273e6:	2300      	movs	r3, #0
 80273e8:	6063      	str	r3, [r4, #4]
 80273ea:	6923      	ldr	r3, [r4, #16]
 80273ec:	6023      	str	r3, [r4, #0]
 80273ee:	89a3      	ldrh	r3, [r4, #12]
 80273f0:	f043 0308 	orr.w	r3, r3, #8
 80273f4:	81a3      	strh	r3, [r4, #12]
 80273f6:	6923      	ldr	r3, [r4, #16]
 80273f8:	b94b      	cbnz	r3, 802740e <__swsetup_r+0x9a>
 80273fa:	89a3      	ldrh	r3, [r4, #12]
 80273fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8027400:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8027404:	d003      	beq.n	802740e <__swsetup_r+0x9a>
 8027406:	4621      	mov	r1, r4
 8027408:	4630      	mov	r0, r6
 802740a:	f000 fa05 	bl	8027818 <__smakebuf_r>
 802740e:	89a0      	ldrh	r0, [r4, #12]
 8027410:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8027414:	f010 0301 	ands.w	r3, r0, #1
 8027418:	d00a      	beq.n	8027430 <__swsetup_r+0xbc>
 802741a:	2300      	movs	r3, #0
 802741c:	60a3      	str	r3, [r4, #8]
 802741e:	6963      	ldr	r3, [r4, #20]
 8027420:	425b      	negs	r3, r3
 8027422:	61a3      	str	r3, [r4, #24]
 8027424:	6923      	ldr	r3, [r4, #16]
 8027426:	b943      	cbnz	r3, 802743a <__swsetup_r+0xc6>
 8027428:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802742c:	d1ba      	bne.n	80273a4 <__swsetup_r+0x30>
 802742e:	bd70      	pop	{r4, r5, r6, pc}
 8027430:	0781      	lsls	r1, r0, #30
 8027432:	bf58      	it	pl
 8027434:	6963      	ldrpl	r3, [r4, #20]
 8027436:	60a3      	str	r3, [r4, #8]
 8027438:	e7f4      	b.n	8027424 <__swsetup_r+0xb0>
 802743a:	2000      	movs	r0, #0
 802743c:	e7f7      	b.n	802742e <__swsetup_r+0xba>
 802743e:	bf00      	nop
 8027440:	20007718 	.word	0x20007718
 8027444:	0809b0e4 	.word	0x0809b0e4
 8027448:	0809b104 	.word	0x0809b104
 802744c:	0809b0c4 	.word	0x0809b0c4

08027450 <abort>:
 8027450:	b508      	push	{r3, lr}
 8027452:	2006      	movs	r0, #6
 8027454:	f000 fa48 	bl	80278e8 <raise>
 8027458:	2001      	movs	r0, #1
 802745a:	f000 feed 	bl	8028238 <_exit>
	...

08027460 <__sflush_r>:
 8027460:	898a      	ldrh	r2, [r1, #12]
 8027462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027466:	4605      	mov	r5, r0
 8027468:	0710      	lsls	r0, r2, #28
 802746a:	460c      	mov	r4, r1
 802746c:	d458      	bmi.n	8027520 <__sflush_r+0xc0>
 802746e:	684b      	ldr	r3, [r1, #4]
 8027470:	2b00      	cmp	r3, #0
 8027472:	dc05      	bgt.n	8027480 <__sflush_r+0x20>
 8027474:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8027476:	2b00      	cmp	r3, #0
 8027478:	dc02      	bgt.n	8027480 <__sflush_r+0x20>
 802747a:	2000      	movs	r0, #0
 802747c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027480:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8027482:	2e00      	cmp	r6, #0
 8027484:	d0f9      	beq.n	802747a <__sflush_r+0x1a>
 8027486:	2300      	movs	r3, #0
 8027488:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802748c:	682f      	ldr	r7, [r5, #0]
 802748e:	602b      	str	r3, [r5, #0]
 8027490:	d032      	beq.n	80274f8 <__sflush_r+0x98>
 8027492:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8027494:	89a3      	ldrh	r3, [r4, #12]
 8027496:	075a      	lsls	r2, r3, #29
 8027498:	d505      	bpl.n	80274a6 <__sflush_r+0x46>
 802749a:	6863      	ldr	r3, [r4, #4]
 802749c:	1ac0      	subs	r0, r0, r3
 802749e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80274a0:	b10b      	cbz	r3, 80274a6 <__sflush_r+0x46>
 80274a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80274a4:	1ac0      	subs	r0, r0, r3
 80274a6:	2300      	movs	r3, #0
 80274a8:	4602      	mov	r2, r0
 80274aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80274ac:	6a21      	ldr	r1, [r4, #32]
 80274ae:	4628      	mov	r0, r5
 80274b0:	47b0      	blx	r6
 80274b2:	1c43      	adds	r3, r0, #1
 80274b4:	89a3      	ldrh	r3, [r4, #12]
 80274b6:	d106      	bne.n	80274c6 <__sflush_r+0x66>
 80274b8:	6829      	ldr	r1, [r5, #0]
 80274ba:	291d      	cmp	r1, #29
 80274bc:	d82c      	bhi.n	8027518 <__sflush_r+0xb8>
 80274be:	4a2a      	ldr	r2, [pc, #168]	; (8027568 <__sflush_r+0x108>)
 80274c0:	40ca      	lsrs	r2, r1
 80274c2:	07d6      	lsls	r6, r2, #31
 80274c4:	d528      	bpl.n	8027518 <__sflush_r+0xb8>
 80274c6:	2200      	movs	r2, #0
 80274c8:	6062      	str	r2, [r4, #4]
 80274ca:	04d9      	lsls	r1, r3, #19
 80274cc:	6922      	ldr	r2, [r4, #16]
 80274ce:	6022      	str	r2, [r4, #0]
 80274d0:	d504      	bpl.n	80274dc <__sflush_r+0x7c>
 80274d2:	1c42      	adds	r2, r0, #1
 80274d4:	d101      	bne.n	80274da <__sflush_r+0x7a>
 80274d6:	682b      	ldr	r3, [r5, #0]
 80274d8:	b903      	cbnz	r3, 80274dc <__sflush_r+0x7c>
 80274da:	6560      	str	r0, [r4, #84]	; 0x54
 80274dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80274de:	602f      	str	r7, [r5, #0]
 80274e0:	2900      	cmp	r1, #0
 80274e2:	d0ca      	beq.n	802747a <__sflush_r+0x1a>
 80274e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80274e8:	4299      	cmp	r1, r3
 80274ea:	d002      	beq.n	80274f2 <__sflush_r+0x92>
 80274ec:	4628      	mov	r0, r5
 80274ee:	f7fd fcad 	bl	8024e4c <_free_r>
 80274f2:	2000      	movs	r0, #0
 80274f4:	6360      	str	r0, [r4, #52]	; 0x34
 80274f6:	e7c1      	b.n	802747c <__sflush_r+0x1c>
 80274f8:	6a21      	ldr	r1, [r4, #32]
 80274fa:	2301      	movs	r3, #1
 80274fc:	4628      	mov	r0, r5
 80274fe:	47b0      	blx	r6
 8027500:	1c41      	adds	r1, r0, #1
 8027502:	d1c7      	bne.n	8027494 <__sflush_r+0x34>
 8027504:	682b      	ldr	r3, [r5, #0]
 8027506:	2b00      	cmp	r3, #0
 8027508:	d0c4      	beq.n	8027494 <__sflush_r+0x34>
 802750a:	2b1d      	cmp	r3, #29
 802750c:	d001      	beq.n	8027512 <__sflush_r+0xb2>
 802750e:	2b16      	cmp	r3, #22
 8027510:	d101      	bne.n	8027516 <__sflush_r+0xb6>
 8027512:	602f      	str	r7, [r5, #0]
 8027514:	e7b1      	b.n	802747a <__sflush_r+0x1a>
 8027516:	89a3      	ldrh	r3, [r4, #12]
 8027518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802751c:	81a3      	strh	r3, [r4, #12]
 802751e:	e7ad      	b.n	802747c <__sflush_r+0x1c>
 8027520:	690f      	ldr	r7, [r1, #16]
 8027522:	2f00      	cmp	r7, #0
 8027524:	d0a9      	beq.n	802747a <__sflush_r+0x1a>
 8027526:	0793      	lsls	r3, r2, #30
 8027528:	680e      	ldr	r6, [r1, #0]
 802752a:	bf08      	it	eq
 802752c:	694b      	ldreq	r3, [r1, #20]
 802752e:	600f      	str	r7, [r1, #0]
 8027530:	bf18      	it	ne
 8027532:	2300      	movne	r3, #0
 8027534:	eba6 0807 	sub.w	r8, r6, r7
 8027538:	608b      	str	r3, [r1, #8]
 802753a:	f1b8 0f00 	cmp.w	r8, #0
 802753e:	dd9c      	ble.n	802747a <__sflush_r+0x1a>
 8027540:	6a21      	ldr	r1, [r4, #32]
 8027542:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8027544:	4643      	mov	r3, r8
 8027546:	463a      	mov	r2, r7
 8027548:	4628      	mov	r0, r5
 802754a:	47b0      	blx	r6
 802754c:	2800      	cmp	r0, #0
 802754e:	dc06      	bgt.n	802755e <__sflush_r+0xfe>
 8027550:	89a3      	ldrh	r3, [r4, #12]
 8027552:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8027556:	81a3      	strh	r3, [r4, #12]
 8027558:	f04f 30ff 	mov.w	r0, #4294967295
 802755c:	e78e      	b.n	802747c <__sflush_r+0x1c>
 802755e:	4407      	add	r7, r0
 8027560:	eba8 0800 	sub.w	r8, r8, r0
 8027564:	e7e9      	b.n	802753a <__sflush_r+0xda>
 8027566:	bf00      	nop
 8027568:	20400001 	.word	0x20400001

0802756c <_fflush_r>:
 802756c:	b538      	push	{r3, r4, r5, lr}
 802756e:	690b      	ldr	r3, [r1, #16]
 8027570:	4605      	mov	r5, r0
 8027572:	460c      	mov	r4, r1
 8027574:	b913      	cbnz	r3, 802757c <_fflush_r+0x10>
 8027576:	2500      	movs	r5, #0
 8027578:	4628      	mov	r0, r5
 802757a:	bd38      	pop	{r3, r4, r5, pc}
 802757c:	b118      	cbz	r0, 8027586 <_fflush_r+0x1a>
 802757e:	6983      	ldr	r3, [r0, #24]
 8027580:	b90b      	cbnz	r3, 8027586 <_fflush_r+0x1a>
 8027582:	f000 f887 	bl	8027694 <__sinit>
 8027586:	4b14      	ldr	r3, [pc, #80]	; (80275d8 <_fflush_r+0x6c>)
 8027588:	429c      	cmp	r4, r3
 802758a:	d11b      	bne.n	80275c4 <_fflush_r+0x58>
 802758c:	686c      	ldr	r4, [r5, #4]
 802758e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8027592:	2b00      	cmp	r3, #0
 8027594:	d0ef      	beq.n	8027576 <_fflush_r+0xa>
 8027596:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8027598:	07d0      	lsls	r0, r2, #31
 802759a:	d404      	bmi.n	80275a6 <_fflush_r+0x3a>
 802759c:	0599      	lsls	r1, r3, #22
 802759e:	d402      	bmi.n	80275a6 <_fflush_r+0x3a>
 80275a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80275a2:	f7ff fd12 	bl	8026fca <__retarget_lock_acquire_recursive>
 80275a6:	4628      	mov	r0, r5
 80275a8:	4621      	mov	r1, r4
 80275aa:	f7ff ff59 	bl	8027460 <__sflush_r>
 80275ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80275b0:	07da      	lsls	r2, r3, #31
 80275b2:	4605      	mov	r5, r0
 80275b4:	d4e0      	bmi.n	8027578 <_fflush_r+0xc>
 80275b6:	89a3      	ldrh	r3, [r4, #12]
 80275b8:	059b      	lsls	r3, r3, #22
 80275ba:	d4dd      	bmi.n	8027578 <_fflush_r+0xc>
 80275bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80275be:	f7ff fd05 	bl	8026fcc <__retarget_lock_release_recursive>
 80275c2:	e7d9      	b.n	8027578 <_fflush_r+0xc>
 80275c4:	4b05      	ldr	r3, [pc, #20]	; (80275dc <_fflush_r+0x70>)
 80275c6:	429c      	cmp	r4, r3
 80275c8:	d101      	bne.n	80275ce <_fflush_r+0x62>
 80275ca:	68ac      	ldr	r4, [r5, #8]
 80275cc:	e7df      	b.n	802758e <_fflush_r+0x22>
 80275ce:	4b04      	ldr	r3, [pc, #16]	; (80275e0 <_fflush_r+0x74>)
 80275d0:	429c      	cmp	r4, r3
 80275d2:	bf08      	it	eq
 80275d4:	68ec      	ldreq	r4, [r5, #12]
 80275d6:	e7da      	b.n	802758e <_fflush_r+0x22>
 80275d8:	0809b0e4 	.word	0x0809b0e4
 80275dc:	0809b104 	.word	0x0809b104
 80275e0:	0809b0c4 	.word	0x0809b0c4

080275e4 <std>:
 80275e4:	2300      	movs	r3, #0
 80275e6:	b510      	push	{r4, lr}
 80275e8:	4604      	mov	r4, r0
 80275ea:	e9c0 3300 	strd	r3, r3, [r0]
 80275ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80275f2:	6083      	str	r3, [r0, #8]
 80275f4:	8181      	strh	r1, [r0, #12]
 80275f6:	6643      	str	r3, [r0, #100]	; 0x64
 80275f8:	81c2      	strh	r2, [r0, #14]
 80275fa:	6183      	str	r3, [r0, #24]
 80275fc:	4619      	mov	r1, r3
 80275fe:	2208      	movs	r2, #8
 8027600:	305c      	adds	r0, #92	; 0x5c
 8027602:	f7fd fc1b 	bl	8024e3c <memset>
 8027606:	4b05      	ldr	r3, [pc, #20]	; (802761c <std+0x38>)
 8027608:	6263      	str	r3, [r4, #36]	; 0x24
 802760a:	4b05      	ldr	r3, [pc, #20]	; (8027620 <std+0x3c>)
 802760c:	62a3      	str	r3, [r4, #40]	; 0x28
 802760e:	4b05      	ldr	r3, [pc, #20]	; (8027624 <std+0x40>)
 8027610:	62e3      	str	r3, [r4, #44]	; 0x2c
 8027612:	4b05      	ldr	r3, [pc, #20]	; (8027628 <std+0x44>)
 8027614:	6224      	str	r4, [r4, #32]
 8027616:	6323      	str	r3, [r4, #48]	; 0x30
 8027618:	bd10      	pop	{r4, pc}
 802761a:	bf00      	nop
 802761c:	08027921 	.word	0x08027921
 8027620:	08027943 	.word	0x08027943
 8027624:	0802797b 	.word	0x0802797b
 8027628:	0802799f 	.word	0x0802799f

0802762c <_cleanup_r>:
 802762c:	4901      	ldr	r1, [pc, #4]	; (8027634 <_cleanup_r+0x8>)
 802762e:	f000 b8af 	b.w	8027790 <_fwalk_reent>
 8027632:	bf00      	nop
 8027634:	0802756d 	.word	0x0802756d

08027638 <__sfmoreglue>:
 8027638:	b570      	push	{r4, r5, r6, lr}
 802763a:	1e4a      	subs	r2, r1, #1
 802763c:	2568      	movs	r5, #104	; 0x68
 802763e:	4355      	muls	r5, r2
 8027640:	460e      	mov	r6, r1
 8027642:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8027646:	f7fd fc51 	bl	8024eec <_malloc_r>
 802764a:	4604      	mov	r4, r0
 802764c:	b140      	cbz	r0, 8027660 <__sfmoreglue+0x28>
 802764e:	2100      	movs	r1, #0
 8027650:	e9c0 1600 	strd	r1, r6, [r0]
 8027654:	300c      	adds	r0, #12
 8027656:	60a0      	str	r0, [r4, #8]
 8027658:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802765c:	f7fd fbee 	bl	8024e3c <memset>
 8027660:	4620      	mov	r0, r4
 8027662:	bd70      	pop	{r4, r5, r6, pc}

08027664 <__sfp_lock_acquire>:
 8027664:	4801      	ldr	r0, [pc, #4]	; (802766c <__sfp_lock_acquire+0x8>)
 8027666:	f7ff bcb0 	b.w	8026fca <__retarget_lock_acquire_recursive>
 802766a:	bf00      	nop
 802766c:	2000a2c4 	.word	0x2000a2c4

08027670 <__sfp_lock_release>:
 8027670:	4801      	ldr	r0, [pc, #4]	; (8027678 <__sfp_lock_release+0x8>)
 8027672:	f7ff bcab 	b.w	8026fcc <__retarget_lock_release_recursive>
 8027676:	bf00      	nop
 8027678:	2000a2c4 	.word	0x2000a2c4

0802767c <__sinit_lock_acquire>:
 802767c:	4801      	ldr	r0, [pc, #4]	; (8027684 <__sinit_lock_acquire+0x8>)
 802767e:	f7ff bca4 	b.w	8026fca <__retarget_lock_acquire_recursive>
 8027682:	bf00      	nop
 8027684:	2000a2bf 	.word	0x2000a2bf

08027688 <__sinit_lock_release>:
 8027688:	4801      	ldr	r0, [pc, #4]	; (8027690 <__sinit_lock_release+0x8>)
 802768a:	f7ff bc9f 	b.w	8026fcc <__retarget_lock_release_recursive>
 802768e:	bf00      	nop
 8027690:	2000a2bf 	.word	0x2000a2bf

08027694 <__sinit>:
 8027694:	b510      	push	{r4, lr}
 8027696:	4604      	mov	r4, r0
 8027698:	f7ff fff0 	bl	802767c <__sinit_lock_acquire>
 802769c:	69a3      	ldr	r3, [r4, #24]
 802769e:	b11b      	cbz	r3, 80276a8 <__sinit+0x14>
 80276a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80276a4:	f7ff bff0 	b.w	8027688 <__sinit_lock_release>
 80276a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80276ac:	6523      	str	r3, [r4, #80]	; 0x50
 80276ae:	4b13      	ldr	r3, [pc, #76]	; (80276fc <__sinit+0x68>)
 80276b0:	4a13      	ldr	r2, [pc, #76]	; (8027700 <__sinit+0x6c>)
 80276b2:	681b      	ldr	r3, [r3, #0]
 80276b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80276b6:	42a3      	cmp	r3, r4
 80276b8:	bf04      	itt	eq
 80276ba:	2301      	moveq	r3, #1
 80276bc:	61a3      	streq	r3, [r4, #24]
 80276be:	4620      	mov	r0, r4
 80276c0:	f000 f820 	bl	8027704 <__sfp>
 80276c4:	6060      	str	r0, [r4, #4]
 80276c6:	4620      	mov	r0, r4
 80276c8:	f000 f81c 	bl	8027704 <__sfp>
 80276cc:	60a0      	str	r0, [r4, #8]
 80276ce:	4620      	mov	r0, r4
 80276d0:	f000 f818 	bl	8027704 <__sfp>
 80276d4:	2200      	movs	r2, #0
 80276d6:	60e0      	str	r0, [r4, #12]
 80276d8:	2104      	movs	r1, #4
 80276da:	6860      	ldr	r0, [r4, #4]
 80276dc:	f7ff ff82 	bl	80275e4 <std>
 80276e0:	68a0      	ldr	r0, [r4, #8]
 80276e2:	2201      	movs	r2, #1
 80276e4:	2109      	movs	r1, #9
 80276e6:	f7ff ff7d 	bl	80275e4 <std>
 80276ea:	68e0      	ldr	r0, [r4, #12]
 80276ec:	2202      	movs	r2, #2
 80276ee:	2112      	movs	r1, #18
 80276f0:	f7ff ff78 	bl	80275e4 <std>
 80276f4:	2301      	movs	r3, #1
 80276f6:	61a3      	str	r3, [r4, #24]
 80276f8:	e7d2      	b.n	80276a0 <__sinit+0xc>
 80276fa:	bf00      	nop
 80276fc:	0809ae44 	.word	0x0809ae44
 8027700:	0802762d 	.word	0x0802762d

08027704 <__sfp>:
 8027704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027706:	4607      	mov	r7, r0
 8027708:	f7ff ffac 	bl	8027664 <__sfp_lock_acquire>
 802770c:	4b1e      	ldr	r3, [pc, #120]	; (8027788 <__sfp+0x84>)
 802770e:	681e      	ldr	r6, [r3, #0]
 8027710:	69b3      	ldr	r3, [r6, #24]
 8027712:	b913      	cbnz	r3, 802771a <__sfp+0x16>
 8027714:	4630      	mov	r0, r6
 8027716:	f7ff ffbd 	bl	8027694 <__sinit>
 802771a:	3648      	adds	r6, #72	; 0x48
 802771c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8027720:	3b01      	subs	r3, #1
 8027722:	d503      	bpl.n	802772c <__sfp+0x28>
 8027724:	6833      	ldr	r3, [r6, #0]
 8027726:	b30b      	cbz	r3, 802776c <__sfp+0x68>
 8027728:	6836      	ldr	r6, [r6, #0]
 802772a:	e7f7      	b.n	802771c <__sfp+0x18>
 802772c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8027730:	b9d5      	cbnz	r5, 8027768 <__sfp+0x64>
 8027732:	4b16      	ldr	r3, [pc, #88]	; (802778c <__sfp+0x88>)
 8027734:	60e3      	str	r3, [r4, #12]
 8027736:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802773a:	6665      	str	r5, [r4, #100]	; 0x64
 802773c:	f7ff fc44 	bl	8026fc8 <__retarget_lock_init_recursive>
 8027740:	f7ff ff96 	bl	8027670 <__sfp_lock_release>
 8027744:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8027748:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802774c:	6025      	str	r5, [r4, #0]
 802774e:	61a5      	str	r5, [r4, #24]
 8027750:	2208      	movs	r2, #8
 8027752:	4629      	mov	r1, r5
 8027754:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8027758:	f7fd fb70 	bl	8024e3c <memset>
 802775c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8027760:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8027764:	4620      	mov	r0, r4
 8027766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027768:	3468      	adds	r4, #104	; 0x68
 802776a:	e7d9      	b.n	8027720 <__sfp+0x1c>
 802776c:	2104      	movs	r1, #4
 802776e:	4638      	mov	r0, r7
 8027770:	f7ff ff62 	bl	8027638 <__sfmoreglue>
 8027774:	4604      	mov	r4, r0
 8027776:	6030      	str	r0, [r6, #0]
 8027778:	2800      	cmp	r0, #0
 802777a:	d1d5      	bne.n	8027728 <__sfp+0x24>
 802777c:	f7ff ff78 	bl	8027670 <__sfp_lock_release>
 8027780:	230c      	movs	r3, #12
 8027782:	603b      	str	r3, [r7, #0]
 8027784:	e7ee      	b.n	8027764 <__sfp+0x60>
 8027786:	bf00      	nop
 8027788:	0809ae44 	.word	0x0809ae44
 802778c:	ffff0001 	.word	0xffff0001

08027790 <_fwalk_reent>:
 8027790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027794:	4606      	mov	r6, r0
 8027796:	4688      	mov	r8, r1
 8027798:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802779c:	2700      	movs	r7, #0
 802779e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80277a2:	f1b9 0901 	subs.w	r9, r9, #1
 80277a6:	d505      	bpl.n	80277b4 <_fwalk_reent+0x24>
 80277a8:	6824      	ldr	r4, [r4, #0]
 80277aa:	2c00      	cmp	r4, #0
 80277ac:	d1f7      	bne.n	802779e <_fwalk_reent+0xe>
 80277ae:	4638      	mov	r0, r7
 80277b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80277b4:	89ab      	ldrh	r3, [r5, #12]
 80277b6:	2b01      	cmp	r3, #1
 80277b8:	d907      	bls.n	80277ca <_fwalk_reent+0x3a>
 80277ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80277be:	3301      	adds	r3, #1
 80277c0:	d003      	beq.n	80277ca <_fwalk_reent+0x3a>
 80277c2:	4629      	mov	r1, r5
 80277c4:	4630      	mov	r0, r6
 80277c6:	47c0      	blx	r8
 80277c8:	4307      	orrs	r7, r0
 80277ca:	3568      	adds	r5, #104	; 0x68
 80277cc:	e7e9      	b.n	80277a2 <_fwalk_reent+0x12>

080277ce <__swhatbuf_r>:
 80277ce:	b570      	push	{r4, r5, r6, lr}
 80277d0:	460e      	mov	r6, r1
 80277d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80277d6:	2900      	cmp	r1, #0
 80277d8:	b096      	sub	sp, #88	; 0x58
 80277da:	4614      	mov	r4, r2
 80277dc:	461d      	mov	r5, r3
 80277de:	da07      	bge.n	80277f0 <__swhatbuf_r+0x22>
 80277e0:	2300      	movs	r3, #0
 80277e2:	602b      	str	r3, [r5, #0]
 80277e4:	89b3      	ldrh	r3, [r6, #12]
 80277e6:	061a      	lsls	r2, r3, #24
 80277e8:	d410      	bmi.n	802780c <__swhatbuf_r+0x3e>
 80277ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80277ee:	e00e      	b.n	802780e <__swhatbuf_r+0x40>
 80277f0:	466a      	mov	r2, sp
 80277f2:	f000 f8fb 	bl	80279ec <_fstat_r>
 80277f6:	2800      	cmp	r0, #0
 80277f8:	dbf2      	blt.n	80277e0 <__swhatbuf_r+0x12>
 80277fa:	9a01      	ldr	r2, [sp, #4]
 80277fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8027800:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8027804:	425a      	negs	r2, r3
 8027806:	415a      	adcs	r2, r3
 8027808:	602a      	str	r2, [r5, #0]
 802780a:	e7ee      	b.n	80277ea <__swhatbuf_r+0x1c>
 802780c:	2340      	movs	r3, #64	; 0x40
 802780e:	2000      	movs	r0, #0
 8027810:	6023      	str	r3, [r4, #0]
 8027812:	b016      	add	sp, #88	; 0x58
 8027814:	bd70      	pop	{r4, r5, r6, pc}
	...

08027818 <__smakebuf_r>:
 8027818:	898b      	ldrh	r3, [r1, #12]
 802781a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802781c:	079d      	lsls	r5, r3, #30
 802781e:	4606      	mov	r6, r0
 8027820:	460c      	mov	r4, r1
 8027822:	d507      	bpl.n	8027834 <__smakebuf_r+0x1c>
 8027824:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8027828:	6023      	str	r3, [r4, #0]
 802782a:	6123      	str	r3, [r4, #16]
 802782c:	2301      	movs	r3, #1
 802782e:	6163      	str	r3, [r4, #20]
 8027830:	b002      	add	sp, #8
 8027832:	bd70      	pop	{r4, r5, r6, pc}
 8027834:	ab01      	add	r3, sp, #4
 8027836:	466a      	mov	r2, sp
 8027838:	f7ff ffc9 	bl	80277ce <__swhatbuf_r>
 802783c:	9900      	ldr	r1, [sp, #0]
 802783e:	4605      	mov	r5, r0
 8027840:	4630      	mov	r0, r6
 8027842:	f7fd fb53 	bl	8024eec <_malloc_r>
 8027846:	b948      	cbnz	r0, 802785c <__smakebuf_r+0x44>
 8027848:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802784c:	059a      	lsls	r2, r3, #22
 802784e:	d4ef      	bmi.n	8027830 <__smakebuf_r+0x18>
 8027850:	f023 0303 	bic.w	r3, r3, #3
 8027854:	f043 0302 	orr.w	r3, r3, #2
 8027858:	81a3      	strh	r3, [r4, #12]
 802785a:	e7e3      	b.n	8027824 <__smakebuf_r+0xc>
 802785c:	4b0d      	ldr	r3, [pc, #52]	; (8027894 <__smakebuf_r+0x7c>)
 802785e:	62b3      	str	r3, [r6, #40]	; 0x28
 8027860:	89a3      	ldrh	r3, [r4, #12]
 8027862:	6020      	str	r0, [r4, #0]
 8027864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8027868:	81a3      	strh	r3, [r4, #12]
 802786a:	9b00      	ldr	r3, [sp, #0]
 802786c:	6163      	str	r3, [r4, #20]
 802786e:	9b01      	ldr	r3, [sp, #4]
 8027870:	6120      	str	r0, [r4, #16]
 8027872:	b15b      	cbz	r3, 802788c <__smakebuf_r+0x74>
 8027874:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8027878:	4630      	mov	r0, r6
 802787a:	f000 f8c9 	bl	8027a10 <_isatty_r>
 802787e:	b128      	cbz	r0, 802788c <__smakebuf_r+0x74>
 8027880:	89a3      	ldrh	r3, [r4, #12]
 8027882:	f023 0303 	bic.w	r3, r3, #3
 8027886:	f043 0301 	orr.w	r3, r3, #1
 802788a:	81a3      	strh	r3, [r4, #12]
 802788c:	89a0      	ldrh	r0, [r4, #12]
 802788e:	4305      	orrs	r5, r0
 8027890:	81a5      	strh	r5, [r4, #12]
 8027892:	e7cd      	b.n	8027830 <__smakebuf_r+0x18>
 8027894:	0802762d 	.word	0x0802762d

08027898 <_raise_r>:
 8027898:	291f      	cmp	r1, #31
 802789a:	b538      	push	{r3, r4, r5, lr}
 802789c:	4604      	mov	r4, r0
 802789e:	460d      	mov	r5, r1
 80278a0:	d904      	bls.n	80278ac <_raise_r+0x14>
 80278a2:	2316      	movs	r3, #22
 80278a4:	6003      	str	r3, [r0, #0]
 80278a6:	f04f 30ff 	mov.w	r0, #4294967295
 80278aa:	bd38      	pop	{r3, r4, r5, pc}
 80278ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80278ae:	b112      	cbz	r2, 80278b6 <_raise_r+0x1e>
 80278b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80278b4:	b94b      	cbnz	r3, 80278ca <_raise_r+0x32>
 80278b6:	4620      	mov	r0, r4
 80278b8:	f000 f830 	bl	802791c <_getpid_r>
 80278bc:	462a      	mov	r2, r5
 80278be:	4601      	mov	r1, r0
 80278c0:	4620      	mov	r0, r4
 80278c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80278c6:	f000 b817 	b.w	80278f8 <_kill_r>
 80278ca:	2b01      	cmp	r3, #1
 80278cc:	d00a      	beq.n	80278e4 <_raise_r+0x4c>
 80278ce:	1c59      	adds	r1, r3, #1
 80278d0:	d103      	bne.n	80278da <_raise_r+0x42>
 80278d2:	2316      	movs	r3, #22
 80278d4:	6003      	str	r3, [r0, #0]
 80278d6:	2001      	movs	r0, #1
 80278d8:	e7e7      	b.n	80278aa <_raise_r+0x12>
 80278da:	2400      	movs	r4, #0
 80278dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80278e0:	4628      	mov	r0, r5
 80278e2:	4798      	blx	r3
 80278e4:	2000      	movs	r0, #0
 80278e6:	e7e0      	b.n	80278aa <_raise_r+0x12>

080278e8 <raise>:
 80278e8:	4b02      	ldr	r3, [pc, #8]	; (80278f4 <raise+0xc>)
 80278ea:	4601      	mov	r1, r0
 80278ec:	6818      	ldr	r0, [r3, #0]
 80278ee:	f7ff bfd3 	b.w	8027898 <_raise_r>
 80278f2:	bf00      	nop
 80278f4:	20007718 	.word	0x20007718

080278f8 <_kill_r>:
 80278f8:	b538      	push	{r3, r4, r5, lr}
 80278fa:	4d07      	ldr	r5, [pc, #28]	; (8027918 <_kill_r+0x20>)
 80278fc:	2300      	movs	r3, #0
 80278fe:	4604      	mov	r4, r0
 8027900:	4608      	mov	r0, r1
 8027902:	4611      	mov	r1, r2
 8027904:	602b      	str	r3, [r5, #0]
 8027906:	f000 fc69 	bl	80281dc <_kill>
 802790a:	1c43      	adds	r3, r0, #1
 802790c:	d102      	bne.n	8027914 <_kill_r+0x1c>
 802790e:	682b      	ldr	r3, [r5, #0]
 8027910:	b103      	cbz	r3, 8027914 <_kill_r+0x1c>
 8027912:	6023      	str	r3, [r4, #0]
 8027914:	bd38      	pop	{r3, r4, r5, pc}
 8027916:	bf00      	nop
 8027918:	2000a2b8 	.word	0x2000a2b8

0802791c <_getpid_r>:
 802791c:	f000 bc4e 	b.w	80281bc <_getpid>

08027920 <__sread>:
 8027920:	b510      	push	{r4, lr}
 8027922:	460c      	mov	r4, r1
 8027924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027928:	f000 f894 	bl	8027a54 <_read_r>
 802792c:	2800      	cmp	r0, #0
 802792e:	bfab      	itete	ge
 8027930:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8027932:	89a3      	ldrhlt	r3, [r4, #12]
 8027934:	181b      	addge	r3, r3, r0
 8027936:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802793a:	bfac      	ite	ge
 802793c:	6563      	strge	r3, [r4, #84]	; 0x54
 802793e:	81a3      	strhlt	r3, [r4, #12]
 8027940:	bd10      	pop	{r4, pc}

08027942 <__swrite>:
 8027942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027946:	461f      	mov	r7, r3
 8027948:	898b      	ldrh	r3, [r1, #12]
 802794a:	05db      	lsls	r3, r3, #23
 802794c:	4605      	mov	r5, r0
 802794e:	460c      	mov	r4, r1
 8027950:	4616      	mov	r6, r2
 8027952:	d505      	bpl.n	8027960 <__swrite+0x1e>
 8027954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027958:	2302      	movs	r3, #2
 802795a:	2200      	movs	r2, #0
 802795c:	f000 f868 	bl	8027a30 <_lseek_r>
 8027960:	89a3      	ldrh	r3, [r4, #12]
 8027962:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8027966:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802796a:	81a3      	strh	r3, [r4, #12]
 802796c:	4632      	mov	r2, r6
 802796e:	463b      	mov	r3, r7
 8027970:	4628      	mov	r0, r5
 8027972:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8027976:	f000 b817 	b.w	80279a8 <_write_r>

0802797a <__sseek>:
 802797a:	b510      	push	{r4, lr}
 802797c:	460c      	mov	r4, r1
 802797e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027982:	f000 f855 	bl	8027a30 <_lseek_r>
 8027986:	1c43      	adds	r3, r0, #1
 8027988:	89a3      	ldrh	r3, [r4, #12]
 802798a:	bf15      	itete	ne
 802798c:	6560      	strne	r0, [r4, #84]	; 0x54
 802798e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8027992:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8027996:	81a3      	strheq	r3, [r4, #12]
 8027998:	bf18      	it	ne
 802799a:	81a3      	strhne	r3, [r4, #12]
 802799c:	bd10      	pop	{r4, pc}

0802799e <__sclose>:
 802799e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80279a2:	f000 b813 	b.w	80279cc <_close_r>
	...

080279a8 <_write_r>:
 80279a8:	b538      	push	{r3, r4, r5, lr}
 80279aa:	4d07      	ldr	r5, [pc, #28]	; (80279c8 <_write_r+0x20>)
 80279ac:	4604      	mov	r4, r0
 80279ae:	4608      	mov	r0, r1
 80279b0:	4611      	mov	r1, r2
 80279b2:	2200      	movs	r2, #0
 80279b4:	602a      	str	r2, [r5, #0]
 80279b6:	461a      	mov	r2, r3
 80279b8:	f000 fc36 	bl	8028228 <_write>
 80279bc:	1c43      	adds	r3, r0, #1
 80279be:	d102      	bne.n	80279c6 <_write_r+0x1e>
 80279c0:	682b      	ldr	r3, [r5, #0]
 80279c2:	b103      	cbz	r3, 80279c6 <_write_r+0x1e>
 80279c4:	6023      	str	r3, [r4, #0]
 80279c6:	bd38      	pop	{r3, r4, r5, pc}
 80279c8:	2000a2b8 	.word	0x2000a2b8

080279cc <_close_r>:
 80279cc:	b538      	push	{r3, r4, r5, lr}
 80279ce:	4d06      	ldr	r5, [pc, #24]	; (80279e8 <_close_r+0x1c>)
 80279d0:	2300      	movs	r3, #0
 80279d2:	4604      	mov	r4, r0
 80279d4:	4608      	mov	r0, r1
 80279d6:	602b      	str	r3, [r5, #0]
 80279d8:	f000 fbe0 	bl	802819c <_close>
 80279dc:	1c43      	adds	r3, r0, #1
 80279de:	d102      	bne.n	80279e6 <_close_r+0x1a>
 80279e0:	682b      	ldr	r3, [r5, #0]
 80279e2:	b103      	cbz	r3, 80279e6 <_close_r+0x1a>
 80279e4:	6023      	str	r3, [r4, #0]
 80279e6:	bd38      	pop	{r3, r4, r5, pc}
 80279e8:	2000a2b8 	.word	0x2000a2b8

080279ec <_fstat_r>:
 80279ec:	b538      	push	{r3, r4, r5, lr}
 80279ee:	4d07      	ldr	r5, [pc, #28]	; (8027a0c <_fstat_r+0x20>)
 80279f0:	2300      	movs	r3, #0
 80279f2:	4604      	mov	r4, r0
 80279f4:	4608      	mov	r0, r1
 80279f6:	4611      	mov	r1, r2
 80279f8:	602b      	str	r3, [r5, #0]
 80279fa:	f000 fbd7 	bl	80281ac <_fstat>
 80279fe:	1c43      	adds	r3, r0, #1
 8027a00:	d102      	bne.n	8027a08 <_fstat_r+0x1c>
 8027a02:	682b      	ldr	r3, [r5, #0]
 8027a04:	b103      	cbz	r3, 8027a08 <_fstat_r+0x1c>
 8027a06:	6023      	str	r3, [r4, #0]
 8027a08:	bd38      	pop	{r3, r4, r5, pc}
 8027a0a:	bf00      	nop
 8027a0c:	2000a2b8 	.word	0x2000a2b8

08027a10 <_isatty_r>:
 8027a10:	b538      	push	{r3, r4, r5, lr}
 8027a12:	4d06      	ldr	r5, [pc, #24]	; (8027a2c <_isatty_r+0x1c>)
 8027a14:	2300      	movs	r3, #0
 8027a16:	4604      	mov	r4, r0
 8027a18:	4608      	mov	r0, r1
 8027a1a:	602b      	str	r3, [r5, #0]
 8027a1c:	f000 fbd6 	bl	80281cc <_isatty>
 8027a20:	1c43      	adds	r3, r0, #1
 8027a22:	d102      	bne.n	8027a2a <_isatty_r+0x1a>
 8027a24:	682b      	ldr	r3, [r5, #0]
 8027a26:	b103      	cbz	r3, 8027a2a <_isatty_r+0x1a>
 8027a28:	6023      	str	r3, [r4, #0]
 8027a2a:	bd38      	pop	{r3, r4, r5, pc}
 8027a2c:	2000a2b8 	.word	0x2000a2b8

08027a30 <_lseek_r>:
 8027a30:	b538      	push	{r3, r4, r5, lr}
 8027a32:	4d07      	ldr	r5, [pc, #28]	; (8027a50 <_lseek_r+0x20>)
 8027a34:	4604      	mov	r4, r0
 8027a36:	4608      	mov	r0, r1
 8027a38:	4611      	mov	r1, r2
 8027a3a:	2200      	movs	r2, #0
 8027a3c:	602a      	str	r2, [r5, #0]
 8027a3e:	461a      	mov	r2, r3
 8027a40:	f000 fbd4 	bl	80281ec <_lseek>
 8027a44:	1c43      	adds	r3, r0, #1
 8027a46:	d102      	bne.n	8027a4e <_lseek_r+0x1e>
 8027a48:	682b      	ldr	r3, [r5, #0]
 8027a4a:	b103      	cbz	r3, 8027a4e <_lseek_r+0x1e>
 8027a4c:	6023      	str	r3, [r4, #0]
 8027a4e:	bd38      	pop	{r3, r4, r5, pc}
 8027a50:	2000a2b8 	.word	0x2000a2b8

08027a54 <_read_r>:
 8027a54:	b538      	push	{r3, r4, r5, lr}
 8027a56:	4d07      	ldr	r5, [pc, #28]	; (8027a74 <_read_r+0x20>)
 8027a58:	4604      	mov	r4, r0
 8027a5a:	4608      	mov	r0, r1
 8027a5c:	4611      	mov	r1, r2
 8027a5e:	2200      	movs	r2, #0
 8027a60:	602a      	str	r2, [r5, #0]
 8027a62:	461a      	mov	r2, r3
 8027a64:	f000 fbca 	bl	80281fc <_read>
 8027a68:	1c43      	adds	r3, r0, #1
 8027a6a:	d102      	bne.n	8027a72 <_read_r+0x1e>
 8027a6c:	682b      	ldr	r3, [r5, #0]
 8027a6e:	b103      	cbz	r3, 8027a72 <_read_r+0x1e>
 8027a70:	6023      	str	r3, [r4, #0]
 8027a72:	bd38      	pop	{r3, r4, r5, pc}
 8027a74:	2000a2b8 	.word	0x2000a2b8

08027a78 <log>:
 8027a78:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8027a7c:	ed2d 8b02 	vpush	{d8}
 8027a80:	b082      	sub	sp, #8
 8027a82:	ed8d 0b00 	vstr	d0, [sp]
 8027a86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8027a8a:	2600      	movs	r6, #0
 8027a8c:	1994      	adds	r4, r2, r6
 8027a8e:	4e80      	ldr	r6, [pc, #512]	; (8027c90 <log+0x218>)
 8027a90:	4f80      	ldr	r7, [pc, #512]	; (8027c94 <log+0x21c>)
 8027a92:	eb43 0506 	adc.w	r5, r3, r6
 8027a96:	42af      	cmp	r7, r5
 8027a98:	f04f 36ff 	mov.w	r6, #4294967295
 8027a9c:	bf08      	it	eq
 8027a9e:	42a6      	cmpeq	r6, r4
 8027aa0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8027aa4:	d363      	bcc.n	8027b6e <log+0xf6>
 8027aa6:	497c      	ldr	r1, [pc, #496]	; (8027c98 <log+0x220>)
 8027aa8:	2000      	movs	r0, #0
 8027aaa:	428b      	cmp	r3, r1
 8027aac:	bf08      	it	eq
 8027aae:	4282      	cmpeq	r2, r0
 8027ab0:	f000 80de 	beq.w	8027c70 <log+0x1f8>
 8027ab4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8027ab8:	ee30 7b47 	vsub.f64	d7, d0, d7
 8027abc:	4b77      	ldr	r3, [pc, #476]	; (8027c9c <log+0x224>)
 8027abe:	ee27 1b07 	vmul.f64	d1, d7, d7
 8027ac2:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8027ac6:	ee27 3b01 	vmul.f64	d3, d7, d1
 8027aca:	ed93 4b10 	vldr	d4, [r3, #64]	; 0x40
 8027ace:	eea6 4b07 	vfma.f64	d4, d6, d7
 8027ad2:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8027ad6:	ed93 5b18 	vldr	d5, [r3, #96]	; 0x60
 8027ada:	eea6 4b01 	vfma.f64	d4, d6, d1
 8027ade:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8027ae2:	eea5 6b07 	vfma.f64	d6, d5, d7
 8027ae6:	ed93 5b1a 	vldr	d5, [r3, #104]	; 0x68
 8027aea:	eea5 6b01 	vfma.f64	d6, d5, d1
 8027aee:	ed93 5b1e 	vldr	d5, [r3, #120]	; 0x78
 8027af2:	eeb0 2b46 	vmov.f64	d2, d6
 8027af6:	ed93 6b1c 	vldr	d6, [r3, #112]	; 0x70
 8027afa:	eea5 6b07 	vfma.f64	d6, d5, d7
 8027afe:	ed93 5b20 	vldr	d5, [r3, #128]	; 0x80
 8027b02:	eea5 6b01 	vfma.f64	d6, d5, d1
 8027b06:	ed93 5b22 	vldr	d5, [r3, #136]	; 0x88
 8027b0a:	ed93 1b0e 	vldr	d1, [r3, #56]	; 0x38
 8027b0e:	eea5 6b03 	vfma.f64	d6, d5, d3
 8027b12:	eea6 2b03 	vfma.f64	d2, d6, d3
 8027b16:	ed9f 6b58 	vldr	d6, [pc, #352]	; 8027c78 <log+0x200>
 8027b1a:	eea2 4b03 	vfma.f64	d4, d2, d3
 8027b1e:	eeb0 2b47 	vmov.f64	d2, d7
 8027b22:	eea7 2b06 	vfma.f64	d2, d7, d6
 8027b26:	eea7 2b46 	vfms.f64	d2, d7, d6
 8027b2a:	eeb0 6b47 	vmov.f64	d6, d7
 8027b2e:	ee37 8b42 	vsub.f64	d8, d7, d2
 8027b32:	ee22 0b02 	vmul.f64	d0, d2, d2
 8027b36:	eea0 6b01 	vfma.f64	d6, d0, d1
 8027b3a:	ee37 5b46 	vsub.f64	d5, d7, d6
 8027b3e:	ee37 7b02 	vadd.f64	d7, d7, d2
 8027b42:	eea0 5b01 	vfma.f64	d5, d0, d1
 8027b46:	ee21 1b08 	vmul.f64	d1, d1, d8
 8027b4a:	eea1 5b07 	vfma.f64	d5, d1, d7
 8027b4e:	eeb0 7b45 	vmov.f64	d7, d5
 8027b52:	eea4 7b03 	vfma.f64	d7, d4, d3
 8027b56:	ee36 7b07 	vadd.f64	d7, d6, d7
 8027b5a:	ed8d 7b00 	vstr	d7, [sp]
 8027b5e:	ed9d 0b00 	vldr	d0, [sp]
 8027b62:	b002      	add	sp, #8
 8027b64:	ecbd 8b02 	vpop	{d8}
 8027b68:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8027b6c:	4770      	bx	lr
 8027b6e:	f1ac 0510 	sub.w	r5, ip, #16
 8027b72:	f647 74df 	movw	r4, #32735	; 0x7fdf
 8027b76:	42a5      	cmp	r5, r4
 8027b78:	d930      	bls.n	8027bdc <log+0x164>
 8027b7a:	1890      	adds	r0, r2, r2
 8027b7c:	eb43 0103 	adc.w	r1, r3, r3
 8027b80:	4301      	orrs	r1, r0
 8027b82:	d107      	bne.n	8027b94 <log+0x11c>
 8027b84:	2001      	movs	r0, #1
 8027b86:	b002      	add	sp, #8
 8027b88:	ecbd 8b02 	vpop	{d8}
 8027b8c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8027b90:	f000 b89a 	b.w	8027cc8 <__math_divzero>
 8027b94:	4942      	ldr	r1, [pc, #264]	; (8027ca0 <log+0x228>)
 8027b96:	2000      	movs	r0, #0
 8027b98:	428b      	cmp	r3, r1
 8027b9a:	bf08      	it	eq
 8027b9c:	4282      	cmpeq	r2, r0
 8027b9e:	d0de      	beq.n	8027b5e <log+0xe6>
 8027ba0:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
 8027ba4:	d104      	bne.n	8027bb0 <log+0x138>
 8027ba6:	f647 71f0 	movw	r1, #32752	; 0x7ff0
 8027baa:	ea31 010c 	bics.w	r1, r1, ip
 8027bae:	d108      	bne.n	8027bc2 <log+0x14a>
 8027bb0:	ed9d 0b00 	vldr	d0, [sp]
 8027bb4:	b002      	add	sp, #8
 8027bb6:	ecbd 8b02 	vpop	{d8}
 8027bba:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8027bbe:	f000 b89b 	b.w	8027cf8 <__math_invalid>
 8027bc2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8027c80 <log+0x208>
 8027bc6:	ed9d 6b00 	vldr	d6, [sp]
 8027bca:	ee26 7b07 	vmul.f64	d7, d6, d7
 8027bce:	ec56 5b17 	vmov	r5, r6, d7
 8027bd2:	4834      	ldr	r0, [pc, #208]	; (8027ca4 <log+0x22c>)
 8027bd4:	2400      	movs	r4, #0
 8027bd6:	192a      	adds	r2, r5, r4
 8027bd8:	eb46 0300 	adc.w	r3, r6, r0
 8027bdc:	2100      	movs	r1, #0
 8027bde:	1851      	adds	r1, r2, r1
 8027be0:	4931      	ldr	r1, [pc, #196]	; (8027ca8 <log+0x230>)
 8027be2:	eebf 4b00 	vmov.f64	d4, #240	; 0xbf800000 -1.0
 8027be6:	eb43 0101 	adc.w	r1, r3, r1
 8027bea:	0d0c      	lsrs	r4, r1, #20
 8027bec:	2500      	movs	r5, #0
 8027bee:	ebb2 0805 	subs.w	r8, r2, r5
 8027bf2:	ea4f 5404 	mov.w	r4, r4, lsl #20
 8027bf6:	eb63 0904 	sbc.w	r9, r3, r4
 8027bfa:	4b28      	ldr	r3, [pc, #160]	; (8027c9c <log+0x224>)
 8027bfc:	f3c1 3046 	ubfx	r0, r1, #13, #7
 8027c00:	eb03 1200 	add.w	r2, r3, r0, lsl #4
 8027c04:	ed92 7b24 	vldr	d7, [r2, #144]	; 0x90
 8027c08:	ec49 8b16 	vmov	d6, r8, r9
 8027c0c:	1509      	asrs	r1, r1, #20
 8027c0e:	eea6 4b07 	vfma.f64	d4, d6, d7
 8027c12:	ee07 1a90 	vmov	s15, r1
 8027c16:	ee24 1b04 	vmul.f64	d1, d4, d4
 8027c1a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8027c1e:	ed93 5b00 	vldr	d5, [r3]
 8027c22:	ee24 0b01 	vmul.f64	d0, d4, d1
 8027c26:	ed93 3b02 	vldr	d3, [r3, #8]
 8027c2a:	ed92 7b26 	vldr	d7, [r2, #152]	; 0x98
 8027c2e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8027c32:	ee34 5b07 	vadd.f64	d5, d4, d7
 8027c36:	ee37 7b45 	vsub.f64	d7, d7, d5
 8027c3a:	ee37 7b04 	vadd.f64	d7, d7, d4
 8027c3e:	eea3 7b06 	vfma.f64	d7, d3, d6
 8027c42:	ed93 6b04 	vldr	d6, [r3, #16]
 8027c46:	ed93 3b08 	vldr	d3, [r3, #32]
 8027c4a:	eea6 7b01 	vfma.f64	d7, d6, d1
 8027c4e:	ed93 6b06 	vldr	d6, [r3, #24]
 8027c52:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 8027c56:	eea3 6b04 	vfma.f64	d6, d3, d4
 8027c5a:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 8027c5e:	eea2 3b04 	vfma.f64	d3, d2, d4
 8027c62:	eea3 6b01 	vfma.f64	d6, d3, d1
 8027c66:	eea0 7b06 	vfma.f64	d7, d0, d6
 8027c6a:	ee37 7b05 	vadd.f64	d7, d7, d5
 8027c6e:	e774      	b.n	8027b5a <log+0xe2>
 8027c70:	ed9f 7b05 	vldr	d7, [pc, #20]	; 8027c88 <log+0x210>
 8027c74:	e771      	b.n	8027b5a <log+0xe2>
 8027c76:	bf00      	nop
 8027c78:	00000000 	.word	0x00000000
 8027c7c:	41a00000 	.word	0x41a00000
 8027c80:	00000000 	.word	0x00000000
 8027c84:	43300000 	.word	0x43300000
	...
 8027c90:	c0120000 	.word	0xc0120000
 8027c94:	000308ff 	.word	0x000308ff
 8027c98:	3ff00000 	.word	0x3ff00000
 8027c9c:	0809b128 	.word	0x0809b128
 8027ca0:	7ff00000 	.word	0x7ff00000
 8027ca4:	fcc00000 	.word	0xfcc00000
 8027ca8:	c01a0000 	.word	0xc01a0000

08027cac <with_errno>:
 8027cac:	b513      	push	{r0, r1, r4, lr}
 8027cae:	4604      	mov	r4, r0
 8027cb0:	ed8d 0b00 	vstr	d0, [sp]
 8027cb4:	f000 fa6c 	bl	8028190 <__errno>
 8027cb8:	ed9d 0b00 	vldr	d0, [sp]
 8027cbc:	6004      	str	r4, [r0, #0]
 8027cbe:	b002      	add	sp, #8
 8027cc0:	bd10      	pop	{r4, pc}
 8027cc2:	0000      	movs	r0, r0
 8027cc4:	0000      	movs	r0, r0
	...

08027cc8 <__math_divzero>:
 8027cc8:	b082      	sub	sp, #8
 8027cca:	2800      	cmp	r0, #0
 8027ccc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8027cd0:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8027cd4:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8027cd8:	ed8d 7b00 	vstr	d7, [sp]
 8027cdc:	ed9d 0b00 	vldr	d0, [sp]
 8027ce0:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8027cf0 <__math_divzero+0x28>
 8027ce4:	2022      	movs	r0, #34	; 0x22
 8027ce6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8027cea:	b002      	add	sp, #8
 8027cec:	f7ff bfde 	b.w	8027cac <with_errno>
	...

08027cf8 <__math_invalid>:
 8027cf8:	eeb0 7b40 	vmov.f64	d7, d0
 8027cfc:	eeb4 7b47 	vcmp.f64	d7, d7
 8027d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027d04:	ee30 6b40 	vsub.f64	d6, d0, d0
 8027d08:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8027d0c:	d602      	bvs.n	8027d14 <__math_invalid+0x1c>
 8027d0e:	2021      	movs	r0, #33	; 0x21
 8027d10:	f7ff bfcc 	b.w	8027cac <with_errno>
 8027d14:	4770      	bx	lr

08027d16 <with_errnof>:
 8027d16:	b513      	push	{r0, r1, r4, lr}
 8027d18:	4604      	mov	r4, r0
 8027d1a:	ed8d 0a01 	vstr	s0, [sp, #4]
 8027d1e:	f000 fa37 	bl	8028190 <__errno>
 8027d22:	ed9d 0a01 	vldr	s0, [sp, #4]
 8027d26:	6004      	str	r4, [r0, #0]
 8027d28:	b002      	add	sp, #8
 8027d2a:	bd10      	pop	{r4, pc}

08027d2c <xflowf>:
 8027d2c:	b130      	cbz	r0, 8027d3c <xflowf+0x10>
 8027d2e:	eef1 7a40 	vneg.f32	s15, s0
 8027d32:	ee27 0a80 	vmul.f32	s0, s15, s0
 8027d36:	2022      	movs	r0, #34	; 0x22
 8027d38:	f7ff bfed 	b.w	8027d16 <with_errnof>
 8027d3c:	eef0 7a40 	vmov.f32	s15, s0
 8027d40:	e7f7      	b.n	8027d32 <xflowf+0x6>
	...

08027d44 <__math_uflowf>:
 8027d44:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8027d4c <__math_uflowf+0x8>
 8027d48:	f7ff bff0 	b.w	8027d2c <xflowf>
 8027d4c:	10000000 	.word	0x10000000

08027d50 <__math_may_uflowf>:
 8027d50:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8027d58 <__math_may_uflowf+0x8>
 8027d54:	f7ff bfea 	b.w	8027d2c <xflowf>
 8027d58:	1a200000 	.word	0x1a200000

08027d5c <__math_oflowf>:
 8027d5c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8027d64 <__math_oflowf+0x8>
 8027d60:	f7ff bfe4 	b.w	8027d2c <xflowf>
 8027d64:	70000000 	.word	0x70000000

08027d68 <__math_divzerof>:
 8027d68:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8027d6c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8027d70:	2800      	cmp	r0, #0
 8027d72:	fe40 7a27 	vseleq.f32	s15, s0, s15
 8027d76:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8027d84 <__math_divzerof+0x1c>
 8027d7a:	2022      	movs	r0, #34	; 0x22
 8027d7c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8027d80:	f7ff bfc9 	b.w	8027d16 <with_errnof>
 8027d84:	00000000 	.word	0x00000000

08027d88 <__math_invalidf>:
 8027d88:	eef0 7a40 	vmov.f32	s15, s0
 8027d8c:	ee30 7a40 	vsub.f32	s14, s0, s0
 8027d90:	eef4 7a67 	vcmp.f32	s15, s15
 8027d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027d98:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8027d9c:	d602      	bvs.n	8027da4 <__math_invalidf+0x1c>
 8027d9e:	2021      	movs	r0, #33	; 0x21
 8027da0:	f7ff bfb9 	b.w	8027d16 <with_errnof>
 8027da4:	4770      	bx	lr
	...

08027da8 <expf>:
 8027da8:	ee10 2a10 	vmov	r2, s0
 8027dac:	b470      	push	{r4, r5, r6}
 8027dae:	f3c2 530a 	ubfx	r3, r2, #20, #11
 8027db2:	f240 442a 	movw	r4, #1066	; 0x42a
 8027db6:	42a3      	cmp	r3, r4
 8027db8:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8027dbc:	d92a      	bls.n	8027e14 <expf+0x6c>
 8027dbe:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 8027dc2:	d059      	beq.n	8027e78 <expf+0xd0>
 8027dc4:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8027dc8:	d303      	bcc.n	8027dd2 <expf+0x2a>
 8027dca:	ee30 0a00 	vadd.f32	s0, s0, s0
 8027dce:	bc70      	pop	{r4, r5, r6}
 8027dd0:	4770      	bx	lr
 8027dd2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8027e80 <expf+0xd8>
 8027dd6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8027dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027dde:	dd03      	ble.n	8027de8 <expf+0x40>
 8027de0:	bc70      	pop	{r4, r5, r6}
 8027de2:	2000      	movs	r0, #0
 8027de4:	f7ff bfba 	b.w	8027d5c <__math_oflowf>
 8027de8:	eddf 7a26 	vldr	s15, [pc, #152]	; 8027e84 <expf+0xdc>
 8027dec:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8027df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027df4:	d503      	bpl.n	8027dfe <expf+0x56>
 8027df6:	bc70      	pop	{r4, r5, r6}
 8027df8:	2000      	movs	r0, #0
 8027dfa:	f7ff bfa3 	b.w	8027d44 <__math_uflowf>
 8027dfe:	eddf 7a22 	vldr	s15, [pc, #136]	; 8027e88 <expf+0xe0>
 8027e02:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8027e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027e0a:	d503      	bpl.n	8027e14 <expf+0x6c>
 8027e0c:	bc70      	pop	{r4, r5, r6}
 8027e0e:	2000      	movs	r0, #0
 8027e10:	f7ff bf9e 	b.w	8027d50 <__math_may_uflowf>
 8027e14:	4b1d      	ldr	r3, [pc, #116]	; (8027e8c <expf+0xe4>)
 8027e16:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8027e1a:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 8027e1e:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 8027e22:	eeb0 7b44 	vmov.f64	d7, d4
 8027e26:	eea5 7b06 	vfma.f64	d7, d5, d6
 8027e2a:	ee17 5a10 	vmov	r5, s14
 8027e2e:	ee37 7b44 	vsub.f64	d7, d7, d4
 8027e32:	f005 021f 	and.w	r2, r5, #31
 8027e36:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8027e3a:	e9d2 4600 	ldrd	r4, r6, [r2]
 8027e3e:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8027e42:	ed93 4b50 	vldr	d4, [r3, #320]	; 0x140
 8027e46:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 8027e4a:	eea4 0b07 	vfma.f64	d0, d4, d7
 8027e4e:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 8027e52:	2300      	movs	r3, #0
 8027e54:	1918      	adds	r0, r3, r4
 8027e56:	ea4f 32c5 	mov.w	r2, r5, lsl #15
 8027e5a:	eb42 0106 	adc.w	r1, r2, r6
 8027e5e:	eea5 6b07 	vfma.f64	d6, d5, d7
 8027e62:	ee27 5b07 	vmul.f64	d5, d7, d7
 8027e66:	ec41 0b17 	vmov	d7, r0, r1
 8027e6a:	eea6 0b05 	vfma.f64	d0, d6, d5
 8027e6e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8027e72:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8027e76:	e7aa      	b.n	8027dce <expf+0x26>
 8027e78:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8027e90 <expf+0xe8>
 8027e7c:	e7a7      	b.n	8027dce <expf+0x26>
 8027e7e:	bf00      	nop
 8027e80:	42b17217 	.word	0x42b17217
 8027e84:	c2cff1b4 	.word	0xc2cff1b4
 8027e88:	c2ce8ecf 	.word	0xc2ce8ecf
 8027e8c:	0809b9b8 	.word	0x0809b9b8
 8027e90:	00000000 	.word	0x00000000

08027e94 <checkint>:
 8027e94:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8027e98:	2b7e      	cmp	r3, #126	; 0x7e
 8027e9a:	dd10      	ble.n	8027ebe <checkint+0x2a>
 8027e9c:	2b96      	cmp	r3, #150	; 0x96
 8027e9e:	dc0c      	bgt.n	8027eba <checkint+0x26>
 8027ea0:	2201      	movs	r2, #1
 8027ea2:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8027ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8027eaa:	1e5a      	subs	r2, r3, #1
 8027eac:	4202      	tst	r2, r0
 8027eae:	d106      	bne.n	8027ebe <checkint+0x2a>
 8027eb0:	4203      	tst	r3, r0
 8027eb2:	bf0c      	ite	eq
 8027eb4:	2002      	moveq	r0, #2
 8027eb6:	2001      	movne	r0, #1
 8027eb8:	4770      	bx	lr
 8027eba:	2002      	movs	r0, #2
 8027ebc:	4770      	bx	lr
 8027ebe:	2000      	movs	r0, #0
 8027ec0:	4770      	bx	lr
 8027ec2:	0000      	movs	r0, r0
 8027ec4:	0000      	movs	r0, r0
	...

08027ec8 <powf>:
 8027ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027eca:	ee10 1a10 	vmov	r1, s0
 8027ece:	ee10 6a90 	vmov	r6, s1
 8027ed2:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 8027ed6:	0072      	lsls	r2, r6, #1
 8027ed8:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8027edc:	b085      	sub	sp, #20
 8027ede:	f102 30ff 	add.w	r0, r2, #4294967295
 8027ee2:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 8027ee6:	d256      	bcs.n	8027f96 <powf+0xce>
 8027ee8:	4298      	cmp	r0, r3
 8027eea:	d256      	bcs.n	8027f9a <powf+0xd2>
 8027eec:	2000      	movs	r0, #0
 8027eee:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 8027ef2:	4ea3      	ldr	r6, [pc, #652]	; (8028180 <powf+0x2b8>)
 8027ef4:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8027ef8:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 8027efc:	f3c2 47c3 	ubfx	r7, r2, #19, #4
 8027f00:	0dd2      	lsrs	r2, r2, #23
 8027f02:	eb06 1707 	add.w	r7, r6, r7, lsl #4
 8027f06:	05d2      	lsls	r2, r2, #23
 8027f08:	1a8b      	subs	r3, r1, r2
 8027f0a:	ed97 5b00 	vldr	d5, [r7]
 8027f0e:	ee07 3a90 	vmov	s15, r3
 8027f12:	15d2      	asrs	r2, r2, #23
 8027f14:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8027f18:	eea5 6b07 	vfma.f64	d6, d5, d7
 8027f1c:	ed97 5b02 	vldr	d5, [r7, #8]
 8027f20:	ee26 2b06 	vmul.f64	d2, d6, d6
 8027f24:	ee22 1b02 	vmul.f64	d1, d2, d2
 8027f28:	ee07 2a90 	vmov	s15, r2
 8027f2c:	ed96 4b40 	vldr	d4, [r6, #256]	; 0x100
 8027f30:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8027f34:	ee37 7b05 	vadd.f64	d7, d7, d5
 8027f38:	ed96 5b42 	vldr	d5, [r6, #264]	; 0x108
 8027f3c:	ed96 3b44 	vldr	d3, [r6, #272]	; 0x110
 8027f40:	eea6 5b04 	vfma.f64	d5, d6, d4
 8027f44:	ed96 4b46 	vldr	d4, [r6, #280]	; 0x118
 8027f48:	eea6 4b03 	vfma.f64	d4, d6, d3
 8027f4c:	ed96 3b48 	vldr	d3, [r6, #288]	; 0x120
 8027f50:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 8027f54:	eea6 7b03 	vfma.f64	d7, d6, d3
 8027f58:	eea2 7b04 	vfma.f64	d7, d2, d4
 8027f5c:	eea5 7b01 	vfma.f64	d7, d5, d1
 8027f60:	ee20 0b07 	vmul.f64	d0, d0, d7
 8027f64:	ee10 1a90 	vmov	r1, s1
 8027f68:	2300      	movs	r3, #0
 8027f6a:	2700      	movs	r7, #0
 8027f6c:	f3c1 32cf 	ubfx	r2, r1, #15, #16
 8027f70:	f248 06be 	movw	r6, #32958	; 0x80be
 8027f74:	429f      	cmp	r7, r3
 8027f76:	bf08      	it	eq
 8027f78:	4296      	cmpeq	r6, r2
 8027f7a:	f080 80b1 	bcs.w	80280e0 <powf+0x218>
 8027f7e:	ed9f 7b78 	vldr	d7, [pc, #480]	; 8028160 <powf+0x298>
 8027f82:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8027f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027f8a:	dd79      	ble.n	8028080 <powf+0x1b8>
 8027f8c:	b005      	add	sp, #20
 8027f8e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8027f92:	f7ff bee3 	b.w	8027d5c <__math_oflowf>
 8027f96:	4298      	cmp	r0, r3
 8027f98:	d32d      	bcc.n	8027ff6 <powf+0x12e>
 8027f9a:	b952      	cbnz	r2, 8027fb2 <powf+0xea>
 8027f9c:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 8027fa0:	005b      	lsls	r3, r3, #1
 8027fa2:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 8027fa6:	f240 80cd 	bls.w	8028144 <powf+0x27c>
 8027faa:	ee30 0a20 	vadd.f32	s0, s0, s1
 8027fae:	b005      	add	sp, #20
 8027fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027fb2:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8027fb6:	d105      	bne.n	8027fc4 <powf+0xfc>
 8027fb8:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 8027fbc:	0076      	lsls	r6, r6, #1
 8027fbe:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 8027fc2:	e7f0      	b.n	8027fa6 <powf+0xde>
 8027fc4:	004b      	lsls	r3, r1, #1
 8027fc6:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8027fca:	d8ee      	bhi.n	8027faa <powf+0xe2>
 8027fcc:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8027fd0:	d1eb      	bne.n	8027faa <powf+0xe2>
 8027fd2:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8027fd6:	f000 80b5 	beq.w	8028144 <powf+0x27c>
 8027fda:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8027fde:	ea6f 0606 	mvn.w	r6, r6
 8027fe2:	bf34      	ite	cc
 8027fe4:	2300      	movcc	r3, #0
 8027fe6:	2301      	movcs	r3, #1
 8027fe8:	0ff6      	lsrs	r6, r6, #31
 8027fea:	42b3      	cmp	r3, r6
 8027fec:	f040 80ad 	bne.w	802814a <powf+0x282>
 8027ff0:	ee20 0aa0 	vmul.f32	s0, s1, s1
 8027ff4:	e7db      	b.n	8027fae <powf+0xe6>
 8027ff6:	004f      	lsls	r7, r1, #1
 8027ff8:	1e7a      	subs	r2, r7, #1
 8027ffa:	429a      	cmp	r2, r3
 8027ffc:	d31c      	bcc.n	8028038 <powf+0x170>
 8027ffe:	2900      	cmp	r1, #0
 8028000:	ee20 0a00 	vmul.f32	s0, s0, s0
 8028004:	da0f      	bge.n	8028026 <powf+0x15e>
 8028006:	ee10 0a90 	vmov	r0, s1
 802800a:	f7ff ff43 	bl	8027e94 <checkint>
 802800e:	2801      	cmp	r0, #1
 8028010:	d109      	bne.n	8028026 <powf+0x15e>
 8028012:	eeb1 0a40 	vneg.f32	s0, s0
 8028016:	b947      	cbnz	r7, 802802a <powf+0x162>
 8028018:	2e00      	cmp	r6, #0
 802801a:	dac8      	bge.n	8027fae <powf+0xe6>
 802801c:	b005      	add	sp, #20
 802801e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8028022:	f7ff bea1 	b.w	8027d68 <__math_divzerof>
 8028026:	2000      	movs	r0, #0
 8028028:	e7f5      	b.n	8028016 <powf+0x14e>
 802802a:	2e00      	cmp	r6, #0
 802802c:	dabf      	bge.n	8027fae <powf+0xe6>
 802802e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8028032:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8028036:	e7ba      	b.n	8027fae <powf+0xe6>
 8028038:	2900      	cmp	r1, #0
 802803a:	da1f      	bge.n	802807c <powf+0x1b4>
 802803c:	ee10 0a90 	vmov	r0, s1
 8028040:	f7ff ff28 	bl	8027e94 <checkint>
 8028044:	b920      	cbnz	r0, 8028050 <powf+0x188>
 8028046:	b005      	add	sp, #20
 8028048:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 802804c:	f7ff be9c 	b.w	8027d88 <__math_invalidf>
 8028050:	2801      	cmp	r0, #1
 8028052:	bf14      	ite	ne
 8028054:	2000      	movne	r0, #0
 8028056:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 802805a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 802805e:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8028062:	f4bf af44 	bcs.w	8027eee <powf+0x26>
 8028066:	eddf 7a47 	vldr	s15, [pc, #284]	; 8028184 <powf+0x2bc>
 802806a:	ee20 0a27 	vmul.f32	s0, s0, s15
 802806e:	ee10 3a10 	vmov	r3, s0
 8028072:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8028076:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 802807a:	e738      	b.n	8027eee <powf+0x26>
 802807c:	2000      	movs	r0, #0
 802807e:	e7ee      	b.n	802805e <powf+0x196>
 8028080:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8028168 <powf+0x2a0>
 8028084:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8028088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802808c:	dd10      	ble.n	80280b0 <powf+0x1e8>
 802808e:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 8028092:	2800      	cmp	r0, #0
 8028094:	d15c      	bne.n	8028150 <powf+0x288>
 8028096:	9302      	str	r3, [sp, #8]
 8028098:	eddd 7a02 	vldr	s15, [sp, #8]
 802809c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80280a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80280a4:	eef4 7a47 	vcmp.f32	s15, s14
 80280a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80280ac:	f47f af6e 	bne.w	8027f8c <powf+0xc4>
 80280b0:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8028170 <powf+0x2a8>
 80280b4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80280b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80280bc:	d804      	bhi.n	80280c8 <powf+0x200>
 80280be:	b005      	add	sp, #20
 80280c0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80280c4:	f7ff be3e 	b.w	8027d44 <__math_uflowf>
 80280c8:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8028178 <powf+0x2b0>
 80280cc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80280d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80280d4:	d504      	bpl.n	80280e0 <powf+0x218>
 80280d6:	b005      	add	sp, #20
 80280d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80280dc:	f7ff be38 	b.w	8027d50 <__math_may_uflowf>
 80280e0:	4b29      	ldr	r3, [pc, #164]	; (8028188 <powf+0x2c0>)
 80280e2:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 80280e6:	ee30 6b07 	vadd.f64	d6, d0, d7
 80280ea:	ed8d 6b00 	vstr	d6, [sp]
 80280ee:	ee36 7b47 	vsub.f64	d7, d6, d7
 80280f2:	ee30 7b47 	vsub.f64	d7, d0, d7
 80280f6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80280fa:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80280fe:	f006 011f 	and.w	r1, r6, #31
 8028102:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8028106:	e9d1 ce00 	ldrd	ip, lr, [r1]
 802810a:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 802810e:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 8028112:	ed93 4b46 	vldr	d4, [r3, #280]	; 0x118
 8028116:	eea7 6b05 	vfma.f64	d6, d7, d5
 802811a:	ee27 5b07 	vmul.f64	d5, d7, d7
 802811e:	1836      	adds	r6, r6, r0
 8028120:	2300      	movs	r3, #0
 8028122:	eb13 040c 	adds.w	r4, r3, ip
 8028126:	ea4f 31c6 	mov.w	r1, r6, lsl #15
 802812a:	eb41 050e 	adc.w	r5, r1, lr
 802812e:	eea7 0b04 	vfma.f64	d0, d7, d4
 8028132:	ec45 4b17 	vmov	d7, r4, r5
 8028136:	eea6 0b05 	vfma.f64	d0, d6, d5
 802813a:	ee20 0b07 	vmul.f64	d0, d0, d7
 802813e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8028142:	e734      	b.n	8027fae <powf+0xe6>
 8028144:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8028148:	e731      	b.n	8027fae <powf+0xe6>
 802814a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 802818c <powf+0x2c4>
 802814e:	e72e      	b.n	8027fae <powf+0xe6>
 8028150:	9303      	str	r3, [sp, #12]
 8028152:	eddd 7a03 	vldr	s15, [sp, #12]
 8028156:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 802815a:	ee77 7a67 	vsub.f32	s15, s14, s15
 802815e:	e7a1      	b.n	80280a4 <powf+0x1dc>
 8028160:	ffd1d571 	.word	0xffd1d571
 8028164:	405fffff 	.word	0x405fffff
 8028168:	ffa3aae2 	.word	0xffa3aae2
 802816c:	405fffff 	.word	0x405fffff
 8028170:	00000000 	.word	0x00000000
 8028174:	c062c000 	.word	0xc062c000
 8028178:	00000000 	.word	0x00000000
 802817c:	c062a000 	.word	0xc062a000
 8028180:	0809bb00 	.word	0x0809bb00
 8028184:	4b000000 	.word	0x4b000000
 8028188:	0809b9b8 	.word	0x0809b9b8
 802818c:	00000000 	.word	0x00000000

08028190 <__errno>:
 8028190:	4b01      	ldr	r3, [pc, #4]	; (8028198 <__errno+0x8>)
 8028192:	6818      	ldr	r0, [r3, #0]
 8028194:	4770      	bx	lr
 8028196:	bf00      	nop
 8028198:	20007718 	.word	0x20007718

0802819c <_close>:
 802819c:	4b02      	ldr	r3, [pc, #8]	; (80281a8 <_close+0xc>)
 802819e:	2258      	movs	r2, #88	; 0x58
 80281a0:	601a      	str	r2, [r3, #0]
 80281a2:	f04f 30ff 	mov.w	r0, #4294967295
 80281a6:	4770      	bx	lr
 80281a8:	2000a2b8 	.word	0x2000a2b8

080281ac <_fstat>:
 80281ac:	4b02      	ldr	r3, [pc, #8]	; (80281b8 <_fstat+0xc>)
 80281ae:	2258      	movs	r2, #88	; 0x58
 80281b0:	601a      	str	r2, [r3, #0]
 80281b2:	f04f 30ff 	mov.w	r0, #4294967295
 80281b6:	4770      	bx	lr
 80281b8:	2000a2b8 	.word	0x2000a2b8

080281bc <_getpid>:
 80281bc:	4b02      	ldr	r3, [pc, #8]	; (80281c8 <_getpid+0xc>)
 80281be:	2258      	movs	r2, #88	; 0x58
 80281c0:	601a      	str	r2, [r3, #0]
 80281c2:	f04f 30ff 	mov.w	r0, #4294967295
 80281c6:	4770      	bx	lr
 80281c8:	2000a2b8 	.word	0x2000a2b8

080281cc <_isatty>:
 80281cc:	4b02      	ldr	r3, [pc, #8]	; (80281d8 <_isatty+0xc>)
 80281ce:	2258      	movs	r2, #88	; 0x58
 80281d0:	601a      	str	r2, [r3, #0]
 80281d2:	2000      	movs	r0, #0
 80281d4:	4770      	bx	lr
 80281d6:	bf00      	nop
 80281d8:	2000a2b8 	.word	0x2000a2b8

080281dc <_kill>:
 80281dc:	4b02      	ldr	r3, [pc, #8]	; (80281e8 <_kill+0xc>)
 80281de:	2258      	movs	r2, #88	; 0x58
 80281e0:	601a      	str	r2, [r3, #0]
 80281e2:	f04f 30ff 	mov.w	r0, #4294967295
 80281e6:	4770      	bx	lr
 80281e8:	2000a2b8 	.word	0x2000a2b8

080281ec <_lseek>:
 80281ec:	4b02      	ldr	r3, [pc, #8]	; (80281f8 <_lseek+0xc>)
 80281ee:	2258      	movs	r2, #88	; 0x58
 80281f0:	601a      	str	r2, [r3, #0]
 80281f2:	f04f 30ff 	mov.w	r0, #4294967295
 80281f6:	4770      	bx	lr
 80281f8:	2000a2b8 	.word	0x2000a2b8

080281fc <_read>:
 80281fc:	4b02      	ldr	r3, [pc, #8]	; (8028208 <_read+0xc>)
 80281fe:	2258      	movs	r2, #88	; 0x58
 8028200:	601a      	str	r2, [r3, #0]
 8028202:	f04f 30ff 	mov.w	r0, #4294967295
 8028206:	4770      	bx	lr
 8028208:	2000a2b8 	.word	0x2000a2b8

0802820c <_sbrk>:
 802820c:	4b04      	ldr	r3, [pc, #16]	; (8028220 <_sbrk+0x14>)
 802820e:	6819      	ldr	r1, [r3, #0]
 8028210:	4602      	mov	r2, r0
 8028212:	b909      	cbnz	r1, 8028218 <_sbrk+0xc>
 8028214:	4903      	ldr	r1, [pc, #12]	; (8028224 <_sbrk+0x18>)
 8028216:	6019      	str	r1, [r3, #0]
 8028218:	6818      	ldr	r0, [r3, #0]
 802821a:	4402      	add	r2, r0
 802821c:	601a      	str	r2, [r3, #0]
 802821e:	4770      	bx	lr
 8028220:	20009704 	.word	0x20009704
 8028224:	2000a2c8 	.word	0x2000a2c8

08028228 <_write>:
 8028228:	4b02      	ldr	r3, [pc, #8]	; (8028234 <_write+0xc>)
 802822a:	2258      	movs	r2, #88	; 0x58
 802822c:	601a      	str	r2, [r3, #0]
 802822e:	f04f 30ff 	mov.w	r0, #4294967295
 8028232:	4770      	bx	lr
 8028234:	2000a2b8 	.word	0x2000a2b8

08028238 <_exit>:
 8028238:	e7fe      	b.n	8028238 <_exit>
	...

0802823c <_init>:
 802823c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802823e:	bf00      	nop
 8028240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8028242:	bc08      	pop	{r3}
 8028244:	469e      	mov	lr, r3
 8028246:	4770      	bx	lr

08028248 <_fini>:
 8028248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802824a:	bf00      	nop
 802824c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802824e:	bc08      	pop	{r3}
 8028250:	469e      	mov	lr, r3
 8028252:	4770      	bx	lr
